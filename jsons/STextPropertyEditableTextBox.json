[
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SMultiLineEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiLineEditableTextBox"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "IEditableTextProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableTextProperty"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EDITORWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EDITORWIDGETS_API"
  },
  {
    "label": "FAvailableStringTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAvailableStringTable"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "EditedNamespace()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Fonts / SlateFontInfo . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Internationalization / TextPackageNamespaceUtil . h \" # include \" Layout / Visibility . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" Misc / TextFilter . h \" # include \" Styling / AppStyle . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / ISlateStyle . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" Types / SlateStructs . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / SListView . h \" class SComboButton ; class SEditableTextBox ; class SMultiLineEditableTextBox ; class SSearchBox ; class SWidget ; class UObject ; class UPackage ; struct FFocusEvent ; struct FGeometry ; struct FSlateBrush ; class IEditableTextProperty { public : enum class ETextPropertyEditAction : uint8 {)",
    "insertText": "EditedNamespace(uint8)TextNamespaceUtil::ETextEditAction::Namespace, EditedKey = (uint8)TextNamespaceUtil::ETextEditAction::Key, EditedSource = (uint8)"
  },
  {
    "label": "IEditableTextProperty()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IEditableTextProperty()"
  },
  {
    "label": "IsMultiLineText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMultiLineText()"
  },
  {
    "label": "IsPassword()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPassword()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "IsDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultValue()"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipText()"
  },
  {
    "label": "GetNumTexts()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTexts()"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetText(const int32 InIndex)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const int32 InIndex, const FText& InText)"
  },
  {
    "label": "IsValidText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidText(const FText& InText, FText& OutErrorMsg)"
  },
  {
    "label": "GetStableTextId()",
    "kind": "Method",
    "detail": "Function (# if USE_STABLE_LOCALIZATION_KEYS void)",
    "insertText": "GetStableTextId(const int32 InIndex, const ETextPropertyEditAction InEditAction, const FString& InTextSource, const FString& InProposedNamespace, const FString& InProposedKey, FString& OutStableNamespace, FString& OutStableKey)"
  },
  {
    "label": "StaticStableTextId()",
    "kind": "Method",
    "detail": "Function (# endif protected : # if USE_STABLE_LOCALIZATION_KEYS void)",
    "insertText": "StaticStableTextId(UObject* InObject, const ETextPropertyEditAction InEditAction, const FString& InTextSource, const FString& InProposedNamespace, const FString& InProposedKey, FString& OutStableNamespace, FString& OutStableKey)"
  },
  {
    "label": "StaticStableTextId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticStableTextId(UPackage* InPackage, const ETextPropertyEditAction InEditAction, const FString& InTextSource, const FString& InProposedNamespace, const FString& InProposedKey, FString& OutStableNamespace, FString& OutStableKey)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# endif } ; class STextPropertyEditableStringTableReference : public SCompoundWidget {)",
    "insertText": "SLATE_BEGIN_ARGS(STextPropertyEditableStringTableReference) : _ComboStyle(&FCoreStyle::Get().GetWidgetStyle<FComboBoxStyle>(\"ComboBox\")) , _ButtonStyle(&FAppStyle::Get().GetWidgetStyle<FButtonStyle>(\"SimpleButton\")) , _AllowUnlink(false)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FComboBoxStyle, ComboStyle) SLATE_STYLE_ARGUMENT(FButtonStyle, ButtonStyle) SLATE_ARGUMENT(FSlateFontInfo, Font) SLATE_ARGUMENT(bool, AllowUnlink) SLATE_END_ARGS() public: void Construct(const FArguments& Arguments, const TSharedRef<IEditableTextProperty>& InEditableTextProperty)"
  },
  {
    "label": "GetTableIdAndKey()",
    "kind": "Method",
    "detail": "Function (private : struct FAvailableStringTable { FName TableId ; FText DisplayName ; } ; void)",
    "insertText": "GetTableIdAndKey(FName& OutTableId, FString& OutKey)"
  },
  {
    "label": "SetTableIdAndKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTableIdAndKey(const FName InTableId, const FString& InKey)"
  },
  {
    "label": "OnOptionsFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOptionsFilterTextChanged(const FText& InNewText)"
  },
  {
    "label": "OnKeysFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeysFilterTextChanged(const FText& InNewText)"
  },
  {
    "label": "OnGetStringTableComboOptions()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGetStringTableComboOptions()"
  },
  {
    "label": "OnGenerateStringTableComboOption()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class ITableRow>)",
    "insertText": "OnGenerateStringTableComboOption(TSharedPtr<FAvailableStringTable> InItem, const TSharedRef<class STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnGetStringTableKeyOptions()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGetStringTableKeyOptions()"
  },
  {
    "label": "OnGenerateStringTableKeyOption()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class ITableRow>)",
    "insertText": "OnGenerateStringTableKeyOption(TSharedPtr<FString> InItem, const TSharedRef<class STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnStringTableComboChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStringTableComboChanged(TSharedPtr<FAvailableStringTable> NewSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "UpdateStringTableComboOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStringTableComboOptions()"
  },
  {
    "label": "GetStringTableComboContent()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetStringTableComboContent()"
  },
  {
    "label": "GetStringTableComboToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetStringTableComboToolTip()"
  },
  {
    "label": "OnKeyComboChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeyComboChanged(TSharedPtr<FString> NewSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "UpdateStringTableKeyOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStringTableKeyOptions()"
  },
  {
    "label": "GetKeyComboContent()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetKeyComboContent()"
  },
  {
    "label": "GetKeyComboToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetKeyComboToolTip()"
  },
  {
    "label": "IsUnlinkEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnlinkEnabled()"
  },
  {
    "label": "OnUnlinkClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnUnlinkClicked()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IEditableTextProperty> EditableTextProperty ; using FOptionTextFilter = TTextFilter<TSharedPtr<FAvailableStringTable>> ; TSharedPtr<FOptionTextFilter> OptionTextFilter ; TSharedPtr<SSearchBox> OptionsSearchBox ; using FKeyTextFilter = TTextFilter<TSharedPtr<FString>> ; TSharedPtr<FKeyTextFilter> KeyTextFilter ; TSharedPtr<SSearchBox> KeysSearchBox ; TSharedPtr<SComboButton> StringTableOptionsCombo ; TSharedPtr<SListView<TSharedPtr<FAvailableStringTable>>> StringTableOptionsList ; TSharedPtr<SComboButton> StringTableKeysCombo ; TSharedPtr<SListView<TSharedPtr<FString>>> StringTableKeysList ; TArray<TSharedPtr<FAvailableStringTable>> StringTableComboOptions ; TArray<TSharedPtr<FString>> KeyComboOptions ; } ; class STextPropertyEditableTextBox : public SCompoundWidget {)",
    "insertText": "SLATE_BEGIN_ARGS(STextPropertyEditableTextBox) : _Style(&FCoreStyle::Get().GetWidgetStyle<FEditableTextBoxStyle>(\"NormalEditableTextBox\")) , _Font() , _ForegroundColor() , _WrapTextAt(0.0f) , _AutoWrapText(false) , _MinDesiredWidth() , _MaxDesiredHeight(300.0f)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FEditableTextBoxStyle, Style) SLATE_ATTRIBUTE(FSlateFontInfo, Font) SLATE_ATTRIBUTE(FSlateColor, ForegroundColor) SLATE_ATTRIBUTE(float, WrapTextAt) SLATE_ATTRIBUTE(bool, AutoWrapText) SLATE_ATTRIBUTE(FOptionalSize, MinDesiredWidth) SLATE_ATTRIBUTE(FOptionalSize, MaxDesiredHeight) SLATE_END_ARGS() public: void Construct(const FArguments& Arguments, const TSharedRef<IEditableTextProperty>& InEditableTextProperty)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "GetDesiredWidth()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "GetDesiredWidth(float& OutMinDesiredWidth, float& OutMaxDesiredWidth)"
  },
  {
    "label": "CanEdit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEdit()"
  },
  {
    "label": "IsCultureInvariantFlagEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCultureInvariantFlagEnabled()"
  },
  {
    "label": "IsSourceTextReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSourceTextReadOnly()"
  },
  {
    "label": "IsIdentityReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIdentityReadOnly()"
  },
  {
    "label": "IsTextLocalizable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextLocalizable()"
  },
  {
    "label": "GetTextValue()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTextValue()"
  },
  {
    "label": "OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextChanged(const FText& NewText)"
  },
  {
    "label": "OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextCommitted(const FText& NewText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "SetTextError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextError(const FText& InErrorMsg)"
  },
  {
    "label": "GetNamespaceValue()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNamespaceValue()"
  },
  {
    "label": "OnNamespaceChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNamespaceChanged(const FText& NewText)"
  },
  {
    "label": "OnNamespaceCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNamespaceCommitted(const FText& NewText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GetKeyValue()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetKeyValue()"
  },
  {
    "label": "OnKeyChanged()",
    "kind": "Method",
    "detail": "Function (# if USE_STABLE_LOCALIZATION_KEYS void)",
    "insertText": "OnKeyChanged(const FText& NewText)"
  },
  {
    "label": "OnKeyCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeyCommitted(const FText& NewText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GetPackageValue()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPackageValue()"
  },
  {
    "label": "GetLocalizableCheckState()",
    "kind": "Method",
    "detail": "Function (# endif ECheckBoxState)",
    "insertText": "GetLocalizableCheckState()"
  },
  {
    "label": "HandleLocalizableCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLocalizableCheckStateChanged(ECheckBoxState InCheckboxState)"
  },
  {
    "label": "GetAdvancedTextSettingsComboToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAdvancedTextSettingsComboToolTip()"
  },
  {
    "label": "GetAdvancedTextSettingsComboImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetAdvancedTextSettingsComboImage()"
  },
  {
    "label": "IsValidIdentity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidIdentity(const FText& InIdentity, FText* OutReason = nullptr, const FText* InErrorCtx = nullptr)"
  }
]