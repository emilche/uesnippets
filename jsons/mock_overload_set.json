[
  {
    "label": "MockSingleOverload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MockSingleOverload"
  },
  {
    "label": "MockOverloadSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MockOverloadSet"
  },
  {
    "label": "Ret()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_MOCK_OVERLOAD_SET_H_ # define ABSL_RANDOM_INTERNAL_MOCK_OVERLOAD_SET_H_ # include<type_traits> # include \" gmock / gmock . h \" # include \" absl / random / internal / mock_helpers . h \" # include \" absl / random / mocking_bit_gen . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { template<DistrT,Fn> struct MockSingleOverload ; template<DistrT,Ret,. . . Args> struct MockSingleOverload<DistrT,)",
    "insertText": "Ret(MockingBitGen&, Args...)"
  },
  {
    "label": "Ret()",
    "kind": "Method",
    "detail": "Function (using KeyT =)",
    "insertText": "Ret(DistrT, std::tuple<Args...>)"
  },
  {
    "label": "gmock_Call()",
    "kind": "Method",
    "detail": "Function (template<MockURBG> auto)",
    "insertText": "gmock_Call(MockURBG& gen, const ::testing::Matcher<Args>&... matchers) -> decltype(MockHelpers::MockFor<KeyT>(gen).gmock_Call(matchers...))"
  },
  {
    "label": "Ret()",
    "kind": "Method",
    "detail": "Function (} } ; template<DistrT,Ret,Arg,. . . Args> struct MockSingleOverload<DistrT,)",
    "insertText": "Ret(Arg, MockingBitGen&, Args...)"
  },
  {
    "label": "Ret()",
    "kind": "Method",
    "detail": "Function (using KeyT =)",
    "insertText": "Ret(DistrT, std::tuple<Arg, Args...>)"
  },
  {
    "label": "gmock_Call()",
    "kind": "Method",
    "detail": "Function (template<MockURBG> auto)",
    "insertText": "gmock_Call(const ::testing::Matcher<Arg>& matcher, MockURBG& gen, const ::testing::Matcher<Args>&... matchers) -> decltype(MockHelpers::MockFor<KeyT>(gen).gmock_Call(matcher, matchers...))"
  }
]