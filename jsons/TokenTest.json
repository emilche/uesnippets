[
  {
    "label": "TTestToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTestToken"
  },
  {
    "label": "TTestToken()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Serialization / StructuredArchive . h \" # include \" Templates / UnrealTemplate . h \" template<InValueType> class TTestToken { int32 ConstructorCalls ; int32 DestructorCalls ; int32 CopyConstructorCalls ; int32 MoveConstructorCalls ; int32 CopyAssignmentCalls ; int32 MoveAssignmentCalls ; public : using ValueType = InValueType ;)",
    "insertText": "TTestToken(const ValueType& value)"
  },
  {
    "label": "TTestToken()",
    "kind": "Method",
    "detail": "Function (ConstructorCalls + + ; Value = value ; })",
    "insertText": "TTestToken() noexcept : Value(ValueType{})"
  },
  {
    "label": "TTestToken()",
    "kind": "Method",
    "detail": "Function (ConstructorCalls + + ; })",
    "insertText": "TTestToken(TTestToken&& Other) noexcept : Value(MoveTemp(Other.Value))"
  },
  {
    "label": "TTestToken()",
    "kind": "Method",
    "detail": "Function (MoveConstructorCalls + + ; })",
    "insertText": "TTestToken(const TTestToken& Other) : Value(Other.Value)"
  },
  {
    "label": "TTestToken()",
    "kind": "Method",
    "detail": "Function (CopyConstructorCalls + + ; } ~)",
    "insertText": "TTestToken()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DestructorCalls + + ; } const ValueType&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Value = Other . Value ; CopyAssignmentCalls + + ; return* this ; } TTestToken&)",
    "insertText": "operator(TTestToken&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "MoveTemp(Other.Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MoveAssignmentCalls + + ; return* this ; } bool)",
    "insertText": "operator(const TTestToken& Other)"
  },
  {
    "label": "NumCopyCalls()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumCopyCalls()"
  },
  {
    "label": "EvenConstructionDestructionCalls()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EvenConstructionDestructionCalls(int32 ExpectedNum)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ConstructorCalls = 0 ; DestructorCalls = 0 ; CopyConstructorCalls = 0 ; MoveConstructorCalls = 0 ; CopyAssignmentCalls = 0 ; MoveAssignmentCalls = 0 ; } ValueType Value ; } ; template<InValueType> int32 TTestToken<InValueType>::ConstructorCalls = 0 ; template<InValueType> int32 TTestToken<InValueType>::DestructorCalls = 0 ; template<InValueType> int32 TTestToken<InValueType>::CopyConstructorCalls = 0 ; template<InValueType> int32 TTestToken<InValueType>::MoveConstructorCalls = 0 ; template<InValueType> int32 TTestToken<InValueType>::CopyAssignmentCalls = 0 ; template<InValueType> int32 TTestToken<InValueType>::MoveAssignmentCalls = 0 ; using int32Token = TTestToken<int32> ; template<InValueType> bool)",
    "insertText": "operator(const TTestToken<InValueType>& left, const TTestToken<InValueType>& right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<InValueType> bool)",
    "insertText": "operator(const TTestToken<InValueType>& left, const InValueType& right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<InValueType> FArchive&)",
    "insertText": "operator(FArchive& Ar, TTestToken<InValueType>& TestToken)"
  },
  {
    "label": "EnterRecord()",
    "kind": "Method",
    "detail": "Function (Slot .)",
    "insertText": "EnterRecord() << SA_VALUE(TEXT(\"Value\"), TestToken.Value)"
  }
]