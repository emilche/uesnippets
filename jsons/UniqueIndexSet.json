[
  {
    "label": "FUniqueIndexSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniqueIndexSet"
  },
  {
    "label": "FUniqueIndexSet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / UnrealMemory . h \" # include \" Templates / UnrealTemplate . h \" namespace UE { namespace Geometry { class FUniqueIndexSet { public : ~)",
    "insertText": "FUniqueIndexSet()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(int32 MaxIndexIn, int32 MaxValuesHint = 0)"
  },
  {
    "label": "NeedWords()",
    "kind": "Method",
    "detail": "Function (this -> MaxIndex = MaxIndexIn ; int32)",
    "insertText": "NeedWords(MaxIndex / 64)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (delete [ ] Bits ; } NumWords = NeedWords ; Bits = new int64 [ NumWords ] ; })",
    "insertText": "Memset(&Bits[0], (uint8)0, NeedWords * 8)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "Reset()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "Reserve(MaxValuesHint)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} const int32)",
    "insertText": "Num()"
  },
  {
    "label": "Indices()",
    "kind": "Method",
    "detail": "Function (} const TArray<int32>&)",
    "insertText": "Indices()"
  },
  {
    "label": "Bits()",
    "kind": "Method",
    "detail": "Function (int64& Word =)",
    "insertText": "Bits(int64)(Index / 64)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Offset(int64)(Index % 64)"
  },
  {
    "label": "Mask()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Mask(int64)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Word | = Mask ; Values .)",
    "insertText": "Add(Index)"
  },
  {
    "label": "Collect()",
    "kind": "Method",
    "detail": "Function (} template<ArrayType> void)",
    "insertText": "Collect(ArrayType& Storage)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "Reserve(Values.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "Add(Value)"
  },
  {
    "label": "TakeValues()",
    "kind": "Method",
    "detail": "Function (} } TArray<int32>&&)",
    "insertText": "TakeValues()"
  },
  {
    "label": "SwapValuesWith()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapValuesWith(TArray<int32>& OtherArray)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TArray<int32> Tmp =)",
    "insertText": "MoveTemp(Values)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Values =)",
    "insertText": "MoveTemp(OtherArray)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OtherArray =)",
    "insertText": "MoveTemp(Tmp)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : TArray<int32>::RangedForConstIteratorType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>::RangedForConstIteratorType)",
    "insertText": "end()"
  }
]