[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EDimension",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDimension"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "EErrorCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EErrorCode"
  },
  {
    "label": "FBXSDK_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_GEOMETRY_NURBS_CURVE_H_ # define _FBXSDK_SCENE_GEOMETRY_NURBS_CURVE_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / scene / geometry / fbxgeometry . h> # include<fbxsdk / scene / geometry / fbxline . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FBXSDK_DLL FbxNurbsCurve : public FbxGeometry {)",
    "insertText": "FBXSDK_OBJECT_DECLARE(FbxNurbsCurve,FbxGeometry)"
  },
  {
    "label": "GetAttributeType()",
    "kind": "Method",
    "detail": "Function (public : FbxNodeAttribute::EType)",
    "insertText": "GetAttributeType()"
  },
  {
    "label": "InitControlPoints()",
    "kind": "Method",
    "detail": "Function (enum EDimension { e2D = 2,e3D } ; enum EType { eOpen,eClosed,ePeriodic } ; void)",
    "insertText": "InitControlPoints(int pCount, EType pVType)"
  },
  {
    "label": "GetKnotVector()",
    "kind": "Method",
    "detail": "Function (double*)",
    "insertText": "GetKnotVector()"
  },
  {
    "label": "SetOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrder(int pOrder)"
  },
  {
    "label": "GetOrder()",
    "kind": "Method",
    "detail": "Function (mOrder = pOrder ; } int)",
    "insertText": "GetOrder()"
  },
  {
    "label": "GetStep()",
    "kind": "Method",
    "detail": "Function (mStep = pStep ; } int)",
    "insertText": "GetStep()"
  },
  {
    "label": "GetDimension()",
    "kind": "Method",
    "detail": "Function (mDimension = pDimension ; } EDimension)",
    "insertText": "GetDimension()"
  },
  {
    "label": "GetSpanCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetSpanCount()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EType)",
    "insertText": "GetType()"
  },
  {
    "label": "IsBezier()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBezier()"
  },
  {
    "label": "TessellateCurve()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "TessellateCurve(FbxArray<FbxVector4>& pPointArray, int pStep = 16)"
  },
  {
    "label": "TessellateCurve()",
    "kind": "Method",
    "detail": "Function (FbxLine*)",
    "insertText": "TessellateCurve(int pStep = 16)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS FbxObject&)",
    "insertText": "Copy(const FbxObject& pObject)"
  },
  {
    "label": "FullMultiplicity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FullMultiplicity()"
  },
  {
    "label": "SetControlPointAt()",
    "kind": "Method",
    "detail": "Function (enum EErrorCode { eNurbsCurveTypeUnknown,eWeightTooSmall,eKnotVectorError,eWrongNumberOfControlPoint,eErrorCount } ; bool mIsRational ; void)",
    "insertText": "SetControlPointAt(const FbxVector4 &pCtrlPoint , int pIndex)"
  },
  {
    "label": "SetControlPointAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControlPointAt(pCtrlPoint, pIndex)"
  },
  {
    "label": "InitControlPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitControlPoints(int pCount)"
  },
  {
    "label": "InitControlPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitControlPoints(pCount)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "Construct(const FbxObject* pFrom)"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destruct(bool pRecursive)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  }
]