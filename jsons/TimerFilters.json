[
  {
    "label": "ITimingProfilerTimerReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingProfilerTimerReader"
  },
  {
    "label": "FTimerNameFilterState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerNameFilterState"
  },
  {
    "label": "FTimerNameFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerNameFilter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMetadataFilterDataTypeEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetadataFilterDataTypeEntry"
  },
  {
    "label": "FMetadataFilterState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetadataFilterState"
  },
  {
    "label": "FMetadataFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetadataFilter"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / Input / SComboBox . h \" # include \" InsightsCore / Common / SimpleRtti . h \" # include \" InsightsCore / Filter / ViewModels / Filters . h \" namespace TraceServices { class ITimingProfilerTimerReader ; } namespace UE::Insights::TimingProfiler { class FTimerNameFilterState : public FFilterState {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTimerNameFilterState, FFilterState) public: FTimerNameFilterState(TSharedRef<FFilter> InFilter) : FFilterState(InFilter)"
  },
  {
    "label": "FTimerNameFilterState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimerNameFilterState(const FTimerNameFilterState& Other) : FFilterState(Other)"
  },
  {
    "label": "FTimerNameFilterState()",
    "kind": "Method",
    "detail": "Function (FilterValue = Other . FilterValue ; } ~)",
    "insertText": "FTimerNameFilterState()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update()"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyFilter(const FFilterContext& Context)"
  },
  {
    "label": "SetFilterValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterValue(FString InFilterValue)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (FilterValue = InFilterValue ; } bool)",
    "insertText": "Equals(const FFilterState& Other)"
  },
  {
    "label": "DeepCopy()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FFilterState>)",
    "insertText": "DeepCopy()"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (private : FString FilterValue ; TSet<uint32> TimerIds ; } ; class FTimerNameFilter : public FFilterWithSuggestions {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTimerNameFilter, FFilterWithSuggestions) public: FTimerNameFilter()"
  },
  {
    "label": "FTimerNameFilter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTimerNameFilter()"
  },
  {
    "label": "BuildFilterState()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FFilterState>)",
    "insertText": "BuildFilterState()"
  },
  {
    "label": "BuildFilterState()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FFilterState>)",
    "insertText": "BuildFilterState(const FFilterState& Other)"
  },
  {
    "label": "PopulateTimerNameSuggestionList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateTimerNameSuggestionList(const FString& Text, TArray<FString>& OutSuggestions)"
  },
  {
    "label": "FMetadataFilterDataTypeEntry()",
    "kind": "Method",
    "detail": "Function (} ; enum class EMetadataFilterDataType { Bool = 1,Int = 2,Double = 3,String = 4,} ; struct FMetadataFilterDataTypeEntry {)",
    "insertText": "FMetadataFilterDataTypeEntry(EMetadataFilterDataType InType, FText InName)"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (Type = InType ; Name = InName ; } EMetadataFilterDataType Type ; FText Name ; } ; class FMetadataFilterState : public FFilterState,public TSharedFromThis<FMetadataFilterState> {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FMetadataFilterState, FFilterState) public: FMetadataFilterState(TSharedRef<FFilter> InFilter)"
  },
  {
    "label": "FMetadataFilterState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetadataFilterState()"
  },
  {
    "label": "HasCustomUI()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCustomUI()"
  },
  {
    "label": "GetKeyTextBoxValue()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "GetKeyTextBoxValue()"
  },
  {
    "label": "OnKeyTextBoxValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeyTextBoxValueCommitted(const FText& InNewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "DataType_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "DataType_OnGenerateWidget(TSharedPtr<FMetadataFilterDataTypeEntry> InDataType)"
  },
  {
    "label": "DataType_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DataType_OnSelectionChanged(TSharedPtr<FMetadataFilterDataTypeEntry> InDataType, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "DataType_GetSelectionText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "DataType_GetSelectionText()"
  },
  {
    "label": "AvailableOperators_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "AvailableOperators_OnGenerateWidget(TSharedPtr<IFilterOperator> InOperator)"
  },
  {
    "label": "AvailableOperators_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AvailableOperators_OnSelectionChanged(TSharedPtr<IFilterOperator> InOperator, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "AvailableOperators_GetSelectionText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AvailableOperators_GetSelectionText()"
  },
  {
    "label": "GetTermTextBoxValue()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTermTextBoxValue()"
  },
  {
    "label": "OnTermTextBoxValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTermTextBoxValueCommitted(const FText& InNewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "ApplyFilterToMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyFilterToMetadata(TArrayView<const uint8>& Metadata)"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (private : FString Key ; FString Term ; typedef TVariant<double,int64,bool> ConvertedDataVariant ; ConvertedDataVariant ConvertedData ; bool bShowAllMetadataEvents = false ; TArray<TSharedPtr<FMetadataFilterDataTypeEntry>> AvailableDataTypes ; TSharedPtr<FMetadataFilterDataTypeEntry> SelectedDataType ; TArray<TSharedPtr<IFilterOperator>> AvailableOperators ; TArray<TSharedPtr<IFilterOperator>> BoolOperators ; TSharedPtr<SComboBox<TSharedPtr<IFilterOperator>>> OperatorComboBox ; const TraceServices::ITimingProfilerTimerReader* TimerReader ; } ; class FMetadataFilter : public FFilter {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FMetadataFilter, FFilter) public: FMetadataFilter()"
  },
  {
    "label": "FMetadataFilter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetadataFilter()"
  }
]