[
  {
    "label": "TaskTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTracker"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "TaskSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskSource"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "RegisteredTaskSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegisteredTaskSource"
  },
  {
    "label": "Transaction()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_TASK_SOURCE_H_ # define BASE_TASK_THREAD_POOL_TASK_SOURCE_H_ # include<stddef . h> # include \" base / base_export . h \" # include \" base / containers / intrusive_heap . h \" # include \" base / dcheck_is_on . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / ref_counted . h \" # include \" base / sequence_token . h \" # include \" base / task / common / checked_lock . h \" # include \" base / task / task_traits . h \" # include \" base / task / thread_pool / task . h \" # include \" base / task / thread_pool / task_source_sort_key . h \" # include \" base / threading / sequence_local_storage_map . h \" # include \" base / time / time . h \" namespace base { namespace internal { class TaskTracker ; enum class TaskSourceExecutionMode { kParallel,kSequenced,kSingleThread,kJob,kMax = kJob,} ; struct BASE_EXPORT ExecutionEnvironment { SequenceToken token ; raw_ptr<SequenceLocalStorageMap> sequence_local_storage ; } ; class BASE_EXPORT TaskSource : public RefCountedThreadSafe<TaskSource> { public : enum class RunStatus { kDisallowed,kAllowedNotSaturated,kAllowedSaturated,} ; class BASE_EXPORT Transaction { public :)",
    "insertText": "Transaction(Transaction&& other)"
  },
  {
    "label": "Transaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Transaction(const Transaction&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Transaction&)",
    "insertText": "operator(const Transaction&)"
  },
  {
    "label": "Transaction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Transaction()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "traits()",
    "kind": "Method",
    "detail": "Function (TaskTraits)",
    "insertText": "traits()"
  },
  {
    "label": "TaskSource()",
    "kind": "Method",
    "detail": "Function (private : class TaskSource ; TaskSource* task_source_ ; } ;)",
    "insertText": "TaskSource(const TaskTraits& traits, TaskRunner* task_runner, TaskSourceExecutionMode execution_mode)"
  },
  {
    "label": "TaskSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskSource(const TaskSource&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskSource&)",
    "insertText": "operator(const TaskSource&)"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] Transaction)",
    "insertText": "BeginTransaction()"
  },
  {
    "label": "GetExecutionEnvironment()",
    "kind": "Method",
    "detail": "Function (ExecutionEnvironment)",
    "insertText": "GetExecutionEnvironment()"
  },
  {
    "label": "GetRemainingConcurrency()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetRemainingConcurrency()"
  },
  {
    "label": "GetSortKey()",
    "kind": "Method",
    "detail": "Function (TaskSourceSortKey)",
    "insertText": "GetSortKey()"
  },
  {
    "label": "GetDelayedSortKey()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "GetDelayedSortKey()"
  },
  {
    "label": "SetImmediateHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImmediateHeapHandle(const HeapHandle& handle)"
  },
  {
    "label": "ClearImmediateHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearImmediateHeapHandle()"
  },
  {
    "label": "GetImmediateHeapHandle()",
    "kind": "Method",
    "detail": "Function (HeapHandle)",
    "insertText": "GetImmediateHeapHandle()"
  },
  {
    "label": "ClearDelayedHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDelayedHeapHandle()"
  },
  {
    "label": "GetDelayedHeapHandle()",
    "kind": "Method",
    "detail": "Function (HeapHandle)",
    "insertText": "GetDelayedHeapHandle()"
  },
  {
    "label": "priority_racy()",
    "kind": "Method",
    "detail": "Function (} TaskPriority)",
    "insertText": "priority_racy()"
  },
  {
    "label": "thread_policy()",
    "kind": "Method",
    "detail": "Function (} ThreadPolicy)",
    "insertText": "thread_policy()"
  },
  {
    "label": "task_runner()",
    "kind": "Method",
    "detail": "Function (} TaskRunner*)",
    "insertText": "task_runner()"
  },
  {
    "label": "TaskSource()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "TaskSource()"
  },
  {
    "label": "WillRunTask()",
    "kind": "Method",
    "detail": "Function (RunStatus)",
    "insertText": "WillRunTask()"
  },
  {
    "label": "TakeTask()",
    "kind": "Method",
    "detail": "Function (Task)",
    "insertText": "TakeTask(TaskSource::Transaction* transaction)"
  },
  {
    "label": "DidProcessTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DidProcessTask(TaskSource::Transaction* transaction)"
  },
  {
    "label": "WillReEnqueue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillReEnqueue(TimeTicks now, TaskSource::Transaction* transaction)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (Task)",
    "insertText": "Clear(TaskSource::Transaction* transaction)"
  },
  {
    "label": "UpdatePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePriority(TaskPriority priority)"
  },
  {
    "label": "UniversalPredecessor()",
    "kind": "Method",
    "detail": "Function (TaskTraits traits_ ; std::atomic<TaskPriority> priority_racy_ ; CheckedLock lock_ {)",
    "insertText": "UniversalPredecessor()"
  },
  {
    "label": "OnBecomeReady()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnBecomeReady()"
  },
  {
    "label": "RegisteredTaskSource()",
    "kind": "Method",
    "detail": "Function (class RefCountedThreadSafe<TaskSource> ; class RegisteredTaskSource ; HeapHandle immediate_pq_heap_handle_ ; HeapHandle delayed_pq_heap_handle_ ; raw_ptr<TaskRunner,DisableDanglingPtrDetection> task_runner_ ; TaskSourceExecutionMode execution_mode_ ; } ; class BASE_EXPORT RegisteredTaskSource { public :)",
    "insertText": "RegisteredTaskSource()"
  },
  {
    "label": "RegisteredTaskSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisteredTaskSource(std::nullptr_t)"
  },
  {
    "label": "RegisteredTaskSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisteredTaskSource(RegisteredTaskSource&& other)"
  },
  {
    "label": "RegisteredTaskSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisteredTaskSource(const RegisteredTaskSource&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RegisteredTaskSource&)",
    "insertText": "operator(const RegisteredTaskSource&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RegisteredTaskSource&)",
    "insertText": "operator(RegisteredTaskSource&& other)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} TaskSource*)",
    "insertText": "get()"
  },
  {
    "label": "CreateForTesting()",
    "kind": "Method",
    "detail": "Function (} RegisteredTaskSource)",
    "insertText": "CreateForTesting(scoped_refptr<TaskSource> task_source, TaskTracker* task_tracker = nullptr)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<TaskSource>)",
    "insertText": "Unregister()"
  },
  {
    "label": "TakeTask()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] Task)",
    "insertText": "TakeTask(TaskSource::Transaction* transaction = nullptr)"
  },
  {
    "label": "DidProcessTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DidProcessTask(TaskSource::Transaction* transaction = nullptr)"
  },
  {
    "label": "WillReEnqueue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillReEnqueue(TimeTicks now, TaskSource::Transaction* transaction = nullptr)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] Task)",
    "insertText": "Clear(TaskSource::Transaction* transaction = nullptr)"
  },
  {
    "label": "RegisteredTaskSource()",
    "kind": "Method",
    "detail": "Function (private : class TaskTracker ;)",
    "insertText": "RegisteredTaskSource(scoped_refptr<TaskSource> task_source, TaskTracker* task_tracker)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "TransactionWithRegisteredTaskSource()",
    "kind": "Method",
    "detail": "Function (kInitial,kReady,} ; State run_step_ = State::kInitial ; # endif scoped_refptr<TaskSource> task_source_ ; TaskTracker* task_tracker_ = nullptr ; } ; struct BASE_EXPORT TransactionWithRegisteredTaskSource { public :)",
    "insertText": "TransactionWithRegisteredTaskSource(RegisteredTaskSource task_source_in, TaskSource::Transaction transaction_in)"
  },
  {
    "label": "TransactionWithRegisteredTaskSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransactionWithRegisteredTaskSource(TransactionWithRegisteredTaskSource&& other)"
  },
  {
    "label": "TransactionWithRegisteredTaskSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransactionWithRegisteredTaskSource(const TransactionWithRegisteredTaskSource&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TransactionWithRegisteredTaskSource&)",
    "insertText": "operator(const TransactionWithRegisteredTaskSource&)"
  },
  {
    "label": "TransactionWithRegisteredTaskSource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TransactionWithRegisteredTaskSource()"
  },
  {
    "label": "FromTaskSource()",
    "kind": "Method",
    "detail": "Function (TransactionWithRegisteredTaskSource)",
    "insertText": "FromTaskSource(RegisteredTaskSource task_source_in)"
  },
  {
    "label": "TaskSourceAndTransaction()",
    "kind": "Method",
    "detail": "Function (RegisteredTaskSource task_source ; TaskSource::Transaction transaction ; } ; struct BASE_EXPORT TaskSourceAndTransaction { public :)",
    "insertText": "TaskSourceAndTransaction(scoped_refptr<TaskSource> task_source_in, TaskSource::Transaction transaction_in)"
  },
  {
    "label": "TaskSourceAndTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskSourceAndTransaction(TaskSourceAndTransaction&& other)"
  },
  {
    "label": "TaskSourceAndTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskSourceAndTransaction(const TaskSourceAndTransaction&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskSourceAndTransaction&)",
    "insertText": "operator(const TaskSourceAndTransaction&)"
  },
  {
    "label": "TaskSourceAndTransaction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TaskSourceAndTransaction()"
  },
  {
    "label": "FromTaskSource()",
    "kind": "Method",
    "detail": "Function (TaskSourceAndTransaction)",
    "insertText": "FromTaskSource(scoped_refptr<TaskSource> task_source_in)"
  }
]