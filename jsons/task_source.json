[
  {
    "label": "TaskTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTracker"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "TaskSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskSource"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "RegisteredTaskSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegisteredTaskSource"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "TaskTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTracker"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Transaction()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Transaction(Transaction&& other)"
  },
  {
    "label": "UpdatePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePriority(TaskPriority priority)"
  },
  {
    "label": "Transaction()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Transaction(TaskSource* task_source)"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (Transaction)",
    "insertText": "BeginTransaction()"
  },
  {
    "label": "SetImmediateHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImmediateHeapHandle(const HeapHandle& handle)"
  },
  {
    "label": "ClearImmediateHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearImmediateHeapHandle()"
  },
  {
    "label": "SetDelayedHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDelayedHeapHandle(const HeapHandle& handle)"
  },
  {
    "label": "ClearDelayedHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDelayedHeapHandle()"
  },
  {
    "label": "ClearForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearForTesting()"
  },
  {
    "label": "UpdatePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePriority(TaskPriority priority)"
  },
  {
    "label": "RegisteredTaskSource()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "RegisteredTaskSource()"
  },
  {
    "label": "CreateForTesting()",
    "kind": "Method",
    "detail": "Function (RegisteredTaskSource)",
    "insertText": "CreateForTesting(\n      scoped_refptr<TaskSource> task_source,\n      TaskTracker* task_tracker = nullptr)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<TaskSource>)",
    "insertText": "Unregister()"
  },
  {
    "label": "WillRunTask()",
    "kind": "Method",
    "detail": "Function (TaskSource::RunStatus)",
    "insertText": "WillRunTask()"
  },
  {
    "label": "OnBecomeReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBecomeReady()"
  },
  {
    "label": "TakeTask()",
    "kind": "Method",
    "detail": "Function (Task)",
    "insertText": "TakeTask(TaskSource::Transaction* transaction = nullptr)"
  },
  {
    "label": "DidProcessTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DidProcessTask(TaskSource::Transaction* transaction = nullptr)"
  },
  {
    "label": "WillReEnqueue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillReEnqueue(TimeTicks now,\n                     TaskSource::Transaction* transaction = nullptr)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (Task)",
    "insertText": "Clear(TaskSource::Transaction* transaction = nullptr)"
  },
  {
    "label": "TransactionWithRegisteredTaskSource()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "TransactionWithRegisteredTaskSource(RegisteredTaskSource task_source_in,\n                                      TaskSource::Transaction transaction_in)"
  },
  {
    "label": "FromTaskSource()",
    "kind": "Method",
    "detail": "Function (TransactionWithRegisteredTaskSource)",
    "insertText": "FromTaskSource(\n      RegisteredTaskSource task_source_in)"
  },
  {
    "label": "TaskSourceAndTransaction()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "TaskSourceAndTransaction(scoped_refptr<TaskSource> task_source_in,\n                           TaskSource::Transaction transaction_in)"
  },
  {
    "label": "FromTaskSource()",
    "kind": "Method",
    "detail": "Function (TaskSourceAndTransaction)",
    "insertText": "FromTaskSource(\n      scoped_refptr<TaskSource> task_source_in)"
  }
]