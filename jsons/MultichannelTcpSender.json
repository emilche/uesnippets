[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FMultichannelTcpSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultichannelTcpSender"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Serialization / BufferArchive . h \" # include \" NetworkMessage . h \" # include \" Misc / ScopedEvent . h \" # include \" Misc / ScopeLock . h \" # include \" HAL / RunnableThread . h \" # include \" HAL / Runnable . h \" # include \" MultichannelTcpGlobals . h \" class Error ; class FSocket ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FOnMultichannelTcpOkToSend, int32, uint32)"
  },
  {
    "label": "FMultichannelTcpSender()",
    "kind": "Method",
    "detail": "Function (class FMultichannelTcpSender : public FRunnable { enum { MaxPacket = 1 2 8* 1 0 2 4 - 8 } ; public :)",
    "insertText": "FMultichannelTcpSender(FSocket* InSocket, const FOnMultichannelTcpOkToSend& InOkToSendDelegate ) : BytesSent(0) , Socket(InSocket) , OkToSendDelegate(InOkToSendDelegate)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (Thread =)",
    "insertText": "Create(this, TEXT(\"FMultichannelTCPSender\"), 8 * 1024, TPri_AboveNormal)"
  },
  {
    "label": "FMultichannelTcpSender()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMultichannelTcpSender()"
  },
  {
    "label": "Kill()",
    "kind": "Method",
    "detail": "Function (Thread ->)",
    "insertText": "Kill(true)"
  },
  {
    "label": "AttemptResumeSending()",
    "kind": "Method",
    "detail": "Function (delete Thread ; } } public : void)",
    "insertText": "AttemptResumeSending()"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&SendBuffersCriticalSection)"
  },
  {
    "label": "AttemptResumeSendingInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttemptResumeSendingInternal()"
  },
  {
    "label": "GetBytesSent()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetBytesSent()"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>* SendBuffer = SendBuffers .)",
    "insertText": "FindRef(Channel)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (SendBuffer = new TArray<)",
    "insertText": "uint8()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SendBuffers .)",
    "insertText": "Add(Channel, SendBuffer)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32 OldCount = SendBuffer ->)",
    "insertText": "Num()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (SendBuffer ->)",
    "insertText": "AddUninitialized(Count)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(SendBuffer->GetData() + OldCount, Data, Count)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "Init()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>* SendBuffer = NULL ;)",
    "insertText": "for(TMap<uint32, TArray<uint8>*>::TIterator It(SendBuffers); It; ++It)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (Channel = It .)",
    "insertText": "Key()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (SendBuffer = It .)",
    "insertText": "Value()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(SendBuffer)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 Size = FMath::Min<)",
    "insertText": "int32(Num, MaxPacket)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "AddUninitialized(Size)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data.GetData(), SendBuffer->GetData(), Size)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (SendBuffer ->)",
    "insertText": "RemoveAt(0, Size)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} else { delete SendBuffer ; SendBuffers .)",
    "insertText": "Remove(Channel)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Data.Num())"
  },
  {
    "label": "FScopedEvent()",
    "kind": "Method",
    "detail": "Function (} } else { LocalEventToRestart = new)",
    "insertText": "FScopedEvent()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EventToRestart = LocalEventToRestart ; } })",
    "insertText": "if(Data.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FBufferArchive Ar ; uint32 Magic = MultichannelMagic ; Ar<<Magic ; Ar<<Channel ; Ar<<Data ;)",
    "insertText": "if(!FNFSMessageHeader::WrapAndSendPayload(Ar, FSimpleAbstractSocket_FSocket(Socket)))"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "InterlockedAdd(&BytesSent, Data.Num())"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} delete LocalEventToRestart ; } return 0 ; } void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Exit()"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (FScopedEvent* LocalEventToRestart = EventToRestart ; EventToRestart = NULL ; LocalEventToRestart ->)",
    "insertText": "Trigger()"
  }
]