[
  {
    "label": "IPooledRenderTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPooledRenderTarget"
  },
  {
    "label": "FSplineMeshSceneExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSplineMeshSceneExtension"
  },
  {
    "label": "FSplineMeshSceneUpdater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSplineMeshSceneUpdater"
  },
  {
    "label": "FSplineMeshSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSplineMeshSceneRenderer"
  },
  {
    "label": "FPrimitiveSlot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveSlot"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SpanAllocator . h \" # include \" SceneUniformBuffer . h \" # include \" RHIShaderPlatform . h \" # include \" RendererInterface . h \" # include \" Containers / Map . h \" # include \" RenderGraphResources . h \" # include \" SceneExtensions . h \" struct IPooledRenderTarget ; class FSplineMeshSceneExtension : public ISceneExtension { class FSplineMeshSceneUpdater ; class FSplineMeshSceneRenderer ;)",
    "insertText": "DECLARE_SCENE_EXTENSION(RENDERER_API, FSplineMeshSceneExtension)"
  },
  {
    "label": "ShouldCreateExtension()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldCreateExtension(FScene& InScene)"
  },
  {
    "label": "InitExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitExtension(FScene& InScene)"
  },
  {
    "label": "CreateUpdater()",
    "kind": "Method",
    "detail": "Function (Scene =& InScene ; } ISceneExtensionUpdater*)",
    "insertText": "CreateUpdater()"
  },
  {
    "label": "CreateRenderer()",
    "kind": "Method",
    "detail": "Function (ISceneExtensionRenderer*)",
    "insertText": "CreateRenderer()"
  },
  {
    "label": "NumRegisteredPrimitives()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumRegisteredPrimitives()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (} private : struct FPrimitiveSlot { uint32 FirstSplineIndex = INDEX_NONE ; uint32 NumSplines = 0 ; } ; using FPrimitiveSlotMap = TMap<const FPrimitiveSceneInfo*,FPrimitiveSlot> ; FPrimitiveSlot&)",
    "insertText": "Register(const FPrimitiveSceneInfo& PrimitiveSceneInfo)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(const FPrimitiveSceneInfo& PrimitiveSceneInfo)"
  },
  {
    "label": "AllocTextureSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocTextureSpace(const FPrimitiveSceneInfo& PrimitiveSceneInfo, uint32 NumSplines, FPrimitiveSlot& OutSlot)"
  },
  {
    "label": "GetNumSplines()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumSplines(const FPrimitiveSceneInfo& SceneInfo)"
  },
  {
    "label": "AssignCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignCoordinates(const FPrimitiveSceneInfo& SceneInfo, const FPrimitiveSlot& Slot)"
  },
  {
    "label": "AssignCoordinates()",
    "kind": "Method",
    "detail": "Function (template<TSplineMeshSceneProxy> void)",
    "insertText": "AssignCoordinates(TSplineMeshSceneProxy* SceneProxy, const FPrimitiveSlot& Slot)"
  },
  {
    "label": "DefragTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefragTexture()"
  },
  {
    "label": "GetInstanceIdLookupSRV()",
    "kind": "Method",
    "detail": "Function (FRDGBufferSRVRef)",
    "insertText": "GetInstanceIdLookupSRV(FRDGBuilder& GraphBuilder, bool bForceUpdate)"
  },
  {
    "label": "ClearAllCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllCache()"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION_UPDATER()",
    "kind": "Method",
    "detail": "Function (private : FScene* Scene = nullptr ; FPrimitiveSlotMap RegisteredPrimitives ; TArray<uint32> RegisteredInstanceIds ; FSpanAllocator SlotAllocator ; TRefCountPtr<IPooledRenderTarget> SavedPosTexture ; TRefCountPtr<IPooledRenderTarget> SavedRotTexture ; TRefCountPtr<FRDGPooledBuffer> SavedIdLookup ; bool bInstanceLookupDirty = true ; bool bOverflowError = false ; } ; class FSplineMeshSceneUpdater : public ISceneExtensionUpdater {)",
    "insertText": "DECLARE_SCENE_EXTENSION_UPDATER(FSplineMeshSceneUpdater, FSplineMeshSceneExtension)"
  },
  {
    "label": "FSplineMeshSceneUpdater()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSplineMeshSceneUpdater(FSplineMeshSceneExtension& InSceneData) : SceneData(&InSceneData)"
  },
  {
    "label": "PreSceneUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreSceneUpdate(FRDGBuilder& GraphBuilder, const FScenePreUpdateChangeSet& ChangeSet, FSceneUniformBuffer& SceneUniforms)"
  },
  {
    "label": "PostSceneUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSceneUpdate(FRDGBuilder& GraphBuilder, const FScenePostUpdateChangeSet& ChangeSet)"
  },
  {
    "label": "PostGPUSceneUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostGPUSceneUpdate(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& SceneUniforms)"
  },
  {
    "label": "AddUpdatePass()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddUpdatePass(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& SceneUniforms, FRDGTextureRef PosTexture, FRDGTextureRef RotTexture, FVector2f Extent, FVector2f InvExtent, bool bFullUpdate, bool bForceUpdate)"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION_RENDERER()",
    "kind": "Method",
    "detail": "Function (FSplineMeshSceneExtension* SceneData = nullptr ; TArray<uint32,FSceneRenderingArrayAllocator> UpdateRequests ; } ; class FSplineMeshSceneRenderer : public ISceneExtensionRenderer {)",
    "insertText": "DECLARE_SCENE_EXTENSION_RENDERER(FSplineMeshSceneRenderer, FSplineMeshSceneExtension)"
  },
  {
    "label": "FSplineMeshSceneRenderer()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSplineMeshSceneRenderer(FSplineMeshSceneExtension& InSceneData) : SceneData(&InSceneData)"
  },
  {
    "label": "UpdateSceneUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSceneUniformBuffer(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& SceneUniforms)"
  }
]