[
  {
    "label": "CheckedAddFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckedAddFastOp"
  },
  {
    "label": "CheckedSubFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckedSubFastOp"
  },
  {
    "label": "CheckedMulFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckedMulFastOp"
  },
  {
    "label": "ClampedAddFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedAddFastOp"
  },
  {
    "label": "ClampedSubFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedSubFastOp"
  },
  {
    "label": "ClampedMulFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedMulFastOp"
  },
  {
    "label": "ClampedNegFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedNegFastOp"
  },
  {
    "label": "UnsignedOrFloatForSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnsignedOrFloatForSize"
  },
  {
    "label": "M",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M"
  },
  {
    "label": "MathWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MathWrapper"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_NUMERICS_SAFE_MATH_SHARED_IMPL_H_ # define BASE_NUMERICS_SAFE_MATH_SHARED_IMPL_H_ # include<stddef . h> # include<stdint . h> # include<cassert> # include<climits> # include<cmath> # include<cstdlib> # include<limits> # include<type_traits> # include \" base / numerics / safe_conversions . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_ASMJS) #define BASE_HAS_OPTIMIZED_SAFE_MATH (0) #elif !defined(__native_client__) && \\ ((defined(__clang__) && \\ ((__clang_major__ > 3) || \\ (__clang_major__ == 3 && __clang_minor__ >= 4))) || \\ (defined(__GNUC__) && __GNUC__ >= 5)) #include \"base/numerics/safe_math_clang_gcc_impl.h\" #define BASE_HAS_OPTIMIZED_SAFE_MATH (1) #else #define BASE_HAS_OPTIMIZED_SAFE_MATH (0)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (namespace internal { # if ! BASE_HAS_OPTIMIZED_SAFE_MATH template<T,U> struct CheckedAddFastOp { const bool is_supported = false ; template<V> bool)",
    "insertText": "Do(T, U, V*)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,U> struct ClampedAddFastOp { const bool is_supported = false ; template<V> V)",
    "insertText": "Do(T, U)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct ClampedNegFastOp { const bool is_supported = false ; T)",
    "insertText": "Do(T)"
  },
  {
    "label": "NegateWrapper()",
    "kind": "Method",
    "detail": "Function (} } ; # endif # undef BASE_HAS_OPTIMIZED_SAFE_MATH template<Numeric,bool IsInteger = std::is_integral<Numeric>::value,bool IsFloat = std::is_floating_point<Numeric>::value> struct UnsignedOrFloatForSize ; template<Numeric> struct UnsignedOrFloatForSize<Numeric,true,false> { using type = std::make_unsigned<Numeric>::type ; } ; template<Numeric> struct UnsignedOrFloatForSize<Numeric,false,true> { using type = Numeric ; } ; template<T,std::enable_if<std::is_integral<T>::value>::type* = nullptr> T)",
    "insertText": "NegateWrapper(T value)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (using UnsignedT = std::make_unsigned<T>::type ; return static_cast<)",
    "insertText": "T(UnsignedT(0) - static_cast<UnsignedT>(value))"
  },
  {
    "label": "AbsWrapper()",
    "kind": "Method",
    "detail": "Function (} template<T,std::enable_if<std::is_floating_point<T>::value>::type* = nullptr> T)",
    "insertText": "AbsWrapper(T value)"
  },
  {
    "label": "Args()",
    "kind": "Method",
    "detail": "Function (\\ return CL_ABBR # # MathOp<CLASS # # OP_NAME # # Op,L,R,)",
    "insertText": "Args(lhs, rhs, \\ args...)"
  },
  {
    "label": "BASE_NUMERIC_ARITHMETIC_OPERATORS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "BASE_NUMERIC_ARITHMETIC_OPERATORS(CLASS, CL_ABBR, OP_NAME, OP, CMP_OP) \\ \\ template <typename L, typename R, \\ typename std::enable_if<Is##CLASS##Op<L, R>::value>::type* = \\ nullptr> \\ constexpr CLASS##Numeric< \\ typename MathWrapper<CLASS##OP_NAME##Op, L, R>::type> \\ operator OP(const L lhs, const R rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "decltype(lhs OP rhs)::template MathOp<CLASS##OP_NAME##Op>(lhs, \\ rhs)"
  },
  {
    "label": "CMP_OP()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ template<L> \\ template<R> \\ CLASS # # Numeric<L>& CLASS # # Numeric<L>::operator)",
    "insertText": "CMP_OP(\\ const R rhs)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (\\ return MathOp<CLASS # # OP_NAME # #)",
    "insertText": "Op(rhs)"
  }
]