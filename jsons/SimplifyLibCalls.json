[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "TargetLibraryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfo"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "FortifiedLibCallSimplifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FortifiedLibCallSimplifier"
  },
  {
    "label": "LibCallSimplifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibCallSimplifier"
  },
  {
    "label": "FortifiedLibCallSimplifier()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TRANSFORMS_UTILS_SIMPLIFYLIBCALLS_H # define LLVM_TRANSFORMS_UTILS_SIMPLIFYLIBCALLS_H # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Analysis / TargetLibraryInfo . h \" # include \" llvm / IR / IRBuilder . h \" namespace llvm { class Value ; class CallInst ; class DataLayout ; class Instruction ; class TargetLibraryInfo ; class BasicBlock ; class Function ; class FortifiedLibCallSimplifier { private : const TargetLibraryInfo* TLI ; bool OnlyLowerUnknownSize ; public :)",
    "insertText": "FortifiedLibCallSimplifier(const TargetLibraryInfo *TLI, bool OnlyLowerUnknownSize = false)"
  },
  {
    "label": "optimizeCall()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeCall(CallInst *CI)"
  },
  {
    "label": "optimizeMemCpyChk()",
    "kind": "Method",
    "detail": "Function (private : Value*)",
    "insertText": "optimizeMemCpyChk(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeMemMoveChk()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeMemMoveChk(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeMemSetChk()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeMemSetChk(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrpCpyChk()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrpCpyChk(CallInst *CI, IRBuilder<> &B, LibFunc::Func Func)"
  },
  {
    "label": "optimizeStrpNCpyChk()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrpNCpyChk(CallInst *CI, IRBuilder<> &B, LibFunc::Func Func)"
  },
  {
    "label": "isFortifiedCallFoldable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isFortifiedCallFoldable(CallInst *CI, unsigned ObjSizeOp, unsigned SizeOp, bool isString)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; class LibCallSimplifier { private : FortifiedLibCallSimplifier FortifiedSimplifier ; const DataLayout& DL ; const TargetLibraryInfo* TLI ; bool UnsafeFPShrink ; function_ref<)",
    "insertText": "void(Instruction *, Value *)"
  },
  {
    "label": "replaceAllUsesWithDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceAllUsesWithDefault(Instruction *I, Value *With)"
  },
  {
    "label": "replaceAllUsesWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceAllUsesWith(Instruction *I, Value *With)"
  },
  {
    "label": "LibCallSimplifier()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "LibCallSimplifier(const DataLayout &DL, const TargetLibraryInfo *TLI, function_ref<void(Instruction *, Value *)> Replacer = &replaceAllUsesWithDefault)"
  },
  {
    "label": "optimizeStrCat()",
    "kind": "Method",
    "detail": "Function (private : Value*)",
    "insertText": "optimizeStrCat(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrNCat()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrNCat(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrChr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrChr(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrRChr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrRChr(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrCmp()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrCmp(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrNCmp()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrNCmp(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrCpy()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrCpy(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStpCpy()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStpCpy(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrNCpy()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrNCpy(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrLen()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrLen(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrPBrk()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrPBrk(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrTo()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrTo(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrSpn()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrSpn(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrCSpn()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrCSpn(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStrStr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStrStr(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeMemChr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeMemChr(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeMemCmp()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeMemCmp(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeMemCpy()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeMemCpy(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeMemMove()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeMemMove(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeMemSet()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeMemSet(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeStringMemoryLibCall()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeStringMemoryLibCall(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeUnaryDoubleFP()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeUnaryDoubleFP(CallInst *CI, IRBuilder<> &B, bool CheckRetType)"
  },
  {
    "label": "optimizeBinaryDoubleFP()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeBinaryDoubleFP(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeCos()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeCos(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizePow()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizePow(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeExp2()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeExp2(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeFabs()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeFabs(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeSqrt()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeSqrt(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeSinCosPi()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeSinCosPi(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeFFS()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeFFS(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeAbs()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeAbs(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeIsDigit()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeIsDigit(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeIsAscii()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeIsAscii(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeToAscii()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeToAscii(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeErrorReporting()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeErrorReporting(CallInst *CI, IRBuilder<> &B, int StreamArg = -1)"
  },
  {
    "label": "optimizePrintF()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizePrintF(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeSPrintF()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeSPrintF(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeFPrintF()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeFPrintF(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeFWrite()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeFWrite(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeFPuts()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeFPuts(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizePuts()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizePuts(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "emitStrLenMemCpy()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "emitStrLenMemCpy(Value *Src, Value *Dst, uint64_t Len, IRBuilder<> &B)"
  },
  {
    "label": "classifyArgUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "classifyArgUse(Value *Val, BasicBlock *BB, bool IsFloat, SmallVectorImpl<CallInst *> &SinCalls, SmallVectorImpl<CallInst *> &CosCalls, SmallVectorImpl<CallInst *> &SinCosCalls)"
  },
  {
    "label": "replaceTrigInsts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceTrigInsts(SmallVectorImpl<CallInst *> &Calls, Value *Res)"
  },
  {
    "label": "optimizePrintFString()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizePrintFString(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeSPrintFString()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeSPrintFString(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "optimizeFPrintFString()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "optimizeFPrintFString(CallInst *CI, IRBuilder<> &B)"
  },
  {
    "label": "hasFloatVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasFloatVersion(StringRef FuncName)"
  }
]