[
  {
    "label": "FDynamicSubmesh3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicSubmesh3"
  },
  {
    "label": "FDynamicMeshEditResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshEditResult"
  },
  {
    "label": "FDynamicMeshEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshEditor"
  },
  {
    "label": "FLoopPairSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoopPairSet"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DynamicMesh / DynamicMesh3 . h \" # include \" DynamicMesh / DynamicMeshAttributeSet . h \" # include \" EdgeLoop . h \" # include \" Util / SparseIndexCollectionTypes . h \" # include \" DynamicMesh / MeshIndexMappings . h \" # include \" MeshAdapter . h \" namespace UE { namespace Geometry { struct FDynamicSubmesh3 ; struct FDynamicMeshEditResult { TArray<int> NewVertices ; TArray<int> NewTriangles ; TArray<FIndex2i> NewQuads ; TArray<TArray<int>> NewPolygons ; TArray<int> NewGroups ; TArray<TArray<int32>> NewNormalOverlayElements ; TArray<int32> NewColorOverlayElements ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetAllTriangles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllTriangles(TArray<int>& TrianglesOut)"
  },
  {
    "label": "FDynamicMeshEditor()",
    "kind": "Method",
    "detail": "Function (} ; class FDynamicMeshEditor { public : FDynamicMesh3* Mesh ;)",
    "insertText": "FDynamicMeshEditor(FDynamicMesh3* MeshIn)"
  },
  {
    "label": "RemoveIsolatedVertices()",
    "kind": "Method",
    "detail": "Function (Mesh = MeshIn ; } bool)",
    "insertText": "RemoveIsolatedVertices()"
  },
  {
    "label": "StitchVertexLoopsMinimal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StitchVertexLoopsMinimal(const TArray<int>& VertexLoop1, const TArray<int>& VertexLoop2, FDynamicMeshEditResult& ResultOut)"
  },
  {
    "label": "StitchVertexLoopToTriVidPairSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StitchVertexLoopToTriVidPairSequence(const TArray<TPair<int32, TPair<int8, int8>>>& TriVidPairs1, const TArray<int>& VertexLoop2, FDynamicMeshEditResult& ResultOut)"
  },
  {
    "label": "ConvertLoopToTriVidPairSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertLoopToTriVidPairSequence(const FDynamicMesh3& Mesh, const TArray<int32>& VidLoop, const TArray<int32>& EdgeLoop, TArray<TPair<int32, TPair<int8, int8>>>& TriVertPairsOut)"
  },
  {
    "label": "StitchSparselyCorrespondedVertexLoops()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StitchSparselyCorrespondedVertexLoops(const TArray<int>& VertexIDs1, const TArray<int>& MatchedIndices1, const TArray<int>& VertexIDs2, const TArray<int>& MatchedIndices2, FDynamicMeshEditResult& ResultOut, bool bReverseOrientation = false)"
  },
  {
    "label": "WeldVertexLoops()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WeldVertexLoops(const TArray<int32>& VertexLoop1, const TArray<int32>& VertexLoop2)"
  },
  {
    "label": "AddTriangleFan_OrderedVertexLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddTriangleFan_OrderedVertexLoop(int CenterVertex, const TArray<int>& VertexLoop, int GroupID, FDynamicMeshEditResult& ResultOut)"
  },
  {
    "label": "DuplicateTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateTriangles(const TArray<int>& Triangles, FMeshIndexMappings& IndexMaps, FDynamicMeshEditResult& ResultOut)"
  },
  {
    "label": "DisconnectTriangles()",
    "kind": "Method",
    "detail": "Function (struct FLoopPairSet { TArray<int32> OuterVertices ; TArray<int32> OuterEdges ; TArray<int32> InnerVertices ; TArray<int32> InnerEdges ; bool bOuterIncludesIsolatedVertices ; } ; bool)",
    "insertText": "DisconnectTriangles(const TArray<int>& Triangles, TArray<FLoopPairSet>& LoopSetOut, bool bHandleBoundaryVertices)"
  },
  {
    "label": "DisconnectTriangles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisconnectTriangles(const TSet<int>& TriangleSet, const TArray<FEdgeLoop>& BoundaryLoops, TArray<FLoopPairSet>& LoopSetOut, bool bAllowBoundaryVertices)"
  },
  {
    "label": "DisconnectTrianglesAlongEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisconnectTrianglesAlongEdges(const TSet<int32>& Edges, TArray<int32>* AddedVertexIDs = nullptr)"
  },
  {
    "label": "DisconnectTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectTriangles(const TArray<int>& Triangles, bool bPreventBowties = true)"
  },
  {
    "label": "SplitBowties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitBowties(FDynamicMeshEditResult& ResultOut)"
  },
  {
    "label": "SplitBowties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitBowties(int VertexID, TArray<int32>* NewVertices = nullptr)"
  },
  {
    "label": "SplitBowties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitBowties(int VertexID, FDynamicMeshEditResult& ResultOut)"
  },
  {
    "label": "SplitBowties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitBowties(VertexID, &ResultOut.NewVertices)"
  },
  {
    "label": "SplitBowtiesAtTriangles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SplitBowtiesAtTriangles(const TArray<int32>& TriangleIDs, FDynamicMeshEditResult& ResultOut)"
  },
  {
    "label": "ReinsertSubmesh()",
    "kind": "Method",
    "detail": "Function (enum class EDuplicateTriBehavior : uint8 { EnsureContinue,EnsureAbort,UseExisting,Replace } ; bool)",
    "insertText": "ReinsertSubmesh(const FDynamicSubmesh3& Submesh, FOptionallySparseIndexMap& SubToNewV, TArray<int>* NewTris = nullptr, EDuplicateTriBehavior DuplicateBehavior = EDuplicateTriBehavior::EnsureAbort)"
  },
  {
    "label": "RemoveTriangles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTriangles(const TArray<int>& Triangles, bool bRemoveIsolatedVerts)"
  },
  {
    "label": "RemoveSmallComponents()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RemoveSmallComponents(double MinVolume, double MinArea = 0.0, int MinTriangleCount = 0)"
  },
  {
    "label": "RemoveTriangles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTriangles(const TArray<int>& Triangles, bool bRemoveIsolatedVerts, TFunctionRef<void(int)> OnRemoveTriFunc)"
  },
  {
    "label": "ReverseTriangleOrientations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReverseTriangleOrientations(const TArray<int>& Triangles, bool bInvertNormals)"
  },
  {
    "label": "InvertTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvertTriangleNormals(const TArray<int>& Triangles)"
  },
  {
    "label": "ComputeAndSetQuadNormal()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "ComputeAndSetQuadNormal(const FIndex2i& QuadTris, bool bIsPlanar = false)"
  },
  {
    "label": "SetQuadNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQuadNormals(const FIndex2i& QuadTris, const FVector3f& Normal)"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(const TArray<int>& Triangles, const FVector3f& Normal)"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(const TArray<int>& Triangles)"
  },
  {
    "label": "SetTubeNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTubeNormals(const TArray<int>& Triangles, const TArray<int>& VertexIDs1, const TArray<int>& MatchedIndices1, const TArray<int>& VertexIDs2, const TArray<int>& MatchedIndices2, bool bReverseNormals = false)"
  },
  {
    "label": "SetQuadUVsFromProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQuadUVsFromProjection(const FIndex2i& QuadTris, const FFrame3d& ProjectionFrame, float UVScaleFactor = 1.0f, const FVector2f& UVTranslation = FVector2f::Zero(), int UVLayerIndex = 0)"
  },
  {
    "label": "SetTriangleUVsFromProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVsFromProjection(const TArray<int32>& Triangles, const FFrame3d& ProjectionFrame, float UVScaleFactor = 1.0f, const FVector2f& UVTranslation = FVector2f::Zero(), bool bShiftToOrigin = true, int32 UVLayerIndex = 0)"
  },
  {
    "label": "SetTriangleUVsFromProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVsFromProjection(const TArray<int>& Triangles, const FFrame3d& ProjectionFrame, const FVector2f& UVScale = FVector2f::One(), const FVector2f& UVTranslation = FVector2f::Zero(), int UVLayerIndex = 0, bool bShiftToOrigin = true, bool bNormalizeBeforeScaling = false)"
  },
  {
    "label": "SetGeneralTubeUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeneralTubeUVs(const TArray<int>& Triangles, const TArray<int>& VertexIDs1, const TArray<int>& MatchedIndices1, const TArray<int>& VertexIDs2, const TArray<int>& MatchedIndices2, const TArray<float>& UValues, const FVector3f& VDir, float UVScaleFactor = 1.0f, const FVector2f& UVTranslation = FVector2f::Zero(), int UVLayerIndex = 0)"
  },
  {
    "label": "RescaleAttributeUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RescaleAttributeUVs(float UVScale = 1.0f, bool bWorldSpace = false, int UVLayerIndex = 0, TOptional<FTransformSRT3d> ToWorld = TOptional<FTransformSRT3d>())"
  },
  {
    "label": "FindOrCreateDuplicateVertex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindOrCreateDuplicateVertex(int VertexID, FMeshIndexMappings& IndexMaps, FDynamicMeshEditResult& ResultOut)"
  },
  {
    "label": "FindOrCreateDuplicateGroup()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindOrCreateDuplicateGroup(int TriangleID, FMeshIndexMappings& IndexMaps, FDynamicMeshEditResult& ResultOut)"
  },
  {
    "label": "FindOrCreateDuplicateUV()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindOrCreateDuplicateUV(int ElementID, int UVLayerIndex, FMeshIndexMappings& IndexMaps)"
  },
  {
    "label": "FindOrCreateDuplicateNormal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindOrCreateDuplicateNormal(int ElementID, int NormalLayerIndex, FMeshIndexMappings& IndexMaps, FDynamicMeshEditResult* ResultOut = nullptr)"
  },
  {
    "label": "FindOrCreateDuplicateColor()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindOrCreateDuplicateColor(int ElementID, FMeshIndexMappings& IndexMaps, FDynamicMeshEditResult* ResultOut)"
  },
  {
    "label": "CopyAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAttributes(int FromTriangleID, int ToTriangleID, FMeshIndexMappings& IndexMaps, FDynamicMeshEditResult& ResultOut)"
  },
  {
    "label": "AppendMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMesh(const FDynamicMesh3* AppendMesh, FMeshIndexMappings& IndexMapsOut, TFunction<FVector3d(int, const FVector3d&)> PositionTransform = nullptr, TFunction<FVector3d(int, const FVector3d&)> NormalTransform = nullptr, bool bReverseOrientation = false)"
  },
  {
    "label": "AppendMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMesh(const TTriangleMeshAdapter<double>* AppendMesh, FMeshIndexMappings& IndexMapsOut, TFunction<FVector3d(int, const FVector3d&)> PositionTransform = nullptr)"
  },
  {
    "label": "AppendNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendNormals(const FDynamicMesh3* AppendMesh, const FDynamicMeshNormalOverlay* FromNormals, FDynamicMeshNormalOverlay* ToNormals, const FIndexMapi& VertexMap, const FIndexMapi& TriangleMap, TFunction<FVector3d(int, const FVector3d&)> NormalTransform, FIndexMapi& NormalMapOut)"
  },
  {
    "label": "AppendUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendUVs(const FDynamicMesh3* AppendMesh, const FDynamicMeshUVOverlay* FromUVs, FDynamicMeshUVOverlay* ToUVs, const FIndexMapi& VertexMap, const FIndexMapi& TriangleMap, FIndexMapi& UVMapOut)"
  },
  {
    "label": "AppendColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendColors(const FDynamicMesh3* AppendMesh, const FDynamicMeshColorOverlay* FromOverlay, FDynamicMeshColorOverlay* ToOverlay, const FIndexMapi& VertexMap, const FIndexMapi& TriangleMap, FIndexMapi& ColorMapOut)"
  },
  {
    "label": "AppendElementSubset()",
    "kind": "Method",
    "detail": "Function (template<RealType,int ElementSize> void)",
    "insertText": "AppendElementSubset(const FDynamicMesh3* FromMesh, const TSet<int>& TriangleROI, const TSet<int>& VertexROI, const TDynamicMeshOverlay<RealType, ElementSize>* FromOverlay, TDynamicMeshOverlay<RealType, ElementSize>* ToOverlay)"
  },
  {
    "label": "AppendTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTriangles(const FDynamicMesh3* SourceMesh, const TArrayView<const int>& SourceTriangles, FMeshIndexMappings& IndexMaps, FDynamicMeshEditResult& ResultOut, bool bComputeTriangleMap = true)"
  },
  {
    "label": "SplitMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitMesh(const FDynamicMesh3* SourceMesh, TArray<FDynamicMesh3>& SplitMeshes, TFunctionRef<int(int)> TriIDToMeshID, int DeleteMeshID = -1)"
  },
  {
    "label": "RemoveSeamsAtEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSeamsAtEdges(const TSet<int32>& EidsToRemoveAsSeams, TDynamicMeshOverlay<float, 2>* Overlay)"
  },
  {
    "label": "RemoveSeamsAtEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSeamsAtEdges(const TSet<int32>& EidsToRemoveAsSeams, TDynamicMeshOverlay<float, 3>* Overlay)"
  },
  {
    "label": "CreateSeamsAtEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateSeamsAtEdges(const TSet<int32>& EidsToMakeIntoSeams, TDynamicMeshOverlay<float, 2>* Overlay, TArray<int32>* AddedElementIDs = nullptr)"
  },
  {
    "label": "CreateSeamsAtEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateSeamsAtEdges(const TSet<int32>& EidsToMakeIntoSeams, TDynamicMeshOverlay<float, 3>* Overlay, TArray<int32>* AddedElementIDs = nullptr)"
  }
]