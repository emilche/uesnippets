[
  {
    "label": "FVector2DHalf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVector2DHalf"
  },
  {
    "label": "FVector2DHalf()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Math / Vector2D . h \" # include \" Math / Float16 . h \" struct FVector2DHalf { FFloat16 X ; FFloat16 Y ; public :)",
    "insertText": "FVector2DHalf()"
  },
  {
    "label": "FVector2DHalf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector2DHalf(const FFloat16& InX,const FFloat16& InY)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : FVector2DHalf&)",
    "insertText": "operator(const FVector2f& Vector2D)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVector2DHalf&)",
    "insertText": "operator(const FVector2d& Vector2D)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "FVector2f()"
  },
  {
    "label": "FVector2d()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "FVector2d()"
  },
  {
    "label": "SetTruncate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTruncate(float InX, float InY)"
  },
  {
    "label": "SetTruncate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTruncate(const FVector2f& Vector2D)"
  },
  {
    "label": "SetTruncate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTruncate(const FVector2d& Vector2D)"
  },
  {
    "label": "PackedData()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PackedData(X.Encoded & 0xFFFFFFFF) | (Y.Encoded << 16)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : FArchive&)",
    "insertText": "operator(FArchive& Ar, FVector2DHalf& V)"
  },
  {
    "label": "FVector2DHalf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector2DHalf(float InX, float InY ) : X(InX), Y(InY)"
  },
  {
    "label": "FVector2DHalf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector2DHalf(const FVector2f& Vector2D ) : X(Vector2D.X), Y(Vector2D.Y)"
  },
  {
    "label": "FVector2DHalf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector2DHalf(const FVector2d& Vector2D ) : X((float)Vector2D.X), Y((float)Vector2D.Y)"
  },
  {
    "label": "FFloat16()",
    "kind": "Method",
    "detail": "Function (X =)",
    "insertText": "FFloat16(Vector2D.X)"
  },
  {
    "label": "FFloat16()",
    "kind": "Method",
    "detail": "Function (Y =)",
    "insertText": "FFloat16(Vector2D.Y)"
  },
  {
    "label": "FFloat16()",
    "kind": "Method",
    "detail": "Function (X =)",
    "insertText": "FFloat16((float)Vector2D.X)"
  },
  {
    "label": "FFloat16()",
    "kind": "Method",
    "detail": "Function (Y =)",
    "insertText": "FFloat16((float)Vector2D.Y)"
  },
  {
    "label": "SetTruncate()",
    "kind": "Method",
    "detail": "Function (X .)",
    "insertText": "SetTruncate(InX)"
  },
  {
    "label": "SetTruncate()",
    "kind": "Method",
    "detail": "Function (Y .)",
    "insertText": "SetTruncate(InY)"
  },
  {
    "label": "SetTruncate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTruncate(Vector2D.X,Vector2D.Y)"
  },
  {
    "label": "SetTruncate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTruncate((float)Vector2D.X,(float)Vector2D.Y)"
  }
]