[
  {
    "label": "PointType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointType"
  },
  {
    "label": "TPolyline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPolyline"
  },
  {
    "label": "FPolyline2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPolyline2D"
  },
  {
    "label": "TPolyline()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Geo / Sampling / PolylineTools . h \" # include \" Geo / Surfaces / Surface . h \" # include \" UI / Display . h \" # include \" Serialization / Archive . h \" namespace UE::CADKernel { template<class PointType> class TPolyline { public : TArray<double> Coordinates ; TArray<PointType> Points ; TArray<PointType> Tangent ; TPolylineApproximator<PointType> Approximator ; bool bWithTangent = false ;)",
    "insertText": "TPolyline(const TArray<PointType>& InPoints, const TArray<double>& InCoordinates) : Coordinates(InCoordinates) , Points(InPoints) , Approximator(Coordinates, Points)"
  },
  {
    "label": "TPolyline()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPolyline(const TArray<PointType>& InPoints) : Points(InPoints) , Approximator(Coordinates, Points)"
  },
  {
    "label": "TPolyline()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPolyline() : Approximator(Coordinates, Points)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "ApproximatePoint()",
    "kind": "Method",
    "detail": "Function (Ar<<Points ; Ar<<Coordinates ; } PointType)",
    "insertText": "ApproximatePoint(double InCoordinate)"
  },
  {
    "label": "ApproximatePoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApproximatePoints(const TArray<double>& InCoordinates, TArray<PointType>& OutPoints)"
  },
  {
    "label": "ApproximatePoints()",
    "kind": "Method",
    "detail": "Function (Approximator .)",
    "insertText": "ApproximatePoints(InCoordinates, OutPoints)"
  },
  {
    "label": "GetSubPolyline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetSubPolyline(const FLinearBoundary& InBoundary, const EOrientation InOrientation, TArray<PointType>& OutPoints)"
  },
  {
    "label": "GetSubPolyline()",
    "kind": "Method",
    "detail": "Function (Approximator .)",
    "insertText": "GetSubPolyline(InBoundary, InOrientation, OutPoints)"
  },
  {
    "label": "UpdateSubPolylineBBox()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSubPolylineBBox(const FLinearBoundary& InBoundary, FPolylineBBox& OutBBox)"
  },
  {
    "label": "UpdateSubPolylineBBox()",
    "kind": "Method",
    "detail": "Function (Approximator .)",
    "insertText": "UpdateSubPolylineBBox(InBoundary, OutBBox)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Sample(const FLinearBoundary& Boundary, const double DesiredSegmentLength, TArray<double>& OutCoordinates)"
  },
  {
    "label": "SamplePolyline()",
    "kind": "Method",
    "detail": "Function (Approximator .)",
    "insertText": "SamplePolyline(Boundary, DesiredSegmentLength, OutCoordinates)"
  },
  {
    "label": "GetCoordinateOfProjectedPoint()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetCoordinateOfProjectedPoint(const FLinearBoundary& Boundary, const PointType& PointOnEdge, PointType& ProjectedPoint)"
  },
  {
    "label": "ProjectPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProjectPoints(const FLinearBoundary& InBoundary, const TArray<PointType>& InPointsToProject, TArray<double>& ProjectedPointCoordinates, TArray<PointType>& ProjectedPoints)"
  },
  {
    "label": "ProjectPointsToPolyline()",
    "kind": "Method",
    "detail": "Function (Approximator .)",
    "insertText": "ProjectPointsToPolyline(InBoundary, InPointsToProject, ProjectedPointCoordinates, ProjectedPoints)"
  },
  {
    "label": "GetPointAt()",
    "kind": "Method",
    "detail": "Function (} const PointType&)",
    "insertText": "GetPointAt(int32 Index)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(NewCoordinates, Coordinates)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "Empty(Coordinates.Num())"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetAt(int32 Index, double& Coordinate, PointType& Point)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (Coordinate = Coordinates [ Index ] ; Point = Points [ Index ] ; } int32)",
    "insertText": "Size()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int32 Number)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "Reserve(Number)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(int32 Slack = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "Empty(Slack)"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmplaceAt(int32 Index, TPolyline<PointType>& Polyline, int32 PointIndex)"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (Coordinates .)",
    "insertText": "EmplaceAt(Index, Polyline.Coordinates[PointIndex])"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "EmplaceAt(Index, Polyline.Points[PointIndex])"
  },
  {
    "label": "RemoveComplementaryPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveComplementaryPoints(int32 Offset)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Count = Points .)",
    "insertText": "Num()"
  },
  {
    "label": "Markers()",
    "kind": "Method",
    "detail": "Function (TBitArray<>)",
    "insertText": "Markers(true, Count)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Markers [ Index ] = false ; } int32 CurrentIndex = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < Count; ++Index)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Coordinates [ CurrentIndex ] = Coordinates [ Index ] ; Points [ CurrentIndex ] = Points [ Index ] ; + + CurrentIndex ; } } Coordinates .)",
    "insertText": "SetNum(CurrentIndex, EAllowShrinking::No)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Pop()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Coordinates .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetLength(const FLinearBoundary& InBoundary)"
  },
  {
    "label": "FindIntersectionsWithIso()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TPolyline<FPoint> FPolyline3D ; class FPolyline2D : public TPolyline<FPoint2D> { public : void)",
    "insertText": "FindIntersectionsWithIso(const EIso Iso, double IsoParameter, TArray<double>& OutIntersections)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutIntersections .)",
    "insertText": "Empty(8)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (int32 UIndex = Iso = = EIso::IsoU ? 0 : 1 ; int32 VIndex = Iso = = EIso::IsoU ? 1 : 0 ; TFunction<)",
    "insertText": "void(const int32, const int32, const int32)> ComputeIntersection = [&](const int32 Index1, const int32& Index2, const int32 MinIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutIntersections .)",
    "insertText": "Add(PolylineTools::LinearInterpolation(Coordinates, MinIndex, Intersection))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "for(int32 Index = 1; Index < Points.Num(); ++Index)"
  },
  {
    "label": "ComputeIntersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeIntersection(Index - 1, Index, Index - 1)"
  },
  {
    "label": "ComputeIntersection()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ComputeIntersection(Index, Index - 1, Index - 1)"
  }
]