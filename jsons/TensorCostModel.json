[
  {
    "label": "TensorOpCost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorOpCost"
  },
  {
    "label": "TensorCostModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorCostModel"
  },
  {
    "label": "MulCost()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_COST_MODEL_H # define EIGEN_CXX11_TENSOR_TENSOR_COST_MODEL_H namespace Eigen { class TensorOpCost { public : template<ArgType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE int)",
    "insertText": "MulCost()"
  },
  {
    "label": "TensorOpCost()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "TensorOpCost(double bytes_loaded, double bytes_stored, double compute_cycles) : bytes_loaded_(bytes_loaded), bytes_stored_(bytes_stored), compute_cycles_(compute_cycles)"
  },
  {
    "label": "TensorOpCost()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "TensorOpCost(double bytes_loaded, double bytes_stored, double compute_cycles, bool vectorized, double packet_size) : bytes_loaded_(bytes_loaded), bytes_stored_(bytes_stored), compute_cycles_(vectorized ? compute_cycles / packet_size : compute_cycles)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(bytes_loaded >= 0 && (numext::isfinite)(bytes_loaded))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(bytes_stored >= 0 && (numext::isfinite)(bytes_stored))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(compute_cycles >= 0 && (numext::isfinite)(compute_cycles))"
  },
  {
    "label": "bytes_loaded()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE double)",
    "insertText": "bytes_loaded()"
  },
  {
    "label": "cwiseMin()",
    "kind": "Method",
    "detail": "Function (bytes_loaded_ = 0 ; bytes_stored_ = 0 ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "cwiseMin(const TensorOpCost& rhs)"
  },
  {
    "label": "cwiseMax()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "cwiseMax(const TensorOpCost& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost&)",
    "insertText": "operator(const TensorOpCost& rhs)"
  },
  {
    "label": "bytes_stored()",
    "kind": "Method",
    "detail": "Function (bytes_stored_ + = rhs .)",
    "insertText": "bytes_stored()"
  },
  {
    "label": "compute_cycles()",
    "kind": "Method",
    "detail": "Function (compute_cycles_ + = rhs .)",
    "insertText": "compute_cycles()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bytes_loaded_* = rhs ; bytes_stored_* = rhs ; compute_cycles_* = rhs ; return* this ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "operator(TensorOpCost lhs, const TensorOpCost& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (lhs + = rhs ; return lhs ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "operator(TensorOpCost lhs, double rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (lhs* = rhs ; return lhs ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "operator(double lhs, TensorOpCost rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (rhs* = lhs ; return rhs ; } std::ostream&)",
    "insertText": "operator(std::ostream& os, const TensorOpCost& tc)"
  },
  {
    "label": "numThreads()",
    "kind": "Method",
    "detail": "Function (} private : double bytes_loaded_ ; double bytes_stored_ ; double compute_cycles_ ; } ; template<Device> class TensorCostModel { public : const int kDeviceCyclesPerComputeCycle = 1 ; const int kStartupCycles = 1 0 0 0 0 0 ; const int kPerThreadCycles = 1 0 0 0 0 0 ; const int kTaskSize = 4 0 0 0 0 ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE int)",
    "insertText": "numThreads(double output_size, const TensorOpCost& cost_per_coeff, int max_threads)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (threads = numext::mini<)",
    "insertText": "double(threads, GenericNumTraits<int>::highest())"
  },
  {
    "label": "taskSize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE double)",
    "insertText": "taskSize(double output_size, const TensorOpCost& cost_per_coeff)"
  },
  {
    "label": "totalCost()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE double)",
    "insertText": "totalCost(double output_size, const TensorOpCost& cost_per_coeff)"
  },
  {
    "label": "total_cost()",
    "kind": "Method",
    "detail": "Function (const double kLoadCycles = 1 . 0 / 6 4* 1 1 ; const double kStoreCycles = 1 . 0 / 6 4* 1 1 ; return output_size* cost_per_coeff .)",
    "insertText": "total_cost(kLoadCycles, kStoreCycles, kDeviceCyclesPerComputeCycle)"
  }
]