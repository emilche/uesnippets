[
  {
    "label": "silk_HP_variable_cutoff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_HP_variable_cutoff(\n    silk_encoder_state_Fxx          state_Fxx[]                             /* I/O  Encoder states                                                              */\n)"
  },
  {
    "label": "silk_encode_do_VAD_FIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_encode_do_VAD_FIX(\n    silk_encoder_state_FIX          *psEnc,                                 /* I/O  Pointer to Silk FIX encoder state                                           */\n    opus_int                        activity                                /* I    Decision of Opus voice activity detector                                    */\n)"
  },
  {
    "label": "silk_encode_frame_FIX()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_encode_frame_FIX(\n    silk_encoder_state_FIX          *psEnc,                                 /* I/O  Pointer to Silk FIX encoder state                                           */\n    opus_int32                      *pnBytesOut,                            /* O    Pointer to number of payload bytes;                                         */\n    ec_enc                          *psRangeEnc,                            /* I/O  compressor data structure                                                   */\n    opus_int                        condCoding,                             /* I    The type of conditional coding to use                                       */\n    opus_int                        maxBits,                                /* I    If > 0: maximum number of output bits                                       */\n    opus_int                        useCBR                                  /* I    Flag to force constant-bitrate operation                                    */\n)"
  },
  {
    "label": "silk_init_encoder()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_init_encoder(\n    silk_encoder_state_Fxx          *psEnc,                                 /* I/O  Pointer to Silk FIX encoder state                                           */\n    int                              arch                                   /* I    Run-time architecture                                                       */\n)"
  },
  {
    "label": "silk_control_encoder()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_control_encoder(\n    silk_encoder_state_Fxx          *psEnc,                                 /* I/O  Pointer to Silk encoder state                                               */\n    silk_EncControlStruct           *encControl,                            /* I    Control structure                                                           */\n    const opus_int                  allow_bw_switch,                        /* I    Flag to allow switching audio bandwidth                                     */\n    const opus_int                  channelNb,                              /* I    Channel number                                                              */\n    const opus_int                  force_fs_kHz\n)"
  },
  {
    "label": "silk_noise_shape_analysis_FIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_noise_shape_analysis_FIX(\n    silk_encoder_state_FIX          *psEnc,                                 /* I/O  Encoder state FIX                                                           */\n    silk_encoder_control_FIX        *psEncCtrl,                             /* I/O  Encoder control FIX                                                         */\n    const opus_int16                *pitch_res,                             /* I    LPC residual from pitch analysis                                            */\n    const opus_int16                *x,                                     /* I    Input signal [ frame_length + la_shape ]                                    */\n    int                              arch                                   /* I    Run-time architecture                                                       */\n)"
  },
  {
    "label": "silk_LTP_scale_ctrl_FIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_LTP_scale_ctrl_FIX(\n    silk_encoder_state_FIX          *psEnc,                                 /* I/O  encoder state                                                               */\n    silk_encoder_control_FIX        *psEncCtrl,                             /* I/O  encoder control                                                             */\n    opus_int                        condCoding                              /* I    The type of conditional coding to use                                       */\n)"
  },
  {
    "label": "silk_find_pitch_lags_FIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_find_pitch_lags_FIX(\n    silk_encoder_state_FIX          *psEnc,                                 /* I/O  encoder state                                                               */\n    silk_encoder_control_FIX        *psEncCtrl,                             /* I/O  encoder control                                                             */\n    opus_int16                      res[],                                  /* O    residual                                                                    */\n    const opus_int16                x[],                                    /* I    Speech signal                                                               */\n    int                             arch                                    /* I    Run-time architecture                                                       */\n)"
  },
  {
    "label": "silk_find_pred_coefs_FIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_find_pred_coefs_FIX(\n    silk_encoder_state_FIX          *psEnc,                                 /* I/O  encoder state                                                               */\n    silk_encoder_control_FIX        *psEncCtrl,                             /* I/O  encoder control                                                             */\n    const opus_int16                res_pitch[],                            /* I    Residual from pitch analysis                                                */\n    const opus_int16                x[],                                    /* I    Speech signal                                                               */\n    opus_int                        condCoding                              /* I    The type of conditional coding to use                                       */\n)"
  },
  {
    "label": "silk_find_LPC_FIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_find_LPC_FIX(\n    silk_encoder_state              *psEncC,                                /* I/O  Encoder state                                                               */\n    opus_int16                      NLSF_Q15[],                             /* O    NLSFs                                                                       */\n    const opus_int16                x[],                                    /* I    Input signal                                                                */\n    const opus_int32                minInvGain_Q30                          /* I    Inverse of max prediction gain                                              */\n)"
  },
  {
    "label": "silk_find_LTP_FIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_find_LTP_FIX(\n    opus_int32                      XXLTP_Q17[ MAX_NB_SUBFR * LTP_ORDER * LTP_ORDER ], /* O    Correlation matrix                                               */\n    opus_int32                      xXLTP_Q17[ MAX_NB_SUBFR * LTP_ORDER ],  /* O    Correlation vector                                                          */\n    const opus_int16                r_lpc[],                                /* I    Residual signal after LPC                                                   */\n    const opus_int                  lag[ MAX_NB_SUBFR ],                    /* I    LTP lags                                                                    */\n    const opus_int                  subfr_length,                           /* I    Subframe length                                                             */\n    const opus_int                  nb_subfr,                               /* I    Number of subframes                                                         */\n    int                             arch                                    /* I    Run-time architecture                                                       */\n)"
  },
  {
    "label": "silk_residual_energy_FIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_residual_energy_FIX(\n          opus_int32                nrgs[ MAX_NB_SUBFR ],                   /* O    Residual energy per subframe                                                */\n          opus_int                  nrgsQ[ MAX_NB_SUBFR ],                  /* O    Q value per subframe                                                        */\n    const opus_int16                x[],                                    /* I    Input signal                                                                */\n          opus_int16                a_Q12[ 2 ][ MAX_LPC_ORDER ],            /* I    AR coefs for each frame half                                                */\n    const opus_int32                gains[ MAX_NB_SUBFR ],                  /* I    Quantization gains                                                          */\n    const opus_int                  subfr_length,                           /* I    Subframe length                                                             */\n    const opus_int                  nb_subfr,                               /* I    Number of subframes                                                         */\n    const opus_int                  LPC_order,                              /* I    LPC order                                                                   */\n    int                             arch                                    /* I    Run-time architecture                                                       */\n)"
  },
  {
    "label": "silk_residual_energy16_covar_FIX()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_residual_energy16_covar_FIX(\n    const opus_int16                *c,                                     /* I    Prediction vector                                                           */\n    const opus_int32                *wXX,                                   /* I    Correlation matrix                                                          */\n    const opus_int32                *wXx,                                   /* I    Correlation vector                                                          */\n    opus_int32                      wxx,                                    /* I    Signal energy                                                               */\n    opus_int                        D,                                      /* I    Dimension                                                                   */\n    opus_int                        cQ                                      /* I    Q value for c vector 0 - 15                                                 */\n)"
  },
  {
    "label": "silk_process_gains_FIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_process_gains_FIX(\n    silk_encoder_state_FIX          *psEnc,                                 /* I/O  Encoder state                                                               */\n    silk_encoder_control_FIX        *psEncCtrl,                             /* I/O  Encoder control                                                             */\n    opus_int                        condCoding                              /* I    The type of conditional coding to use                                       */\n)"
  },
  {
    "label": "silk_corrMatrix_FIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_corrMatrix_FIX(\n    const opus_int16                *x,                                     /* I    x vector [L + order - 1] used to form data matrix X                         */\n    const opus_int                  L,                                      /* I    Length of vectors                                                           */\n    const opus_int                  order,                                  /* I    Max lag for correlation                                                     */\n    opus_int32                      *XX,                                    /* O    Pointer to X'*X correlation matrix [ order x order ]                        */\n    opus_int32                      *nrg,                                   /* O    Energy of x vector                                                          */\n    opus_int                        *rshifts,                               /* O    Right shifts of correlations                                                */\n    int                              arch                                   /* I    Run-time architecture                                                       */\n)"
  },
  {
    "label": "silk_corrVector_FIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_corrVector_FIX(\n    const opus_int16                *x,                                     /* I    x vector [L + order - 1] used to form data matrix X                         */\n    const opus_int16                *t,                                     /* I    Target vector [L]                                                           */\n    const opus_int                  L,                                      /* I    Length of vectors                                                           */\n    const opus_int                  order,                                  /* I    Max lag for correlation                                                     */\n    opus_int32                      *Xt,                                    /* O    Pointer to X'*t correlation vector [order]                                  */\n    const opus_int                  rshifts,                                /* I    Right shifts of correlations                                                */\n    int                             arch                                    /* I    Run-time architecture                                                       */\n)"
  }
]