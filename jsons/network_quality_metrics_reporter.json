[
  {
    "label": "NetworkQualityMetricsReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkQualityMetricsReporter"
  },
  {
    "label": "PCStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PCStats"
  },
  {
    "label": "NetworkQualityMetricsReporter()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_NETWORK_QUALITY_METRICS_REPORTER_H_ # define TEST_PC_E2E_NETWORK_QUALITY_METRICS_REPORTER_H_ # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" api / test / metrics / metrics_logger . h \" # include \" api / test / network_emulation_manager . h \" # include \" api / test / peerconnection_quality_test_fixture . h \" # include \" api / test / track_id_stream_info_map . h \" # include \" api / units / data_size . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { namespace webrtc_pc_e2e { class NetworkQualityMetricsReporter : public PeerConnectionE2EQualityTestFixture::QualityMetricsReporter { public :)",
    "insertText": "NetworkQualityMetricsReporter(EmulatedNetworkManagerInterface* alice_network, EmulatedNetworkManagerInterface* bob_network, test::MetricsLogger* metrics_logger)"
  },
  {
    "label": "NetworkQualityMetricsReporter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkQualityMetricsReporter()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(absl::string_view test_case_name, const TrackIdStreamInfoMap* reporter_helper)"
  },
  {
    "label": "OnStatsReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStatsReports(absl::string_view pc_label, const rtc::scoped_refptr<const RTCStatsReport>& report)"
  },
  {
    "label": "StopAndReportResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAndReportResults()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (private : struct PCStats { DataSize payload_received =)",
    "insertText": "Zero()"
  },
  {
    "label": "PopulateStats()",
    "kind": "Method",
    "detail": "Function (} ; EmulatedNetworkStats)",
    "insertText": "PopulateStats(EmulatedNetworkManagerInterface* network)"
  },
  {
    "label": "ReportStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportStats(const std::string& network_label, const EmulatedNetworkStats& stats, int64_t packet_loss)"
  },
  {
    "label": "ReportPCStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportPCStats(const std::string& pc_label, const PCStats& stats)"
  },
  {
    "label": "GetTestCaseName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetTestCaseName(const std::string& network_label)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::string test_case_name_ ; EmulatedNetworkManagerInterface* const alice_network_ ; EmulatedNetworkManagerInterface* const bob_network_ ; test::MetricsLogger* const metrics_logger_ ; Mutex lock_ ; std::map<std::string,PCStats> pc_stats_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]