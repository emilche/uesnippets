[
  {
    "label": "FPipelineFileCacheRasterizerState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPipelineFileCacheRasterizerState"
  },
  {
    "label": "FRayTracingPipelineStateInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingPipelineStateInitializer"
  },
  {
    "label": "FRHIRayTracingShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayTracingShader"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPipelineStateStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPipelineStateStats"
  },
  {
    "label": "FPipelineCacheFileFormatPSO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPipelineCacheFileFormatPSO"
  },
  {
    "label": "ComputeDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputeDescriptor"
  },
  {
    "label": "GraphicsDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphicsDescriptor"
  },
  {
    "label": "FPipelineFileCacheRayTracingDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPipelineFileCacheRayTracingDesc"
  },
  {
    "label": "FPipelineCacheFileFormatPSORead",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPipelineCacheFileFormatPSORead"
  },
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "IAsyncReadRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadRequest"
  },
  {
    "label": "FPipelineCachePSOHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPipelineCachePSOHeader"
  },
  {
    "label": "FPSOUsageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSOUsageData"
  },
  {
    "label": "FPipelineFileCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPipelineFileCacheManager"
  },
  {
    "label": "FPipelineCacheFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPipelineCacheFile"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / List . h \" # include \" Containers / StringView . h \" # include \" RHI . h \")",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"ShaderPipelineCache\"),STATGROUP_PipelineStateCache, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Total Graphics Pipeline State Count\"), STAT_TotalGraphicsPipelineStateCount, STATGROUP_PipelineStateCache, RHI_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Total Compute Pipeline State Count\"), STAT_TotalComputePipelineStateCount, STATGROUP_PipelineStateCache, RHI_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Total RayTracing Pipeline State Count\"), STAT_TotalRayTracingPipelineStateCount, STATGROUP_PipelineStateCache, RHI_API)"
  },
  {
    "label": "PIPELINE_CACHE_DEFAULT_ENABLED()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "PIPELINE_CACHE_DEFAULT_ENABLED(!WITH_EDITOR) #define PSO_COOKONLY_DATA (WITH_EDITOR || IS_PROGRAM)"
  },
  {
    "label": "FPipelineFileCacheRasterizerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPipelineFileCacheRasterizerState()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(*this)"
  },
  {
    "label": "FPipelineFileCacheRasterizerState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPipelineFileCacheRasterizerState(FRasterizerStateInitializerRHI const& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} float DepthBias ; float SlopeScaleDepthBias ; TEnumAsByte<ERasterizerFillMode> FillMode ; TEnumAsByte<ERasterizerCullMode> CullMode ; ERasterizerDepthClipMode DepthClipMode ; bool bAllowMSAA ; FPipelineFileCacheRasterizerState&)",
    "insertText": "operator(FRasterizerStateInitializerRHI const& Other)"
  },
  {
    "label": "FRasterizerStateInitializerRHI()",
    "kind": "Method",
    "detail": "Function (DepthBias = Other . DepthBias ; SlopeScaleDepthBias = Other . SlopeScaleDepthBias ; FillMode = Other . FillMode ; CullMode = Other . CullMode ; DepthClipMode = Other . DepthClipMode ; bAllowMSAA = Other . bAllowMSAA ; return* this ; } operator)",
    "insertText": "FRasterizerStateInitializerRHI()"
  },
  {
    "label": "Initializer()",
    "kind": "Method",
    "detail": "Function (FRasterizerStateInitializerRHI)",
    "insertText": "Initializer(FillMode, CullMode, DepthBias, SlopeScaleDepthBias, DepthClipMode, bAllowMSAA)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FPipelineFileCacheRasterizerState &Key)"
  },
  {
    "label": "KeyHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "KeyHash(*((uint32*)&Key.DepthBias) ^ *((uint32*)&Key.SlopeScaleDepthBias))"
  },
  {
    "label": "KeyHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeyHash(Key.FillMode << 8)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (KeyHash ^ = Key . CullMode ; KeyHash ^ = Key . DepthClipMode = = ERasterizerDepthClipMode::DepthClamp ? 0 x951f4c3b : 0 ; KeyHash ^ = Key . bAllowMSAA ? 0 x694ea601 : 0 ; return KeyHash ; } FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(const FStringView& Src)"
  },
  {
    "label": "FPipelineStateStats()",
    "kind": "Method",
    "detail": "Function (} ; class FRayTracingPipelineStateInitializer ; class FRHIRayTracingShader ; enum class ERayTracingPipelineCacheFlags : uint8 ; struct FPipelineStateStats {)",
    "insertText": "FPipelineStateStats() : FirstFrameUsed(-1) , LastFrameUsed(-1) , CreateCount(0) , TotalBindCount(0) , PSOHash(0)"
  },
  {
    "label": "FPipelineStateStats()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPipelineStateStats()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateStats(FPipelineStateStats* Stats)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FPipelineStateStats& Info)"
  },
  {
    "label": "AddToReadableString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToReadableString(TReadableStringBuilder& OutBuilder)"
  },
  {
    "label": "HeaderLine()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "HeaderLine()"
  },
  {
    "label": "ShadersToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ShadersToString()"
  },
  {
    "label": "AddShadersToReadableString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddShadersToReadableString(TReadableStringBuilder& OutBuilder)"
  },
  {
    "label": "ShaderHeaderLine()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ShaderHeaderLine()"
  },
  {
    "label": "ShadersFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShadersFromString(const FStringView& Src)"
  },
  {
    "label": "StateToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "StateToString()"
  },
  {
    "label": "AddStateToReadableString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStateToReadableString(TReadableStringBuilder& OutBuilder)"
  },
  {
    "label": "StateHeaderLine()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "StateHeaderLine()"
  },
  {
    "label": "StateFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StateFromString(const FStringView& Src)"
  },
  {
    "label": "ReduceRTFlags()",
    "kind": "Method",
    "detail": "Function (ETextureCreateFlags)",
    "insertText": "ReduceRTFlags(ETextureCreateFlags InFlags)"
  },
  {
    "label": "ReduceDSFlags()",
    "kind": "Method",
    "detail": "Function (ETextureCreateFlags)",
    "insertText": "ReduceDSFlags(ETextureCreateFlags InFlags)"
  },
  {
    "label": "FPipelineFileCacheRayTracingDesc()",
    "kind": "Method",
    "detail": "Function (} ; struct FPipelineFileCacheRayTracingDesc { FSHAHash ShaderHash ; uint32 DeprecatedMaxPayloadSizeInBytes = 0 ; EShaderFrequency Frequency = SF_RayGen ;)",
    "insertText": "FPipelineFileCacheRayTracingDesc()"
  },
  {
    "label": "FPipelineFileCacheRayTracingDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPipelineFileCacheRayTracingDesc(const FRayTracingPipelineStateInitializer& Initializer, const FRHIRayTracingShader* ShaderRHI)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(const FString& Src)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FPipelineFileCacheRayTracingDesc& Desc)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPipelineFileCacheRayTracingDesc& Other)"
  },
  {
    "label": "FPipelineCacheFileFormatPSO()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPipelineCacheFileFormatPSO()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPipelineCacheFileFormatPSO&)",
    "insertText": "operator(const FPipelineCacheFileFormatPSO& Other)"
  },
  {
    "label": "FPipelineCacheFileFormatPSO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPipelineCacheFileFormatPSO(const FPipelineCacheFileFormatPSO& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FPipelineCacheFileFormatPSO &Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FPipelineCacheFileFormatPSO& Info)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(FPipelineCacheFileFormatPSO& PSO, FRHIComputeShader const* Init)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(FPipelineCacheFileFormatPSO& PSO, FGraphicsPipelineStateInitializer const& Init)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(FPipelineCacheFileFormatPSO & PSO, FPipelineFileCacheRayTracingDesc const& Desc)"
  },
  {
    "label": "CommonToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CommonToString()"
  },
  {
    "label": "CommonHeaderLine()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CommonHeaderLine()"
  },
  {
    "label": "CommonFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommonFromString(const FStringView& Src)"
  },
  {
    "label": "ToStringReadable()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToStringReadable()"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Verify()"
  },
  {
    "label": "FPipelineCacheFileFormatPSORead()",
    "kind": "Method",
    "detail": "Function (} ; struct FPipelineCacheFileFormatPSORead {)",
    "insertText": "FPipelineCacheFileFormatPSORead() : Ar(nullptr) , Hash(0) , bReadCompleted(false) , bValid(false)"
  },
  {
    "label": "FPipelineCacheFileFormatPSORead()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPipelineCacheFileFormatPSORead()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (delete Ar ; Ar = nullptr ; } } TArray<uint8> Data ; FArchive* Ar ; uint32 Hash ; bool bReadCompleted ; bool bValid ; TSharedPtr<class IAsyncReadFileHandle,ESPMode::ThreadSafe> ParentFileHandle ; TSharedPtr<class IAsyncReadRequest,ESPMode::ThreadSafe> ReadRequest ; } ; struct FPipelineCachePSOHeader { TSet<FSHAHash> Shaders ; uint32 Hash ; } ; const uint32 FPipelineCacheFileFormatCurrentVersion ; typedef)",
    "insertText": "bool(*FPSOMaskComparisonFn)(uint64 ReferenceMask, uint64 PSOMask)"
  },
  {
    "label": "FPSOUsageData()",
    "kind": "Method",
    "detail": "Function (struct FPSOUsageData {)",
    "insertText": "FPSOUsageData(): UsageMask(0), PSOHash(0), EngineFlags(0)"
  },
  {
    "label": "FPSOUsageData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPSOUsageData(uint32 InPSOHash, uint64 InUsageMask, uint16 InEngineFlags): UsageMask(InUsageMask), PSOHash(InPSOHash), EngineFlags(InEngineFlags)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} uint64 UsageMask ; uint32 PSOHash ; uint16 EngineFlags ; } ; class FPipelineFileCacheManager { class FPipelineCacheFile ; public : enum class SaveMode : uint32 { Incremental = 0,BoundPSOsOnly = 1,} ; enum class PSOOrder : uint32 { Default = 0,FirstToLatestUsed = 1,MostToLeastUsed = 2 } ; public : void)",
    "insertText": "Initialize(uint32 GameVersion)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "LoadPipelineFileCacheInto()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadPipelineFileCacheInto(FString const& Path, TSet<FPipelineCacheFileFormatPSO>& PSOs)"
  },
  {
    "label": "SavePipelineFileCacheFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SavePipelineFileCacheFrom(uint32 GameVersion, EShaderPlatform Platform, FString const& Path, const TSet<FPipelineCacheFileFormatPSO>& PSOs)"
  },
  {
    "label": "MergePipelineFileCaches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergePipelineFileCaches(FString const& PathA, FString const& PathB, FPipelineFileCacheManager::PSOOrder Order, FString const& OutputPath)"
  },
  {
    "label": "OpenPipelineFileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenPipelineFileCache(const FString& Key, const FString& CacheName, EShaderPlatform Platform, FGuid& OutGameFileGuid)"
  },
  {
    "label": "OpenUserPipelineFileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenUserPipelineFileCache(const FString& Key, const FString& CacheName, EShaderPlatform Platform, FGuid& OutGameFileGuid)"
  },
  {
    "label": "SavePipelineFileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SavePipelineFileCache(SaveMode Mode)"
  },
  {
    "label": "CloseUserPipelineFileCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseUserPipelineFileCache()"
  },
  {
    "label": "CacheGraphicsPSO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheGraphicsPSO(uint32 RunTimeHash, FGraphicsPipelineStateInitializer const& Initializer, bool bWasPSOPrecached)"
  },
  {
    "label": "CacheComputePSO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheComputePSO(uint32 RunTimeHash, FRHIComputeShader const* Initializer, bool bWasPSOPrecached)"
  },
  {
    "label": "CacheRayTracingPSO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheRayTracingPSO(const FRayTracingPipelineStateInitializer& Initializer, ERayTracingPipelineCacheFlags Flags)"
  },
  {
    "label": "HasPipelineFileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPipelineFileCache(const FString& PSOCacheKey)"
  },
  {
    "label": "RegisterPSOStats()",
    "kind": "Method",
    "detail": "Function (FPipelineStateStats*)",
    "insertText": "RegisterPSOStats(uint32 RunTimeHash)"
  },
  {
    "label": "RegisterPSOCompileFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPSOCompileFailure(uint32 RunTimeHash, FGraphicsPipelineStateInitializer const& Initializer)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FPipelineStateLoggedEvent, FPipelineCacheFileFormatPSO&)"
  },
  {
    "label": "OnPipelineStateLogged()",
    "kind": "Method",
    "detail": "Function (FPipelineStateLoggedEvent&)",
    "insertText": "OnPipelineStateLogged()"
  },
  {
    "label": "BroadcastNewPSOsDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastNewPSOsDelegate()"
  },
  {
    "label": "GetOrderedPSOHashes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOrderedPSOHashes(const FString& PSOCacheKey, TArray<FPipelineCachePSOHeader>& PSOHashes, PSOOrder Order, int64 MinBindCount, TSet<uint32> const& AlreadyCompiledHashes)"
  },
  {
    "label": "FetchPSODescriptors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FetchPSODescriptors(const FString& PSOCacheKey, TDoubleLinkedList<FPipelineCacheFileFormatPSORead*>& LoadedBatch)"
  },
  {
    "label": "GetTotalPSOCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTotalPSOCount(const FString& PSOCacheKey)"
  },
  {
    "label": "NumPSOsLogged()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumPSOsLogged()"
  },
  {
    "label": "IsPipelineFileCacheEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPipelineFileCacheEnabled()"
  },
  {
    "label": "LogPSOtoFileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LogPSOtoFileCache()"
  },
  {
    "label": "ReportNewPSOs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReportNewPSOs()"
  },
  {
    "label": "LogPSODetails()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LogPSODetails()"
  },
  {
    "label": "SetGameUsageMaskWithComparison()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "SetGameUsageMaskWithComparison(uint64 GameUsageMask, FPSOMaskComparisonFn InComparisonFnPtr)"
  },
  {
    "label": "GetGameUsageMask()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetGameUsageMask()"
  },
  {
    "label": "SetNewPSOConsoleAndCSVLogging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewPSOConsoleAndCSVLogging(bool bEnabled)"
  },
  {
    "label": "RegisterPSOUsageDataUpdateForNextSave()",
    "kind": "Method",
    "detail": "Function (LogNewPSOsToConsoleAndCSV = bEnabled ; } private : void)",
    "insertText": "RegisterPSOUsageDataUpdateForNextSave(FPSOUsageData& UsageData)"
  },
  {
    "label": "ClearOSPipelineCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearOSPipelineCache()"
  },
  {
    "label": "ShouldEnableFileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldEnableFileCache()"
  },
  {
    "label": "IsBSSEquivalentPSOEntryCached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBSSEquivalentPSOEntryCached(FPipelineCacheFileFormatPSO const& NewEntry)"
  },
  {
    "label": "IsPSOEntryCached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPSOEntryCached(FPipelineCacheFileFormatPSO const& NewEntry, FPSOUsageData* EntryData = nullptr)"
  },
  {
    "label": "LogNewGraphicsPSOToConsoleAndCSV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogNewGraphicsPSOToConsoleAndCSV(FPipelineCacheFileFormatPSO& PSO, uint32 PSOHash, bool bWasPSOPrecached)"
  },
  {
    "label": "LogNewComputePSOToConsoleAndCSV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogNewComputePSOToConsoleAndCSV(FPipelineCacheFileFormatPSO& PSO, uint32 PSOHash, bool bWasPSOPrecached)"
  },
  {
    "label": "LogNewRaytracingPSOToConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogNewRaytracingPSOToConsole(FPipelineCacheFileFormatPSO& PSO, uint32 PSOHash, bool bIsNonBlockingPSO)"
  },
  {
    "label": "GetPipelineCacheFileFromKey()",
    "kind": "Method",
    "detail": "Function (private : FRWLock FileCacheLock ; TMap<FString,TUniquePtr<class FPipelineCacheFile>> FileCacheMap ; TMap<FGuid,FString> GameGuidToCacheKey ; FString UserCacheKey ; class FPipelineCacheFile*)",
    "insertText": "GetPipelineCacheFileFromKey(const FString& PSOCacheKey)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FPipelineCacheFile>* FileCacheFound = FileCacheMap .)",
    "insertText": "Find(PSOCacheKey)"
  }
]