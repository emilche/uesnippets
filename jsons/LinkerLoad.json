[
  {
    "label": "FBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkData"
  },
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "FLinkerPlaceholderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerPlaceholderBase"
  },
  {
    "label": "FPackageIndex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageIndex"
  },
  {
    "label": "FStructuredArchiveChildReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveChildReader"
  },
  {
    "label": "IPakFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPakFile"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "ULinkerPlaceholderExportObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULinkerPlaceholderExportObject"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "FEditorBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorBulkData"
  },
  {
    "label": "FBulkMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkMetaData"
  },
  {
    "label": "FPackageTrailer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageTrailer"
  },
  {
    "label": "FObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPtr"
  },
  {
    "label": "FOpenPackageResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenPackageResult"
  },
  {
    "label": "FScopedSlowTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSlowTask"
  },
  {
    "label": "FUObjectSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUObjectSerializeContext"
  },
  {
    "label": "TFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunction"
  },
  {
    "label": "FDependencyRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDependencyRef"
  },
  {
    "label": "FScopedCreateImportCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedCreateImportCounter"
  },
  {
    "label": "FAsyncArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncArchive"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "FAsyncPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPackage"
  },
  {
    "label": "FAsyncPackage2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPackage2"
  },
  {
    "label": "FAsyncLoadingThread2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncLoadingThread2"
  },
  {
    "label": "FResolvingExportTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolvingExportTracker"
  },
  {
    "label": "ELinkerStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELinkerStatus"
  },
  {
    "label": "EVerifyResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVerifyResult"
  },
  {
    "label": "FPackagePrecacheInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackagePrecacheInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LLM_DECLARE_TAG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Mutex . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreGlobals . h \" # include \" CoreMinimal . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" HAL / PlatformMath . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Optional . h \" # include \" Misc / PackagePath . h \" # include \" Serialization / Archive . h \" # include \" Serialization / ArchiveUObject . h \" # include \" Serialization / StructuredArchive . h \" # include \" Serialization / StructuredArchiveFwd . h \" # include \" Serialization / StructuredArchiveSlots . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / LazyObjectPtr . h \" # include \" UObject / Linker . h \" # include \" UObject / LinkerInstancingContext . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectHandle . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectResource . h \" # include \" UObject / PackageResourceManager . h \" # include \" UObject / PersistentObjectPtr . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / SoftObjectPtr . h \" # include \" UObject / UnrealNames . h \" class FBulkData ; class FLinkerLoad ; class FLinkerPlaceholderBase ; class FPackageIndex ; class FStructuredArchiveChildReader ; class IPakFile ; class UClass ; class ULinkerPlaceholderExportObject ; class UObject ; class UPackage ; class UStruct ; namespace UE::Serialization { class FEditorBulkData ; } namespace UE::BulkData::Private { class FBulkMetaData ; } namespace UE { class FPackageTrailer ; } struct FObjectPtr ; struct FOpenPackageResult ; struct FScopedSlowTask ; struct FUObjectSerializeContext ; template<FuncType> class TFunction ;)",
    "insertText": "LLM_DECLARE_TAG(UObject_Linker)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FDependencyRef { FLinkerLoad* Linker ; int32 ExportIndex ; bool)",
    "insertText": "operator(const FDependencyRef& Other)"
  },
  {
    "label": "FScopedCreateImportCounter()",
    "kind": "Method",
    "detail": "Function (} ; struct FScopedCreateImportCounter {)",
    "insertText": "FScopedCreateImportCounter(FLinkerLoad* Linker, int32 Index)"
  },
  {
    "label": "FScopedCreateImportCounter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedCreateImportCounter()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (FUObjectSerializeContext* LoadContext ; FLinkerLoad* PreviousLinker ; int32 PreviousIndex ; } ; class FAsyncArchive ; class FLinkerLoad # if ! WITH_EDITOR&& ! WITH_LOW_LEVEL_TESTS final # endif : public FLinker,public FArchiveUObject { class UObject ; class UPackageMap ; struct FAsyncPackage ; struct FAsyncPackage2 ; class FAsyncLoadingThread2 ; struct FResolvingExportTracker ; protected : enum ELinkerStatus { LINKER_Failed = 0,LINKER_Loaded = 1,LINKER_TimedOut = 2 } ; enum EVerifyResult { VERIFY_Failed = 0,VERIFY_Success = 1,VERIFY_Redirected = 2 } ; public : ELinkerType::Type)",
    "insertText": "StaticType()"
  },
  {
    "label": "GetAsyncLoader()",
    "kind": "Method",
    "detail": "Function (uint32 LoadFlags ; bool bHaveImportsBeenVerified ; UObject* TemplateForGetArchetypeFromLoader ; bool bForceSimpleIndexToObject ; bool bLockoutLegacyOperations ; UE_INTERNAL bool bSkipKnownProperties ; bool bIsAsyncLoader ; FAsyncArchive*)",
    "insertText": "GetAsyncLoader()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "GetPackagePath()",
    "kind": "Method",
    "detail": "Function (} const FPackagePath&)",
    "insertText": "GetPackagePath()"
  },
  {
    "label": "IsPackageRelocated()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR bool)",
    "insertText": "IsPackageRelocated()"
  },
  {
    "label": "IsContextInstanced()",
    "kind": "Method",
    "detail": "Function (FArchive* Loader ; FLinkerInstancingContext InstancingContext ; TUniquePtr<UE::FPackageTrailer> PackageTrailer ; TSet<int32> ImportsToVerifyOnCreate ; bool)",
    "insertText": "IsContextInstanced()"
  },
  {
    "label": "IsSoftObjectRemappingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoftObjectRemappingEnabled()"
  },
  {
    "label": "FixupSoftObjectPathForInstancedPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupSoftObjectPathForInstancedPackage(FSoftObjectPath& InOutSoftObjectPath)"
  },
  {
    "label": "SetLoader()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetLoader(FArchive* InLoader, bool bInLoaderNeedsEngineVersionChecks)"
  },
  {
    "label": "GetLoader()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetLoader()"
  },
  {
    "label": "DetachLoader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachLoader()"
  },
  {
    "label": "FindPreviousNamesForClass()",
    "kind": "Method",
    "detail": "Function (} TArray<FPackageIndex> PreloadDependencies ; TArray<FExternalReadCallback> ExternalReadDependencies ; TArray<FName>)",
    "insertText": "FindPreviousNamesForClass(const FString& CurrentClassPath, bool bIsInstance)"
  },
  {
    "label": "FindPreviousPathNamesForClass()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "FindPreviousPathNamesForClass(const FString& CurrentClassPath, bool bIsInstance, bool bIncludeShortNames = false)"
  },
  {
    "label": "FindNewNameForClass()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindNewNameForClass(FName OldClassName, bool bIsInstance)"
  },
  {
    "label": "FindNewPathNameForClass()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FindNewPathNameForClass(const FString& OldClassNameOrPathName, bool bIsInstance)"
  },
  {
    "label": "FindNewNameForEnum()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindNewNameForEnum(FName OldEnumName)"
  },
  {
    "label": "FindNewNameForStruct()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindNewNameForStruct(FName OldStructName)"
  },
  {
    "label": "IsKnownMissingPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKnownMissingPackage(FName PackageName)"
  },
  {
    "label": "AddKnownMissingPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKnownMissingPackage(FName PackageName)"
  },
  {
    "label": "RemoveKnownMissingPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveKnownMissingPackage(FName PackageName)"
  },
  {
    "label": "IsImportLazyLoadEnabled()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_OBJECT_HANDLE_LATE_RESOLVE bool)",
    "insertText": "IsImportLazyLoadEnabled()"
  },
  {
    "label": "OnPakFileMounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPakFileMounted(const IPakFile& PakFile)"
  },
  {
    "label": "HasAnyObjectsPendingLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyObjectsPendingLoad()"
  },
  {
    "label": "AddGameNameRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGameNameRedirect(const FName OldName, const FName NewName)"
  },
  {
    "label": "SerializeBulkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeBulkData(FBulkData& BulkData, const FBulkDataSerializationParams& Params)"
  },
  {
    "label": "ShouldSkipProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipProperty(const FProperty* InProperty)"
  },
  {
    "label": "SerializeBulkMeta()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SerializeBulkMeta(UE::BulkData::Private::FBulkMetaData& Meta, FBulkDataCookedIndex& CookedIndex, int64& DuplicateSerialOffset, int32 ElementSize)"
  },
  {
    "label": "FPackagePrecacheInfo()",
    "kind": "Method",
    "detail": "Function (int32 SoftObjectPathListIndex ; int32 GatherableTextDataMapIndex ; int32 ImportMapIndex ; int32 ExportMapIndex ; int32 DependsMapIndex ; int32 ExportHashIndex ; bool bHasSerializedPackageFileSummary : 1 ; bool bHasSerializedPackageTrailer : 1 ; bool bHasConstructedExportsReaders : 1 ; bool bHasSerializedPreloadDependencies : 1 ; bool bHasFixedUpImportMap : 1 ; bool bHasPopulatedInstancingContext : 1 ; bool bHasRelocatedReferences : 1 ; bool bHasAppliedInstancingContext : 1 ; bool bFixupExportMapDone : 1 ; bool bHasFoundExistingExports : 1 ; bool bHasFinishedInitialization : 1 ; bool bIsGatheringDependencies : 1 ; bool bTimeLimitExceeded : 1 ; bool bUseTimeLimit : 1 ; bool bUseFullTimeLimit : 1 ; bool bLoaderNeedsEngineVersionChecks : 1 ; # if WITH_EDITOR bool bExportsDuplicatesFixed : 1 ; bool bIsPackageRelocated : 1 ; bool bIsLoadingToPropertyBagObject : 1 ; bool bIsSerializingScriptProperties : 1 ; # endif int32 IsTimeLimitExceededCallCount ; float TimeLimit ; double TickStartTime ; int32 OwnerThread ; struct FPackagePrecacheInfo { FThreadSafeCounter* SynchronizationObject ; void* PackageData ; int64 PackageDataSize ;)",
    "insertText": "FPackagePrecacheInfo() : SynchronizationObject(NULL) , PackageData(NULL) , PackageDataSize(0)"
  },
  {
    "label": "FPackagePrecacheInfo()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPackagePrecacheInfo()"
  },
  {
    "label": "ShouldReportProgress()",
    "kind": "Method",
    "detail": "Function (delete SynchronizationObject ; } } ; private : FName NAME_LoadErrors ; bool bActiveRedirectsMapInitialized ; # if WITH_EDITOR FScopedSlowTask* LoadProgressScope ; bool)",
    "insertText": "ShouldReportProgress()"
  },
  {
    "label": "ShouldCreateThrottledSlowTask()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCreateThrottledSlowTask()"
  },
  {
    "label": "PushDebugDataString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDebugDataString(const FName& DebugData)"
  },
  {
    "label": "PushDebugDataString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDebugDataString(DebugData)"
  },
  {
    "label": "PopDebugDataString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopDebugDataString()"
  },
  {
    "label": "CreateActiveRedirectsMap()",
    "kind": "Method",
    "detail": "Function (} # endif public : void)",
    "insertText": "CreateActiveRedirectsMap(const FString& GEngineIniName)"
  },
  {
    "label": "IsValidPackageIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPackageIndex(FPackageIndex InIndex)"
  },
  {
    "label": "FindImportPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindImportPackage(FName PackageName, FPackageIndex& PackageIdx)"
  },
  {
    "label": "FindImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindImport(FPackageIndex OuterIndex, FName ObjectName, FPackageIndex& OutObjectIndex)"
  },
  {
    "label": "FindImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindImport(FStringView FullObjectPath, FPackageIndex& OutObjectIndex)"
  },
  {
    "label": "FindImportClassAndPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindImportClassAndPackage(FName ClassName, FPackageIndex& ClassIdx, FPackageIndex& PackageIdx)"
  },
  {
    "label": "CreateImportClassAndPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateImportClassAndPackage(FName ClassName, FName PackageName, FPackageIndex& ClassIdx, FPackageIndex& PackageIdx)"
  },
  {
    "label": "FixupExportMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "FixupExportMap()"
  },
  {
    "label": "CreateLinker()",
    "kind": "Method",
    "detail": "Function (FLinkerLoad*)",
    "insertText": "CreateLinker(FUObjectSerializeContext* LoadContext, UPackage* Parent, const FPackagePath& PackagePath, uint32 LoadFlags, FArchive* InLoader = nullptr, const FLinkerInstancingContext* InstancingContext = nullptr)"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Verify()"
  },
  {
    "label": "GetExportClassPackage()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetExportClassPackage(int32 i)"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "GatherExportDependencies()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "GatherExportDependencies(int32 ExportIndex, TSet<FDependencyRef>& Dependencies, bool bSkipLoadedObjects=true)"
  },
  {
    "label": "GatherImportDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherImportDependencies(int32 ImportIndex, TSet<FDependencyRef>& Dependencies, bool bSkipLoadedObjects=true)"
  },
  {
    "label": "VerifyImport()",
    "kind": "Method",
    "detail": "Function (# endif EVerifyResult)",
    "insertText": "VerifyImport(int32 ImportIndex)"
  },
  {
    "label": "LoadAllObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAllObjects(bool bForcePreload)"
  },
  {
    "label": "ResolveResourceName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ResolveResourceName(FPackageIndex ResourceIndex)"
  },
  {
    "label": "ResolveResource()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ResolveResource(FPackageIndex ResourceIndex)"
  },
  {
    "label": "FindExportIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindExportIndex(FName ClassName, FName ClassPackage, FName ObjectName, FPackageIndex ExportOuterIndex)"
  },
  {
    "label": "Preload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Preload(UObject* Object)"
  },
  {
    "label": "FindExistingExport()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FindExistingExport(int32 ExportIndex)"
  },
  {
    "label": "FindExistingImport()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FindExistingImport(int32 ImportIndex)"
  },
  {
    "label": "BuildPathName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPathName(FString& OutPathName, FPackageIndex ExportIndex)"
  },
  {
    "label": "WillTextureBeLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillTextureBeLoaded(UClass* Class, int32 ExportIndex)"
  },
  {
    "label": "MarkScriptSerializationStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkScriptSerializationStart(const UObject* Obj)"
  },
  {
    "label": "MarkScriptSerializationEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkScriptSerializationEnd(const UObject* Obj)"
  },
  {
    "label": "GetArchetypeFromLoader()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetArchetypeFromLoader(const UObject* Obj)"
  },
  {
    "label": "FindExistingLinkerForPackage()",
    "kind": "Method",
    "detail": "Function (FLinkerLoad*)",
    "insertText": "FindExistingLinkerForPackage(const UPackage* Package)"
  },
  {
    "label": "PRIVATE_PatchNewObjectIntoExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PRIVATE_PatchNewObjectIntoExport(UObject* OldObject, UObject* NewObject)"
  },
  {
    "label": "PRIVATE_ForceLoadAllDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PRIVATE_ForceLoadAllDependencies(UPackage* Package)"
  },
  {
    "label": "InvalidateExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateExport(UObject* OldObject)"
  },
  {
    "label": "GetPreloadingEnabled()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "GetPreloadingEnabled()"
  },
  {
    "label": "SetPreloadingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreloadingEnabled(bool bEnabled)"
  },
  {
    "label": "TryGetPreloadedLoader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetPreloadedLoader(const FPackagePath& InPackagePath, FOpenPackageResult& OutResult)"
  },
  {
    "label": "AttachExternalReadDependency()",
    "kind": "Method",
    "detail": "Function (private : bool bPreloadingEnabled ; public : # endif bool)",
    "insertText": "AttachExternalReadDependency(FExternalReadCallback& ReadCallback)"
  },
  {
    "label": "FinishExternalReadDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinishExternalReadDependencies(double TimeLimit)"
  },
  {
    "label": "FixupDuplicateExports()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR void)",
    "insertText": "FixupDuplicateExports()"
  },
  {
    "label": "ReplaceExportIndexes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceExportIndexes(const FPackageIndex& OldIndex, const FPackageIndex& NewIndex)"
  },
  {
    "label": "IsPackageReferenceAllowed()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsPackageReferenceAllowed(UPackage* InPackage)"
  },
  {
    "label": "CreateExport()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "CreateExport(int32 Index)"
  },
  {
    "label": "CreateExportAndPreload()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "CreateExportAndPreload(int32 ExportIndex, bool bForcePreload = false)"
  },
  {
    "label": "GetExportLoadClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetExportLoadClass(int32 ExportIndex)"
  },
  {
    "label": "TryCreatePlaceholderClassImport()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR UClass*)",
    "insertText": "TryCreatePlaceholderClassImport(int32 ImportIndex)"
  },
  {
    "label": "TryCreatePlaceholderClassForExport()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "TryCreatePlaceholderClassForExport(int32 ExportIndex)"
  },
  {
    "label": "LoadMetaDataFromExportMap()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_METADATA int32)",
    "insertText": "LoadMetaDataFromExportMap(bool bForcePreload)"
  },
  {
    "label": "CreateImport()",
    "kind": "Method",
    "detail": "Function (# endif UObject*)",
    "insertText": "CreateImport(int32 Index)"
  },
  {
    "label": "IsImportNative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImportNative(const int32 ImportIndex)"
  },
  {
    "label": "FindExistingLinkerForImport()",
    "kind": "Method",
    "detail": "Function (FLinkerLoad*)",
    "insertText": "FindExistingLinkerForImport(int32 ImportIndex)"
  },
  {
    "label": "IndexToObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "IndexToObject(FPackageIndex Index)"
  },
  {
    "label": "DetachExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachExport(int32 i)"
  },
  {
    "label": "AttachBulkData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "AttachBulkData(UObject* Owner, FBulkData* BulkData)"
  },
  {
    "label": "AttachBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachBulkData(UE::Serialization::FEditorBulkData* BulkData)"
  },
  {
    "label": "DetachBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachBulkData(FBulkData* BulkData, bool bEnsureBulkDataIsLoaded)"
  },
  {
    "label": "DetachBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachBulkData(UE::Serialization::FEditorBulkData* BulkData, bool bEnsureBulkDataIsLoaded)"
  },
  {
    "label": "DetachAllBulkData()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "DetachAllBulkData(bool bEnsureBulkDataIsLoaded)"
  },
  {
    "label": "LoadAndDetachAllBulkData()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "LoadAndDetachAllBulkData()"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Detach()"
  },
  {
    "label": "DetachExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachExports()"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "checkf(!bDetachedLoader, TEXT(\"Attempting to call ::Precache on a FLinkerLoad that has previously called ::DetachLoader\"))"
  },
  {
    "label": "Precache()",
    "kind": "Method",
    "detail": "Function (# endif return Loader ->)",
    "insertText": "Precache(PrecacheOffset, PrecacheSize)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Seek(int64 InPos)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "checkf(!bDetachedLoader, TEXT(\"Attempting to call ::Seek on a FLinkerLoad that has previously called ::DetachLoader\"))"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (# endif Loader ->)",
    "insertText": "Seek(InPos)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Tell()"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "checkf(!bDetachedLoader, TEXT(\"Attempting to call ::Tell on a FLinkerLoad that has previously called ::DetachLoader\"))"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "checkf(!bDetachedLoader, TEXT(\"Attempting to call ::TotalSize on a FLinkerLoad that has previously called ::DetachLoader\"))"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} using FLinker::Serialize ; void)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "checkf(!bDetachedLoader, TEXT(\"Attempting to call ::Serialize on a FLinkerLoad that has previously called ::DetachLoader\"))"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "checkSlow(FPlatformTLS::GetCurrentThreadId() == OwnerThread)"
  },
  {
    "label": "SetSerializedProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR Loader ->)",
    "insertText": "SetSerializedProperty(GetSerializedProperty())"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (Loader ->)",
    "insertText": "Seek(Tell() + Length)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} else # endif { Loader ->)",
    "insertText": "Serialize(V, Length)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } using FArchiveUObject::operator<<; FArchive&)",
    "insertText": "operator(UObject*& Object)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive& Ar =* this ; FUniqueObjectGuid ID ; Ar<<ID ; LazyObjectPtr = ID ; return Ar ; } FArchive&)",
    "insertText": "operator(FObjectPtr& ObjectPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FSoftObjectPath& Value)"
  },
  {
    "label": "BadSoftObjectPathError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BadSoftObjectPathError(int32 SoftObjIndex)"
  },
  {
    "label": "BadNameIndexError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BadNameIndexError(int32 NameIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FArchive& Ar =* this ; int32 NameIndex ; Ar<<NameIndex ; int32 Number = 0 ; Ar<<Number ;)",
    "insertText": "if(NameMap.IsValidIndex(NameIndex))"
  },
  {
    "label": "CreateFromDisplayId()",
    "kind": "Method",
    "detail": "Function (FNameEntryId MappedName = NameMap [ NameIndex ] ; Name =)",
    "insertText": "CreateFromDisplayId(MappedName, Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (} else { Name =)",
    "insertText": "FName()"
  },
  {
    "label": "BadNameIndexError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BadNameIndexError(NameIndex)"
  },
  {
    "label": "SetCriticalError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCriticalError()"
  },
  {
    "label": "VerifyImportInner()",
    "kind": "Method",
    "detail": "Function (} return* this ; } bool)",
    "insertText": "VerifyImportInner(const int32 ImportIndex, FString& WarningSuffix)"
  },
  {
    "label": "CreateLinkerAsync()",
    "kind": "Method",
    "detail": "Function (FLinkerLoad*)",
    "insertText": "CreateLinkerAsync(FUObjectSerializeContext* LoadContext, UPackage* Parent, const FPackagePath& PackagePath, uint32 LoadFlags, const FLinkerInstancingContext* InstancingContext , TFunction<void()>&& InSummaryReadyCallback)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (protected : ELinkerStatus)",
    "insertText": "Tick(float InTimeLimit, bool bInUseTimeLimit, bool bInUseFullTimeLimit, TMap<TPair<FName, FPackageIndex>, FPackageIndex>* ObjectNameWithOuterToExportMap)"
  },
  {
    "label": "FLinkerLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLinkerLoad(UPackage* InParent, const FPackagePath& PackagePath, uint32 InLoadFlags, FLinkerInstancingContext InstancingContext = FLinkerInstancingContext())"
  },
  {
    "label": "IsTimeLimitExceeded()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsTimeLimitExceeded(const TCHAR* CurrentTask, int32 Granularity = 1)"
  },
  {
    "label": "CreateLoader()",
    "kind": "Method",
    "detail": "Function (protected : ELinkerStatus)",
    "insertText": "CreateLoader(TFunction<void()>&& InSummaryReadyCallback)"
  },
  {
    "label": "ProcessPackageSummary()",
    "kind": "Method",
    "detail": "Function (private : ELinkerStatus)",
    "insertText": "ProcessPackageSummary(TMap<TPair<FName, FPackageIndex>, FPackageIndex>* ObjectNameWithOuterToExportMap)"
  },
  {
    "label": "SerializePackageFileSummary()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializePackageFileSummary()"
  },
  {
    "label": "SerializePackageFileSummaryInternal()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializePackageFileSummaryInternal()"
  },
  {
    "label": "UpdateFromPackageFileSummary()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "UpdateFromPackageFileSummary()"
  },
  {
    "label": "SerializePackageTrailer()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializePackageTrailer()"
  },
  {
    "label": "SerializeNameMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeNameMap()"
  },
  {
    "label": "SerializeSoftObjectPathList()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeSoftObjectPathList()"
  },
  {
    "label": "SerializeImportMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeImportMap()"
  },
  {
    "label": "FixupImportMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "FixupImportMap()"
  },
  {
    "label": "PopulateInstancingContext()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "PopulateInstancingContext()"
  },
  {
    "label": "RelocateReferences()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "RelocateReferences()"
  },
  {
    "label": "ApplyInstancingContext()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "ApplyInstancingContext()"
  },
  {
    "label": "SerializeExportMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeExportMap()"
  },
  {
    "label": "ConstructExportsReaders()",
    "kind": "Method",
    "detail": "Function (# if WITH_TEXT_ARCHIVE_SUPPORT ELinkerStatus)",
    "insertText": "ConstructExportsReaders()"
  },
  {
    "label": "SerializeDependsMap()",
    "kind": "Method",
    "detail": "Function (# endif ELinkerStatus)",
    "insertText": "SerializeDependsMap()"
  },
  {
    "label": "SerializePreloadDependencies()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializePreloadDependencies()"
  },
  {
    "label": "SerializeDataResourceMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeDataResourceMap()"
  },
  {
    "label": "ResetStatusInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStatusInfo()"
  },
  {
    "label": "SerializeGatherableTextDataMap()",
    "kind": "Method",
    "detail": "Function (public : ELinkerStatus)",
    "insertText": "SerializeGatherableTextDataMap(bool bForceEnableForCommandlet = false)"
  },
  {
    "label": "SerializeThumbnails()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeThumbnails(bool bForceEnableForCommandlet=false)"
  },
  {
    "label": "ForceBlueprintFinalization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceBlueprintFinalization()"
  },
  {
    "label": "IsBlueprintFinalizationPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlueprintFinalizationPending()"
  },
  {
    "label": "RequestPlaceholderValue()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "RequestPlaceholderValue(const FProperty* Property, const UClass* ObjectType, const TCHAR* ObjectPath)"
  },
  {
    "label": "RegenerateBlueprintClass()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "RegenerateBlueprintClass(UClass* LoadClass, UObject* ExportObject)"
  },
  {
    "label": "DeferPotentialCircularImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeferPotentialCircularImport(const int32 ImportIndex)"
  },
  {
    "label": "IsSuppressableBlueprintImportError()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsSuppressableBlueprintImportError(int32 ImportIndex)"
  },
  {
    "label": "DeferExportCreation()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "DeferExportCreation(const int32 ExportIndex, UObject* Outer)"
  },
  {
    "label": "FindCDOExportIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindCDOExportIndex(UClass* LoadClass)"
  },
  {
    "label": "ResolveDeferredDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveDeferredDependencies(UStruct* LoadStruct)"
  },
  {
    "label": "ResolveDependencyPlaceholder()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ResolveDependencyPlaceholder(class FLinkerPlaceholderBase* Placeholder, UClass* ReferencingClass = nullptr, const FName ObjectPath = NAME_None)"
  },
  {
    "label": "HasUnresolvedDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUnresolvedDependencies()"
  },
  {
    "label": "ResolveAllImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveAllImports()"
  },
  {
    "label": "FinalizeBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeBlueprint(UClass* LoadClass)"
  },
  {
    "label": "ResolveDeferredExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveDeferredExports(UClass* LoadClass)"
  },
  {
    "label": "ResolvePlaceholder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolvePlaceholder(ULinkerPlaceholderExportObject* Placeholder)"
  },
  {
    "label": "ResolvedDeferredSubobjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolvedDeferredSubobjects(ULinkerPlaceholderExportObject* OwningPlaceholder)"
  },
  {
    "label": "ForceRegenerateClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ForceRegenerateClass(UClass* ImportClass)"
  },
  {
    "label": "IsExportBeingResolved()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExportBeingResolved(int32 ExportIndex)"
  },
  {
    "label": "ResetDeferredLoadingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDeferredLoadingState()"
  },
  {
    "label": "HasPerformedFullExportResolvePass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPerformedFullExportResolvePass()"
  },
  {
    "label": "FindImport()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FindImport(UClass* ImportClass, UObject* ImportOuter, const TCHAR* Name)"
  },
  {
    "label": "FindImportFast()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FindImportFast(UClass* ImportClass, UObject* ImportOuter, FName Name, bool bFindObjectbyName = false)"
  },
  {
    "label": "CreateExportHash()",
    "kind": "Method",
    "detail": "Function (# if USE_CIRCULAR_DEPENDENCY_LOAD_DEFERRING bool bForceBlueprintFinalization ; int32 DeferredCDOIndex ; TArray<class FLinkerPlaceholderBase*> ResolvingPlaceholderStack ; TMap<FName,FLinkerPlaceholderBase*> ImportPlaceholders ; # endif ELinkerStatus)",
    "insertText": "CreateExportHash()"
  },
  {
    "label": "FindExistingExports()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "FindExistingExports()"
  },
  {
    "label": "FinalizeCreation()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "FinalizeCreation(TMap<TPair<FName, FPackageIndex>, FPackageIndex>* ObjectNameWithOuterToExportMap)"
  },
  {
    "label": "GetExportSlot()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_TEXT_ARCHIVE_SUPPORT FStructuredArchiveSlot)",
    "insertText": "GetExportSlot(FPackageIndex InExportIndex)"
  },
  {
    "label": "NotifyRegistrationEvent()",
    "kind": "Method",
    "detail": "Function (} ; enum class ENotifyRegistrationType { NRT_Class,NRT_ClassCDO,NRT_Struct,NRT_Enum,NRT_Package,NRT_NoExportObject,} ; enum class ENotifyRegistrationPhase { NRP_Added,NRP_Started,NRP_Finished,} ; void)",
    "insertText": "NotifyRegistrationEvent(const TCHAR* PackageName, const TCHAR* Name, ENotifyRegistrationType NotifyRegistrationType, ENotifyRegistrationPhase NotifyRegistrationPhase, UObject *(*InRegister)() = nullptr, bool InbDynamic = false, UObject* FinishedObject = nullptr)"
  },
  {
    "label": "NotifyRegistrationComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRegistrationComplete()"
  },
  {
    "label": "IsEnforcePackageCompatibleVersionCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnforcePackageCompatibleVersionCheck()"
  }
]