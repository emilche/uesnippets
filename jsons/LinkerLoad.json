[
  {
    "label": "FBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkData"
  },
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "FLinkerPlaceholderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerPlaceholderBase"
  },
  {
    "label": "FPackageIndex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageIndex"
  },
  {
    "label": "FStructuredArchiveChildReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveChildReader"
  },
  {
    "label": "IPakFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPakFile"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "ULinkerPlaceholderExportObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULinkerPlaceholderExportObject"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "FEditorBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorBulkData"
  },
  {
    "label": "FBulkMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkMetaData"
  },
  {
    "label": "FPackageTrailer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageTrailer"
  },
  {
    "label": "FObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPtr"
  },
  {
    "label": "FOpenPackageResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenPackageResult"
  },
  {
    "label": "FScopedSlowTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSlowTask"
  },
  {
    "label": "FUObjectSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUObjectSerializeContext"
  },
  {
    "label": "TFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunction"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FDependencyRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDependencyRef"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FScopedCreateImportCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedCreateImportCounter"
  },
  {
    "label": "FAsyncArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncArchive"
  },
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "FAsyncPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPackage"
  },
  {
    "label": "FAsyncPackage2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPackage2"
  },
  {
    "label": "FAsyncLoadingThread2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncLoadingThread2"
  },
  {
    "label": "FResolvingExportTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolvingExportTracker"
  },
  {
    "label": "ELinkerStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELinkerStatus"
  },
  {
    "label": "EVerifyResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVerifyResult"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "name",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "name"
  },
  {
    "label": "name",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "name"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "name"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "name"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FPackagePrecacheInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackagePrecacheInfo"
  },
  {
    "label": "adjusted",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "adjusted"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "object",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "object"
  },
  {
    "label": "default",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "default"
  },
  {
    "label": "default",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "default"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "object",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "object"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "somewhere",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "somewhere"
  },
  {
    "label": "before",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "before"
  },
  {
    "label": "currently",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "currently"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "FLinkerPlaceholderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerPlaceholderBase"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "before",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "before"
  },
  {
    "label": "isn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "isn"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "could",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "could"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "you",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "you"
  },
  {
    "label": "could",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "could"
  },
  {
    "label": "dependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dependency"
  },
  {
    "label": "if",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "if"
  },
  {
    "label": "if",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "if"
  },
  {
    "label": "if",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "if"
  },
  {
    "label": "FLinkerPlaceholderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerPlaceholderBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash( const FDependencyRef& Ref  )"
  },
  {
    "label": "SetPackagePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackagePath(const FPackagePath& PackagePath)"
  },
  {
    "label": "FixupSoftObjectPathForInstancedPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupSoftObjectPathForInstancedPackage(FSoftObjectPath& InOutSoftObjectPath)"
  },
  {
    "label": "SetLoader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoader(FArchive* InLoader, bool bInLoaderNeedsEngineVersionChecks)"
  },
  {
    "label": "DestroyLoader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyLoader()"
  },
  {
    "label": "DetachLoader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachLoader()"
  },
  {
    "label": "FindPreviousNamesForClass()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "FindPreviousNamesForClass(const FString& CurrentClassPath, bool bIsInstance)"
  },
  {
    "label": "FindPreviousPathNamesForClass()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "FindPreviousPathNamesForClass(const FString& CurrentClassPath, bool bIsInstance, bool bIncludeShortNames = false)"
  },
  {
    "label": "FindNewNameForClass()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindNewNameForClass(FName OldClassName, bool bIsInstance)"
  },
  {
    "label": "FindNewPathNameForClass()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FindNewPathNameForClass(const FString& OldClassNameOrPathName, bool bIsInstance)"
  },
  {
    "label": "FindNewNameForEnum()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindNewNameForEnum(FName OldEnumName)"
  },
  {
    "label": "FindNewNameForStruct()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindNewNameForStruct(FName OldStructName)"
  },
  {
    "label": "IsKnownMissingPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKnownMissingPackage(FName PackageName)"
  },
  {
    "label": "AddKnownMissingPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKnownMissingPackage(FName PackageName)"
  },
  {
    "label": "RemoveKnownMissingPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveKnownMissingPackage(FName PackageName)"
  },
  {
    "label": "IsImportLazyLoadEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImportLazyLoadEnabled()"
  },
  {
    "label": "OnNewFileAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewFileAdded(const FString& Filename)"
  },
  {
    "label": "OnPakFileMounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPakFileMounted(const IPakFile& PakFile)"
  },
  {
    "label": "AddGameNameRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGameNameRedirect(const FName OldName, const FName NewName)"
  },
  {
    "label": "SerializeBulkMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeBulkMeta(UE::BulkData::Private::FBulkMetaData& Meta, FBulkDataCookedIndex& CookedIndex, int64& DuplicateSerialOffset, int32 ElementSize)"
  },
  {
    "label": "CreateActiveRedirectsMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateActiveRedirectsMap(const FString& GEngineIniName)"
  },
  {
    "label": "IsValidPackageIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPackageIndex(FPackageIndex InIndex)"
  },
  {
    "label": "FindImportPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindImportPackage(FName PackageName, FPackageIndex& PackageIdx)"
  },
  {
    "label": "FindImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindImport(FPackageIndex OuterIndex, FName ObjectName, FPackageIndex& OutObjectIndex)"
  },
  {
    "label": "FindImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindImport(FStringView FullObjectPath, FPackageIndex& OutObjectIndex)"
  },
  {
    "label": "FindImportClassAndPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindImportClassAndPackage(FName ClassName, FPackageIndex& ClassIdx, FPackageIndex& PackageIdx)"
  },
  {
    "label": "CreateImportClassAndPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateImportClassAndPackage(FName ClassName, FName PackageName, FPackageIndex& ClassIdx, FPackageIndex& PackageIdx)"
  },
  {
    "label": "FixupExportMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "FixupExportMap()"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Verify()"
  },
  {
    "label": "GetExportClassPackage()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetExportClassPackage( int32 i )"
  },
  {
    "label": "GatherExportDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherExportDependencies(int32 ExportIndex, TSet<FDependencyRef>& Dependencies, bool bSkipLoadedObjects=true)"
  },
  {
    "label": "GatherImportDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherImportDependencies(int32 ImportIndex, TSet<FDependencyRef>& Dependencies, bool bSkipLoadedObjects=true)"
  },
  {
    "label": "VerifyImport()",
    "kind": "Method",
    "detail": "Function (EVerifyResult)",
    "insertText": "VerifyImport(int32 ImportIndex)"
  },
  {
    "label": "LoadAllObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAllObjects(bool bForcePreload)"
  },
  {
    "label": "ResolveResourceName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ResolveResourceName( FPackageIndex ResourceIndex )"
  },
  {
    "label": "FindExportIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindExportIndex( FName ClassName, FName ClassPackage, FName ObjectName, FPackageIndex ExportOuterIndex )"
  },
  {
    "label": "WillTextureBeLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillTextureBeLoaded( UClass* Class, int32 ExportIndex )"
  },
  {
    "label": "PRIVATE_PatchNewObjectIntoExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PRIVATE_PatchNewObjectIntoExport(UObject* OldObject, UObject* NewObject)"
  },
  {
    "label": "PRIVATE_ForceLoadAllDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PRIVATE_ForceLoadAllDependencies(UPackage* Package)"
  },
  {
    "label": "InvalidateExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateExport(UObject* OldObject)"
  },
  {
    "label": "GetPreloadingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPreloadingEnabled()"
  },
  {
    "label": "SetPreloadingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreloadingEnabled(bool bEnabled)"
  },
  {
    "label": "TryGetPreloadedLoader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetPreloadedLoader(const FPackagePath& InPackagePath, FOpenPackageResult& OutResult)"
  },
  {
    "label": "TryGetPreloadedLoader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetPreloadedLoader(FArchive*& OutLoader, const TCHAR* FileName)"
  },
  {
    "label": "FinishExternalReadDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinishExternalReadDependencies(double TimeLimit)"
  },
  {
    "label": "FixupDuplicateExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupDuplicateExports()"
  },
  {
    "label": "ReplaceExportIndexes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceExportIndexes(const FPackageIndex& OldIndex, const FPackageIndex& NewIndex)"
  },
  {
    "label": "IsPackageReferenceAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackageReferenceAllowed(UPackage* InPackage)"
  },
  {
    "label": "LoadMetaDataFromExportMap()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LoadMetaDataFromExportMap(bool bForcePreload)"
  },
  {
    "label": "DetachExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachExport( int32 i )"
  },
  {
    "label": "DetachAllBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachAllBulkData(bool bEnsureBulkDataIsLoaded)"
  },
  {
    "label": "LoadAndDetachAllBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAndDetachAllBulkData()"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Detach()"
  },
  {
    "label": "DetachExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachExports()"
  },
  {
    "label": "BadSoftObjectPathError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BadSoftObjectPathError(int32 SoftObjIndex)"
  },
  {
    "label": "BadNameIndexError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BadNameIndexError(int32 NameIndex)"
  },
  {
    "label": "VerifyImportInner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyImportInner(const int32 ImportIndex, FString& WarningSuffix)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "Tick( float InTimeLimit, bool bInUseTimeLimit, bool bInUseFullTimeLimit, TMap<TPair<FName, FPackageIndex>, FPackageIndex>* ObjectNameWithOuterToExportMap)"
  },
  {
    "label": "IsTimeLimitExceeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTimeLimitExceeded( const TCHAR* CurrentTask, int32 Granularity = 1 )"
  },
  {
    "label": "ProcessPackageSummary()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "ProcessPackageSummary(TMap<TPair<FName, FPackageIndex>, FPackageIndex>* ObjectNameWithOuterToExportMap)"
  },
  {
    "label": "SerializePackageFileSummary()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializePackageFileSummary()"
  },
  {
    "label": "SerializePackageFileSummaryInternal()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializePackageFileSummaryInternal()"
  },
  {
    "label": "UpdateFromPackageFileSummary()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "UpdateFromPackageFileSummary()"
  },
  {
    "label": "SerializePackageTrailer()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializePackageTrailer()"
  },
  {
    "label": "SerializeNameMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeNameMap()"
  },
  {
    "label": "SerializeSoftObjectPathList()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeSoftObjectPathList()"
  },
  {
    "label": "SerializeImportMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeImportMap()"
  },
  {
    "label": "FixupImportMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "FixupImportMap()"
  },
  {
    "label": "PopulateInstancingContext()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "PopulateInstancingContext()"
  },
  {
    "label": "RelocateReferences()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "RelocateReferences()"
  },
  {
    "label": "ApplyInstancingContext()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "ApplyInstancingContext()"
  },
  {
    "label": "SerializeExportMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeExportMap()"
  },
  {
    "label": "ConstructExportsReaders()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "ConstructExportsReaders()"
  },
  {
    "label": "SerializeDependsMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeDependsMap()"
  },
  {
    "label": "SerializePreloadDependencies()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializePreloadDependencies()"
  },
  {
    "label": "SerializeDataResourceMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeDataResourceMap()"
  },
  {
    "label": "ResetStatusInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStatusInfo()"
  },
  {
    "label": "SerializeGatherableTextDataMap()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeGatherableTextDataMap(bool bForceEnableForCommandlet = false)"
  },
  {
    "label": "SerializeThumbnails()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "SerializeThumbnails( bool bForceEnableForCommandlet=false )"
  },
  {
    "label": "RegenerateBlueprintClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegenerateBlueprintClass(UClass* LoadClass, UObject* ExportObject)"
  },
  {
    "label": "DeferPotentialCircularImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeferPotentialCircularImport(const int32 ImportIndex)"
  },
  {
    "label": "DeferExportCreation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeferExportCreation(const int32 ExportIndex, UObject* Outer)"
  },
  {
    "label": "FindCDOExportIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindCDOExportIndex(UClass* LoadClass)"
  },
  {
    "label": "ResolveDeferredDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveDeferredDependencies(UStruct* LoadStruct)"
  },
  {
    "label": "ResolveDependencyPlaceholder()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ResolveDependencyPlaceholder(class FLinkerPlaceholderBase* Placeholder, UClass* ReferencingClass = nullptr, const FName ObjectPath = NAME_None)"
  },
  {
    "label": "ResolveAllImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveAllImports()"
  },
  {
    "label": "FinalizeBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeBlueprint(UClass* LoadClass)"
  },
  {
    "label": "ResolveDeferredExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveDeferredExports(UClass* LoadClass)"
  },
  {
    "label": "ResolvePlaceholder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolvePlaceholder(ULinkerPlaceholderExportObject* Placeholder)"
  },
  {
    "label": "ResolvedDeferredSubobjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolvedDeferredSubobjects(ULinkerPlaceholderExportObject* OwningPlaceholder)"
  },
  {
    "label": "ForceRegenerateClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ForceRegenerateClass(UClass* ImportClass)"
  },
  {
    "label": "IsExportBeingResolved()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExportBeingResolved(int32 ExportIndex)"
  },
  {
    "label": "ResetDeferredLoadingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDeferredLoadingState()"
  },
  {
    "label": "HasPerformedFullExportResolvePass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPerformedFullExportResolvePass()"
  },
  {
    "label": "CreateExportHash()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "CreateExportHash()"
  },
  {
    "label": "FindExistingExports()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "FindExistingExports()"
  },
  {
    "label": "FinalizeCreation()",
    "kind": "Method",
    "detail": "Function (ELinkerStatus)",
    "insertText": "FinalizeCreation(TMap<TPair<FName, FPackageIndex>, FPackageIndex>* ObjectNameWithOuterToExportMap)"
  },
  {
    "label": "GetExportSlot()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveSlot)",
    "insertText": "GetExportSlot(FPackageIndex InExportIndex)"
  },
  {
    "label": "NotifyRegistrationComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRegistrationComplete()"
  },
  {
    "label": "IsEnforcePackageCompatibleVersionCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnforcePackageCompatibleVersionCheck()"
  }
]