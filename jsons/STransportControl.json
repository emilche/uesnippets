[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "STransportControl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STransportControl"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ITransportControl . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Stats / Stats2 . h \" # include \" Templates / SharedPointer . h \" # include \" TickableEditorObject . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" class FActiveTimerHandle ; class SButton ; struct FSlateBrush ; class STransportControl : public ITransportControl,public FTickableEditorObject { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STransportControl) : _TransportArgs()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FTransportControlArgs, TransportArgs) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "STransportControl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "STransportControl()"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (} using SWidget::Tick ; bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "GetForwardStatusIcon()",
    "kind": "Method",
    "detail": "Function (} private : const FSlateBrush*)",
    "insertText": "GetForwardStatusIcon()"
  },
  {
    "label": "GetForwardStatusTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetForwardStatusTooltip()"
  },
  {
    "label": "GetRecordStatusIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetRecordStatusIcon()"
  },
  {
    "label": "GetRecordStatusTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRecordStatusTooltip()"
  },
  {
    "label": "GetBackwardStatusIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetBackwardStatusIcon()"
  },
  {
    "label": "GetLoopStatusIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetLoopStatusIcon()"
  },
  {
    "label": "GetLoopStatusTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLoopStatusTooltip()"
  },
  {
    "label": "TickPlayback()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "TickPlayback(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "OnToggleLooping()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleLooping()"
  },
  {
    "label": "MakeTransportControlWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "MakeTransportControlWidget(ETransportControlWidgetType WidgetType, bool bAreButtonsFocusable, const FOnMakeTransportWidget& MakeCustomWidgetDelegate = FOnMakeTransportWidget())"
  }
]