[
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SMenuOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMenuOwner"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "FEdGraphSchemaAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphSchemaAction"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FObjectReferenceType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectReferenceType"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FTopLevenshteinResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopLevenshteinResult"
  },
  {
    "label": "UEdGraphSchema_K2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema_K2"
  },
  {
    "label": "KISMETWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMETWIDGETS_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IPinTypeSelectorFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPinTypeSelectorFilter"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" EdGraph / EdGraphNode . h \" # include \" EdGraph / EdGraphPin . h \" # include \" EdGraphSchema_K2 . h \" # include \" Fonts / SlateFontInfo . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" SlateFwd . h \" # include \" Styling / AppStyle . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" Types / SlateStructs . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" # include \" Algo / LevenshteinDistance . h \" class ITableRow ; class SComboButton ; class SMenuOwner ; class SSearchBox ; class SToolTip ; class SWidget ; class UEdGraphSchema ; struct FEdGraphSchemaAction ; struct FGeometry ; struct FObjectReferenceType ; struct FPointerEvent ; struct FSlateBrush ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnPinTypeChanged, const FEdGraphPinType&)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (ItemType Item ; float Score = INDEX_NONE ; bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "CompareAndUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CompareAndUpdate(FStringView SearchValue, const ItemType& NewItem, FStringView NewItemValue)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float NormalizedDistance = 1 . 0 f - static_cast<)",
    "insertText": "float(Algo::LevenshteinDistance(SearchValue, NewItemValue))"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (Score = NormalizedDistance ; Item = NewItem ; } } } ; typedef TSharedPtr<class UEdGraphSchema_K2::FPinTypeTreeInfo> FPinTypeTreeItem ; typedef STreeView<FPinTypeTreeItem> SPinTypeTreeView ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FGetPinTypeTree, TArray<FPinTypeTreeItem >&, ETypeTreeFilter)"
  },
  {
    "label": "ConstructPinTypeImage()",
    "kind": "Method",
    "detail": "Function (struct FObjectReferenceType ; typedef TSharedPtr<struct FObjectReferenceType> FObjectReferenceListItem ; class SPinTypeSelector : public SCompoundWidget { public : TSharedRef<SWidget>)",
    "insertText": "ConstructPinTypeImage(const FSlateBrush* PrimaryIcon, const FSlateColor& PrimaryColor, const FSlateBrush* SecondaryIcon, const FSlateColor& SecondaryColor, TSharedPtr<SToolTip> InToolTip)"
  },
  {
    "label": "ConstructPinTypeImage()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructPinTypeImage(TAttribute<const FSlateBrush*> PrimaryIcon, TAttribute<FSlateColor> PrimaryColor, TAttribute<const FSlateBrush*> SecondaryIcon, TAttribute<FSlateColor> SecondaryColor)"
  },
  {
    "label": "ConstructPinTypeImage()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructPinTypeImage(UEdGraphPin* Pin)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (enum class ESelectorType : uint8 { None,Compact,Partial,Full } ;)",
    "insertText": "SLATE_BEGIN_ARGS(SPinTypeSelector) : _TargetPinType() , _Schema(nullptr) , _SchemaAction(nullptr) , _TypeTreeFilter(ETypeTreeFilter::None) , _bAllowArrays(true) , _TreeViewWidth(300.f) , _TreeViewHeight(350.f) , _Font(FAppStyle::GetFontStyle(TEXT(\"NormalFont\"))) , _SelectorType(ESelectorType::Full) , _ReadOnly(false)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FEdGraphPinType, TargetPinType ) SLATE_ARGUMENT( const UEdGraphSchema*, Schema ) SLATE_ARGUMENT( TWeakPtr<const FEdGraphSchemaAction>, SchemaAction) SLATE_ARGUMENT( ETypeTreeFilter, TypeTreeFilter ) SLATE_ARGUMENT( bool, bAllowArrays ) SLATE_ATTRIBUTE( FOptionalSize, TreeViewWidth ) SLATE_ATTRIBUTE( FOptionalSize, TreeViewHeight ) SLATE_EVENT( FOnPinTypeChanged, OnPinTypePreChanged ) SLATE_EVENT( FOnPinTypeChanged, OnPinTypeChanged ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ARGUMENT( ESelectorType, SelectorType ) SLATE_ATTRIBUTE(bool, ReadOnly) SLATE_ARGUMENT_DEPRECATED(TSharedPtr<class IPinTypeSelectorFilter>, CustomFilter, 5.1, \"Please use CustomFilters instead\") SLATE_ARGUMENT(TArray<TSharedPtr<class IPinTypeSelectorFilter>>, CustomFilters) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, FGetPinTypeTree GetPinTypeTreeFunc)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetTypeIconImage()",
    "kind": "Method",
    "detail": "Function (protected : const FSlateBrush*)",
    "insertText": "GetTypeIconImage()"
  },
  {
    "label": "GetSecondaryTypeIconImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetSecondaryTypeIconImage()"
  },
  {
    "label": "GetTypeIconColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetTypeIconColor()"
  },
  {
    "label": "GetSecondaryTypeIconColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetSecondaryTypeIconColor()"
  },
  {
    "label": "GetTypeDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTypeDescription(bool bIncludeSubcategory = false)"
  },
  {
    "label": "GetSecondaryTypeDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSecondaryTypeDescription(bool bIncludeSubcategory = false)"
  },
  {
    "label": "GetCombinedTypeDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCombinedTypeDescription(bool bIncludeSubcategory = false)"
  },
  {
    "label": "IsArrayChecked()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SComboButton> TypeComboButton ; TSharedPtr<SComboButton> SecondaryTypeComboButton ; TSharedPtr<SSearchBox> FilterTextBox ; TSharedPtr<SPinTypeTreeView> TypeTreeView ; TAttribute<FEdGraphPinType> TargetPinType ; FOnPinTypeChanged OnTypeChanged ; FOnPinTypeChanged OnTypePreChanged ; FGetPinTypeTree GetPinTypeTree ; const UEdGraphSchema* Schema ; TWeakPtr<const FEdGraphSchemaAction> SchemaAction ; ETypeTreeFilter TypeTreeFilter ; TAttribute<FOptionalSize> TreeViewWidth ; TAttribute<FOptionalSize> TreeViewHeight ; bool bIsRightMousePressed ; bool bMenuContentIsSecondary = false ; ESelectorType SelectorType ; TAttribute<bool> ReadOnly ; int32 NumFilteredPinTypeItems ; int32 NumValidPinTypeItems ; TArray<FObjectReferenceListItem> AllowedObjectReferenceTypes ; TWeakPtr<SListView<FObjectReferenceListItem>> WeakListView ; TWeakPtr<SMenuOwner> PinTypeSelectorMenuOwner ; TArray<FObjectReferenceListItem> CurrentPinAllowedObjectReferenceTypes ; TArray<TSharedPtr<class IPinTypeSelectorFilter>> CustomFilters ; ECheckBoxState)",
    "insertText": "IsArrayChecked()"
  },
  {
    "label": "OnArrayCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrayCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "OnArrayStateToggled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrayStateToggled()"
  },
  {
    "label": "OnContainerTypeSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContainerTypeSelectionChanged(EPinContainerType PinContainerType)"
  },
  {
    "label": "GenerateTypeTreeRow()",
    "kind": "Method",
    "detail": "Function (TArray<FPinTypeTreeItem> TypeTreeRoot ; TArray<FPinTypeTreeItem> FilteredTypeTreeRoot ; TSharedRef<ITableRow>)",
    "insertText": "GenerateTypeTreeRow(FPinTypeTreeItem InItem, const TSharedRef<STableViewBase>& OwnerTree, bool bForSecondaryType)"
  },
  {
    "label": "OnTypeSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTypeSelectionChanged(FPinTypeTreeItem Selection, ESelectInfo::Type SelectInfo, bool bForSecondaryType)"
  },
  {
    "label": "GetTypeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTypeChildren(FPinTypeTreeItem InItem, TArray<FPinTypeTreeItem>& OutChildren)"
  },
  {
    "label": "GenerateObjectReferenceTreeRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateObjectReferenceTreeRow(FObjectReferenceListItem InItem, const TSharedRef<STableViewBase>& OwnerTree)"
  },
  {
    "label": "OnObjectReferenceSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectReferenceSelectionChanged(FObjectReferenceListItem InItem, ESelectInfo::Type SelectInfo, bool bForSecondaryType)"
  },
  {
    "label": "GetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SMenuOwner> MenuContent ; TSharedRef<SWidget>)",
    "insertText": "GetMenuContent(bool bForSecondaryType)"
  },
  {
    "label": "GetPinContainerTypeMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetPinContainerTypeMenuContent()"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (FText SearchText ; void)",
    "insertText": "OnFilterTextChanged(const FText& NewText)"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& NewText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "FilterUnsupportedTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterUnsupportedTypes(TArray<FPinTypeTreeItem>& UnfilteredList)"
  },
  {
    "label": "GetChildrenMatchingSearch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChildrenMatchingSearch(const FText& SearchText, const TArray<FPinTypeTreeItem>& UnfilteredList, TArray<FPinTypeTreeItem>& OutFilteredList, FTopLevenshteinResult<FPinTypeTreeItem>& OutTopLevenshteinResult)"
  },
  {
    "label": "GetToolTipForComboBoxType()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipForComboBoxType()"
  },
  {
    "label": "GetToolTipForComboBoxSecondaryType()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipForComboBoxSecondaryType()"
  },
  {
    "label": "GetToolTipForArrayWidget()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipForArrayWidget()"
  },
  {
    "label": "GetToolTipForContainerWidget()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipForContainerWidget()"
  },
  {
    "label": "GetPinTypeItemCountText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPinTypeItemCountText()"
  },
  {
    "label": "CreateObjectReferenceWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateObjectReferenceWidget(FPinTypeTreeItem InItem, FEdGraphPinType& InPinType, const FSlateBrush* InIconBrush, FText InSimpleTooltip)"
  },
  {
    "label": "GetAllowedObjectTypes()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetAllowedObjectTypes(FPinTypeTreeItem InItem, bool bForSecondaryType)"
  },
  {
    "label": "GenerateAllowedObjectTypesList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateAllowedObjectTypesList(TArray<FObjectReferenceListItem>& OutList, FPinTypeTreeItem InItem, bool bForSecondaryType)"
  },
  {
    "label": "OnSelectPinType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectPinType(FPinTypeTreeItem InItem, FName InPinCategory, bool bForSecondaryType)"
  },
  {
    "label": "OnCustomFilterChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCustomFilterChanged()"
  },
  {
    "label": "IPinTypeSelectorFilter()",
    "kind": "Method",
    "detail": "Function (} ; class IPinTypeSelectorFilter { public : ~)",
    "insertText": "IPinTypeSelectorFilter()"
  },
  {
    "label": "ShouldShowPinTypeTreeItem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldShowPinTypeTreeItem(FPinTypeTreeItem InItem)"
  },
  {
    "label": "RegisterOnFilterChanged()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnFilterChanged(FSimpleDelegate InOnFilterChanged)"
  },
  {
    "label": "UnregisterOnFilterChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnFilterChanged(FDelegateHandle InDelegateHandle)"
  },
  {
    "label": "GetFilterOptionsWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "GetFilterOptionsWidget()"
  }
]