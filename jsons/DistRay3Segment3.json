[
  {
    "label": "TDistRay3Segment3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDistRay3Segment3"
  },
  {
    "label": "TDistRay3Segment3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" SegmentTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TDistRay3Segment3 { public : TRay<Real> Ray ; TSegment3<Real> Segment ; Real DistanceSquared = - 1 . 0 ; TVector<Real> RayClosestPoint ; Real RayParameter ; TVector<Real> SegmentClosestPoint ; Real SegmentParameter ;)",
    "insertText": "TDistRay3Segment3(const TRay<Real>& RayIn, const TSegment3<Real>& SegmentIn)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Ray = RayIn ; Segment = SegmentIn ; } Real)",
    "insertText": "Get()"
  },
  {
    "label": "GetSquared()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "GetSquared()"
  },
  {
    "label": "ComputeResult()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "ComputeResult()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s0 = a01* b1 - b0 ; s1 = a01* b0 - b1 ; extDet = Segment . Extent* det ;)",
    "insertText": "if(s0 >= 0)"
  },
  {
    "label": "s0()",
    "kind": "Method",
    "detail": "Function (s0* = invDet ; s1* = invDet ; sqrDist =)",
    "insertText": "s0(s0 + a01 * s1 + (2) * b0) + s1 * (a01 * s0 + s1 + (2) * b1)"
  },
  {
    "label": "s0()",
    "kind": "Method",
    "detail": "Function (} else { s1 = Segment . Extent ;)",
    "insertText": "s0(a01 * s1 + b0)"
  },
  {
    "label": "s1()",
    "kind": "Method",
    "detail": "Function (sqrDist = - s0* s0 +)",
    "insertText": "s1(s1 + (2) * b1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "if(s1 <= -extDet)"
  },
  {
    "label": "s0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s0(-a01 * Segment.Extent + b0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { s0 = 0 ; s1 = - b1 ;)",
    "insertText": "if(s1 < -Segment.Extent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s1 = - Segment . Extent ; } else)",
    "insertText": "if(s1 > Segment.Extent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(s1 <= extDet)"
  },
  {
    "label": "s0()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "s0(a01 * Segment.Extent + b0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else {)",
    "insertText": "if(a01 > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } RayClosestPoint = Ray . Origin + s0* Ray . Direction ; SegmentClosestPoint = Segment . Center + s1* Segment . Direction ; RayParameter = s0 ; SegmentParameter = s1 ;)",
    "insertText": "if(sqrDist < (Real)0)"
  },
  {
    "label": "sqrDist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sqrDist(Real)"
  },
  {
    "label": "SquaredDistance()",
    "kind": "Method",
    "detail": "Function (} DistanceSquared = sqrDist ; return sqrDist ; } double)",
    "insertText": "SquaredDistance(const TRay<Real>& Ray, const TSegment3<Real>& Segment, Real& RayParam, Real& SegParam)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (TVector<Real> diff = Ray . Origin - Segment . Center ; double a01 = - Ray . Direction .)",
    "insertText": "Dot(Segment.Direction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } RayParam = s0 ; SegParam = s1 ;)",
    "insertText": "if(sqrDist < 0)"
  }
]