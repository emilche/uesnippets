[
  {
    "label": "TIntervalTreeArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIntervalTreeArray"
  },
  {
    "label": "FIntervalTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntervalTree"
  },
  {
    "label": "FRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRange"
  },
  {
    "label": "FIntervalTreeNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntervalTreeNode"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<cstdint> # include \" Containers / PagedArray . h \" # include \" Utils . h \" namespace AutoRTFM { template<T> struct TIntervalTreeArray final { void)",
    "insertText": "Empty()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Num()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Push(T Thing)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Payload .)",
    "insertText": "Push(Thing)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Add(T Thing)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Pop()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator(uint32 Index)"
  },
  {
    "label": "FIntervalTree()",
    "kind": "Method",
    "detail": "Function (} private : TArray<T> Payload ; } ; struct FIntervalTree final {)",
    "insertText": "FIntervalTree()"
  },
  {
    "label": "FIntervalTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIntervalTree(const FIntervalTree&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIntervalTree&)",
    "insertText": "operator(const FIntervalTree&)"
  },
  {
    "label": "NewRange()",
    "kind": "Method",
    "detail": "Function (FRange)",
    "insertText": "NewRange(Address, Size)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE bool)",
    "insertText": "Contains(const void* const Address, const size_t Size)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(IntervalTreeNodeIndexNone != Current)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Merge(const FIntervalTree& Other)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (FRange Range = Other . Nodes [ Current ] . Range ;)",
    "insertText": "Insert(MoveTemp(Range))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FIntervalTreeNodeIndex Left = Other . Nodes [ Current ] . Left ; const FIntervalTreeNodeIndex Right = Other . Nodes [ Current ] . Right ;)",
    "insertText": "if(IntervalTreeNodeIndexNone != Left)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (ToProcess .)",
    "insertText": "Push(Left)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IntervalTreeNodeIndexNone != Right)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (ToProcess .)",
    "insertText": "Push(Right)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(!ToProcess.IsEmpty())"
  },
  {
    "label": "FRange()",
    "kind": "Method",
    "detail": "Function (} private : template<T> using ArrayType = TIntervalTreeArray<T> ; struct FRange final {)",
    "insertText": "FRange(const void* const Address, const size_t Size) : Start(reinterpret_cast<uintptr_t>(Address)), End(reinterpret_cast<uintptr_t>(Address) + Size)"
  },
  {
    "label": "FIntervalTreeNode()",
    "kind": "Method",
    "detail": "Function (} uintptr_t Start ; uintptr_t End ; } ; using FIntervalTreeNodeIndex = uint32_t ; FIntervalTreeNodeIndex IntervalTreeNodeIndexNone = UINT32_MAX ; struct FIntervalTreeNode final {)",
    "insertText": "FIntervalTreeNode(const FRange Range) : Range(Range), Parent(IntervalTreeNodeIndexNone), bIsBlack(true)"
  },
  {
    "label": "FIntervalTreeNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIntervalTreeNode(const FRange Range, FIntervalTreeNodeIndex Parent) : Range(Range), Parent(Parent), bIsBlack(false)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} FRange Range ; FIntervalTreeNodeIndex Left = IntervalTreeNodeIndexNone ; FIntervalTreeNodeIndex Right = IntervalTreeNodeIndexNone ; FIntervalTreeNodeIndex Parent ; bool bIsBlack ; } ; FIntervalTreeNodeIndex Root = IntervalTreeNodeIndexNone ; ArrayType<FIntervalTreeNode> Nodes ; bool bExtraDebugging = false ; FORCENOINLINE bool)",
    "insertText": "Insert(FRange&& NewRange)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(0 == Nodes.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Root = Nodes .)",
    "insertText": "Add(FIntervalTreeNode(NewRange))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FRange Range = Nodes [ Current ] . Range ;)",
    "insertText": "if(UNLIKELY((NewRange.Start < Range.End) && (Range.Start < NewRange.End)))"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(NewRange.Start < Range.Start)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Nodes [ Current ] . Range . Start = NewRange . Start ; return true ; } else)",
    "insertText": "if(IntervalTreeNodeIndexNone == Nodes[Current].Left)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const FIntervalTreeNodeIndex Index = Nodes .)",
    "insertText": "Add(FIntervalTreeNode(NewRange, Current))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Nodes [ Current ] . Left = Index ; Current = Index ; break ; } Current = Nodes [ Current ] . Left ; } else {)",
    "insertText": "if(UNLIKELY(NewRange.Start == Range.End))"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(NewRange.End > Range.End)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Nodes [ Current ] . Range . End = NewRange . End ; return true ; } else)",
    "insertText": "if(IntervalTreeNodeIndexNone == Nodes[Current].Right)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (Nodes [ Current ] . Right = Index ; Current = Index ; break ; } Current = Nodes [ Current ] . Right ; })",
    "insertText": "ASSERT(Root != Current)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (} auto IsBlack = [)",
    "insertText": "this(FIntervalTreeNodeIndex Index)"
  },
  {
    "label": "UE_ASSUME()",
    "kind": "Method",
    "detail": "Function (FIntervalTreeNodeIndex Parent = Nodes [ Current ] . Parent ;)",
    "insertText": "UE_ASSUME(Current != Parent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Nodes [ Parent ] . bIsBlack = true ; break ; } else)",
    "insertText": "if(IsBlack(Parent))"
  },
  {
    "label": "UE_ASSUME()",
    "kind": "Method",
    "detail": "Function (break ; } const FIntervalTreeNodeIndex GrandParent = Nodes [ Parent ] . Parent ;)",
    "insertText": "UE_ASSUME((Parent != GrandParent) && (Current != GrandParent))"
  },
  {
    "label": "UE_ASSUME()",
    "kind": "Method",
    "detail": "Function (const bool bGrandParentIsRoot = GrandParent = = Root ; const bool bParentIsLeft = Nodes [ GrandParent ] . Left = = Parent ; const FIntervalTreeNodeIndex Uncle = bParentIsLeft ? Nodes [ GrandParent ] . Right : Nodes [ GrandParent ] . Left ;)",
    "insertText": "UE_ASSUME((GrandParent != Uncle) && (Parent != Uncle) && (Current != Uncle))"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(IsBlack(GrandParent))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Nodes [ Parent ] . bIsBlack = true ; Nodes [ Uncle ] . bIsBlack = true ;)",
    "insertText": "if(bGrandParentIsRoot)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } else { Nodes [ GrandParent ] . bIsBlack = false ; } Current = GrandParent ; continue ; } const bool CurrentIsLeft = Nodes [ Parent ] . Left = = Current ;)",
    "insertText": "if(bParentIsLeft)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Nodes [ Parent ] . Right = Nodes [ Current ] . Left ;)",
    "insertText": "if(IntervalTreeNodeIndexNone != Nodes[Parent].Right)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (Nodes [ Nodes [ Parent ] . Right ] . Parent = Parent ; } Nodes [ Parent ] . Parent = Current ; Nodes [ Current ] . Parent = GrandParent ; Nodes [ Current ] . Left = Parent ; Nodes [ GrandParent ] . Left = Current ;)",
    "insertText": "swap(Parent, Current)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Nodes [ Parent ] . Parent = Nodes [ GrandParent ] . Parent ; Nodes [ GrandParent ] . Left = Nodes [ Parent ] . Right ;)",
    "insertText": "if(IntervalTreeNodeIndexNone != Nodes[GrandParent].Left)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (Nodes [ Nodes [ GrandParent ] . Left ] . Parent = GrandParent ; } Nodes [ Parent ] . Right = GrandParent ; Nodes [ GrandParent ] . Parent = Parent ;)",
    "insertText": "swap(Nodes[GrandParent].bIsBlack, Nodes[Parent].bIsBlack)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(CurrentIsLeft)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Nodes [ Parent ] . Left = Nodes [ Current ] . Right ;)",
    "insertText": "if(IntervalTreeNodeIndexNone != Nodes[Parent].Left)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Nodes [ Parent ] . Parent = Nodes [ GrandParent ] . Parent ; Nodes [ GrandParent ] . Right = Nodes [ Parent ] . Left ;)",
    "insertText": "if(IntervalTreeNodeIndexNone != Nodes[GrandParent].Right)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Root = Parent ; } else { FIntervalTreeNode& GreatGrandParent = Nodes [ Nodes [ Parent ] . Parent ] ;)",
    "insertText": "if(GrandParent == GreatGrandParent.Left)"
  },
  {
    "label": "AssertStructureIsOk()",
    "kind": "Method",
    "detail": "Function (GreatGrandParent . Left = Parent ; } else { GreatGrandParent . Right = Parent ; } } break ; })",
    "insertText": "AssertStructureIsOk()"
  },
  {
    "label": "AssertNodeIsOk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertNodeIsOk(Root)"
  },
  {
    "label": "AssertNodeIsOk()",
    "kind": "Method",
    "detail": "Function (} } } FORCENOINLINE void)",
    "insertText": "AssertNodeIsOk(FIntervalTreeNodeIndex Index)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(IntervalTreeNodeIndexNone != Index)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(Index < Nodes.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FIntervalTreeNodeIndex Parent = Nodes [ Index ] . Parent ; const FIntervalTreeNodeIndex Left = Nodes [ Index ] . Left ; const FIntervalTreeNodeIndex Right = Nodes [ Index ] . Right ;)",
    "insertText": "if(IntervalTreeNodeIndexNone == Parent)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(Root == Index)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ASSERT(Nodes[Parent].bIsBlack || Nodes[Index].bIsBlack)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT((Nodes[Parent].Left == Index) ^ (Nodes[Parent].Right == Index))"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ASSERT(Left != Index)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(Right != Index)"
  },
  {
    "label": "AssertNodeIsOk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertNodeIsOk(Left)"
  },
  {
    "label": "AssertNodeIsOk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertNodeIsOk(Right)"
  }
]