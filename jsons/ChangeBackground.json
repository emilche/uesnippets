[
  {
    "label": "ChangeBackgroundOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChangeBackgroundOp"
  },
  {
    "label": "ChangeLevelSetBackgroundOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChangeLevelSetBackgroundOp"
  },
  {
    "label": "changeBackground()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_ChangeBACKGROUND_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_ChangeBACKGROUND_HAS_BEEN_INCLUDED # include<openvdb / math / Math . h> # include<openvdb / Types . h> # include<openvdb / tree / NodeManager . h> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<TreeOrLeafManagerT> void)",
    "insertText": "changeBackground(TreeOrLeafManagerT& tree, const typename TreeOrLeafManagerT::ValueType& background, bool threaded = true, size_t grainSize = 32)"
  },
  {
    "label": "changeLevelSetBackground()",
    "kind": "Method",
    "detail": "Function (template<TreeOrLeafManagerT> void)",
    "insertText": "changeLevelSetBackground(TreeOrLeafManagerT& tree, const typename TreeOrLeafManagerT::ValueType& halfWidth, bool threaded = true, size_t grainSize = 32)"
  },
  {
    "label": "changeAsymmetricLevelSetBackground()",
    "kind": "Method",
    "detail": "Function (template<TreeOrLeafManagerT> void)",
    "insertText": "changeAsymmetricLevelSetBackground(TreeOrLeafManagerT& tree, const typename TreeOrLeafManagerT::ValueType& outsideWidth, const typename TreeOrLeafManagerT::ValueType& insideWidth, bool threaded = true, size_t grainSize = 32)"
  },
  {
    "label": "ChangeBackgroundOp()",
    "kind": "Method",
    "detail": "Function (template<TreeOrLeafManagerT> class ChangeBackgroundOp { public : typedef TreeOrLeafManagerT::ValueType ValueT ; typedef TreeOrLeafManagerT::RootNodeType RootT ; typedef TreeOrLeafManagerT::LeafNodeType LeafT ;)",
    "insertText": "ChangeBackgroundOp(const TreeOrLeafManagerT& tree, const ValueT& newValue) : mOldValue(tree.root().background()) , mNewValue(newValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(RootT& root)"
  },
  {
    "label": "setBackground()",
    "kind": "Method",
    "detail": "Function (root .)",
    "insertText": "setBackground(mNewValue, false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(LeafT& node)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<NodeT> void)",
    "insertText": "operator()(NodeT& node)"
  },
  {
    "label": "getValueOffMask()",
    "kind": "Method",
    "detail": "Function (NodeT::NodeMaskType mask = node .)",
    "insertText": "getValueOffMask()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} private : template<IterT> void)",
    "insertText": "set(IterT& iter)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (iter .)",
    "insertText": "setValue(mNewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(math::isApproxEqual(*iter, math::negative(mOldValue)))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (iter .)",
    "insertText": "setValue(math::negative(mNewValue))"
  },
  {
    "label": "ChangeLevelSetBackgroundOp()",
    "kind": "Method",
    "detail": "Function (} } const ValueT mOldValue,mNewValue ; } ; template<TreeOrLeafManagerT> class ChangeLevelSetBackgroundOp { public : typedef TreeOrLeafManagerT::ValueType ValueT ; typedef TreeOrLeafManagerT::RootNodeType RootT ; typedef TreeOrLeafManagerT::LeafNodeType LeafT ;)",
    "insertText": "ChangeLevelSetBackgroundOp(const ValueT& outside, const ValueT& inside) : mOutside(outside) , mInside(inside)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"ChangeLevelSetBackgroundOp: the outside value cannot be negative!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!math::isNegative(mInside))"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"ChangeLevelSetBackgroundOp: the inside value must be negative!\")"
  },
  {
    "label": "setBackground()",
    "kind": "Method",
    "detail": "Function (root .)",
    "insertText": "setBackground(mOutside, false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef NodeT::ValueOffIter IterT ;)",
    "insertText": "for(IterT it(node.getChildMask().beginOff(), &node); it; ++it) this->set(it)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (ValueT& v = const_cast<)",
    "insertText": "ValueT(*iter)"
  },
  {
    "label": "changeBackground()",
    "kind": "Method",
    "detail": "Function (v = v<0 ? mInside : mOutside ; } const ValueT mOutside,mInside ; } ; template<TreeOrLeafManagerT> void)",
    "insertText": "changeBackground(TreeOrLeafManagerT& tree, const typename TreeOrLeafManagerT::ValueType& background, bool threaded, size_t grainSize)"
  },
  {
    "label": "linearTree()",
    "kind": "Method",
    "detail": "Function (tree::NodeManager<TreeOrLeafManagerT>)",
    "insertText": "linearTree(tree)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (ChangeBackgroundOp<TreeOrLeafManagerT>)",
    "insertText": "op(tree, background)"
  },
  {
    "label": "foreachTopDown()",
    "kind": "Method",
    "detail": "Function (linearTree .)",
    "insertText": "foreachTopDown(op, threaded, grainSize)"
  },
  {
    "label": "changeAsymmetricLevelSetBackground()",
    "kind": "Method",
    "detail": "Function (} template<TreeOrLeafManagerT> void)",
    "insertText": "changeAsymmetricLevelSetBackground(TreeOrLeafManagerT& tree, const typename TreeOrLeafManagerT::ValueType& outsideValue, const typename TreeOrLeafManagerT::ValueType& insideValue, bool threaded, size_t grainSize)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (ChangeLevelSetBackgroundOp<TreeOrLeafManagerT>)",
    "insertText": "op(outsideValue, insideValue)"
  },
  {
    "label": "changeLevelSetBackground()",
    "kind": "Method",
    "detail": "Function (} template<TreeOrLeafManagerT> void)",
    "insertText": "changeLevelSetBackground(TreeOrLeafManagerT& tree, const typename TreeOrLeafManagerT::ValueType& background, bool threaded, size_t grainSize)"
  },
  {
    "label": "changeAsymmetricLevelSetBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "changeAsymmetricLevelSetBackground(tree, background, math::negative(background), threaded, grainSize)"
  }
]