[
  {
    "label": "FAbstractVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAbstractVisitor"
  },
  {
    "label": "FAccessContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccessContext"
  },
  {
    "label": "FCellFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellFormatter"
  },
  {
    "label": "FMarkStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkStack"
  },
  {
    "label": "FMarkStackVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkStackVisitor"
  },
  {
    "label": "VCppClassInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VCppClassInfo"
  },
  {
    "label": "VEmergentType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VEmergentType"
  },
  {
    "label": "FOpResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpResult"
  },
  {
    "label": "VCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VCell"
  },
  {
    "label": "VHeapValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VHeapValue"
  },
  {
    "label": "Stringifiable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stringifiable"
  },
  {
    "label": "Serializable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Serializable"
  },
  {
    "label": "SerializeNewable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SerializeNewable"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "DECLARE_BASE_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (struct FAbstractVisitor ; struct FAccessContext ; struct FCellFormatter ; struct FMarkStack ; struct FMarkStackVisitor ; struct VCppClassInfo ; struct VEmergentType ; struct FOpResult ; struct VCell { uint8 GCDataIsWeakKeyBit = 1 ;)",
    "insertText": "DECLARE_BASE_VCPPCLASSINFO(COREUOBJECT_API)"
  },
  {
    "label": "VCell()",
    "kind": "Method",
    "detail": "Function (uint32 EmergentTypeOffset ; std::atomic<uint8> GCData { 0 } ; std::atomic<uint8> Mutex { 0 } ; uint8 DeeplyMutableTag = 1 ; union { struct { uint8_t Misc2 ; uint8_t Misc3 ; } ; uint16 Misc2And3 { 0 } ; } ;)",
    "insertText": "VCell(const VCell&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VCell&)",
    "insertText": "operator(const VCell&)"
  },
  {
    "label": "VCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VCell(FAccessContext, const VEmergentType* EmergentType)"
  },
  {
    "label": "GetEmergentType()",
    "kind": "Method",
    "detail": "Function (VEmergentType*)",
    "insertText": "GetEmergentType()"
  },
  {
    "label": "GetCppClassInfo()",
    "kind": "Method",
    "detail": "Function (const VCppClassInfo*)",
    "insertText": "GetCppClassInfo()"
  },
  {
    "label": "VisitReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitReferences(FMarkStackVisitor& Visitor)"
  },
  {
    "label": "VisitReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitReferences(FAbstractVisitor& Visitor)"
  },
  {
    "label": "ConductCensus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConductCensus()"
  },
  {
    "label": "RunDestructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunDestructor()"
  },
  {
    "label": "Equal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equal(FAllocationContext Context, VCell* Other, const TFunction<void(::Verse::VValue, ::Verse::VValue)>& HandlePlaceholder)"
  },
  {
    "label": "Melt()",
    "kind": "Method",
    "detail": "Function (VValue)",
    "insertText": "Melt(FAllocationContext Context)"
  },
  {
    "label": "Freeze()",
    "kind": "Method",
    "detail": "Function (VValue)",
    "insertText": "Freeze(FAllocationContext Context)"
  },
  {
    "label": "Subsumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Subsumes(FAllocationContext Context, VValue)"
  },
  {
    "label": "IsDeeplyMutable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeeplyMutable()"
  },
  {
    "label": "ConductCensusImpl()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ConductCensusImpl()"
  },
  {
    "label": "EqualImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualImpl(FAllocationContext Context, VCell* Other, const TFunction<void(::Verse::VValue, ::Verse::VValue)>& HandlePlaceholder)"
  },
  {
    "label": "MeltImpl()",
    "kind": "Method",
    "detail": "Function (VValue)",
    "insertText": "MeltImpl(FAllocationContext Context)"
  },
  {
    "label": "FreezeImpl()",
    "kind": "Method",
    "detail": "Function (VValue)",
    "insertText": "FreezeImpl(FAllocationContext Context)"
  },
  {
    "label": "SubsumesImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SubsumesImpl(FAllocationContext, VValue)"
  },
  {
    "label": "GetTypeHashImpl()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHashImpl()"
  },
  {
    "label": "VCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VCell() : EmergentTypeOffset(0)"
  },
  {
    "label": "SetEmergentType()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetEmergentType(FAccessContext, VEmergentType* EmergentType)"
  },
  {
    "label": "VCell()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VCell()"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (template<CastType> bool)",
    "insertText": "IsA()"
  },
  {
    "label": "StaticCast()",
    "kind": "Method",
    "detail": "Function (template<CastType> const CastType&)",
    "insertText": "StaticCast()"
  },
  {
    "label": "DynamicCast()",
    "kind": "Method",
    "detail": "Function (template<CastType> CastType*)",
    "insertText": "DynamicCast()"
  },
  {
    "label": "DebugName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DebugName()"
  },
  {
    "label": "AddWeakMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWeakMapping(VCell* Map, VCell* Value)"
  },
  {
    "label": "RemoveWeakMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWeakMapping(VCell* Map)"
  },
  {
    "label": "HasWeakMappings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasWeakMappings()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(sizeof(VCell) <= 8)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (struct VHeapValue : VCell {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VCell)"
  },
  {
    "label": "VHeapValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VHeapValue(FAccessContext Context, const VEmergentType* EmergentType) : VCell(Context, EmergentType)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; namespace Details { template<T,= void> struct Stringifiable : std::false_type { } ; template<T> struct Stringifiable<T,std::void_t<)",
    "insertText": "decltype(std::declval<T>().ToStringImpl(std::declval<FStringBuilderBase&>(), std::declval<FAllocationContext>(), std::declval<FCellFormatter&>()))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; using ToStringMethodSig =)",
    "insertText": "void(*)(VCell* This, FStringBuilderBase& Builder, FAllocationContext Context, const FCellFormatter& Formatter)"
  },
  {
    "label": "GetToStringMethod()",
    "kind": "Method",
    "detail": "Function (template<CellType> ToStringMethodSig)",
    "insertText": "GetToStringMethod()"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (This -> StaticCast<)",
    "insertText": "CellType().ToStringImpl(Builder, Context, Formatter)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; } else { return nullptr ; } } template<T,= void> struct Serializable : std::false_type { } ; template<T> struct Serializable<T,std::void_t<)",
    "insertText": "decltype(T::SerializeImpl(std::declval<T*&>(), std::declval<FAllocationContext>(), std::declval<FAbstractVisitor&>()))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; using SerializeMethodSig =)",
    "insertText": "void(*)(VCell*& This, FAllocationContext Context, FAbstractVisitor& Visitor)"
  },
  {
    "label": "GetSerializeMethod()",
    "kind": "Method",
    "detail": "Function (template<CellType> SerializeMethodSig)",
    "insertText": "GetSerializeMethod()"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (CellType* Scratch = This ! = nullptr ?& This -> StaticCast<)",
    "insertText": "CellType()"
  },
  {
    "label": "SerializeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImpl(Scratch, Context, Visitor)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (This = Scratch ; } ; } else { return nullptr ; } } template<T,= void> struct SerializeNewable : std::false_type { } ; template<T> struct SerializeNewable<T,std::void_t<)",
    "insertText": "decltype(T::SerializeNew(std::declval<FAllocationContext>()))"
  },
  {
    "label": "VCell()",
    "kind": "Method",
    "detail": "Function (} ; using SerializeNewSig =)",
    "insertText": "VCell(*)(FAllocationContext Context)"
  },
  {
    "label": "GetSerializeNewMethod()",
    "kind": "Method",
    "detail": "Function (template<CellType> SerializeNewSig)",
    "insertText": "GetSerializeNewMethod()"
  }
]