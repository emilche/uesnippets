[
  {
    "label": "FMockDownloadService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMockDownloadService"
  },
  {
    "label": "FMockDownloadService()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Installer / DownloadService . h \" # include \" Common / StatsCollector . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FMockDownloadService : public IDownloadService { public : typedef TTuple<double,int32,FString,FDownloadCompleteDelegate,FDownloadProgressDelegate> FRequestFile ; typedef TTuple<double,int32> FRequestCancel ; public :)",
    "insertText": "FMockDownloadService() : Count(0)"
  },
  {
    "label": "RequestFile()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RequestFile(const FString& FileUri, const FDownloadCompleteDelegate& OnCompleteDelegate, const FDownloadProgressDelegate& OnProgressDelegate)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&ThreadLock)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 ReturnId ;)",
    "insertText": "if(RequestFileFunc)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} else { ReturnId = + + Count ; } RxRequestFile .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), ReturnId, FileUri, OnCompleteDelegate, OnProgressDelegate)"
  },
  {
    "label": "RequestCancelFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestCancelFunc(RequestId)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} RxRequestCancel .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), RequestId)"
  },
  {
    "label": "RequestAbandon()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestAbandon(int32 RequestId)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (} public : FCriticalSection ThreadLock ; int32 Count ; TArray<FRequestFile> RxRequestFile ; TArray<FRequestCancel> RxRequestCancel ; TFunction<)",
    "insertText": "int32(const FString&, const FDownloadCompleteDelegate&, const FDownloadProgressDelegate&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(int32)"
  }
]