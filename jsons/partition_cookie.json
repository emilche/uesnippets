[
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_COOKIE_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_COOKIE_H_ # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" namespace partition_alloc::internal { size_t kCookieSize = 1 6 ; # if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON)"
  },
  {
    "label": "PartitionCookieCheckValue()",
    "kind": "Method",
    "detail": "Function (0 xDE,0 xAD,0 xBE,0 xEF,0 xCA,0 xFE,0 xD0,0 x0D,0 x13,0 x37,0 xF0,0 x05,0 xBA,0 x11,0 xAB,0 x1E } ; size_t kPartitionCookieSizeAdjustment = kCookieSize ; PA_ALWAYS_INLINE void)",
    "insertText": "PartitionCookieCheckValue(unsigned char* cookie_ptr)"
  },
  {
    "label": "PartitionCookieWriteValue()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "PartitionCookieWriteValue(unsigned char* cookie_ptr)"
  },
  {
    "label": "PartitionCookieCheckValue()",
    "kind": "Method",
    "detail": "Function (} # else size_t kPartitionCookieSizeAdjustment = 0 ; PA_ALWAYS_INLINE void)",
    "insertText": "PartitionCookieCheckValue(unsigned char* address)"
  }
]