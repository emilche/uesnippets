[
  {
    "label": "TThreadCheckedData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TThreadCheckedData"
  },
  {
    "label": "FCheckGameplayThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCheckGameplayThread"
  },
  {
    "label": "FCheckPhysicsThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCheckPhysicsThread"
  },
  {
    "label": "TThreadCheckedData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreGlobals . h \" # include \" ChaosCheck . h \" namespace Chaos { template<T,CheckT> class TThreadCheckedData { public : template<. . . ArgTs>)",
    "insertText": "TThreadCheckedData(ArgTs... Args) : Data(Args...)"
  },
  {
    "label": "TThreadCheckedData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TThreadCheckedData()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "Get()"
  },
  {
    "label": "CHAOS_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_CHECK(IsInGameThread())"
  },
  {
    "label": "CheckReadWrite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckReadWrite()"
  },
  {
    "label": "CheckRead()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCheckPhysicsThread { void)",
    "insertText": "CheckRead()"
  }
]