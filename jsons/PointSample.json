[
  {
    "label": "SampleWithRounding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SampleWithRounding"
  },
  {
    "label": "DummySampleType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DummySampleType"
  },
  {
    "label": "CompatibleTypes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompatibleTypes"
  },
  {
    "label": "SamplerTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SamplerTraits"
  },
  {
    "label": "SampleWithRoundingOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SampleWithRoundingOp"
  },
  {
    "label": "PointDataSampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointDataSampler"
  },
  {
    "label": "AlignedTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AlignedTransform"
  },
  {
    "label": "NonAlignedTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NonAlignedTransform"
  },
  {
    "label": "SamplerWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SamplerWrapper"
  },
  {
    "label": "AppendAttributeOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AppendAttributeOp"
  },
  {
    "label": "pointSample()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_POINTS_POINT_SAMPLE_HAS_BEEN_INCLUDED # define OPENVDB_POINTS_POINT_SAMPLE_HAS_BEEN_INCLUDED # include<openvdb / util / NullInterrupter . h> # include<openvdb / tools / Interpolation . h> # include \" PointDataGrid . h \" # include \" PointAttribute . h \" # include<sstream> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace points { template<PointDataGridT,SourceGridT,FilterT = NullFilter,InterrupterT = util::NullInterrupter> void)",
    "insertText": "pointSample(PointDataGridT& points, const SourceGridT& sourceGrid, const Name& targetAttribute = \"\", const FilterT& filter = NullFilter(), InterrupterT* const interrupter = nullptr)"
  },
  {
    "label": "boxSample()",
    "kind": "Method",
    "detail": "Function (template<PointDataGridT,SourceGridT,FilterT = NullFilter,InterrupterT = util::NullInterrupter> void)",
    "insertText": "boxSample(PointDataGridT& points, const SourceGridT& sourceGrid, const Name& targetAttribute = \"\", const FilterT& filter = NullFilter(), InterrupterT* const interrupter = nullptr)"
  },
  {
    "label": "quadraticSample()",
    "kind": "Method",
    "detail": "Function (template<PointDataGridT,SourceGridT,FilterT = NullFilter,InterrupterT = util::NullInterrupter> void)",
    "insertText": "quadraticSample(PointDataGridT& points, const SourceGridT& sourceGrid, const Name& targetAttribute = \"\", const FilterT& filter = NullFilter(), InterrupterT* const interrupter = nullptr)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (struct SampleWithRounding { template<ValueT,SamplerT,AccessorT> ValueT)",
    "insertText": "sample(const AccessorT& accessor, const Vec3d& position)"
  },
  {
    "label": "sampleGrid()",
    "kind": "Method",
    "detail": "Function (} ; struct DummySampleType { } ; template<PointDataGridT,SourceGridT,TargetValueT = DummySampleType,SamplerT = SampleWithRounding,FilterT = NullFilter,InterrupterT = util::NullInterrupter> void)",
    "insertText": "sampleGrid(size_t order, PointDataGridT& points, const SourceGridT& sourceGrid, const Name& targetAttribute, const FilterT& filter = NullFilter(), const SamplerT& sampler = SampleWithRounding(), InterrupterT* const interrupter = nullptr, const bool threaded = true)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (namespace point_sample_internal { template<FromType,ToType> struct CompatibleTypes { enum { value = std::is_constructible<ToType,FromType>::value } ; } ; template<T> struct CompatibleTypes<T,T> { enum { value = true } ; } ; template<T> struct CompatibleTypes<T,math::Vec2<T>> { enum { value = true } ; } ; template<T> struct CompatibleTypes<T,math::Vec3<T>> { enum { value = true } ; } ; template<T> struct CompatibleTypes<T,math::Vec4<T>> { enum { value = true } ; } ; template<T> struct CompatibleTypes<math::Vec2<T>,math::Vec2<T>> { enum { value = true } ; } ; template<T> struct CompatibleTypes<math::Vec3<T>,math::Vec3<T>> { enum { value = true } ; } ; template<T> struct CompatibleTypes<math::Vec4<T>,math::Vec4<T>> { enum { value = true } ; } ; template<T0,T1> struct CompatibleTypes<math::Vec2<T0>,math::Vec2<T1>> { enum { value = CompatibleTypes<T0,T1>::value } ; } ; template<T0,T1> struct CompatibleTypes<math::Vec3<T0>,math::Vec3<T1>> { enum { value = CompatibleTypes<T0,T1>::value } ; } ; template<T0,T1> struct CompatibleTypes<math::Vec4<T0>,math::Vec4<T1>> { enum { value = CompatibleTypes<T0,T1>::value } ; } ; template<T> struct CompatibleTypes<ValueMask,T> { enum { value = CompatibleTypes<bool,T>::value } ; } ; template<T> struct SamplerTraits { const size_t Order = 0 ; const bool Staggered = false ; } ; template<size_t T0,bool T1> struct SamplerTraits<tools::Sampler<T0,T1>> { const size_t Order = T0 ; const bool Staggered = T1 ; } ; template<ValueT,SamplerT,AccessorT,bool Round,bool Compatible = false> struct SampleWithRoundingOp { void)",
    "insertText": "sample(ValueT&, const AccessorT&, const Vec3d&)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (std::ostringstream ostr ; ostr<<\" Cannot sample a \"<<typeNameAsString<)",
    "insertText": "ValueType() << \" grid on to a \" << typeNameAsString<ValueT>()"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(TypeError, ostr.str())"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueT,SamplerT,AccessorT> struct SampleWithRoundingOp<ValueT,SamplerT,AccessorT,true,true> { void)",
    "insertText": "sample(ValueT& value, const AccessorT& accessor, const Vec3d& position)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "ValueT(math::Round(SamplerT::sample(accessor, position)))"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "ValueT(SamplerT::sample(accessor, position))"
  },
  {
    "label": "PointDataSampler()",
    "kind": "Method",
    "detail": "Function (} } ; template<PointDataGridT,SamplerT,FilterT,InterrupterT> class PointDataSampler { public :)",
    "insertText": "PointDataSampler(size_t order, PointDataGridT& points, const SamplerT& sampler, const FilterT& filter, InterrupterT* const interrupter, const bool threaded) : mOrder(order) , mPoints(points) , mSampler(sampler) , mFilter(filter) , mInterrupter(interrupter) , mThreaded(threaded)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} private : struct AlignedTransform { Vec3d)",
    "insertText": "transform(const Vec3d& position)"
  },
  {
    "label": "SamplerWrapper()",
    "kind": "Method",
    "detail": "Function (} private : const math::Transform& mSource ; const math::Transform& mTarget ; } ; template<ValueT,SourceGridT,GridSamplerT> struct SamplerWrapper { using ValueType = ValueT ; using SourceValueType = SourceGridT::ValueType ; using SourceAccessorT = SourceGridT::ConstAccessor ; const bool SourceIsBool = std::is_same<SourceValueType,bool>::value | | std::is_same<SourceValueType,ValueMask>::value ; const bool OrderIsZero = SamplerTraits<GridSamplerT>::Order = = 0 ; const bool IsValid = ! SourceIsBool | | OrderIsZero ;)",
    "insertText": "SamplerWrapper(const SourceGridT& sourceGrid, const SamplerT& sampler) : mAccessor(sourceGrid.getConstAccessor()) , mSampler(sampler)"
  },
  {
    "label": "SamplerWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SamplerWrapper(const SamplerWrapper& other) : mAccessor(other.mAccessor.tree()) , mSampler(other.mSampler)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (} template<bool IsValidT = IsValid> std::enable_if<IsValidT,ValueT>::type)",
    "insertText": "sample(const Vec3d& position)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (} template<bool IsValidT = IsValid> std::enable_if<! IsValidT,ValueT>::type)",
    "insertText": "sample(const Vec3d&)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"Cannot sample bool grid with BoxSampler or QuadraticSampler.\")"
  },
  {
    "label": "doSample()",
    "kind": "Method",
    "detail": "Function (} private : SourceAccessorT mAccessor ; const SamplerT& mSampler ; } ; template<SamplerWrapperT,TransformerT> void)",
    "insertText": "doSample(const SamplerWrapperT& sampleWrapper, const Index targetIndex, const TransformerT& transformer)"
  },
  {
    "label": "filter()",
    "kind": "Method",
    "detail": "Function (using PointDataTreeT = PointDataGridT::TreeType ; using LeafT = PointDataTreeT::LeafNodeType ; using LeafManagerT = tree::LeafManager<PointDataTreeT> ; const auto&)",
    "insertText": "filter(mFilter)"
  },
  {
    "label": "interrupter()",
    "kind": "Method",
    "detail": "Function (const auto&)",
    "insertText": "interrupter(mInterrupter)"
  },
  {
    "label": "interrupter()",
    "kind": "Method",
    "detail": "Function (auto sampleLambda = [ targetIndex,& sampleWrapper,& transformer,& filter,&)",
    "insertText": "interrupter(LeafT& leaf, size_t)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using TargetHandleT = AttributeWriteHandle<SamplerWrapperT::ValueType> ;)",
    "insertText": "if(util::wasInterrupted(interrupter))"
  },
  {
    "label": "self()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "self().cancel_group_execution()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (auto positionHandle = AttributeHandle<Vec3f)",
    "insertText": "create(leaf.constAttributeArray(\"P\"))"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (auto targetHandle =)",
    "insertText": "create(leaf.attributeArray(targetIndex))"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (const Vec3d position = transformer .)",
    "insertText": "transform(positionHandle->get(*iter) + iter.getCoord().asVec3d())"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (targetHandle ->)",
    "insertText": "set(*iter, newSampleWrapper.sample(position))"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (} } ; LeafManagerT)",
    "insertText": "leafManager(mPoints.tree())"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach(sampleLambda, mThreaded)"
  },
  {
    "label": "resolveTransform()",
    "kind": "Method",
    "detail": "Function (} template<SourceGridT,SamplerWrapperT> void)",
    "insertText": "resolveTransform(const SourceGridT& sourceGrid, const SamplerWrapperT& sampleWrapper, const Index targetIndex)"
  },
  {
    "label": "constTransform()",
    "kind": "Method",
    "detail": "Function (const auto& sourceTransform = sourceGrid .)",
    "insertText": "constTransform()"
  },
  {
    "label": "doSample()",
    "kind": "Method",
    "detail": "Function (AlignedTransform transformer ;)",
    "insertText": "doSample(sampleWrapper, targetIndex, transformer)"
  },
  {
    "label": "transformer()",
    "kind": "Method",
    "detail": "Function (} else { NonAlignedTransform)",
    "insertText": "transformer(sourceTransform, pointsTransform)"
  },
  {
    "label": "resolveStaggered()",
    "kind": "Method",
    "detail": "Function (} } template<SourceGridT,TargetValueT,size_t Order> void)",
    "insertText": "resolveStaggered(const SourceGridT& sourceGrid, const Index targetIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using SamplerWrapperT = SamplerWrapper<TargetValueT,SourceGridT,tools::Sampler<Order,false>> ; using StaggeredSamplerWrapperT = SamplerWrapper<TargetValueT,SourceGridT,tools::Sampler<Order,true>> ; using SourceValueType = SourceGridT::ValueType ;)",
    "insertText": "if(VecTraits<SourceValueType>::Size == 3 && sourceGrid.getGridClass() == GRID_STAGGERED)"
  },
  {
    "label": "sampleWrapper()",
    "kind": "Method",
    "detail": "Function (StaggeredSamplerWrapperT)",
    "insertText": "sampleWrapper(sourceGrid, mSampler)"
  },
  {
    "label": "resolveTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resolveTransform(sourceGrid, sampleWrapper, targetIndex)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (} } public : template<SourceGridT,TargetValueT = SourceGridT::ValueType> void)",
    "insertText": "sample(const SourceGridT& sourceGrid, Index targetIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using SourceValueType = SourceGridT::ValueType ; const bool SourceIsMask = std::is_same<SourceValueType,bool>::value | | std::is_same<SourceValueType,ValueMask>::value ;)",
    "insertText": "if(SourceIsMask || mOrder == 0)"
  },
  {
    "label": "TargetValueT()",
    "kind": "Method",
    "detail": "Function (resolveStaggered<SourceGridT,)",
    "insertText": "TargetValueT(sourceGrid, targetIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mOrder == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mOrder == 2)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (} } private : size_t mOrder ; PointDataGridT& mPoints ; const SamplerT& mSampler ; const FilterT& mFilter ; InterrupterT* const mInterrupter ; const bool mThreaded ; } ; template<PointDataGridT,ValueT> struct AppendAttributeOp { void)",
    "insertText": "append(PointDataGridT& points, const Name& attribute)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (appendAttribute<)",
    "insertText": "ValueT(points.tree(), attribute)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (} } ; template<PointDataGridT> struct AppendAttributeOp<PointDataGridT,DummySampleType> { void)",
    "insertText": "append(PointDataGridT&, const Name&)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (using namespace point_sample_internal ; using SourceValueT = AccessorT::ValueType ; const bool staggered = SamplerTraits<SamplerT>::Staggered ; const bool compatible = CompatibleTypes<SourceValueT,ValueT)",
    "insertText": "value(!staggered || (staggered && VecTraits<SourceValueT>::Size == 3))"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (const bool round = std::is_floating_point<SourceValueT>::value&& std::is_integral<ValueT>::value ; ValueT value ; SampleWithRoundingOp<ValueT,SamplerT,AccessorT,round,compatible)",
    "insertText": "sample(value, accessor, position)"
  },
  {
    "label": "attribute()",
    "kind": "Method",
    "detail": "Function (using point_sample_internal::AppendAttributeOp ; using point_sample_internal::PointDataSampler ; Name)",
    "insertText": "attribute(targetAttribute)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (attribute = sourceGrid .)",
    "insertText": "getName()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(attribute == \"P\")"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"Cannot sample onto the \\\"P\\\" attribute\")"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (} auto leaf = points .)",
    "insertText": "tree().cbeginLeaf()"
  },
  {
    "label": "pointDataSampler()",
    "kind": "Method",
    "detail": "Function (PointDataSampler<PointDataGridT,SamplerT,FilterT,InterrupterT>)",
    "insertText": "pointDataSampler(order, points, sampler, filter, interrupter, threaded)"
  },
  {
    "label": "attributeSet()",
    "kind": "Method",
    "detail": "Function (const auto& descriptor = leaf ->)",
    "insertText": "attributeSet().descriptor()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (size_t targetIndex = descriptor .)",
    "insertText": "find(attribute)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool attributeExists = targetIndex ! = AttributeSet::INVALID_POS ;)",
    "insertText": "if(std::is_same<TargetValueT, DummySampleType>::value)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (appendAttribute<)",
    "insertText": "ValueType(points.tree(), attribute)"
  },
  {
    "label": "attributeSet()",
    "kind": "Method",
    "detail": "Function (targetIndex = leaf ->)",
    "insertText": "attributeSet().descriptor().find(attribute)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(targetIndex != AttributeSet::INVALID_POS)"
  },
  {
    "label": "SourceGridT()",
    "kind": "Method",
    "detail": "Function (pointDataSampler . template sample<)",
    "insertText": "SourceGridT(sourceGrid, Index(targetIndex))"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (} else { auto targetIdx = static_cast<)",
    "insertText": "Index(targetIndex)"
  },
  {
    "label": "valueType()",
    "kind": "Method",
    "detail": "Function (const Name& targetType = descriptor .)",
    "insertText": "valueType(targetIndex)"
  },
  {
    "label": "Vec3f()",
    "kind": "Method",
    "detail": "Function (pointDataSampler . template sample<SourceGridT,)",
    "insertText": "Vec3f(sourceGrid, targetIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(targetType == typeNameAsString<Vec3d>())"
  },
  {
    "label": "Vec3d()",
    "kind": "Method",
    "detail": "Function (pointDataSampler . template sample<SourceGridT,)",
    "insertText": "Vec3d(sourceGrid, targetIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(targetType == typeNameAsString<Vec3i>())"
  },
  {
    "label": "Vec3i()",
    "kind": "Method",
    "detail": "Function (pointDataSampler . template sample<SourceGridT,)",
    "insertText": "Vec3i(sourceGrid, targetIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(targetType == typeNameAsString<int8_t>())"
  },
  {
    "label": "int8_t()",
    "kind": "Method",
    "detail": "Function (pointDataSampler . template sample<SourceGridT,)",
    "insertText": "int8_t(sourceGrid, targetIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(targetType == typeNameAsString<int16_t>())"
  },
  {
    "label": "int16_t()",
    "kind": "Method",
    "detail": "Function (pointDataSampler . template sample<SourceGridT,)",
    "insertText": "int16_t(sourceGrid, targetIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(targetType == typeNameAsString<int32_t>())"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (pointDataSampler . template sample<SourceGridT,)",
    "insertText": "int32_t(sourceGrid, targetIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(targetType == typeNameAsString<int64_t>())"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (pointDataSampler . template sample<SourceGridT,)",
    "insertText": "int64_t(sourceGrid, targetIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(targetType == typeNameAsString<float>())"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (pointDataSampler . template sample<SourceGridT,)",
    "insertText": "float(sourceGrid, targetIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(targetType == typeNameAsString<double>())"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (pointDataSampler . template sample<SourceGridT,)",
    "insertText": "double(sourceGrid, targetIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(targetType == typeNameAsString<bool>())"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (pointDataSampler . template sample<SourceGridT,)",
    "insertText": "bool(sourceGrid, targetIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "if(!attributeExists)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (AppendAttributeOp<PointDataGridT,TargetValueT)",
    "insertText": "append(points, attribute)"
  },
  {
    "label": "TargetValueT()",
    "kind": "Method",
    "detail": "Function (} else { const Name targetType = typeNameAsString<)",
    "insertText": "TargetValueT()"
  },
  {
    "label": "TargetValueT()",
    "kind": "Method",
    "detail": "Function (} } pointDataSampler . template sample<SourceGridT,)",
    "insertText": "TargetValueT(sourceGrid, static_cast<Index>(targetIndex))"
  },
  {
    "label": "pointSample()",
    "kind": "Method",
    "detail": "Function (} } template<PointDataGridT,SourceGridT,FilterT,InterrupterT> void)",
    "insertText": "pointSample(PointDataGridT& points, const SourceGridT& sourceGrid, const Name& targetAttribute, const FilterT& filter, InterrupterT* const interrupter)"
  },
  {
    "label": "sampleGrid()",
    "kind": "Method",
    "detail": "Function (SampleWithRounding sampler ;)",
    "insertText": "sampleGrid(0, points, sourceGrid, targetAttribute, filter, sampler, interrupter)"
  },
  {
    "label": "boxSample()",
    "kind": "Method",
    "detail": "Function (} template<PointDataGridT,SourceGridT,FilterT,InterrupterT> void)",
    "insertText": "boxSample(PointDataGridT& points, const SourceGridT& sourceGrid, const Name& targetAttribute, const FilterT& filter, InterrupterT* const interrupter)"
  },
  {
    "label": "sampleGrid()",
    "kind": "Method",
    "detail": "Function (SampleWithRounding sampler ;)",
    "insertText": "sampleGrid(1, points, sourceGrid, targetAttribute, filter, sampler, interrupter)"
  },
  {
    "label": "quadraticSample()",
    "kind": "Method",
    "detail": "Function (} template<PointDataGridT,SourceGridT,FilterT,InterrupterT> void)",
    "insertText": "quadraticSample(PointDataGridT& points, const SourceGridT& sourceGrid, const Name& targetAttribute, const FilterT& filter, InterrupterT* const interrupter)"
  },
  {
    "label": "sampleGrid()",
    "kind": "Method",
    "detail": "Function (SampleWithRounding sampler ;)",
    "insertText": "sampleGrid(2, points, sourceGrid, targetAttribute, filter, sampler, interrupter)"
  }
]