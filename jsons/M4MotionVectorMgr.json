[
  {
    "label": "M4MotionVectorMgr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M4MotionVectorMgr"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" vdecmpeg4 . h \" # include \" M4Decoder . h \" # include \" M4Memory . h \" # include \" M4Global . h \" # include \" M4MemOps . h \" namespace vdecmpeg4 { class M4MotionVectorMgr { public : M4MotionVectorMgr*)",
    "insertText": "create(M4Decoder* pDecoder, M4MemHandler& memSys)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy(M4MotionVectorMgr*& pMgr, M4MemHandler& memSys)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init()"
  },
  {
    "label": "readMvForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readMvForward(M4_MB* mb)"
  },
  {
    "label": "predictAddForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "predictAddForward(M4_MB* mb, int32 mbx, int32 mby)"
  },
  {
    "label": "addMv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addMv(M4_VECTOR& res, uint16 code, const M4_VECTOR& inputMv, const M4_VECTOR& predictor)"
  },
  {
    "label": "scale_fac()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "scale_fac(code - 1)"
  },
  {
    "label": "high()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "high(32 * scale_fac)"
  },
  {
    "label": "low()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "low(-32 * scale_fac)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "range(64 * scale_fac)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (res . x = predictor . x + inputMv . x ; res . y = predictor . y + inputMv . y ;)",
    "insertText": "if(res.x < low)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (res . x + = range ; } else)",
    "insertText": "if(res.x > high)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (res . x - = range ; })",
    "insertText": "if(res.y < low)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (res . y + = range ; } else)",
    "insertText": "if(res.y > high)"
  },
  {
    "label": "addMvForward()",
    "kind": "Method",
    "detail": "Function (res . y - = range ; } } void)",
    "insertText": "addMvForward(M4_VECTOR& res, const M4_VECTOR& inputMv, const M4_VECTOR& predictor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (res . x = inputMv . x + predictor . x ; res . y = inputMv . y + predictor . y ;)",
    "insertText": "if(res.x < mMvClipLow)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (res . x + = mMvClipRange ; } else)",
    "insertText": "if(res.x > mMvClipHigh)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (res . x - = mMvClipRange ; })",
    "insertText": "if(res.y < mMvClipLow)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (res . y + = mMvClipRange ; } else)",
    "insertText": "if(res.y > mMvClipHigh)"
  },
  {
    "label": "readMv()",
    "kind": "Method",
    "detail": "Function (res . y - = mMvClipRange ; } } void)",
    "insertText": "readMv(M4_VECTOR& res, uint16 code)"
  },
  {
    "label": "getMv()",
    "kind": "Method",
    "detail": "Function (res . x = mDecoder -> mBitstreamParser .)",
    "insertText": "getMv(code)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} const M4_VECTOR MV_ZERO ; void* operator)",
    "insertText": "new(size_t sz, M4MemHandler& memSys)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void* ptr)"
  },
  {
    "label": "M4MotionVectorMgr()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "M4MotionVectorMgr(M4Decoder* decoder)"
  },
  {
    "label": "M4MotionVectorMgr()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "M4MotionVectorMgr()"
  },
  {
    "label": "_predictMv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "_predictMv(M4_VECTOR& res, int32 mbx, int32 mby, uint32 block)"
  },
  {
    "label": "M4MotionVectorMgr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4MotionVectorMgr(const M4MotionVectorMgr &pObj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const M4MotionVectorMgr&)",
    "insertText": "operator(const M4MotionVectorMgr &pObj)"
  },
  {
    "label": "M4MotionVectorClear()",
    "kind": "Method",
    "detail": "Function (int32 mMvClipHigh ; int32 mMvClipLow ; int32 mMvClipRange ; M4Decoder* mDecoder ; M4_MEMORY_HANDLER } ; void)",
    "insertText": "M4MotionVectorClear(M4_MB* mb)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(mb->mFMv, sizeof(M4_VECTOR)*4)"
  }
]