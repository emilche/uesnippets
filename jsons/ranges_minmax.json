[
  {
    "label": "_T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_T1"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Type"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_MINMAX_H # define _LIBCPP___ALGORITHM_RANGES_MINMAX_H # include<__algorithm / min_max_result . h> # include<__algorithm / minmax_element . h> # include<__assert> # include<__concepts / copyable . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__utility / forward . h> # include<__utility / move . h> # include<initializer_list> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _T1> using minmax_result = min_max_result<_T1> ; namespace __minmax { struct __fn { template<class _Type,class _Proj = identity,indirect_strict_weak_order<projected<const _Type*,_Proj>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI ranges::minmax_result<const _Type&>)",
    "insertText": "operator()(const _Type& __a, const _Type& __b, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__b,__a } ; return { __a,__b } ; } template<copyable _Type,class _Proj = identity,indirect_strict_weak_order<projected<const _Type*,_Proj>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI ranges::minmax_result<_Type>)",
    "insertText": "operator()(initializer_list<_Type> __il, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__il.begin() != __il.end(), \"initializer_list has to contain at least one element\")"
  },
  {
    "label": "__minmax_element_impl()",
    "kind": "Method",
    "detail": "Function (auto __iters =)",
    "insertText": "__minmax_element_impl(__il.begin(), __il.end(), __comp, __proj)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (auto __first =)",
    "insertText": "begin(__r)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (auto __last =)",
    "insertText": "end(__r)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (using _ValueT = range_value_t<_Range> ;)",
    "insertText": "_LIBCPP_ASSERT(__first != __last, \"range has to contain at least one element\")"
  },
  {
    "label": "__minmax_element_impl()",
    "kind": "Method",
    "detail": "Function (auto __result =)",
    "insertText": "__minmax_element_impl(__first, __last, __comp, __proj)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ; ranges::minmax_result<_ValueT> __result = {* __first,__result . min } ;)",
    "insertText": "if(__first == __last || ++__first == __last)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_ValueT __i =* __first ;)",
    "insertText": "if(++__first == __last)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(__less(__i, __result.min)) __result.min = std::move(__i)"
  }
]