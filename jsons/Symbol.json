[
  {
    "label": "CSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSymbol"
  },
  {
    "label": "ULANGCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULANGCORE_API"
  },
  {
    "label": "SEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEntry"
  },
  {
    "label": "CSymbolTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSymbolTable"
  },
  {
    "label": "CSymbolTable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / Array . h \" # include \" uLang / Common / Containers / SharedPointer . h \" # include \" uLang / Common / Memory / ArenaAllocator . h \" # include \" uLang / Common / Misc / Optional . h \" # include \" uLang / Common / Text / UTF8String . h \" namespace uLang { using SymbolId = uint32_t ; enum { SymbolId_Null = 0 } ; class CSymbol ; class CSymbolTable : public CSharedMix { public :)",
    "insertText": "CSymbolTable(uint32_t NumHashBuckets = 1024, uint32_t IdChunkShift = 10)"
  },
  {
    "label": "CSymbolTable()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CSymbolTable()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (CSymbol)",
    "insertText": "Get(SymbolId Id)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TOptional<CSymbol>)",
    "insertText": "Find(const CUTF8StringView& Text, bool bIsGenerated = false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TOptional<CSymbol>)",
    "insertText": "Add(const CUTF8StringView& Text, bool bIsGenerated = false)"
  },
  {
    "label": "AddChecked()",
    "kind": "Method",
    "detail": "Function (CSymbol)",
    "insertText": "AddChecked(const CUTF8StringView& Text, bool bIsGenerated = false)"
  },
  {
    "label": "ReAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReAdd(CSymbol& Symbol)"
  },
  {
    "label": "AsStringView()",
    "kind": "Method",
    "detail": "Function (uint32_t MaxSymbolLength = 1 0 2 4 ; private : class CSymbol ; struct SEntry { SEntry* _HashNext ; SymbolId _Id ; uint32_t _ByteLength : 3 1 ; uint32_t _bIsGenerated : 1 ; UTF8Char _Data [ 1 ] ; ULANG_FORCEINLINE CUTF8StringView)",
    "insertText": "AsStringView()"
  },
  {
    "label": "GetBucketIndex()",
    "kind": "Method",
    "detail": "Function (} } ; uint32_t)",
    "insertText": "GetBucketIndex(const CUTF8StringView& Text)"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (const SEntry*)",
    "insertText": "AddInternal(const CUTF8StringView& Text, uint32_t BucketIndex, bool bIsGenerated)"
  },
  {
    "label": "FindOrAddInternal()",
    "kind": "Method",
    "detail": "Function (const SEntry*)",
    "insertText": "FindOrAddInternal(const CUTF8StringView& Text, bool bIsGenerated)"
  },
  {
    "label": "CSymbolTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSymbolTable(const CSymbolTable&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const CSymbolTable&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(CSymbolTable&&)"
  },
  {
    "label": "CSymbol()",
    "kind": "Method",
    "detail": "Function (TArray<SEntry*> _HashBuckets ; CArenaAllocator _Allocator ; TArray<SEntry**> _IdLookupTable ; uint32_t _IdChunkShift ; SymbolId _HighestUsedId ; const SEntry _EntryNull ; } ; class CSymbol { public : ULANG_FORCEINLINE)",
    "insertText": "CSymbol() : _Entry(&CSymbolTable::_EntryNull)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE SymbolId)",
    "insertText": "GetId()"
  },
  {
    "label": "AsCString()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE const char*)",
    "insertText": "AsCString()"
  },
  {
    "label": "FirstByte()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE UTF8Char)",
    "insertText": "FirstByte()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "operator(const CSymbol& Other)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(Id <= _HighestUsedId, \"Id out of range!\")"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (uint32_t Index = Id - 1 ; uint32_t ChunkIndex = Index>> _IdChunkShift ; uint32_t WithinChunkIndex =)",
    "insertText": "Index((1 << _IdChunkShift) - 1)"
  }
]