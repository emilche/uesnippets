[
  {
    "label": "FUniformPartitionConvolutionSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniformPartitionConvolutionSettings"
  },
  {
    "label": "FUniformPartitionConvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformPartitionConvolution"
  },
  {
    "label": "FInputTransformOutputGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputTransformOutputGroup"
  },
  {
    "label": "FInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInput"
  },
  {
    "label": "FOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutput"
  },
  {
    "label": "FImpulseResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImpulseResponse"
  },
  {
    "label": "FUniformPartitionConvolutionFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformPartitionConvolutionFactory"
  },
  {
    "label": "FUniformPartitionConvolution()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / BufferVectorOperations . h \" # include \" DSP / ConvolutionAlgorithm . h \" # include \" DSP / FFTAlgorithm . h \" namespace Audio { struct FUniformPartitionConvolutionSettings { int32 NumInputChannels = 0 ; int32 NumOutputChannels = 0 ; int32 NumImpulseResponses = 0 ; int32 MaxNumImpulseResponseSamples = 0 ; } ; class FUniformPartitionConvolution : public IConvolutionAlgorithm { public : using FSharedFFTRef = TSharedRef<IFFTAlgorithm> ;)",
    "insertText": "FUniformPartitionConvolution(const FUniformPartitionConvolutionSettings& InSettings, FSharedFFTRef InFFTAlgorithm)"
  },
  {
    "label": "FUniformPartitionConvolution()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FUniformPartitionConvolution()"
  },
  {
    "label": "GetNumSamplesInBlock()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSamplesInBlock()"
  },
  {
    "label": "GetNumAudioInputs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAudioInputs()"
  },
  {
    "label": "GetNumAudioOutputs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAudioOutputs()"
  },
  {
    "label": "ProcessAudioBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioBlock(const float* const InSamples[], float* const OutSamples[])"
  },
  {
    "label": "ResetAudioHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAudioHistory()"
  },
  {
    "label": "GetMaxNumImpulseResponseSamples()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxNumImpulseResponseSamples()"
  },
  {
    "label": "GetNumImpulseResponses()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumImpulseResponses()"
  },
  {
    "label": "GetNumImpulseResponseSamples()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumImpulseResponseSamples(int32 InImpulseResponseIndex)"
  },
  {
    "label": "SetImpulseResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImpulseResponse(int32 InImpulseResponseIndex, const float* InSamples, int32 InNumSamples)"
  },
  {
    "label": "SetMatrixGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMatrixGain(int32 InAudioInputIndex, int32 InImpulseResponseIndex, int32 InAudioOutputIndex, float InGain)"
  },
  {
    "label": "GetMatrixGain()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMatrixGain(int32 InAudioInputIndex, int32 InImpulseResponseIndex, int32 InAudioOutputIndex)"
  },
  {
    "label": "FInputTransformOutputGroup()",
    "kind": "Method",
    "detail": "Function (private : const int32 NumSimdMask ; struct FInputTransformOutputGroup : public TTuple<int32,int32,int32> {)",
    "insertText": "FInputTransformOutputGroup(int32 InInputIndex, int32 InTransformIndex, int32 InOutputIndex) : TTuple<int32, int32, int32>(InInputIndex, InTransformIndex, InOutputIndex)"
  },
  {
    "label": "GetInputIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetInputIndex()"
  },
  {
    "label": "GetTransformIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTransformIndex()"
  },
  {
    "label": "GetOutputIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetOutputIndex()"
  },
  {
    "label": "VectorComplexMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "VectorComplexMultiplyAdd(const FAlignedFloatBuffer& InA, const FAlignedFloatBuffer& InB, FAlignedFloatBuffer& Out)"
  },
  {
    "label": "VectorMultiplyByConstant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorMultiplyByConstant(const FAlignedFloatBuffer& InBuffer, float InConstant, FAlignedFloatBuffer& OutBuffer)"
  },
  {
    "label": "FInput()",
    "kind": "Method",
    "detail": "Function (struct FInput {)",
    "insertText": "FInput(FSharedFFTRef InFFTAlgorithm)"
  },
  {
    "label": "PushBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushBlock(const float* InSamples)"
  },
  {
    "label": "GetTransformedBlock()",
    "kind": "Method",
    "detail": "Function (const FAlignedFloatBuffer&)",
    "insertText": "GetTransformedBlock()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FOutput()",
    "kind": "Method",
    "detail": "Function (const int32 BlockSize ; private : FSharedFFTRef FFTAlgorithm ; FAlignedFloatBuffer InputBuffer ; FAlignedFloatBuffer OutputBuffer ; } ; struct FOutput {)",
    "insertText": "FOutput(int32 InNumBlocks, FSharedFFTRef InFFTAlgorithm)"
  },
  {
    "label": "FOutput()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOutput()"
  },
  {
    "label": "GetTransformedBlock()",
    "kind": "Method",
    "detail": "Function (FAlignedFloatBuffer&)",
    "insertText": "GetTransformedBlock(int32 InBlockIndex)"
  },
  {
    "label": "PopBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopBlock()"
  },
  {
    "label": "PopBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopBlock(float* OutSamples)"
  },
  {
    "label": "FImpulseResponse()",
    "kind": "Method",
    "detail": "Function (const int32 NumBlocks ; const int32 BlockSize ; const int32 NumFFTOutputFloats ; private : FSharedFFTRef FFTAlgorithm ; FAlignedFloatBuffer OutputBuffer ; int32 HeadBlockIndex ; TArray<FAlignedFloatBuffer> Blocks ; } ; struct FImpulseResponse {)",
    "insertText": "FImpulseResponse(int32 InNumBlocks, FSharedFFTRef InFFTAlgorithm)"
  },
  {
    "label": "FImpulseResponse()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FImpulseResponse()"
  },
  {
    "label": "SetImpulseResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImpulseResponse(const float* InSamples, int32 InNum)"
  },
  {
    "label": "GetNumActiveBlocks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumActiveBlocks()"
  },
  {
    "label": "GetNumImpulseResponseSamples()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumImpulseResponseSamples()"
  },
  {
    "label": "FUniformPartitionConvolutionFactory()",
    "kind": "Method",
    "detail": "Function (const int32 NumBlocks ; const int32 BlockSize ; private : FSharedFFTRef FFTAlgorithm ; int32 NumFFTOutputFloats ; int32 NumActiveBlocks ; int32 NumImpulseResponseSamples ; FAlignedFloatBuffer FFTInput ; TArray<FAlignedFloatBuffer> Blocks ; } ; FUniformPartitionConvolutionSettings Settings ; int32 BlockSize ; int32 NumFFTOutputFloats ; int32 NumBlocks ; FAlignedFloatBuffer TransformedAndScaledInput ; TSharedRef<IFFTAlgorithm> FFTAlgorithm ; TArray<FInput> Inputs ; TArray<FOutput> Outputs ; TArray<FImpulseResponse> ImpulseResponses ; TMap<FInputTransformOutputGroup,float> NonZeroGains ; TArray<bool> IsOutputZero ; } ; class FUniformPartitionConvolutionFactory : public IConvolutionAlgorithmFactory { public : ~)",
    "insertText": "FUniformPartitionConvolutionFactory()"
  },
  {
    "label": "GetFactoryName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetFactoryName()"
  },
  {
    "label": "IsHardwareAccelerated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHardwareAccelerated()"
  },
  {
    "label": "AreConvolutionSettingsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreConvolutionSettingsSupported(const FConvolutionSettings& InSettings)"
  },
  {
    "label": "NewConvolutionAlgorithm()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IConvolutionAlgorithm>)",
    "insertText": "NewConvolutionAlgorithm(const FConvolutionSettings& InSettings)"
  },
  {
    "label": "FFTSettingsFromConvolutionSettings()",
    "kind": "Method",
    "detail": "Function (private : FFFTSettings)",
    "insertText": "FFTSettingsFromConvolutionSettings(const FConvolutionSettings& InConvolutionSettings)"
  }
]