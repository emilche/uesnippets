[
  {
    "label": "FAnalysisSessionLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnalysisSessionLock"
  },
  {
    "label": "FLoadTimeProfilerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoadTimeProfilerProvider"
  },
  {
    "label": "FLoaderFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoaderFrame"
  },
  {
    "label": "FPackageLoad",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageLoad"
  },
  {
    "label": "FIoDispatcherBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoDispatcherBatch"
  },
  {
    "label": "FLoaderFrameCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoaderFrameCounter"
  },
  {
    "label": "ELoaderFrameCounterType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELoaderFrameCounterType"
  },
  {
    "label": "FLoadTimeProfilerProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" TraceServices / Model / Counters . h \" # include \" TraceServices / Model / LoadTimeProfiler . h \" # include \" Common / SlabAllocator . h \" # include \" Common / PagedArray . h \" # include \" Common / StringStore . h \" # include \" Model / MonotonicTimeline . h \" # include \" Model / Tables . h \" namespace TraceServices { class FAnalysisSessionLock ; class FLoadTimeProfilerProvider : public ILoadTimeProfilerProvider { public : typedef TMonotonicTimeline<FLoadTimeProfilerCpuEvent> CpuTimelineInternal ;)",
    "insertText": "FLoadTimeProfilerProvider(IAnalysisSession& Session, IEditableCounterProvider& EditableCounterProvider)"
  },
  {
    "label": "FLoadTimeProfilerProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLoadTimeProfilerProvider()"
  },
  {
    "label": "GetTimelineCount()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetTimelineCount()"
  },
  {
    "label": "GetCpuThreadTimelineIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCpuThreadTimelineIndex(uint32 ThreadId, uint32& OutTimelineIndex)"
  },
  {
    "label": "ReadTimeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadTimeline(uint32 Index, TFunctionRef<void(const CpuTimeline&)> Callback)"
  },
  {
    "label": "CreateEventAggregation()",
    "kind": "Method",
    "detail": "Function (ITable<FLoadTimeProfilerAggregatedStats>*)",
    "insertText": "CreateEventAggregation(double IntervalStart, double IntervalEnd)"
  },
  {
    "label": "CreateObjectTypeAggregation()",
    "kind": "Method",
    "detail": "Function (ITable<FLoadTimeProfilerAggregatedStats>*)",
    "insertText": "CreateObjectTypeAggregation(double IntervalStart, double IntervalEnd)"
  },
  {
    "label": "CreatePackageDetailsTable()",
    "kind": "Method",
    "detail": "Function (ITable<FPackagesTableRow>*)",
    "insertText": "CreatePackageDetailsTable(double IntervalStart, double IntervalEnd)"
  },
  {
    "label": "CreateExportDetailsTable()",
    "kind": "Method",
    "detail": "Function (ITable<FExportsTableRow>*)",
    "insertText": "CreateExportDetailsTable(double IntervalStart, double IntervalEnd)"
  },
  {
    "label": "CreateRequestsTable()",
    "kind": "Method",
    "detail": "Function (ITable<FRequestsTableRow>*)",
    "insertText": "CreateRequestsTable(double IntervalStart, double IntervalEnd)"
  },
  {
    "label": "GetRequestsTable()",
    "kind": "Method",
    "detail": "Function (const ITable<FLoadRequest>&)",
    "insertText": "GetRequestsTable()"
  },
  {
    "label": "CreateRequest()",
    "kind": "Method",
    "detail": "Function (FLoadRequest&)",
    "insertText": "CreateRequest()"
  },
  {
    "label": "CreatePackage()",
    "kind": "Method",
    "detail": "Function (FPackageInfo&)",
    "insertText": "CreatePackage()"
  },
  {
    "label": "CreateExport()",
    "kind": "Method",
    "detail": "Function (FPackageExportInfo&)",
    "insertText": "CreateExport()"
  },
  {
    "label": "EditCpuTimeline()",
    "kind": "Method",
    "detail": "Function (CpuTimelineInternal&)",
    "insertText": "EditCpuTimeline(uint32 ThreadId)"
  },
  {
    "label": "BeginIoDispatcherBatch()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "BeginIoDispatcherBatch(uint64 BatchId, double Time)"
  },
  {
    "label": "EndIoDispatcherBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndIoDispatcherBatch(uint64 BatchHandle, double Time, uint64 TotalSize)"
  },
  {
    "label": "PackageSizeSum()",
    "kind": "Method",
    "detail": "Function (private : struct FLoaderFrame ; uint64)",
    "insertText": "PackageSizeSum(const FLoadRequest& Row)"
  },
  {
    "label": "CreateCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCounters()"
  },
  {
    "label": "DistributeBytesAcrossFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DistributeBytesAcrossFrames(uint64 ByteCount, double StartTime, double EndTime, uint64 FLoaderFrame::* FrameVariable)"
  },
  {
    "label": "FLoaderFrameCounter()",
    "kind": "Method",
    "detail": "Function (double LoaderFrameLength = 1 . 0 / 6 0 . 0 ; struct FPackageLoad { const FPackageInfo* Package = nullptr ; double StartTime = 0 . 0 ; double EndTime = 0 . 0 ; } ; struct FIoDispatcherBatch { double StartTime = 0 . 0 ; double EndTime = 0 . 0 ; uint64 TotalSize = 0 ; } ; struct FLoaderFrame { uint64 IoDispatcherReadBytes = 0 ; uint64 HeaderLoadedBytes = 0 ; uint64 ExportLoadedBytes = 0 ; } ; class FLoaderFrameCounter : public ICounter { public : enum ELoaderFrameCounterType { LoaderFrameCounterType_IoDispatcherThroughput,LoaderFrameCounterType_LoaderThroughput,LoaderFrameCounterType_Count } ;)",
    "insertText": "FLoaderFrameCounter(ELoaderFrameCounterType Type, const TPagedArray<FLoaderFrame>& Frames)"
  },
  {
    "label": "FLoaderFrameCounter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLoaderFrameCounter()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetGroup()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetGroup()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDescription()"
  },
  {
    "label": "IsFloatingPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFloatingPoint()"
  },
  {
    "label": "GetDisplayHint()",
    "kind": "Method",
    "detail": "Function (ECounterDisplayHint)",
    "insertText": "GetDisplayHint()"
  },
  {
    "label": "EnumerateValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateValues(double IntervalStart, double IntervalEnd, bool bIncludeExternalBounds, TFunctionRef<void(double, int64)> Callback)"
  },
  {
    "label": "EnumerateFloatValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateFloatValues(double IntervalStart, double IntervalEnd, bool bIncludeExternalBounds, TFunctionRef<void(double, double)> Callback)"
  },
  {
    "label": "EnumerateOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateOps(double IntervalStart, double IntervalEnd, bool bIncludeExternalBounds, TFunctionRef<void(double, ECounterOpType, int64)> Callback)"
  },
  {
    "label": "EnumerateFloatOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateFloatOps(double IntervalStart, double IntervalEnd, bool bIncludeExternalBounds, TFunctionRef<void(double, ECounterOpType, double)> Callback)"
  }
]