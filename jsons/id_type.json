[
  {
    "label": "IdType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IdType"
  },
  {
    "label": "Generator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Generator"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TYPES_ID_TYPE_H_ # define BASE_TYPES_ID_TYPE_H_ # include<cstdint> # include<type_traits> # include \" base / types / strong_alias . h \" namespace base { template<TypeMarker,WrappedType,WrappedType kInvalidValue,WrappedType kFirstGeneratedId = kInvalidValue + 1> class IdType : public StrongAlias<TypeMarker,WrappedType> { public :)",
    "insertText": "static_assert(std::is_unsigned<WrappedType>::value || kInvalidValue <= 0, \"If signed, the invalid value should be negative or equal to zero to \" \"avoid overflow issues.\")"
  },
  {
    "label": "Generator()",
    "kind": "Method",
    "detail": "Function (using StrongAlias<TypeMarker,WrappedType>::StrongAlias ; class Generator { public :)",
    "insertText": "Generator()"
  },
  {
    "label": "GenerateNextId()",
    "kind": "Method",
    "detail": "Function (IdType)",
    "insertText": "GenerateNextId()"
  },
  {
    "label": "Generator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Generator(const Generator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Generator&)",
    "insertText": "operator(const Generator&)"
  },
  {
    "label": "IdType()",
    "kind": "Method",
    "detail": "Function (private : WrappedType next_id_ = kFirstGeneratedId ; } ;)",
    "insertText": "IdType() : StrongAlias<TypeMarker, WrappedType>::StrongAlias(kInvalidValue)"
  },
  {
    "label": "is_null()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_null()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "FromUnsafeValue()",
    "kind": "Method",
    "detail": "Function (} IdType)",
    "insertText": "FromUnsafeValue(WrappedType value)"
  },
  {
    "label": "GetUnsafeValue()",
    "kind": "Method",
    "detail": "Function (} WrappedType)",
    "insertText": "GetUnsafeValue()"
  }
]