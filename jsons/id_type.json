[
  {
    "label": "Foo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Foo"
  },
  {
    "label": "Bar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Bar"
  },
  {
    "label": "IdType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IdType"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "Generator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Generator"
  },
  {
    "label": "LOG()",
    "kind": "Method",
    "detail": "Function (to)",
    "insertText": "LOG(ERROR)"
  },
  {
    "label": "operations()",
    "kind": "Method",
    "detail": "Function (available)",
    "insertText": "operations(e.g. no multiplication)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "static_assert(\n      std::is_unsigned<WrappedType>::value || kInvalidValue <= 0,\n      \"If signed, the invalid value should be negative or equal to zero to \"\n      \"avoid overflow issues.\")"
  },
  {
    "label": "FromUnsafeValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FromUnsafeValue(next_id_++)"
  },
  {
    "label": "IdType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IdType(value)"
  }
]