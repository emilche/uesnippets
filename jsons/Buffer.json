[
  {
    "label": "Buffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Buffer"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_BUFFER_H_ # define VPX_TEST_BUFFER_H_ # include<stdio . h> # include<limits> # include \" third_party / googletest / src / include / gtest / gtest . h \" # include \" test / acm_random . h \" # include \" vpx / vpx_integer . h \" # include \" vpx_mem / vpx_mem . h \" namespace libvpx_test { template<T> class Buffer { public :)",
    "insertText": "Buffer(int width, int height, int top_padding, int left_padding, int right_padding, int bottom_padding) : width_(width), height_(height), top_padding_(top_padding), left_padding_(left_padding), right_padding_(right_padding), bottom_padding_(bottom_padding), alignment_(0), padding_value_(0), stride_(0), raw_size_(0), num_elements_(0), raw_buffer_(nullptr)"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Buffer(int width, int height, int top_padding, int left_padding, int right_padding, int bottom_padding, unsigned int alignment) : width_(width), height_(height), top_padding_(top_padding), left_padding_(left_padding), right_padding_(right_padding), bottom_padding_(bottom_padding), alignment_(alignment), padding_value_(0), stride_(0), raw_size_(0), num_elements_(0), raw_buffer_(nullptr)"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Buffer(int width, int height, int padding) : width_(width), height_(height), top_padding_(padding), left_padding_(padding), right_padding_(padding), bottom_padding_(padding), alignment_(0), padding_value_(0), stride_(0), raw_size_(0), num_elements_(0), raw_buffer_(nullptr)"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Buffer(int width, int height, int padding, unsigned int alignment) : width_(width), height_(height), top_padding_(padding), left_padding_(padding), right_padding_(padding), bottom_padding_(padding), alignment_(alignment), padding_value_(0), stride_(0), raw_size_(0), num_elements_(0), raw_buffer_(nullptr)"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Buffer()"
  },
  {
    "label": "vpx_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_free(raw_buffer_)"
  },
  {
    "label": "TopLeftPixel()",
    "kind": "Method",
    "detail": "Function (} else { delete [ ] raw_buffer_ ; } } T*)",
    "insertText": "TopLeftPixel()"
  },
  {
    "label": "stride()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stride()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(ACMRandom *rand_class, T (ACMRandom::*rand_func)())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(ACMRandom *rand_class, const T low, const T high)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFrom(const Buffer<T> &a)"
  },
  {
    "label": "DumpBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpBuffer()"
  },
  {
    "label": "PrintDifference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintDifference(const Buffer<T> &a)"
  },
  {
    "label": "HasPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPadding()"
  },
  {
    "label": "SetPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPadding(const T padding_value)"
  },
  {
    "label": "CheckValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckValues(const T value)"
  },
  {
    "label": "CheckPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckPadding()"
  },
  {
    "label": "CheckValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckValues(const Buffer<T> &a)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "EXPECT_GT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_GT(width_, 0)"
  },
  {
    "label": "EXPECT_GT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_GT(height_, 0)"
  },
  {
    "label": "EXPECT_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_GE(top_padding_, 0)"
  },
  {
    "label": "EXPECT_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_GE(left_padding_, 0)"
  },
  {
    "label": "EXPECT_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_GE(right_padding_, 0)"
  },
  {
    "label": "EXPECT_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_GE(bottom_padding_, 0)"
  },
  {
    "label": "stride_()",
    "kind": "Method",
    "detail": "Function (stride_ = left_padding_ + width_ + right_padding_ ; num_elements_ =)",
    "insertText": "stride_(top_padding_ + height_ + bottom_padding_)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (raw_size_ = num_elements_*)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "EXPECT_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_GE(alignment_, sizeof(T))"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ((left_padding_ * sizeof(T)) % alignment_, 0u)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ((stride_ * sizeof(T)) % alignment_, 0u)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} raw_buffer_ = reinterpret_cast<)",
    "insertText": "T(vpx_memalign(alignment_, raw_size_))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} else { raw_buffer_ =)",
    "insertText": "new(std::nothrow)"
  },
  {
    "label": "EXPECT_NE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EXPECT_NE(raw_buffer_, nullptr)"
  },
  {
    "label": "SetPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPadding(std::numeric_limits<T>::max())"
  },
  {
    "label": "BufferSizesMatch()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "BufferSizesMatch(const Buffer<T> &a)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<T> void Buffer<T)",
    "insertText": "Set(const T value)"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (src [)",
    "insertText": "width(*rand_class.*rand_func)()"
  },
  {
    "label": "EXPECT_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_LE(low, high)"
  },
  {
    "label": "EXPECT_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_LE(static_cast<int64_t>(high) - low, std::numeric_limits<int32_t>::max())"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (const int32_t value = static_cast<)",
    "insertText": "int32_t((*rand_class).RandRange(high - low))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (src [ width ] = static_cast<)",
    "insertText": "T(value + low)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"%4d\", raw_buffer_[height + width * stride_])"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "printf(\"\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"This buffer:\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"*%3d\", b_src[width])"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "printf(\"%4d\", b_src[width])"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"Reference buffer:\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"*%3d\", a_src[width])"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "printf(\"%4d\", a_src[width])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (padding_value_ = padding_value ; T* src = raw_buffer_ ;)",
    "insertText": "for(int i = 0; i < num_elements_; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T const* top = raw_buffer_ ;)",
    "insertText": "for(int i = 0; i < stride_ * top_padding_; ++i)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"Reference buffer of size %dx%d does not match this buffer which is \" \"size %dx%d\\n\", a.width_, a.height_, this->width_, this->height_)"
  }
]