[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_AEC3_COMMON_H_ # define MODULES_AUDIO_PROCESSING_AEC3_AEC3_COMMON_H_ # include<stddef . h> namespace webrtc { # ifdef _MSC_VER # define ALIGN16_BEG)",
    "insertText": "__declspec(align(16)) #define ALIGN16_END #else #define ALIGN16_BEG #define ALIGN16_END __attribute__((aligned(16)))"
  },
  {
    "label": "NumBandsForRate()",
    "kind": "Method",
    "detail": "Function (kNone,kSse2,kAvx2,kNeon } ; int kNumBlocksPerSecond = 2 5 0 ; int kMetricsReportingIntervalBlocks = 1 0* kNumBlocksPerSecond ; int kMetricsComputationBlocks = 3 ; int kMetricsCollectionBlocks = kMetricsReportingIntervalBlocks - kMetricsComputationBlocks ; size_t kFftLengthBy2 = 6 4 ; size_t kFftLengthBy2Plus1 = kFftLengthBy2 + 1 ; size_t kFftLengthBy2Minus1 = kFftLengthBy2 - 1 ; size_t kFftLength = 2* kFftLengthBy2 ; size_t kFftLengthBy2Log2 = 6 ; int kRenderTransferQueueSizeFrames = 1 0 0 ; size_t kMaxNumBands = 3 ; size_t kFrameSize = 1 6 0 ; size_t kSubFrameLength = kFrameSize / 2 ; size_t kBlockSize = kFftLengthBy2 ; size_t kBlockSizeLog2 = kFftLengthBy2Log2 ; size_t kExtendedBlockSize = 2* kFftLengthBy2 ; size_t kMatchedFilterWindowSizeSubBlocks = 3 2 ; size_t kMatchedFilterAlignmentShiftSizeSubBlocks = kMatchedFilterWindowSizeSubBlocks* 3 / 4 ; size_t)",
    "insertText": "NumBandsForRate(int sample_rate_hz)"
  },
  {
    "label": "ValidFullBandRate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidFullBandRate(int sample_rate_hz)"
  },
  {
    "label": "GetRenderDelayBufferSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetRenderDelayBufferSize(size_t down_sampling_factor, size_t num_matched_filters, size_t filter_length_blocks)"
  },
  {
    "label": "DetectOptimization()",
    "kind": "Method",
    "detail": "Function (} Aec3Optimization)",
    "insertText": "DetectOptimization()"
  },
  {
    "label": "FastApproxLog2f()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FastApproxLog2f(float in)"
  },
  {
    "label": "Log2TodB()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Log2TodB(float in_log2)"
  }
]