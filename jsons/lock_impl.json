[
  {
    "label": "Lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Lock"
  },
  {
    "label": "ConditionVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConditionVariable"
  },
  {
    "label": "AutoNativeLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoNativeLock"
  },
  {
    "label": "ScopedHandleVerifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedHandleVerifier"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "LockType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LockType"
  },
  {
    "label": "SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCOPED_LOCKABLE"
  },
  {
    "label": "AlreadyAcquired",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AlreadyAcquired"
  },
  {
    "label": "BasicAutoUnlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicAutoUnlock"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SYNCHRONIZATION_LOCK_IMPL_H_ # define BASE_SYNCHRONIZATION_LOCK_IMPL_H_ # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / dcheck_is_on . h \" # include \" base / thread_annotations . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #include \"base/win/windows_types.h\" #elif BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "LockImpl()",
    "kind": "Method",
    "detail": "Function (class Lock ; class ConditionVariable ; namespace win { namespace internal { class AutoNativeLock ; class ScopedHandleVerifier ; } } namespace internal { class BASE_EXPORT LockImpl { public :)",
    "insertText": "LockImpl(const LockImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LockImpl&)",
    "insertText": "operator(const LockImpl&)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (private : class base::Lock ; class base::ConditionVariable ; class base::win::internal::AutoNativeLock ; class base::win::internal::ScopedHandleVerifier ; # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "LockImpl()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "LockImpl()"
  },
  {
    "label": "Try()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Try()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "native_handle()",
    "kind": "Method",
    "detail": "Function (NativeHandle*)",
    "insertText": "native_handle()"
  },
  {
    "label": "LockInternalWithTracking()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "LockInternalWithTracking()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(IS_WIN) bool LockImpl::Try()"
  },
  {
    "label": "ReleaseSRWLockExclusive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSRWLockExclusive(reinterpret_cast<PSRWLOCK>(&native_handle_))"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) #if DCHECK_IS_ON() BASE_EXPORT void dcheck_trylock_result(int rv)"
  },
  {
    "label": "dcheck_unlock_result()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "dcheck_unlock_result(int rv)"
  },
  {
    "label": "pthread_mutex_trylock()",
    "kind": "Method",
    "detail": "Function (int rv =)",
    "insertText": "pthread_mutex_trylock(&native_handle_)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "DCHECK_IS_ON() dcheck_trylock_result(rv)"
  },
  {
    "label": "pthread_mutex_unlock()",
    "kind": "Method",
    "detail": "Function ([ [ maybe_unused ] ] int rv =)",
    "insertText": "pthread_mutex_unlock(&native_handle_)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "DCHECK_IS_ON() dcheck_unlock_result(rv)"
  },
  {
    "label": "BasicAutoLock()",
    "kind": "Method",
    "detail": "Function (# endif } # endif template<class LockType> class SCOPED_LOCKABLE BasicAutoLock { public : struct AlreadyAcquired { } ;)",
    "insertText": "BasicAutoLock(LockType& lock) EXCLUSIVE_LOCK_FUNCTION(lock) : lock_(lock)"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (lock_ .)",
    "insertText": "Acquire()"
  },
  {
    "label": "BasicAutoLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicAutoLock(LockType& lock, const AlreadyAcquired&) EXCLUSIVE_LOCKS_REQUIRED(lock) : lock_(lock)"
  },
  {
    "label": "AssertAcquired()",
    "kind": "Method",
    "detail": "Function (lock_ .)",
    "insertText": "AssertAcquired()"
  },
  {
    "label": "BasicAutoLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicAutoLock(const BasicAutoLock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BasicAutoLock&)",
    "insertText": "operator(const BasicAutoLock&)"
  },
  {
    "label": "BasicAutoLock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BasicAutoLock() UNLOCK_FUNCTION()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (lock_ .)",
    "insertText": "Release()"
  },
  {
    "label": "BasicAutoTryLock()",
    "kind": "Method",
    "detail": "Function (} private : LockType& lock_ ; } ; template<class LockType> class SCOPED_LOCKABLE BasicAutoTryLock { public :)",
    "insertText": "BasicAutoTryLock(LockType& lock) EXCLUSIVE_LOCK_FUNCTION(lock) : lock_(lock), is_acquired_(lock_.Try())"
  },
  {
    "label": "BasicAutoTryLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicAutoTryLock(const BasicAutoTryLock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BasicAutoTryLock&)",
    "insertText": "operator(const BasicAutoTryLock&)"
  },
  {
    "label": "BasicAutoTryLock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BasicAutoTryLock() UNLOCK_FUNCTION()"
  },
  {
    "label": "is_acquired()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "is_acquired()"
  },
  {
    "label": "BasicAutoUnlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicAutoUnlock(const BasicAutoUnlock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BasicAutoUnlock&)",
    "insertText": "operator(const BasicAutoUnlock&)"
  },
  {
    "label": "BasicAutoUnlock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BasicAutoUnlock()"
  },
  {
    "label": "BasicAutoLockMaybe()",
    "kind": "Method",
    "detail": "Function (} private : LockType& lock_ ; } ; template<class LockType> class SCOPED_LOCKABLE BasicAutoLockMaybe { public :)",
    "insertText": "BasicAutoLockMaybe(LockType* lock) EXCLUSIVE_LOCK_FUNCTION(lock) : lock_(lock)"
  },
  {
    "label": "BasicAutoLockMaybe()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicAutoLockMaybe(const BasicAutoLockMaybe&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BasicAutoLockMaybe&)",
    "insertText": "operator(const BasicAutoLockMaybe&)"
  },
  {
    "label": "BasicAutoLockMaybe()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BasicAutoLockMaybe() UNLOCK_FUNCTION()"
  },
  {
    "label": "BasicReleasableAutoLock()",
    "kind": "Method",
    "detail": "Function (} } private : LockType* const lock_ ; } ; template<class LockType> class SCOPED_LOCKABLE BasicReleasableAutoLock { public :)",
    "insertText": "BasicReleasableAutoLock(LockType* lock) EXCLUSIVE_LOCK_FUNCTION(lock) : lock_(lock)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(lock_)"
  },
  {
    "label": "BasicReleasableAutoLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicReleasableAutoLock(const BasicReleasableAutoLock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BasicReleasableAutoLock&)",
    "insertText": "operator(const BasicReleasableAutoLock&)"
  },
  {
    "label": "BasicReleasableAutoLock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BasicReleasableAutoLock() UNLOCK_FUNCTION()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Release() UNLOCK_FUNCTION()"
  }
]