[
  {
    "label": "_Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Predicate"
  },
  {
    "label": "__invert",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__invert"
  },
  {
    "label": "_T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_T1"
  },
  {
    "label": "_T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_T2"
  },
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "_InputIterator1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator1"
  },
  {
    "label": "_Sent1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent1"
  },
  {
    "label": "_InputIterator2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator2"
  },
  {
    "label": "_Sent2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent2"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "_BidirectionalIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BidirectionalIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_INPLACE_MERGE_H # define _LIBCPP___ALGORITHM_INPLACE_MERGE_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / lower_bound . h> # include<__algorithm / min . h> # include<__algorithm / move . h> # include<__algorithm / rotate . h> # include<__algorithm / upper_bound . h> # include<__config> # include<__functional / identity . h> # include<__iterator / advance . h> # include<__iterator / distance . h> # include<__iterator / iterator_traits . h> # include<__iterator / reverse_iterator . h> # include<memory> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__invert()",
    "kind": "Method",
    "detail": "Function (private : _Predicate __p_ ; public : _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__invert()"
  },
  {
    "label": "__invert()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__invert(_Predicate __p) : __p_(__p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _T1> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator()(const _T1& __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _T1,class _T2> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator()(const _T1& __x, const _T2& __y)"
  },
  {
    "label": "__half_inplace_merge()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _AlgPolicy,class _Compare,class _InputIterator1,class _Sent1,class _InputIterator2,class _Sent2,class _OutputIterator> void)",
    "insertText": "__half_inplace_merge(_InputIterator1 __first1, _Sent1 __last1, _InputIterator2 __first2, _Sent2 __last2, _OutputIterator __result, _Compare&& __comp)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__move<)",
    "insertText": "_AlgPolicy(__first1, __last1, __result)"
  },
  {
    "label": "__iter_move()",
    "kind": "Method",
    "detail": "Function (* __result = _IterOps<_AlgPolicy)",
    "insertText": "__iter_move(__first2)"
  },
  {
    "label": "__iter_move()",
    "kind": "Method",
    "detail": "Function (+ + __first2 ; } else {* __result = _IterOps<_AlgPolicy)",
    "insertText": "__iter_move(__first1)"
  },
  {
    "label": "__buffered_inplace_merge()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; } } } template<class _AlgPolicy,class _Compare,class _BidirectionalIterator> void)",
    "insertText": "__buffered_inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare&& __comp, typename iterator_traits<_BidirectionalIterator>::difference_type __len1, typename iterator_traits<_BidirectionalIterator>::difference_type __len2, typename iterator_traits<_BidirectionalIterator>::value_type* __buff)"
  },
  {
    "label": "__d()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_BidirectionalIterator>::value_type value_type ; __destruct_n)",
    "insertText": "__d(0)"
  },
  {
    "label": "__h2()",
    "kind": "Method",
    "detail": "Function (unique_ptr<value_type,__destruct_n&>)",
    "insertText": "__h2(__buff, __d)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (value_type* __p = __buff ;)",
    "insertText": "for(_BidirectionalIterator __i = __first; __i != __middle; __d.template __incr<value_type>(), (void) ++__i, (void) ++__p) ::new ((void*)__p) value_type(_IterOps<_AlgPolicy>::__iter_move(__i))"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__half_inplace_merge<)",
    "insertText": "_AlgPolicy(__buff, __p, __middle, __last, __first, __comp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { value_type* __p = __buff ;)",
    "insertText": "for(_BidirectionalIterator __i = __middle; __i != __last; __d.template __incr<value_type>(), (void) ++__i, (void) ++__p) ::new ((void*)__p) value_type(_IterOps<_AlgPolicy>::__iter_move(__i))"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (typedef __unconstrained_reverse_iterator<_BidirectionalIterator> _RBi ; typedef __unconstrained_reverse_iterator<value_type*> _Rv ; typedef __invert<_Compare> _Inverted ; std::__half_inplace_merge<)",
    "insertText": "_AlgPolicy(_Rv(__p), _Rv(__buff), _RBi(__middle), _RBi(__first), _RBi(__last), _Inverted(__comp))"
  },
  {
    "label": "__inplace_merge()",
    "kind": "Method",
    "detail": "Function (} } template<class _AlgPolicy,class _Compare,class _BidirectionalIterator> void)",
    "insertText": "__inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare&& __comp, typename iterator_traits<_BidirectionalIterator>::difference_type __len1, typename iterator_traits<_BidirectionalIterator>::difference_type __len2, typename iterator_traits<_BidirectionalIterator>::value_type* __buff, ptrdiff_t __buff_size)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (using _Ops = _IterOps<_AlgPolicy> ; typedef iterator_traits<_BidirectionalIterator>::difference_type difference_type ;)",
    "insertText": "while(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} _BidirectionalIterator __m1 ; _BidirectionalIterator __m2 ; difference_type __len11 ; difference_type __len21 ;)",
    "insertText": "if(__len1 < __len2)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (__len21 = __len2 / 2 ; __m2 = __middle ;)",
    "insertText": "advance(__m2, __len21)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (__m1 = std::__upper_bound<)",
    "insertText": "_AlgPolicy(__first, __middle, *__m2, __comp, std::__identity())"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (__len11 =)",
    "insertText": "distance(__first, __m1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(__len1 == 1)"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iter_swap(__first, __middle)"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (__m2 =)",
    "insertText": "lower_bound(__middle, __last, *__m1, __comp)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (__len21 =)",
    "insertText": "distance(__middle, __m2)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (} difference_type __len12 = __len1 - __len11 ; difference_type __len22 = __len2 - __len21 ; __middle = std::__rotate<)",
    "insertText": "_AlgPolicy(__m1, __middle, __m2)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__inplace_merge<)",
    "insertText": "_AlgPolicy(__first, __m1, __middle, __comp, __len11, __len21, __buff, __buff_size)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (__first = __middle ; __middle = __m2 ; __len1 = __len12 ; __len2 = __len22 ; } else { std::__inplace_merge<)",
    "insertText": "_AlgPolicy(__middle, __m2, __last, __comp, __len12, __len22, __buff, __buff_size)"
  },
  {
    "label": "__inplace_merge()",
    "kind": "Method",
    "detail": "Function (__last = __middle ; __middle = __m1 ; __len1 = __len11 ; __len2 = __len21 ; } } } template<class _AlgPolicy,class _BidirectionalIterator,class _Compare> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare&& __comp)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_BidirectionalIterator>::value_type value_type ; typedef iterator_traits<_BidirectionalIterator>::difference_type difference_type ; difference_type __len1 = _IterOps<_AlgPolicy)",
    "insertText": "distance(__first, __middle)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (difference_type __len2 = _IterOps<_AlgPolicy)",
    "insertText": "distance(__middle, __last)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (difference_type __buf_size =)",
    "insertText": "min(__len1, __len2)"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_PUSH pair<value_type*,ptrdiff_t> __buf = _VSTD::get_temporary_buffer<)",
    "insertText": "value_type(__buf_size)"
  },
  {
    "label": "__h()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_POP unique_ptr<value_type,__return_temporary_buffer>)",
    "insertText": "__h(__buf.first)"
  },
  {
    "label": "inplace_merge()",
    "kind": "Method",
    "detail": "Function (} template<class _BidirectionalIterator,class _Compare> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (typedef __comp_ref_type<_Compare>::type _Comp_ref ; std::__inplace_merge<)",
    "insertText": "_ClassicAlgPolicy(std::move(__first), std::move(__middle), std::move(__last), static_cast<_Comp_ref>(__comp))"
  },
  {
    "label": "inplace_merge()",
    "kind": "Method",
    "detail": "Function (} template<class _BidirectionalIterator> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last)"
  },
  {
    "label": "inplace_merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inplace_merge(std::move(__first), std::move(__middle), std::move(__last), __less<typename iterator_traits<_BidirectionalIterator>::value_type>())"
  }
]