[
  {
    "label": "skip_list_node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "skip_list_node"
  },
  {
    "label": "skip_list_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "skip_list_iterator"
  },
  {
    "label": "concurrent_skip_list",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_skip_list"
  },
  {
    "label": "skip_list_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "skip_list_iterator"
  },
  {
    "label": "const_range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_range"
  },
  {
    "label": "range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "range"
  },
  {
    "label": "concurrent_skip_list",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_skip_list"
  },
  {
    "label": "InputIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIt"
  },
  {
    "label": "const_range_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_range_type"
  },
  {
    "label": "const_range_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_range_type"
  },
  {
    "label": "range_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "range_type"
  },
  {
    "label": "range_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "range_type"
  },
  {
    "label": "not_greater_compare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "not_greater_compare"
  },
  {
    "label": "concurrent_skip_list",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_skip_list"
  },
  {
    "label": "concurrent_skip_list",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_skip_list"
  },
  {
    "label": "concurrent_geometric_level_generator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_geometric_level_generator"
  },
  {
    "label": "lock_type()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "lock_type(my_mutex)"
  },
  {
    "label": "internal_insert()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_insert(value)"
  },
  {
    "label": "delete_node()",
    "kind": "Method",
    "detail": "Function (extracted)",
    "insertText": "delete_node(extract_result.first)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "get_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "get_iterator(first)"
  },
  {
    "label": "internal_get_bound()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_get_bound(key, my_compare)"
  },
  {
    "label": "internal_get_bound()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_get_bound(key, my_compare)"
  },
  {
    "label": "internal_get_bound()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_get_bound(key, my_compare)"
  },
  {
    "label": "internal_get_bound()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_get_bound(key, my_compare)"
  },
  {
    "label": "internal_find()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_find(key)"
  },
  {
    "label": "internal_find()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_find(key)"
  },
  {
    "label": "internal_find()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_find(key)"
  },
  {
    "label": "internal_find()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_find(key)"
  },
  {
    "label": "internal_count()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_count(key)"
  },
  {
    "label": "internal_count()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_count(key)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(nullptr)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_iterator(nullptr)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_iterator(nullptr)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(node)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(node)"
  },
  {
    "label": "range_type()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "range_type(*this)"
  },
  {
    "label": "const_range_type()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_range_type(*this)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_iterator(next)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(next)"
  },
  {
    "label": "handle()",
    "kind": "Method",
    "detail": "Function (node_type)",
    "insertText": "handle(extract_result.first)"
  },
  {
    "label": "my_rnd_generator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "my_rnd_generator()"
  },
  {
    "label": "deallocate_node()",
    "kind": "Method",
    "detail": "Function (memory)",
    "insertText": "deallocate_node(node, sz)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(it.my_node_ptr)"
  }
]