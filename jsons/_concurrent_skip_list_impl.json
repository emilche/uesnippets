[
  {
    "label": "skip_list_node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "skip_list_node"
  },
  {
    "label": "skip_list_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "skip_list_iterator"
  },
  {
    "label": "concurrent_skip_list",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_skip_list"
  },
  {
    "label": "const_range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_range"
  },
  {
    "label": "range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "range"
  },
  {
    "label": "InputIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIt"
  },
  {
    "label": "const_range_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_range_type"
  },
  {
    "label": "range_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "range_type"
  },
  {
    "label": "not_greater_compare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "not_greater_compare"
  },
  {
    "label": "concurrent_geometric_level_generator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_geometric_level_generator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_concurrent_skip_list_H # define __TBB_concurrent_skip_list_H # if !)",
    "insertText": "defined(__TBB_concurrent_map_H) && !defined(__TBB_concurrent_set_H)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (use public TBB headers instead . # endif # include \" . . / tbb_config . h \" # include \" . . / tbb_stddef . h \" # include \" . . / tbb_allocator . h \" # include \" . . / spin_mutex . h \" # include \" . . / tbb_exception . h \" # include \" . . / enumerable_thread_specific . h \" # include \" _allocator_traits . h \" # include \" _template_helpers . h \" # include \" _node_handle_impl . h \" # include<utility> # include<functional> # include<initializer_list> # include<memory> # include<atomic> # include<mutex> # include<vector> # include<array> # include<type_traits> # include<cstdlib> # include<random> # include<tuple> # if _MSC_VER # pragma)",
    "insertText": "warning(disable: 4189) #pragma warning(disable: 4127)"
  },
  {
    "label": "skip_list_node()",
    "kind": "Method",
    "detail": "Function (namespace interface10 { namespace internal { template<Value,Mutex> class skip_list_node { public : using value_type = Value ; using size_type = std::size_t ; using reference = value_type& ; using const_reference = const value_type& ; using pointer = value_type* ; using const_pointer = const value_type* ; using node_pointer = skip_list_node* ; using atomic_node_pointer = std::atomic<node_pointer> ; using mutex_type = Mutex ; using lock_type = std::unique_lock<mutex_type> ;)",
    "insertText": "skip_list_node(size_type levels) : my_height(levels), my_fullyLinked(false)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(height() == levels, \"Wrong node height\")"
  },
  {
    "label": "skip_list_node()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "skip_list_node()"
  },
  {
    "label": "skip_list_node()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "skip_list_node(const skip_list_node&)"
  },
  {
    "label": "skip_list_node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "skip_list_node(skip_list_node&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (skip_list_node&)",
    "insertText": "operator(const skip_list_node&)"
  },
  {
    "label": "storage()",
    "kind": "Method",
    "detail": "Function (pointer)",
    "insertText": "storage()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "value()"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (} node_pointer)",
    "insertText": "next(size_type level)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(level < height(), \"Cannot get next on the level greater than height\")"
  },
  {
    "label": "set_next()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_next(size_type level, node_pointer next)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(level < height(), \"Cannot set next on the level greater than height\")"
  },
  {
    "label": "my_next()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "my_next(level).store(next, std::memory_order_release)"
  },
  {
    "label": "height()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "height()"
  },
  {
    "label": "mark_linked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "mark_linked()"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (my_fullyLinked .)",
    "insertText": "store(true, std::memory_order_release)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (} lock_type)",
    "insertText": "acquire()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} private : using aligned_storage_type = std::aligned_storage<)",
    "insertText": "sizeof(value_type), alignof(value_type)"
  },
  {
    "label": "my_next()",
    "kind": "Method",
    "detail": "Function (atomic_node_pointer&)",
    "insertText": "my_next(size_type level)"
  },
  {
    "label": "atomic_node_pointer()",
    "kind": "Method",
    "detail": "Function (atomic_node_pointer* arr = reinterpret_cast<)",
    "insertText": "atomic_node_pointer(this + 1)"
  },
  {
    "label": "skip_list_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "skip_list_iterator(const skip_list_iterator<node_type, false>& other) : my_node_ptr(other.my_node_ptr)"
  },
  {
    "label": "skip_list_iterator()",
    "kind": "Method",
    "detail": "Function (} template<T = void,= std::enable_if<is_const,T>::type>)",
    "insertText": "skip_list_iterator(const skip_list_iterator<node_type, true>& other) : my_node_ptr(other.my_node_ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "operator()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_node_ptr != nullptr, NULL)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (my_node_ptr = my_node_ptr ->)",
    "insertText": "next(0)"
  },
  {
    "label": "skip_list_iterator()",
    "kind": "Method",
    "detail": "Function (skip_list_iterator tmp =* this ; + +* this ; return tmp ; } private :)",
    "insertText": "skip_list_iterator(node_type* n) : my_node_ptr(n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} node_ptr my_node_ptr ; template<Traits> class concurrent_skip_list ; class skip_list_iterator<NodeType,true> ; class const_range ; class range ; template<T,bool M,bool U> bool)",
    "insertText": "operator(const skip_list_iterator<T, M>&, const skip_list_iterator<T, U>&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<NodeType,bool is_const1,bool is_const2> bool)",
    "insertText": "operator(const skip_list_iterator<NodeType, is_const1>& lhs, const skip_list_iterator<NodeType, is_const2>& rhs)"
  },
  {
    "label": "create_dummy_head()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "create_dummy_head()"
  },
  {
    "label": "concurrent_skip_list()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_skip_list(const key_compare& comp, const allocator_type& alloc = allocator_type()) : my_node_allocator(alloc), my_compare(comp), my_size(0)"
  },
  {
    "label": "concurrent_skip_list()",
    "kind": "Method",
    "detail": "Function (} template<class InputIt>)",
    "insertText": "concurrent_skip_list(InputIt first, InputIt last, const key_compare& comp = key_compare(), const allocator_type& alloc = allocator_type()) : my_node_allocator(alloc), my_compare(comp), my_size(0)"
  },
  {
    "label": "internal_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_copy(first, last)"
  },
  {
    "label": "concurrent_skip_list()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_skip_list(const concurrent_skip_list& other) : my_node_allocator(node_allocator_traits::select_on_container_copy_construction(other.get_allocator())), my_compare(other.my_compare), my_rnd_generator(other.my_rnd_generator), my_size(0)"
  },
  {
    "label": "internal_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_copy(other)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_size == other.my_size, \"Wrong size of copy-constructed container\")"
  },
  {
    "label": "concurrent_skip_list()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_skip_list(const concurrent_skip_list& other, const allocator_type& alloc) : my_node_allocator(alloc), my_compare(other.my_compare), my_rnd_generator(other.my_rnd_generator), my_size(0)"
  },
  {
    "label": "concurrent_skip_list()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_skip_list(concurrent_skip_list&& other) : my_node_allocator(std::move(other.my_node_allocator)), my_compare(other.my_compare), my_rnd_generator(other.my_rnd_generator)"
  },
  {
    "label": "internal_move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_move(std::move(other))"
  },
  {
    "label": "concurrent_skip_list()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_skip_list(concurrent_skip_list&& other, const allocator_type& alloc) : my_node_allocator(alloc), my_compare(other.my_compare), my_rnd_generator(other.my_rnd_generator)"
  },
  {
    "label": "internal_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_copy(std::make_move_iterator(other.begin()), std::make_move_iterator(other.end()))"
  },
  {
    "label": "concurrent_skip_list()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "concurrent_skip_list()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "delete_dummy_head()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete_dummy_head()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_skip_list&)",
    "insertText": "operator(const concurrent_skip_list& other)"
  },
  {
    "label": "allocator_copy_assignment()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "allocator_copy_assignment(my_node_allocator, other.my_node_allocator, pocca_type())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } concurrent_skip_list&)",
    "insertText": "operator(concurrent_skip_list&& other)"
  },
  {
    "label": "internal_move_assign()",
    "kind": "Method",
    "detail": "Function (my_compare = other . my_compare ; my_rnd_generator = other . my_rnd_generator ;)",
    "insertText": "internal_move_assign(std::move(other), pocma_type())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } concurrent_skip_list&)",
    "insertText": "operator(std::initializer_list<value_type> il)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(il.begin(),il.end())"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} std::pair<iterator,bool>)",
    "insertText": "insert(value_type&& value)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "insert(const_iterator, const_reference value)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "insert(const_iterator, value_type&& value)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} template<InputIterator> void)",
    "insertText": "insert(InputIterator first, InputIterator last)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "insert(std::initializer_list<value_type> init)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(init.begin(), init.end())"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} std::pair<iterator,bool>)",
    "insertText": "insert(node_type&& nh)"
  },
  {
    "label": "internal_insert_node()",
    "kind": "Method",
    "detail": "Function (std::pair<iterator,bool> insert_result =)",
    "insertText": "internal_insert_node(nh.my_node)"
  },
  {
    "label": "deactivate()",
    "kind": "Method",
    "detail": "Function (nh .)",
    "insertText": "deactivate()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} return insert_result ; } return std::pair<iterator,)",
    "insertText": "bool(end(), false)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "insert(const_iterator, node_type&& nh)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> std::pair<iterator,bool>)",
    "insertText": "emplace(Args&&... args)"
  },
  {
    "label": "emplace_hint()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> iterator)",
    "insertText": "emplace_hint(const_iterator, Args&&... args)"
  },
  {
    "label": "unsafe_erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "unsafe_erase(iterator pos)"
  },
  {
    "label": "internal_extract()",
    "kind": "Method",
    "detail": "Function (std::pair<node_ptr,node_ptr> extract_result =)",
    "insertText": "internal_extract(pos)"
  },
  {
    "label": "delete_node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete_node(extract_result.first)"
  },
  {
    "label": "unsafe_erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "unsafe_erase(const_iterator first, const_iterator last)"
  },
  {
    "label": "unsafe_erase()",
    "kind": "Method",
    "detail": "Function (first =)",
    "insertText": "unsafe_erase(get_iterator(first))"
  },
  {
    "label": "get_iterator()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "get_iterator(first)"
  },
  {
    "label": "unsafe_erase()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "unsafe_erase(const key_type& key)"
  },
  {
    "label": "equal_range()",
    "kind": "Method",
    "detail": "Function (std::pair<iterator,iterator> range =)",
    "insertText": "equal_range(key)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (size_type sz =)",
    "insertText": "distance(range.first, range.second)"
  },
  {
    "label": "unsafe_erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unsafe_erase(range.first, range.second)"
  },
  {
    "label": "unsafe_extract()",
    "kind": "Method",
    "detail": "Function (} node_type)",
    "insertText": "unsafe_extract(const key_type& key)"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "lower_bound(const key_type& key)"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (} template<K,= std::enable_if<tbb::internal::has_is_transparent<key_compare>::value,K>::type> iterator)",
    "insertText": "lower_bound(const K& key)"
  },
  {
    "label": "upper_bound()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "upper_bound(const key_type& key)"
  },
  {
    "label": "upper_bound()",
    "kind": "Method",
    "detail": "Function (} template<K,= std::enable_if<tbb::internal::has_is_transparent<key_compare>::value,K>::type> iterator)",
    "insertText": "upper_bound(const K& key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "find(const key_type& key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} template<K,= std::enable_if<tbb::internal::has_is_transparent<key_compare>::value,K>::type> iterator)",
    "insertText": "find(const K& key)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "count(const key_type& key)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} template<K,= std::enable_if<tbb::internal::has_is_transparent<key_compare>::value,K>::type> size_type)",
    "insertText": "count(const K& key)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "contains(const key_type& key)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} template<K,= std::enable_if<tbb::internal::has_is_transparent<key_compare>::value,K>::type> bool)",
    "insertText": "contains(const K& key)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(dummy_head->height() > 0, NULL)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(current->height() > 0, NULL)"
  },
  {
    "label": "delete_node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete_node(current)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (current = next ; } my_size = 0 ;)",
    "insertText": "for(size_type i = 0; i < dummy_head->height(); ++i)"
  },
  {
    "label": "set_next()",
    "kind": "Method",
    "detail": "Function (dummy_head ->)",
    "insertText": "set_next(i, nullptr)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} } iterator)",
    "insertText": "begin()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "max_size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "get_allocator()",
    "kind": "Method",
    "detail": "Function (} allocator_type)",
    "insertText": "get_allocator()"
  },
  {
    "label": "allocator_swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ; using pocs_type = node_allocator_traits::propagate_on_container_swap ; tbb::)",
    "insertText": "allocator_swap(my_node_allocator, other.my_node_allocator, pocs_type())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(my_compare, other.my_compare)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(my_rnd_generator, other.my_rnd_generator)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(dummy_head, other.dummy_head)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (size_type tmp = my_size ; my_size .)",
    "insertText": "store(other.my_size)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (other . my_size .)",
    "insertText": "store(tmp)"
  },
  {
    "label": "equal_range()",
    "kind": "Method",
    "detail": "Function (} std::pair<iterator,iterator>)",
    "insertText": "equal_range(const key_type& key)"
  },
  {
    "label": "equal_range()",
    "kind": "Method",
    "detail": "Function (} template<K,= std::enable_if<tbb::internal::has_is_transparent<key_compare>::value,K>::type> std::pair<iterator,iterator>)",
    "insertText": "equal_range(const K& key)"
  },
  {
    "label": "key_comp()",
    "kind": "Method",
    "detail": "Function (} key_compare)",
    "insertText": "key_comp()"
  },
  {
    "label": "is_divisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_divisible()"
  },
  {
    "label": "const_range_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "const_range_type(const_range_type& r, split) : my_end(r.my_end)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (my_begin =)",
    "insertText": "iterator(r.my_begin.my_node_ptr->next(r.my_level - 1))"
  },
  {
    "label": "const_range_type()",
    "kind": "Method",
    "detail": "Function (r . my_end = my_begin ; })",
    "insertText": "const_range_type(const concurrent_skip_list& l) : my_end(l.end()), my_begin(l.begin()), my_level(my_begin.my_node_ptr->height())"
  },
  {
    "label": "range_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "range_type(const concurrent_skip_list& l) : const_range_type(l)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (} } ; range_type)",
    "insertText": "range()"
  },
  {
    "label": "internal_move()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "internal_move(concurrent_skip_list&& other)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (my_size = other . my_size .)",
    "insertText": "load()"
  },
  {
    "label": "get_key()",
    "kind": "Method",
    "detail": "Function (other . my_size = 0 ; } const key_type&)",
    "insertText": "get_key(node_ptr n)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(n, NULL)"
  },
  {
    "label": "internal_find()",
    "kind": "Method",
    "detail": "Function (} template<K> iterator)",
    "insertText": "internal_find(const K& key)"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (iterator it =)",
    "insertText": "lower_bound(key)"
  },
  {
    "label": "internal_count()",
    "kind": "Method",
    "detail": "Function (} template<K> size_type)",
    "insertText": "internal_count(const K& key)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(find(key) == end()) ? size_type(0) : size_type(1)"
  },
  {
    "label": "internal_find_position()",
    "kind": "Method",
    "detail": "Function (} template<K,pointer_type,comparator> pointer_type)",
    "insertText": "internal_find_position(size_type level, pointer_type& prev, const K& key, const comparator& cmp)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(level < prev->height(), \"Wrong level to find position\")"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (pointer_type curr = prev ->)",
    "insertText": "next(level)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (prev = curr ;)",
    "insertText": "__TBB_ASSERT(level < prev->height(), NULL)"
  },
  {
    "label": "fill_prev_next_arrays()",
    "kind": "Method",
    "detail": "Function (} return curr ; } template<comparator> void)",
    "insertText": "fill_prev_next_arrays(array_type& prev_nodes, array_type& next_nodes, node_ptr prev, const key_type& key, const comparator& cmp)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (prev_nodes .)",
    "insertText": "fill(dummy_head)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (next_nodes .)",
    "insertText": "fill(nullptr)"
  },
  {
    "label": "internal_find_position()",
    "kind": "Method",
    "detail": "Function (node_ptr next =)",
    "insertText": "internal_find_position(h - 1, prev, key, cmp)"
  },
  {
    "label": "internal_insert()",
    "kind": "Method",
    "detail": "Function (prev_nodes [ h - 1 ] = prev ; next_nodes [ h - 1 ] = next ; } } template<. . . Args> std::pair<iterator,bool>)",
    "insertText": "internal_insert(Args&&... args)"
  },
  {
    "label": "create_node()",
    "kind": "Method",
    "detail": "Function (node_ptr new_node =)",
    "insertText": "create_node(std::forward<Args>(args)...)"
  },
  {
    "label": "internal_insert_node()",
    "kind": "Method",
    "detail": "Function (std::pair<iterator,bool> insert_result =)",
    "insertText": "internal_insert_node(new_node)"
  },
  {
    "label": "delete_node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete_node(new_node)"
  },
  {
    "label": "internal_insert_node()",
    "kind": "Method",
    "detail": "Function (} return insert_result ; } std::pair<iterator,bool>)",
    "insertText": "internal_insert_node(node_ptr new_node)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (array_type prev_nodes ; array_type next_nodes ;)",
    "insertText": "__TBB_ASSERT(dummy_head->height() >= new_node->height(), \"Wrong height for new node\")"
  },
  {
    "label": "fill_prev_next_arrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill_prev_next_arrays(prev_nodes, next_nodes, dummy_head, get_key(new_node), not_greater_compare(my_compare))"
  },
  {
    "label": "fill_prev_next_arrays()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "fill_prev_next_arrays(prev_nodes, next_nodes, dummy_head, get_key(new_node), my_compare)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} node_ptr next = next_nodes [ 0 ] ;)",
    "insertText": "if(next && !allow_multimapping && !my_compare(get_key(new_node), get_key(next)))"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} return std::pair<iterator,)",
    "insertText": "bool(iterator(next), false)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__TBB_ASSERT(allow_multimapping || !next || my_compare(get_key(new_node), get_key(next)), \"Wrong elements order\")"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(!try_insert_node(new_node, prev_nodes, next_nodes))"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(new_node, NULL)"
  },
  {
    "label": "try_insert_node()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "try_insert_node(node_ptr new_node, array_type& prev_nodes, array_type& next_nodes)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(dummy_head->height() >= new_node->height(), NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lock_array locks ;)",
    "insertText": "if(!try_lock_nodes(new_node->height(), prev_nodes, next_nodes, locks))"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(prev_nodes[level]->height() > level, NULL)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(prev_nodes[level]->next(level) == next_nodes[level], NULL)"
  },
  {
    "label": "set_next()",
    "kind": "Method",
    "detail": "Function (new_node ->)",
    "insertText": "set_next(level, next_nodes[level])"
  },
  {
    "label": "set_next()",
    "kind": "Method",
    "detail": "Function (prev_nodes [ level ] ->)",
    "insertText": "set_next(level, new_node)"
  },
  {
    "label": "try_lock_nodes()",
    "kind": "Method",
    "detail": "Function (+ + my_size ; return true ; } bool)",
    "insertText": "try_lock_nodes(size_type height, array_type& prevs, array_type& next_nodes, lock_array& locks)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (node_ptr next = prevs [ l ] ->)",
    "insertText": "next(l)"
  },
  {
    "label": "internal_get_bound()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<K,comparator> const_iterator)",
    "insertText": "internal_get_bound(const K& key, const comparator& cmp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (node_ptr next = nullptr ;)",
    "insertText": "for(size_type h = prev->height(); h > 0; --h)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "const_iterator(next)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "iterator(next)"
  },
  {
    "label": "internal_extract()",
    "kind": "Method",
    "detail": "Function (} std::pair<node_ptr,node_ptr>)",
    "insertText": "internal_extract(const_iterator it)"
  },
  {
    "label": "get_key()",
    "kind": "Method",
    "detail": "Function (key_type key =)",
    "insertText": "get_key(*it)"
  },
  {
    "label": "fill_prev_next_arrays()",
    "kind": "Method",
    "detail": "Function (array_type prev_nodes ; array_type next_nodes ;)",
    "insertText": "fill_prev_next_arrays(prev_nodes, next_nodes, prev, key, my_compare)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(next_nodes[level] == erase_node, NULL)"
  },
  {
    "label": "set_next()",
    "kind": "Method",
    "detail": "Function (prev_nodes [ level ] ->)",
    "insertText": "set_next(level, erase_node->next(level))"
  },
  {
    "label": "node_ptr()",
    "kind": "Method",
    "detail": "Function (} - - my_size ; return std::pair<node_ptr,)",
    "insertText": "node_ptr(erase_node, next_node)"
  },
  {
    "label": "node_ptr()",
    "kind": "Method",
    "detail": "Function (} } return std::pair<node_ptr,)",
    "insertText": "node_ptr(nullptr, nullptr)"
  },
  {
    "label": "internal_merge()",
    "kind": "Method",
    "detail": "Function (} protected : template<SourceType> void)",
    "insertText": "internal_merge(SourceType&& source)"
  },
  {
    "label": "__TBB_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (using source_type = std::decay<SourceType>::type ; using source_iterator = source_type::iterator ;)",
    "insertText": "__TBB_STATIC_ASSERT((std::is_same<node_type, typename source_type::node_type>::value), \"Incompatible containers cannot be merged\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (source_iterator where = it + + ;)",
    "insertText": "if(allow_multimapping || !contains(traits_type::get_key(*where)))"
  },
  {
    "label": "internal_extract()",
    "kind": "Method",
    "detail": "Function (std::pair<node_ptr,node_ptr> extract_result = source .)",
    "insertText": "internal_extract(where)"
  },
  {
    "label": "handle()",
    "kind": "Method",
    "detail": "Function (node_type)",
    "insertText": "handle(extract_result.first)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!handle.empty(), \"Extracted handle in merge is empty\")"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (source .)",
    "insertText": "insert(std::move(handle))"
  },
  {
    "label": "internal_copy()",
    "kind": "Method",
    "detail": "Function (} } } private : void)",
    "insertText": "internal_copy(const concurrent_skip_list& other)"
  },
  {
    "label": "internal_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_copy(other.begin(), other.end())"
  },
  {
    "label": "internal_copy()",
    "kind": "Method",
    "detail": "Function (} template<Iterator> void)",
    "insertText": "internal_copy(Iterator first, Iterator last)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (try {)",
    "insertText": "for(auto it = first; it != last; ++it) insert(*it)"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "catch(...)"
  },
  {
    "label": "random_level()",
    "kind": "Method",
    "detail": "Function (throw ; } } size_type)",
    "insertText": "random_level()"
  },
  {
    "label": "calc_node_size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "calc_node_size(size_type height)"
  },
  {
    "label": "create_node()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> node_ptr)",
    "insertText": "create_node(Args&&... args)"
  },
  {
    "label": "calc_node_size()",
    "kind": "Method",
    "detail": "Function (size_type sz =)",
    "insertText": "calc_node_size(levels)"
  },
  {
    "label": "node_ptr()",
    "kind": "Method",
    "detail": "Function (node_ptr node = reinterpret_cast<)",
    "insertText": "node_ptr(node_allocator_traits::allocate(my_node_allocator, sz))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (try {)",
    "insertText": "construct(my_node_allocator, node, levels)"
  },
  {
    "label": "deallocate_node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate_node(node, sz)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (throw ; } try {)",
    "insertText": "construct(my_node_allocator, node->storage(), std::forward<Args>(args)...)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy(my_node_allocator, node)"
  },
  {
    "label": "calc_node_size()",
    "kind": "Method",
    "detail": "Function (size_type sz =)",
    "insertText": "calc_node_size(MAX_LEVEL)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (auto max_level = MAX_LEVEL ; try {)",
    "insertText": "construct(my_node_allocator, dummy_head, max_level)"
  },
  {
    "label": "deallocate_node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate_node(dummy_head, sz)"
  },
  {
    "label": "delete_node()",
    "kind": "Method",
    "detail": "Function (throw ; } } template<bool is_dummy = false> void)",
    "insertText": "delete_node(node_ptr node)"
  },
  {
    "label": "calc_node_size()",
    "kind": "Method",
    "detail": "Function (size_type sz =)",
    "insertText": "calc_node_size(node->height())"
  },
  {
    "label": "deallocate_node()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deallocate_node(node_ptr node, size_type sz)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate(my_node_allocator, reinterpret_cast<uint8_t*>(node), sz)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (delete_node<)",
    "insertText": "true(dummy_head)"
  },
  {
    "label": "get_iterator()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "get_iterator(const_iterator it)"
  },
  {
    "label": "internal_move_assign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_move_assign(concurrent_skip_list&& other, std::true_type)"
  },
  {
    "label": "allocator_move_assignment()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "allocator_move_assignment(my_node_allocator, other.my_node_allocator, std::true_type())"
  },
  {
    "label": "internal_move_assign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_move_assign(concurrent_skip_list&& other, std::false_type)"
  },
  {
    "label": "not_greater_compare()",
    "kind": "Method",
    "detail": "Function (} } struct not_greater_compare { const key_compare& my_less_compare ;)",
    "insertText": "not_greater_compare(const key_compare& less_compare) : my_less_compare(less_compare)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<K1,K2> bool)",
    "insertText": "operator()(const K1& first, const K2& second)"
  },
  {
    "label": "concurrent_geometric_level_generator()",
    "kind": "Method",
    "detail": "Function (} } ; node_allocator_type my_node_allocator ; key_compare my_compare ; random_level_generator_type my_rnd_generator ; node_ptr dummy_head ; template<OtherTraits> class concurrent_skip_list ; std::atomic<size_type> my_size ; } ; template<size_t MAX_LEVEL> class concurrent_geometric_level_generator { public : size_t max_level = MAX_LEVEL ;)",
    "insertText": "concurrent_geometric_level_generator() : engines(time(NULL))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "operator()()"
  }
]