[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Type1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Type1"
  },
  {
    "label": "_Type2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Type2"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_REPLACE_H # define _LIBCPP___ALGORITHM_RANGES_REPLACE_H # include<__algorithm / ranges_replace_if . h> # include<__config> # include<__functional / identity . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined (_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __replace { struct __fn { template<input_iterator _Iter,sentinel_for<_Iter> _Sent,class _Type1,class _Type2,class _Proj = identity> requires indirectly_writable<_Iter,const _Type2&>&& indirect_binary_predicate<ranges::equal_to,projected<_Iter,_Proj>,const _Type1*> _LIBCPP_HIDE_FROM_ABI _Iter)",
    "insertText": "operator()(_Iter __first, _Sent __last, const _Type1& __old_value, const _Type2& __new_value, _Proj __proj = {})"
  },
  {
    "label": "__pred()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "__pred(const auto& __val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _Range,class _Type1,class _Type2,class _Proj = identity> requires indirectly_writable<iterator_t<_Range>,const _Type2&>&& indirect_binary_predicate<ranges::equal_to,projected<iterator_t<_Range>,_Proj>,const _Type1*> _LIBCPP_HIDE_FROM_ABI borrowed_iterator_t<_Range>)",
    "insertText": "operator()(_Range&& __range, const _Type1& __old_value, const _Type2& __new_value, _Proj __proj = {})"
  },
  {
    "label": "__pred()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "__pred(auto&& __val)"
  }
]