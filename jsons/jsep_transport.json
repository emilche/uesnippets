[
  {
    "label": "DtlsTransportInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DtlsTransportInternal"
  },
  {
    "label": "JsepTransportDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "JsepTransportDescription"
  },
  {
    "label": "JsepTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JsepTransport"
  },
  {
    "label": "JsepTransportDescription()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_JSEP_TRANSPORT_H_ # define PC_JSEP_TRANSPORT_H_ # include<functional> # include<map> # include<memory> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / candidate . h \" # include \" api / crypto_params . h \" # include \" api / ice_transport_interface . h \" # include \" api / jsep . h \" # include \" api / rtc_error . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / transport / data_channel_transport_interface . h \" # include \" media / sctp / sctp_transport_internal . h \" # include \" p2p / base / dtls_transport . h \" # include \" p2p / base / dtls_transport_internal . h \" # include \" p2p / base / ice_transport_internal . h \" # include \" p2p / base / p2p_constants . h \" # include \" p2p / base / transport_description . h \" # include \" p2p / base / transport_info . h \" # include \" pc / dtls_srtp_transport . h \" # include \" pc / dtls_transport . h \" # include \" pc / rtcp_mux_filter . h \" # include \" pc / rtp_transport . h \" # include \" pc / rtp_transport_internal . h \" # include \" pc / sctp_transport . h \" # include \" pc / session_description . h \" # include \" pc / srtp_filter . h \" # include \" pc / srtp_transport . h \" # include \" pc / transport_stats . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / rtc_certificate . h \" # include \" rtc_base / ssl_fingerprint . h \" # include \" rtc_base / ssl_stream_adapter . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" namespace cricket { class DtlsTransportInternal ; struct JsepTransportDescription { public :)",
    "insertText": "JsepTransportDescription()"
  },
  {
    "label": "JsepTransportDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JsepTransportDescription(bool rtcp_mux_enabled, const std::vector<CryptoParams>& cryptos, const std::vector<int>& encrypted_header_extension_ids, int rtp_abs_sendtime_extn_id, const TransportDescription& transport_description)"
  },
  {
    "label": "JsepTransportDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JsepTransportDescription(const JsepTransportDescription& from)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JsepTransportDescription&)",
    "insertText": "operator(const JsepTransportDescription& from)"
  },
  {
    "label": "JsepTransport()",
    "kind": "Method",
    "detail": "Function (bool rtcp_mux_enabled = true ; std::vector<CryptoParams> cryptos ; std::vector<int> encrypted_header_extension_ids ; int rtp_abs_sendtime_extn_id = - 1 ; TransportDescription transport_desc ; } ; class JsepTransport { public :)",
    "insertText": "JsepTransport(const std::string& mid, const rtc::scoped_refptr<rtc::RTCCertificate>& local_certificate, rtc::scoped_refptr<webrtc::IceTransportInterface> ice_transport, rtc::scoped_refptr<webrtc::IceTransportInterface> rtcp_ice_transport, std::unique_ptr<webrtc::RtpTransport> unencrypted_rtp_transport, std::unique_ptr<webrtc::SrtpTransport> sdes_transport, std::unique_ptr<webrtc::DtlsSrtpTransport> dtls_srtp_transport, std::unique_ptr<DtlsTransportInternal> rtp_dtls_transport, std::unique_ptr<DtlsTransportInternal> rtcp_dtls_transport, std::unique_ptr<SctpTransportInternal> sctp_transport, std::function<void()> rtcp_mux_active_callback)"
  },
  {
    "label": "JsepTransport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "JsepTransport()"
  },
  {
    "label": "JsepTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JsepTransport(const JsepTransport&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JsepTransport&)",
    "insertText": "operator(const JsepTransport&)"
  },
  {
    "label": "mid()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "mid()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(network_thread_)"
  },
  {
    "label": "GetLocalCertificate()",
    "kind": "Method",
    "detail": "Function (local_certificate_ = local_certificate ; } rtc::scoped_refptr<rtc::RTCCertificate>)",
    "insertText": "GetLocalCertificate()"
  },
  {
    "label": "SetRemoteJsepTransportDescription()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "SetRemoteJsepTransportDescription(const JsepTransportDescription& jsep_description, webrtc::SdpType type)"
  },
  {
    "label": "AddRemoteCandidates()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "AddRemoteCandidates(const Candidates& candidates)"
  },
  {
    "label": "SetNeedsIceRestartFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNeedsIceRestartFlag()"
  },
  {
    "label": "needs_ice_restart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "needs_ice_restart()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(TransportStats* stats)"
  },
  {
    "label": "local_description()",
    "kind": "Method",
    "detail": "Function (const JsepTransportDescription*)",
    "insertText": "local_description()"
  },
  {
    "label": "remote_description()",
    "kind": "Method",
    "detail": "Function (} const JsepTransportDescription*)",
    "insertText": "remote_description()"
  },
  {
    "label": "rtp_transport()",
    "kind": "Method",
    "detail": "Function (} webrtc::RtpTransportInternal*)",
    "insertText": "rtp_transport()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(sdes_transport_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(unencrypted_rtp_transport_)"
  },
  {
    "label": "rtp_dtls_transport()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } const DtlsTransportInternal*)",
    "insertText": "rtp_dtls_transport()"
  },
  {
    "label": "rtcp_dtls_transport()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } const DtlsTransportInternal*)",
    "insertText": "rtcp_dtls_transport()"
  },
  {
    "label": "RtpDtlsTransport()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } rtc::scoped_refptr<webrtc::DtlsTransport>)",
    "insertText": "RtpDtlsTransport()"
  },
  {
    "label": "VerifyCertificateFingerprint()",
    "kind": "Method",
    "detail": "Function (} webrtc::RTCError)",
    "insertText": "VerifyCertificateFingerprint(const rtc::RTCCertificate* certificate, const rtc::SSLFingerprint* fingerprint)"
  },
  {
    "label": "SetActiveResetSrtpParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveResetSrtpParams(bool active_reset_srtp_params)"
  },
  {
    "label": "SetRtcpMux()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "SetRtcpMux(bool enable, webrtc::SdpType type, ContentSource source)"
  },
  {
    "label": "ActivateRtcpMux()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateRtcpMux() RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "SetSdes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSdes(const std::vector<CryptoParams>& cryptos, const std::vector<int>& encrypted_extension_ids, webrtc::SdpType type, ContentSource source)"
  },
  {
    "label": "NegotiateAndSetDtlsParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "NegotiateAndSetDtlsParameters(webrtc::SdpType local_description_type)"
  },
  {
    "label": "NegotiateDtlsRole()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "NegotiateDtlsRole(webrtc::SdpType local_description_type, ConnectionRole local_connection_role, ConnectionRole remote_connection_role, absl::optional<rtc::SSLRole>* negotiated_dtls_role)"
  },
  {
    "label": "SetRemoteIceParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteIceParameters(const IceParameters& ice_parameters, IceTransportInternal* ice)"
  },
  {
    "label": "SetNegotiatedDtlsParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "SetNegotiatedDtlsParameters(DtlsTransportInternal* dtls_transport, absl::optional<rtc::SSLRole> dtls_role, rtc::SSLFingerprint* remote_fingerprint)"
  },
  {
    "label": "GetTransportStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTransportStats(DtlsTransportInternal* dtls_transport, int component, TransportStats* stats)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const rtc::Thread* const network_thread_ ; const std::string mid_ ; bool needs_ice_restart_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "void()"
  }
]