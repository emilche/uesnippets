[
  {
    "label": "FNaniteVisibilityQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteVisibilityQuery"
  },
  {
    "label": "FNaniteVisibilityResults",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteVisibilityResults"
  },
  {
    "label": "FNaniteVisibility",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteVisibility"
  },
  {
    "label": "FNaniteVisibilityTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteVisibilityTask"
  },
  {
    "label": "FRasterBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterBin"
  },
  {
    "label": "FShadingBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShadingBin"
  },
  {
    "label": "FPrimitiveReferences",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveReferences"
  },
  {
    "label": "FNaniteRasterPipelines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteRasterPipelines"
  },
  {
    "label": "FNaniteShadingPipelines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteShadingPipelines"
  },
  {
    "label": "FNaniteScopedVisibilityFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteScopedVisibilityFrame"
  },
  {
    "label": "FNaniteVisibilityResults()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" NaniteShared . h \" struct FNaniteVisibilityQuery ; class FNaniteVisibilityResults { class FNaniteVisibility ; struct FNaniteVisibilityQuery ; public :)",
    "insertText": "FNaniteVisibilityResults()"
  },
  {
    "label": "IsRasterBinVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRasterBinVisible(uint16 BinIndex)"
  },
  {
    "label": "IsShadingBinVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShadingBinVisible(uint16 BinIndex)"
  },
  {
    "label": "IsRasterTestValid()",
    "kind": "Method",
    "detail": "Function (OutNumTotal = TotalRasterBins ; OutNumVisible =)",
    "insertText": "IsRasterTestValid()"
  },
  {
    "label": "GetShadingBinStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetShadingBinStats(uint32& OutNumVisible, uint32& OutNumTotal)"
  },
  {
    "label": "IsShadingTestValid()",
    "kind": "Method",
    "detail": "Function (OutNumTotal = TotalShadingBins ; OutNumVisible =)",
    "insertText": "IsShadingTestValid()"
  },
  {
    "label": "SetRasterBinIndexTranslator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRasterBinIndexTranslator(const FNaniteRasterBinIndexTranslator InTranslator)"
  },
  {
    "label": "ShouldRenderCustomDepthPrimitive()",
    "kind": "Method",
    "detail": "Function (BinIndexTranslator = InTranslator ; } bool)",
    "insertText": "ShouldRenderCustomDepthPrimitive(uint32 PrimitiveId)"
  },
  {
    "label": "GetRasterBinVisibility()",
    "kind": "Method",
    "detail": "Function (} const TBitArray<>&)",
    "insertText": "GetRasterBinVisibility()"
  },
  {
    "label": "BeginVisibilityFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginVisibilityFrame()"
  },
  {
    "label": "FinishVisibilityFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishVisibilityFrame()"
  },
  {
    "label": "BeginVisibilityQuery()",
    "kind": "Method",
    "detail": "Function (FNaniteVisibilityQuery*)",
    "insertText": "BeginVisibilityQuery(FSceneRenderingBulkObjectAllocator& Allocator, FScene& Scene, const TConstArrayView<FConvexVolume>& ViewList, const class FNaniteRasterPipelines* RasterPipelines, const class FNaniteShadingPipelines* ShadingPipelines, const UE::Tasks::FTask& PrerequisiteTask = {})"
  },
  {
    "label": "GetRasterBinReferences()",
    "kind": "Method",
    "detail": "Function (PrimitiveRasterBinType*)",
    "insertText": "GetRasterBinReferences(const FPrimitiveSceneInfo* SceneInfo)"
  },
  {
    "label": "GetShadingBinReferences()",
    "kind": "Method",
    "detail": "Function (PrimitiveShadingBinType*)",
    "insertText": "GetShadingBinReferences(const FPrimitiveSceneInfo* SceneInfo)"
  },
  {
    "label": "RemoveReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReferences(const FPrimitiveSceneInfo* SceneInfo)"
  },
  {
    "label": "FindOrAddPrimitiveReferences()",
    "kind": "Method",
    "detail": "Function (private : FPrimitiveReferences*)",
    "insertText": "FindOrAddPrimitiveReferences(const FPrimitiveSceneInfo* SceneInfo)"
  },
  {
    "label": "GetVisibilityResults()",
    "kind": "Method",
    "detail": "Function (FNaniteRasterBinIndexTranslator BinIndexTranslator ; TArray<FNaniteVisibilityQuery*,TInlineAllocator<3 2>> VisibilityQueries ; TArray<UE::Tasks::FTask,SceneRenderingAllocator> ActiveEvents ; PrimitiveMapType PrimitiveReferences ; UE::FMutex Mutex ; uint8 bCalledBegin : 1 ; } ; namespace Nanite { const FNaniteVisibilityResults*)",
    "insertText": "GetVisibilityResults(const FNaniteVisibilityQuery* Query)"
  },
  {
    "label": "GetVisibilityTask()",
    "kind": "Method",
    "detail": "Function (UE::Tasks::FTask)",
    "insertText": "GetVisibilityTask(const FNaniteVisibilityQuery* Query)"
  },
  {
    "label": "FNaniteScopedVisibilityFrame()",
    "kind": "Method",
    "detail": "Function (} class FNaniteScopedVisibilityFrame { public :)",
    "insertText": "FNaniteScopedVisibilityFrame(const bool bInEnabled, FNaniteVisibility& InVisibility) : Visibility(InVisibility) , bEnabled(bInEnabled)"
  },
  {
    "label": "FNaniteScopedVisibilityFrame()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FNaniteScopedVisibilityFrame()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } FNaniteVisibility&)",
    "insertText": "Get()"
  }
]