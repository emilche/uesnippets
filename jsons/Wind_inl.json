[
  {
    "label": "SetParams()",
    "kind": "Method",
    "detail": "Function (ST_INLINE void)",
    "insertText": "SetParams(const CWind::SParams& sParams)"
  },
  {
    "label": "GetParams()",
    "kind": "Method",
    "detail": "Function (m_sParams = sParams ; } ST_INLINE const CWind::SParams&)",
    "insertText": "GetParams(void)"
  },
  {
    "label": "SetGustFrequency()",
    "kind": "Method",
    "detail": "Function (m_bGustingEnabled = bEnabled ; } ST_INLINE void)",
    "insertText": "SetGustFrequency(st_float32 fGustFreq)"
  },
  {
    "label": "SetTreeValues()",
    "kind": "Method",
    "detail": "Function (m_sParams . m_fGustFrequency = fGustFreq ; } ST_INLINE void)",
    "insertText": "SetTreeValues(const Vec3& vBranchAnchor, st_float32 fMaxBranchLength)"
  },
  {
    "label": "GetBranchAnchor()",
    "kind": "Method",
    "detail": "Function (m_afBranchWindAnchor [ 0 ] = vBranchAnchor . x ; m_afBranchWindAnchor [ 1 ] = vBranchAnchor . y ; m_afBranchWindAnchor [ 2 ] = vBranchAnchor . z ; m_fMaxBranchLevel1Length = fMaxBranchLength ; } ST_INLINE const st_float32*)",
    "insertText": "GetBranchAnchor(void)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "Normalize(st_float32* pVector)"
  },
  {
    "label": "sqrtf()",
    "kind": "Method",
    "detail": "Function (st_float32 fMagnitude =)",
    "insertText": "sqrtf(pVector[0] * pVector[0] + pVector[1] * pVector[1] + pVector[2] * pVector[2])"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (pVector [ 0 ] / = fMagnitude ; pVector [ 1 ] / = fMagnitude ; pVector [ 2 ] / = fMagnitude ; } else { pVector [ 0 ] = 0 . 0 f ; pVector [ 1 ] = 0 . 0 f ; pVector [ 2 ] = 0 . 0 f ; } } ST_INLINE void)",
    "insertText": "SetOption(EOptions eOption, st_bool bState)"
  },
  {
    "label": "IsOptionEnabled()",
    "kind": "Method",
    "detail": "Function (m_abOptions [ eOption ] = bState ; } ST_INLINE st_bool)",
    "insertText": "IsOptionEnabled(EOptions eOption)"
  },
  {
    "label": "IsBranchWindEnabled()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "IsBranchWindEnabled(void)"
  }
]