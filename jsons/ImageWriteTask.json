[
  {
    "label": "TImageDataTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImageDataTraits"
  },
  {
    "label": "IImageWriteTaskBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IImageWriteTaskBase"
  },
  {
    "label": "FImageWriteTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImageWriteTask"
  },
  {
    "label": "TAsyncAlphaWrite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAsyncAlphaWrite"
  },
  {
    "label": "TAsyncAlphaInvert",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAsyncAlphaInvert"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" IImageWrapper . h \" # include \" ImagePixelData . h \" # include \" Math / Color . h \" # include \" Math / Float16 . h \" # include \" Math / Float16Color . h \" # include \" Math / IntPoint . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CoreDefines . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" template<> struct TImageDataTraits ; typedef TUniqueFunction<)",
    "insertText": "void(FImagePixelData*)"
  },
  {
    "label": "IImageWriteTaskBase()",
    "kind": "Method",
    "detail": "Function (class IImageWriteTaskBase { public : ~)",
    "insertText": "IImageWriteTaskBase()"
  },
  {
    "label": "RunTask()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RunTask()"
  },
  {
    "label": "OnAbandoned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAbandoned()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; class FImageWriteTask : public IImageWriteTaskBase { public : FString Filename ; EImageFormat Format ; int32 CompressionQuality ; bool bOverwriteFile ; TFunction<)",
    "insertText": "void(bool)"
  },
  {
    "label": "FImageWriteTask()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FImagePixelData> PixelData ; TArray<FPixelPreProcessor> PixelPreProcessors ;)",
    "insertText": "FImageWriteTask() : Format(EImageFormat::BMP) , CompressionQuality((int32)EImageCompressionQuality::Default) , bOverwriteFile(true)"
  },
  {
    "label": "AddPreProcessorToSetAlphaOpaque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPreProcessorToSetAlphaOpaque()"
  },
  {
    "label": "WriteToDisk()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "WriteToDisk()"
  },
  {
    "label": "EnsureWritableFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnsureWritableFile()"
  },
  {
    "label": "InitializeWrapper()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeWrapper(IImageWrapper* InWrapper, EImageFormat WrapperFormat)"
  },
  {
    "label": "PreProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreProcess()"
  },
  {
    "label": "TAsyncAlphaWrite()",
    "kind": "Method",
    "detail": "Function (} ; template<PixelType> struct TAsyncAlphaWrite ; template<> struct TAsyncAlphaWrite<FColor> { uint8 Alpha ;)",
    "insertText": "TAsyncAlphaWrite(uint8 InAlpha) : Alpha(InAlpha)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(FImagePixelData* PixelData)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (TImagePixelData<FColor>* ColorData = static_cast<TImagePixelData<)",
    "insertText": "FColor(PixelData)"
  },
  {
    "label": "TAsyncAlphaWrite()",
    "kind": "Method",
    "detail": "Function (Pixel . A = Alpha ; } } } ; template<> struct TAsyncAlphaWrite<FFloat16Color> { FFloat16 Alpha ;)",
    "insertText": "TAsyncAlphaWrite(float InAlpha) : Alpha(InAlpha)"
  },
  {
    "label": "FFloat16Color()",
    "kind": "Method",
    "detail": "Function (TImagePixelData<FFloat16Color>* Float16ColorData = static_cast<TImagePixelData<)",
    "insertText": "FFloat16Color(PixelData)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (TImagePixelData<FLinearColor>* LinearColorData = static_cast<TImagePixelData<)",
    "insertText": "FLinearColor(PixelData)"
  },
  {
    "label": "FFloat16()",
    "kind": "Method",
    "detail": "Function (Pixel . A =)",
    "insertText": "FFloat16(1.f - Pixel.A.GetFloat())"
  }
]