[
  {
    "label": "ProbeControllerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProbeControllerConfig"
  },
  {
    "label": "ProbeController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProbeController"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ProbeControllerConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_GOOG_CC_PROBE_CONTROLLER_H_ # define MODULES_CONGESTION_CONTROLLER_GOOG_CC_PROBE_CONTROLLER_H_ # include<stdint . h> # include<initializer_list> # include<vector> # include \" absl / base / attributes . h \" # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / transport / network_control . h \" # include \" api / transport / network_types . h \" # include \" api / units / data_rate . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / experiments / field_trial_parser . h \" namespace webrtc { struct ProbeControllerConfig {)",
    "insertText": "ProbeControllerConfig(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "ProbeControllerConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProbeControllerConfig(const ProbeControllerConfig&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ProbeControllerConfig&)",
    "insertText": "operator(const ProbeControllerConfig&)"
  },
  {
    "label": "ProbeControllerConfig()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ProbeControllerConfig()"
  },
  {
    "label": "ProbeController()",
    "kind": "Method",
    "detail": "Function (FieldTrialParameter<double> first_exponential_probe_scale ; FieldTrialOptional<double> second_exponential_probe_scale ; FieldTrialParameter<double> further_exponential_probe_scale ; FieldTrialParameter<double> further_probe_threshold ; FieldTrialParameter<TimeDelta> alr_probing_interval ; FieldTrialParameter<double> alr_probe_scale ; FieldTrialParameter<TimeDelta> network_state_estimate_probing_interval ; FieldTrialParameter<double> probe_if_estimate_lower_than_network_state_estimate_ratio ; FieldTrialParameter<TimeDelta> estimate_lower_than_network_state_estimate_probing_interval ; FieldTrialParameter<double> network_state_probe_scale ; FieldTrialParameter<TimeDelta> network_state_probe_duration ; FieldTrialParameter<bool> probe_on_max_allocated_bitrate_change ; FieldTrialOptional<double> first_allocation_probe_scale ; FieldTrialOptional<double> second_allocation_probe_scale ; FieldTrialFlag allocation_allow_further_probing ; FieldTrialParameter<DataRate> allocation_probe_max ; FieldTrialParameter<int> min_probe_packets_sent ; FieldTrialParameter<TimeDelta> min_probe_duration ; FieldTrialParameter<bool> limit_probe_target_rate_to_loss_bwe ; FieldTrialParameter<double> skip_if_estimate_larger_than_fraction_of_max ; } ; class ProbeController { public :)",
    "insertText": "ProbeController(const FieldTrialsView* key_value_config, RtcEventLog* event_log)"
  },
  {
    "label": "ProbeController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ProbeController()"
  },
  {
    "label": "ProbeController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProbeController(const ProbeController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ProbeController&)",
    "insertText": "operator(const ProbeController&)"
  },
  {
    "label": "SetBitrates()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT std::vector<ProbeClusterConfig>)",
    "insertText": "SetBitrates(DataRate min_bitrate, DataRate start_bitrate, DataRate max_bitrate, Timestamp at_time)"
  },
  {
    "label": "OnMaxTotalAllocatedBitrate()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT std::vector<ProbeClusterConfig>)",
    "insertText": "OnMaxTotalAllocatedBitrate(DataRate max_total_allocated_bitrate, Timestamp at_time)"
  },
  {
    "label": "OnNetworkAvailability()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT std::vector<ProbeClusterConfig>)",
    "insertText": "OnNetworkAvailability(NetworkAvailability msg)"
  },
  {
    "label": "SetEstimatedBitrate()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT std::vector<ProbeClusterConfig>)",
    "insertText": "SetEstimatedBitrate(DataRate bitrate, bool bwe_limited_due_to_packet_loss, Timestamp at_time)"
  },
  {
    "label": "EnablePeriodicAlrProbing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePeriodicAlrProbing(bool enable)"
  },
  {
    "label": "SetAlrStartTimeMs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlrStartTimeMs(absl::optional<int64_t> alr_start_time)"
  },
  {
    "label": "SetAlrEndedTimeMs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlrEndedTimeMs(int64_t alr_end_time)"
  },
  {
    "label": "RequestProbe()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT std::vector<ProbeClusterConfig>)",
    "insertText": "RequestProbe(Timestamp at_time)"
  },
  {
    "label": "SetNetworkStateEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetworkStateEstimate(webrtc::NetworkStateEstimate estimate)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(Timestamp at_time)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT std::vector<ProbeClusterConfig>)",
    "insertText": "Process(Timestamp at_time)"
  },
  {
    "label": "InitiateExponentialProbing()",
    "kind": "Method",
    "detail": "Function (private : enum class State { kInit,kWaitingForProbingResult,kProbingComplete,} ; ABSL_MUST_USE_RESULT std::vector<ProbeClusterConfig>)",
    "insertText": "InitiateExponentialProbing(Timestamp at_time)"
  },
  {
    "label": "InitiateProbing()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT std::vector<ProbeClusterConfig>)",
    "insertText": "InitiateProbing(Timestamp now, std::vector<DataRate> bitrates_to_probe, bool probe_further)"
  },
  {
    "label": "TimeForAlrProbe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TimeForAlrProbe(Timestamp at_time)"
  },
  {
    "label": "TimeForNetworkStateProbe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TimeForNetworkStateProbe(Timestamp at_time)"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (bool network_available_ ; bool bwe_limited_due_to_packet_loss_ ; State state_ ; DataRate min_bitrate_to_probe_further_ =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (Timestamp time_last_probing_initiated_ =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (DataRate estimated_bitrate_ =)",
    "insertText": "Zero()"
  }
]