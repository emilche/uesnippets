[
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "IXRCamera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IXRCamera"
  },
  {
    "label": "IXRCamera()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HeadMountedDisplayTypes . h \" # include \" IIdentifiableXRDevice . h \" # include \" StereoRendering . h \" class APlayerController ; class FSceneInterface ; class USceneComponent ; class IXRCamera : public IIdentifiableXRDevice { public :)",
    "insertText": "IXRCamera()"
  },
  {
    "label": "UseImplicitHMDPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UseImplicitHMDPosition(bool bInImplicitHMDPosition)"
  },
  {
    "label": "GetUseImplicitHMDPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseImplicitHMDPosition()"
  },
  {
    "label": "ApplyHMDRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHMDRotation(APlayerController* PC, FRotator& ViewRotation)"
  },
  {
    "label": "UpdatePlayerCamera()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePlayerCamera(FQuat& CurrentOrientation, FVector& CurrentPosition, float DeltaTime)"
  },
  {
    "label": "OverrideFOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideFOV(float& InOutFOV)"
  },
  {
    "label": "SetupLateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupLateUpdate(const FTransform& ParentToWorld, USceneComponent* Component, bool bSkipLateUpdate)"
  },
  {
    "label": "CalculateStereoCameraOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateStereoCameraOffset(const int32 ViewIndex, FRotator& ViewRotation, FVector& ViewLocation)"
  },
  {
    "label": "GetPassthroughCameraUVs_RenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassthroughCameraUVs_RenderThread(TArray<FVector2D>& OutUVs)"
  }
]