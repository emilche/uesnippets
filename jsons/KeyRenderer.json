[
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FKeyRendererPaintArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyRendererPaintArgs"
  },
  {
    "label": "IKeyRendererInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IKeyRendererInterface"
  },
  {
    "label": "FKeyBatchParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyBatchParameters"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "FKeysForModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeysForModel"
  },
  {
    "label": "FKeyBar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyBar"
  },
  {
    "label": "FCachedKeyDrawInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedKeyDrawInformation"
  },
  {
    "label": "FKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKey"
  },
  {
    "label": "FCachedKeyBar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedKeyBar"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Math / Range . h \" # include \" Containers / ArrayView . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameTime . h \" # include \" MVVM / Views / KeyDrawParams . h \" # include \" MVVM / Extensions / IKeyExtension . h \" # include \" Rendering / RenderingCommon . h \" # include \" Curves / KeyHandle . h \" # include \" TimeToPixel . h \" # include \" MVVM / ViewModelPtr . h \" struct FSlateBrush ; class FWidgetStyle ; class FSlateWindowElementList ; namespace UE::Sequencer { enum class EKeySelectionPreviewState : uint8 { Undefined,Selected,NotSelected } ; struct FKeyRendererPaintArgs { FSlateWindowElementList* DrawElements ; float KeyThrobValue = 0 . f ; float SectionThrobValue = 0 . f ; FVector2D ThrobAmount =)",
    "insertText": "FVector2D(12.f, 12.f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (ESlateDrawEffect DrawEffects ; FLinearColor SelectionColor ; FLinearColor CurveColor =)",
    "insertText": "FLinearColor(0.8f, 0.8f, 0.f, 0.7)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor KeyBarColor =)",
    "insertText": "FColor(160, 160, 160)"
  },
  {
    "label": "IKeyRendererInterface()",
    "kind": "Method",
    "detail": "Function (} ; enum class EViewDependentCacheFlags : uint8 { None = 0,DataChanged = 1<<0,KeyStateChanged = 1<<1,ViewChanged = 1<<2,ViewZoomed = 1<<3,Empty = 1<<4,All = DataChanged | KeyStateChanged | ViewChanged | ViewZoomed,} ; class IKeyRendererInterface { public : ~)",
    "insertText": "IKeyRendererInterface()"
  },
  {
    "label": "HasAnySelectedKeys()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnySelectedKeys()"
  },
  {
    "label": "HasAnyPreviewSelectedKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyPreviewSelectedKeys()"
  },
  {
    "label": "HasAnyHoveredKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyHoveredKeys()"
  },
  {
    "label": "IsKeySelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeySelected(const TViewModelPtr<IKeyExtension>&, FKeyHandle)"
  },
  {
    "label": "IsKeyHovered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeyHovered(const TViewModelPtr<IKeyExtension>&, FKeyHandle)"
  },
  {
    "label": "GetPreviewSelectionState()",
    "kind": "Method",
    "detail": "Function (EKeySelectionPreviewState)",
    "insertText": "GetPreviewSelectionState(const TViewModelPtr<IKeyExtension>&, FKeyHandle)"
  },
  {
    "label": "FKeyBatchParameters()",
    "kind": "Method",
    "detail": "Function (} ; struct FKeyBatchParameters {)",
    "insertText": "FKeyBatchParameters(const FTimeToPixel& InTimeToPixel) : ClientInterface(nullptr) , TimeToPixel(InTimeToPixel) , KeySizePx(12.f, 12.f) , ValidPlayRangeMin(TNumericLimits<int32>::Min()) , ValidPlayRangeMax(TNumericLimits<int32>::Max()) , CacheState(EViewDependentCacheFlags::None) , bShowCurve(false) , bShowKeyBars(true) , bCollapseChildren(false)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} IKeyRendererInterface* ClientInterface ; FTimeToPixel TimeToPixel ; TRange<FFrameTime> VisibleRange ; FVector2D KeySizePx ; FFrameNumber ValidPlayRangeMin ; FFrameNumber ValidPlayRangeMax ; EViewDependentCacheFlags CacheState ; uint8 bShowCurve : 1 ; uint8 bShowKeyBars : 1 ; uint8 bCollapseChildren : 1 ; } ; struct FKeyRenderer { enum class EKeyRenderingFlags { None = 0,PartialKey = 1<<0,Selected = 1<<1,PreviewSelected = 1<<2,PreviewNotSelected = 1<<3,AnySelected = 1<<4,Hovered = 1<<5,Overlaps = 1<<6,OutOfRange = 1<<7,} ; enum class EKeyBarRenderingFlags { None = 0,Hovered = 1<<0,OutOfRange = 1<<1,} ; struct FKeysForModel { FViewModelPtr Model ; TArray<FKeyHandle> Keys ; } ; struct FKeyBar { TRange<FFrameTime> Range = TRange<FFrameTime)",
    "insertText": "Empty()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (TArray<FKeysForModel> LeadingKeys ; TArray<FKeysForModel> TrailingKeys ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "Initialize(const FViewModelPtr& InViewModel)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const FKeyBatchParameters& Params, const FGeometry& AllottedGeometry)"
  },
  {
    "label": "DrawCurve()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawCurve(const FKeyBatchParameters& Params, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, const FKeyRendererPaintArgs& Args, int32 LayerId)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Draw(const FKeyBatchParameters& Params, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, const FKeyRendererPaintArgs& Args, int32 LayerId)"
  },
  {
    "label": "HitTestKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HitTestKeys(const FFrameTime& Time, TArray<FKeysForModel>& OutAllKeys)"
  },
  {
    "label": "HitTestKeyBar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HitTestKeyBar(const FFrameTime& Time, FKeyBar& OutKeyBar)"
  },
  {
    "label": "HasCurve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCurve()"
  },
  {
    "label": "FCachedKeyDrawInformation()",
    "kind": "Method",
    "detail": "Function (private : struct FCachedKeyDrawInformation {)",
    "insertText": "FCachedKeyDrawInformation(TViewModelPtr<IKeyExtension> KeyExtension) : NextUnhandledIndex(0) , PreserveToIndex(0) , WeakKeyExtension(KeyExtension)"
  },
  {
    "label": "UpdateCachedKeys()",
    "kind": "Method",
    "detail": "Function (KeyExtension ->)",
    "insertText": "UpdateCachedKeys(CachedKeys)"
  },
  {
    "label": "UpdateViewIndependentData()",
    "kind": "Method",
    "detail": "Function (} EViewDependentCacheFlags)",
    "insertText": "UpdateViewIndependentData()"
  },
  {
    "label": "CacheViewDependentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheViewDependentData(const FKeyBatchParameters& Params)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "CacheKeyExtensions()",
    "kind": "Method",
    "detail": "Function (} public : int32 NextUnhandledIndex ; int32 PreserveToIndex ; TArrayView<const FFrameTime> FramesInRange ; TArrayView<const FKeyHandle> HandlesInRange ; TArray<FKeyDrawParams> DrawParams ; FKeyDrawParams LeadingKeyParams ; FKeyDrawParams TrailingKeyParams ; FCachedKeys::FCachedKey LeadingKey ; FCachedKeys::FCachedKey TrailingKey ; TSharedPtr<FCachedKeys> CachedKeys ; TWeakViewModelPtr<IKeyExtension> WeakKeyExtension ; } ; struct FKey { FKeyDrawParams Params ; FFrameTime KeyTickStart,KeyTickEnd ; FFrameTime FinalKeyPosition ; EKeyRenderingFlags Flags = EKeyRenderingFlags::None ; } ; struct FCachedKeyBar { FFrameTime StartTime,EndTime ; EKeyBarRenderingFlags Flags = EKeyBarRenderingFlags::None ; EKeyConnectionStyle ConnectionStyle = EKeyConnectionStyle::None ; } ; void)",
    "insertText": "CacheKeyExtensions(const FKeyBatchParameters& Params)"
  },
  {
    "label": "UpdateViewDependentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewDependentData(const FKeyBatchParameters& Params, const FGeometry& AllottedGeometry)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (private : FWeakViewModelPtr WeakViewModel ; TArray<FCachedKeyDrawInformation,TInlineAllocator<1>> KeyDrawInfo ; TArray<FKey> PrecomputedKeys ; TArray<FCachedKeyBar> PrecomputedKeyBars ; TArray<TTuple<double,double>> PrecomputedCurve ; FFrameTime KeyWidthInFrames ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EViewDependentCacheFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(FKeyRenderer::EKeyRenderingFlags)"
  }
]