[
  {
    "label": "Task",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Task"
  },
  {
    "label": "Fence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Fence"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "TaskOrder()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_TASK_ORDER_H_ # define BASE_TASK_SEQUENCE_MANAGER_TASK_ORDER_H_ # include \" base / base_export . h \" # include \" base / task / sequence_manager / enqueue_order . h \" # include \" base / time / time . h \" namespace base { namespace sequence_manager { struct Task ; namespace internal { class Fence ; } class BASE_EXPORT TaskOrder { public :)",
    "insertText": "TaskOrder(const TaskOrder& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskOrder&)",
    "insertText": "operator(const TaskOrder& other)"
  },
  {
    "label": "TaskOrder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TaskOrder()"
  },
  {
    "label": "enqueue_order()",
    "kind": "Method",
    "detail": "Function (EnqueueOrder)",
    "insertText": "enqueue_order()"
  },
  {
    "label": "CreateForTesting()",
    "kind": "Method",
    "detail": "Function (TaskOrder)",
    "insertText": "CreateForTesting(EnqueueOrder enqueue_order)"
  },
  {
    "label": "TaskOrder()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "TaskOrder(EnqueueOrder enqueue_order, TimeTicks delayed_run_time, int sequence_num)"
  }
]