[
  {
    "label": "FMockCloudChunkSourceStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMockCloudChunkSourceStat"
  },
  {
    "label": "OnDownloadRequested()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Installer / CloudChunkSource . h \" # include \" Common / StatsCollector . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FMockCloudChunkSourceStat : public ICloudChunkSourceStat { public : typedef TTuple<double,FGuid> FDownloadRequested ; typedef TTuple<double,FGuid> FDownloadSuccess ; typedef TTuple<double,FGuid,FString> FDownloadFailed ; typedef TTuple<double,FGuid,FString,EChunkLoadResult> FDownloadCorrupt ; typedef TTuple<double,FGuid,FString,double,double,double,double> FDownloadAborted ; typedef TTuple<double,int64> FReceivedDataUpdated ; typedef TTuple<double,int64> FRequiredDataUpdated ; typedef TTuple<double,EBuildPatchDownloadHealth> FDownloadHealthUpdated ; typedef TTuple<double,float> FSuccessRateUpdated ; typedef TTuple<double,int32> FActiveRequestCountUpdated ; public : void)",
    "insertText": "OnDownloadRequested(const FGuid& ChunkId)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxDownloadRequested .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), ChunkId)"
  },
  {
    "label": "OnDownloadSuccess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDownloadSuccess(const FGuid& ChunkId)"
  },
  {
    "label": "OnDownloadFailed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDownloadFailed(const FGuid& ChunkId, const FString& Url)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxDownloadFailed .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), ChunkId, Url)"
  },
  {
    "label": "OnDownloadCorrupt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDownloadCorrupt(const FGuid& ChunkId, const FString& Url, EChunkLoadResult LoadResult)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxDownloadCorrupt .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), ChunkId, Url, LoadResult)"
  },
  {
    "label": "OnDownloadAborted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDownloadAborted(const FGuid& ChunkId, const FString& Url, double DownloadTimeMean, double DownloadTimeStd, double DownloadTime, double BreakingPoint)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxDownloadAborted .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), ChunkId, Url, DownloadTimeMean, DownloadTimeStd, DownloadTime, BreakingPoint)"
  },
  {
    "label": "OnReceivedDataUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReceivedDataUpdated(int64 TotalBytes)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxReceivedDataUpdated .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), TotalBytes)"
  },
  {
    "label": "OnRequiredDataUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRequiredDataUpdated(int64 TotalBytes)"
  },
  {
    "label": "OnDownloadHealthUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDownloadHealthUpdated(EBuildPatchDownloadHealth DownloadHealth)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxDownloadHealthUpdated .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), DownloadHealth)"
  },
  {
    "label": "OnSuccessRateUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSuccessRateUpdated(float SuccessRate)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxSuccessRateUpdated .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), SuccessRate)"
  },
  {
    "label": "OnActiveRequestCountUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnActiveRequestCountUpdated(uint32 RequestCount)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxActiveRequestCountUpdated .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), RequestCount)"
  },
  {
    "label": "OnAcceptedNewRequirements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAcceptedNewRequirements(const TSet<FGuid>& ChunkIds)"
  }
]