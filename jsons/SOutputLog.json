[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FOutputLogTextLayoutMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputLogTextLayoutMarshaller"
  },
  {
    "label": "FTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextLayout"
  },
  {
    "label": "FToolMenuSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuSection"
  },
  {
    "label": "SMenuAnchor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMenuAnchor"
  },
  {
    "label": "FOutputLogMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputLogMessage"
  },
  {
    "label": "SConsoleInputBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SConsoleInputBox"
  },
  {
    "label": "IModularFeature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModularFeature"
  },
  {
    "label": "IModularFeature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModularFeature"
  },
  {
    "label": "FSuggestions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSuggestions"
  },
  {
    "label": "FOutputLogFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputLogFilter"
  },
  {
    "label": "SOutputLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOutputLog"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FOutputLogTextLayoutMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputLogTextLayoutMarshaller"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs )"
  },
  {
    "label": "OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextChanged(const FText& InText)"
  },
  {
    "label": "MakeSuggestionListItemWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeSuggestionListItemWidget(TSharedPtr<FConsoleSuggestion> Message, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "SuggestionSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuggestionSelectionChanged(TSharedPtr<FConsoleSuggestion> NewValue, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "SetSuggestions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuggestions(TArray<FConsoleSuggestion>& Elements, FText Highlight)"
  },
  {
    "label": "MarkActiveSuggestion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkActiveSuggestion()"
  },
  {
    "label": "ClearSuggestions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSuggestions()"
  },
  {
    "label": "OnCommandExecutorRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommandExecutorRegistered(const FName& Type, class IModularFeature* ModularFeature)"
  },
  {
    "label": "OnCommandExecutorUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommandExecutorUnregistered(const FName& Type, class IModularFeature* ModularFeature)"
  },
  {
    "label": "SyncActiveCommandExecutor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncActiveCommandExecutor()"
  },
  {
    "label": "SetActiveCommandExecutor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveCommandExecutor(const FName InExecName)"
  },
  {
    "label": "MakeNextCommandExecutorActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeNextCommandExecutorActive()"
  },
  {
    "label": "GetCommandExecutorMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetCommandExecutorMenuContent()"
  },
  {
    "label": "OnKeyDownHandler()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDownHandler(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyCharHandler()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyCharHandler(const FGeometry& MyGeometry, const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "IsMessageAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMessageAllowed(const TSharedPtr<FOutputLogMessage>& Message)"
  },
  {
    "label": "AddAvailableLogCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAvailableLogCategory(const FName& LogCategory)"
  },
  {
    "label": "ToggleLogCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleLogCategory(const FName& LogCategory)"
  },
  {
    "label": "ClearSelectedLogCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedLogCategories()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs, bool bCreateDrawerDockButton )"
  },
  {
    "label": "CreateLogMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateLogMessages(const TCHAR* V, ELogVerbosity::Type Verbosity, const class FName& Category, TArray< TSharedPtr<FOutputLogMessage> >& OutMessages)"
  },
  {
    "label": "RegisterSettingsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSettingsMenu()"
  },
  {
    "label": "OnClearLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClearLog()"
  },
  {
    "label": "OnHighlightCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHighlightCategory(FName NewCategoryToHighlight)"
  },
  {
    "label": "HandleSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSettingChanged(FName ChangedSettingName)"
  },
  {
    "label": "RefreshAllPreservingLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAllPreservingLocation()"
  },
  {
    "label": "FocusConsoleCommandBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusConsoleCommandBox()"
  },
  {
    "label": "UpdateOutputLogFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOutputLogFilter(const FOutputLogFilter& InFilter)"
  },
  {
    "label": "ExtendTextBoxMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendTextBoxMenu(FMenuBuilder& Builder)"
  },
  {
    "label": "OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUserScrolled(float ScrollOffset)"
  },
  {
    "label": "OnConsoleCommandExecuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConsoleCommandExecuted()"
  },
  {
    "label": "RequestForceScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestForceScroll(bool bIfUserHasNotScrolledUp = false)"
  },
  {
    "label": "MakeLogLimitMenuItem()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeLogLimitMenuItem()"
  },
  {
    "label": "BuildInitialLogCategoryFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildInitialLogCategoryFilter(const FArguments& InArgs)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& InFilterText)"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& InFilterText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "MakeAddFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAddFilterMenu()"
  },
  {
    "label": "MakeSelectCategoriesSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSelectCategoriesSubMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "VerbosityLogs_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerbosityLogs_Execute()"
  },
  {
    "label": "VerbosityWarnings_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerbosityWarnings_Execute()"
  },
  {
    "label": "VerbosityErrors_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerbosityErrors_Execute()"
  },
  {
    "label": "CategoriesShowAll_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CategoriesShowAll_Execute()"
  },
  {
    "label": "CategoriesSingle_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CategoriesSingle_Execute(FName InName)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "SetWordWrapEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWordWrapEnabled(ECheckBoxState InValue)"
  },
  {
    "label": "SetTimestampMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimestampMode(ELogTimes::Type InValue)"
  },
  {
    "label": "IsSelectedTimestampMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectedTimestampMode(ELogTimes::Type NewType)"
  },
  {
    "label": "AddTimestampMenuSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimestampMenuSection(FMenuBuilder& Menu)"
  },
  {
    "label": "GetSelectedTimestampMode()",
    "kind": "Method",
    "detail": "Function (ELogTimes::Type)",
    "insertText": "GetSelectedTimestampMode()"
  },
  {
    "label": "SetClearOnPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClearOnPIE(ECheckBoxState InValue)"
  },
  {
    "label": "RegisterSettingsMenu_WordWrap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSettingsMenu_WordWrap(FToolMenuSection& InSection)"
  },
  {
    "label": "RegisterSettingsMenu_TimestampMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSettingsMenu_TimestampMode(FToolMenuSection& InSection)"
  },
  {
    "label": "RegisterSettingsMenu_ClearOnPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSettingsMenu_ClearOnPIE(FToolMenuSection& InSection)"
  },
  {
    "label": "RegisterSettingsMenu_BrowseLogs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSettingsMenu_BrowseLogs(FToolMenuSection& InSection)"
  },
  {
    "label": "RegisterSettingsMenu_OpenLogExternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSettingsMenu_OpenLogExternal(FToolMenuSection& InSection)"
  },
  {
    "label": "GetSettingsMenuProfileForFlags()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSettingsMenuProfileForFlags(EOutputLogSettingsMenuFlags InFlags)"
  },
  {
    "label": "GetSettingsMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetSettingsMenuContent(FName InMenuProfileName)"
  },
  {
    "label": "CreateDrawerDockButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateDrawerDockButton()"
  },
  {
    "label": "OpenLogFileInExplorer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenLogFileInExplorer()"
  },
  {
    "label": "OpenLogFileInExternalEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenLogFileInExternalEditor()"
  },
  {
    "label": "OnDockInLayoutClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDockInLayoutClicked()"
  },
  {
    "label": "AppendPendingMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendPendingMessage(const TCHAR* InText, const ELogVerbosity::Type InVerbosity, const FName& InCategory)"
  },
  {
    "label": "SubmitPendingMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SubmitPendingMessages()"
  },
  {
    "label": "ClearMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMessages()"
  },
  {
    "label": "CountMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountMessages()"
  },
  {
    "label": "GetNumFilteredMessages()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumFilteredMessages()"
  },
  {
    "label": "GetNumCachedMessages()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCachedMessages()"
  },
  {
    "label": "MarkMessagesCacheAsDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkMessagesCacheAsDirty()"
  },
  {
    "label": "FOutputLogTextLayoutMarshaller()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "FOutputLogTextLayoutMarshaller(TArray< TSharedPtr<FOutputLogMessage> > InMessages, FOutputLogFilter* InFilter)"
  },
  {
    "label": "AppendPendingMessagesToTextLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPendingMessagesToTextLayout()"
  },
  {
    "label": "GetCategoryHue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCategoryHue(FName CategoryName)"
  }
]