[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FOutputLogTextLayoutMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputLogTextLayoutMarshaller"
  },
  {
    "label": "FTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextLayout"
  },
  {
    "label": "FToolMenuSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuSection"
  },
  {
    "label": "SMenuAnchor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMenuAnchor"
  },
  {
    "label": "FOutputLogMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputLogMessage"
  },
  {
    "label": "SConsoleInputBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SConsoleInputBox"
  },
  {
    "label": "IModularFeature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModularFeature"
  },
  {
    "label": "FSuggestions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSuggestions"
  },
  {
    "label": "FOutputLogFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputLogFilter"
  },
  {
    "label": "SOutputLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOutputLog"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FOutputLogMessage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" OutputLogCreationParams . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Input / SMultiLineEditableTextBox . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Framework / Text / BaseTextLayoutMarshaller . h \" # include \" Misc / TextFilterExpressionEvaluator . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / IConsoleManager . h \" class FMenuBuilder ; class FOutputLogTextLayoutMarshaller ; class FTextLayout ; struct FToolMenuSection ; class SMenuAnchor ; struct FOutputLogMessage { TSharedRef<FString> Message ; ELogVerbosity::Type Verbosity ; int8 CategoryStartIndex ; FName Category ; FName Style ;)",
    "insertText": "FOutputLogMessage(const TSharedRef<FString>& NewMessage, ELogVerbosity::Type NewVerbosity, FName NewCategory, FName NewStyle, int32 InCategoryStartIndex) : Message(NewMessage) , Verbosity(NewVerbosity) , CategoryStartIndex((int8)InCategoryStartIndex) , Category(NewCategory) , Style(NewStyle)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ; class SConsoleInputBox : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FExecuteConsoleCommand, const FString& ) SLATE_BEGIN_ARGS( SConsoleInputBox ) : _SuggestionListPlacement( MenuPlacement_BelowAnchor)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(EMenuPlacement, SuggestionListPlacement ) SLATE_EVENT( FExecuteConsoleCommand, ConsoleCommandCustomExec) SLATE_EVENT( FSimpleDelegate, OnConsoleCommandExecuted ) SLATE_EVENT( FSimpleDelegate, OnCloseConsole ) SLATE_END_ARGS() SConsoleInputBox()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetEditableTextBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SMultiLineEditableTextBox>)",
    "insertText": "GetEditableTextBox()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextChanged(const FText& InText)"
  },
  {
    "label": "GetSelectionListMaxWidth()",
    "kind": "Method",
    "detail": "Function (FOptionalSize)",
    "insertText": "GetSelectionListMaxWidth()"
  },
  {
    "label": "MakeSuggestionListItemWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeSuggestionListItemWidget(TSharedPtr<FConsoleSuggestion> Message, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "SuggestionSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuggestionSelectionChanged(TSharedPtr<FConsoleSuggestion> NewValue, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "SetSuggestions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuggestions(TArray<FConsoleSuggestion>& Elements, FText Highlight)"
  },
  {
    "label": "MarkActiveSuggestion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkActiveSuggestion()"
  },
  {
    "label": "ClearSuggestions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSuggestions()"
  },
  {
    "label": "OnCommandExecutorRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommandExecutorRegistered(const FName& Type, class IModularFeature* ModularFeature)"
  },
  {
    "label": "OnCommandExecutorUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommandExecutorUnregistered(const FName& Type, class IModularFeature* ModularFeature)"
  },
  {
    "label": "SyncActiveCommandExecutor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncActiveCommandExecutor()"
  },
  {
    "label": "SetActiveCommandExecutor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveCommandExecutor(const FName InExecName)"
  },
  {
    "label": "MakeNextCommandExecutorActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeNextCommandExecutorActive()"
  },
  {
    "label": "GetActiveCommandExecutorDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetActiveCommandExecutorDisplayName()"
  },
  {
    "label": "GetActiveCommandExecutorHintText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetActiveCommandExecutorHintText()"
  },
  {
    "label": "GetActiveCommandExecutorAllowMultiLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetActiveCommandExecutorAllowMultiLine()"
  },
  {
    "label": "GetInputHelpText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetInputHelpText()"
  },
  {
    "label": "IsCommandExecutorMenuEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCommandExecutorMenuEnabled()"
  },
  {
    "label": "GetCommandExecutorMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetCommandExecutorMenuContent()"
  },
  {
    "label": "OnKeyDownHandler()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDownHandler(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyCharHandler()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyCharHandler(const FGeometry& MyGeometry, const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "FSuggestions()",
    "kind": "Method",
    "detail": "Function (private : struct FSuggestions {)",
    "insertText": "FSuggestions() : SelectedSuggestion(INDEX_NONE)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (SuggestionsHighlight =)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "HasSuggestions()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasSuggestions()"
  },
  {
    "label": "HasSelectedSuggestion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasSelectedSuggestion()"
  },
  {
    "label": "StepSelectedSuggestion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StepSelectedSuggestion(const int32 Step)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SelectedSuggestion + = Step ;)",
    "insertText": "if(SelectedSuggestion < 0)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (SelectedSuggestion = SuggestionsList .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SelectedSuggestion >= SuggestionsList.Num())"
  },
  {
    "label": "GetSelectedSuggestion()",
    "kind": "Method",
    "detail": "Function (SelectedSuggestion = 0 ; } } TSharedPtr<FConsoleSuggestion>)",
    "insertText": "GetSelectedSuggestion()"
  },
  {
    "label": "FOutputLogFilter()",
    "kind": "Method",
    "detail": "Function (} int32 SelectedSuggestion ; TArray<TSharedPtr<FConsoleSuggestion>> SuggestionsList ; FText SuggestionsHighlight ; } ; TSharedPtr<SMultiLineEditableTextBox> InputText ; TSharedPtr<SMenuAnchor> SuggestionBox ; TSharedPtr<SListView<TSharedPtr<FConsoleSuggestion>>> SuggestionListView ; FSuggestions Suggestions ; FSimpleDelegate OnConsoleCommandExecuted ; FExecuteConsoleCommand ConsoleCommandCustomExec ; FSimpleDelegate OnCloseConsole ; FName PreferredCommandExecutorName ; IConsoleCommandExecutor* ActiveCommandExecutor ; bool bIgnoreUIUpdate ; bool bHasTicked ; bool bConsumeTab ; } ; struct FOutputLogFilter { bool bShowLogs ; bool bShowWarnings ; bool bShowErrors ; bool bShowAllCategories ; TSet<ELogVerbosity::Type> IgnoreFilterVerbosities ;)",
    "insertText": "FOutputLogFilter() : TextFilterExpressionEvaluator(ETextFilterExpressionEvaluatorMode::BasicString)"
  },
  {
    "label": "IsFilterSet()",
    "kind": "Method",
    "detail": "Function (bShowErrors = bShowLogs = bShowWarnings = bShowAllCategories = true ; } bool)",
    "insertText": "IsFilterSet()"
  },
  {
    "label": "IsMessageAllowed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMessageAllowed(const TSharedPtr<FOutputLogMessage>& Message)"
  },
  {
    "label": "SetFilterText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterText(const FText& InFilterText)"
  },
  {
    "label": "SetFilterText()",
    "kind": "Method",
    "detail": "Function (TextFilterExpressionEvaluator .)",
    "insertText": "SetFilterText(InFilterText)"
  },
  {
    "label": "GetFilterText()",
    "kind": "Method",
    "detail": "Function (} const FText)",
    "insertText": "GetFilterText()"
  },
  {
    "label": "GetSyntaxErrors()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetSyntaxErrors()"
  },
  {
    "label": "GetAvailableLogCategories()",
    "kind": "Method",
    "detail": "Function (} const TArray<FName>&)",
    "insertText": "GetAvailableLogCategories()"
  },
  {
    "label": "IsLogCategoryAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLogCategoryAvailable(const FName& LogCategory)"
  },
  {
    "label": "ToggleLogCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleLogCategory(const FName& LogCategory)"
  },
  {
    "label": "IsLogCategoryEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLogCategoryEnabled(const FName& LogCategory)"
  },
  {
    "label": "ClearSelectedLogCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedLogCategories()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : FTextFilterExpressionEvaluator TextFilterExpressionEvaluator ; TArray<FName> AvailableLogCategories ; TArray<FName> SelectedLogCategories ; } ; class SOutputLog : public SCompoundWidget,public FOutputDevice { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SOutputLog)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FSimpleDelegate, OnCloseConsole) SLATE_EVENT(FSimpleDelegate, OnClearLog) SLATE_ARGUMENT( TArray< TSharedPtr<FOutputLogMessage> >, Messages ) SLATE_ARGUMENT_DEFAULT( EOutputLogSettingsMenuFlags, SettingsMenuFlags)"
  },
  {
    "label": "SLATE_ARGUMENT_DEFAULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT_DEFAULT(bool, EnableLoggingLimitMenu)"
  },
  {
    "label": "SLATE_ARGUMENT_DEFAULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT_DEFAULT(TOptional<int32>, LoggingLineLimit)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "SLATE_ARGUMENT(FDefaultCategorySelectionMap, DefaultCategorySelection ) SLATE_EVENT( FAllowLogCategoryCallback, AllowInitialLogCategory ) SLATE_END_ARGS() virtual ~SOutputLog()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, bool bCreateDrawerDockButton)"
  },
  {
    "label": "CreateLogMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateLogMessages(const TCHAR* V, ELogVerbosity::Type Verbosity, const class FName& Category, TArray< TSharedPtr<FOutputLogMessage> >& OutMessages)"
  },
  {
    "label": "RegisterSettingsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSettingsMenu()"
  },
  {
    "label": "OnClearLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClearLog()"
  },
  {
    "label": "OnHighlightCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHighlightCategory(FName NewCategoryToHighlight)"
  },
  {
    "label": "HandleSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSettingChanged(FName ChangedSettingName)"
  },
  {
    "label": "RefreshAllPreservingLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAllPreservingLocation()"
  },
  {
    "label": "CanClearLog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanClearLog()"
  },
  {
    "label": "FocusConsoleCommandBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusConsoleCommandBox()"
  },
  {
    "label": "UpdateOutputLogFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOutputLogFilter(const TArray<FName>& CategoriesToShow, TOptional<bool> bShowErrors = TOptional<bool>(), TOptional<bool> bShowWarnings = TOptional<bool>(), TOptional<bool> bShowLogs = TOptional<bool>())"
  },
  {
    "label": "UpdateOutputLogFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOutputLogFilter(const FOutputLogFilter& InFilter)"
  },
  {
    "label": "GetOutputLogFilter()",
    "kind": "Method",
    "detail": "Function (const FOutputLogFilter&)",
    "insertText": "GetOutputLogFilter()"
  },
  {
    "label": "ExtendTextBoxMenu()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ExtendTextBoxMenu(FMenuBuilder& Builder)"
  },
  {
    "label": "OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUserScrolled(float ScrollOffset)"
  },
  {
    "label": "OnConsoleCommandExecuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConsoleCommandExecuted()"
  },
  {
    "label": "RequestForceScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestForceScroll(bool bIfUserHasNotScrolledUp = false)"
  },
  {
    "label": "MakeLogLimitMenuItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FOutputLogTextLayoutMarshaller> MessagesTextMarshaller ; TSharedPtr<SMultiLineEditableTextBox> MessagesTextBox ; TSharedPtr<SSearchBox> FilterTextBox ; bool bIsUserScrolled ; FSimpleDelegate OnClearLogDelegate ; private : TSharedRef<SWidget>)",
    "insertText": "MakeLogLimitMenuItem()"
  },
  {
    "label": "BuildInitialLogCategoryFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildInitialLogCategoryFilter(const FArguments& InArgs)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& InFilterText)"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& InFilterText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "MakeAddFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAddFilterMenu()"
  },
  {
    "label": "MakeSelectCategoriesSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSelectCategoriesSubMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "VerbosityLogs_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerbosityLogs_Execute()"
  },
  {
    "label": "VerbosityLogs_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "VerbosityLogs_IsChecked()"
  },
  {
    "label": "VerbosityWarnings_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerbosityWarnings_Execute()"
  },
  {
    "label": "VerbosityWarnings_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "VerbosityWarnings_IsChecked()"
  },
  {
    "label": "VerbosityErrors_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerbosityErrors_Execute()"
  },
  {
    "label": "VerbosityErrors_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "VerbosityErrors_IsChecked()"
  },
  {
    "label": "CategoriesShowAll_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CategoriesShowAll_Execute()"
  },
  {
    "label": "CategoriesShowAll_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CategoriesShowAll_IsChecked()"
  },
  {
    "label": "CategoriesSingle_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CategoriesSingle_Execute(FName InName)"
  },
  {
    "label": "CategoriesSingle_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CategoriesSingle_IsChecked(FName InName)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "IsWordWrapEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWordWrapEnabled()"
  },
  {
    "label": "SetWordWrapEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWordWrapEnabled(ECheckBoxState InValue)"
  },
  {
    "label": "SetTimestampMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimestampMode(ELogTimes::Type InValue)"
  },
  {
    "label": "IsSelectedTimestampMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectedTimestampMode(ELogTimes::Type NewType)"
  },
  {
    "label": "AddTimestampMenuSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimestampMenuSection(FMenuBuilder& Menu)"
  },
  {
    "label": "GetSelectedTimestampMode()",
    "kind": "Method",
    "detail": "Function (ELogTimes::Type)",
    "insertText": "GetSelectedTimestampMode()"
  },
  {
    "label": "IsClearOnPIEEnabled()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsClearOnPIEEnabled()"
  },
  {
    "label": "SetClearOnPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClearOnPIE(ECheckBoxState InValue)"
  },
  {
    "label": "RegisterSettingsMenu_WordWrap()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RegisterSettingsMenu_WordWrap(FToolMenuSection& InSection)"
  },
  {
    "label": "RegisterSettingsMenu_TimestampMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSettingsMenu_TimestampMode(FToolMenuSection& InSection)"
  },
  {
    "label": "RegisterSettingsMenu_ClearOnPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSettingsMenu_ClearOnPIE(FToolMenuSection& InSection)"
  },
  {
    "label": "RegisterSettingsMenu_BrowseLogs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSettingsMenu_BrowseLogs(FToolMenuSection& InSection)"
  },
  {
    "label": "RegisterSettingsMenu_OpenLogExternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSettingsMenu_OpenLogExternal(FToolMenuSection& InSection)"
  },
  {
    "label": "GetSettingsMenuProfileForFlags()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSettingsMenuProfileForFlags(EOutputLogSettingsMenuFlags InFlags)"
  },
  {
    "label": "GetSettingsMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetSettingsMenuContent(FName InMenuProfileName)"
  },
  {
    "label": "CreateDrawerDockButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateDrawerDockButton()"
  },
  {
    "label": "OpenLogFileInExplorer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenLogFileInExplorer()"
  },
  {
    "label": "OpenLogFileInExternalEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenLogFileInExternalEditor()"
  },
  {
    "label": "OnDockInLayoutClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDockInLayoutClicked()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<SConsoleInputBox> ConsoleInputBox ; FOutputLogFilter Filter ; FDelegateHandle SettingsWatchHandle ; bool bShouldCreateDrawerDockButton = false ; bool bShouldShowLoggingLimitMenu = false ; bool bEnableLoggingLimit = false ; int32 LoggingLineLimit = 1 0 0 0 0 ; } ; class FOutputLogTextLayoutMarshaller : public FBaseTextLayoutMarshaller { public : TSharedRef<FOutputLogTextLayoutMarshaller>)",
    "insertText": "Create(TArray< TSharedPtr<FOutputLogMessage> > InMessages, FOutputLogFilter* InFilter)"
  },
  {
    "label": "FOutputLogTextLayoutMarshaller()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOutputLogTextLayoutMarshaller()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const FString& SourceString, FTextLayout& TargetTextLayout)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetText(FString& TargetString, const FTextLayout& SourceTextLayout)"
  },
  {
    "label": "AppendPendingMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendPendingMessage(const TCHAR* InText, const ELogVerbosity::Type InVerbosity, const FName& InCategory)"
  },
  {
    "label": "SubmitPendingMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SubmitPendingMessages()"
  },
  {
    "label": "ClearMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMessages()"
  },
  {
    "label": "CountMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountMessages()"
  },
  {
    "label": "GetNumMessages()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumMessages()"
  },
  {
    "label": "GetNumFilteredMessages()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumFilteredMessages()"
  },
  {
    "label": "GetNumCachedMessages()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCachedMessages()"
  },
  {
    "label": "MarkMessagesCacheAsDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkMessagesCacheAsDirty()"
  },
  {
    "label": "GetCategoryForLocation()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCategoryForLocation(const FTextLocation Location)"
  },
  {
    "label": "GetTextLocationAt()",
    "kind": "Method",
    "detail": "Function (FTextLocation)",
    "insertText": "GetTextLocationAt(const FVector2D& Relative)"
  },
  {
    "label": "GetCategoryToHighlight()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCategoryToHighlight()"
  },
  {
    "label": "FOutputLogTextLayoutMarshaller()",
    "kind": "Method",
    "detail": "Function (CategoryToHighlight = InCategory ; } protected :)",
    "insertText": "FOutputLogTextLayoutMarshaller(TArray< TSharedPtr<FOutputLogMessage> > InMessages, FOutputLogFilter* InFilter)"
  },
  {
    "label": "AppendPendingMessagesToTextLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPendingMessagesToTextLayout()"
  },
  {
    "label": "GetCategoryHue()",
    "kind": "Method",
    "detail": "Function (TMap<FName,float> CategoryHueMap ; float)",
    "insertText": "GetCategoryHue(FName CategoryName)"
  }
]