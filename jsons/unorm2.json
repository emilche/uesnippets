[
  {
    "label": "UNormalizationCheckResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNormalizationCheckResult"
  },
  {
    "label": "UNormalizer2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UNormalizer2"
  },
  {
    "label": "unorm2_getNFCInstance()",
    "kind": "Method",
    "detail": "Function (# ifndef __UNORM2_H__ # define __UNORM2_H__ # include \" unicode / utypes . h \" # include \" unicode / localpointer . h \" # include \" unicode / stringoptions . h \" # include \" unicode / uset . h \" typedef enum { UNORM2_COMPOSE,UNORM2_DECOMPOSE,UNORM2_FCD,UNORM2_COMPOSE_CONTIGUOUS } UNormalization2Mode ; typedef enum UNormalizationCheckResult { UNORM_NO,UNORM_YES,UNORM_MAYBE } UNormalizationCheckResult ; struct UNormalizer2 ; typedef struct UNormalizer2 UNormalizer2 ; # if ! UCONFIG_NO_NORMALIZATION U_STABLE const UNormalizer2* U_EXPORT2)",
    "insertText": "unorm2_getNFCInstance(UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_getNFDInstance()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UNormalizer2* U_EXPORT2)",
    "insertText": "unorm2_getNFDInstance(UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_getNFKCInstance()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UNormalizer2* U_EXPORT2)",
    "insertText": "unorm2_getNFKCInstance(UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_getNFKDInstance()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UNormalizer2* U_EXPORT2)",
    "insertText": "unorm2_getNFKDInstance(UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_getNFKCCasefoldInstance()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UNormalizer2* U_EXPORT2)",
    "insertText": "unorm2_getNFKCCasefoldInstance(UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_getInstance()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UNormalizer2* U_EXPORT2)",
    "insertText": "unorm2_getInstance(const char *packageName, const char *name, UNormalization2Mode mode, UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_openFiltered()",
    "kind": "Method",
    "detail": "Function (U_STABLE UNormalizer2* U_EXPORT2)",
    "insertText": "unorm2_openFiltered(const UNormalizer2 *norm2, const USet *filterSet, UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_close()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unorm2_close(UNormalizer2 *norm2)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUNormalizer2Pointer, UNormalizer2, unorm2_close)"
  },
  {
    "label": "unorm2_normalize()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif U_STABLE int32_t U_EXPORT2)",
    "insertText": "unorm2_normalize(const UNormalizer2 *norm2, const UChar *src, int32_t length, UChar *dest, int32_t capacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_normalizeSecondAndAppend()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unorm2_normalizeSecondAndAppend(const UNormalizer2 *norm2, UChar *first, int32_t firstLength, int32_t firstCapacity, const UChar *second, int32_t secondLength, UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_append()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unorm2_append(const UNormalizer2 *norm2, UChar *first, int32_t firstLength, int32_t firstCapacity, const UChar *second, int32_t secondLength, UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_getDecomposition()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unorm2_getDecomposition(const UNormalizer2 *norm2, UChar32 c, UChar *decomposition, int32_t capacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_getRawDecomposition()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unorm2_getRawDecomposition(const UNormalizer2 *norm2, UChar32 c, UChar *decomposition, int32_t capacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_composePair()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "unorm2_composePair(const UNormalizer2 *norm2, UChar32 a, UChar32 b)"
  },
  {
    "label": "unorm2_getCombiningClass()",
    "kind": "Method",
    "detail": "Function (U_STABLE uint8_t U_EXPORT2)",
    "insertText": "unorm2_getCombiningClass(const UNormalizer2 *norm2, UChar32 c)"
  },
  {
    "label": "unorm2_isNormalized()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "unorm2_isNormalized(const UNormalizer2 *norm2, const UChar *s, int32_t length, UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_quickCheck()",
    "kind": "Method",
    "detail": "Function (U_STABLE UNormalizationCheckResult U_EXPORT2)",
    "insertText": "unorm2_quickCheck(const UNormalizer2 *norm2, const UChar *s, int32_t length, UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_spanQuickCheckYes()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unorm2_spanQuickCheckYes(const UNormalizer2 *norm2, const UChar *s, int32_t length, UErrorCode *pErrorCode)"
  },
  {
    "label": "unorm2_hasBoundaryBefore()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "unorm2_hasBoundaryBefore(const UNormalizer2 *norm2, UChar32 c)"
  },
  {
    "label": "unorm2_hasBoundaryAfter()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "unorm2_hasBoundaryAfter(const UNormalizer2 *norm2, UChar32 c)"
  },
  {
    "label": "unorm2_isInert()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "unorm2_isInert(const UNormalizer2 *norm2, UChar32 c)"
  },
  {
    "label": "unorm_compare()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unorm_compare(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)"
  }
]