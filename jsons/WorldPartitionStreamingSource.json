[
  {
    "label": "FSphericalSector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSphericalSector"
  },
  {
    "label": "FStreamingSourceShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingSourceShape"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStreamingSourceShapeHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingSourceShapeHelper"
  },
  {
    "label": "FWorldPartitionStreamingQuerySource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionStreamingQuerySource"
  },
  {
    "label": "FWorldPartitionStreamingSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionStreamingSource"
  },
  {
    "label": "FSetStreamingSourceExtraRadius",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetStreamingSourceExtraRadius"
  },
  {
    "label": "FSetStreamingSourceExtraAngle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetStreamingSourceExtraAngle"
  },
  {
    "label": "UWorldPartitionSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionSubsystem"
  },
  {
    "label": "IWorldPartitionStreamingSourceProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IWorldPartitionStreamingSourceProvider"
  },
  {
    "label": "FSphericalSector()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Color . h \" # include \" Math / RandomStream . h \" # include \" HAL / IConsoleManager . h \" # include \" WorldPartitionStreamingSource . generated . h \" class FSphericalSector { public : using FReal = FVector::FReal ;)",
    "insertText": "FSphericalSector(EForceInit) : Center(ForceInit) , Radius(0.0f) , Axis(ForceInit) , Angle(360.0f)"
  },
  {
    "label": "FSphericalSector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSphericalSector(const FVector& InCenter, FReal InRadius) : Center(InCenter) , Radius(InRadius) , Axis(FVector::ForwardVector) , Angle(360.0f)"
  },
  {
    "label": "FSphericalSector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSphericalSector(const FVector& InCenter, FReal InRadius, const FVector& InAxis, FReal InAngle) : Center(InCenter) , Radius(InRadius) , Axis(InAxis) , Angle(InAngle)"
  },
  {
    "label": "SetCenter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCenter(const FVector& InCenter)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (Center = InCenter ; } const FVector&)",
    "insertText": "GetCenter()"
  },
  {
    "label": "GetRadius()",
    "kind": "Method",
    "detail": "Function (Radius = InRadius ; } FReal)",
    "insertText": "GetRadius()"
  },
  {
    "label": "Angle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Angle(InAngle <= 0.0f || InAngle > 360.0f)"
  },
  {
    "label": "GetAngle()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetAngle()"
  },
  {
    "label": "GetSafeNormal()",
    "kind": "Method",
    "detail": "Function (Axis = InAxis .)",
    "insertText": "GetSafeNormal()"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetAxis()"
  },
  {
    "label": "IsSphere()",
    "kind": "Method",
    "detail": "Function (Angle = 3 6 0 . 0 f ; } bool)",
    "insertText": "IsSphere()"
  },
  {
    "label": "IsNearlyZero()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNearlyZero()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "CalcBounds()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "Offset(Radius)"
  },
  {
    "label": "TransformBy()",
    "kind": "Method",
    "detail": "Function (} FSphericalSector)",
    "insertText": "TransformBy(const FTransform& M)"
  },
  {
    "label": "BuildDebugMesh()",
    "kind": "Method",
    "detail": "Function (} TArray<TPair<FVector,FVector>>)",
    "insertText": "BuildDebugMesh()"
  },
  {
    "label": "IntersectsBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectsBox(const FBox2D& InBox)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (private : FVector Center ; FReal Radius ; FVector Axis ; FReal Angle ; } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FStreamingSourceShape() : bUseGridLoadingRange(true) , LoadingRangeScale(1.f) , Radius(10000.0f) , bIsSector(false) , SectorAngle(360.0f) , Location(ForceInitToZero) , Rotation(ForceInitToZero)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FStreamingSourceShape& InShape)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "GetTypeHash(InShape.bUseGridLoadingRange)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(InShape.LoadingRangeScale))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(InShape.Radius))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(InShape.bIsSector))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(InShape.SectorAngle))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(InShape.Location.X))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(InShape.Location.Y))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(InShape.Location.Z))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(InShape.Rotation.Pitch))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(InShape.Rotation.Yaw))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(InShape.Rotation.Roll))"
  },
  {
    "label": "IsSourceAffectingGrid()",
    "kind": "Method",
    "detail": "Function (Include,Exclude } ; class FStreamingSourceShapeHelper { public : bool)",
    "insertText": "IsSourceAffectingGrid(const TSet<FName>& InSourceTargetGrids, EStreamingSourceTargetBehavior InSourceTargetBehavior, FName InGridName)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "ForEachShape()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "ForEachShape(float InGridLoadingRange, float InDefaultRadius, bool bInProjectIn2D, const FVector& InLocation, const FRotator& InRotation, const TArray<FStreamingSourceShape>& InShapes, TFunctionRef<void(const FSphericalSector&)> InOperation, float InExtraRadius = 0.f, float InExtraAngle = 0.f)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (const FTransform)",
    "insertText": "Transform(bInProjectIn2D ? FRotator(0, InRotation.Yaw, 0) : InRotation, InLocation)"
  },
  {
    "label": "LocalShape()",
    "kind": "Method",
    "detail": "Function (const FSphericalSector)",
    "insertText": "LocalShape(FVector::ZeroVector, InDefaultRadius + InExtraRadius)"
  },
  {
    "label": "InOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InOperation(LocalShape.TransformBy(Transform))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(const FStreamingSourceShape& Shape : InShapes)"
  },
  {
    "label": "ShapeRadius()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal)",
    "insertText": "ShapeRadius(Shape.bUseGridLoadingRange ? (InGridLoadingRange * Shape.LoadingRangeScale) : Shape.Radius)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal ShapeAngle = Shape . bIsSector ?)",
    "insertText": "Min(Shape.SectorAngle + InExtraAngle, 360.0f)"
  },
  {
    "label": "FRotator()",
    "kind": "Method",
    "detail": "Function (const FRotator ShapeRotation = bInProjectIn2D ?)",
    "insertText": "FRotator(0, Shape.Rotation.Yaw, 0)"
  },
  {
    "label": "IsNearlyZero()",
    "kind": "Method",
    "detail": "Function (const FVector ShapeAxis = ShapeRotation .)",
    "insertText": "IsNearlyZero() ? FVector::ForwardVector : ShapeRotation.Vector()"
  },
  {
    "label": "LocalShape()",
    "kind": "Method",
    "detail": "Function (const FSphericalSector)",
    "insertText": "LocalShape(bInProjectIn2D ? FVector(Shape.Location.X, Shape.Location.Y, 0) : Shape.Location, ShapeRadius, ShapeAxis, ShapeAngle)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} } } } } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "GetStreamingSourceTargetStateName()",
    "kind": "Method",
    "detail": "Function (Loaded,Activated } ; const TCHAR*)",
    "insertText": "GetStreamingSourceTargetStateName(EStreamingSourceTargetState StreamingSourceTargetState)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "check(0)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"Invalid\")"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FWorldPartitionStreamingQuerySource() : Location(FVector::ZeroVector) , Radius(0.f) , bUseGridLoadingRange(true) , bDataLayersOnly(false) , bSpatialQuery(true) , Rotation(ForceInitToZero) , TargetBehavior(EStreamingSourceTargetBehavior::Include)"
  },
  {
    "label": "FWorldPartitionStreamingQuerySource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWorldPartitionStreamingQuerySource(const FVector& InLocation) : Location(InLocation) , Radius(0.f) , bUseGridLoadingRange(true) , bDataLayersOnly(false) , bSpatialQuery(true) , Rotation(ForceInitToZero) , TargetBehavior(EStreamingSourceTargetBehavior::Include)"
  },
  {
    "label": "FWorldPartitionStreamingQuerySource()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FWorldPartitionStreamingQuerySource(const FWorldPartitionStreamingQuerySource& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionStreamingQuerySource&)",
    "insertText": "operator(const FWorldPartitionStreamingQuerySource& Other)"
  },
  {
    "label": "FWorldPartitionStreamingQuerySource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWorldPartitionStreamingQuerySource(FWorldPartitionStreamingQuerySource&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionStreamingQuerySource&)",
    "insertText": "operator(FWorldPartitionStreamingQuerySource&& Other)"
  },
  {
    "label": "ForEachShape()",
    "kind": "Method",
    "detail": "Function (TArray<FStreamingSourceShape> Shapes ; void)",
    "insertText": "ForEachShape(float InGridLoadingRange, FName InGridName, bool bInProjectIn2D, TFunctionRef<void(const FSphericalSector&)> InOperation)"
  },
  {
    "label": "ForEachShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachShape(InGridLoadingRange, bUseGridLoadingRange ? InGridLoadingRange : Radius, bInProjectIn2D, Location, Rotation, Shapes, InOperation)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} } } ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "FWorldPartitionStreamingSource()",
    "kind": "Method",
    "detail": "Function (Highest = 0,High = 6 4,Normal = 1 2 8,Low = 1 9 2,Lowest = 2 5 5,Default = Normal } ; struct FWorldPartitionStreamingSource {)",
    "insertText": "FWorldPartitionStreamingSource() : Name(NAME_None) , Location(FVector::ZeroVector) , Rotation(FRotator::ZeroRotator) , TargetState(EStreamingSourceTargetState::Activated) , bBlockOnSlowLoading(false) , Priority(EStreamingSourcePriority::Default) , Velocity(FVector::Zero()) , bUseVelocityContributionToCellsSorting(false) , DebugColor(ForceInit) , TargetBehavior(EStreamingSourceTargetBehavior::Include) , bReplay(false) , bRemote(false) , bForce2D(false) , Hash2D(0) , Hash3D(0) , QuantizedLocation(FVector::ZeroVector) , QuantizedRotation(FRotator::ZeroRotator) , ExtraRadius(0) , ExtraAngle(0)"
  },
  {
    "label": "FWorldPartitionStreamingSource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWorldPartitionStreamingSource(FName InName, const FVector& InLocation, const FRotator& InRotation, EStreamingSourceTargetState InTargetState, bool bInBlockOnSlowLoading, EStreamingSourcePriority InPriority, bool bRemote, FVector InVelocity = FVector::Zero()) : Name(InName) , Location(InLocation) , Rotation(InRotation) , TargetState(InTargetState) , bBlockOnSlowLoading(bInBlockOnSlowLoading) , Priority(InPriority) , Velocity(InVelocity) , bUseVelocityContributionToCellsSorting(false) , DebugColor(ForceInit) , TargetBehavior(EStreamingSourceTargetBehavior::Include) , bReplay(false) , bRemote(bRemote) , bForce2D(false) , Hash2D(0) , Hash3D(0) , QuantizedLocation(InLocation) , QuantizedRotation(InRotation) , ExtraRadius(0) , ExtraAngle(0)"
  },
  {
    "label": "FWorldPartitionStreamingSource()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FWorldPartitionStreamingSource(const FWorldPartitionStreamingSource& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionStreamingSource&)",
    "insertText": "operator(const FWorldPartitionStreamingSource& Other)"
  },
  {
    "label": "FWorldPartitionStreamingSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWorldPartitionStreamingSource(FWorldPartitionStreamingSource&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionStreamingSource&)",
    "insertText": "operator(FWorldPartitionStreamingSource&& Other)"
  },
  {
    "label": "GetDebugColor()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS FColor)",
    "insertText": "GetDebugColor()"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FColor(DebugColor.R, DebugColor.G, DebugColor.B, 255)"
  },
  {
    "label": "UpdateHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateHash()"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHash(bool bInclude3DInformation = true)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (TArray<FStreamingSourceShape> Shapes ; bool bReplay ; bool bRemote ; bool bForce2D ; FBox)",
    "insertText": "CalcBounds(float InGridLoadingRange, FName InGridName, bool bCalcIn2D = false)"
  },
  {
    "label": "OutBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "OutBounds(ForceInit)"
  },
  {
    "label": "ForEachShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachShape(InGridLoadingRange, InGridLoadingRange, bInProjectIn2D, Location, Rotation, Shapes, InOperation, ExtraRadius, ExtraAngle)"
  },
  {
    "label": "GetLocationQuantization()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLocationQuantization()"
  },
  {
    "label": "FSetStreamingSourceExtraAngle()",
    "kind": "Method",
    "detail": "Function (InStreamingSource . ExtraRadius = InExtraRadius ; } } class UWorldPartitionSubsystem ; } ; struct FSetStreamingSourceExtraAngle { private :)",
    "insertText": "FSetStreamingSourceExtraAngle(FWorldPartitionStreamingSource& InStreamingSource, float InExtraAngle)"
  },
  {
    "label": "GetStreamingSource()",
    "kind": "Method",
    "detail": "Function (InStreamingSource . ExtraAngle = InExtraAngle ; } } class UWorldPartitionSubsystem ; } ; struct IWorldPartitionStreamingSourceProvider { bool)",
    "insertText": "GetStreamingSource(FWorldPartitionStreamingSource& StreamingSource)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionStreamingSource StreamingSource ;)",
    "insertText": "if(GetStreamingSource(StreamingSource))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (StreamingSources .)",
    "insertText": "Add(MoveTemp(StreamingSource))"
  }
]