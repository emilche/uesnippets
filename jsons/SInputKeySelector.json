[
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "STextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextBlock"
  },
  {
    "label": "SInputKeySelector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInputKeySelector"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" InputCoreTypes . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateColor . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / Reply . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / Commands / InputChord . h \" # include \" Layout / Visibility . h \" class SButton ; class STextBlock ; class SInputKeySelector : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnKeySelected, const FInputChord& ) DECLARE_DELEGATE( FOnIsSelectingKeyChanged ) SLATE_BEGIN_ARGS( SInputKeySelector ) : _SelectedKey( FInputChord(EKeys::Invalid) ) , _ButtonStyle( &FCoreStyle::Get().GetWidgetStyle<FButtonStyle>( \"Button\" ) ) , _TextStyle( &FCoreStyle::Get().GetWidgetStyle< FTextBlockStyle >(\"NormalText\") ) , _KeySelectionText( NSLOCTEXT(\"InputKeySelector\", \"DefaultKeySelectionText\", \"...\") ) , _NoKeySpecifiedText(NSLOCTEXT(\"InputKeySelector\", \"DefaultEmptyText\", \"Empty\")) , _AllowModifierKeys( true ) , _AllowGamepadKeys( false ) , _EscapeCancelsSelection( true ) , _IsFocusable(true)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FInputChord, SelectedKey ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ATTRIBUTE( FMargin, Margin ) SLATE_STYLE_ARGUMENT( FButtonStyle, ButtonStyle ) SLATE_STYLE_ARGUMENT( FTextBlockStyle, TextStyle) SLATE_ARGUMENT( FText, KeySelectionText ) SLATE_ARGUMENT(FText, NoKeySpecifiedText) SLATE_ARGUMENT( bool, AllowModifierKeys ) SLATE_ARGUMENT( bool, AllowGamepadKeys ) SLATE_ARGUMENT( bool, EscapeCancelsSelection ) SLATE_ARGUMENT( TArray<FKey>, EscapeKeys ) SLATE_EVENT( FOnKeySelected, OnKeySelected ) SLATE_EVENT( FOnIsSelectingKeyChanged, OnIsSelectingKeyChanged ) SLATE_ARGUMENT(bool, IsFocusable) SLATE_END_ARGS() SLATE_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "GetSelectedKey()",
    "kind": "Method",
    "detail": "Function (public : FInputChord)",
    "insertText": "GetSelectedKey()"
  },
  {
    "label": "SetSelectedKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedKey(TAttribute<FInputChord> InSelectedKey)"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMargin(TAttribute<FMargin> InMargin)"
  },
  {
    "label": "SetButtonStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetButtonStyle(const FButtonStyle* ButtonStyle)"
  },
  {
    "label": "SetTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextStyle(const FTextBlockStyle* InTextStyle)"
  },
  {
    "label": "SetKeySelectionText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeySelectionText(FText InKeySelectionText)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (KeySelectionText =)",
    "insertText": "MoveTemp(InKeySelectionText)"
  },
  {
    "label": "SetNoKeySpecifiedText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNoKeySpecifiedText(FText InNoKeySpecifiedText)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (NoKeySpecifiedText =)",
    "insertText": "MoveTemp(InNoKeySpecifiedText)"
  },
  {
    "label": "SetAllowModifierKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAllowModifierKeys(const bool bInAllowModifierKeys)"
  },
  {
    "label": "SetAllowGamepadKeys()",
    "kind": "Method",
    "detail": "Function (bAllowModifierKeys = bInAllowModifierKeys ; } void)",
    "insertText": "SetAllowGamepadKeys(const bool bInAllowGamepadKeys)"
  },
  {
    "label": "SetEscapeKeys()",
    "kind": "Method",
    "detail": "Function (bAllowGamepadKeys = bInAllowGamepadKeys ; } void)",
    "insertText": "SetEscapeKeys(TArray<FKey> InEscapeKeys)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (EscapeKeys =)",
    "insertText": "MoveTemp(InEscapeKeys)"
  },
  {
    "label": "GetIsSelectingKey()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetIsSelectingKey()"
  },
  {
    "label": "OnPreviewKeyDown()",
    "kind": "Method",
    "detail": "Function (public : FReply)",
    "insertText": "OnPreviewKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnPreviewMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviewMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnNavigation()",
    "kind": "Method",
    "detail": "Function (FNavigationReply)",
    "insertText": "OnNavigation(const FGeometry& MyGeometry, const FNavigationEvent& InNavigationEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "GetMargin()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetMargin()"
  },
  {
    "label": "OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClicked()"
  },
  {
    "label": "SelectKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectKey(FKey Key, bool bShiftDown, bool bControllDown, bool bAltDown, bool bCommandDown)"
  },
  {
    "label": "SetIsSelectingKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsSelectingKey(bool bInIsSelectingKey)"
  },
  {
    "label": "IsEscapeKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEscapeKey(const FKey& InKey)"
  }
]