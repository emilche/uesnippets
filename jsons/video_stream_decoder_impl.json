[
  {
    "label": "VideoStreamDecoderImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamDecoderImpl"
  },
  {
    "label": "DecodeCallbacks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecodeCallbacks"
  },
  {
    "label": "DecodeResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DecodeResult"
  },
  {
    "label": "FrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameInfo"
  },
  {
    "label": "VideoStreamDecoderImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_VIDEO_STREAM_DECODER_IMPL_H_ # define VIDEO_VIDEO_STREAM_DECODER_IMPL_H_ # include<map> # include<memory> # include<utility> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" api / transport / field_trial_based_config . h \" # include \" api / video / video_stream_decoder . h \" # include \" modules / video_coding / frame_buffer2 . h \" # include \" modules / video_coding / timing / timing . h \" # include \" rtc_base / memory / always_valid_pointer . h \" # include \" rtc_base / platform_thread . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / task_queue . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class VideoStreamDecoderImpl : public VideoStreamDecoderInterface { public :)",
    "insertText": "VideoStreamDecoderImpl(VideoStreamDecoderInterface::Callbacks* callbacks, VideoDecoderFactory* decoder_factory, TaskQueueFactory* task_queue_factory, std::map<int, std::pair<SdpVideoFormat, int>> decoder_settings, const FieldTrialsView* field_trials)"
  },
  {
    "label": "VideoStreamDecoderImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoStreamDecoderImpl()"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrame(std::unique_ptr<EncodedFrame> frame)"
  },
  {
    "label": "SetMinPlayoutDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinPlayoutDelay(TimeDelta min_delay)"
  },
  {
    "label": "SetMaxPlayoutDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxPlayoutDelay(TimeDelta max_delay)"
  },
  {
    "label": "DecodeCallbacks()",
    "kind": "Method",
    "detail": "Function (private : class DecodeCallbacks : public DecodedImageCallback { public :)",
    "insertText": "DecodeCallbacks(VideoStreamDecoderImpl* video_stream_decoder_impl)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decoded(VideoFrame& decodedImage)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decoded(VideoFrame& decodedImage, int64_t decode_time_ms)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decoded(VideoFrame& decodedImage, absl::optional<int32_t> decode_time_ms, absl::optional<uint8_t> qp)"
  },
  {
    "label": "SaveFrameInfo()",
    "kind": "Method",
    "detail": "Function (private : VideoStreamDecoderImpl* const video_stream_decoder_impl_ ; } ; enum DecodeResult { kOk,kOkRequestKeyframe,kDecodeFailure,} ; struct FrameInfo { int64_t timestamp = - 1 ; int64_t decode_start_time_ms ; int64_t render_time_us ; VideoContentType content_type ; } ; void)",
    "insertText": "SaveFrameInfo(const EncodedFrame& frame) RTC_RUN_ON(bookkeeping_queue_)"
  },
  {
    "label": "GetFrameInfo()",
    "kind": "Method",
    "detail": "Function (FrameInfo*)",
    "insertText": "GetFrameInfo(int64_t timestamp) RTC_RUN_ON(bookkeeping_queue_)"
  },
  {
    "label": "StartNextDecode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartNextDecode() RTC_RUN_ON(bookkeeping_queue_)"
  },
  {
    "label": "OnNextFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNextFrameCallback(std::unique_ptr<EncodedFrame> frame) RTC_RUN_ON(bookkeeping_queue_)"
  },
  {
    "label": "OnDecodedFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecodedFrameCallback(VideoFrame& decodedImage, absl::optional<int32_t> decode_time_ms, absl::optional<uint8_t> qp)"
  },
  {
    "label": "GetDecoder()",
    "kind": "Method",
    "detail": "Function (VideoDecoder*)",
    "insertText": "GetDecoder(int payload_type) RTC_RUN_ON(decode_queue_)"
  },
  {
    "label": "DecodeFrame()",
    "kind": "Method",
    "detail": "Function (VideoStreamDecoderImpl::DecodeResult)",
    "insertText": "DecodeFrame(std::unique_ptr<EncodedFrame> frame) RTC_RUN_ON(decode_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (AlwaysValidPointer<const FieldTrialsView,FieldTrialBasedConfig> field_trials_ ; VCMTiming timing_ ; DecodeCallbacks decode_callbacks_ ; int kFrameInfoMemory = 8 ; std::array<FrameInfo,kFrameInfoMemory> frame_info_)",
    "insertText": "RTC_GUARDED_BY(bookkeeping_queue_)"
  },
  {
    "label": "RTC_PT_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (VideoStreamDecoderInterface::Callbacks* const callbacks_)",
    "insertText": "RTC_PT_GUARDED_BY(bookkeeping_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (absl::optional<int> current_payload_type_)",
    "insertText": "RTC_GUARDED_BY(decode_queue_)"
  },
  {
    "label": "RTC_PT_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (VideoDecoderFactory* const decoder_factory_)",
    "insertText": "RTC_PT_GUARDED_BY(decode_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex shut_down_mutex_ ; bool shut_down_)",
    "insertText": "RTC_GUARDED_BY(shut_down_mutex_)"
  }
]