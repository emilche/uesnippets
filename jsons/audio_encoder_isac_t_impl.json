[
  {
    "label": "IsOk()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_ISAC_AUDIO_ENCODER_ISAC_T_IMPL_H_ # define MODULES_AUDIO_CODING_CODECS_ISAC_AUDIO_ENCODER_ISAC_T_IMPL_H_ # include \" modules / audio_coding / codecs / isac / audio_encoder_isac_t . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / numerics / safe_minmax . h \" namespace webrtc { template<T> bool AudioEncoderIsacT<T>::)",
    "insertText": "IsOk()"
  },
  {
    "label": "AudioEncoderIsacT()",
    "kind": "Method",
    "detail": "Function (default : return false ; } } template<T> AudioEncoderIsacT<T)",
    "insertText": "AudioEncoderIsacT(const Config& config)"
  },
  {
    "label": "RecreateEncoderInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateEncoderInstance(config)"
  },
  {
    "label": "AudioEncoderIsacT()",
    "kind": "Method",
    "detail": "Function (} template<T> AudioEncoderIsacT<T>::~)",
    "insertText": "AudioEncoderIsacT()"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(0, T::Free(isac_state_))"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (} template<T> int AudioEncoderIsacT<T)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "NumChannels()",
    "kind": "Method",
    "detail": "Function (} template<T> size_t AudioEncoderIsacT<T)",
    "insertText": "NumChannels()"
  },
  {
    "label": "GetNewFrameLen()",
    "kind": "Method",
    "detail": "Function (const int samples_in_next_packet =)",
    "insertText": "GetNewFrameLen(isac_state_)"
  },
  {
    "label": "Max10MsFramesInAPacket()",
    "kind": "Method",
    "detail": "Function (} template<T> size_t AudioEncoderIsacT<T)",
    "insertText": "Max10MsFramesInAPacket()"
  },
  {
    "label": "SetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetBitrate(target_bps, false)"
  },
  {
    "label": "OnReceivedTargetAudioBitrate()",
    "kind": "Method",
    "detail": "Function (} template<T> void AudioEncoderIsacT<T)",
    "insertText": "OnReceivedTargetAudioBitrate(int target_bps)"
  },
  {
    "label": "OnReceivedUplinkBandwidth()",
    "kind": "Method",
    "detail": "Function (} template<T> void AudioEncoderIsacT<T)",
    "insertText": "OnReceivedUplinkBandwidth(int target_audio_bitrate_bps, absl::optional<int64_t>)"
  },
  {
    "label": "SetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetBitrate(target_audio_bitrate_bps, send_side_bwe_with_overhead_)"
  },
  {
    "label": "OnReceivedUplinkAllocation()",
    "kind": "Method",
    "detail": "Function (} template<T> void AudioEncoderIsacT<T)",
    "insertText": "OnReceivedUplinkAllocation(BitrateAllocationUpdate update)"
  },
  {
    "label": "SetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetBitrate(update.target_bitrate.bps<int>(), send_side_bwe_with_overhead_)"
  },
  {
    "label": "OnReceivedOverhead()",
    "kind": "Method",
    "detail": "Function (} template<T> void AudioEncoderIsacT<T)",
    "insertText": "OnReceivedOverhead(size_t overhead_bytes_per_packet)"
  },
  {
    "label": "Bytes()",
    "kind": "Method",
    "detail": "Function (overhead_per_packet_ =)",
    "insertText": "Bytes(overhead_bytes_per_packet)"
  },
  {
    "label": "EncodeImpl()",
    "kind": "Method",
    "detail": "Function (} template<T> AudioEncoder::EncodedInfo AudioEncoderIsacT<T)",
    "insertText": "EncodeImpl(uint32_t rtp_timestamp, rtc::ArrayView<const int16_t> audio, rtc::Buffer* encoded)"
  },
  {
    "label": "AppendData()",
    "kind": "Method",
    "detail": "Function (packet_in_progress_ = true ; packet_timestamp_ = rtp_timestamp ; } size_t encoded_bytes = encoded ->)",
    "insertText": "AppendData(kSufficientEncodeBufferSizeBytes, [&](rtc::ArrayView<uint8_t> encoded) { int r = T::Encode(isac_state_, audio.data(), encoded.data()); if (T::GetErrorCode(isac_state_) == 6450) { r = 0; } RTC_CHECK_GE(r, 0) << \"Encode failed (error code \" << T::GetErrorCode(isac_state_) << \")\"; return static_cast<size_t>(r); })"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (packet_in_progress_ = false ; EncodedInfo info ; info . encoded_bytes = encoded_bytes ; info . encoded_timestamp = packet_timestamp_ ; info . payload_type = config_ . payload_type ; info . encoder_type = CodecType::kIsac ; return info ; } template<T> void AudioEncoderIsacT<T)",
    "insertText": "Reset()"
  },
  {
    "label": "RecreateEncoderInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateEncoderInstance(config_)"
  },
  {
    "label": "GetFrameLengthRange()",
    "kind": "Method",
    "detail": "Function (} template<T> absl::optional<std::pair<TimeDelta,TimeDelta>> AudioEncoderIsacT<T)",
    "insertText": "GetFrameLengthRange()"
  },
  {
    "label": "SetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (} template<T> void AudioEncoderIsacT<T)",
    "insertText": "SetTargetBitrate(int target_bps, bool subtract_per_packet_overhead)"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (const DataRate overhead_rate = overhead_per_packet_ /)",
    "insertText": "Millis(config_.frame_size_ms)"
  },
  {
    "label": "bps()",
    "kind": "Method",
    "detail": "Function (target_bps - = overhead_rate .)",
    "insertText": "bps()"
  },
  {
    "label": "SafeClamp()",
    "kind": "Method",
    "detail": "Function (} target_bps =)",
    "insertText": "SafeClamp(target_bps, kMinBitrateBps, MaxBitrateBps(config_.sample_rate_hz))"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (int result =)",
    "insertText": "Control(isac_state_, target_bps, config_.frame_size_ms)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(result, 0)"
  },
  {
    "label": "RecreateEncoderInstance()",
    "kind": "Method",
    "detail": "Function (config_ . bit_rate = target_bps ; } template<T> void AudioEncoderIsacT<T)",
    "insertText": "RecreateEncoderInstance(const Config& config)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(config.IsOk())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (packet_in_progress_ = false ;)",
    "insertText": "if(isac_state_) RTC_CHECK_EQ(0, T::Free(isac_state_))"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(0, T::Create(&isac_state_))"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(0, T::EncoderInit(isac_state_, 1))"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(0, T::SetEncSampRate(isac_state_, config.sample_rate_hz))"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (const int bit_rate = config . bit_rate = = 0 ? kDefaultBitRate : config . bit_rate ;)",
    "insertText": "RTC_CHECK_EQ(0, T::Control(isac_state_, bit_rate, config.frame_size_ms))"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(0, T::SetDecSampRate(isac_state_, config.sample_rate_hz))"
  }
]