[
  {
    "label": "TestPacketization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestPacketization"
  },
  {
    "label": "Sender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sender"
  },
  {
    "label": "Receiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Receiver"
  },
  {
    "label": "EncodeDecodeTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncodeDecodeTest"
  },
  {
    "label": "TestPacketization()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_TEST_ENCODEDECODETEST_H_ # define MODULES_AUDIO_CODING_TEST_ENCODEDECODETEST_H_ # include<stdio . h> # include<string . h> # include \" absl / strings / string_view . h \" # include \" modules / audio_coding / include / audio_coding_module . h \" # include \" modules / audio_coding / test / PCMFile . h \" # include \" modules / audio_coding / test / RTPFile . h \" # include \" modules / include / module_common_types . h \" namespace webrtc { # define MAX_INCOMING_PAYLOAD 8 0 9 6 class TestPacketization : public AudioPacketizationCallback { public :)",
    "insertText": "TestPacketization(RTPStream* rtpStream, uint16_t frequency)"
  },
  {
    "label": "TestPacketization()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestPacketization()"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SendData(AudioFrameType frameType, uint8_t payloadType, uint32_t timeStamp, const uint8_t* payloadData, size_t payloadSize, int64_t absolute_capture_timestamp_ms)"
  },
  {
    "label": "MakeRTPheader()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "MakeRTPheader(uint8_t* rtpHeader, uint8_t payloadType, int16_t seqNo, uint32_t timeStamp, uint32_t ssrc)"
  },
  {
    "label": "Sender()",
    "kind": "Method",
    "detail": "Function (RTPStream* _rtpStream ; int32_t _frequency ; int16_t _seqNo ; } ; class Sender { public :)",
    "insertText": "Sender()"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup(AudioCodingModule* acm, RTPStream* rtpStream, absl::string_view in_file_name, int in_sample_rate, int payload_type, SdpAudioFormat format)"
  },
  {
    "label": "Teardown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Teardown()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "Add10MsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Add10MsData()"
  },
  {
    "label": "Receiver()",
    "kind": "Method",
    "detail": "Function (protected : AudioCodingModule* _acm ; private : PCMFile _pcmFile ; AudioFrame _audioFrame ; TestPacketization* _packetization ; } ; class Receiver { public :)",
    "insertText": "Receiver()"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Setup(AudioCodingModule* acm, RTPStream* rtpStream, absl::string_view out_file_name, size_t channels, int file_num)"
  },
  {
    "label": "IncomingPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IncomingPacket()"
  },
  {
    "label": "PlayoutData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlayoutData()"
  },
  {
    "label": "EncodeDecodeTest()",
    "kind": "Method",
    "detail": "Function (private : PCMFile _pcmFile ; int16_t* _playoutBuffer ; uint16_t _playoutLengthSmpls ; int32_t _frequency ; bool _firstTime ; protected : AudioCodingModule* _acm ; uint8_t _incomingPayload [ MAX_INCOMING_PAYLOAD ] ; RTPStream* _rtpStream ; RTPHeader _rtpHeader ; size_t _realPayloadSizeBytes ; size_t _payloadSizeBytes ; uint32_t _nextTime ; } ; class EncodeDecodeTest { public :)",
    "insertText": "EncodeDecodeTest()"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Perform()"
  }
]