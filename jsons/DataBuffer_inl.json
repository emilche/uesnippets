[
  {
    "label": "CArray()",
    "kind": "Method",
    "detail": "Function (template<T> ST_INLINE CArray<T)",
    "insertText": "CArray(void) : m_pData(NULL)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} template<T> ST_INLINE st_bool CArray<T)",
    "insertText": "IsEmpty(void)"
  },
  {
    "label": "st_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "st_assert(m_pData != NULL, \"Data is NULL\")"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (} template<T> ST_INLINE st_uint32 CArray<T)",
    "insertText": "Count(void)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (} template<T> ST_INLINE const T* CArray<T)",
    "insertText": "Data(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> ST_INLINE const T& CArray<T)",
    "insertText": "operator(st_uint32 uiIndex)"
  },
  {
    "label": "st_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "st_assert(uiIndex < Count( ), \"Index out of range\")"
  },
  {
    "label": "CUntypedArray()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "CUntypedArray(void) : m_pData(NULL)"
  },
  {
    "label": "ElementSize()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_uint32)",
    "insertText": "ElementSize(void)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_uint32)",
    "insertText": "Length(void)"
  },
  {
    "label": "CTable()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "CTable(void) : m_pData(NULL)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} template<T> ST_INLINE const T&)",
    "insertText": "GetValue(st_uint32 uiIndex)"
  },
  {
    "label": "uiDataIndex()",
    "kind": "Method",
    "detail": "Function (st_uint32)",
    "insertText": "uiDataIndex(reinterpret_cast<st_uint32*>(m_pData) + uiIndex + 1)"
  },
  {
    "label": "GetContainer()",
    "kind": "Method",
    "detail": "Function (} template<T> ST_INLINE T)",
    "insertText": "GetContainer(st_uint32 uiIndex)"
  },
  {
    "label": "CReader()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "CReader(void) : m_pFileData(NULL), m_bOwnsData(false)"
  },
  {
    "label": "CReader()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CReader::~)",
    "insertText": "CReader(void)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Valid()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "Valid(void)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "Clear(void)"
  },
  {
    "label": "LoadFile()",
    "kind": "Method",
    "detail": "Function (delete [ ] m_pFileData ; } m_pFileData = NULL ; m_bOwnsData = false ; m_pData = NULL ; } ST_INLINE st_bool)",
    "insertText": "LoadFile(const st_char* pFilename)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (FILE* pFile = NULL ; # if)",
    "insertText": "defined(MultiByteToWideChar) fopen_s(&pFile, pFilename, \"rb\")"
  },
  {
    "label": "MultiByteToWideChar()",
    "kind": "Method",
    "detail": "Function (int iLength =)",
    "insertText": "MultiByteToWideChar(CP_UTF8, 0, pFilename, -1, NULL , 0)"
  },
  {
    "label": "MultiByteToWideChar()",
    "kind": "Method",
    "detail": "Function (wchar_t* pWideString = new wchar_t [ iLength ] ;)",
    "insertText": "MultiByteToWideChar(CP_UTF8, 0 , pFilename, -1, pWideString, iLength)"
  },
  {
    "label": "_wfopen()",
    "kind": "Method",
    "detail": "Function (pFile =)",
    "insertText": "_wfopen(pWideString, L\"rb\")"
  },
  {
    "label": "fopen()",
    "kind": "Method",
    "detail": "Function (delete [ ] pWideString ; } # else pFile =)",
    "insertText": "fopen(pFilename, \"rb\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(pFile != NULL)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fseek(pFile, 0L, SEEK_END)"
  },
  {
    "label": "ftell()",
    "kind": "Method",
    "detail": "Function (st_int32 iNumBytes =)",
    "insertText": "ftell(pFile)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (st_int32 iErrorCode =)",
    "insertText": "fseek(pFile, 0L, SEEK_SET)"
  },
  {
    "label": "st_int32()",
    "kind": "Method",
    "detail": "Function (m_pFileData = new st_byte [ iNumBytes ] ; m_bOwnsData = true ; st_int32 iNumBytesRead =)",
    "insertText": "st_int32(fread(m_pFileData, 1, iNumBytes, pFile))"
  },
  {
    "label": "FileToken()",
    "kind": "Method",
    "detail": "Function (const st_char* pToken =)",
    "insertText": "FileToken()"
  },
  {
    "label": "st_int32()",
    "kind": "Method",
    "detail": "Function (st_int32 iTokenLength =)",
    "insertText": "st_int32(strlen(pToken))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_pData = m_pFileData + iTokenLength ; bReturn = true ;)",
    "insertText": "for(st_int32 i = 0; (i < iTokenLength) && bReturn; ++i)"
  },
  {
    "label": "fclose()",
    "kind": "Method",
    "detail": "Function (bReturn = false ; } } } } })",
    "insertText": "fclose(pFile)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bReturn)"
  },
  {
    "label": "LoadFromData()",
    "kind": "Method",
    "detail": "Function (} return bReturn ; } ST_INLINE st_bool)",
    "insertText": "LoadFromData(const st_byte* pData, st_int32 iSize)"
  },
  {
    "label": "st_byte()",
    "kind": "Method",
    "detail": "Function (m_pFileData = const_cast<)",
    "insertText": "st_byte(pData)"
  },
  {
    "label": "ClearAfter()",
    "kind": "Method",
    "detail": "Function (} return bReturn ; } ST_INLINE st_bool)",
    "insertText": "ClearAfter(st_uint32 uiIndex)"
  },
  {
    "label": "st_byte()",
    "kind": "Method",
    "detail": "Function (st_byte* pEnd = reinterpret_cast<)",
    "insertText": "st_byte(m_pData + uiDataIndex)"
  },
  {
    "label": "st_uint32()",
    "kind": "Method",
    "detail": "Function (st_uint32 uiDataSize = static_cast<)",
    "insertText": "st_uint32(pEnd - m_pFileData)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (st_byte* pNewData = new st_byte [ uiDataSize ] ;)",
    "insertText": "memcpy(pNewData, m_pFileData, uiDataSize)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(pNewData + uiDataSize - uiZeroPadding, 0, uiZeroPadding)"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (m_pData = m_pFileData + iTokenLength ; st_uint32 uiCount =)",
    "insertText": "Count()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (st_uint32 uiLastDataIndex = uiDataSize - uiZeroPadding ;)",
    "insertText": "for(st_uint32 i = uiIndex + 1; i < uiCount; ++i)"
  }
]