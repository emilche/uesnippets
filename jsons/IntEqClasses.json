[
  {
    "label": "IntEqClasses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntEqClasses"
  },
  {
    "label": "IntEqClasses()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_INTEQCLASSES_H # define LLVM_ADT_INTEQCLASSES_H # include \" llvm / ADT / SmallVector . h \" namespace llvm { class IntEqClasses { SmallVector<unsigned,8> EC ; unsigned NumClasses ; public :)",
    "insertText": "IntEqClasses(unsigned N = 0) : NumClasses(0)"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "grow(N)"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "grow(unsigned N)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (NumClasses = 0 ; } void)",
    "insertText": "join(unsigned a, unsigned b)"
  },
  {
    "label": "findLeader()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "findLeader(unsigned a)"
  },
  {
    "label": "compress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compress()"
  },
  {
    "label": "getNumClasses()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumClasses()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NumClasses && \"operator[] called before compress()\")"
  }
]