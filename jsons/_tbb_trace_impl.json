[
  {
    "label": "fgt_algorithm()",
    "kind": "Method",
    "detail": "Function (# ifndef _FGT_TBB_TRACE_IMPL_H # define _FGT_TBB_TRACE_IMPL_H # include \" . . / tbb_profiling . h \" namespace tbb { namespace internal { # if TBB_PREVIEW_ALGORITHM_TRACE void)",
    "insertText": "fgt_algorithm(string_index t, void *algorithm, void *parent)"
  },
  {
    "label": "itt_make_task_group()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_make_task_group(ITT_DOMAIN_FLOW, algorithm, ALGORITHM, parent, ALGORITHM, t)"
  },
  {
    "label": "fgt_begin_algorithm()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_begin_algorithm(string_index t, void *algorithm)"
  },
  {
    "label": "itt_task_begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_task_begin(ITT_DOMAIN_FLOW, algorithm, ALGORITHM, NULL, FLOW_NULL, t)"
  },
  {
    "label": "fgt_end_algorithm()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_end_algorithm(void *)"
  },
  {
    "label": "itt_task_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_task_end(ITT_DOMAIN_FLOW)"
  },
  {
    "label": "fgt_alg_begin_body()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_alg_begin_body(string_index t, void *body, void *algorithm)"
  },
  {
    "label": "itt_task_begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_task_begin(ITT_DOMAIN_FLOW, body, FLOW_BODY, algorithm, ALGORITHM, t)"
  },
  {
    "label": "fgt_alg_end_body()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_alg_end_body(void *)"
  },
  {
    "label": "fgt_algorithm()",
    "kind": "Method",
    "detail": "Function (} # else void)",
    "insertText": "fgt_algorithm(string_index , void * , void *)"
  },
  {
    "label": "fgt_begin_algorithm()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_begin_algorithm(string_index , void *)"
  },
  {
    "label": "fgt_alg_begin_body()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_alg_begin_body(string_index , void * , void *)"
  }
]