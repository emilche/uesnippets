[
  {
    "label": "AssumptionCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssumptionCache"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "TargetTransformInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetTransformInfo"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "CodeMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodeMetrics"
  },
  {
    "label": "callIsSmall()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_CODEMETRICS_H # define LLVM_ANALYSIS_CODEMETRICS_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / IR / CallSite . h \" namespace llvm { class AssumptionCache ; class BasicBlock ; class Loop ; class Function ; class Instruction ; class DataLayout ; class TargetTransformInfo ; class Value ; bool)",
    "insertText": "callIsSmall(ImmutableCallSite CS)"
  },
  {
    "label": "CodeMetrics()",
    "kind": "Method",
    "detail": "Function (struct CodeMetrics { bool exposesReturnsTwice ; bool isRecursive ; bool notDuplicatable ; bool usesDynamicAlloca ; unsigned NumInsts ; unsigned NumBlocks ; DenseMap<const BasicBlock*,unsigned> NumBBInsts ; unsigned NumCalls ; unsigned NumInlineCandidates ; unsigned NumVectorInsts ; unsigned NumRets ;)",
    "insertText": "CodeMetrics() : exposesReturnsTwice(false), isRecursive(false), notDuplicatable(false), usesDynamicAlloca(false), NumInsts(0), NumBlocks(0), NumCalls(0), NumInlineCandidates(0), NumVectorInsts(0), NumRets(0)"
  },
  {
    "label": "analyzeBasicBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "analyzeBasicBlock(const BasicBlock *BB, const TargetTransformInfo &TTI, SmallPtrSetImpl<const Value*> &EphValues)"
  },
  {
    "label": "collectEphemeralValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collectEphemeralValues(const Loop *L, AssumptionCache *AC, SmallPtrSetImpl<const Value *> &EphValues)"
  },
  {
    "label": "collectEphemeralValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collectEphemeralValues(const Function *L, AssumptionCache *AC, SmallPtrSetImpl<const Value *> &EphValues)"
  }
]