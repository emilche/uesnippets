[
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FFaceMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFaceMesh"
  },
  {
    "label": "FIntersectionSegmentTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIntersectionSegmentTool"
  },
  {
    "label": "FIsoSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoSegment"
  },
  {
    "label": "FIsoTriangulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoTriangulator"
  },
  {
    "label": "FCandidateNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCandidateNode"
  },
  {
    "label": "FAdditionalIso",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdditionalIso"
  },
  {
    "label": "FCycleTriangulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCycleTriangulator"
  },
  {
    "label": "ETriangleOfPentagon",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETriangleOfPentagon"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCycleTriangulator()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FCycleTriangulator(FIsoTriangulator& IsoTriangulator, const TArray<FIsoSegment*>& InCycle, const TArray<bool>& InCycleOrientation)"
  },
  {
    "label": "MeshCycle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MeshCycle()"
  },
  {
    "label": "CanCycleBeMeshed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCycleBeMeshed()"
  },
  {
    "label": "InitializeArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeArrays()"
  },
  {
    "label": "CleanContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanContext()"
  },
  {
    "label": "InitializeCycleForMeshing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCycleForMeshing()"
  },
  {
    "label": "FillSegmentStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSegmentStack()"
  },
  {
    "label": "BuildTheBestPolygon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildTheBestPolygon(FIsoSegment* SegmentToMesh, bool bOrientation)"
  },
  {
    "label": "FindTheCycleToMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTheCycleToMesh(FIsoSegment* Segment, bool bOrientation, int32& StartIndexForMinLength)"
  },
  {
    "label": "FindTheBestAcuteTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTheBestAcuteTriangle()"
  },
  {
    "label": "FindCandidateNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindCandidateNodes(int32 StartIndex)"
  },
  {
    "label": "FindTheBestCandidateNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTheBestCandidateNode()"
  },
  {
    "label": "BuildTheBestPolygonFromTheSelectedTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildTheBestPolygonFromTheSelectedTriangle()"
  },
  {
    "label": "FindComplementaryNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindComplementaryNodes(FAdditionalIso& Side)"
  },
  {
    "label": "ValidateAddNodesAccordingSlopeWithSide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateAddNodesAccordingSlopeWithSide(FAdditionalIso& Side)"
  },
  {
    "label": "ValidateComplementaryNodesWithInsideAndIntersectionsCriteria()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateComplementaryNodesWithInsideAndIntersectionsCriteria(FAdditionalIso& Side)"
  },
  {
    "label": "ValidComplementaryNodeOrDeleteIt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidComplementaryNodeOrDeleteIt(FAdditionalIso& Side, int32 Index)"
  },
  {
    "label": "IsInnerSideSegmentInsideCycle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInnerSideSegmentInsideCycle(FAdditionalIso& Side)"
  },
  {
    "label": "SelectFinalNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectFinalNodes(FAdditionalIso& Side1, FAdditionalIso& Side2)"
  },
  {
    "label": "ComputeSideCandidateEquilateralCriteria()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSideCandidateEquilateralCriteria(FAdditionalIso& Side)"
  },
  {
    "label": "BuildTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildTriangle(TArray<FIsoNode*>& CandidatNodes)"
  },
  {
    "label": "BuildQuadrilateral()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildQuadrilateral(TArray<FIsoNode*>& CandidatNodes)"
  },
  {
    "label": "BuildPentagon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildPentagon(TArray<FIsoNode*>& CandidatNodes)"
  },
  {
    "label": "BuildSmallPolygon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildSmallPolygon(TArray<FIsoNode*>& CandidatNodes, bool bCheckIntersectionWithIso)"
  },
  {
    "label": "BuildSegmentIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildSegmentIfNeeded(TArray<FIsoNode*>& CandidatNodes)"
  },
  {
    "label": "BuildSegmentIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildSegmentIfNeeded(FIsoNode* NodeA, FIsoNode* NodeB)"
  },
  {
    "label": "BuildSegmentIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildSegmentIfNeeded(FIsoNode* NodeA, FIsoNode* NodeB, FIsoSegment* ABSegment)"
  },
  {
    "label": "SortCycleIntersectionToolIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortCycleIntersectionToolIfNeeded()"
  },
  {
    "label": "MeshTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshTriangle(const FGrid& Grid, FIsoNode** Nodes, FFaceMesh& Mesh)"
  },
  {
    "label": "MeshQuadrilateral()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshQuadrilateral(const FGrid& Grid, FIsoNode** Nodes, FFaceMesh& Mesh)"
  },
  {
    "label": "MeshPentagon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshPentagon(const FGrid& Grid, FIsoNode** Nodes, FFaceMesh& Mesh)"
  }
]