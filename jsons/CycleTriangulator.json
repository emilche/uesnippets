[
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FFaceMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFaceMesh"
  },
  {
    "label": "FIntersectionSegmentTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIntersectionSegmentTool"
  },
  {
    "label": "FIsoSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoSegment"
  },
  {
    "label": "FIsoTriangulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoTriangulator"
  },
  {
    "label": "FCandidateNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCandidateNode"
  },
  {
    "label": "FAdditionalIso",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdditionalIso"
  },
  {
    "label": "FCycleTriangulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCycleTriangulator"
  },
  {
    "label": "ETriangleOfPentagon",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETriangleOfPentagon"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Factory . h \" # include \" Math / SlopeUtils . h \" # include \" Mesh / MeshEnum . h \" # include \" Mesh / Meshers / IsoTriangulator / IntersectionSegmentTool . h \" # include \" Mesh / Meshers / IsoTriangulator / IntersectionIsoSegmentTool . h \" # ifdef CADKERNEL_DEV # include \" UI / DefineForDebug . h \" # endif namespace UE::CADKernel { class FGrid ; class FFaceMesh ; class FIntersectionSegmentTool ; class FIsoSegment ; class FIsoTriangulator ; typedef TFunction<)",
    "insertText": "double(const FPoint2D&, const FPoint2D&, double)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "int32(int32)"
  },
  {
    "label": "FCandidateNode()",
    "kind": "Method",
    "detail": "Function (struct FCandidateNode { FIsoNode* Node ; double SlopeAtStartNode ; double SlopeAtEndNode ; int32 Index ; bool bIsValid ;)",
    "insertText": "FCandidateNode()"
  },
  {
    "label": "FCandidateNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCandidateNode(FIsoNode* InNode, double InSlopeAtStartNode, double InSlopeAtEndNode, int32 InIndex) :Node(InNode) , SlopeAtStartNode(InSlopeAtStartNode) , SlopeAtEndNode(InSlopeAtEndNode) , Index(InIndex) , bIsValid(false)"
  },
  {
    "label": "FAdditionalIso()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAdditionalIso { int32 StartIndex = 0 ; FIsoNode* StartNode = nullptr ; int32 EndIndex = 0 ; FIsoNode* EndNode = nullptr ; int32 NodeIndices [ 2 ] = { - 1,- 1 } ; FIsoNode* Nodes [ 2 ] = { nullptr,nullptr } ; double EquilateralCriteria [ 2 ] = { Slope::TwoPiSlope,Slope::TwoPiSlope } ; bool bForceNodes = false ;)",
    "insertText": "FAdditionalIso(int32 InStartIndex, int32 InEndIndex, FIsoNode* InStartNode, FIsoNode* InEndNode) : StartIndex(InStartIndex) , StartNode(InStartNode) , EndIndex(InEndIndex) , EndNode(InEndNode)"
  },
  {
    "label": "CandidateNodeCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CandidateNodeCount()"
  },
  {
    "label": "AddTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTo(TArray<FIsoNode*>& PolygonNodes)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PolygonNodes .)",
    "insertText": "Add(Nodes[Index])"
  },
  {
    "label": "RemoveCandidate()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "RemoveCandidate(int32 Index)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (NodeIndices [ Index ] = - 1 ; Nodes [ Index ] = nullptr ; EquilateralCriteria [ Index ] = Slope::TwoPiSlope ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "RemoveCandidateIfPresent()",
    "kind": "Method",
    "detail": "Function (NodeIndices [ 0 ] = - 1 ; NodeIndices [ 1 ] = - 1 ; Nodes [ 0 ] = nullptr ; Nodes [ 1 ] = nullptr ; EquilateralCriteria [ 0 ] = Slope::TwoPiSlope ; EquilateralCriteria [ 1 ] = Slope::TwoPiSlope ; bForceNodes = false ; } void)",
    "insertText": "RemoveCandidateIfPresent(FIsoNode* ForbiddenNode)"
  },
  {
    "label": "RemoveCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCandidate(Index)"
  },
  {
    "label": "FCycleTriangulator()",
    "kind": "Method",
    "detail": "Function (bForceNodes = false ; } } } } ; using FNodeIntersectionCount = TPair<FCandidateNode*,int32> ; class FCycleTriangulator { private : const FGrid& Grid ; int32 NodeCount = 0 ; const TArray<FIsoSegment*>& Cycle ; const TArray<bool>& CycleOrientation ; const EGridSpace Space = EGridSpace::UniformScaled ; const FIntersectionIsoSegmentTool& InnerToOuterIsoSegmentsIntersectionTool ; FFaceMesh& Mesh ; TFactory<FIsoSegment>& IsoSegmentFactory ; FIntersectionSegmentTool CycleIntersectionTool ; TArray<FIsoSegment*> SegmentStack ; TArray<FIsoSegment*> UnmeshedSegment ; bool bFirstRun = true ; int32 SubCycleNodeCount = 0 ; TArray<FIsoNode*> SubCycleNodes ; TArray<TPair<int32,double>> VertexIndexToSlopes ; double MeanSquareLength = 0 ; bool bAcuteTriangle = false ; int32 IntersectionCountAllowed = 0 ; int32 MaxIntersectionCounted = 0 ; int32 FirstSideStartIndex = - 1 ; int32 FirstSideEndIndex = - 1 ; int32 TriangleThirdIndex = - 1 ; FIsoNode* FirstSideStartNode ; FIsoNode* FirstSideEndNode ; FIsoNode* TriangleThirdNode ; TArray<FCandidateNode> CandidateNodes ; FCandidateNode* ExtremityCandidateNodes [ 2 ] = { nullptr,nullptr } ; TArray<FNodeIntersectionCount> NodeToIntersection ; TArray<FIsoNode*> PolygonNodes ; bool bNeedIntersectionToolUpdate = true ; const SlopeMethod GetSlopeAtStartNode = CounterClockwiseSlope ; const SlopeMethod GetSlopeAtEndNode = ClockwiseSlope ; public :)",
    "insertText": "FCycleTriangulator(FIsoTriangulator& IsoTriangulator, const TArray<FIsoSegment*>& InCycle, const TArray<bool>& InCycleOrientation)"
  },
  {
    "label": "MeshCycle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MeshCycle()"
  },
  {
    "label": "CanCycleBeMeshed()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CanCycleBeMeshed()"
  },
  {
    "label": "FindNextSegment()",
    "kind": "Method",
    "detail": "Function (FIsoSegment*)",
    "insertText": "FindNextSegment(const FIsoSegment* StartSegment, const FIsoNode* StartNode, SlopeMethod GetSlope)"
  },
  {
    "label": "InitializeArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeArrays()"
  },
  {
    "label": "CleanContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanContext()"
  },
  {
    "label": "InitializeCycleForMeshing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCycleForMeshing()"
  },
  {
    "label": "FillSegmentStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSegmentStack()"
  },
  {
    "label": "BuildTheBestPolygon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildTheBestPolygon(FIsoSegment* SegmentToMesh, bool bOrientation)"
  },
  {
    "label": "NextIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NextIndex(int32 Index)"
  },
  {
    "label": "PreviousIndex()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "PreviousIndex(int32 Index)"
  },
  {
    "label": "FindTheBestAcuteTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTheBestAcuteTriangle()"
  },
  {
    "label": "FindCandidateNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindCandidateNodes(int32 StartIndex)"
  },
  {
    "label": "FindTheBestCandidateNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTheBestCandidateNode()"
  },
  {
    "label": "BuildTheBestPolygonFromTheSelectedTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildTheBestPolygonFromTheSelectedTriangle()"
  },
  {
    "label": "FindComplementaryNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindComplementaryNodes(FAdditionalIso& Side)"
  },
  {
    "label": "ValidateAddNodesAccordingSlopeWithSide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateAddNodesAccordingSlopeWithSide(FAdditionalIso& Side)"
  },
  {
    "label": "ValidateComplementaryNodesWithInsideAndIntersectionsCriteria()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateComplementaryNodesWithInsideAndIntersectionsCriteria(FAdditionalIso& Side)"
  },
  {
    "label": "ValidComplementaryNodeOrDeleteIt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidComplementaryNodeOrDeleteIt(FAdditionalIso& Side, int32 Index)"
  },
  {
    "label": "IsInnerSideSegmentInsideCycle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInnerSideSegmentInsideCycle(FAdditionalIso& Side)"
  },
  {
    "label": "SelectFinalNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectFinalNodes(FAdditionalIso& Side1, FAdditionalIso& Side2)"
  },
  {
    "label": "ComputeSideCandidateEquilateralCriteria()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSideCandidateEquilateralCriteria(FAdditionalIso& Side)"
  },
  {
    "label": "BuildTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildTriangle(TArray<FIsoNode*>& CandidatNodes)"
  },
  {
    "label": "BuildQuadrilateral()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildQuadrilateral(TArray<FIsoNode*>& CandidatNodes)"
  },
  {
    "label": "BuildPentagon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildPentagon(TArray<FIsoNode*>& CandidatNodes)"
  },
  {
    "label": "BuildSmallPolygon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildSmallPolygon(TArray<FIsoNode*>& CandidatNodes, bool bCheckIntersectionWithIso)"
  },
  {
    "label": "BuildSegmentIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildSegmentIfNeeded(TArray<FIsoNode*>& CandidatNodes)"
  },
  {
    "label": "BuildSegmentIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildSegmentIfNeeded(FIsoNode* NodeA, FIsoNode* NodeB)"
  },
  {
    "label": "BuildSegmentIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildSegmentIfNeeded(FIsoNode* NodeA, FIsoNode* NodeB, FIsoSegment* ABSegment)"
  },
  {
    "label": "SortCycleIntersectionToolIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortCycleIntersectionToolIfNeeded()"
  },
  {
    "label": "IsIntersectingIso()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IsIntersectingIso(const TArray<FIsoNode*>& Nodes)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (FirstSideStartNode = SubCycleNodes [ FirstSideStartIndex ] ; FirstSideEndNode = SubCycleNodes [ FirstSideEndIndex ] ; NodeToIntersection .)",
    "insertText": "Reserve(CandidateNodes.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Max = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < CandidateNodes.Num(); ++Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCandidateNode& CNode = CandidateNodes [ Index ] ;)",
    "insertText": "if(!CNode.bIsValid)"
  },
  {
    "label": "CountIntersections()",
    "kind": "Method",
    "detail": "Function (continue ; } const FIsoNode* Node = CNode . Node ; int32 IntersectionCount = InnerToOuterIsoSegmentsIntersectionTool .)",
    "insertText": "CountIntersections(*FirstSideStartNode, *Node)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (IntersectionCount =)",
    "insertText": "Max(IntersectionCount, InnerToOuterIsoSegmentsIntersectionTool.CountIntersections(*FirstSideEndNode, *Node))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (NodeToIntersection .)",
    "insertText": "Emplace(&CNode, IntersectionCount)"
  },
  {
    "label": "ConfirmIntersection()",
    "kind": "Method",
    "detail": "Function (Max = IntersectionCount ; } } return Max ; } bool)",
    "insertText": "ConfirmIntersection(const FIsoNode* Start, const FIsoNode* End, const FIsoNode* Candidate, const FIsoSegment* IntersectedSegment)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; namespace Polygon { enum ETriangleOfPentagon : uint8 { Triangle012 = 0,Triangle013,Triangle014,Triangle023,Triangle024,Triangle034,Triangle123,Triangle124,Triangle134,Triangle234,NoTriangle,} ; uint8 TrianglesOfPentagon [ 1 0 ] [ 3 ] = { { 0,1,2 },{ 0,1,3 },{ 0,1,4 },{ 0,2,3 },{ 0,2,4 },{ 0,3,4 },{ 1,2,3 },{ 1,2,4 },{ 1,3,4 },{ 2,3,4 } } ; enum class EPentagon : uint8 { None = 0 x00u,P012_023_034 = 0 x01u,P012_024_234 = 0 x02u,P012_023_034_or_P012_024_234 = 0 x03u,P013_034_123 = 0 x04u,P012_023_034_or_P013_034_123 = 0 x05u,P014_123_134 = 0 x08u,P013_034_123_or_P014_123_134 = 0 x0Cu,P014_124_234 = 0 x10u,P012_024_234_or_P014_124_234 = 0 x12u,P014_123_134_or_P014_124_234 = 0 x18u,All = 0 x1Fu,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EPentagon)"
  },
  {
    "label": "MeshTriangle()",
    "kind": "Method",
    "detail": "Function (EPentagon TriangleToPentagon [ 1 0 ] = { EPentagon::P012_023_034_or_P012_024_234,EPentagon::P013_034_123,EPentagon::P014_123_134_or_P014_124_234,EPentagon::P012_023_034,EPentagon::P012_024_234,EPentagon::P012_023_034_or_P013_034_123,EPentagon::P013_034_123_or_P014_123_134,EPentagon::P014_124_234,EPentagon::P014_123_134,EPentagon::P012_024_234_or_P014_124_234 } ; void)",
    "insertText": "MeshTriangle(const FGrid& Grid, FIsoNode** Nodes, FFaceMesh& Mesh)"
  },
  {
    "label": "MeshQuadrilateral()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshQuadrilateral(const FGrid& Grid, FIsoNode** Nodes, FFaceMesh& Mesh)"
  },
  {
    "label": "MeshPentagon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshPentagon(const FGrid& Grid, FIsoNode** Nodes, FFaceMesh& Mesh)"
  }
]