[
  {
    "label": "FNetBitStreamWriteScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitStreamWriteScope"
  },
  {
    "label": "FNetBitStreamRollbackScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitStreamRollbackScope"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetBitStreamWriteScope()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / StringView . h \" # include \" Misc / AssertionMacros . h \" # include \" Iris / Serialization / NetBitStreamWriter . h \" # include \" Iris / Serialization / NetBitStreamReader . h \" # include \" Iris / IrisConfig . h \" namespace UE::Net { class FNetBitStreamWriteScope { public :)",
    "insertText": "FNetBitStreamWriteScope(FNetBitStreamWriter& InWriter, uint32 WritePos) : Writer(InWriter) , OriginalPos(InWriter.GetPosBits())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if UE_NETBITSTREAMWRITER_VALIDATE)",
    "insertText": "check(!Writer.IsOverflown())"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (# endif Writer .)",
    "insertText": "Seek(WritePos)"
  },
  {
    "label": "FNetBitStreamWriteScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FNetBitStreamWriteScope()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if UE_NETBITSTREAMWRITER_VALIDATE)",
    "insertText": "check(Writer.GetPosBits() <= OriginalPos)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (# endif Writer .)",
    "insertText": "Seek(OriginalPos)"
  },
  {
    "label": "FNetBitStreamRollbackScope()",
    "kind": "Method",
    "detail": "Function (} private : FNetBitStreamWriter& Writer ; const uint32 OriginalPos ; } ; class FNetBitStreamRollbackScope { public :)",
    "insertText": "FNetBitStreamRollbackScope(FNetBitStreamWriter& InWriter) : Writer(InWriter) , StartPos(InWriter.GetPosBits())"
  },
  {
    "label": "FNetBitStreamRollbackScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FNetBitStreamRollbackScope()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "Seek(StartPos)"
  },
  {
    "label": "Rollback()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Rollback()"
  },
  {
    "label": "GetStartPos()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetStartPos()"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (Writer ->)",
    "insertText": "WriteBits((uint32)Value, 32)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (Writer ->)",
    "insertText": "WriteBits((uint32)(Value >> 32), 32)"
  },
  {
    "label": "ReadUint64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "ReadUint64(FNetBitStreamReader* Reader)"
  },
  {
    "label": "ReadBits()",
    "kind": "Method",
    "detail": "Function (uint64 Value = Reader ->)",
    "insertText": "ReadBits(32)"
  },
  {
    "label": "WriteInt64()",
    "kind": "Method",
    "detail": "Function (Value | = HighValue<<3 2 ; return Value ; } void)",
    "insertText": "WriteInt64(FNetBitStreamWriter* Writer, int64 Value)"
  },
  {
    "label": "WriteUint64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteUint64(Writer, static_cast<uint64>(Value))"
  },
  {
    "label": "ReadInt64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "ReadInt64(FNetBitStreamReader* Reader)"
  },
  {
    "label": "ReadUint64()",
    "kind": "Method",
    "detail": "Function (uint64 Value =)",
    "insertText": "ReadUint64(Reader)"
  },
  {
    "label": "WritePackedUint64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WritePackedUint64(FNetBitStreamWriter* Writer, uint64 Value)"
  },
  {
    "label": "ReadPackedUint64()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "ReadPackedUint64(FNetBitStreamReader* Reader)"
  },
  {
    "label": "WritePackedInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackedInt64(FNetBitStreamWriter* Writer, int64 Value)"
  },
  {
    "label": "ReadPackedInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "ReadPackedInt64(FNetBitStreamReader* Reader)"
  },
  {
    "label": "WritePackedUint32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackedUint32(FNetBitStreamWriter* Writer, uint32 Value)"
  },
  {
    "label": "ReadPackedUint32()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ReadPackedUint32(FNetBitStreamReader* Reader)"
  },
  {
    "label": "WritePackedInt32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackedInt32(FNetBitStreamWriter* Writer, int32 Value)"
  },
  {
    "label": "ReadPackedInt32()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReadPackedInt32(FNetBitStreamReader* Reader)"
  },
  {
    "label": "WritePackedUint16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackedUint16(FNetBitStreamWriter* Writer, uint16 Value)"
  },
  {
    "label": "ReadPackedUint16()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "ReadPackedUint16(FNetBitStreamReader* Reader)"
  },
  {
    "label": "ReadString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadString(FNetBitStreamReader* Reader, FString& OutString)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(FNetBitStreamWriter* Writer, const FString& String)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(FNetBitStreamWriter* Writer, FStringView String)"
  },
  {
    "label": "WriteVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteVector(FNetBitStreamWriter* Writer, const FVector& Vector)"
  },
  {
    "label": "ReadVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadVector(FNetBitStreamReader* Reader, FVector& Vector)"
  },
  {
    "label": "WriteVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteVector(FNetBitStreamWriter* Writer, const FVector& Vector, const FVector& DefaultValue, float Epsilon)"
  },
  {
    "label": "ReadVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadVector(FNetBitStreamReader* Reader, FVector& OutVector, const FVector& DefaultValue)"
  },
  {
    "label": "WriteRotator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteRotator(FNetBitStreamWriter* Writer, const FRotator& Vector)"
  },
  {
    "label": "ReadRotator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadRotator(FNetBitStreamReader* Reader, FRotator& Vector)"
  },
  {
    "label": "WriteRotator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteRotator(FNetBitStreamWriter* Writer, const FRotator& Rotator, const FRotator& DefaultValue, float Epsilon)"
  },
  {
    "label": "ReadRotator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadRotator(FNetBitStreamReader* Reader, FRotator& OutRotator, const FRotator& DefaultValue)"
  },
  {
    "label": "WriteSparseBitArray()",
    "kind": "Method",
    "detail": "Function (enum class ESparseBitArraySerializationHint : uint8 { None,ContainsMostlyOnes,} ; void)",
    "insertText": "WriteSparseBitArray(FNetBitStreamWriter* Writer, const uint32* Data, uint32 BitCount, ESparseBitArraySerializationHint Hint = ESparseBitArraySerializationHint::None)"
  },
  {
    "label": "ReadSparseBitArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadSparseBitArray(FNetBitStreamReader* Reader, uint32* OutData, uint32 BitCount, ESparseBitArraySerializationHint Hint = ESparseBitArraySerializationHint::None)"
  },
  {
    "label": "WriteSparseBitArrayDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteSparseBitArrayDelta(FNetBitStreamWriter* Writer, const uint32* Data, const uint32* OldData, uint32 BitCount)"
  },
  {
    "label": "ReadSparseBitArrayDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadSparseBitArrayDelta(FNetBitStreamReader* Reader, uint32* OutData, const uint32* OldData, uint32 BitCount)"
  },
  {
    "label": "WriteSentinelBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteSentinelBits(FNetBitStreamWriter* Writer, uint32 BitCount = 32U)"
  },
  {
    "label": "ReadAndVerifySentinelBits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadAndVerifySentinelBits(FNetBitStreamReader* Reader, const TCHAR* ErrorString = TEXT(\"Sentinel\"), uint32 BitCount = 32U)"
  }
]