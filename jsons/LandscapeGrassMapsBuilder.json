[
  {
    "label": "FLandscapeGrassWeightExporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeGrassWeightExporter"
  },
  {
    "label": "FScopedSlowTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSlowTask"
  },
  {
    "label": "FAsyncFetchTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncFetchTask"
  },
  {
    "label": "FLandscapeGrassMapsBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeGrassMapsBuilder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FComponentState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentState"
  },
  {
    "label": "FPendingComponent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingComponent"
  },
  {
    "label": "FAmortizedUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAmortizedUpdate"
  },
  {
    "label": "FAsyncFetchTask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Async / AsyncWork . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" LandscapeComponent . h \" # include \" LandscapeTextureStreamingManager . h \" # include \" Containers / AllocatorFixedSizeFreeList . h \" class FLandscapeGrassWeightExporter ; struct FScopedSlowTask ; class FAsyncFetchTask : public FNonAbandonableTask { public : TNonNullPtr<FLandscapeGrassWeightExporter> ActiveRender ; TMap<ULandscapeComponent*,TUniquePtr<FLandscapeComponentGrassData>,TInlineSetAllocator<1>> Results ;)",
    "insertText": "FAsyncFetchTask(FLandscapeGrassWeightExporter* ActiveRender) : ActiveRender(ActiveRender)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "FLandscapeGrassMapsBuilder()",
    "kind": "Method",
    "detail": "Function (} } ; class FLandscapeGrassMapsBuilder { public :)",
    "insertText": "FLandscapeGrassMapsBuilder(UWorld* InWorld, FLandscapeTextureStreamingManager& InTextureStreamingManager)"
  },
  {
    "label": "FLandscapeGrassMapsBuilder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLandscapeGrassMapsBuilder()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "Build()"
  },
  {
    "label": "GetOutdatedGrassMapCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOutdatedGrassMapCount(bool bInForceUpdate = true)"
  },
  {
    "label": "CountOutdatedGrassMaps()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "CountOutdatedGrassMaps(const TArray<TObjectPtr<ULandscapeComponent>>& LandscapeComponents)"
  },
  {
    "label": "RegisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponent(ULandscapeComponent* Component)"
  },
  {
    "label": "UnregisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterComponent(const ULandscapeComponent* Component)"
  },
  {
    "label": "GetTotalGrassMapsWaitingToRender()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTotalGrassMapsWaitingToRender()"
  },
  {
    "label": "BuildGrassMapsNowForComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildGrassMapsNowForComponents(TArrayView<TObjectPtr<ULandscapeComponent>> LandscapeComponents, FScopedSlowTask* SlowTask, bool bMarkDirty)"
  },
  {
    "label": "CanEverRender()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CanEverRender()"
  },
  {
    "label": "CanCurrentlyRender()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCurrentlyRender()"
  },
  {
    "label": "UpdateTrackedComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateTrackedComponents(const TArray<FVector>& Cameras, int32 LocalMaxRendering, int32 MaxExpensiveUpdateChecksToPerform, bool bCancelAndEvictAllImmediately, bool bEvictWhenBeyondEvictionRange)"
  },
  {
    "label": "StartPrioritizedGrassMapGeneration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPrioritizedGrassMapGeneration(const TArray<FVector>& Cameras, int32 MaxComponentsToStart, bool bOnlyWhenCloserThanEvictionRange)"
  },
  {
    "label": "FComponentState()",
    "kind": "Method",
    "detail": "Function (enum class EComponentStage { Pending,NotReady,TextureStreaming,Rendering,AsyncFetch,GrassMapsPopulated,} ; struct FComponentState { public : ULandscapeComponent* Component = nullptr ; EComponentStage Stage = EComponentStage::Pending ; int32 TickCount = 0 ; # if WITH_EDITOR uint32 GrassMapGenerationHash = 0 ; uint32 GrassInstanceGenerationHash = 0 ; # endif TArray<UTexture*> TexturesToStream ; TUniquePtr<FLandscapeGrassWeightExporter> ActiveRender ; TUniquePtr<FAsyncTask<FAsyncFetchTask>> AsyncFetchTask ;)",
    "insertText": "FComponentState(ULandscapeComponent* Component)"
  },
  {
    "label": "AreTexturesStreamedIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreTexturesStreamedIn()"
  },
  {
    "label": "IsBeyondEvictionRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBeyondEvictionRange(const TArray<FVector>& Cameras)"
  },
  {
    "label": "FPendingComponent()",
    "kind": "Method",
    "detail": "Function (} ; struct FPendingComponent {)",
    "insertText": "FPendingComponent(FComponentState* InComponentState) : State(InComponentState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPendingComponent& Other)"
  },
  {
    "label": "StartUpdateTick()",
    "kind": "Method",
    "detail": "Function (FComponentState* State = nullptr ; double PriorityKey = - 1 . 0 ; } ; struct FAmortizedUpdate { int32 FirstIndex = 0 ; int32 LastIndex = 0 ; void)",
    "insertText": "StartUpdateTick(int32 UpdateElementCount, int32 MaxUpdatesThisFrame)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FirstIndex = 0 ; LastIndex = UpdateElementCount ; } else { FirstIndex = LastIndex ;)",
    "insertText": "if(FirstIndex >= UpdateElementCount)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FirstIndex = 0 ; })",
    "insertText": "check(FirstIndex >= 0)"
  },
  {
    "label": "ShouldUpdate()",
    "kind": "Method",
    "detail": "Function (LastIndex = FirstIndex + MaxUpdatesThisFrame ; } } bool)",
    "insertText": "ShouldUpdate(int32 UpdateElementIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FirstIndex - - ; })",
    "insertText": "if(DeletedUpdateElementIndex < LastIndex)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (LastIndex - - ; } } } ; UWorld* World = nullptr ; int32 PendingCount = 0 ; int32 NotReadyCount = 0 ; int32 StreamingCount = 0 ; int32 RenderingCount = 0 ; int32 AsyncFetchCount = 0 ; int32 PopulatedCount = 0 ; int32 TotalComponentsWaitingCount = 0 ; bool bRenderCommandsQueuedByLastUpdate = false ; TAllocatorFixedSizeFreeList<)",
    "insertText": "sizeof(FComponentState)"
  },
  {
    "label": "CancelAndEvict()",
    "kind": "Method",
    "detail": "Function (TMap<ULandscapeComponent*,FComponentState*> ComponentStates ; TArray<FPendingComponent> PendingComponentsHeap ; int32 PendingUpdateAmortizationCounter = 0 ; FAmortizedUpdate AmortizedUpdate ; FLandscapeTextureStreamingManager& TextureStreamingManager ; bool)",
    "insertText": "CancelAndEvict(FComponentState& State, bool bCancelImmediately)"
  },
  {
    "label": "StartGrassMapGeneration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartGrassMapGeneration(FComponentState& State, bool bForceCompileShaders)"
  },
  {
    "label": "TryFastpathsFromPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryFastpathsFromPending(FComponentState& State, bool bRecalculateHashes)"
  },
  {
    "label": "KickOffRenderAndReadback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KickOffRenderAndReadback(FComponentState& State)"
  },
  {
    "label": "LaunchAsyncFetchTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchAsyncFetchTask(FComponentState& State)"
  },
  {
    "label": "PopulateGrassDataFromAsyncFetchTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateGrassDataFromAsyncFetchTask(FComponentState& State)"
  },
  {
    "label": "PopulateGrassDataFromReadback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateGrassDataFromReadback(FComponentState& State)"
  },
  {
    "label": "RemoveTextureStreamingRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTextureStreamingRequests(FComponentState& State)"
  },
  {
    "label": "StreamingToNotReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamingToNotReady(FComponentState& State)"
  },
  {
    "label": "PendingToNotReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PendingToNotReady(FComponentState& State)"
  },
  {
    "label": "PendingToPopulatedFastPathAlreadyHasData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PendingToPopulatedFastPathAlreadyHasData(FComponentState& State)"
  },
  {
    "label": "PendingToPopulatedFastPathNoGrass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PendingToPopulatedFastPathNoGrass(FComponentState& State)"
  },
  {
    "label": "PendingToStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PendingToStreaming(FComponentState& State)"
  },
  {
    "label": "RemoveFromPendingComponentHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromPendingComponentHeap(FComponentState* State)"
  },
  {
    "label": "CompleteAllAsyncTasksNow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteAllAsyncTasksNow()"
  }
]