[
  {
    "label": "LoggedRouteChangeEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoggedRouteChangeEvent"
  },
  {
    "label": "RtcEventRouteChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventRouteChange"
  },
  {
    "label": "LoggedRouteChangeEvent()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_ROUTE_CHANGE_H_ # define LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_ROUTE_CHANGE_H_ # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / rtc_event_log / rtc_event . h \" # include \" api / units / timestamp . h \" # include \" logging / rtc_event_log / events / rtc_event_field_encoding_parser . h \" namespace webrtc { struct LoggedRouteChangeEvent {)",
    "insertText": "LoggedRouteChangeEvent()"
  },
  {
    "label": "LoggedRouteChangeEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggedRouteChangeEvent(Timestamp timestamp, bool connected, uint32_t overhead) : timestamp(timestamp), connected(connected), overhead(overhead)"
  },
  {
    "label": "log_time_us()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_us()"
  },
  {
    "label": "log_time_ms()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_ms()"
  },
  {
    "label": "log_time()",
    "kind": "Method",
    "detail": "Function (} Timestamp)",
    "insertText": "log_time()"
  },
  {
    "label": "RtcEventRouteChange()",
    "kind": "Method",
    "detail": "Function (bool connected ; uint32_t overhead ; } ; class RtcEventRouteChange final : public RtcEvent { public : Type kType = Type::RouteChangeEvent ;)",
    "insertText": "RtcEventRouteChange(bool connected, uint32_t overhead)"
  },
  {
    "label": "RtcEventRouteChange()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcEventRouteChange()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "GetType()"
  },
  {
    "label": "connected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "connected()"
  },
  {
    "label": "RtcEventRouteChange()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "RtcEventRouteChange(const RtcEventRouteChange& other)"
  }
]