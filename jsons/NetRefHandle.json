[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FNetRefHandleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetRefHandleManager"
  },
  {
    "label": "FNetRefHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetRefHandle"
  },
  {
    "label": "GetInvalid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Iris / IrisConfig . h \" # include \" Containers / StringFwd . h \" # include \" Templates / TypeHash . h \" class FString ; namespace UE::Net::Private { class FNetRefHandleManager ; } namespace UE::Net { class FNetRefHandle { public : FNetRefHandle)",
    "insertText": "GetInvalid()"
  },
  {
    "label": "FNetRefHandle()",
    "kind": "Method",
    "detail": "Function (} private : enum { InvalidValue = 0 } ; enum { IdBits = 6 0 } ; enum { ReplicationSystemIdBits = 4 } ; public :)",
    "insertText": "FNetRefHandle() : Value(InvalidValue)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetId()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FNetRefHandle& Other)"
  },
  {
    "label": "FullCompare()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FullCompare(FNetRefHandle A, FNetRefHandle B)"
  },
  {
    "label": "IdMask()",
    "kind": "Method",
    "detail": "Function (Private::FNetRefHandleManager ; uint64 StaticIdMask = 1 ; uint64)",
    "insertText": "IdMask(1ULL << IdBits)"
  },
  {
    "label": "MaxReplicationSystemId()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "MaxReplicationSystemId(1ULL << ReplicationSystemIdBits)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (union { struct { uint64 Id : IdBits ; uint64 ReplicationSystemId : ReplicationSystemIdBits ; } ; uint64 Value ; } ; } ; uint32)",
    "insertText": "GetTypeHash(const FNetRefHandle& Handle)"
  },
  {
    "label": "GetObjectIdForNetTrace()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetObjectIdForNetTrace(const FNetRefHandle& Handle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Builder, const UE::Net::FNetRefHandle& NetHandle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnsiStringBuilderBase&)",
    "insertText": "operator(FAnsiStringBuilderBase& Builder, const UE::Net::FNetRefHandle& NetHandle)"
  }
]