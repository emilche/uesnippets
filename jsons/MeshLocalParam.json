[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PointSetType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointSetType"
  },
  {
    "label": "TMeshLocalParam",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshLocalParam"
  },
  {
    "label": "FGraphNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphNode"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" MatrixTypes . h \" # include \" BoxTypes . h \" # include \" FrameTypes . h \" # include \" Util / IndexPriorityQueue . h \" # include \" Util / DynamicVector . h \" # include \" DynamicMesh / MeshNormals . h \" namespace UE { namespace Geometry { enum class ELocalParamTypes : uint8 { PlanarProjection = 1,ExponentialMap = 2,ExponentialMapUpwindAvg = 3 } ; template<class PointSetType> class TMeshLocalParam { public : const PointSetType* PointSet ; ELocalParamTypes ParamMode = ELocalParamTypes::ExponentialMapUpwindAvg ; bool bEnableExternalNormals = false ; TFunction<)",
    "insertText": "FVector3d(int32)"
  },
  {
    "label": "TMeshLocalParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TMeshLocalParam(const PointSetType* PointSetIn)"
  },
  {
    "label": "MaxVertexID()",
    "kind": "Method",
    "detail": "Function (PointSet = PointSetIn ; int32 MaxID = PointSet ->)",
    "insertText": "MaxVertexID()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Queue .)",
    "insertText": "Initialize(MaxID)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MaxGraphDistance = 0 . 0 ; MaxUVDistance = 0 . 0 ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (AllocatedNodes .)",
    "insertText": "Clear()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (Queue .)",
    "insertText": "Clear(false)"
  },
  {
    "label": "ComputeToMaxDistance()",
    "kind": "Method",
    "detail": "Function (MaxGraphDistance = 0 . 0 ; MaxUVDistance = 0 . 0 ; } void)",
    "insertText": "ComputeToMaxDistance(const FFrame3d& SeedFrameIn, const FIndex3i& SeedNbrs, double ComputeToMaxDistanceIn)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SeedFrame = SeedFrameIn ; MaxGraphDistance = 0 . 0 f ; MaxUVDistance = 0 . 0 f ;)",
    "insertText": "for(int32 j = 0; j < 3; ++j)"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (int32 NbrPointID = SeedNbrs [ j ] ; FGraphNode* Node =)",
    "insertText": "GetNodeForPointSetID(NbrPointID, true)"
  },
  {
    "label": "ComputeLocalUV()",
    "kind": "Method",
    "detail": "Function (Node -> UV =)",
    "insertText": "ComputeLocalUV(SeedFrame, GetPosition(NbrPointID))"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (Node -> GraphDistance = Node -> UV .)",
    "insertText": "Length()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Node -> bFrozen = true ;)",
    "insertText": "check(Queue.Contains(NbrPointID) == false)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Queue .)",
    "insertText": "Insert(NbrPointID, float(Node->GraphDistance))"
  },
  {
    "label": "ProcessQueueUntilTermination()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ProcessQueueUntilTermination(ComputeToMaxDistanceIn)"
  },
  {
    "label": "ComputeToMaxDistance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeToMaxDistance(int32 CenterPointVtxID, const FFrame3d& CenterPointFrame, double ComputeToMaxDistanceIn)"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (SeedFrame = CenterPointFrame ; MaxGraphDistance = 0 . 0 f ; MaxUVDistance = 0 . 0 f ; FGraphNode* CenterNode =)",
    "insertText": "GetNodeForPointSetID(CenterPointVtxID, true)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (CenterNode -> UV =)",
    "insertText": "Zero()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (CenterNode -> GraphDistance = 0 ; CenterNode -> bFrozen = true ; Queue .)",
    "insertText": "Insert(CenterPointVtxID, 0)"
  },
  {
    "label": "TransformUV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TransformUV(double Scale, FVector2d Translate)"
  },
  {
    "label": "UV()",
    "kind": "Method",
    "detail": "Function (Node .)",
    "insertText": "UV(Node.UV * Scale)"
  },
  {
    "label": "GetMaxGraphDistance()",
    "kind": "Method",
    "detail": "Function (} } } double)",
    "insertText": "GetMaxGraphDistance()"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (const FGraphNode* Node =)",
    "insertText": "GetNodeForPointSetID(PointID)"
  },
  {
    "label": "GetPointsWithUV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetPointsWithUV(TArray<int32>& Points)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "Empty(AllocatedNodes.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "Add(Node.PointID)"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (} } } FVector2d)",
    "insertText": "GetUV(int32 PointID)"
  },
  {
    "label": "GetAllComputedUVs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllComputedUVs(TArray<int32>& PointIDsOut, TArray<FVector2d>& PointUVsOut, double MaxUVMagnitude = TNumericLimits<float>::Max(), double MaxGraphDist = TNumericLimits<float>::Max())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PointUVsOut .)",
    "insertText": "Add(Node.UV)"
  },
  {
    "label": "ApplyUVs()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ApplyUVs(TFunctionRef<void(int32 PointID, const FVector2d& UV)> ApplyFunc)"
  },
  {
    "label": "ApplyFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFunc(Node.PointID, Node.UV)"
  },
  {
    "label": "GetUVBounds()",
    "kind": "Method",
    "detail": "Function (} } } FAxisAlignedBox2d)",
    "insertText": "GetUVBounds()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox2d Bounds =)",
    "insertText": "Empty()"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (Bounds .)",
    "insertText": "Contain(Node.UV)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (} } return Bounds ; } protected : FVector3d)",
    "insertText": "GetPosition(const int32 PointID)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "GetNormal(const int32 PointID)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<PointSetType, FDynamicMesh3>)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ensureMsgf(false, TEXT(\"Local parameterization requires vertex normals!\"))"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (} } protected : struct FGraphNode { int32 PointID ; int32 ParentPointID ; double GraphDistance ; FVector2d UV ; bool bFrozen ; FVector3d CachedNormal ; } ; FFrame3d)",
    "insertText": "GetFrame(const FGraphNode& Node)"
  },
  {
    "label": "InvalidUV()",
    "kind": "Method",
    "detail": "Function (} TMap<int32,int32> IDToNodeIndexMap ; TDynamicVector<FGraphNode> AllocatedNodes ; FIndexPriorityQueue Queue ; FVector2d)",
    "insertText": "InvalidUV()"
  },
  {
    "label": "ProcessQueueUntilTermination()",
    "kind": "Method",
    "detail": "Function (} ; FFrame3d SeedFrame ; double MaxGraphDistance ; double MaxUVDistance ; void)",
    "insertText": "ProcessQueueUntilTermination(double MaxDistance)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (int32 NextID = Queue .)",
    "insertText": "Dequeue()"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (FGraphNode* Node =)",
    "insertText": "GetNodeForPointSetID(NextID, false)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxGraphDistance = TMathUtil<double)",
    "insertText": "Max(Node->GraphDistance, MaxGraphDistance)"
  },
  {
    "label": "UpdateUVExpmapUpwind()",
    "kind": "Method",
    "detail": "Function (break ; case ELocalParamTypes::ExponentialMapUpwindAvg :)",
    "insertText": "UpdateUVExpmapUpwind(*Node)"
  },
  {
    "label": "UpdateUVPlanar()",
    "kind": "Method",
    "detail": "Function (break ; case ELocalParamTypes::PlanarProjection :)",
    "insertText": "UpdateUVPlanar(*Node)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (break ; } } double UVDistSqr = Node -> UV .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "UpdateNeighboursSparse()",
    "kind": "Method",
    "detail": "Function (MaxUVDistance = UVDistSqr ; } Node -> bFrozen = true ;)",
    "insertText": "UpdateNeighboursSparse(Node)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (} MaxUVDistance = TMathUtil<double)",
    "insertText": "Sqrt(MaxUVDistance)"
  },
  {
    "label": "ComputeLocalUV()",
    "kind": "Method",
    "detail": "Function (} FVector2d)",
    "insertText": "ComputeLocalUV(const FFrame3d& Frame, FVector3d Position)"
  },
  {
    "label": "UV()",
    "kind": "Method",
    "detail": "Function (Position - = Frame . Origin ; FVector2d)",
    "insertText": "UV(Position.Dot(Frame.X()), Position.Dot(Frame.Y()))"
  },
  {
    "label": "ComputeLocalUV()",
    "kind": "Method",
    "detail": "Function (FVector2d LocalUV =)",
    "insertText": "ComputeLocalUV(NbrFrame, Position)"
  },
  {
    "label": "SeedToLocal()",
    "kind": "Method",
    "detail": "Function (FFrame3d)",
    "insertText": "SeedToLocal(SeedFrameIn)"
  },
  {
    "label": "AlignAxis()",
    "kind": "Method",
    "detail": "Function (SeedToLocal .)",
    "insertText": "AlignAxis(2, NbrFrame.Z())"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (FVector3d vAlignedSeedX = SeedToLocal .)",
    "insertText": "X()"
  },
  {
    "label": "SinTheta()",
    "kind": "Method",
    "detail": "Function (Temp = 0 ; } double)",
    "insertText": "SinTheta(double)TMathUtil<double>::Sqrt(Temp)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (FVector3d vCross = vLocalX .)",
    "insertText": "Cross(vAlignedSeedX)"
  },
  {
    "label": "FrameRotateMat()",
    "kind": "Method",
    "detail": "Function (SinTheta = - SinTheta ; } FMatrix2d)",
    "insertText": "FrameRotateMat(CosTheta, SinTheta, -SinTheta, CosTheta)"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (FGraphNode* ParentNode =)",
    "insertText": "GetNodeForPointSetID(Node.ParentPointID, false)"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (FFrame3d ParentFrame =)",
    "insertText": "GetFrame(*ParentNode)"
  },
  {
    "label": "PropagateUV()",
    "kind": "Method",
    "detail": "Function (Node . UV =)",
    "insertText": "PropagateUV(GetPosition(Node.PointID), ParentNode->UV, ParentFrame, SeedFrame)"
  },
  {
    "label": "UpdateUVExpmapUpwind()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateUVExpmapUpwind(FGraphNode& Node)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (FVector3d NodePos =)",
    "insertText": "GetPosition(Node.PointID)"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (FGraphNode* NbrNode =)",
    "insertText": "GetNodeForPointSetID(NbrPointID, false)"
  },
  {
    "label": "NbrFrame()",
    "kind": "Method",
    "detail": "Function (FFrame3d)",
    "insertText": "NbrFrame(GetFrame(*NbrNode))"
  },
  {
    "label": "PropagateUV()",
    "kind": "Method",
    "detail": "Function (FVector2d NbrUV =)",
    "insertText": "PropagateUV(NodePos, NbrNode->UV, NbrFrame, SeedFrame)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (AverageUV + = Weight* NbrUV ; WeightSum + = Weight ; NbrCount + + ; } })",
    "insertText": "check(NbrCount > 0)"
  },
  {
    "label": "UpdateUVPlanar()",
    "kind": "Method",
    "detail": "Function (Node . UV = AverageUV / WeightSum ; } void)",
    "insertText": "UpdateUVPlanar(FGraphNode& Node)"
  },
  {
    "label": "ComputeLocalUV()",
    "kind": "Method",
    "detail": "Function (Node . UV =)",
    "insertText": "ComputeLocalUV(SeedFrame, GetPosition(Node.PointID))"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (} FGraphNode*)",
    "insertText": "GetNodeForPointSetID(int32 PointSetID, bool bCreateIfMissing)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* AllocatedIndex = IDToNodeIndexMap .)",
    "insertText": "Find(PointSetID)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (FGraphNode NewNode { PointSetID,- 1,0,)",
    "insertText": "Zero(), false, FVector3d::UnitZ()"
  },
  {
    "label": "ExternalNormalFunc()",
    "kind": "Method",
    "detail": "Function (NewNode . CachedNormal =)",
    "insertText": "ExternalNormalFunc(PointSetID)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (} else { NewNode . CachedNormal =)",
    "insertText": "GetNormal(PointSetID)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32 NewIndex = AllocatedNodes .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllocatedNodes .)",
    "insertText": "Add(NewNode)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (IDToNodeIndexMap .)",
    "insertText": "Add(PointSetID, NewIndex)"
  },
  {
    "label": "UpdateNeighboursSparse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateNeighboursSparse(FGraphNode* Parent)"
  },
  {
    "label": "ParentPos()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "ParentPos(GetPosition(Parent->PointID))"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (continue ; } double NbrDist = ParentDist +)",
    "insertText": "Distance(ParentPos, GetPosition(NbrPointID))"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (NbrNode -> ParentPointID = Parent -> PointID ; NbrNode -> GraphDistance = NbrDist ; Queue .)",
    "insertText": "Update(NbrPointID, float(NbrNode->GraphDistance))"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} } else { NbrNode -> ParentPointID = Parent -> PointID ; NbrNode -> GraphDistance = NbrDist ; Queue .)",
    "insertText": "Insert(NbrPointID, float(NbrNode->GraphDistance))"
  }
]