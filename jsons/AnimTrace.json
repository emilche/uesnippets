[
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "FAnimTickRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTickRecord"
  },
  {
    "label": "FAnimationBaseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationBaseContext"
  },
  {
    "label": "FAnimationUpdateContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationUpdateContext"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimationInitializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationInitializeContext"
  },
  {
    "label": "FAnimationCacheBonesContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationCacheBonesContext"
  },
  {
    "label": "FPoseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseContext"
  },
  {
    "label": "FComponentSpacePoseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentSpacePoseContext"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FAnimNode_SequencePlayerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_SequencePlayerBase"
  },
  {
    "label": "FAnimNotifyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNotifyEvent"
  },
  {
    "label": "FPassedMarker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPassedMarker"
  },
  {
    "label": "FAnimSyncMarker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSyncMarker"
  },
  {
    "label": "FAnimMontageInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimMontageInstance"
  },
  {
    "label": "UPoseWatchPoseElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseWatchPoseElement"
  },
  {
    "label": "FAnimTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTrace"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScopedAnimNodeTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedAnimNodeTrace"
  },
  {
    "label": "FScopedAnimGraphTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedAnimGraphTrace"
  },
  {
    "label": "FScopedAnimNodeTraceSuspend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedAnimNodeTraceSuspend"
  },
  {
    "label": "FDebugLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugLine"
  },
  {
    "label": "ANIM_TRACE_ENABLED()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" ObjectTrace . h \" # include \" CoreMinimal . h \" # include \" Trace / Trace . h \" # define)",
    "insertText": "ANIM_TRACE_ENABLED(OBJECT_TRACE_ENABLED && !(UE_BUILD_SHIPPING || UE_BUILD_TEST)) #if ANIM_TRACE_ENABLED #include \"AnimAttributes.h\" UE_TRACE_CHANNEL_EXTERN(AnimationChannel, ENGINE_API)"
  },
  {
    "label": "FScopedAnimNodeTrace()",
    "kind": "Method",
    "detail": "Function (struct FAnimInstanceProxy ; struct FAnimTickRecord ; struct FAnimationBaseContext ; struct FAnimationUpdateContext ; class UAnimInstance ; class USkeletalMesh ; class USkeletalMeshComponent ; struct FAnimationInitializeContext ; struct FAnimationUpdateContext ; struct FAnimationBaseContext ; struct FAnimationCacheBonesContext ; struct FPoseContext ; struct FComponentSpacePoseContext ; class FName ; struct FAnimNode_SequencePlayerBase ; struct FAnimNotifyEvent ; struct FPassedMarker ; struct FAnimSyncMarker ; struct FAnimMontageInstance ; class UPoseWatchPoseElement ; FAutoConsoleVariable CVarRecordExternalMorphTargets ; struct FAnimTrace { enum class EPhase : uint8 { Initialize = 0,PreUpdate = 1,Update = 2,CacheBones = 3,Evaluate = 4,} ; enum class ENotifyEventType : uint8 { Event = 0,Begin = 1,End = 2,Tick = 3,SyncMarker = 4 } ; enum class EInertializationType : uint8 { Inertialization = 0,DeadBlending = 1 } ; struct FScopedAnimNodeTrace {)",
    "insertText": "FScopedAnimNodeTrace(const FAnimationInitializeContext& InContext)"
  },
  {
    "label": "FScopedAnimNodeTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedAnimNodeTrace(const FAnimationUpdateContext& InContext)"
  },
  {
    "label": "FScopedAnimNodeTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedAnimNodeTrace(const FAnimationCacheBonesContext& InContext)"
  },
  {
    "label": "FScopedAnimNodeTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedAnimNodeTrace(const FPoseContext& InContext)"
  },
  {
    "label": "FScopedAnimNodeTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedAnimNodeTrace(const FComponentSpacePoseContext& InContext)"
  },
  {
    "label": "FScopedAnimNodeTrace()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedAnimNodeTrace()"
  },
  {
    "label": "FScopedAnimGraphTrace()",
    "kind": "Method",
    "detail": "Function (const FAnimationBaseContext& Context ; } ; struct FScopedAnimGraphTrace {)",
    "insertText": "FScopedAnimGraphTrace(const FAnimationInitializeContext& InContext)"
  },
  {
    "label": "FScopedAnimGraphTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedAnimGraphTrace(const FAnimationUpdateContext& InContext)"
  },
  {
    "label": "FScopedAnimGraphTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedAnimGraphTrace(const FAnimationCacheBonesContext& InContext)"
  },
  {
    "label": "FScopedAnimGraphTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedAnimGraphTrace(const FPoseContext& InContext)"
  },
  {
    "label": "FScopedAnimGraphTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedAnimGraphTrace(const FComponentSpacePoseContext& InContext)"
  },
  {
    "label": "FScopedAnimGraphTrace()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedAnimGraphTrace()"
  },
  {
    "label": "FScopedAnimNodeTraceSuspend()",
    "kind": "Method",
    "detail": "Function (uint64 StartCycle ; const FAnimationBaseContext& Context ; EPhase Phase ; } ; struct FScopedAnimNodeTraceSuspend {)",
    "insertText": "FScopedAnimNodeTraceSuspend()"
  },
  {
    "label": "FDebugLine()",
    "kind": "Method",
    "detail": "Function (} ; struct FDebugLine {)",
    "insertText": "FDebugLine(const FVector& InStartLocation, const FVector& InEndLocation, const FColor& InColor, bool bInPersistentLines = false, float InLifeTime = -1.0f, float InThickness = 0.0f) : StartLocation(InStartLocation) , EndLocation(InEndLocation) , Color(InColor) , LifeTime(InLifeTime) , Thickness(InThickness) , bPersistentLines(bInPersistentLines)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} FVector StartLocation ; FVector EndLocation ; FColor Color ; float LifeTime ; float Thickness ; bool bPersistentLines ; } ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "OutputAnimTickRecord()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimTickRecord(const FAnimationBaseContext& InContext, const FAnimTickRecord& InTickRecord)"
  },
  {
    "label": "OutputSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputSkeletalMesh(const USkeletalMesh* InMesh)"
  },
  {
    "label": "OutputSkeletalMeshComponent()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputSkeletalMeshComponent(const USkeletalMeshComponent* InComponent)"
  },
  {
    "label": "OutputSkeletalMeshFrame()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputSkeletalMeshFrame(const USkeletalMeshComponent* InComponent)"
  },
  {
    "label": "OutputAnimGraph()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimGraph(const FAnimationBaseContext& InContext, uint64 InStartCycle, uint64 InEndCycle, uint8 InPhase)"
  },
  {
    "label": "OutputAnimNodeStart()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeStart(const FAnimationBaseContext& InContext, uint64 InStartCycle, int32 InPreviousNodeId, int32 InNodeId, float InBlendWeight, float InRootMotionWeight, uint8 InPhase)"
  },
  {
    "label": "OutputAnimNodeEnd()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeEnd(const FAnimationBaseContext& InContext, uint64 InEndCycle)"
  },
  {
    "label": "OutputAnimNodeAttribute()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeAttribute(const FAnimInstanceProxy& InTargetProxy, const FAnimInstanceProxy& InSourceProxy, int32 InTargetNodeId, int32 InSourceNodeId, FName InAttribute)"
  },
  {
    "label": "OutputAnimNodeBlendableAttributes()",
    "kind": "Method",
    "detail": "Function (template<ContextType> FORCENOINLINE void)",
    "insertText": "OutputAnimNodeBlendableAttributes(const ContextType& InContext, int32 InTargetNodeId, int32 InSourceNodeId)"
  },
  {
    "label": "OutputAnimNodeAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputAnimNodeAttribute(*InContext.AnimInstanceProxy, *InContext.AnimInstanceProxy, InTargetNodeId, InSourceNodeId, UE::Anim::FAttributes::Attributes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InContext.Curve.Num() > 0)"
  },
  {
    "label": "OutputAnimNodeAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputAnimNodeAttribute(*InContext.AnimInstanceProxy, *InContext.AnimInstanceProxy, InTargetNodeId, InSourceNodeId, UE::Anim::FAttributes::Curves)"
  },
  {
    "label": "OutputAnimNodeValue()",
    "kind": "Method",
    "detail": "Function (} } FORCENOINLINE void)",
    "insertText": "OutputAnimNodeValue(const FAnimationBaseContext& InContext, uint32 NodeIndex, const TCHAR* InKey, bool InValue)"
  },
  {
    "label": "OutputAnimNodeValue()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeValue(const FAnimationBaseContext& InContext, uint32 NodeIndex, const TCHAR* InKey, int32 InValue)"
  },
  {
    "label": "OutputAnimNodeValue()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeValue(const FAnimationBaseContext& InContext, uint32 NodeIndex, const TCHAR* InKey, float InValue)"
  },
  {
    "label": "OutputAnimNodeValue()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeValue(const FAnimationBaseContext& InContext, uint32 NodeIndex, const TCHAR* InKey, const FVector2D& InValue)"
  },
  {
    "label": "OutputAnimNodeValue()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeValue(const FAnimationBaseContext& InContext, uint32 NodeIndex, const TCHAR* InKey, const FVector& InValue)"
  },
  {
    "label": "OutputAnimNodeValue()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeValue(const FAnimationBaseContext& InContext, uint32 NodeIndex, const TCHAR* InKey, const FRotator& InValue)"
  },
  {
    "label": "OutputAnimNodeValue()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeValue(const FAnimationBaseContext& InContext, uint32 NodeIndex, const TCHAR* InKey, const FName& InValue)"
  },
  {
    "label": "OutputAnimNodeValue()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeValue(const FAnimationBaseContext& InContext, uint32 NodeIndex, const TCHAR* InKey, const TCHAR* InValue)"
  },
  {
    "label": "OutputAnimNodeValue()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeValue(const FAnimationBaseContext& InContext, uint32 NodeIndex, const TCHAR* InKey, const UClass* InValue)"
  },
  {
    "label": "OutputAnimNodeValue()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeValue(const FAnimationBaseContext& InContext, uint32 NodeIndex, const TCHAR* InKey, const UObject* InValue)"
  },
  {
    "label": "OutputAnimNodeValueAnimNode()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "OutputAnimNodeValueAnimNode(const FAnimationBaseContext& InContext, uint32 NodeIndex, const TCHAR* InKey, int32 InValue, const UObject* InValueAnimInstanceId)"
  },
  {
    "label": "OutputAnimSequencePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputAnimSequencePlayer(const FAnimationBaseContext& InContext, const FAnimNode_SequencePlayerBase& InNode)"
  },
  {
    "label": "OutputName()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "OutputName(const FName& InName)"
  },
  {
    "label": "OutputStateMachineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputStateMachineState(const FAnimationBaseContext& InContext, int32 InStateMachineIndex, int32 InStateIndex, float InStateWeight, float InElapsedTime)"
  },
  {
    "label": "OutputAnimNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputAnimNotify(UAnimInstance* InAnimInstance, const FAnimNotifyEvent& InNotifyEvent, ENotifyEventType InEventType)"
  },
  {
    "label": "OutputAnimSyncMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputAnimSyncMarker(UAnimInstance* InAnimInstance, const FPassedMarker& InPassedSyncMarker)"
  },
  {
    "label": "OutputMontage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputMontage(UAnimInstance* InAnimInstance, const FAnimMontageInstance& InMontageInstance)"
  },
  {
    "label": "OutputSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputSync(const FAnimInstanceProxy& InSourceProxy, int32 InSourceNodeId, FName InGroupName)"
  },
  {
    "label": "OutputPoseWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputPoseWatch(const FAnimInstanceProxy& InSourceProxy, UPoseWatchPoseElement* InPoseWatchElement, int32 InPoseWatchId, const TArray<FTransform>& BoneTransforms, const FBlendedHeapCurve& InCurves, const TArray<FBoneIndexType>& RequiredBones, const FTransform& WorldTransform, const bool bIsEnabled)"
  },
  {
    "label": "OutputInertialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputInertialization(const FAnimInstanceProxy& InSourceProxy, int32 InNodeId, float InWeight, EInertializationType InType)"
  },
  {
    "label": "TRACE_ANIM_TICK_RECORD()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "TRACE_ANIM_TICK_RECORD(Context, TickRecord) \\ FAnimTrace::OutputAnimTickRecord(Context, TickRecord)"
  },
  {
    "label": "TRACE_SKELETAL_MESH()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_SKELETAL_MESH(Mesh) \\ FAnimTrace::OutputSkeletalMesh(Mesh)"
  },
  {
    "label": "TRACE_SKELETAL_MESH_COMPONENT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_SKELETAL_MESH_COMPONENT(Component) \\ FAnimTrace::OutputSkeletalMeshComponent(Component)"
  },
  {
    "label": "TRACE_SKELETALMESH_FRAME()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_SKELETALMESH_FRAME(Component) \\ FAnimTrace::OutputSkeletalMeshFrame(Component)"
  },
  {
    "label": "TRACE_SCOPED_ANIM_GRAPH()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_SCOPED_ANIM_GRAPH(Context) \\ FAnimTrace::FScopedAnimGraphTrace _ScopedAnimGraphTrace(Context)"
  },
  {
    "label": "TRACE_SCOPED_ANIM_NODE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_SCOPED_ANIM_NODE(Context) \\ FAnimTrace::FScopedAnimNodeTrace _ScopedAnimNodeTrace(Context)"
  },
  {
    "label": "TRACE_ANIM_NODE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_ANIM_NODE_ATTRIBUTE(TargetProxy, SourceProxy, TargetNodeId, SourceNodeId, Name) \\ FAnimTrace::OutputAnimNodeAttribute(TargetProxy, SourceProxy, TargetNodeId, SourceNodeId, Name)"
  },
  {
    "label": "TRACE_ANIM_NODE_BLENDABLE_ATTRIBUTES()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_ANIM_NODE_BLENDABLE_ATTRIBUTES(Context, TargetNodeId, SourceNodeId) \\ FAnimTrace::OutputAnimNodeBlendableAttributes(Context, TargetNodeId, SourceNodeId)"
  },
  {
    "label": "TRACE_ANIM_NODE_VALUE()",
    "kind": "Method",
    "detail": "Function (# define TRACE_SCOPED_ANIM_NODE_SUSPEND \\ FAnimTrace::FScopedAnimNodeTraceSuspend _ScopedAnimNodeTraceSuspend ; # define)",
    "insertText": "TRACE_ANIM_NODE_VALUE(Context, Key, Value) \\ FAnimTrace::OutputAnimNodeValue(Context, Context.GetCurrentNodeId(), Key, Value)"
  },
  {
    "label": "TRACE_ANIM_NODE_VALUE_WITH_ID()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_ANIM_NODE_VALUE_WITH_ID(Context, NodeId, Key, Value) \\ FAnimTrace::OutputAnimNodeValue(Context, NodeId, Key, Value)"
  },
  {
    "label": "TRACE_ANIM_NODE_VALUE_WITH_ID_ANIM_NODE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_ANIM_NODE_VALUE_WITH_ID_ANIM_NODE(Context, NodeId, Key, Value, ValueAnimInstanceId) \\ FAnimTrace::OutputAnimNodeValueAnimNode(Context, NodeId, Key, Value, ValueAnimInstanceId)"
  },
  {
    "label": "TRACE_ANIM_SEQUENCE_PLAYER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_ANIM_SEQUENCE_PLAYER(Context, Node) \\ FAnimTrace::OutputAnimSequencePlayer(Context, Node)"
  },
  {
    "label": "TRACE_ANIM_STATE_MACHINE_STATE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_ANIM_STATE_MACHINE_STATE(Context, StateMachineIndex, StateIndex, StateWeight, ElapsedTime) \\ FAnimTrace::OutputStateMachineState(Context, StateMachineIndex, StateIndex, StateWeight, ElapsedTime)"
  },
  {
    "label": "TRACE_ANIM_NOTIFY()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_ANIM_NOTIFY(AnimInstance, NotifyEvent, EventType) \\ FAnimTrace::OutputAnimNotify(AnimInstance, NotifyEvent, FAnimTrace::ENotifyEventType::EventType)"
  },
  {
    "label": "TRACE_ANIM_SYNC_MARKER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_ANIM_SYNC_MARKER(AnimInstance, SyncMarker) \\ FAnimTrace::OutputAnimSyncMarker(AnimInstance, SyncMarker)"
  },
  {
    "label": "TRACE_ANIM_MONTAGE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_ANIM_MONTAGE(AnimInstance, MontageInstance) \\ FAnimTrace::OutputMontage(AnimInstance, MontageInstance)"
  },
  {
    "label": "TRACE_ANIM_NODE_SYNC()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_ANIM_NODE_SYNC(SourceProxy, SourceNodeId, GroupName) \\ FAnimTrace::OutputSync(SourceProxy, SourceNodeId, GroupName)"
  },
  {
    "label": "TRACE_ANIM_POSE_WATCH()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_ANIM_POSE_WATCH(SourceProxy, PoseWatchElement, PoseWatchId, BoneTransforms, Curves, RequiredBones, WorldTransform, bIsEnabled) \\ FAnimTrace::OutputPoseWatch(SourceProxy, PoseWatchElement, PoseWatchId, BoneTransforms, Curves, RequiredBones, WorldTransform, bIsEnabled)"
  },
  {
    "label": "TRACE_ANIM_INERTIALIZATION()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_ANIM_INERTIALIZATION(SourceProxy, NodeId, Weight, Type) \\ FAnimTrace::OutputInertialization(SourceProxy, NodeId, Weight, Type)"
  }
]