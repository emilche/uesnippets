[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "CompareFunctor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompareFunctor"
  },
  {
    "label": "CFixedArray()",
    "kind": "Method",
    "detail": "Function (template<class T,size_t uiDataSize> ST_INLINE CFixedArray<T,uiDataSize)",
    "insertText": "CFixedArray(void) : m_uiSize(0)"
  },
  {
    "label": "CFixedArray()",
    "kind": "Method",
    "detail": "Function (} template<class T,size_t uiDataSize> ST_INLINE CFixedArray<T,uiDataSize)",
    "insertText": "CFixedArray(size_t uiSize, const T& tDefault) : m_uiSize(0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(uiSize < uiDataSize)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(uiSize, tDefault)"
  },
  {
    "label": "CFixedArray()",
    "kind": "Method",
    "detail": "Function (} template<class T,size_t uiDataSize> ST_INLINE CFixedArray<T,uiDataSize)",
    "insertText": "CFixedArray(const CFixedArray<T, uiDataSize>& cCopy) : m_uiSize(0)"
  },
  {
    "label": "CFixedArray()",
    "kind": "Method",
    "detail": "Function (* this = cCopy ; } template<class T,size_t uiDataSize> ST_INLINE CFixedArray<T,uiDataSize>::~)",
    "insertText": "CFixedArray(void)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} template<class T,size_t uiDataSize> ST_INLINE void CFixedArray<T,uiDataSize)",
    "insertText": "clear(void)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (m_uiSize = 0 ; } template<class T,size_t uiDataSize> ST_INLINE bool CFixedArray<T,uiDataSize)",
    "insertText": "empty(void)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_uiSize = uiSize ; return true ; } m_uiSize = uiDataSize ; return false ; } template<class T,size_t uiDataSize> ST_INLINE bool CFixedArray<T,uiDataSize)",
    "insertText": "resize(size_t uiSize, const T& tDefault)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bReturn = false ; size_t uiEnd = uiDataSize ;)",
    "insertText": "if(reserve(uiSize))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uiEnd = uiSize ; bReturn = true ; })",
    "insertText": "for(size_t i = m_uiSize; i < uiEnd; ++i)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (m_uiSize = uiEnd ; return bReturn ; } template<class T,size_t uiDataSize> ST_INLINE bool CFixedArray<T,uiDataSize)",
    "insertText": "reserve(size_t uiSize)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} template<class T,size_t uiDataSize> ST_INLINE bool CFixedArray<T,uiDataSize)",
    "insertText": "push_back(const T& tNew)"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (m_aData [ m_uiSize + + ] = tNew ; return true ; } return false ; } template<class T,size_t uiDataSize> ST_INLINE void CFixedArray<T,uiDataSize)",
    "insertText": "pop_back(void)"
  },
  {
    "label": "erase_all()",
    "kind": "Method",
    "detail": "Function (} template<class T,size_t uiDataSize> ST_INLINE void CFixedArray<T,uiDataSize)",
    "insertText": "erase_all(const T& tErase)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (iterator iterTest = m_aData + m_uiSize ;)",
    "insertText": "while(--iterTest >= m_aData)"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} } } template<class T,size_t uiDataSize> ST_INLINE T& CFixedArray<T,uiDataSize)",
    "insertText": "front(void)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(uiIndex < m_uiSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_uiSize = cRight . m_uiSize ;)",
    "insertText": "if(cRight.m_uiSize > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T* pNew = m_aData ; const T* pOld = cRight . m_aData ;)",
    "insertText": "for(size_t i = 0; i < size_t(m_uiSize); ++pNew, ++pOld, ++i)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} return* this ; } template<class T,size_t uiDataSize> ST_INLINE T* CFixedArray<T,uiDataSize)",
    "insertText": "begin(void)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} template<class T,size_t uiDataSize> ST_INLINE CFixedArray<T,uiDataSize>::iterator CFixedArray<T,uiDataSize)",
    "insertText": "erase(iterator iterWhere)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (# ifdef SPEEDTREE_ITERATOR_DEBUGGING)",
    "insertText": "assert(iterWhere >= m_aData)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(iterWhere < m_aData + m_uiSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(iterWhere == m_aData + m_uiSize - 1)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (- - m_uiSize ; } else { char achTemp [)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(achTemp, iterWhere, sizeof(T))"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(iterWhere, iterWhere + 1, (m_uiSize - (iterWhere - m_aData) - 1) * sizeof(T))"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (- - m_uiSize ;)",
    "insertText": "memmove(m_aData + m_uiSize, achTemp, sizeof(T))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} return iterWhere ; } template<class T,size_t uiDataSize> ST_INLINE CFixedArray<T,uiDataSize>::iterator CFixedArray<T,uiDataSize)",
    "insertText": "insert(iterator iterWhere, const T& tData)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (# ifdef SPEEDTREE_ITERATOR_DEBUGGING)",
    "insertText": "assert((m_aData != NULL && iterWhere != NULL) || (m_aData == NULL && iterWhere == NULL))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(iterWhere < m_aData + m_uiSize + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif size_t uiIndex = iterWhere - m_aData ;)",
    "insertText": "if(push_back(tData))"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(achTemp, m_aData + m_uiSize - 1, sizeof(T))"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(m_aData + uiIndex + 1, m_aData + uiIndex, (m_uiSize - uiIndex - 1) * sizeof(T))"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(m_aData + uiIndex, achTemp, sizeof(T))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(m_aData + uiIndex)"
  },
  {
    "label": "lower()",
    "kind": "Method",
    "detail": "Function (} return NULL ; } template<class T,size_t uiDataSize> ST_INLINE CFixedArray<T,uiDataSize>::iterator CFixedArray<T,uiDataSize)",
    "insertText": "lower(const T& tData)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t uiWidth = m_uiSize / 2 ; iterator iterStart = m_aData ; iterator iterEnd = m_aData + m_uiSize ;)",
    "insertText": "while(uiWidth > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (iterator iterMiddle = iterStart + uiWidth ;)",
    "insertText": "if(tData < *iterMiddle)"
  },
  {
    "label": "higher()",
    "kind": "Method",
    "detail": "Function (} return iterStart ; } template<class T,size_t uiDataSize> ST_INLINE CFixedArray<T,uiDataSize>::iterator CFixedArray<T,uiDataSize)",
    "insertText": "higher(const T& tData)"
  },
  {
    "label": "lower()",
    "kind": "Method",
    "detail": "Function (iterator iterBound =)",
    "insertText": "lower(tData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(*iterBound < tData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (iterHigher = iterLower ;)",
    "insertText": "if(iterHigher == end( ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(*iterHigher < tData)"
  },
  {
    "label": "insert_sorted()",
    "kind": "Method",
    "detail": "Function (} template<class T,size_t uiDataSize> ST_INLINE CFixedArray<T,uiDataSize>::iterator CFixedArray<T,uiDataSize)",
    "insertText": "insert_sorted(const T& tData)"
  },
  {
    "label": "insert_sorted_unique()",
    "kind": "Method",
    "detail": "Function (} template<class T,size_t uiDataSize> ST_INLINE CFixedArray<T,uiDataSize>::iterator CFixedArray<T,uiDataSize)",
    "insertText": "insert_sorted_unique(const T& tData)"
  },
  {
    "label": "lower_and_higher()",
    "kind": "Method",
    "detail": "Function (iterator iterLower ; iterator iterHigher ;)",
    "insertText": "lower_and_higher(tData, iterLower, iterHigher)"
  },
  {
    "label": "ArrayQuickSort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayQuickSort(m_aData, m_aData + m_uiSize - 1, Compare, CArrayPointerMemorySwap( ), CArrayPointerMemoryCopy( ), (T*)achTemp)"
  },
  {
    "label": "ArrayQuickSort()",
    "kind": "Method",
    "detail": "Function (} else { T tTemp ;)",
    "insertText": "ArrayQuickSort(m_aData, m_aData + m_uiSize - 1, Compare, CArrayPointerSwap( ), CArrayPointerCopy( ), &tTemp)"
  },
  {
    "label": "sort()",
    "kind": "Method",
    "detail": "Function (} } template<class T,size_t uiDataSize> ST_INLINE void CFixedArray<T,uiDataSize)",
    "insertText": "sort(bool bMemorySwap)"
  },
  {
    "label": "ArrayQuickSort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayQuickSort(m_aData, m_aData + m_uiSize - 1, CDefaultArraySort( ), CArrayPointerMemorySwap( ), CArrayPointerMemoryCopy( ), (T*)achTemp)"
  },
  {
    "label": "ArrayQuickSort()",
    "kind": "Method",
    "detail": "Function (} else { T tTemp ;)",
    "insertText": "ArrayQuickSort(m_aData, m_aData + m_uiSize - 1, CDefaultArraySort( ), CArrayPointerSwap( ), CArrayPointerCopy( ), &tTemp)"
  }
]