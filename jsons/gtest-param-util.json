[
  {
    "label": "ParamType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamType"
  },
  {
    "label": "TestParamInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestParamInfo"
  },
  {
    "label": "PrintToStringParamName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PrintToStringParamName"
  },
  {
    "label": "ParamGeneratorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamGeneratorInterface"
  },
  {
    "label": "ParamGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamGenerator"
  },
  {
    "label": "ParamIteratorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamIteratorInterface"
  },
  {
    "label": "ParamIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamIterator"
  },
  {
    "label": "RangeGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RangeGenerator"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "ValuesInIteratorRangeGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValuesInIteratorRangeGenerator"
  },
  {
    "label": "TestClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestClass"
  },
  {
    "label": "ParameterizedTestFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParameterizedTestFactory"
  },
  {
    "label": "TestMetaFactoryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestMetaFactoryBase"
  },
  {
    "label": "TestSuite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSuite"
  },
  {
    "label": "TestMetaFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestMetaFactory"
  },
  {
    "label": "ParameterizedTestSuiteInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParameterizedTestSuiteInfoBase"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "ParameterizedTestSuiteInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParameterizedTestSuiteInfo"
  },
  {
    "label": "TestInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestInfo"
  },
  {
    "label": "InstantiationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InstantiationInfo"
  },
  {
    "label": "TestCase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestCase"
  },
  {
    "label": "ParameterizedTestSuiteRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParameterizedTestSuiteRegistry"
  },
  {
    "label": "TypeParameterizedTestSuiteRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypeParameterizedTestSuiteRegistry"
  },
  {
    "label": "TypeParameterizedTestSuiteInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeParameterizedTestSuiteInfo"
  },
  {
    "label": "Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Container"
  },
  {
    "label": "ValueArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueArray"
  },
  {
    "label": "CartesianProductGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CartesianProductGenerator"
  },
  {
    "label": "I",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "I"
  },
  {
    "label": "IteratorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorImpl"
  },
  {
    "label": "CartesianProductHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CartesianProductHolder"
  },
  {
    "label": "TestParamInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_ # define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_ # include<ctype . h> # include<cassert> # include<iterator> # include<memory> # include<set> # include<tuple> # include<type_traits> # include<utility> # include<vector> # include \" gtest / gtest - printers . h \" # include \" gtest / gtest - test - part . h \" # include \" gtest / internal / gtest - internal . h \" # include \" gtest / internal / gtest - port . h \" namespace testing { template<class ParamType> struct TestParamInfo {)",
    "insertText": "TestParamInfo(const ParamType& a_param, size_t an_index) : param(a_param), index(an_index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ParamType param ; size_t index ; } ; struct PrintToStringParamName { template<class ParamType> std::string)",
    "insertText": "operator()(const TestParamInfo<ParamType>& info)"
  },
  {
    "label": "ReportInvalidTestSuiteType()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { GTEST_API_ void)",
    "insertText": "ReportInvalidTestSuiteType(const char* test_suite_name, CodeLocation code_location)"
  },
  {
    "label": "ParamIteratorInterface()",
    "kind": "Method",
    "detail": "Function (template<> class ParamGeneratorInterface ; template<> class ParamGenerator ; template<T> class ParamIteratorInterface { public : ~)",
    "insertText": "ParamIteratorInterface()"
  },
  {
    "label": "BaseGenerator()",
    "kind": "Method",
    "detail": "Function (} const ParamGeneratorInterface<T>*)",
    "insertText": "BaseGenerator()"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (ParamIteratorInterface*)",
    "insertText": "Clone()"
  },
  {
    "label": "Current()",
    "kind": "Method",
    "detail": "Function (const T*)",
    "insertText": "Current()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const ParamIteratorInterface& other)"
  },
  {
    "label": "ParamIterator()",
    "kind": "Method",
    "detail": "Function (} ; template<T> class ParamIterator { public : typedef T value_type ; typedef const T& reference ; typedef ptrdiff_t difference_type ;)",
    "insertText": "ParamIterator(const ParamIterator& other) : impl_(other.impl_->Clone())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ParamIterator&)",
    "insertText": "operator(const ParamIterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "operator()"
  },
  {
    "label": "ParamIterator()",
    "kind": "Method",
    "detail": "Function (} private : class ParamGenerator<T> ;)",
    "insertText": "ParamIterator(ParamIteratorInterface<T>* impl) : impl_(impl)"
  },
  {
    "label": "ParamGeneratorInterface()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<ParamIteratorInterface<T>> impl_ ; } ; template<T> class ParamGeneratorInterface { public : typedef T ParamType ; ~)",
    "insertText": "ParamGeneratorInterface()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} ParamIteratorInterface<T>*)",
    "insertText": "Begin()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (ParamIteratorInterface<T>*)",
    "insertText": "End()"
  },
  {
    "label": "ParamGenerator()",
    "kind": "Method",
    "detail": "Function (} ; template<T> class ParamGenerator { public : typedef ParamIterator<T> iterator ;)",
    "insertText": "ParamGenerator(ParamGeneratorInterface<T>* impl) : impl_(impl)"
  },
  {
    "label": "ParamGenerator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ParamGenerator(const ParamGenerator& other) : impl_(other.impl_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ParamGenerator&)",
    "insertText": "operator(const ParamGenerator& other)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (impl_ = other . impl_ ; return* this ; } iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "RangeGenerator()",
    "kind": "Method",
    "detail": "Function (} private : std::shared_ptr<const ParamGeneratorInterface<T>> impl_ ; } ; template<T,IncrementT> class RangeGenerator : public ParamGeneratorInterface<T> { public :)",
    "insertText": "RangeGenerator(T begin, T end, IncrementT step) : begin_(begin), end_(end), step_(step), end_index_(CalculateEndIndex(begin, end, step))"
  },
  {
    "label": "RangeGenerator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RangeGenerator()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} private : class Iterator : public ParamIteratorInterface<T> { public :)",
    "insertText": "Iterator(const ParamGeneratorInterface<T>* base, T value, int index, IncrementT step) : base_(base), value_(value), index_(index), step_(step)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Iterator()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (value_ = static_cast<)",
    "insertText": "T(value_ + step_)"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_CHECK_(BaseGenerator() == other.BaseGenerator())"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (index_)",
    "insertText": "Iterator(&other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const Iterator& other)"
  },
  {
    "label": "CalculateEndIndex()",
    "kind": "Method",
    "detail": "Function (const ParamGeneratorInterface<T>* const base_ ; T value_ ; int index_ ; const IncrementT step_ ; } ; int)",
    "insertText": "CalculateEndIndex(const T& begin, const T& end, const IncrementT& step)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int end_index = 0 ;)",
    "insertText": "for(T i = begin; i < end; i = static_cast<T>(i + step))"
  },
  {
    "label": "ValuesInIteratorRangeGenerator()",
    "kind": "Method",
    "detail": "Function (const T begin_ ; const T end_ ; const IncrementT step_ ; const int end_index_ ; } ; template<T> class ValuesInIteratorRangeGenerator : public ParamGeneratorInterface<T> { public : template<ForwardIterator>)",
    "insertText": "ValuesInIteratorRangeGenerator(ForwardIterator begin, ForwardIterator end) : container_(begin, end)"
  },
  {
    "label": "ValuesInIteratorRangeGenerator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ValuesInIteratorRangeGenerator()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} private : typedef::std::vector<T> ContainerType ; class Iterator : public ParamIteratorInterface<T> { public :)",
    "insertText": "Iterator(const ParamGeneratorInterface<T>* base, typename ContainerType::const_iterator iterator) : base_(base), iterator_(iterator)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (+ + iterator_ ; value_ .)",
    "insertText": "reset()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const ParamIteratorInterface<T>& other)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "Iterator(const Iterator& other) : ParamIteratorInterface<T>(), base_(other.base_), iterator_(other.iterator_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const ParamGeneratorInterface<T>* const base_ ; ContainerType::const_iterator iterator_ ; std::unique_ptr<const T> value_ ; } ; void)",
    "insertText": "operator(const ValuesInIteratorRangeGenerator& other)"
  },
  {
    "label": "DefaultParamName()",
    "kind": "Method",
    "detail": "Function (const ContainerType container_ ; } ; template<class ParamType> std::string)",
    "insertText": "DefaultParamName(const TestParamInfo<ParamType>& info)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (Message name_stream ; name_stream<<info . index ; return name_stream .)",
    "insertText": "GetString()"
  },
  {
    "label": "TestNotEmpty()",
    "kind": "Method",
    "detail": "Function (} template<T = int> void)",
    "insertText": "TestNotEmpty()"
  },
  {
    "label": "TestNotEmpty()",
    "kind": "Method",
    "detail": "Function (} template<T = int> void)",
    "insertText": "TestNotEmpty(const T&)"
  },
  {
    "label": "ParameterizedTestFactory()",
    "kind": "Method",
    "detail": "Function (} template<class TestClass> class ParameterizedTestFactory : public TestFactoryBase { public : typedef TestClass::ParamType ParamType ;)",
    "insertText": "ParameterizedTestFactory(ParamType parameter) : parameter_(parameter)"
  },
  {
    "label": "CreateTest()",
    "kind": "Method",
    "detail": "Function (} Test*)",
    "insertText": "CreateTest()"
  },
  {
    "label": "SetParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParam(&parameter_)"
  },
  {
    "label": "ParameterizedTestFactory()",
    "kind": "Method",
    "detail": "Function (} private : const ParamType parameter_ ;)",
    "insertText": "ParameterizedTestFactory(const ParameterizedTestFactory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ParameterizedTestFactory&)",
    "insertText": "operator(const ParameterizedTestFactory&)"
  },
  {
    "label": "TestMetaFactoryBase()",
    "kind": "Method",
    "detail": "Function (} ; template<class ParamType> class TestMetaFactoryBase { public : ~)",
    "insertText": "TestMetaFactoryBase()"
  },
  {
    "label": "CreateTestFactory()",
    "kind": "Method",
    "detail": "Function (} TestFactoryBase*)",
    "insertText": "CreateTestFactory(ParamType parameter)"
  },
  {
    "label": "TestMetaFactory()",
    "kind": "Method",
    "detail": "Function (} ; template<class TestSuite> class TestMetaFactory : public TestMetaFactoryBase<TestSuite::ParamType> { public : using ParamType = TestSuite::ParamType ;)",
    "insertText": "TestMetaFactory()"
  },
  {
    "label": "TestMetaFactory()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "TestMetaFactory(const TestMetaFactory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestMetaFactory&)",
    "insertText": "operator(const TestMetaFactory&)"
  },
  {
    "label": "ParameterizedTestSuiteInfoBase()",
    "kind": "Method",
    "detail": "Function (} ; class ParameterizedTestSuiteInfoBase { public : ~)",
    "insertText": "ParameterizedTestSuiteInfoBase()"
  },
  {
    "label": "GetTestSuiteName()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "GetTestSuiteName()"
  },
  {
    "label": "GetTestSuiteTypeId()",
    "kind": "Method",
    "detail": "Function (TypeId)",
    "insertText": "GetTestSuiteTypeId()"
  },
  {
    "label": "RegisterTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTests()"
  },
  {
    "label": "ParameterizedTestSuiteInfoBase()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "ParameterizedTestSuiteInfoBase(const ParameterizedTestSuiteInfoBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ParameterizedTestSuiteInfoBase&)",
    "insertText": "operator(const ParameterizedTestSuiteInfoBase&)"
  },
  {
    "label": "MarkAsIgnored()",
    "kind": "Method",
    "detail": "Function (} ; struct GTEST_API_ MarkAsIgnored {)",
    "insertText": "MarkAsIgnored(const char* test_suite)"
  },
  {
    "label": "InsertSyntheticTestCase()",
    "kind": "Method",
    "detail": "Function (} ; GTEST_API_ void)",
    "insertText": "InsertSyntheticTestCase(const std::string& name, CodeLocation location, bool has_test_p)"
  },
  {
    "label": "ParamType()",
    "kind": "Method",
    "detail": "Function (template<class TestSuite> class ParameterizedTestSuiteInfo : public ParameterizedTestSuiteInfoBase { public : using ParamType = TestSuite::ParamType ; typedef ParamGenerator<)",
    "insertText": "ParamType(GeneratorCreationFunc)()"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (using ParamNameGeneratorFunc =)",
    "insertText": "string(const TestParamInfo<ParamType>&)"
  },
  {
    "label": "ParameterizedTestSuiteInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParameterizedTestSuiteInfo(const char* name, CodeLocation code_location) : test_suite_name_(name), code_location_(code_location)"
  },
  {
    "label": "AddTestPattern()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTestPattern(const char* test_suite_name, const char* test_base_name, TestMetaFactoryBase<ParamType>* meta_factory, CodeLocation code_location)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tests_ .)",
    "insertText": "push_back(std::shared_ptr<TestInfo>(new TestInfo( test_suite_name, test_base_name, meta_factory, code_location)))"
  },
  {
    "label": "AddTestSuiteInstantiation()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "AddTestSuiteInstantiation(const std::string& instantiation_name, GeneratorCreationFunc* func, ParamNameGeneratorFunc* name_func, const char* file, int line)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (instantiations_ .)",
    "insertText": "push_back(InstantiationInfo(instantiation_name, func, name_func, file, line))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool generated_instantiations = false ;)",
    "insertText": "for(typename TestInfoContainer::iterator test_it = tests_.begin(); test_it != tests_.end(); ++test_it)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<TestInfo> test_info =* test_it ;)",
    "insertText": "for(typename InstantiationContainer::iterator gen_it = instantiations_.begin(); gen_it != instantiations_.end(); ++gen_it)"
  },
  {
    "label": "generator()",
    "kind": "Method",
    "detail": "Function (const std::string& instantiation_name = gen_it -> name ; ParamGenerator<ParamType>)",
    "insertText": "generator((*gen_it->generator)())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ParamNameGeneratorFunc* name_func = gen_it -> name_func ; const char* file = gen_it -> file ; int line = gen_it -> line ; std::string test_suite_name ;)",
    "insertText": "if(!instantiation_name.empty())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (test_suite_name + = test_info -> test_suite_base_name ; size_t i = 0 ; std::set<std::string> test_param_names ;)",
    "insertText": "for(typename ParamGenerator<ParamType>::iterator param_it = generator.begin(); param_it != generator.end(); ++param_it, ++i)"
  },
  {
    "label": "name_func()",
    "kind": "Method",
    "detail": "Function (generated_instantiations = true ; Message test_name_stream ; std::string param_name =)",
    "insertText": "name_func(TestParamInfo<ParamType>(*param_it, i))"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_CHECK_(IsValidParamName(param_name))"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_CHECK_(test_param_names.count(param_name) == 0)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (test_param_names .)",
    "insertText": "insert(param_name)"
  },
  {
    "label": "MakeAndRegisterTestInfo()",
    "kind": "Method",
    "detail": "Function (test_name_stream<<test_info -> test_base_name<<\" / \" ; } test_name_stream<<param_name ;)",
    "insertText": "MakeAndRegisterTestInfo(test_suite_name.c_str(), test_name_stream.GetString().c_str(), nullptr, PrintToString(*param_it).c_str(), test_info->code_location, GetTestSuiteTypeId(), SuiteApiResolver<TestSuite>::GetSetUpCaseOrSuite(file, line), SuiteApiResolver<TestSuite>::GetTearDownCaseOrSuite(file, line), test_info->test_meta_factory->CreateTestFactory(*param_it))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(!generated_instantiations)"
  },
  {
    "label": "InsertSyntheticTestCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertSyntheticTestCase(GetTestSuiteName(), code_location_, !tests_.empty())"
  },
  {
    "label": "TestInfo()",
    "kind": "Method",
    "detail": "Function (} } private : struct TestInfo {)",
    "insertText": "TestInfo(const char* a_test_suite_base_name, const char* a_test_base_name, TestMetaFactoryBase<ParamType>* a_test_meta_factory, CodeLocation a_code_location) : test_suite_base_name(a_test_suite_base_name), test_base_name(a_test_base_name), test_meta_factory(a_test_meta_factory), code_location(a_code_location)"
  },
  {
    "label": "InstantiationInfo()",
    "kind": "Method",
    "detail": "Function (} const std::string test_suite_base_name ; const std::string test_base_name ; const std::unique_ptr<TestMetaFactoryBase<ParamType>> test_meta_factory ; const CodeLocation code_location ; } ; using TestInfoContainer =::std::vector<std::shared_ptr<TestInfo>> ; struct InstantiationInfo {)",
    "insertText": "InstantiationInfo(const std::string& name_in, GeneratorCreationFunc* generator_in, ParamNameGeneratorFunc* name_func_in, const char* file_in, int line_in) : name(name_in), generator(generator_in), name_func(name_func_in), file(file_in), line(line_in)"
  },
  {
    "label": "IsValidParamName()",
    "kind": "Method",
    "detail": "Function (} std::string name ; GeneratorCreationFunc* generator ; ParamNameGeneratorFunc* name_func ; const char* file ; int line ; } ; typedef::std::vector<InstantiationInfo> InstantiationContainer ; bool)",
    "insertText": "IsValidParamName(const std::string& name)"
  },
  {
    "label": "ParameterizedTestSuiteInfo()",
    "kind": "Method",
    "detail": "Function (} return true ; } const std::string test_suite_name_ ; CodeLocation code_location_ ; TestInfoContainer tests_ ; InstantiationContainer instantiations_ ;)",
    "insertText": "ParameterizedTestSuiteInfo(const ParameterizedTestSuiteInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ParameterizedTestSuiteInfo&)",
    "insertText": "operator(const ParameterizedTestSuiteInfo&)"
  },
  {
    "label": "ParameterizedTestSuiteRegistry()",
    "kind": "Method",
    "detail": "Function (} ; # ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ template<class TestCase> using ParameterizedTestCaseInfo = ParameterizedTestSuiteInfo<TestCase> ; # endif class ParameterizedTestSuiteRegistry { public :)",
    "insertText": "ParameterizedTestSuiteRegistry()"
  },
  {
    "label": "GetTestSuitePatternHolder()",
    "kind": "Method",
    "detail": "Function (delete test_suite_info ; } } template<class TestSuite> ParameterizedTestSuiteInfo<TestSuite>*)",
    "insertText": "GetTestSuitePatternHolder(const char* test_suite_name, CodeLocation code_location)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ParameterizedTestSuiteInfo<TestSuite>* typed_test_info = nullptr ;)",
    "insertText": "for(auto& test_suite_info : test_suite_infos_)"
  },
  {
    "label": "ReportInvalidTestSuiteType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidTestSuiteType(test_suite_name, code_location)"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abort()"
  },
  {
    "label": "TestSuite()",
    "kind": "Method",
    "detail": "Function (} else { typed_test_info = CheckedDowncastToActualType<ParameterizedTestSuiteInfo<)",
    "insertText": "TestSuite(test_suite_info)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} break ; } })",
    "insertText": "if(typed_test_info == nullptr)"
  },
  {
    "label": "TestSuite()",
    "kind": "Method",
    "detail": "Function (typed_test_info = new ParameterizedTestSuiteInfo<)",
    "insertText": "TestSuite(test_suite_name, code_location)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (test_suite_infos_ .)",
    "insertText": "push_back(typed_test_info)"
  },
  {
    "label": "GetTestCasePatternHolder()",
    "kind": "Method",
    "detail": "Function (} } # ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ template<class TestCase> ParameterizedTestCaseInfo<TestCase>*)",
    "insertText": "GetTestCasePatternHolder(const char* test_case_name, CodeLocation code_location)"
  },
  {
    "label": "ParameterizedTestSuiteRegistry()",
    "kind": "Method",
    "detail": "Function (} # endif private : using TestSuiteInfoContainer =::std::vector<ParameterizedTestSuiteInfoBase*> ; TestSuiteInfoContainer test_suite_infos_ ;)",
    "insertText": "ParameterizedTestSuiteRegistry(const ParameterizedTestSuiteRegistry&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ParameterizedTestSuiteRegistry&)",
    "insertText": "operator(const ParameterizedTestSuiteRegistry&)"
  },
  {
    "label": "RegisterTestSuite()",
    "kind": "Method",
    "detail": "Function (} ; class TypeParameterizedTestSuiteRegistry { public : void)",
    "insertText": "RegisterTestSuite(const char* test_suite_name, CodeLocation code_location)"
  },
  {
    "label": "RegisterInstantiation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterInstantiation(const char* test_suite_name)"
  },
  {
    "label": "CheckForInstantiations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForInstantiations()"
  },
  {
    "label": "TypeParameterizedTestSuiteInfo()",
    "kind": "Method",
    "detail": "Function (private : struct TypeParameterizedTestSuiteInfo {)",
    "insertText": "TypeParameterizedTestSuiteInfo(CodeLocation c) : code_location(c), instantiated(false)"
  },
  {
    "label": "ValuesIn()",
    "kind": "Method",
    "detail": "Function (} CodeLocation code_location ; bool instantiated ; } ; std::map<std::string,TypeParameterizedTestSuiteInfo> suites_ ; } ; } template<class Container> internal::ParamGenerator<Container::value_type>)",
    "insertText": "ValuesIn(const Container& container)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (namespace internal { # ifdef _MSC_VER # pragma)",
    "insertText": "warning(push) #pragma warning(disable : 4100)"
  },
  {
    "label": "ValueArray()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ValueArray(Ts... v) : v_(FlatTupleConstructTag{}, std::move(v)...)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} template<T> operator ParamGenerator<)",
    "insertText": "T()"
  },
  {
    "label": "MakeVector()",
    "kind": "Method",
    "detail": "Function (} private : template<T,size_t . . . I> std::vector<T>)",
    "insertText": "MakeVector(IndexSequence<I...>)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (} FlatTuple<Ts . . .> v_ ; } ; # ifdef _MSC_VER # pragma)",
    "insertText": "warning(pop)"
  },
  {
    "label": "CartesianProductGenerator()",
    "kind": "Method",
    "detail": "Function (public : typedef::std::tuple<T . . .> ParamType ;)",
    "insertText": "CartesianProductGenerator(const std::tuple<ParamGenerator<T>...>& g) : generators_(g)"
  },
  {
    "label": "CartesianProductGenerator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CartesianProductGenerator()"
  },
  {
    "label": "IteratorImpl()",
    "kind": "Method",
    "detail": "Function (} private : template<class I> class IteratorImpl ; template<size_t . . . I> class IteratorImpl<IndexSequence<I . . .>> : public ParamIteratorInterface<ParamType> { public :)",
    "insertText": "IteratorImpl(const ParamGeneratorInterface<ParamType>* base, const std::tuple<ParamGenerator<T>...>& generators, bool is_end) : base_(base), begin_(std::get<I>(generators).begin()...), end_(std::get<I>(generators).end()...), current_(is_end ? end_ : begin_)"
  },
  {
    "label": "ComputeCurrentValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCurrentValue()"
  },
  {
    "label": "IteratorImpl()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IteratorImpl()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!AtEnd())"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (+ + std::get<)",
    "insertText": "sizeof(T) - 1>(current_)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (AdvanceIfEnd<)",
    "insertText": "sizeof(T) - 1>()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const ParamIteratorInterface<ParamType>& other)"
  },
  {
    "label": "IteratorImpl()",
    "kind": "Method",
    "detail": "Function (const IteratorImpl* typed_other = CheckedDowncastToActualType<const)",
    "insertText": "IteratorImpl(&other)"
  },
  {
    "label": "dummy()",
    "kind": "Method",
    "detail": "Function (bool same = true ; bool)",
    "insertText": "dummy(same = same && std::get<I>(current_) == std::get<I>(typed_other->current_))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool last = ThisI = = 0 ;)",
    "insertText": "if(last)"
  },
  {
    "label": "ThisI()",
    "kind": "Method",
    "detail": "Function (std::get<)",
    "insertText": "ThisI(current_) = std::get<ThisI>(begin_)"
  },
  {
    "label": "NextI()",
    "kind": "Method",
    "detail": "Function (+ + std::get<)",
    "insertText": "NextI(current_)"
  },
  {
    "label": "NextI()",
    "kind": "Method",
    "detail": "Function (AdvanceIfEnd<)",
    "insertText": "NextI()"
  },
  {
    "label": "AtEnd()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AtEnd()"
  },
  {
    "label": "dummy()",
    "kind": "Method",
    "detail": "Function (bool at_end = false ; bool)",
    "insertText": "dummy(at_end = at_end || std::get<I>(current_) == std::get<I>(end_))"
  },
  {
    "label": "CartesianProductHolder()",
    "kind": "Method",
    "detail": "Function (std::tuple<ParamGenerator<T> . . .> generators_ ; } ; template<class . . . Gen> class CartesianProductHolder { public :)",
    "insertText": "CartesianProductHolder(const Gen&... g) : generators_(g...)"
  }
]