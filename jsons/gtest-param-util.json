[
  {
    "label": "ParamType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamType"
  },
  {
    "label": "TestParamInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestParamInfo"
  },
  {
    "label": "PrintToStringParamName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PrintToStringParamName"
  },
  {
    "label": "ParamType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamType"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "ParamGeneratorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamGeneratorInterface"
  },
  {
    "label": "ParamGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamGenerator"
  },
  {
    "label": "ParamIteratorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamIteratorInterface"
  },
  {
    "label": "ParamIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamIterator"
  },
  {
    "label": "ParamGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamGenerator"
  },
  {
    "label": "ParamGeneratorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamGeneratorInterface"
  },
  {
    "label": "implements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implements"
  },
  {
    "label": "ParamGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamGenerator"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "RangeGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RangeGenerator"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "RangeGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RangeGenerator"
  },
  {
    "label": "RangeGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RangeGenerator"
  },
  {
    "label": "ValuesInIteratorRangeGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValuesInIteratorRangeGenerator"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "ValuesInIteratorRangeGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValuesInIteratorRangeGenerator"
  },
  {
    "label": "ValuesInIteratorRangeGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValuesInIteratorRangeGenerator"
  },
  {
    "label": "ParamType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamType"
  },
  {
    "label": "TestClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestClass"
  },
  {
    "label": "ParameterizedTestFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParameterizedTestFactory"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "ParamType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParamType"
  },
  {
    "label": "TestMetaFactoryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestMetaFactoryBase"
  },
  {
    "label": "TestSuite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSuite"
  },
  {
    "label": "TestMetaFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestMetaFactory"
  },
  {
    "label": "holds",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "holds"
  },
  {
    "label": "ParameterizedTestSuiteInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParameterizedTestSuiteInfoBase"
  },
  {
    "label": "invokes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "invokes"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "TestSuite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSuite"
  },
  {
    "label": "ParameterizedTestSuiteInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParameterizedTestSuiteInfo"
  },
  {
    "label": "invokes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "invokes"
  },
  {
    "label": "TestInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestInfo"
  },
  {
    "label": "InstantiationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InstantiationInfo"
  },
  {
    "label": "ParameterizedTestSuiteInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParameterizedTestSuiteInfo"
  },
  {
    "label": "TestCase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestCase"
  },
  {
    "label": "ParameterizedTestSuiteRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParameterizedTestSuiteRegistry"
  },
  {
    "label": "TestSuite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSuite"
  },
  {
    "label": "TestCase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestCase"
  },
  {
    "label": "TypeParameterizedTestSuiteRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypeParameterizedTestSuiteRegistry"
  },
  {
    "label": "TypeParameterizedTestSuiteInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeParameterizedTestSuiteInfo"
  },
  {
    "label": "Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Container"
  },
  {
    "label": "ValueArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueArray"
  },
  {
    "label": "CartesianProductGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CartesianProductGenerator"
  },
  {
    "label": "I",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "I"
  },
  {
    "label": "IteratorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorImpl"
  },
  {
    "label": "IteratorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorImpl"
  },
  {
    "label": "CartesianProductHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CartesianProductHolder"
  },
  {
    "label": "PrintToString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "PrintToString(info.param)"
  },
  {
    "label": "ReportInvalidTestSuiteType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidTestSuiteType(const char* test_suite_name,\n                                           CodeLocation code_location)"
  },
  {
    "label": "ParamIterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ParamIterator(clone)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "Iterator(this, begin_, 0, step_)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "Iterator(this, end_, end_index_, step_)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "Iterator(*this)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "Iterator(*this)"
  },
  {
    "label": "TestClass()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "TestClass()"
  },
  {
    "label": "MarkAsIgnored()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "MarkAsIgnored(const char* test_suite)"
  },
  {
    "label": "InsertSyntheticTestCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertSyntheticTestCase(const std::string& name,\n                                        CodeLocation location, bool has_test_p)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (characters)",
    "insertText": "for(std::string::size_type index = 0; index < name.size()"
  },
  {
    "label": "RegisterTestSuite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTestSuite(const char* test_suite_name,\n                         CodeLocation code_location)"
  },
  {
    "label": "RegisterInstantiation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterInstantiation(const char* test_suite_name)"
  },
  {
    "label": "CheckForInstantiations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForInstantiations()"
  },
  {
    "label": "ValuesIn()",
    "kind": "Method",
    "detail": "Function (Container::value_type>)",
    "insertText": "ValuesIn(\n    const Container& container)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "Iterator(this, generators_, false)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "Iterator(this, generators_, true)"
  },
  {
    "label": "IteratorImpl()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "IteratorImpl(*this)"
  }
]