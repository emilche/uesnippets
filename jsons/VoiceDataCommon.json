[
  {
    "label": "FVoicePacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoicePacket"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FVoicePacket()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Online / CoreOnline . h \" # include \" Net / VoiceConfig . h \" # ifndef MAX_VOICE_DATA_SIZE # define MAX_VOICE_DATA_SIZE 8* 1 0 2 4 # endif # ifndef MAX_SPLITSCREEN_TALKERS # if PLATFORM_WINDOWS | | PLATFORM_UNIX | | PLATFORM_MAC # define MAX_SPLITSCREEN_TALKERS 1 # else # define MAX_SPLITSCREEN_TALKERS 4 # endif # endif # ifndef MAX_REMOTE_TALKERS # define MAX_REMOTE_TALKERS 1 6 # endif class FVoicePacket { public :)",
    "insertText": "FVoicePacket()"
  },
  {
    "label": "FVoicePacket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVoicePacket(const FVoicePacket& Other)"
  },
  {
    "label": "GetTotalPacketSize()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "GetTotalPacketSize()"
  },
  {
    "label": "GetBufferSize()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetBufferSize()"
  },
  {
    "label": "GetSender()",
    "kind": "Method",
    "detail": "Function (FUniqueNetIdPtr)",
    "insertText": "GetSender()"
  },
  {
    "label": "IsReliable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReliable()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(class FArchive& Ar)"
  },
  {
    "label": "GetSampleCounter()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetSampleCounter()"
  }
]