[
  {
    "label": "FPlatformOpenGLContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformOpenGLContext"
  },
  {
    "label": "FPlatformOpenGLDevice",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformOpenGLDevice"
  },
  {
    "label": "FOpenGLShaderDeviceCapabilities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLShaderDeviceCapabilities"
  },
  {
    "label": "FOpenGLTextureFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLTextureFormat"
  },
  {
    "label": "FOpenGLBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EQueryMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EQueryMode"
  },
  {
    "label": "EFenceResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFenceResult"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" Logging / LogMacros . h \" # include \" OpenGLFunctions . h \" # include \" OpenGLPlatform . h \" # include \" PixelFormat . h \" # include \" RHIFeatureLevel . h \" # include \" RHIShaderPlatform . h \" struct FPlatformOpenGLContext ; struct FPlatformOpenGLDevice ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogOpenGL, Log, VeryVerbose)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (# define UGL_REQUIRED_VOID {)",
    "insertText": "UE_LOG(LogOpenGL,Fatal,TEXT(\"%s is not supported.\"), ANSI_TO_TCHAR(__FUNCTION__))"
  },
  {
    "label": "UGL_REQUIRED()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UGL_REQUIRED(ReturnValue)"
  },
  {
    "label": "UGL_OPTIONAL()",
    "kind": "Method",
    "detail": "Function (} # define UGL_OPTIONAL_VOID { } # define)",
    "insertText": "UGL_OPTIONAL(ReturnValue)"
  },
  {
    "label": "ProcessQueryGLInt()",
    "kind": "Method",
    "detail": "Function (} # define UGL_SUPPORTS_PIXELBUFFERS 1 # define UGL_SUPPORTS_UNIFORMBUFFERS 1 \" C \" struct FOpenGLShaderDeviceCapabilities ; typedef TArray<ANSICHAR> FAnsiCharArray ; \" C \" struct FOpenGLTextureFormat ; class FOpenGLBase { public : enum class EResourceLockMode : uint8 { RLM_ReadWrite,RLM_ReadOnly,RLM_WriteOnly,RLM_WriteOnlyUnsynchronized,RLM_WriteOnlyPersistent,RLM_ReadOnlyPersistent,} ; enum EQueryMode { QM_Result,QM_ResultAvailable,} ; enum EFenceResult { FR_AlreadySignaled,FR_TimeoutExpired,FR_ConditionSatisfied,FR_WaitFailed,} ; void)",
    "insertText": "ProcessQueryGLInt()"
  },
  {
    "label": "ProcessExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessExtensions(const FString& ExtensionsString)"
  },
  {
    "label": "SetupDefaultGLContextState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupDefaultGLContextState(const FString& ExtensionsString)"
  },
  {
    "label": "SupportsUniformBuffers()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "SupportsUniformBuffers()"
  },
  {
    "label": "SupportsClipControl()",
    "kind": "Method",
    "detail": "Function (bSupportsClipControl = true ; } bool)",
    "insertText": "SupportsClipControl()"
  },
  {
    "label": "GetFirstGeometryTextureUnit()",
    "kind": "Method",
    "detail": "Function (} GLint)",
    "insertText": "GetFirstGeometryTextureUnit()"
  },
  {
    "label": "GetFirstComputeTextureUnit()",
    "kind": "Method",
    "detail": "Function (} GLint)",
    "insertText": "GetFirstComputeTextureUnit()"
  },
  {
    "label": "GetReadHalfFloatPixelsEnum()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetReadHalfFloatPixelsEnum() UGL_REQUIRED(0) static FORCEINLINE GLint GetMaxMSAASamplesTileMem()"
  },
  {
    "label": "glFramebufferTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFramebufferTexture2D(Target, Attachment, TexTarget, Texture, Level)"
  },
  {
    "label": "FramebufferTexture2DMultisample()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramebufferTexture2DMultisample(GLenum Target, GLenum Attachment, GLenum TexTarget, GLuint Texture, GLint Level, GLint NumSamples) UGL_REQUIRED_VOID static FORCEINLINE void FramebufferTexture3D(GLenum Target, GLenum Attachment, GLenum TexTarget, GLuint Texture, GLint Level, GLint ZOffset) UGL_REQUIRED_VOID static FORCEINLINE void FramebufferTextureLayer(GLenum Target, GLenum Attachment, GLuint Texture, GLint Level, GLint Layer) UGL_REQUIRED_VOID static FORCEINLINE void FramebufferRenderbuffer(GLenum Target, GLenum Attachment, GLenum RenderBufferTarget, GLuint RenderBuffer)"
  },
  {
    "label": "glFramebufferRenderbuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFramebufferRenderbuffer(Target, Attachment, RenderBufferTarget, RenderBuffer)"
  },
  {
    "label": "FramebufferTextureMultiviewOVR()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramebufferTextureMultiviewOVR(GLenum Target, GLenum Attachment, GLuint Texture, GLint Level, GLint BaseViewIndex, GLsizei NumViews) UGL_REQUIRED_VOID static FORCEINLINE void FramebufferTextureMultisampleMultiviewOVR(GLenum Target, GLenum Attachment, GLuint Texture, GLint Level, GLsizei NumSamples, GLint BaseViewIndex, GLsizei NumViews) UGL_REQUIRED_VOID static FORCEINLINE void BlitFramebuffer(GLint SrcX0, GLint SrcY0, GLint SrcX1, GLint SrcY1, GLint DstX0, GLint DstY0, GLint DstX1, GLint DstY1, GLbitfield Mask, GLenum Filter) UGL_REQUIRED_VOID static FORCEINLINE void DrawBuffers(GLsizei NumBuffers, const GLenum *Buffers) UGL_REQUIRED_VOID static FORCEINLINE void DepthRange(GLdouble Near, GLdouble Far) UGL_REQUIRED_VOID static FORCEINLINE void EnableIndexed(GLenum Parameter, GLuint Index) UGL_REQUIRED_VOID static FORCEINLINE void DisableIndexed(GLenum Parameter, GLuint Index) UGL_REQUIRED_VOID static FORCEINLINE void ColorMaskIndexed(GLuint Index, GLboolean Red, GLboolean Green, GLboolean Blue, GLboolean Alpha) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttribPointer(GLuint Index, GLint Size, GLenum Type, GLboolean Normalized, GLsizei Stride, const GLvoid* Pointer) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttribIPointer(GLuint Index, GLint Size, GLenum Type, GLsizei Stride, const GLvoid* Pointer) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttrib4Nsv(GLuint AttributeIndex, const GLshort* Values) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttrib4sv(GLuint AttributeIndex, const GLshort* Values) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttribI4sv(GLuint AttributeIndex, const GLshort* Values) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttribI4usv(GLuint AttributeIndex, const GLushort* Values) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttrib4Nubv(GLuint AttributeIndex, const GLubyte* Values) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttrib4ubv(GLuint AttributeIndex, const GLubyte* Values) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttribI4ubv(GLuint AttributeIndex, const GLubyte* Values) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttrib4Nbv(GLuint AttributeIndex, const GLbyte* Values) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttrib4bv(GLuint AttributeIndex, const GLbyte* Values) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttribI4bv(GLuint AttributeIndex, const GLbyte* Values) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttrib4dv(GLuint AttributeIndex, const GLdouble* Values) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttribI4iv(GLuint AttributeIndex, const GLint* Values) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttribI4uiv(GLuint AttributeIndex, const GLuint* Values) UGL_REQUIRED_VOID static FORCEINLINE void DrawArraysInstanced(GLenum Mode, GLint First, GLsizei Count, GLsizei InstanceCount) UGL_REQUIRED_VOID static FORCEINLINE void DrawElementsInstanced(GLenum Mode, GLsizei Count, GLenum Type, const GLvoid* Indices, GLsizei InstanceCount) UGL_REQUIRED_VOID static FORCEINLINE void DrawRangeElements(GLenum Mode, GLuint Start, GLuint End, GLsizei Count, GLenum Type, const GLvoid* Indices) UGL_REQUIRED_VOID static FORCEINLINE void ClearBufferfv(GLenum Buffer, GLint DrawBufferIndex, const GLfloat* Value) UGL_REQUIRED_VOID static FORCEINLINE void ClearBufferfi(GLenum Buffer, GLint DrawBufferIndex, GLfloat Depth, GLint Stencil) UGL_REQUIRED_VOID static FORCEINLINE void ClearBufferiv(GLenum Buffer, GLint DrawBufferIndex, const GLint* Value) UGL_REQUIRED_VOID static FORCEINLINE void ClearDepth(GLdouble Depth) UGL_REQUIRED_VOID static FORCEINLINE void TexImage3D(GLenum Target, GLint Level, GLint InternalFormat, GLsizei Width, GLsizei Height, GLsizei Depth, GLint Border, GLenum Format, GLenum Type, const GLvoid* PixelData) UGL_REQUIRED_VOID static FORCEINLINE void CompressedTexImage3D(GLenum Target, GLint Level, GLenum InternalFormat, GLsizei Width, GLsizei Height, GLsizei Depth, GLint Border, GLsizei ImageSize, const GLvoid* PixelData) UGL_REQUIRED_VOID static FORCEINLINE void TexImage2DMultisample(GLenum Target, GLsizei Samples, GLint InternalFormat, GLsizei Width, GLsizei Height, GLboolean FixedSampleLocations) UGL_REQUIRED_VOID static FORCEINLINE void TexBuffer(GLenum Target, GLenum InternalFormat, GLuint Buffer) UGL_REQUIRED_VOID static FORCEINLINE void TexBufferRange(GLenum Target, GLenum InternalFormat, GLuint Buffer, GLintptr Offset, GLsizeiptr Size) UGL_REQUIRED_VOID static FORCEINLINE void TexSubImage3D(GLenum Target, GLint Level, GLint XOffset, GLint YOffset, GLint ZOffset, GLsizei Width, GLsizei Height, GLsizei Depth, GLenum Format, GLenum Type, const GLvoid* PixelData) UGL_REQUIRED_VOID static FORCEINLINE void CopyTexSubImage2D(GLenum Target, GLint Level, GLint XOffset, GLint YOffset, GLint X, GLint Y, GLsizei Width, GLsizei Height) UGL_REQUIRED_VOID static FORCEINLINE void CopyTexSubImage3D(GLenum Target, GLint Level, GLint XOffset, GLint YOffset, GLint ZOffset, GLint X, GLint Y, GLsizei Width, GLsizei Height) UGL_REQUIRED_VOID static FORCEINLINE void GetCompressedTexImage(GLenum Target, GLint Level, GLvoid* OutImageData) UGL_REQUIRED_VOID static FORCEINLINE void GetTexImage(GLenum Target, GLint Level, GLenum Format, GLenum Type, GLvoid* OutPixelData) UGL_REQUIRED_VOID static FORCEINLINE void CopyBufferSubData(GLenum ReadTarget, GLenum WriteTarget, GLintptr ReadOffset, GLintptr WriteOffset, GLsizeiptr Size) UGL_REQUIRED_VOID static FORCEINLINE const ANSICHAR* GetStringIndexed(GLenum Name, GLuint Index) UGL_REQUIRED(NULL) static FORCEINLINE GLuint GetMajorVersion() UGL_REQUIRED(0) static FORCEINLINE GLuint GetMinorVersion() UGL_REQUIRED(0) static FORCEINLINE ERHIFeatureLevel::Type GetFeatureLevel() UGL_REQUIRED(ERHIFeatureLevel::SM5) static FORCEINLINE EShaderPlatform GetShaderPlatform() UGL_REQUIRED(SP_NumPlatforms) static FORCEINLINE FString GetAdapterName() UGL_REQUIRED(TEXT(\"\")) static FORCEINLINE void BlendFuncSeparatei(GLuint Buf, GLenum SrcRGB, GLenum DstRGB, GLenum SrcAlpha, GLenum DstAlpha) UGL_REQUIRED_VOID static FORCEINLINE void BlendEquationSeparatei(GLuint Buf, GLenum ModeRGB, GLenum ModeAlpha) UGL_REQUIRED_VOID static FORCEINLINE void BlendFunci(GLuint Buf, GLenum Src, GLenum Dst) UGL_REQUIRED_VOID static FORCEINLINE void BlendEquationi(GLuint Buf, GLenum Mode) UGL_REQUIRED_VOID static FORCEINLINE void PatchParameteri(GLenum Pname, GLint Value) UGL_REQUIRED_VOID static FORCEINLINE void BindImageTexture(GLuint Unit, GLuint Texture, GLint Level, GLboolean Layered, GLint Layer, GLenum Access, GLenum Format) UGL_REQUIRED_VOID static FORCEINLINE void DispatchCompute(GLuint NumGroupsX, GLuint NumGroupsY, GLuint NumGroupsZ) UGL_REQUIRED_VOID static FORCEINLINE void DispatchComputeIndirect(GLintptr Offset) UGL_REQUIRED_VOID static FORCEINLINE void MemoryBarrier(GLbitfield Barriers) UGL_REQUIRED_VOID static FORCEINLINE bool TexStorage2D(GLenum Target, GLint Levels, GLint InternalFormat, GLsizei Width, GLsizei Height, GLenum Format, GLenum Type, ETextureCreateFlags Flags) UGL_OPTIONAL(false) static FORCEINLINE bool TexStorage2DMultisample(GLenum Target, GLsizei Samples, GLint InternalFormat, GLsizei Width, GLsizei Height, GLboolean FixedSampleLocations) UGL_OPTIONAL(false) static FORCEINLINE void RenderbufferStorageMultisample(GLenum Target, GLsizei Samples, GLint InternalFormat, GLsizei Width, GLsizei Height) UGL_REQUIRED_VOID static FORCEINLINE void TexStorage3D(GLenum Target, GLint Levels, GLint InternalFormat, GLsizei Width, GLsizei Height, GLsizei Depth, GLenum Format, GLenum Type) UGL_REQUIRED_VOID static FORCEINLINE void CompressedTexSubImage3D(GLenum Target, GLint Level, GLint XOffset, GLint YOffset, GLint ZOffset, GLsizei Width, GLsizei Height, GLsizei Depth, GLenum Format, GLsizei ImageSize, const GLvoid* PixelData) UGL_REQUIRED_VOID static FORCEINLINE void CopyImageSubData(GLuint SrcName, GLenum SrcTarget, GLint SrcLevel, GLint SrcX, GLint SrcY, GLint SrcZ, GLuint DstName, GLenum DstTarget, GLint DstLevel, GLint DstX, GLint DstY, GLint DstZ, GLsizei Width, GLsizei Height, GLsizei Depth) UGL_REQUIRED_VOID static FORCEINLINE void TextureView(GLuint ViewName, GLenum ViewTarget, GLuint SrcName, GLenum InternalFormat, GLuint MinLevel, GLuint NumLevels, GLuint MinLayer, GLuint NumLayers) UGL_REQUIRED_VOID static FORCEINLINE void DrawArraysIndirect(GLenum Mode, const void *Offset) UGL_REQUIRED_VOID static FORCEINLINE void DrawElementsIndirect(GLenum Mode, GLenum Type, const void *Offset) UGL_REQUIRED_VOID static FORCEINLINE void GenerateMipmap(GLenum Target) UGL_REQUIRED_VOID static FORCEINLINE void BindVertexBuffer(GLuint BindingIndex, GLuint Nuffer, GLintptr Offset, GLsizei Stride) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttribFormat(GLuint AttribIndex, GLint Size, GLenum Type, GLboolean Normalized, GLuint RelativeOffset) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttribIFormat(GLuint AttribIndex, GLint Size, GLenum Type, GLuint RelativeOffset) UGL_REQUIRED_VOID static FORCEINLINE void VertexAttribBinding(GLuint AttribIndex, GLuint BindingIndex) UGL_REQUIRED_VOID static FORCEINLINE void ClearBufferData(GLenum Target, GLenum InternalFormat, GLenum Format, GLenum Type, const uint32* Data) UGL_REQUIRED_VOID static FORCEINLINE void VertexBindingDivisor(GLuint BindingIndex, GLuint Divisor) UGL_REQUIRED_VOID static FORCEINLINE void BufferStorage(GLenum Target, GLsizeiptr Size, const void *Data, GLbitfield Flags) UGL_REQUIRED_VOID static FORCEINLINE void DepthBounds(GLfloat Min, GLfloat Max) UGL_REQUIRED_VOID static FORCEINLINE void TextureRange(GLenum Target, GLsizei Length, const GLvoid *Pointer) UGL_OPTIONAL_VOID static FORCEINLINE void ProgramParameter (GLuint Program, GLenum PName, GLint Value) UGL_OPTIONAL_VOID static FORCEINLINE void UseProgramStages(GLuint Pipeline, GLbitfield Stages, GLuint Program)"
  },
  {
    "label": "glAttachShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glAttachShader(Pipeline, Program)"
  },
  {
    "label": "BindProgramPipeline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindProgramPipeline(GLuint Pipeline)"
  },
  {
    "label": "glUseProgram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUseProgram(Pipeline)"
  },
  {
    "label": "DeleteShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteShader(GLuint Program)"
  },
  {
    "label": "glDeleteShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDeleteShader(Program)"
  },
  {
    "label": "DeleteProgramPipelines()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteProgramPipelines(GLsizei Number, const GLuint *Pipelines)"
  },
  {
    "label": "glDeleteProgram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDeleteProgram(Pipelines[i])"
  },
  {
    "label": "GenProgramPipelines()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GenProgramPipelines(GLsizei Number, GLuint *Pipelines)"
  },
  {
    "label": "glCreateProgram()",
    "kind": "Method",
    "detail": "Function (Pipelines [ i ] =)",
    "insertText": "glCreateProgram()"
  },
  {
    "label": "ProgramUniform1i()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ProgramUniform1i(GLuint Program, GLint Location, GLint V0)"
  },
  {
    "label": "glUniform1i()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUniform1i(Location, V0)"
  },
  {
    "label": "ProgramUniform4iv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProgramUniform4iv(GLuint Program, GLint Location, GLsizei Count, const GLint *Value)"
  },
  {
    "label": "glUniform4iv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUniform4iv(Location, Count, Value)"
  },
  {
    "label": "ProgramUniform4fv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProgramUniform4fv(GLuint Program, GLint Location, GLsizei Count, const GLfloat *Value)"
  },
  {
    "label": "glUniform4fv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUniform4fv(Location, Count, Value)"
  },
  {
    "label": "ProgramUniform4uiv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProgramUniform4uiv(GLuint Program, GLint Location, GLsizei Count, const GLuint *Value) UGL_REQUIRED_VOID static FORCEINLINE void GetProgramPipelineiv(GLuint Pipeline, GLenum Pname, GLint* Params) UGL_OPTIONAL_VOID static FORCEINLINE void ValidateProgramPipeline(GLuint Pipeline) UGL_OPTIONAL_VOID static FORCEINLINE void GetProgramPipelineInfoLog(GLuint Pipeline, GLsizei BufSize, GLsizei* Length, GLchar* InfoLog) UGL_OPTIONAL_VOID static FORCEINLINE bool IsProgramPipeline(GLuint Pipeline) UGL_OPTIONAL(false) static FORCEINLINE GLuint64 GetTextureSamplerHandle(GLuint Texture, GLuint Sampler) UGL_REQUIRED(0) static FORCEINLINE GLuint64 GetTextureHandle(GLuint Texture) UGL_REQUIRED(0) static FORCEINLINE void MakeTextureHandleResident(GLuint64 TextureHandle) UGL_REQUIRED_VOID static FORCEINLINE void MakeTextureHandleNonResident(GLuint64 TextureHandle) UGL_REQUIRED_VOID static FORCEINLINE void UniformHandleui64(GLint Location, GLuint64 Value) UGL_REQUIRED_VOID static FORCEINLINE void GetProgramBinary(GLuint Program, GLsizei BufSize, GLsizei *Length, GLenum *BinaryFormat, void *Binary) UGL_OPTIONAL_VOID static FORCEINLINE void ProgramBinary(GLuint Program, GLenum BinaryFormat, const void *Binary, GLsizei Length) UGL_OPTIONAL_VOID static FORCEINLINE void FrameBufferFetchBarrier() UGL_OPTIONAL_VOID static FPlatformOpenGLDevice* CreateDevice() UGL_REQUIRED(NULL) static FPlatformOpenGLContext* CreateContext( FPlatformOpenGLDevice* Device, void* WindowHandle ) UGL_REQUIRED(NULL) static FORCEINLINE void CheckFrameBuffer()"
  },
  {
    "label": "glCheckFramebufferStatus()",
    "kind": "Method",
    "detail": "Function (# if UE_BUILD_DEBUG | | UE_BUILD_DEVELOPMENT GLenum CompleteResult =)",
    "insertText": "glCheckFramebufferStatus(GL_FRAMEBUFFER)"
  },
  {
    "label": "BufferSubData()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "BufferSubData(GLenum Target, GLintptr Offset, GLsizeiptr Size, const GLvoid* Data)"
  },
  {
    "label": "glBufferSubData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBufferSubData(Target, Offset, Size, Data)"
  },
  {
    "label": "DeleteBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteBuffers(GLsizei Number, const GLuint* Buffers)"
  },
  {
    "label": "glDeleteBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDeleteBuffers(Number, Buffers)"
  },
  {
    "label": "DeleteTextures()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteTextures(GLsizei Number, const GLuint* Textures)"
  },
  {
    "label": "glDeleteTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDeleteTextures(Number, Textures)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Flush()"
  },
  {
    "label": "glFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFlush()"
  },
  {
    "label": "CreateShader()",
    "kind": "Method",
    "detail": "Function (} GLuint)",
    "insertText": "CreateShader(GLenum Type)"
  },
  {
    "label": "CreateProgram()",
    "kind": "Method",
    "detail": "Function (} GLuint)",
    "insertText": "CreateProgram()"
  },
  {
    "label": "TimerQueryDisjoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TimerQueryDisjoint()"
  },
  {
    "label": "PE_GetCurrentOpenGLShaderDeviceCapabilities()",
    "kind": "Method",
    "detail": "Function (PreferredPixelFormat = EPixelFormat::PF_B8G8R8A8 ; } return PreferredPixelFormat ; } void)",
    "insertText": "PE_GetCurrentOpenGLShaderDeviceCapabilities(FOpenGLShaderDeviceCapabilities& Capabilities)"
  },
  {
    "label": "PE_GLSLToDeviceCompatibleGLSL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PE_GLSLToDeviceCompatibleGLSL(FAnsiCharArray& GlslCodeOriginal, const FString& ShaderName, GLenum TypeEnum, const FOpenGLShaderDeviceCapabilities& Capabilities, FAnsiCharArray& GlslCode) UGL_OPTIONAL(false) static void PE_SetupTextureFormat(void(*SetupTextureFormat)(EPixelFormat, const FOpenGLTextureFormat&)) UGL_OPTIONAL_VOID static GLenum GetPlatfrom5551Format() UGL_OPTIONAL(GL_UNSIGNED_SHORT_5_5_5_1)"
  }
]