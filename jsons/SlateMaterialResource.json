[
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FSlateMaterialResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateMaterialResource"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FSlateMaterialResource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Textures / SlateShaderResource . h \" # include \" Materials / MaterialInterface . h \" class FMaterialRenderProxy ; class FSlateMaterialResource : public FSlateShaderResource { public :)",
    "insertText": "FSlateMaterialResource(const UMaterialInterface& InMaterialResource, const FVector2f InImageSize, FSlateShaderResource* InTextureMask = nullptr)"
  },
  {
    "label": "FSlateMaterialResource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateMaterialResource()"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetWidth()"
  },
  {
    "label": "IsResourceValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResourceValid()"
  },
  {
    "label": "UpdateMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaterial(const UMaterialInterface& InMaterialResource, const FVector2f InImageSize, FSlateShaderResource* InTextureMask)"
  },
  {
    "label": "ResetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMaterial()"
  },
  {
    "label": "GetRenderProxy()",
    "kind": "Method",
    "detail": "Function (FMaterialRenderProxy*)",
    "insertText": "GetRenderProxy()"
  },
  {
    "label": "UpdateMaterialName()",
    "kind": "Method",
    "detail": "Function (# endif private : const class UMaterialInterface* MaterialObject ; class FMaterialRenderProxy* MaterialProxy ; # if SLATE_CHECK_UOBJECT_RENDER_RESOURCES TWeakObjectPtr<const UMaterialInterface> MaterialObjectWeakPtr ; FName DebugName ; # endif FSlateShaderResourceProxy* SlateProxy ; FSlateShaderResource* TextureMaskResource ; uint32 Width ; uint32 Height ; ESlatePostRT CachedSlatePostBuffers ; private : # if SLATE_CHECK_UOBJECT_RENDER_RESOURCES void)",
    "insertText": "UpdateMaterialName()"
  }
]