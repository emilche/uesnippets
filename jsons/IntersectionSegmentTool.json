[
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FIsoNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoNode"
  },
  {
    "label": "FIsoInnerNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoInnerNode"
  },
  {
    "label": "FIsoSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoSegment"
  },
  {
    "label": "FPoint2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoint2D"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSegment"
  },
  {
    "label": "TIntersectionSegmentTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntersectionSegmentTool"
  },
  {
    "label": "FIntersectionSegmentTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIntersectionSegmentTool"
  },
  {
    "label": "FSegment()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Math / Boundary . h \" # include \" Math / Geometry . h \" # include \" UI / Visu . h \" namespace UE::CADKernel { class FGrid ; class FIsoNode ; class FIsoInnerNode ; class FIsoSegment ; class FPoint2D ; enum class EConnectionType : uint8 { DoesntStartFrom = 0,StartFrom,SuperimposedByOrOn,SameSegment,} ; namespace IntersectionToolBase { struct FSegment { const FSegment2D Segment2D ; const FSurfacicBoundary Boundary ; double AxisMin ; double AxisMax ;)",
    "insertText": "FSegment(const double Tolerance, const FPoint2D& StartPoint, const FPoint2D& EndPoint) : Segment2D(StartPoint, EndPoint) , Boundary(StartPoint, EndPoint, Tolerance)"
  },
  {
    "label": "FSegment()",
    "kind": "Method",
    "detail": "Function (AxisMin = Boundary [ EIso::IsoU ] . Min + Boundary [ EIso::IsoV ] . Min ; AxisMax = Boundary [ EIso::IsoU ] . Max + Boundary [ EIso::IsoV ] . Max ; } ~)",
    "insertText": "FSegment()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetFirstNode()",
    "kind": "Method",
    "detail": "Function (const FIsoNode*)",
    "insertText": "GetFirstNode()"
  },
  {
    "label": "GetSecondNode()",
    "kind": "Method",
    "detail": "Function (const FIsoNode*)",
    "insertText": "GetSecondNode()"
  },
  {
    "label": "GetIsoSegment()",
    "kind": "Method",
    "detail": "Function (const FIsoSegment*)",
    "insertText": "GetIsoSegment()"
  },
  {
    "label": "GetVector()",
    "kind": "Method",
    "detail": "Function (const FPoint2D AB = SegmentAB .)",
    "insertText": "GetVector().Normalize()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const double ParallelCoef = AB ^ CD ;)",
    "insertText": "if(FMath::IsNearlyZero(ParallelCoef, DOUBLE_KINDA_SMALL_NUMBER))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const double OrientationCoef = AB* CD ;)",
    "insertText": "if((OrientationCoef >= 0) == bSameOrientation)"
  },
  {
    "label": "IsSuperimposed()",
    "kind": "Method",
    "detail": "Function (bool bSameOrientation = true ; return)",
    "insertText": "IsSuperimposed(Segment2D, InSegment, bSameOrientation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(GetSecondNode() == StartNode)"
  },
  {
    "label": "IsSuperimposed()",
    "kind": "Method",
    "detail": "Function (bool bNotSameOrientation = false ; return)",
    "insertText": "IsSuperimposed(Segment2D, InSegment, bNotSameOrientation)"
  },
  {
    "label": "DoesItStartFromAndSuperimposed()",
    "kind": "Method",
    "detail": "Function (} return EConnectionType::DoesntStartFrom ; } EConnectionType)",
    "insertText": "DoesItStartFromAndSuperimposed(const FPoint2D* StartPoint, const FPoint2D* EndPoint, const FSegment2D& InSegment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(GetSecondNode() == EndNode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(GetFirstNode() == EndNode)"
  },
  {
    "label": "IsFullyBefore()",
    "kind": "Method",
    "detail": "Function (} return EConnectionType::DoesntStartFrom ; } bool)",
    "insertText": "IsFullyBefore(const FSegment& Segment)"
  },
  {
    "label": "IsParallelWith()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsParallelWith(const FSegment& Segment)"
  },
  {
    "label": "FSegment()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace IntersectionSegmentTool { struct FSegment : public IntersectionToolBase::FSegment { const FIsoSegment* IsoSegment ;)",
    "insertText": "FSegment(const FGrid& Grid, const double Tolerance, const FIsoSegment& InSegment)"
  },
  {
    "label": "FSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSegment(const FGrid& Grid, const double Tolerance, const FIsoNode& StartNode, const FIsoNode& EndNode)"
  },
  {
    "label": "FSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSegment(const FGrid& Grid, const double Tolerance, const FIsoNode& StartNode, const FPoint2D& EndPoint)"
  },
  {
    "label": "FSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSegment(const FGrid& Grid, const double Tolerance, const FPoint2D& StartPoint, const FPoint2D& EndPoint) : IntersectionToolBase::FSegment(Tolerance, StartPoint, EndPoint) , IsoSegment(nullptr)"
  },
  {
    "label": "TIntersectionSegmentTool()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TIntersectionSegmentTool()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty(int32 InMaxNum)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "Reset(InMaxNum)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (bSegmentsAreSorted = false ; } void)",
    "insertText": "Reserve(int32 InMaxNum)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "Reserve(InMaxNum)"
  },
  {
    "label": "RemoveLast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveLast()"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "RemoveAt(Segments.Num() - 1)"
  },
  {
    "label": "SetCount()",
    "kind": "Method",
    "detail": "Function (bSegmentsAreSorted = false ; } void)",
    "insertText": "SetCount(int32 NewCount)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "SetNum(NewCount)"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Count()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Sort()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(Segments, [](const SegmentType& Segment1, const SegmentType& Segment2) { return Segment1.AxisMin < Segment2.AxisMin; })"
  },
  {
    "label": "FindIntersectingSegment()",
    "kind": "Method",
    "detail": "Function (bSegmentsAreSorted = true ; } template<ExtremityType1,ExtremityType2> const SegmentType*)",
    "insertText": "FindIntersectingSegment(const ExtremityType1* StartExtremity, const ExtremityType2* EndExtremity)"
  },
  {
    "label": "InSegment()",
    "kind": "Method",
    "detail": "Function (using namespace IntersectionSegmentTool ; const SegmentType)",
    "insertText": "InSegment(Grid, Tolerance, *StartExtremity, *EndExtremity)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(bSegmentsAreSorted)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(Segment.IsFullyAfter(InSegment))"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "switch(Segment.DoesItStartFromAndSuperimposed(StartExtremity, EndExtremity, InSegment.Segment2D))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutIntersectedSegments ->)",
    "insertText": "Reset(10)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} int32 IntersectionCount = 0 ;)",
    "insertText": "for(const SegmentType& Segment : Segments)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutIntersectedSegments ->)",
    "insertText": "Add(Segment.GetIsoSegment())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} continue ; case EConnectionType::DoesntStartFrom : default : break ; })",
    "insertText": "if(Segment.DoesItIntersect(InSegment))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + IntersectionCount ;)",
    "insertText": "if(OutIntersectedSegments)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (} } } return IntersectionCount ; } # ifdef CADKERNEL_DEBUG void)",
    "insertText": "Display(bool bDisplay, const TCHAR* Message, EVisuProperty Property = EVisuProperty::BlueCurve)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(Segment.Segment2D[0] * DisplayScale, Segment.Segment2D[1] * DisplayScale, Index++, Property)"
  },
  {
    "label": "Close3DDebugSession()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Close3DDebugSession()"
  },
  {
    "label": "FIntersectionSegmentTool()",
    "kind": "Method",
    "detail": "Function (} # endif } ; class FIntersectionSegmentTool : public TIntersectionSegmentTool<IntersectionSegmentTool::FSegment> { public :)",
    "insertText": "FIntersectionSegmentTool(const FGrid& InGrid, const double Tolerance) : TIntersectionSegmentTool<IntersectionSegmentTool::FSegment>(InGrid, Tolerance)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Update(const FIsoSegment* Segment)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (int32 SegmentIndex = Segments .)",
    "insertText": "IndexOfByPredicate([Segment](const IntersectionSegmentTool::FSegment& SegmentIter) { return SegmentIter.IsoSegment == Segment; })"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "RemoveAt(SegmentIndex)"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "EmplaceAt(SegmentIndex, Grid, Tolerance, *Segment)"
  },
  {
    "label": "AddSegments()",
    "kind": "Method",
    "detail": "Function (bSegmentsAreSorted = false ; return true ; } return false ; } void)",
    "insertText": "AddSegments(FIsoSegment** InNewSegments, int32 Count)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (bSegmentsAreSorted = false ; Segments .)",
    "insertText": "Reserve(Count + Segments.Num())"
  },
  {
    "label": "AddSegment()",
    "kind": "Method",
    "detail": "Function (FIsoSegment* NewSegment = InNewSegments [ Index ] ;)",
    "insertText": "AddSegment(*NewSegment)"
  },
  {
    "label": "AddSegments()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddSegments(const TArray<FIsoSegment*>& InNewSegments)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (bSegmentsAreSorted = false ; Segments .)",
    "insertText": "Reserve(InNewSegments.Num() + Segments.Num())"
  },
  {
    "label": "AddSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSegment(*Segment)"
  },
  {
    "label": "AddSegment()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddSegment(const FIsoSegment& Segment)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (bSegmentsAreSorted = false ; Segments .)",
    "insertText": "Emplace(Grid, Tolerance, Segment)"
  },
  {
    "label": "AddSegment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSegment(const FPoint2D& StartPoint, const FPoint2D& EndPoint)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (bSegmentsAreSorted = false ; Segments .)",
    "insertText": "Emplace(Grid, Tolerance, StartPoint, EndPoint)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Remove(const FIsoSegment* Segment)"
  },
  {
    "label": "FindIntersectingSegment()",
    "kind": "Method",
    "detail": "Function (FIsoSegment*)",
    "insertText": "FindIntersectingSegment(const FIsoSegment& Segment)"
  },
  {
    "label": "DoesIntersect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesIntersect(const FIsoSegment& Segment)"
  },
  {
    "label": "DoesIntersect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesIntersect(const FPoint2D& StartPoint, const FPoint2D& EndPoint)"
  },
  {
    "label": "DoesIntersect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesIntersect(const FIsoNode& StartNode, const FPoint2D& EndPoint)"
  },
  {
    "label": "DoesIntersect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesIntersect(const FIsoNode* StartNode, const FIsoNode* EndNode)"
  },
  {
    "label": "DoesIntersect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesIntersect(const FIsoNode& StartNode, const FIsoNode& EndNode)"
  },
  {
    "label": "FindIntersectingSegment()",
    "kind": "Method",
    "detail": "Function (} const FIsoSegment*)",
    "insertText": "FindIntersectingSegment(const FIsoNode& StartNode, const FIsoNode& EndNode)"
  },
  {
    "label": "FindIntersectingSegment()",
    "kind": "Method",
    "detail": "Function (const IntersectionSegmentTool::FSegment* IntersectingSegment = TIntersectionSegmentTool<IntersectionSegmentTool::FSegment)",
    "insertText": "FindIntersectingSegment(&StartNode, &EndNode)"
  },
  {
    "label": "FindIntersectingSegment()",
    "kind": "Method",
    "detail": "Function (const IntersectionSegmentTool::FSegment* IntersectingSegment = TIntersectionSegmentTool<IntersectionSegmentTool::FSegment)",
    "insertText": "FindIntersectingSegment(StartNode, EndNode)"
  },
  {
    "label": "FindIntersectingSegments()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindIntersectingSegments(const FIsoNode& StartNode, const FIsoNode& EndNode, TArray<const FIsoSegment*>& OutIntersections)"
  },
  {
    "label": "CountIntersections()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CountIntersections(const FIsoNode* StartNode, const FIsoNode* EndNode)"
  }
]