[
  {
    "label": "AWorldDataLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldDataLayers"
  },
  {
    "label": "UDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerAsset"
  },
  {
    "label": "UDataLayerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerInstance"
  },
  {
    "label": "UDataLayerInstanceWithAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerInstanceWithAsset"
  },
  {
    "label": "FWorldPartitionActorDescView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDescView"
  },
  {
    "label": "IStreamingGenerationErrorHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStreamingGenerationErrorHandler"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IStreamingGenerationErrorHandler()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" WorldPartition / WorldPartitionActorDescInstanceViewInterface . h \" class AWorldDataLayers ; class UDataLayerAsset ; class UDataLayerInstance ; class UDataLayerInstanceWithAsset ; class FWorldPartitionActorDescView ; class IStreamingGenerationErrorHandler { public : ~)",
    "insertText": "IStreamingGenerationErrorHandler()"
  },
  {
    "label": "OnInvalidRuntimeGrid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnInvalidRuntimeGrid(const IWorldPartitionActorDescInstanceView& ActorDescView, FName GridName)"
  },
  {
    "label": "OnInvalidReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidReference(const IWorldPartitionActorDescInstanceView& ActorDescView, const FGuid& ReferenceGuid, IWorldPartitionActorDescInstanceView* ReferenceActorDescView)"
  },
  {
    "label": "OnInvalidReferenceGridPlacement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidReferenceGridPlacement(const IWorldPartitionActorDescInstanceView& ActorDescView, const IWorldPartitionActorDescInstanceView& ReferenceActorDescView)"
  },
  {
    "label": "OnInvalidReferenceDataLayers()",
    "kind": "Method",
    "detail": "Function (enum class EDataLayerInvalidReason { ReferencedActorDifferentRuntimeDataLayers,ReferencedActorDifferentExternalDataLayer } ; void)",
    "insertText": "OnInvalidReferenceDataLayers(const IWorldPartitionActorDescInstanceView& ActorDescView, const IWorldPartitionActorDescInstanceView& ReferenceActorDescView, EDataLayerInvalidReason Reason)"
  },
  {
    "label": "OnInvalidReferenceRuntimeGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidReferenceRuntimeGrid(const IWorldPartitionActorDescInstanceView& ActorDescView, const IWorldPartitionActorDescInstanceView& ReferenceActorDescView)"
  },
  {
    "label": "OnDataLayersLoadFilterMismatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataLayersLoadFilterMismatch(const IWorldPartitionActorDescInstanceView& ActorDescView)"
  },
  {
    "label": "OnInvalidWorldReference()",
    "kind": "Method",
    "detail": "Function (enum class EWorldReferenceInvalidReason { ReferencedActorIsSpatiallyLoaded,ReferencedActorHasDataLayers } ; void)",
    "insertText": "OnInvalidWorldReference(const IWorldPartitionActorDescInstanceView& ActorDescView, EWorldReferenceInvalidReason Reason)"
  },
  {
    "label": "OnInvalidReferenceDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidReferenceDataLayerAsset(const UDataLayerInstanceWithAsset* DataLayerInstance)"
  },
  {
    "label": "OnDataLayerHierarchyTypeMismatch()",
    "kind": "Method",
    "detail": "Function (enum class EDataLayerHierarchyInvalidReason { ClientOnlyDataLayerCantBeChild,ServerOnlyDataLayerCantBeChild,IncompatibleDataLayerType } ; void)",
    "insertText": "OnDataLayerHierarchyTypeMismatch(const UDataLayerInstance* DataLayerInstance, const UDataLayerInstance* Parent, EDataLayerHierarchyInvalidReason Reason)"
  },
  {
    "label": "OnInvalidWorldDataLayersReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidWorldDataLayersReference(const AWorldDataLayers* WorldDataLayers, const UDataLayerInstance* DataLayerInstance, const FText& Reason)"
  },
  {
    "label": "OnDataLayerAssetConflict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataLayerAssetConflict(const UDataLayerInstanceWithAsset* DataLayerInstance, const UDataLayerInstanceWithAsset* ConflictingDataLayerInstance)"
  },
  {
    "label": "OnInvalidDataLayerAssetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidDataLayerAssetType(const UDataLayerInstanceWithAsset* DataLayerInstance, const UDataLayerAsset* DataLayerAsset)"
  },
  {
    "label": "OnActorNeedsResave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorNeedsResave(const IWorldPartitionActorDescInstanceView& ActorDescView)"
  },
  {
    "label": "OnLevelInstanceInvalidWorldAsset()",
    "kind": "Method",
    "detail": "Function (enum class ELevelInstanceInvalidReason { WorldAssetNotFound,WorldAssetDontContainActorsMetadata,WorldAssetIncompatiblePartitioned,WorldAssetHasInvalidContainer,CirculalReference } ; void)",
    "insertText": "OnLevelInstanceInvalidWorldAsset(const IWorldPartitionActorDescInstanceView& ActorDescView, FName WorldAsset, ELevelInstanceInvalidReason Reason)"
  },
  {
    "label": "OnInvalidActorFilterReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidActorFilterReference(const IWorldPartitionActorDescInstanceView& ActorDescView, const IWorldPartitionActorDescInstanceView& ReferenceActorDescView)"
  },
  {
    "label": "OnInvalidHLODLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidHLODLayer(const IWorldPartitionActorDescInstanceView& ActorDescView)"
  },
  {
    "label": "GetActorName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetActorName(const IWorldPartitionActorDescInstanceView& ActorDescView)"
  },
  {
    "label": "GetFullActorName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullActorName(const IWorldPartitionActorDescInstanceView& ActorDescView)"
  },
  {
    "label": "OnInvalidWorldReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidWorldReference(ActorDescView, EWorldReferenceInvalidReason::ReferencedActorIsSpatiallyLoaded)"
  },
  {
    "label": "OnInvalidWorldReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidWorldReference(ActorDescView, EWorldReferenceInvalidReason::ReferencedActorHasDataLayers)"
  }
]