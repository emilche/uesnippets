[
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "URig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URig"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "SListView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SListView"
  },
  {
    "label": "FDisplayedBoneMappingInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisplayedBoneMappingInfo"
  },
  {
    "label": "SBoneMappingListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBoneMappingListRow"
  },
  {
    "label": "PERSONA_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PERSONA_API"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Input / SComboButton . h \" # include \" BoneSelectionWidget . h \" class IEditableSkeleton ; class URig ; class USkeleton ; template<ItemType> class SListView ; class FDisplayedBoneMappingInfo { public : FName Name ; FString DisplayName ; TSharedRef<FDisplayedBoneMappingInfo>)",
    "insertText": "Make(const FName NodeName, const FString DisplayName)"
  },
  {
    "label": "GetNodeName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetNodeName()"
  },
  {
    "label": "FDisplayedBoneMappingInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDisplayedBoneMappingInfo()"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} } ; typedef SListView<TSharedPtr<FDisplayedBoneMappingInfo>> SBoneMappingListType ; typedef TSharedPtr<FDisplayedBoneMappingInfo> FDisplayedBoneMappingInfoPtr ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnBoneMappingChanged, FName , FName)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FName, FOnGetBoneMapping, FName)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(FText&, FOnGetFilteredText) DECLARE_DELEGATE_TwoParams(FOnCreateBoneMapping, const FString&, TArray< TSharedPtr<FDisplayedBoneMappingInfo> >&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SBoneMappingListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FDisplayedBoneMappingInfoPtr, Item) SLATE_ARGUMENT(TSharedPtr<SBoneMappingListType>, BoneMappingListView) SLATE_EVENT(FOnBoneMappingChanged, OnBoneMappingChanged) SLATE_EVENT(FOnGetBoneMapping, OnGetBoneMapping) SLATE_EVENT(FGetReferenceSkeleton, OnGetReferenceSkeleton) SLATE_EVENT(FOnGetFilteredText, OnGetFilteredText) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& OwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "OnBoneSelectionChanged()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SBoneMappingListType> BoneMappingListView ; FDisplayedBoneMappingInfoPtr Item ; void)",
    "insertText": "OnBoneSelectionChanged(FName Name)"
  },
  {
    "label": "OnClearButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClearButtonClicked()"
  },
  {
    "label": "GetSelectedBone()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSelectedBone(bool& bMultipleValues)"
  },
  {
    "label": "GetFilterText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterText()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (FOnBoneMappingChanged OnBoneMappingChanged ; FOnGetBoneMapping OnGetBoneMapping ; FGetReferenceSkeleton OnGetReferenceSkeleton ; FOnGetFilteredText OnGetFilteredText ; } ; class SBoneMappingBase : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SBoneMappingBase)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnBoneMappingChanged, OnBoneMappingChanged) SLATE_EVENT(FOnGetBoneMapping, OnGetBoneMapping) SLATE_EVENT(FGetReferenceSkeleton, OnGetReferenceSkeleton) SLATE_EVENT(FOnCreateBoneMapping, OnCreateBoneMapping) SLATE_END_ARGS() void Construct( const FArguments& InArgs, FSimpleMulticastDelegate& InOnPostUndo)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& SearchText)"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& SearchText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GenerateBoneMappingRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateBoneMappingRow(TSharedPtr<FDisplayedBoneMappingInfo> InInfo, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "RefreshBoneMappingList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshBoneMappingList()"
  },
  {
    "label": "OnBoneMappingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBoneMappingChanged(FName NodeName, FName BoneName)"
  },
  {
    "label": "GetBoneMapping()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetBoneMapping(FName NodeName)"
  }
]