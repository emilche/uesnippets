[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTextureLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureLayout"
  },
  {
    "label": "FTextureLayoutNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureLayoutNode"
  },
  {
    "label": "FBinnedTextureLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBinnedTextureLayout"
  },
  {
    "label": "FBinAllocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBinAllocation"
  },
  {
    "label": "FBin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBin"
  },
  {
    "label": "FTextureLayout()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHIDefinitions . h \" enum class ETextureLayoutAspectRatio { None,Force2To1,ForceSquare,} ; class FTextureLayout { public :)",
    "insertText": "FTextureLayout(uint32 InMinSizeX, uint32 InMinSizeY, uint32 MaxSizeX, uint32 MaxSizeY, bool bInPowerOfTwoSize = false, ETextureLayoutAspectRatio InAspect = ETextureLayoutAspectRatio::None, bool bInAlignByFour = true): MinSizeX(InMinSizeX), MinSizeY(InMinSizeY), SizeX(InMinSizeX), SizeY(InMinSizeY), AspectRatio(InAspect), bPowerOfTwoSize(bInPowerOfTwoSize), bAlignByFour(bInAlignByFour)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Emplace(0, 0, IntCastChecked<uint16>(MaxSizeX), IntCastChecked<uint16>(MaxSizeY))"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddElement(uint32& OutBaseX, uint32& OutBaseY, uint32 ElementSizeX, uint32 ElementSizeY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutBaseX = 0 ; OutBaseY = 0 ; return true ; })",
    "insertText": "if(bAlignByFour)"
  },
  {
    "label": "ElementSizeX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElementSizeX(ElementSizeX + 3)"
  },
  {
    "label": "ElementSizeY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElementSizeY(ElementSizeY + 3)"
  },
  {
    "label": "AddSurfaceInner()",
    "kind": "Method",
    "detail": "Function (} int32 NodeIndex =)",
    "insertText": "AddSurfaceInner(0, ElementSizeX, ElementSizeY, false)"
  },
  {
    "label": "AddSurfaceInner()",
    "kind": "Method",
    "detail": "Function (NodeIndex =)",
    "insertText": "AddSurfaceInner(0, ElementSizeX, ElementSizeY, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NodeIndex != INDEX_NONE)"
  },
  {
    "label": "UpdateSize()",
    "kind": "Method",
    "detail": "Function (FTextureLayoutNode& Node = Nodes [ NodeIndex ] ; Node . bUsed = true ; OutBaseX = Node . MinX ; OutBaseY = Node . MinY ;)",
    "insertText": "UpdateSize(Node.MinX + ElementSizeX, Node.MinY + ElementSizeY)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} int32 FoundNodeIndex = INDEX_NONE ;)",
    "insertText": "for(int32 NodeIndex = 0; NodeIndex < Nodes.Num(); NodeIndex++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FTextureLayoutNode& Node = Nodes [ NodeIndex ] ;)",
    "insertText": "if(Node.MinX == ElementBaseX && Node.MinY == ElementBaseY && Node.SizeX == ElementSizeX && Node.SizeY == ElementSizeY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FoundNodeIndex = NodeIndex ; break ; } })",
    "insertText": "if(FoundNodeIndex != INDEX_NONE)"
  },
  {
    "label": "FindParentNode()",
    "kind": "Method",
    "detail": "Function (Nodes [ FoundNodeIndex ] . bUsed = false ; int32 ParentNodeIndex =)",
    "insertText": "FindParentNode(FoundNodeIndex)"
  },
  {
    "label": "ParentNodeIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParentNodeIndex(ParentNodeIndex != INDEX_NONE && IsNodeUsed(ParentNodeIndex))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 LastParentNodeIndex = ParentNodeIndex ;)",
    "insertText": "while(ParentNodeIndex != INDEX_NONE && !IsNodeUsed(Nodes[ParentNodeIndex].ChildA) && !IsNodeUsed(Nodes[ParentNodeIndex].ChildB))"
  },
  {
    "label": "FindParentNode()",
    "kind": "Method",
    "detail": "Function (LastParentNodeIndex = ParentNodeIndex ; ParentNodeIndex =)",
    "insertText": "FindParentNode(ParentNodeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(LastParentNodeIndex != INDEX_NONE)"
  },
  {
    "label": "RemoveChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildren(LastParentNodeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FTextureLayoutNode& Node = Nodes [ NodeIndex ] ;)",
    "insertText": "if(Node.bUsed)"
  },
  {
    "label": "UpdateSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSize(Node.MinX + Node.SizeX, Node.MinY + Node.SizeY)"
  },
  {
    "label": "GetSizeX()",
    "kind": "Method",
    "detail": "Function (} } } return true ; } return false ; } uint32)",
    "insertText": "GetSizeX()"
  },
  {
    "label": "FTextureLayoutNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTextureLayoutNode(uint16 InMinX, uint16 InMinY, uint16 InSizeX, uint16 InSizeY): ChildA(INDEX_NONE), ChildB(INDEX_NONE), MinX(InMinX), MinY(InMinY), SizeX(InSizeX), SizeY(InSizeY), bUsed(false)"
  },
  {
    "label": "AddSurfaceInner()",
    "kind": "Method",
    "detail": "Function (} } ; uint32 MinSizeX ; uint32 MinSizeY ; uint32 SizeX ; uint32 SizeY ; ETextureLayoutAspectRatio AspectRatio ; bool bPowerOfTwoSize ; bool bAlignByFour ; TArray<FTextureLayoutNode,TInlineAllocator<5>> Nodes ; int32)",
    "insertText": "AddSurfaceInner(int32 NodeIndex, uint32 ElementSizeX, uint32 ElementSizeY, bool bAllowTextureEnlargement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FTextureLayoutNode CurrentNode = Nodes [ NodeIndex ] ; const FTextureLayoutNode* CurrentNodePtr =& Nodes [ NodeIndex ] ;)",
    "insertText": "if(CurrentNodePtr->ChildA != INDEX_NONE)"
  },
  {
    "label": "AddSurfaceInner()",
    "kind": "Method",
    "detail": "Function (const int32 Result =)",
    "insertText": "AddSurfaceInner(CurrentNodePtr->ChildA, ElementSizeX, ElementSizeY, bAllowTextureEnlargement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentNodePtr = 0 ;)",
    "insertText": "if(Result != INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(CurrentNodePtr->bUsed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 ExpectedSizeX = CurrentNodePtr -> MinX + ElementSizeX ; int32 ExpectedSizeY = CurrentNodePtr -> MinY + ElementSizeY ;)",
    "insertText": "if(bPowerOfTwoSize)"
  },
  {
    "label": "RoundUpToPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (ExpectedSizeX =)",
    "insertText": "RoundUpToPowerOfTwo(ExpectedSizeX)"
  },
  {
    "label": "RoundUpToPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (ExpectedSizeY =)",
    "insertText": "RoundUpToPowerOfTwo(ExpectedSizeY)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (ExpectedSizeY = ExpectedSizeX ; break ; case ETextureLayoutAspectRatio::Force2To1 : ExpectedSizeX =)",
    "insertText": "Max(ExpectedSizeX, ExpectedSizeY * 2)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (ExpectedSizeY =)",
    "insertText": "Max(ExpectedSizeY, ExpectedSizeX / 2)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(ExpectedSizeX > MaxTextureSize ||ExpectedSizeY > MaxTextureSize)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Nodes [ NodeIndex ] . ChildA = Nodes .)",
    "insertText": "Num()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Emplace(CurrentNode.MinX, CurrentNode.MinY, IntCastChecked<uint16>(ElementSizeX), CurrentNode.SizeY)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Emplace(IntCastChecked<uint16>(CurrentNode.MinX + ElementSizeX), CurrentNode.MinY, IntCastChecked<uint16>(CurrentNode.SizeX - ElementSizeX), CurrentNode.SizeY)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Emplace(CurrentNode.MinX, CurrentNode.MinY, CurrentNode.SizeX, IntCastChecked<uint16>(ElementSizeY))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Emplace(CurrentNode.MinX, IntCastChecked<uint16>(CurrentNode.MinY + ElementSizeY), CurrentNode.SizeX, IntCastChecked<uint16>(CurrentNode.SizeY - ElementSizeY))"
  },
  {
    "label": "AddSurfaceInner()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "AddSurfaceInner(Nodes[NodeIndex].ChildA, ElementSizeX, ElementSizeY, bAllowTextureEnlargement)"
  },
  {
    "label": "UpdateSize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateSize(uint32 ElementMaxX, uint32 ElementMaxY)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (SizeX = FMath::Max<)",
    "insertText": "uint32(SizeX, FMath::RoundUpToPowerOfTwo(ElementMaxX))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (SizeY = FMath::Max<)",
    "insertText": "uint32(SizeY, FMath::RoundUpToPowerOfTwo(ElementMaxY))"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (SizeY = SizeX ; break ; case ETextureLayoutAspectRatio::Force2To1 : SizeX =)",
    "insertText": "Max(SizeX, SizeY * 2)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (SizeY =)",
    "insertText": "Max(SizeY, SizeX / 2)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (break ; } } else { SizeX = FMath::Max<)",
    "insertText": "uint32(SizeX, ElementMaxX)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (SizeY = FMath::Max<)",
    "insertText": "uint32(SizeY, ElementMaxY)"
  },
  {
    "label": "FindParentNode()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "FindParentNode(int32 SearchNodeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FTextureLayoutNode& Node = Nodes [ NodeIndex ] ;)",
    "insertText": "if(Node.ChildA == SearchNodeIndex || Node.ChildB == SearchNodeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bChildrenUsed = false ;)",
    "insertText": "if(Nodes[NodeIndex].ChildA != INDEX_NONE)"
  },
  {
    "label": "IsNodeUsed()",
    "kind": "Method",
    "detail": "Function (bChildrenUsed =)",
    "insertText": "IsNodeUsed(Nodes[NodeIndex].ChildA) || IsNodeUsed(Nodes[NodeIndex].ChildB)"
  },
  {
    "label": "RemoveChildren()",
    "kind": "Method",
    "detail": "Function (} return Nodes [ NodeIndex ] . bUsed | | bChildrenUsed ; } void)",
    "insertText": "RemoveChildren(int32 NodeIndex)"
  },
  {
    "label": "RemoveChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildren(Nodes[NodeIndex].ChildA)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Nodes[NodeIndex].ChildB != INDEX_NONE)"
  },
  {
    "label": "RemoveChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildren(Nodes[NodeIndex].ChildB)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (const int32 OldChildA = Nodes [ NodeIndex ] . ChildA ; Nodes .)",
    "insertText": "RemoveAt(OldChildA)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Nodes [ OtherNodeIndex ] . ChildA - - ; })",
    "insertText": "if(Nodes[OtherNodeIndex].ChildB >= OldChildA)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (const int32 OldChildB = Nodes [ NodeIndex ] . ChildB ; Nodes .)",
    "insertText": "RemoveAt(OldChildB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Nodes [ OtherNodeIndex ] . ChildA - - ; })",
    "insertText": "if(Nodes[OtherNodeIndex].ChildB >= OldChildB)"
  },
  {
    "label": "FBinnedTextureLayout()",
    "kind": "Method",
    "detail": "Function (Nodes [ OtherNodeIndex ] . ChildB - - ; } } Nodes [ NodeIndex ] . ChildB = INDEX_NONE ; } } } ; class FBinnedTextureLayout { public :)",
    "insertText": "FBinnedTextureLayout(FIntPoint InMaxSize, int32 InBinSizeTexels) : BinSizeTexels(InBinSizeTexels), MaxSize(InMaxSize), Layout(0, 0, InMaxSize.X, InMaxSize.Y, false, ETextureLayoutAspectRatio::None, false)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddElement(FIntPoint ElementSize, FIntPoint& OutElementMin)"
  },
  {
    "label": "RemoveElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElement(FIntRect Element)"
  },
  {
    "label": "FBin()",
    "kind": "Method",
    "detail": "Function (private : class FBinAllocation { public : FIntRect LayoutAllocation ; TArray<int32> FreeList ; } ; class FBin { public :)",
    "insertText": "FBin(FIntPoint InElementSize)"
  },
  {
    "label": "ComputeDifferenceArray()",
    "kind": "Method",
    "detail": "Function (ElementSize = InElementSize ; bOutOfSpace = false ; } FIntPoint ElementSize ; bool bOutOfSpace ; TArray<FBinAllocation,TInlineAllocator<1>> BinAllocations ; } ; int32 BinSizeTexels ; FIntPoint MaxSize ; TArray<FBin> Bins ; FTextureLayout Layout ; } ; namespace TextureLayoutTools { template<ValueType> void)",
    "insertText": "ComputeDifferenceArray(const ValueType* ValuesA, const ValueType* ValuesB, const int32 ValueCount, TArray< double >& OutValueDifferences)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutValueDifferences .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (OutValueDifferences .)",
    "insertText": "AddUninitialized(ValueCount)"
  },
  {
    "label": "Difference()",
    "kind": "Method",
    "detail": "Function (const ValueType CurValueA = ValuesA [ CurValueIndex ] ; const ValueType CurValueB = ValuesB [ CurValueIndex ] ; const double)",
    "insertText": "Difference(double)CurValueA - (double)"
  },
  {
    "label": "ComputeRootMeanSquareDeviation()",
    "kind": "Method",
    "detail": "Function (OutValueDifferences [ CurValueIndex ] = Difference ; } } template<ValueType> double)",
    "insertText": "ComputeRootMeanSquareDeviation(const ValueType* Values, const int32 ValueCount)"
  },
  {
    "label": "ValuesSum()",
    "kind": "Method",
    "detail": "Function (const ValueType CurValue = Values [ CurValueIndex ] ;)",
    "insertText": "ValuesSum(double)"
  },
  {
    "label": "ValuesMean()",
    "kind": "Method",
    "detail": "Function (} const double)",
    "insertText": "ValuesMean(double)ValuesSum / (double)"
  },
  {
    "label": "MeanDifference()",
    "kind": "Method",
    "detail": "Function (const ValueType CurValue = Values [ CurValueIndex ] ; const double)",
    "insertText": "MeanDifference(double)"
  },
  {
    "label": "ValuesSquaredDifferenceSum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValuesSquaredDifferenceSum(MeanDifference * MeanDifference)"
  },
  {
    "label": "ValuesSquaredDifferenceSum()",
    "kind": "Method",
    "detail": "Function (} const double ValuesMeanSquaredDifference =)",
    "insertText": "ValuesSquaredDifferenceSum(double)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (const double ValuesRootMeanSquareDeviation =)",
    "insertText": "sqrt(ValuesMeanSquaredDifference)"
  }
]