[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTextureLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureLayout"
  },
  {
    "label": "FTextureLayoutNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureLayoutNode"
  },
  {
    "label": "FBinnedTextureLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBinnedTextureLayout"
  },
  {
    "label": "FBinAllocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBinAllocation"
  },
  {
    "label": "FBin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBin"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (nodes)",
    "insertText": "for(int32 NodeIndex = 0; NodeIndex < Nodes.Num()"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (together)",
    "insertText": "checkSlow(CurrentNodePtr->ChildB != INDEX_NONE)"
  },
  {
    "label": "AddSurfaceInner()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AddSurfaceInner(CurrentNode.ChildB, ElementSizeX, ElementSizeY, bAllowTextureEnlargement)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "AddSurfaceInner()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AddSurfaceInner(Nodes[NodeIndex].ChildA, ElementSizeX, ElementSizeY, bAllowTextureEnlargement)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (index)",
    "insertText": "for(int32 NodeIndex = 0; NodeIndex < Nodes.Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (removed)",
    "insertText": "for(int32 OtherNodeIndex = 0; OtherNodeIndex < Nodes.Num()"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddElement(FIntPoint ElementSize, FIntPoint& OutElementMin)"
  },
  {
    "label": "RemoveElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElement(FIntRect Element)"
  }
]