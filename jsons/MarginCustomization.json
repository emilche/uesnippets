[
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "INumericTypeInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "INumericTypeInterface"
  },
  {
    "label": "FMarginStructCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMarginStructCustomization"
  },
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" IPropertyTypeCustomization . h \" # include \" Internationalization / Text . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" class IPropertyHandle ; class SEditableTextBox ; class SWidget ; template<NumericType> struct INumericTypeInterface ; class FMarginStructCustomization : public IPropertyTypeCustomization { public : TSharedRef<IPropertyTypeCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "FMarginStructCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMarginStructCustomization() : bIsUsingSlider( false)"
  },
  {
    "label": "CustomizeHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeHeader(TSharedRef<class IPropertyHandle> StructPropertyHandle, class FDetailWidgetRow& HeaderRow, IPropertyTypeCustomizationUtils& StructCustomizationUtils)"
  },
  {
    "label": "CustomizeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeChildren(TSharedRef<class IPropertyHandle> StructPropertyHandle, class IDetailChildrenBuilder& StructBuilder, IPropertyTypeCustomizationUtils& StructCustomizationUtils)"
  },
  {
    "label": "MakePropertyWidget()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<SEditableTextBox>)",
    "insertText": "MakePropertyWidget()"
  },
  {
    "label": "MakeChildPropertyWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeChildPropertyWidget(int32 PropertyIndex)"
  },
  {
    "label": "GetMarginText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetMarginText()"
  },
  {
    "label": "OnMarginTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMarginTextCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "GetMarginTextFromProperties()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMarginTextFromProperties()"
  },
  {
    "label": "OnGetValue()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "OnGetValue(int32 PropertyIndex)"
  },
  {
    "label": "OnValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnValueCommitted(float NewValue, ETextCommit::Type CommitType, int32 PropertyIndex)"
  },
  {
    "label": "OnValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnValueChanged(float NewValue, int32 PropertyIndex)"
  },
  {
    "label": "OnBeginSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginSliderMovement()"
  },
  {
    "label": "OnEndSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSliderMovement(float NewValue)"
  }
]