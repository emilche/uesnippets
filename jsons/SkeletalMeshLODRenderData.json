[
  {
    "label": "USkinnedAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedAsset"
  },
  {
    "label": "FSkeletalMeshLODModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODModel"
  },
  {
    "label": "FSkeletalMeshVertexAttributeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshVertexAttributeInfo"
  },
  {
    "label": "FSkelMeshRenderSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshRenderSection"
  },
  {
    "label": "FSkeletalMeshLODRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODRenderData"
  },
  {
    "label": "UMorphTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMorphTarget"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "EClassDataStripFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EClassDataStripFlag"
  },
  {
    "label": "FSkeletalMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshRenderData"
  },
  {
    "label": "FSkelMeshRenderSection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Rendering / MultiSizeIndexContainer . h \" # include \" Rendering / SkeletalMeshVertexBuffer . h \" # include \" Rendering / SkinWeightVertexBuffer . h \" # include \" Rendering / ColorVertexBuffer . h \" # include \" Rendering / SkeletalMeshDuplicatedVerticesBuffer . h \" # include \" Rendering / SkeletalMeshVertexClothBuffer . h \" # include \" Rendering / MorphTargetVertexInfoBuffers . h \" # include \" Rendering / SkeletalMeshHalfEdgeBuffer . h \" # include \" SkeletalMeshTypes . h \" # include \" BoneIndices . h \" # include \" StaticMeshResources . h \" # include \" GPUSkinVertexFactory . h \" # include \" Animation / SkeletalMeshVertexAttribute . h \" # include \" Animation / SkinWeightProfile . h \" class USkinnedAsset ; # if WITH_EDITOR class FSkeletalMeshLODModel ; struct FSkeletalMeshVertexAttributeInfo ; # endif struct FSkelMeshRenderSection { uint16 MaterialIndex ; uint32 BaseIndex ; uint32 NumTriangles ; bool bRecomputeTangent ; bool bCastShadow ; bool bVisibleInRayTracing ; ESkinVertexColorChannel RecomputeTangentsVertexMaskChannel ; uint32 BaseVertexIndex ; TArray<FMeshToMeshVertData> ClothMappingData_DEPRECATED ; TArray<TArray<FMeshToMeshVertData>> ClothMappingDataLODs ; TArray<FBoneIndexType> BoneMap ; uint32 NumVertices ; int32 MaxBoneInfluences ; int16 CorrespondClothAssetIndex ; FClothingSectionData ClothingData ; FDuplicatedVerticesBuffer DuplicatedVerticesBuffer ; bool bDisabled ;)",
    "insertText": "FSkelMeshRenderSection() : MaterialIndex(0) , BaseIndex(0) , NumTriangles(0) , bRecomputeTangent(false) , bCastShadow(true) , bVisibleInRayTracing(true) , RecomputeTangentsVertexMaskChannel(ESkinVertexColorChannel::None) , BaseVertexIndex(0) , NumVertices(0) , MaxBoneInfluences(4) , CorrespondClothAssetIndex(-1) , bDisabled(false)"
  },
  {
    "label": "HasClothingData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasClothingData()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 ClothLODBias = 0 ; return ClothMappingDataLODs .)",
    "insertText": "Num() && ClothMappingDataLODs[ClothLODBias].Num()"
  },
  {
    "label": "GetVertexBufferIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVertexBufferIndex()"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (} ; class FSkeletalMeshLODRenderData : public FRefCountBase { public : TArray<FSkelMeshRenderSection> RenderSections ; FMultiSizeIndexContainer MultiSizeIndexContainer ; FStaticMeshVertexBuffers StaticVertexBuffers ; FSkinWeightVertexBuffer SkinWeightVertexBuffer ; FSkeletalMeshVertexClothBuffer ClothVertexBuffer ; FMorphTargetVertexInfoBuffers MorphTargetVertexInfoBuffers ; FSkinWeightProfilesData SkinWeightProfilesData ; FSkeletalMeshVertexAttributeRenderData VertexAttributeBuffers ; FSkeletalMeshHalfEdgeBuffer HalfEdgeBuffer ; TArray<FBoneIndexType> ActiveBoneIndices ; TArray<FBoneIndexType> RequiredBones ; uint32 BuffersSize ; FRayTracingGeometry SourceRayTracingGeometry ; FByteBulkData StreamingBulkData ; uint32 bStreamedDataInlined : 1 ; uint32 bIsLODOptional : 1 ; # if WITH_EDITOR FByteBulkData BulkData ; # endif # if RHI_RAYTRACING int32 NumReferencingStaticSkeletalMeshObjects = 0 ; bool bReferencedByStaticSkeletalMeshObjects_RenderThread = false ; FRayTracingGeometry StaticRayTracingGeometry ; # endif void)",
    "insertText": "InitResources(bool bNeedsVertexColors, int32 LODIndex, TArray<class UMorphTarget*>& InMorphTargets, USkinnedAsset* Owner)"
  },
  {
    "label": "InitMorphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitMorphResources()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "ReleaseCPUResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCPUResources(bool bForStreaming = false)"
  },
  {
    "label": "FSkeletalMeshLODRenderData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSkeletalMeshLODRenderData(bool bAddRef = true) : BuffersSize(0) , bStreamedDataInlined(true) , bIsLODOptional(false)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "FSkeletalMeshLODRenderData()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FSkeletalMeshLODRenderData()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, int32 Idx)"
  },
  {
    "label": "SerializeStreamedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeStreamedData(FArchive& Ar, USkinnedAsset* Owner, int32 LODIdx, uint8 ClassStripFlags, bool bNeedsCPUAccess, bool bForceKeepCPUResources)"
  },
  {
    "label": "SerializeAvailabilityInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeAvailabilityInfo(FArchive& Ar, int32 LODIdx, bool bHasAdjacencyData, bool bNeedsCPUAccess)"
  },
  {
    "label": "BuildFromLODModel()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR struct FBuildSettings { ESkeletalMeshVertexFlags BuildFlags = ESkeletalMeshVertexFlags::None ; bool bBuildHalfEdgeBuffers = false ; } ; void)",
    "insertText": "BuildFromLODModel(const FSkeletalMeshLODModel* InLODModel, TConstArrayView<FSkeletalMeshVertexAttributeInfo> InVertexAttributeInfos = {}, const FBuildSettings& InBuildSettings = FBuildSettings{ESkeletalMeshVertexFlags::None, false})"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (# endif uint32)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "GetVertexBufferMaxBoneInfluences()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetVertexBufferMaxBoneInfluences()"
  },
  {
    "label": "DoesVertexBufferUse16BitBoneIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesVertexBufferUse16BitBoneIndex()"
  },
  {
    "label": "GetNumTexCoords()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumTexCoords()"
  },
  {
    "label": "GetSkinWeightVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} FSkinWeightVertexBuffer*)",
    "insertText": "GetSkinWeightVertexBuffer()"
  },
  {
    "label": "GetDefaultOverrideBuffer()",
    "kind": "Method",
    "detail": "Function (FSkinWeightVertexBuffer* OverrideBuffer = SkinWeightProfilesData .)",
    "insertText": "GetDefaultOverrideBuffer()"
  },
  {
    "label": "HasClothData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasClothData()"
  },
  {
    "label": "GetSectionFromVertexIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSectionFromVertexIndex(int32 InVertIndex, int32& OutSectionIndex, int32& OutVertIndex)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "GetCPUAccessMemoryOverhead()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetCPUAccessMemoryOverhead()"
  },
  {
    "label": "FindSectionIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindSectionIndex(const FSkelMeshRenderSection& Section)"
  },
  {
    "label": "NumNonClothingSections()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumNonClothingSections()"
  },
  {
    "label": "IncrementMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementMemoryStats(bool bNeedsVertexColors)"
  },
  {
    "label": "DecrementMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementMemoryStats()"
  },
  {
    "label": "ShouldForceKeepCPUResources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldForceKeepCPUResources()"
  },
  {
    "label": "ShouldKeepCPUResources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldKeepCPUResources(const USkinnedAsset* SkinnedAsset, int32 LODIdx, bool bForceKeep)"
  },
  {
    "label": "GenerateClassStripFlags()",
    "kind": "Method",
    "detail": "Function (private : enum EClassDataStripFlag : uint8 { CDSF_AdjacencyData_DEPRECATED = 1,CDSF_MinLodData = 2 } ; uint8)",
    "insertText": "GenerateClassStripFlags(FArchive& Ar, const USkinnedAsset* OwnerMesh, int32 LODIdx)"
  },
  {
    "label": "IsLODCookedOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLODCookedOut(const ITargetPlatform* TargetPlatform, const USkinnedAsset* SkinnedAsset, bool bIsBelowMinLOD)"
  },
  {
    "label": "IsLODInlined()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLODInlined(const ITargetPlatform* TargetPlatform, const USkinnedAsset* SkinnedAsset, int32 LODIdx, bool bIsBelowMinLOD)"
  },
  {
    "label": "GetNumOptionalLODsAllowed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumOptionalLODsAllowed(const ITargetPlatform* TargetPlatform, const USkinnedAsset* SkinnedAsset)"
  }
]