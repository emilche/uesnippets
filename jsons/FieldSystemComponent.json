[
  {
    "label": "FFieldSystemSampleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldSystemSampleData"
  },
  {
    "label": "FChaosSolversModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosSolversModule"
  },
  {
    "label": "UFieldSystemComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFieldSystemComponent"
  },
  {
    "label": "FFieldSystemEditorCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldSystemEditorCommands"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Components / PrimitiveComponent . h \" # include \" Field / FieldSystem . h \" # include \" Field / FieldSystemObjects . h \" # include \" Field / FieldSystemAsset . h \" # include \" Field / FieldSystemComponentTypes . h \" # include \" Chaos / ChaosSolverActor . h \" # include \" FieldSystemComponent . generated . h \" struct FFieldSystemSampleData ; class FChaosSolversModule ;)",
    "insertText": "UCLASS(meta = (BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "HasAnySockets()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HasAnySockets()"
  },
  {
    "label": "SetFieldSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFieldSystem(UFieldSystem* FieldSystemIn)"
  },
  {
    "label": "GetFieldSystem()",
    "kind": "Method",
    "detail": "Function (FieldSystem = FieldSystemIn ; } const UFieldSystem*)",
    "insertText": "GetFieldSystem()"
  },
  {
    "label": "GetConstructionFields()",
    "kind": "Method",
    "detail": "Function (const TArray<FFieldSystemCommand>&)",
    "insertText": "GetConstructionFields()"
  },
  {
    "label": "GetPhysicsSolvers()",
    "kind": "Method",
    "detail": "Function (TArray<Chaos::FPhysicsSolverBase*>)",
    "insertText": "GetPhysicsSolvers()"
  },
  {
    "label": "BuildFieldCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildFieldCommand(bool Enabled, EFieldPhysicsType Target, UFieldSystemMetaData* MetaData, UFieldNodeBase* Field, const bool IsTransient)"
  },
  {
    "label": "DispatchFieldCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchFieldCommand(const FFieldSystemCommand& InCommand, const bool IsTransient)"
  },
  {
    "label": "ClearFieldCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFieldCommands()"
  },
  {
    "label": "OnCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreatePhysicsState()"
  },
  {
    "label": "OnDestroyPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestroyPhysicsState()"
  },
  {
    "label": "ShouldCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreatePhysicsState()"
  },
  {
    "label": "HasValidPhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidPhysicsState()"
  }
]