[
  {
    "label": "FSceneTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneTextures"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FSceneTextureUniformParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneTextureUniformParameters"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDBufferTexturesDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDBufferTexturesDesc"
  },
  {
    "label": "FDBufferTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDBufferTextures"
  },
  {
    "label": "GetDBufferMaskTechnique()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderGraphDefinitions . h \" # include \" RHIDefinitions . h \" # include \" ShaderParameterMacros . h \" struct FSceneTextures ; class FSceneViewFamily ; class FSceneTextureUniformParameters ; class FViewInfo ; enum class EDecalDBufferMaskTechnique { Disabled,PerPixel,WriteMask,} ; EDecalDBufferMaskTechnique)",
    "insertText": "GetDBufferMaskTechnique(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (struct FDBufferTexturesDesc { FRDGTextureDesc DBufferADesc ; FRDGTextureDesc DBufferBDesc ; FRDGTextureDesc DBufferCDesc ; FRDGTextureDesc DBufferATexArrayDesc ; FRDGTextureDesc DBufferBTexArrayDesc ; FRDGTextureDesc DBufferCTexArrayDesc ; FRDGTextureDesc DBufferMaskDesc ; } ; struct FDBufferTextures { bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetDBufferTexturesDesc()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef DBufferA = nullptr ; FRDGTextureRef DBufferB = nullptr ; FRDGTextureRef DBufferC = nullptr ; FRDGTextureRef DBufferATexArray = nullptr ; FRDGTextureRef DBufferBTexArray = nullptr ; FRDGTextureRef DBufferCTexArray = nullptr ; FRDGTextureRef DBufferMask = nullptr ; } ; FDBufferTexturesDesc)",
    "insertText": "GetDBufferTexturesDesc(FIntPoint Extent, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "CreateDBufferTextures()",
    "kind": "Method",
    "detail": "Function (FDBufferTextures)",
    "insertText": "CreateDBufferTextures(FRDGBuilder& GraphBuilder, FIntPoint Extent, EShaderPlatform ShaderPlatform, const bool bIsMobileMultiView = false)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FDBufferParameters, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, DBufferATexture) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, DBufferBTexture) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, DBufferCTexture) SHADER_PARAMETER_RDG_TEXTURE(Texture2DArray, DBufferATextureArray) SHADER_PARAMETER_RDG_TEXTURE(Texture2DArray, DBufferBTextureArray) SHADER_PARAMETER_RDG_TEXTURE(Texture2DArray, DBufferCTextureArray) SHADER_PARAMETER_RDG_TEXTURE(Texture2D<uint>, DBufferRenderMask) SHADER_PARAMETER_SAMPLER(SamplerState, DBufferATextureSampler) SHADER_PARAMETER_SAMPLER(SamplerState, DBufferBTextureSampler) SHADER_PARAMETER_SAMPLER(SamplerState, DBufferCTextureSampler) END_SHADER_PARAMETER_STRUCT() FDBufferParameters GetDBufferParameters(FRDGBuilder& GraphBuilder, const FDBufferTextures& DBufferTextures, EShaderPlatform ShaderPlatform, const bool bIsMobileMultiView = false)"
  }
]