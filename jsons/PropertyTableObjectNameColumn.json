[
  {
    "label": "FPropertyTableObjectNameColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyTableObjectNameColumn"
  },
  {
    "label": "FPropertyPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyPath"
  },
  {
    "label": "IPropertyTableCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableCell"
  },
  {
    "label": "IPropertyTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableRow"
  },
  {
    "label": "IPropertyTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTable"
  },
  {
    "label": "FCompareRowByObjectNameAscending",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareRowByObjectNameAscending"
  },
  {
    "label": "FCompareRowByObjectNameDescending",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareRowByObjectNameDescending"
  },
  {
    "label": "FCompareRowByColumnBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareRowByColumnBase"
  },
  {
    "label": "FPropertyTableObjectNameColumn()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GameFramework / Actor . h \" # include \" ObjectPropertyNode . h \" # include \" PropertyPath . h \" # include \" IPropertyTableColumn . h \" # include \" IPropertyTable . h \" # include \" IPropertyTableCell . h \" # include \" IPropertyTableRow . h \" # include \" Presentation / PropertyTable / PropertyTableColumn . h \" # include \" Presentation / PropertyTable / DataSource . h \" # include \" Presentation / PropertyTable / PropertyTableObjectNameCell . h \" # include \" Engine / BlueprintGeneratedClass . h \" # define LOCTEXT_NAMESPACE \" ObjectNameColumnHeader \" class FPropertyTableObjectNameColumn : public TSharedFromThis<FPropertyTableObjectNameColumn>,public IPropertyTableColumn { public :)",
    "insertText": "FPropertyTableObjectNameColumn(const TSharedRef< IPropertyTable >& InTable ) : Table( InTable ) , Cells() , Width( 2.0f ) , bIsHidden( false)"
  },
  {
    "label": "FPropertyTableObjectNameColumn()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPropertyTableObjectNameColumn()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetId()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetDataSource()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<IDataSource>)",
    "insertText": "GetDataSource()"
  },
  {
    "label": "GetPartialPath()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class FPropertyPath>)",
    "insertText": "GetPartialPath()"
  },
  {
    "label": "GetCell()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class IPropertyTableCell>)",
    "insertText": "GetCell(const TSharedRef< class IPropertyTableRow >& Row)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IPropertyTableCell>* CellPtr = Cells .)",
    "insertText": "Find(Row)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "Add(Row, Cell)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "Remove(Row)"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class IPropertyTable>)",
    "insertText": "GetTable()"
  },
  {
    "label": "CanSelectCells()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSelectCells()"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetWidth()"
  },
  {
    "label": "IsHidden()",
    "kind": "Method",
    "detail": "Function (Width = InWidth ; } bool)",
    "insertText": "IsHidden()"
  },
  {
    "label": "IsFrozen()",
    "kind": "Method",
    "detail": "Function (bIsHidden = InIsHidden ; } bool)",
    "insertText": "IsFrozen()"
  },
  {
    "label": "CanSortBy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSortBy()"
  },
  {
    "label": "FCompareRowByObjectNameAscending()",
    "kind": "Method",
    "detail": "Function (struct FCompareRowByObjectNameAscending { public :)",
    "insertText": "FCompareRowByObjectNameAscending(const TSharedRef< FPropertyTableObjectNameColumn >& Column) : NameColumn(Column)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const TSharedRef< IPropertyTableRow >& Lhs, const TSharedRef< IPropertyTableRow >& Rhs)"
  },
  {
    "label": "FCompareRowByObjectNameDescending()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FPropertyTableObjectNameColumn> NameColumn ; } ; struct FCompareRowByObjectNameDescending { public :)",
    "insertText": "FCompareRowByObjectNameDescending(const TSharedRef< FPropertyTableObjectNameColumn >& Column) : Comparer(Column)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} private : const FCompareRowByObjectNameAscending Comparer ; } ;)",
    "insertText": "if(PrimarySortMode == EColumnSortMode::None)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Rows .)",
    "insertText": "Sort(FCompareRowByObjectNameAscending( SharedThis( this ) ))"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} else { Rows .)",
    "insertText": "Sort(FCompareRowByObjectNameDescending( SharedThis( this ) ))"
  },
  {
    "label": "GetPropertySorter()",
    "kind": "Method",
    "detail": "Function (} } TSharedPtr<struct FCompareRowByColumnBase>)",
    "insertText": "GetPropertySorter(const FProperty* Property, EColumnSortMode::Type SortMode)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DERIVED_EVENT(FPropertyTableColumn, IPropertyTableColumn::FFrozenStateChanged, FFrozenStateChanged)"
  },
  {
    "label": "OnFrozenStateChanged()",
    "kind": "Method",
    "detail": "Function (FFrozenStateChanged*)",
    "insertText": "OnFrozenStateChanged()"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (FString ObjectName ; FString Suffix =)",
    "insertText": "GetTable()->GetRootPath()->ExtendPath( Row->GetPartialPath() )->ToString()"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (Suffix =)",
    "insertText": "FString(TEXT(\"->\"))"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (} const UObject* const Object =)",
    "insertText": "GetTable()->GetObjectPropertyNode( SharedThis( this ), Row )->GetUObject( 0)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (UClass* ObjectClass = Object ->)",
    "insertText": "GetClass()"
  },
  {
    "label": "UBlueprintGeneratedClass()",
    "kind": "Method",
    "detail": "Function (const UBlueprintGeneratedClass* const BlueprintGeneratedClass = Cast<)",
    "insertText": "UBlueprintGeneratedClass(ObjectClass)"
  },
  {
    "label": "HasAnyFlags()",
    "kind": "Method",
    "detail": "Function (const bool IsCDO = Object ->)",
    "insertText": "HasAnyFlags(RF_ClassDefaultObject)"
  },
  {
    "label": "GetFName()",
    "kind": "Method",
    "detail": "Function (ObjectName = BlueprintGeneratedClass -> ClassGeneratedBy ->)",
    "insertText": "GetFName().ToString()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Object->IsA( AActor::StaticClass() ))"
  },
  {
    "label": "AActor()",
    "kind": "Method",
    "detail": "Function (ObjectName = Cast<const)",
    "insertText": "AActor(Object )->GetActorLabel()"
  }
]