[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SingleSampleMetric()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_SINGLE_SAMPLE_METRICS_H_ # define BASE_METRICS_SINGLE_SAMPLE_METRICS_H_ # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / metrics / histogram_base . h \" namespace base { class BASE_EXPORT SingleSampleMetric { public : ~)",
    "insertText": "SingleSampleMetric()"
  },
  {
    "label": "SetSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSample(HistogramBase::Sample sample)"
  },
  {
    "label": "SingleSampleMetricsFactory()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT SingleSampleMetricsFactory { public : ~)",
    "insertText": "SingleSampleMetricsFactory()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (SingleSampleMetricsFactory*)",
    "insertText": "Get()"
  },
  {
    "label": "SetFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFactory(std::unique_ptr<SingleSampleMetricsFactory> factory)"
  },
  {
    "label": "DeleteFactoryForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFactoryForTesting()"
  },
  {
    "label": "CreateCustomCountsMetric()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SingleSampleMetric>)",
    "insertText": "CreateCustomCountsMetric(const std::string& histogram_name, HistogramBase::Sample min, HistogramBase::Sample max, uint32_t bucket_count)"
  },
  {
    "label": "DefaultSingleSampleMetricsFactory()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT DefaultSingleSampleMetricsFactory : public SingleSampleMetricsFactory { public :)",
    "insertText": "DefaultSingleSampleMetricsFactory()"
  },
  {
    "label": "DefaultSingleSampleMetricsFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultSingleSampleMetricsFactory(const DefaultSingleSampleMetricsFactory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DefaultSingleSampleMetricsFactory&)",
    "insertText": "operator(const DefaultSingleSampleMetricsFactory&)"
  },
  {
    "label": "DefaultSingleSampleMetric()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT DefaultSingleSampleMetric : public SingleSampleMetric { public :)",
    "insertText": "DefaultSingleSampleMetric(const std::string& histogram_name, HistogramBase::Sample min, HistogramBase::Sample max, uint32_t bucket_count, int32_t flags)"
  },
  {
    "label": "DefaultSingleSampleMetric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultSingleSampleMetric(const DefaultSingleSampleMetric&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DefaultSingleSampleMetric&)",
    "insertText": "operator(const DefaultSingleSampleMetric&)"
  },
  {
    "label": "DefaultSingleSampleMetric()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DefaultSingleSampleMetric()"
  }
]