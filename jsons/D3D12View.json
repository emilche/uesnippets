[
  {
    "label": "FD3D12Buffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Buffer"
  },
  {
    "label": "FD3D12Texture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Texture"
  },
  {
    "label": "FD3D12RayTracingScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingScene"
  },
  {
    "label": "FD3D12ResidencyHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ResidencyHandle"
  },
  {
    "label": "FD3D12DefaultViews",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12DefaultViews"
  },
  {
    "label": "FD3D12SamplerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SamplerState"
  },
  {
    "label": "FD3D12ViewRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ViewRange"
  },
  {
    "label": "FD3D12ResourceLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ResourceLayout"
  },
  {
    "label": "FD3D12ViewSubset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ViewSubset"
  },
  {
    "label": "FIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIterator"
  },
  {
    "label": "FD3D12View",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12View"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FResourceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourceInfo"
  },
  {
    "label": "TD3D12View",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TD3D12View"
  },
  {
    "label": "FD3D12ConstantBufferView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ConstantBufferView"
  },
  {
    "label": "FD3D12ShaderResourceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ShaderResourceView"
  },
  {
    "label": "FD3D12UnorderedAccessView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12UnorderedAccessView"
  },
  {
    "label": "FD3D12RenderTargetView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RenderTargetView"
  },
  {
    "label": "FD3D12DepthStencilView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DepthStencilView"
  },
  {
    "label": "FD3D12DeferredInitView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12DeferredInitView"
  },
  {
    "label": "FD3D12ShaderResourceView_RHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ShaderResourceView_RHI"
  },
  {
    "label": "FD3D12UnorderedAccessView_RHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12UnorderedAccessView_RHI"
  },
  {
    "label": "TD3D12ResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TD3D12ResourceTraits"
  },
  {
    "label": "FD3D12ViewRange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" D3D12RHICommon . h \" # include \" D3D12Descriptors . h \" # include \" D3D12Resources . h \" # include \" RHIResources . h \" class FD3D12Buffer ; class FD3D12Texture ; class FD3D12RayTracingScene ; struct FD3D12ResidencyHandle ; struct FD3D12DefaultViews { FD3D12OfflineDescriptor NullSRV ; FD3D12OfflineDescriptor NullRTV ; FD3D12OfflineDescriptor NullUAV ; FD3D12OfflineDescriptor NullCBV ; FD3D12OfflineDescriptor NullDSV ; TRefCountPtr<class FD3D12SamplerState> DefaultSampler ; } ; struct FD3D12ViewRange {)",
    "insertText": "FD3D12ViewRange()"
  },
  {
    "label": "FD3D12ViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12ViewRange(D3D12_CONSTANT_BUFFER_VIEW_DESC const& ViewDesc)"
  },
  {
    "label": "FD3D12ViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12ViewRange(D3D12_SHADER_RESOURCE_VIEW_DESC const& ViewDesc)"
  },
  {
    "label": "FD3D12ViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12ViewRange(D3D12_UNORDERED_ACCESS_VIEW_DESC const& ViewDesc)"
  },
  {
    "label": "FD3D12ViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12ViewRange(D3D12_RENDER_TARGET_VIEW_DESC const& ViewDesc)"
  },
  {
    "label": "FD3D12ViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12ViewRange(D3D12_DEPTH_STENCIL_VIEW_DESC const& ViewDesc)"
  },
  {
    "label": "DoesNotOverlap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesNotOverlap(FD3D12ViewRange const& Other)"
  },
  {
    "label": "MostDetailedMip()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "MostDetailedMip()"
  },
  {
    "label": "FD3D12ResourceLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12ResourceLayout(FD3D12ResourceDesc const& ResourceDesc) : NumArraySlices(ResourceDesc.DepthOrArraySize) , NumPlanes (UE::DXGIUtilities::GetPlaneCount(ResourceDesc.Format)) , NumMips (ResourceDesc.MipLevels)"
  },
  {
    "label": "FD3D12ViewSubset()",
    "kind": "Method",
    "detail": "Function (} uint16 NumArraySlices = 0 ; uint8 NumPlanes = 0 ; uint8 NumMips = 0 ; } ; struct FD3D12ViewSubset {)",
    "insertText": "FD3D12ViewSubset()"
  },
  {
    "label": "FD3D12ViewSubset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12ViewSubset(FD3D12ResourceLayout const& Layout, FD3D12ViewRange const& Range) : Layout(Layout) , Range (Range)"
  },
  {
    "label": "IsWholeResource()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsWholeResource()"
  },
  {
    "label": "SelectPlane()",
    "kind": "Method",
    "detail": "Function (} FD3D12ViewSubset)",
    "insertText": "SelectPlane(uint32 PlaneIndex)"
  },
  {
    "label": "FIterator()",
    "kind": "Method",
    "detail": "Function (FD3D12ViewSubset Copy {* this } ; Copy . Range . Plane = { PlaneIndex,1 } ; return Copy ; } class FIterator final { public :)",
    "insertText": "FIterator(FD3D12ViewSubset const& ViewSubset, uint8 MipSlice, uint16 ArraySlice, uint8 PlaneSlice) : MipMax (ViewSubset.Range.Mip.Num) , ArrayMax (ViewSubset.Range.Array.Num) , ArrayStride(ViewSubset.Layout.NumMips) , PlaneStride(ViewSubset.Layout.NumMips * (ViewSubset.Layout.NumArraySlices - ViewSubset.Range.Array.Num))"
  },
  {
    "label": "D3D12CalcSubresource()",
    "kind": "Method",
    "detail": "Function (MipRangeStart =)",
    "insertText": "D3D12CalcSubresource(MipSlice, ArraySlice, PlaneSlice, ViewSubset.Layout.NumMips, ViewSubset.Layout.NumArraySlices)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MipOffset = 0 ; MipRangeStart + = ArrayStride ;)",
    "insertText": "if(++ArrayOffset == ArrayMax)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FIterator const& RHS)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} private : uint32 const MipMax ; uint32 const ArrayMax ; uint32 const ArrayStride ; uint32 const PlaneStride ; uint32 MipRangeStart ; uint32 MipOffset = 0 ; uint32 ArrayOffset = 0 ; } ; FIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FIterator)",
    "insertText": "end()"
  },
  {
    "label": "FResourceInfo()",
    "kind": "Method",
    "detail": "Function (} FD3D12ResourceLayout Layout ; FD3D12ViewRange Range ; } ; class FD3D12View : public FD3D12DeviceChild,public FD3D12ShaderResourceRenameListener { typedef FD3D12OfflineDescriptor FD3D12DefaultViews::* FNullDescPtr ; public : enum class EReason { InitialCreate,UpdateOrRename,} ; struct FResourceInfo { FD3D12BaseShaderResource* BaseResource = nullptr ; FD3D12ResourceLocation* ResourceLocation = nullptr ; FD3D12Resource* Resource = nullptr ;)",
    "insertText": "FResourceInfo()"
  },
  {
    "label": "FResourceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FResourceInfo(FD3D12BaseShaderResource* InBaseResource) : BaseResource (InBaseResource) , ResourceLocation(InBaseResource ? &InBaseResource->ResourceLocation : nullptr) , Resource (InBaseResource ? InBaseResource->GetResource() : nullptr)"
  },
  {
    "label": "FResourceInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FResourceInfo(FD3D12ResourceLocation* InResourceLocation) : BaseResource (nullptr) , ResourceLocation(InResourceLocation) , Resource (InResourceLocation ? InResourceLocation->GetResource() : nullptr)"
  },
  {
    "label": "GetResource()",
    "kind": "Method",
    "detail": "Function (} } ; FD3D12Resource*)",
    "insertText": "GetResource()"
  },
  {
    "label": "GetViewSubset()",
    "kind": "Method",
    "detail": "Function (} FD3D12ViewSubset const&)",
    "insertText": "GetViewSubset()"
  },
  {
    "label": "GetBindlessHandle()",
    "kind": "Method",
    "detail": "Function (} # else FRHIDescriptorHandle)",
    "insertText": "GetBindlessHandle()"
  },
  {
    "label": "IsBindless()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBindless()"
  },
  {
    "label": "FD3D12View()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12View()"
  },
  {
    "label": "UpdateDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDescriptor()"
  },
  {
    "label": "UpdateResourceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResourceInfo(FResourceInfo const& InResource, FNullDescPtr NullDescriptor)"
  },
  {
    "label": "CreateView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateView(FResourceInfo const& InResource, FNullDescPtr NullDescriptor)"
  },
  {
    "label": "UpdateView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateView(FD3D12ContextArray const& Contexts, const FResourceInfo& InResource, FNullDescPtr NullDescriptor)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "UpdateBindlessSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBindlessSlot(FD3D12ContextArray const& Contexts)"
  },
  {
    "label": "TD3D12View()",
    "kind": "Method",
    "detail": "Function (FResourceInfo ResourceInfo ; FD3D12ViewSubset ViewSubset ; FD3D12OfflineDescriptor OfflineCpuHandle ; # if PLATFORM_SUPPORTS_BINDLESS_RENDERING FRHIDescriptorHandle BindlessHandle ; bool bFirstLinkedObject ; # endif ERHIDescriptorHeapType const HeapType ; } ; template<TParent,TDesc> class TD3D12View : public FD3D12View { protected : TDesc D3DViewDesc ;)",
    "insertText": "TD3D12View(FD3D12Device* InDevice, ERHIDescriptorHeapType InHeapType, TD3D12View* FirstLinkedObject) : FD3D12View(InDevice, InHeapType, FirstLinkedObject)"
  },
  {
    "label": "CreateView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateView(FResourceInfo const& InResource, TDesc const& InD3DViewDesc)"
  },
  {
    "label": "CreateView()",
    "kind": "Method",
    "detail": "Function (D3DViewDesc = InD3DViewDesc ; ViewSubset . Range = InD3DViewDesc ;)",
    "insertText": "CreateView(InResource, TParent::Null)"
  },
  {
    "label": "UpdateView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateView(FD3D12ContextArray const& Contexts, FResourceInfo const& InResource, TDesc const& InD3DViewDesc)"
  },
  {
    "label": "UpdateView()",
    "kind": "Method",
    "detail": "Function (D3DViewDesc = InD3DViewDesc ; ViewSubset . Range = InD3DViewDesc ;)",
    "insertText": "UpdateView(Contexts, InResource, TParent::Null)"
  },
  {
    "label": "ResourceRenamed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResourceRenamed(FD3D12ContextArray const& Contexts, FD3D12BaseShaderResource* InRenamedResource, FD3D12ResourceLocation* InNewResourceLocation)"
  },
  {
    "label": "UpdateView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateView(Contexts, InRenamedResource, D3DViewDesc)"
  },
  {
    "label": "GetD3DDesc()",
    "kind": "Method",
    "detail": "Function (} public : TDesc const&)",
    "insertText": "GetD3DDesc()"
  },
  {
    "label": "CreateView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateView(FResourceInfo const& InResource, uint32 InOffset, uint32 InAlignedSize)"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (uint32 Offset ; } ; class FD3D12ShaderResourceView : public TD3D12View<FD3D12ShaderResourceView,D3D12_SHADER_RESOURCE_VIEW_DESC> { public : FD3D12OfflineDescriptor FD3D12DefaultViews::* Null {& FD3D12DefaultViews::NullSRV } ; enum class EFlags : uint8 { None = 0,SkipFastClearFinalize = 1<<0,} ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(EFlags) FD3D12ShaderResourceView(FD3D12Device* InDevice, FD3D12ShaderResourceView* FirstLinkedObject)"
  },
  {
    "label": "FD3D12ShaderResourceView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12ShaderResourceView(FD3D12Device* InDevice, FD3D12ShaderResourceView* FirstLinkedObject, FD3D12RayTracingScene* InRayTracingScene)"
  },
  {
    "label": "CreateView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateView(FResourceInfo const& InResource, D3D12_SHADER_RESOURCE_VIEW_DESC const& InD3DViewDesc, EFlags InFlags)"
  },
  {
    "label": "UpdateView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateView(FD3D12ContextArray const& Contexts, const FResourceInfo& InResource, const D3D12_SHADER_RESOURCE_VIEW_DESC& InD3DViewDesc, EFlags InFlags)"
  },
  {
    "label": "GetSkipFastClearFinalize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSkipFastClearFinalize()"
  },
  {
    "label": "UpdateMinLODClamp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateMinLODClamp(FD3D12ContextArray const& Contexts, float MinLODClamp)"
  },
  {
    "label": "GetRayTracingScene()",
    "kind": "Method",
    "detail": "Function (FD3D12RayTracingScene*)",
    "insertText": "GetRayTracingScene()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (uint64 OffsetInBytes = 0 ; uint32 StrideInBytes = 0 ; EFlags Flags = EFlags::None ; FD3D12RayTracingScene* RayTracingScene = nullptr ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FD3D12ShaderResourceView::EFlags)"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (public : FD3D12OfflineDescriptor FD3D12DefaultViews::* Null {& FD3D12DefaultViews::NullUAV } ; enum class EFlags : uint8 { None = 0,NeedsCounter = 1<<0 } ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(EFlags) FD3D12UnorderedAccessView(FD3D12Device* InDevice, FD3D12UnorderedAccessView* FirstLinkedObject)"
  },
  {
    "label": "CreateView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateView(FResourceInfo const& InResource, D3D12_UNORDERED_ACCESS_VIEW_DESC const& InD3DViewDesc, EFlags InFlags)"
  },
  {
    "label": "UpdateView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateView(FD3D12ContextArray const& Contexts, const FResourceInfo& InResource, const D3D12_UNORDERED_ACCESS_VIEW_DESC& InD3DViewDesc, EFlags InFlags)"
  },
  {
    "label": "GetCounterResource()",
    "kind": "Method",
    "detail": "Function (FD3D12Resource*)",
    "insertText": "GetCounterResource()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FD3D12Resource> CounterResource ; uint64 OffsetInBytes = 0 ; uint32 StrideInBytes = 0 ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FD3D12UnorderedAccessView::EFlags)"
  },
  {
    "label": "FD3D12RenderTargetView()",
    "kind": "Method",
    "detail": "Function (public : FD3D12OfflineDescriptor FD3D12DefaultViews::* Null {& FD3D12DefaultViews::NullRTV } ;)",
    "insertText": "FD3D12RenderTargetView(FD3D12Device* InDevice, FD3D12RenderTargetView* FirstLinkedObject)"
  },
  {
    "label": "FD3D12DepthStencilView()",
    "kind": "Method",
    "detail": "Function (} ; class FD3D12DepthStencilView final : public TD3D12View<FD3D12DepthStencilView,D3D12_DEPTH_STENCIL_VIEW_DESC> { public : FD3D12OfflineDescriptor FD3D12DefaultViews::* Null {& FD3D12DefaultViews::NullDSV } ;)",
    "insertText": "FD3D12DepthStencilView(FD3D12Device* InDevice, FD3D12DepthStencilView* FirstLinkedObject)"
  },
  {
    "label": "HasDepth()",
    "kind": "Method",
    "detail": "Function (using TD3D12View::CreateView ; bool)",
    "insertText": "HasDepth()"
  },
  {
    "label": "HasStencil()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasStencil()"
  },
  {
    "label": "GetDepthOnlySubset()",
    "kind": "Method",
    "detail": "Function (} FD3D12ViewSubset)",
    "insertText": "GetDepthOnlySubset()"
  },
  {
    "label": "GetStencilOnlySubset()",
    "kind": "Method",
    "detail": "Function (} FD3D12ViewSubset)",
    "insertText": "GetStencilOnlySubset()"
  },
  {
    "label": "CreateViews()",
    "kind": "Method",
    "detail": "Function (} ; template<TParent> struct FD3D12DeferredInitView : public FD3D12LinkedAdapterObject<TParent> { void)",
    "insertText": "CreateViews(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (auto InitLambda = [)",
    "insertText": "this(FRHICommandListBase&)"
  },
  {
    "label": "CreateView()",
    "kind": "Method",
    "detail": "Function (LinkedView .)",
    "insertText": "CreateView()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "if(RHICmdList.IsTopOfPipe())"
  },
  {
    "label": "EnqueueLambda()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "EnqueueLambda(MoveTemp(InitLambda))"
  },
  {
    "label": "RHIThreadFence()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "RHIThreadFence(true)"
  },
  {
    "label": "InitLambda()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "InitLambda(RHICmdList)"
  },
  {
    "label": "FD3D12ShaderResourceView_RHI()",
    "kind": "Method",
    "detail": "Function (} } } ; class FD3D12ShaderResourceView_RHI : public FRHIShaderResourceView,public FD3D12ShaderResourceView,public FD3D12DeferredInitView<FD3D12ShaderResourceView_RHI> { public :)",
    "insertText": "FD3D12ShaderResourceView_RHI(FD3D12Device* InDevice, FRHIViewableResource* InResource, FRHIViewDesc const& InViewDesc, FD3D12ShaderResourceView_RHI* FirstLinkedObject)"
  },
  {
    "label": "UpdateView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateView(FD3D12ContextArray const& Contexts)"
  },
  {
    "label": "ResourceRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResourceRenamed(FD3D12ContextArray const& Contexts, FD3D12BaseShaderResource*, FD3D12ResourceLocation*)"
  },
  {
    "label": "UpdateView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateView(Contexts)"
  },
  {
    "label": "FD3D12UnorderedAccessView_RHI()",
    "kind": "Method",
    "detail": "Function (} } ; class FD3D12UnorderedAccessView_RHI : public FRHIUnorderedAccessView,public FD3D12UnorderedAccessView,public FD3D12DeferredInitView<FD3D12UnorderedAccessView_RHI> { public :)",
    "insertText": "FD3D12UnorderedAccessView_RHI(FD3D12Device* InDevice, FRHIViewableResource* InResource, FRHIViewDesc const& InViewDesc, FD3D12UnorderedAccessView_RHI* FirstLinkedObject)"
  }
]