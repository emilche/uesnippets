[
  {
    "label": "SameLeafConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameLeafConfig"
  },
  {
    "label": "PointIndexLeafNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointIndexLeafNode"
  },
  {
    "label": "PointArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointArray"
  },
  {
    "label": "PointIndexIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointIndexIterator"
  },
  {
    "label": "PointIndexIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointIndexIterator"
  },
  {
    "label": "WeightedAverageAccumulator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WeightedAverageAccumulator"
  },
  {
    "label": "WeightedAverageAccumulator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WeightedAverageAccumulator"
  },
  {
    "label": "PointIndexFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointIndexFilter"
  },
  {
    "label": "PointIndexFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointIndexFilter"
  },
  {
    "label": "ValidPartitioningOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValidPartitioningOp"
  },
  {
    "label": "PopulateLeafNodesOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PopulateLeafNodesOp"
  },
  {
    "label": "BBoxFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BBoxFilter"
  },
  {
    "label": "RadialRangeFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RadialRangeFilter"
  },
  {
    "label": "RadialRangeFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RadialRangeFilter"
  },
  {
    "label": "PointIndexLeafNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointIndexLeafNode"
  },
  {
    "label": "compatible",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "compatible"
  },
  {
    "label": "PointIndexLeafNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointIndexLeafNode"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "PointIndexLeafNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointIndexLeafNode"
  },
  {
    "label": "SameLeafConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameLeafConfig"
  },
  {
    "label": "createPointIndexGrid()",
    "kind": "Method",
    "detail": "Function (GridT::Ptr)",
    "insertText": "createPointIndexGrid(const PointArrayT& points, double voxelSize)"
  },
  {
    "label": "createPointIndexGrid()",
    "kind": "Method",
    "detail": "Function (GridT::Ptr)",
    "insertText": "createPointIndexGrid(const PointArrayT& points, const math::Transform& xform)"
  },
  {
    "label": "isValidPartition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidPartition(const PointArrayT& points, const GridT& grid)"
  },
  {
    "label": "getValidPointIndexGrid()",
    "kind": "Method",
    "detail": "Function (GridT::ConstPtr)",
    "insertText": "getValidPointIndexGrid(const PointArrayT& points, const typename GridT::ConstPtr& grid)"
  },
  {
    "label": "getValidPointIndexGrid()",
    "kind": "Method",
    "detail": "Function (GridT::Ptr)",
    "insertText": "getValidPointIndexGrid(const PointArrayT& points, const typename GridT::Ptr& grid)"
  },
  {
    "label": "PointIndexIterator()",
    "kind": "Method",
    "detail": "Function (indices)",
    "insertText": "PointIndexIterator(const Coord& ijk, ConstAccessor& acc)"
  },
  {
    "label": "searchAndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "searchAndUpdate(const Coord& ijk, ConstAccessor& acc)"
  },
  {
    "label": "searchAndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "searchAndUpdate(const CoordBBox& bbox, ConstAccessor& acc)"
  },
  {
    "label": "searchAndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "searchAndUpdate(const BBoxd& bbox, ConstAccessor& acc,\n        const PointArray& points, const math::Transform& xform)"
  },
  {
    "label": "searchAndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "searchAndUpdate(const Vec3d& center, double radius, ConstAccessor& acc,\n        const PointArray& points, const math::Transform& xform, bool subvoxelAccuracy = true)"
  },
  {
    "label": "worldSpaceSearchAndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "worldSpaceSearchAndUpdate(const BBoxd& bbox, ConstAccessor& acc,\n        const PointArray& points, const math::Transform& xform)"
  },
  {
    "label": "worldSpaceSearchAndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "worldSpaceSearchAndUpdate(const Vec3d& center, double radius, ConstAccessor& acc,\n        const PointArray& points, const math::Transform& xform, bool subvoxelAccuracy = true)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "increment()"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "next()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "PointIndexFilter()",
    "kind": "Method",
    "detail": "Function (constructor)",
    "insertText": "PointIndexFilter(const PointIndexFilter& rhs)"
  },
  {
    "label": "searchAndApply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "searchAndApply(const PosType& center, ScalarType radius, FilterType& op)"
  },
  {
    "label": "LeafNodeT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "LeafNodeT()"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "range(0, leafNodeCount)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeType>)",
    "insertText": "acc(tree)"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "ijk(0)"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "ijk(0)"
  },
  {
    "label": "filter()",
    "kind": "Method",
    "detail": "Function (ValueType>)",
    "insertText": "filter(mRangeList, filteredIndices, bbox, points, xform)"
  },
  {
    "label": "filter()",
    "kind": "Method",
    "detail": "Function (FilterT)",
    "insertText": "filter(mRangeList, filteredIndices,\n        center, radius, points, xform, leafNodeDim, subvoxelAccuracy)"
  },
  {
    "label": "setOffsetOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOffsetOn(Index offset, const ValueType& val)"
  },
  {
    "label": "setOffsetOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOffsetOnly(Index offset, const ValueType& val)"
  },
  {
    "label": "readBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readBuffers(std::istream& is, bool fromHalf = false)"
  },
  {
    "label": "readBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readBuffers(std::istream& is, const CoordBBox&, bool fromHalf = false)"
  }
]