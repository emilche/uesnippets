[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateClippingZone",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateClippingZone"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FSlateClippingState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateClippingState"
  },
  {
    "label": "FClipStateHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClipStateHandle"
  },
  {
    "label": "FSlateCachedClipState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateCachedClipState"
  },
  {
    "label": "FSlateClippingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateClippingManager"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Layout / SlateRect . h \" # include \" Rendering / RenderingCommon . h \" # include \" Clipping . generated . h \")",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Inherit,ClipToBounds,ClipToBoundsWithoutIntersecting)",
    "insertText": "UMETA(DisplayName = \"Clip To Bounds - Without Intersecting (Advanced)\"), ClipToBoundsAlways UMETA(DisplayName = \"Clip To Bounds - Always (Advanced)\"), OnDemand UMETA(DisplayName = \"On Demand (Advanced)\")"
  },
  {
    "label": "FSlateClippingZone()",
    "kind": "Method",
    "detail": "Function (class FSlateClippingZone { public : FVector2f TopLeft ; FVector2f TopRight ; FVector2f BottomLeft ; FVector2f BottomRight ;)",
    "insertText": "FSlateClippingZone(const FShortRect& AxisAlignedRect)"
  },
  {
    "label": "FSlateClippingZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateClippingZone(const FSlateRect& AxisAlignedRect)"
  },
  {
    "label": "FSlateClippingZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateClippingZone(const FGeometry& BoundingGeometry)"
  },
  {
    "label": "FSlateClippingZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateClippingZone(const FPaintGeometry& PaintingGeometry)"
  },
  {
    "label": "FSlateClippingZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateClippingZone(const UE::Slate::FDeprecateVector2DParameter& InTopLeft, const UE::Slate::FDeprecateVector2DParameter& InTopRight, const UE::Slate::FDeprecateVector2DParameter& InBottomLeft, const UE::Slate::FDeprecateVector2DParameter& InBottomRight)"
  },
  {
    "label": "FSlateClippingZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateClippingZone()"
  },
  {
    "label": "GetShouldIntersectParent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetShouldIntersectParent()"
  },
  {
    "label": "GetAlwaysClip()",
    "kind": "Method",
    "detail": "Function (bIntersect = bValue ; } bool)",
    "insertText": "GetAlwaysClip()"
  },
  {
    "label": "IsAxisAligned()",
    "kind": "Method",
    "detail": "Function (bAlwaysClip = bValue ; } bool)",
    "insertText": "IsAxisAligned()"
  },
  {
    "label": "IsNearlyZero()",
    "kind": "Method",
    "detail": "Function (FVector2f Difference = TopLeft - BottomRight ; return)",
    "insertText": "IsNearlyZero(Difference.X) || FMath::IsNearlyZero(Difference.Y)"
  },
  {
    "label": "IsPointInside()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsPointInside(const UE::Slate::FDeprecateVector2DParameter& Point)"
  },
  {
    "label": "Intersect()",
    "kind": "Method",
    "detail": "Function (FSlateClippingZone)",
    "insertText": "Intersect(const FSlateClippingZone& Other)"
  },
  {
    "label": "GetBoundingBox()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetBoundingBox()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSlateClippingZone& Other)"
  },
  {
    "label": "ConvertRelativeToAbsolute()",
    "kind": "Method",
    "detail": "Function (} FSlateClippingZone)",
    "insertText": "ConvertRelativeToAbsolute(const UE::Slate::FDeprecateVector2DParameter& WindowOffset)"
  },
  {
    "label": "Absolute()",
    "kind": "Method",
    "detail": "Function (FSlateClippingZone)",
    "insertText": "Absolute(TopLeft + WindowOffset, TopRight + WindowOffset, BottomLeft + WindowOffset, BottomRight + WindowOffset)"
  },
  {
    "label": "InitializeFromArbitraryPoints()",
    "kind": "Method",
    "detail": "Function (Absolute . bIsAxisAligned = bIsAxisAligned ; Absolute . bIntersect = bIntersect ; Absolute . bAlwaysClip = bAlwaysClip ; return Absolute ; } private : void)",
    "insertText": "InitializeFromArbitraryPoints(const UE::Slate::FDeprecateVector2DParameter& InTopLeft, const UE::Slate::FDeprecateVector2DParameter& InTopRight, const UE::Slate::FDeprecateVector2DParameter& InBottomLeft, const UE::Slate::FDeprecateVector2DParameter& InBottomRight)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (private : uint8 bIsAxisAligned : 1 ; uint8 bIntersect : 1 ; uint8 bAlwaysClip : 1 ; uint32)",
    "insertText": "GetTypeHash(const FSlateClippingZone& Zone)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TIsPODType<FSlateClippingZone> { enum { Value = true } ; } ; enum class EClippingMethod : uint8 { Scissor,Stencil } ; enum class EClippingFlags : uint8 { None = 0,AlwaysClip = 1<<0 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EClippingFlags)"
  },
  {
    "label": "FSlateClippingState()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSlateClippingState(EClippingFlags InFlags = EClippingFlags::None)"
  },
  {
    "label": "SetDebuggingStateIndex()",
    "kind": "Method",
    "detail": "Function (# if WITH_SLATE_DEBUGGING void)",
    "insertText": "SetDebuggingStateIndex(int32 InStateIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(const FSlateClippingZone& Stencil : StencilQuads)"
  },
  {
    "label": "HasZeroArea()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasZeroArea()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "operator(const FSlateClippingState& Other)"
  },
  {
    "label": "GetPrecachedClipIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPrecachedClipIndex()"
  },
  {
    "label": "SetCachedClipState()",
    "kind": "Method",
    "detail": "Function (PrecachedClipIndex = InClipIndex ; } void)",
    "insertText": "SetCachedClipState(const FSlateClippingState* CachedState)"
  },
  {
    "label": "FSlateCachedClipState()",
    "kind": "Method",
    "detail": "Function (CachedClipState = CachedState ; PrecachedClipIndex = INDEX_NONE ; } private : const FSlateClippingState* CachedClipState ; int32 PrecachedClipIndex ; } ; class FSlateCachedClipState { public :)",
    "insertText": "FSlateCachedClipState(const FSlateClippingState& InState) : ClippingState(MakeShared<FSlateClippingState, ESPMode::ThreadSafe>(InState))"
  },
  {
    "label": "FSlateClippingManager()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FSlateClippingState,ESPMode::ThreadSafe> ClippingState ; } ; class FSlateClippingManager { public :)",
    "insertText": "FSlateClippingManager()"
  },
  {
    "label": "PushClip()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PushClip(const FSlateClippingZone& InClippingZone)"
  },
  {
    "label": "PushClippingState()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PushClippingState(const FSlateClippingState& InClipState)"
  },
  {
    "label": "GetClippingIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetClippingIndex()"
  },
  {
    "label": "GetActiveClippingState()",
    "kind": "Method",
    "detail": "Function (TOptional<FSlateClippingState>)",
    "insertText": "GetActiveClippingState()"
  },
  {
    "label": "GetClippingStack()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>&)",
    "insertText": "GetClippingStack()"
  },
  {
    "label": "PopClip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopClip()"
  },
  {
    "label": "PopToStackIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopToStackIndex(int32 Index)"
  },
  {
    "label": "GetClippingIndexAtStackIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetClippingIndexAtStackIndex(int32 StackIndex)"
  },
  {
    "label": "GetStackDepth()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetStackDepth()"
  },
  {
    "label": "GetPreviousClippingState()",
    "kind": "Method",
    "detail": "Function (} const FSlateClippingState*)",
    "insertText": "GetPreviousClippingState(bool bWillIntersectWithParent)"
  },
  {
    "label": "ResetClippingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetClippingState()"
  },
  {
    "label": "CreateClippingState()",
    "kind": "Method",
    "detail": "Function (private : FSlateClippingState)",
    "insertText": "CreateClippingState(const FSlateClippingZone& InClipRect)"
  }
]