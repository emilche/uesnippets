[
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMeshSurfacePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshSurfacePoint"
  },
  {
    "label": "FMeshSurfacePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshSurfacePath"
  },
  {
    "label": "FMeshSurfacePoint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" FrameTypes . h \" # include \" GeometryTypes . h \" # include \" Curve / GeneralPolygon2 . h \" # include \" Selections / MeshFaceSelection . h \" namespace UE { namespace Geometry { class FDynamicMesh3 ; enum class ESurfacePointType { Vertex = 0,Edge = 1,Triangle = 2 } ; struct FMeshSurfacePoint { int ElementID ; FVector3d BaryCoord ; ESurfacePointType PointType ;)",
    "insertText": "FMeshSurfacePoint() : ElementID(-1)"
  },
  {
    "label": "FMeshSurfacePoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMeshSurfacePoint(int TriangleID, const FVector3d& BaryCoord) : ElementID(TriangleID), BaryCoord(BaryCoord), PointType(ESurfacePointType::Triangle)"
  },
  {
    "label": "FMeshSurfacePoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMeshSurfacePoint(int EdgeID, double FirstCoordWt) : ElementID(EdgeID), BaryCoord(FirstCoordWt, 1-FirstCoordWt, 0), PointType(ESurfacePointType::Edge)"
  },
  {
    "label": "FMeshSurfacePoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMeshSurfacePoint(int VertexID) : ElementID(VertexID), BaryCoord(1,0,0), PointType(ESurfacePointType::Vertex)"
  },
  {
    "label": "Pos()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "Pos(const FDynamicMesh3 *Mesh)"
  },
  {
    "label": "FMeshSurfacePath()",
    "kind": "Method",
    "detail": "Function (} ; class FMeshSurfacePath { public : FDynamicMesh3* Mesh ; TArray<TPair<FMeshSurfacePoint,int>> Path ; bool bIsClosed ; public :)",
    "insertText": "FMeshSurfacePath(FDynamicMesh3* Mesh) : Mesh(Mesh), bIsClosed(false)"
  },
  {
    "label": "FMeshSurfacePath()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMeshSurfacePath()"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "IsClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClosed()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Path .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddViaPlanarWalk()",
    "kind": "Method",
    "detail": "Function (bIsClosed = false ; } bool)",
    "insertText": "AddViaPlanarWalk(int StartTri, int StartVID, FVector3d StartPt, int EndTri, int EndVertID, FVector3d EndPt, FVector3d WalkPlaneNormal, TFunction<FVector3d(const FDynamicMesh3*, int)> VertexToPosnFn = nullptr, bool bAllowBackwardsSearch = true, double AcceptEndPtOutsideDist = FMathd::ZeroTolerance, double PtOnPlaneThresholdSq = FMathf::ZeroTolerance*100, double BackwardsTolerance = FMathd::ZeroTolerance*10)"
  },
  {
    "label": "ClosePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClosePath()"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (EOperationValidationResult)",
    "insertText": "Validate()"
  },
  {
    "label": "EmbedProjectedPath()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "EmbedProjectedPath(FDynamicMesh3* Mesh, int StartTriID, FFrame3d Frame, const TArray<FVector2d>& Path2D, TArray<int>& OutPathVertices, TArray<int>& OutVertexCorrespondence, bool bClosePath, FMeshFaceSelection *EnclosedFaces = nullptr, double PtSnapVertexOrEdgeThresholdSq = FMathf::ZeroTolerance*100)"
  },
  {
    "label": "EmbedProjectedPaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmbedProjectedPaths(FDynamicMesh3* Mesh, const TArrayView<const int> StartTriIDs, FFrame3d Frame, const TArrayView<const TArray<FVector2d>> AllPaths, TArray<TArray<int>>& OutAllPathVertices, TArray<TArray<int>>& OutAllVertexCorrespondence, bool bClosePaths, FMeshFaceSelection* EnclosedFaces, double PtSnapVertexOrEdgeThresholdSq = FMathf::ZeroTolerance*100)"
  }
]