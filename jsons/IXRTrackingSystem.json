[
  {
    "label": "IXRCamera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IXRCamera"
  },
  {
    "label": "UARPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UARPin"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FWorldContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldContext"
  },
  {
    "label": "FARSupportInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FARSupportInterface"
  },
  {
    "label": "IOpenXRHMD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOpenXRHMD"
  },
  {
    "label": "FXRSensorProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FXRSensorProperties"
  },
  {
    "label": "IXRTrackingSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IXRTrackingSystem"
  },
  {
    "label": "TSharedPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSharedPtr"
  },
  {
    "label": "IHeadMountedDisplay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHeadMountedDisplay"
  },
  {
    "label": "IStereoRendering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStereoRendering"
  },
  {
    "label": "IXRLoadingScreen",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IXRLoadingScreen"
  },
  {
    "label": "FXRGestureConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FXRGestureConfig"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HeadMountedDisplayTypes . h \" # include \" IIdentifiableXRDevice . h \" # include \" UObject / ObjectMacros . h \" # include \" Features / IModularFeature . h \" # include \" IXRInput . h \" # include \" StereoRendering . h \" class IXRCamera ; class UARPin ; class FSceneViewFamily ; struct FWorldContext ; class FARSupportInterface ; class IOpenXRHMD ; struct FXRSensorProperties { float LeftFOV ; float RightFOV ; float TopFOV ; float BottomFOV ; float NearPlane ; float FarPlane ; float CameraDistance ; } ; class IXRTrackingSystem : public IModularFeature,public IXRSystemIdentifier { public : FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (const FName FeatureName =)",
    "insertText": "FName(TEXT(\"XRTrackingSystem\"))"
  },
  {
    "label": "GetXRSystemFlags()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetXRSystemFlags()"
  },
  {
    "label": "DoesSupportPositionalTracking()",
    "kind": "Method",
    "detail": "Function (const int32 HMDDeviceId = 0 ; bool)",
    "insertText": "DoesSupportPositionalTracking()"
  },
  {
    "label": "DoesSupportLateUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSupportLateUpdate()"
  },
  {
    "label": "EnumerateTrackedDevices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateTrackedDevices(TArray<int32>& OutDevices, EXRTrackedDeviceType Type = EXRTrackedDeviceType::Any)"
  },
  {
    "label": "CountTrackedDevices()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CountTrackedDevices(EXRTrackedDeviceType Type = EXRTrackedDeviceType::Any)"
  },
  {
    "label": "IsTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTracking(int32 DeviceId)"
  },
  {
    "label": "RebaseObjectOrientationAndPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RebaseObjectOrientationAndPosition(FVector& Position, FQuat& Orientation)"
  },
  {
    "label": "GetCurrentPose()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "GetCurrentPose(int32 DeviceId, FQuat& OutOrientation, FVector& OutPosition)"
  },
  {
    "label": "GetRelativeEyePose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRelativeEyePose(int32 DeviceId, int32 ViewIndex, FQuat& OutOrientation, FVector& OutPosition)"
  },
  {
    "label": "GetTrackingSensorProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTrackingSensorProperties(int32 DeviceId, FQuat& OutOrientation, FVector& OutPosition, FXRSensorProperties& OutSensorProperties)"
  },
  {
    "label": "GetTrackedDeviceType()",
    "kind": "Method",
    "detail": "Function (EXRTrackedDeviceType)",
    "insertText": "GetTrackedDeviceType(int32 DeviceId)"
  },
  {
    "label": "GetTrackedDevicePropertySerialNumber()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTrackedDevicePropertySerialNumber(int32 DeviceId)"
  },
  {
    "label": "SetTrackingOrigin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrackingOrigin(EHMDTrackingOrigin::Type NewOrigin)"
  },
  {
    "label": "GetTrackingOrigin()",
    "kind": "Method",
    "detail": "Function (EHMDTrackingOrigin::Type)",
    "insertText": "GetTrackingOrigin()"
  },
  {
    "label": "GetTrackingToWorldTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetTrackingToWorldTransform()"
  },
  {
    "label": "GetWorldToMetersScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWorldToMetersScale()"
  },
  {
    "label": "GetFloorToEyeTrackingTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFloorToEyeTrackingTransform(FTransform& OutFloorToEye)"
  },
  {
    "label": "UpdateTrackingToWorldTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTrackingToWorldTransform(const FTransform& TrackingToWorldOverride)"
  },
  {
    "label": "GetAudioListenerOffset()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetAudioListenerOffset(int32 DeviceId = HMDDeviceId)"
  },
  {
    "label": "ResetOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetOrientation(float Yaw = 0.f)"
  },
  {
    "label": "ResetPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetPosition()"
  },
  {
    "label": "SetBaseRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBaseRotation(const FRotator& BaseRot)"
  },
  {
    "label": "GetBaseRotation()",
    "kind": "Method",
    "detail": "Function (} FRotator)",
    "insertText": "GetBaseRotation()"
  },
  {
    "label": "GetBaseOrientation()",
    "kind": "Method",
    "detail": "Function (} FQuat)",
    "insertText": "GetBaseOrientation()"
  },
  {
    "label": "GetBasePosition()",
    "kind": "Method",
    "detail": "Function (} ; FVector)",
    "insertText": "GetBasePosition()"
  },
  {
    "label": "UpdateExternalTrackingPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateExternalTrackingPosition(const FTransform& ExternalTrackingTransform)"
  },
  {
    "label": "GetXRCamera()",
    "kind": "Method",
    "detail": "Function (} class TSharedPtr<class IXRCamera,ESPMode::ThreadSafe>)",
    "insertText": "GetXRCamera(int32 DeviceId = HMDDeviceId)"
  },
  {
    "label": "GetHMDDevice()",
    "kind": "Method",
    "detail": "Function (class IHeadMountedDisplay*)",
    "insertText": "GetHMDDevice()"
  },
  {
    "label": "IsHeadTrackingAllowedForWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHeadTrackingAllowedForWorld(UWorld & World)"
  },
  {
    "label": "IsHeadTrackingEnforced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHeadTrackingEnforced()"
  },
  {
    "label": "OnBeginPlay()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnBeginPlay(FWorldContext& InWorldContext)"
  },
  {
    "label": "OnEndPlay()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEndPlay(FWorldContext& InWorldContext)"
  },
  {
    "label": "OnStartGameFrame()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnStartGameFrame(FWorldContext& WorldContext)"
  },
  {
    "label": "OnBeginRendering_GameThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBeginRendering_GameThread()"
  },
  {
    "label": "OnLateUpdateApplied_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLateUpdateApplied_RenderThread(FRHICommandListImmediate& RHICmdList, const FTransform& NewRelativeTransform)"
  },
  {
    "label": "GetHMDData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetHMDData(UObject* WorldContext, FXRHMDData& HMDData)"
  },
  {
    "label": "GetMotionControllerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMotionControllerState(UObject* WorldContext, const EXRSpaceType XRSpaceType, const EControllerHand Hand, const EXRControllerPoseType XRControllerPoseType, FXRMotionControllerState& MotionControllerState)"
  },
  {
    "label": "GetHandTrackingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHandTrackingState(UObject* WorldContext, const EXRSpaceType XRSpaceType, const EControllerHand Hand, FXRHandTrackingState& HandTrackingState)"
  },
  {
    "label": "GetCurrentInteractionProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCurrentInteractionProfile(const EControllerHand Hand, FString& InteractionProfile)"
  },
  {
    "label": "GetPlayAreaBounds()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetPlayAreaBounds(EHMDTrackingOrigin::Type Origin)"
  }
]