[
  {
    "label": "FMuscleActivationConstraints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMuscleActivationConstraints"
  },
  {
    "label": "FMuscleActivationConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / XPBDCorotatedConstraints . h \" # include \" GeometryCollection / Facades / CollectionMuscleActivationFacade . h \" namespace Chaos::Softs { using Chaos::TVec3 ; typedef GeometryCollection::Facades::FMuscleActivationFacade Facade ; typedef GeometryCollection::Facades::FMuscleActivationData Data ; template<T,ParticleType> struct FMuscleActivationConstraints {)",
    "insertText": "FMuscleActivationConstraints()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const FSolverParticles& InParticles, const T Dt)"
  },
  {
    "label": "AddMuscles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMuscles(const Facade& FMuscleActivation, int32 VertexOffset = 0, int32 ElementOffset = 0)"
  },
  {
    "label": "GetMuscleActivationData()",
    "kind": "Method",
    "detail": "Function (Data MuscleActivationData = FMuscleActivation .)",
    "insertText": "GetMuscleActivationData(MuscleIdx)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 OldSize = MuscleActivationElement .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (MuscleActivationElement .)",
    "insertText": "SetNum(OldSize + 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MuscleActivationElement [ OldSize ] .)",
    "insertText": "Add(MuscleActivationData.MuscleActivationElement[i] + ElementOffset)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FiberDirectionMatrix [ OldSize ] .)",
    "insertText": "Add(MuscleActivationData.FiberDirectionMatrix[i])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ContractionVolumeScale [ OldSize ] .)",
    "insertText": "Add(MuscleActivationData.ContractionVolumeScale[i])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } MuscleActivationData . OriginInsertionPair [ 0 ] + = VertexOffset ; MuscleActivationData . OriginInsertionPair [ 1 ] + = VertexOffset ; OriginInsertionPair .)",
    "insertText": "Add(MuscleActivationData.OriginInsertionPair)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OriginInsertionRestLength .)",
    "insertText": "Add(MuscleActivationData.OriginInsertionRestLength)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Activation .)",
    "insertText": "Add(0.f)"
  },
  {
    "label": "UpdateLengthBasedMuscleActivation()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "UpdateLengthBasedMuscleActivation(const ParticleType& InParticles)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float AverageFiberLengthScale = 0 ;)",
    "insertText": "for(int32 MuscleIdx = 0; MuscleIdx < MuscleActivationElement.Num(); MuscleIdx++)"
  },
  {
    "label": "CurrentFiberLengthScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CurrentFiberLengthScale(InParticles.X(OriginInsertionPair[MuscleIdx][0]) - InParticles.X(OriginInsertionPair[MuscleIdx][1])).Size()"
  },
  {
    "label": "ApplyMuscleActivation()",
    "kind": "Method",
    "detail": "Function (AverageFiberLengthScale + = CurrentFiberLengthScale ; Activation [ MuscleIdx ] = CurrentFiberLengthScale* CurrentFiberLengthScale ; } } } void)",
    "insertText": "ApplyMuscleActivation(FXPBDCorotatedConstraints<T,ParticleType>& Constraints)"
  },
  {
    "label": "ModifyDmInverseFromFiberLength()",
    "kind": "Method",
    "detail": "Function (Constraints .)",
    "insertText": "ModifyDmInverseFromFiberLength(MuscleActivationElement[MuscleIdx][ElemIdx], Activation[MuscleIdx], FiberDirectionMatrix[MuscleIdx][ElemIdx], ContractionVolumeScale[MuscleIdx][ElemIdx])"
  }
]