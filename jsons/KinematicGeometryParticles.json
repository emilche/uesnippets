[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TKinematicGeometryParticlesImp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TKinematicGeometryParticlesImp"
  },
  {
    "label": "TKinematicGeometryParticlesImp()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / GeometryParticles . h \" # include \" Chaos / KinematicTargets . h \" namespace Chaos { template<class T,int d,EGeometryParticlesSimType SimType> class TKinematicGeometryParticlesImp : public TGeometryParticlesImp<T,d,SimType> { public :)",
    "insertText": "TKinematicGeometryParticlesImp() : TGeometryParticlesImp<T, d, SimType>()"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (this -> MParticleType = EParticleType::Kinematic ;)",
    "insertText": "AddArray(&MV)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MW)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&KinematicTargets)"
  },
  {
    "label": "TKinematicGeometryParticlesImp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TKinematicGeometryParticlesImp(const TKinematicGeometryParticlesImp<T, d, SimType>& Other)"
  },
  {
    "label": "TKinematicGeometryParticlesImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TKinematicGeometryParticlesImp(TKinematicGeometryParticlesImp<T, d, SimType>&& Other) : TGeometryParticlesImp<T, d, SimType>(MoveTemp(Other)), MV(MoveTemp(Other.MV)), MW(MoveTemp(Other.MW)), KinematicTargets(MoveTemp(Other.KinematicTargets))"
  },
  {
    "label": "TKinematicGeometryParticlesImp()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TKinematicGeometryParticlesImp()"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>)",
    "insertText": "GetV(const int32 Index)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetV(const int32 Index, const TVector<T, d>& InV)"
  },
  {
    "label": "GetVf()",
    "kind": "Method",
    "detail": "Function (MV [ Index ] = InV ; } const TVector<FRealSingle,d>)",
    "insertText": "GetVf(const int32 Index)"
  },
  {
    "label": "GetW()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>)",
    "insertText": "GetW(const int32 Index)"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetW(const int32 Index, const TVector<T, d>& InW)"
  },
  {
    "label": "GetWf()",
    "kind": "Method",
    "detail": "Function (MW [ Index ] = InW ; } const TVector<FRealSingle,d>)",
    "insertText": "GetWf(const int32 Index)"
  },
  {
    "label": "KinematicTarget()",
    "kind": "Method",
    "detail": "Function (MW [ Index ] = InW ; } const FKinematicTarget&)",
    "insertText": "KinematicTarget(const int32 Index)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString BaseString = TGeometryParticlesImp<T,d,SimType)",
    "insertText": "ToString(index)"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (} typedef TKinematicGeometryParticleHandle<T,d> THandleType ; const THandleType*)",
    "insertText": "Handle(int32 Index)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (TGeometryParticlesImp<T,d,SimType)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FUE5ReleaseStreamObjectVersion::GUID)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (Ar<<MV<<MW ; } else { TArrayCollectionArray<TVector<FReal,d>> VDouble ; VDouble .)",
    "insertText": "Resize(MV.Num())"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (VDouble [ Index ] = MV [ Index ] ; } TArrayCollectionArray<TVector<FReal,d>> WDouble ; WDouble .)",
    "insertText": "Resize(MW.Num())"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (WDouble [ Index ] = MW [ Index ] ; } Ar<<VDouble<<WDouble ; MV .)",
    "insertText": "Resize(VDouble.Num())"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (MV [ Index ] = VDouble [ Index ] ; } MW .)",
    "insertText": "Resize(WDouble.Num())"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (MW [ Index ] = WDouble [ Index ] ; } } Ar .)",
    "insertText": "UsingCustomVersion(FExternalPhysicsCustomObjectVersion::GUID)"
  },
  {
    "label": "AllV()",
    "kind": "Method",
    "detail": "Function (Ar<<KinematicTargets ; } } TArray<TVector<FRealSingle,d>>&)",
    "insertText": "AllV()"
  }
]