[
  {
    "label": "TReadAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReadAccess"
  },
  {
    "label": "TOptionalReadAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOptionalReadAccess"
  },
  {
    "label": "TWriteAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWriteAccess"
  },
  {
    "label": "TOptionalWriteAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOptionalWriteAccess"
  },
  {
    "label": "TReadOneOfAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReadOneOfAccessor"
  },
  {
    "label": "TReadOneOrMoreOfAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReadOneOrMoreOfAccessor"
  },
  {
    "label": "TPrelockedDataOffsets",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPrelockedDataOffsets"
  },
  {
    "label": "TFilteredEntityTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFilteredEntityTask"
  },
  {
    "label": "TEntityTaskComponents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityTaskComponents"
  },
  {
    "label": "TEntityTaskComponentsImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityTaskComponentsImpl"
  },
  {
    "label": "TEntityTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityTask"
  },
  {
    "label": "TEntityTaskBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityTaskBase"
  },
  {
    "label": "TScheduledEntityTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TScheduledEntityTask"
  },
  {
    "label": "TEntityAllocationTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityAllocationTask"
  },
  {
    "label": "TEntityAllocationTaskBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityAllocationTaskBase"
  },
  {
    "label": "TUnstructuredTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TUnstructuredTask"
  },
  {
    "label": "TEntityTaskCaller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityTaskCaller"
  },
  {
    "label": "FCommonEntityTaskParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommonEntityTaskParams"
  },
  {
    "label": "TDefaultEntityTaskTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDefaultEntityTaskTraits"
  },
  {
    "label": "TEntityTaskTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityTaskTraits"
  },
  {
    "label": "FEntityIterationResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityIterationResult"
  },
  {
    "label": "FCallPreTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallPreTask"
  },
  {
    "label": "FCallPostTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallPostTask"
  },
  {
    "label": "FEntityTaskBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityTaskBuilder"
  },
  {
    "label": "TEntityTaskCaller_AutoExpansion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityTaskCaller_AutoExpansion"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" Misc / GeneratedTypeName . h \" # include \" MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntityManager . h \" # include \" EntitySystem / EntityAllocationIterator . h \" # include \" EntitySystem / MovieSceneEntityRange . h \" # include \" EntitySystem / MovieSceneComponentAccessors . h \" # include \" EntitySystem / MovieSceneEntityManager . h \" # include \" EntitySystem / MovieSceneSystemTaskDependencies . h \" # include \" EntitySystem / MovieSceneComponentPtr . h \" # include \" EntitySystem / IMovieSceneTaskScheduler . h \" # include \" Templates / AndOrNot . h \" # include<initializer_list> namespace UE { namespace MovieScene {)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Aquire Component Access Locks\"), MovieSceneEval_AquireComponentAccessLocks, STATGROUP_MovieSceneECS)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Release Component Access Locks\"), MovieSceneEval_ReleaseComponentAccessLocks, STATGROUP_MovieSceneECS)"
  },
  {
    "label": "FCommonEntityTaskParams()",
    "kind": "Method",
    "detail": "Function (template<> struct TReadAccess ; template<> struct TOptionalReadAccess ; template<> struct TWriteAccess ; template<> struct TOptionalWriteAccess ; template<. . .> struct TReadOneOfAccessor ; template<. . .> struct TReadOneOrMoreOfAccessor ; template<. . .> struct TPrelockedDataOffsets ; template<. . .> struct TFilteredEntityTask ; template<. . .> struct TEntityTaskComponents ; template<. . .> struct TEntityTaskComponentsImpl ; template<,. . .> struct TEntityTask ; template<,. . .> struct TEntityTaskBase ; template<,. . .> struct TScheduledEntityTask ; template<,. . .> struct TEntityAllocationTask ; template<,. . .> struct TEntityAllocationTaskBase ; template<> struct TUnstructuredTask ; template<int32 NumComponents,bool AutoExpandAccessors> struct TEntityTaskCaller ; struct FCommonEntityTaskParams {)",
    "insertText": "FCommonEntityTaskParams() : TaskParams(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FTaskParams TaskParams ; ENamedThreads::Type DesiredThread = ENamedThreads::AnyHiPriThreadHiPriTask ; bool bBreakOnRun = false ; } ; template<T> struct TDefaultEntityTaskTraits { enum { AutoExpandAccessors = true,} ; } ; template<T> struct TEntityTaskTraits : TDefaultEntityTaskTraits<T> { } ; struct FEntityIterationResult { template<T> FEntityIterationResult)",
    "insertText": "operator(T, FEntityIterationResult)"
  },
  {
    "label": "SchedulePostTask()",
    "kind": "Method",
    "detail": "Function (} template<TaskType> FTaskID)",
    "insertText": "SchedulePostTask(IEntitySystemScheduler*, const FTaskParams&, const TSharedPtr<TaskType>&, void*)"
  },
  {
    "label": "SchedulePreTask()",
    "kind": "Method",
    "detail": "Function (} template<TaskType,TaskImplType> FTaskID)",
    "insertText": "SchedulePreTask(IEntitySystemScheduler* InScheduler, const FTaskParams& Params, const TSharedPtr<TaskType>& Context, TaskImplType* Unused, decltype(&TaskImplType::PreTask)* = 0)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (struct FCallPreTask { void)",
    "insertText": "Run(const ITaskContext* Context, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "TaskType()",
    "kind": "Method",
    "detail": "Function (static_cast<const)",
    "insertText": "TaskType(Context)->PreTask()"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (} } ; TaskFunctionPtr)",
    "insertText": "Function(TInPlaceType<UnboundTaskFunctionPtr>(), &FCallPreTask::Run)"
  },
  {
    "label": "SchedulePostTask()",
    "kind": "Method",
    "detail": "Function (} template<TaskType,TaskImplType> FTaskID)",
    "insertText": "SchedulePostTask(IEntitySystemScheduler* InScheduler, const FTaskParams& Params, const TSharedPtr<TaskType>& Context, TaskImplType* Unused, decltype(&TaskImplType::PostTask)* = 0)"
  },
  {
    "label": "TaskType()",
    "kind": "Method",
    "detail": "Function (static_cast<const)",
    "insertText": "TaskType(Context)->PostTask()"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (} } ; TaskFunctionPtr)",
    "insertText": "Function(TInPlaceType<UnboundTaskFunctionPtr>(), &FCallPostTask::Run)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> struct TEntityTaskComponents : TEntityTaskComponentsImpl<TMakeIntegerSequence<int,)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "FilterAll()",
    "kind": "Method",
    "detail": "Function (TFilteredEntityTask<T . . .>)",
    "insertText": "FilterAll(const FComponentMask& InComponentMask)"
  },
  {
    "label": "Filtered()",
    "kind": "Method",
    "detail": "Function (TFilteredEntityTask<T . . .>)",
    "insertText": "Filtered(*this)"
  },
  {
    "label": "FilterAll()",
    "kind": "Method",
    "detail": "Function (Filtered .)",
    "insertText": "FilterAll(InComponentMask)"
  },
  {
    "label": "FilterAll()",
    "kind": "Method",
    "detail": "Function (Filtered .)",
    "insertText": "FilterAll(InComponentTypes)"
  },
  {
    "label": "FilterNone()",
    "kind": "Method",
    "detail": "Function (Filtered .)",
    "insertText": "FilterNone(InComponentMask)"
  },
  {
    "label": "FilterNone()",
    "kind": "Method",
    "detail": "Function (Filtered .)",
    "insertText": "FilterNone(InComponentTypes)"
  },
  {
    "label": "FilterAny()",
    "kind": "Method",
    "detail": "Function (Filtered .)",
    "insertText": "FilterAny(InComponentMask)"
  },
  {
    "label": "FilterAny()",
    "kind": "Method",
    "detail": "Function (Filtered .)",
    "insertText": "FilterAny(InComponentTypes)"
  },
  {
    "label": "FilterOut()",
    "kind": "Method",
    "detail": "Function (Filtered .)",
    "insertText": "FilterOut(InComponentMask)"
  },
  {
    "label": "FilterOut()",
    "kind": "Method",
    "detail": "Function (Filtered .)",
    "insertText": "FilterOut(InComponentTypes)"
  },
  {
    "label": "SetDesiredThread()",
    "kind": "Method",
    "detail": "Function (} TEntityTaskComponents<T . . .>&)",
    "insertText": "SetDesiredThread(ENamedThreads::Type InDesiredThread)"
  },
  {
    "label": "bForceGameThread()",
    "kind": "Method",
    "detail": "Function (this -> CommonParams . DesiredThread = InDesiredThread ; this -> CommonParams . TaskParams .)",
    "insertText": "bForceGameThread(InDesiredThread == ENamedThreads::GameThread || InDesiredThread == ENamedThreads::GameThread_Local)"
  },
  {
    "label": "SetParams()",
    "kind": "Method",
    "detail": "Function (this -> CommonParams . TaskParams . StatId = InStatId ; return* this ; } TEntityTaskComponents<T . . .>&)",
    "insertText": "SetParams(const FTaskParams& InOtherParams)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (this -> CommonParams . TaskParams = InOtherParams ; return* this ; } template<TaskImpl,. . . TaskConstructionArgs> FGraphEventRef)",
    "insertText": "Dispatch(FEntityManager* EntityManager, const FSystemTaskPrerequisites& Prerequisites, FSystemSubsequentTasks* Subsequents, TaskConstructionArgs&&... InArgs)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (const bool bRunInline = !)",
    "insertText": "ensure(EntityManager->IsLockedDown()) || EntityManager->GetThreadingModel()"
  },
  {
    "label": "TaskConstructionArgs()",
    "kind": "Method",
    "detail": "Function (TaskImpl Task { Forward<)",
    "insertText": "TaskConstructionArgs(InArgs)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (Task .)",
    "insertText": "Run()"
  },
  {
    "label": "GetDispatchThread()",
    "kind": "Method",
    "detail": "Function (ENamedThreads::Type ThisThread = EntityManager ->)",
    "insertText": "GetDispatchThread()"
  },
  {
    "label": "CreateTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef NewTask = TGraphTask<TUnstructuredTask<TaskImpl>)",
    "insertText": "CreateTask(GatheredPrereqs.Num() != 0 ? &GatheredPrereqs : nullptr, ThisThread) .ConstructAndDispatchWhenReady( this->CommonParams, Forward<TaskConstructionArgs>(InArgs)...)"
  },
  {
    "label": "PopulateSubsequents()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "PopulateSubsequents(NewTask, *Subsequents)"
  },
  {
    "label": "Dispatch_PerAllocation()",
    "kind": "Method",
    "detail": "Function (} return NewTask ; } } template<TaskImpl,. . . TaskConstructionArgs> FGraphEventRef)",
    "insertText": "Dispatch_PerAllocation(FEntityManager* EntityManager, const FSystemTaskPrerequisites& Prerequisites, FSystemSubsequentTasks* Subsequents, TaskConstructionArgs&&... InArgs)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TEntityAllocationTaskBase<TaskImpl,)",
    "insertText": "T(EntityManager, *this).Run(Task)"
  },
  {
    "label": "CreateTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef NewTask = TGraphTask<TEntityAllocationTask<TaskImpl,T . . .>)",
    "insertText": "CreateTask(GatheredPrereqs.Num() != 0 ? &GatheredPrereqs : nullptr, ThisThread) .ConstructAndDispatchWhenReady( EntityManager, *this, Forward<TaskConstructionArgs>(InArgs)...)"
  },
  {
    "label": "RunInline_PerAllocation()",
    "kind": "Method",
    "detail": "Function (} return NewTask ; } } template<TaskImpl> void)",
    "insertText": "RunInline_PerAllocation(FEntityManager* EntityManager, TaskImpl& Task)"
  },
  {
    "label": "Dispatch_PerEntity()",
    "kind": "Method",
    "detail": "Function (} } template<TaskImpl,. . . TaskConstructionArgs> FGraphEventRef)",
    "insertText": "Dispatch_PerEntity(FEntityManager* EntityManager, const FSystemTaskPrerequisites& Prerequisites, FSystemSubsequentTasks* Subsequents, TaskConstructionArgs&&... InArgs)"
  },
  {
    "label": "AddRootTask()",
    "kind": "Method",
    "detail": "Function (Subsequents ->)",
    "insertText": "AddRootTask(NewTask)"
  },
  {
    "label": "Fork_PerEntity()",
    "kind": "Method",
    "detail": "Function (} return NewTask ; } } template<TaskImpl,. . . TaskConstructionArgs> FTaskID)",
    "insertText": "Fork_PerEntity(FEntityManager* EntityManager, IEntitySystemScheduler* InScheduler, TaskConstructionArgs&&... InArgs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FTaskParams FinalParams = this -> CommonParams . TaskParams ; FinalParams . bSerialTasks = false ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) FinalParams.DebugName = GetGeneratedTypeName<TaskImpl>()"
  },
  {
    "label": "TaskImpl()",
    "kind": "Method",
    "detail": "Function (# endif return ScheduleImpl<)",
    "insertText": "TaskImpl(EntityManager, InScheduler, FinalParams, TaskFunctionPtr(TInPlaceType<PreLockedAllocationItemFunctionPtr>(), TScheduledEntityTask<TaskImpl, T...>::ScheduledRun_PerEntity), Forward<TaskConstructionArgs>(InArgs)...)"
  },
  {
    "label": "Fork_PerAllocation()",
    "kind": "Method",
    "detail": "Function (} template<TaskImpl,. . . TaskConstructionArgs> FTaskID)",
    "insertText": "Fork_PerAllocation(FEntityManager* EntityManager, IEntitySystemScheduler* InScheduler, TaskConstructionArgs&&... InArgs)"
  },
  {
    "label": "TaskImpl()",
    "kind": "Method",
    "detail": "Function (# endif return ScheduleImpl<)",
    "insertText": "TaskImpl(EntityManager, InScheduler, FinalParams, TaskFunctionPtr(TInPlaceType<PreLockedAllocationItemFunctionPtr>(), TScheduledEntityTask<TaskImpl, T...>::ScheduledRun_PerAllocation), Forward<TaskConstructionArgs>(InArgs)...)"
  },
  {
    "label": "Schedule_PerEntity()",
    "kind": "Method",
    "detail": "Function (} template<TaskImpl,. . . TaskConstructionArgs> FTaskID)",
    "insertText": "Schedule_PerEntity(FEntityManager* EntityManager, IEntitySystemScheduler* InScheduler, TaskConstructionArgs&&... InArgs)"
  },
  {
    "label": "Schedule_PerAllocation()",
    "kind": "Method",
    "detail": "Function (} template<TaskImpl,. . . TaskConstructionArgs> FTaskID)",
    "insertText": "Schedule_PerAllocation(FEntityManager* EntityManager, IEntitySystemScheduler* InScheduler, TaskConstructionArgs&&... InArgs)"
  },
  {
    "label": "RunInline_PerEntity()",
    "kind": "Method",
    "detail": "Function (} template<TaskImpl> void)",
    "insertText": "RunInline_PerEntity(FEntityManager* EntityManager, TaskImpl& Task)"
  },
  {
    "label": "TEntityTaskComponents()",
    "kind": "Method",
    "detail": "Function (} } public :)",
    "insertText": "TEntityTaskComponents()"
  },
  {
    "label": "TEntityTaskComponents()",
    "kind": "Method",
    "detail": "Function (} template<. . . ConstructionTypes>)",
    "insertText": "TEntityTaskComponents(const FCommonEntityTaskParams& InCommonParams, ConstructionTypes&&... InTypes) : Super(InCommonParams, Forward<ConstructionTypes>(InTypes)...)"
  },
  {
    "label": "ScheduleImpl()",
    "kind": "Method",
    "detail": "Function (} private : template<TaskImpl,. . . TaskConstructionArgs> FTaskID)",
    "insertText": "ScheduleImpl(FEntityManager* EntityManager, IEntitySystemScheduler* InScheduler, const FTaskParams& TaskParams, TaskFunctionPtr InFunction, TaskConstructionArgs&&... InArgs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!this->HasAnyWork(EntityManager))"
  },
  {
    "label": "TaskType()",
    "kind": "Method",
    "detail": "Function (} using TaskType = TScheduledEntityTask<TaskImpl,T . . .> ; TSharedPtr<TaskType> SharedTask = MakeShared<)",
    "insertText": "TaskType(*this, Forward<TaskConstructionArgs>(InArgs)...)"
  },
  {
    "label": "PopulateReadWriteDependencies()",
    "kind": "Method",
    "detail": "Function (FComponentMask ReadDependencies,WriteDependencies ; this ->)",
    "insertText": "PopulateReadWriteDependencies(ReadDependencies, WriteDependencies)"
  },
  {
    "label": "PopulateFilter()",
    "kind": "Method",
    "detail": "Function (FEntityComponentFilter Filter ; this ->)",
    "insertText": "PopulateFilter(&Filter)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (auto PrelockComponentData = [)",
    "insertText": "this(FEntityAllocationIteratorItem Allocation, TArray<FPreLockedDataPtr>& OutComponentHeaders)"
  },
  {
    "label": "PreLockComponentHeaders()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "PreLockComponentHeaders(Allocation, OutComponentHeaders)"
  },
  {
    "label": "CreateForkedAllocationTask()",
    "kind": "Method",
    "detail": "Function (} ; FTaskID TaskID = InScheduler ->)",
    "insertText": "CreateForkedAllocationTask(TaskParams, SharedTask, InFunction, PrelockComponentData, Filter, ReadDependencies, WriteDependencies)"
  },
  {
    "label": "AddNullTask()",
    "kind": "Method",
    "detail": "Function (TaskID = InScheduler ->)",
    "insertText": "AddNullTask()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TaskID)"
  },
  {
    "label": "SchedulePreTask()",
    "kind": "Method",
    "detail": "Function (FTaskID PreTask =)",
    "insertText": "SchedulePreTask(InScheduler, TaskParams, SharedTask, (TaskImpl*)0)"
  },
  {
    "label": "SchedulePostTask()",
    "kind": "Method",
    "detail": "Function (FTaskID PostTask =)",
    "insertText": "SchedulePostTask(InScheduler, TaskParams, SharedTask, (TaskImpl*)0)"
  },
  {
    "label": "AddChildFront()",
    "kind": "Method",
    "detail": "Function (InScheduler ->)",
    "insertText": "AddChildFront(TaskID, PreTask)"
  },
  {
    "label": "AddChildBack()",
    "kind": "Method",
    "detail": "Function (InScheduler ->)",
    "insertText": "AddChildBack(TaskID, PostTask)"
  },
  {
    "label": "ReadEntityIDs()",
    "kind": "Method",
    "detail": "Function (} return TaskID ; } } ; template<int . . . Indices,. . . T> struct TEntityTaskComponentsImpl<TIntegerSequence<int,Indices . . .>,T . . .> { TEntityTaskComponents<T . . .,FEntityIDAccess>)",
    "insertText": "ReadEntityIDs()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} template<U> TEntityTaskComponents<T . . .,TReadAccess<U>>)",
    "insertText": "Read(TComponentTypeID<U> ComponentType)"
  },
  {
    "label": "ReadOneOf()",
    "kind": "Method",
    "detail": "Function (} template<. . . U> TEntityTaskComponents<T . . .,TReadOneOfAccessor<U . . .>>)",
    "insertText": "ReadOneOf(TComponentTypeID<U>... ComponentTypes)"
  },
  {
    "label": "ReadOneOrMoreOf()",
    "kind": "Method",
    "detail": "Function (} template<. . . U> TEntityTaskComponents<T . . .,TReadOneOrMoreOfAccessor<U . . .>>)",
    "insertText": "ReadOneOrMoreOf(TComponentTypeID<U>... ComponentTypes)"
  },
  {
    "label": "ReadAllOf()",
    "kind": "Method",
    "detail": "Function (} template<. . . U> TEntityTaskComponents<T . . .,TReadAccess<U> . . .>)",
    "insertText": "ReadAllOf(TComponentTypeID<U>... ComponentTypes)"
  },
  {
    "label": "ReadAnyOf()",
    "kind": "Method",
    "detail": "Function (} template<. . . U> TEntityTaskComponents<T . . .,TOptionalReadAccess<U> . . .>)",
    "insertText": "ReadAnyOf(TComponentTypeID<U>... ComponentTypes)"
  },
  {
    "label": "ReadErased()",
    "kind": "Method",
    "detail": "Function (} TEntityTaskComponents<T . . .,FErasedReadAccess>)",
    "insertText": "ReadErased(FComponentTypeID ComponentType)"
  },
  {
    "label": "ReadErasedOptional()",
    "kind": "Method",
    "detail": "Function (} TEntityTaskComponents<T . . .,FErasedOptionalReadAccess>)",
    "insertText": "ReadErasedOptional(FComponentTypeID ComponentType)"
  },
  {
    "label": "ReadOptional()",
    "kind": "Method",
    "detail": "Function (} template<U> TEntityTaskComponents<T . . .,TOptionalReadAccess<U>>)",
    "insertText": "ReadOptional(TComponentTypeID<U> ComponentType)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} template<U> TEntityTaskComponents<T . . .,TWriteAccess<U>>)",
    "insertText": "Write(TComponentTypeID<U> ComponentType)"
  },
  {
    "label": "WriteAllOf()",
    "kind": "Method",
    "detail": "Function (} template<. . . U> TEntityTaskComponents<T . . .,TWriteAccess<U> . . .>)",
    "insertText": "WriteAllOf(TComponentTypeID<U>... ComponentTypes)"
  },
  {
    "label": "WriteErased()",
    "kind": "Method",
    "detail": "Function (} TEntityTaskComponents<T . . .,FErasedWriteAccess>)",
    "insertText": "WriteErased(FComponentTypeID ComponentType)"
  },
  {
    "label": "WriteOptional()",
    "kind": "Method",
    "detail": "Function (} template<U> TEntityTaskComponents<T . . .,TOptionalWriteAccess<U>>)",
    "insertText": "WriteOptional(TComponentTypeID<U> ComponentType)"
  },
  {
    "label": "HasBeenWrittenToSince()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBeenWrittenToSince(uint32 InSystemVersion)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (bool bAnyWrittenTo = true ; int)",
    "insertText": "Temp(bAnyWrittenTo |= HasBeenWrittenToSince(&Accessors.template Get<Indices>(), InSystemVersion), 0)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (bool bAllValid = true ; int)",
    "insertText": "Temp(bAllValid &= IsAccessorValid(&Accessors.template Get<Indices>()), 0)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (bool bAllHaveWork = true ; int)",
    "insertText": "Temp(bAllHaveWork &= HasAccessorWork(EntityManager, &Accessors.template Get<Indices>()), 0)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Temp(AddAccessorToFilter(&Accessors.template Get<Indices>(), OutFilter), 0)"
  },
  {
    "label": "PopulatePrerequisites()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulatePrerequisites(const FSystemTaskPrerequisites& InPrerequisites, FGraphEventArray* OutGatheredPrereqs)"
  },
  {
    "label": "FilterByComponent()",
    "kind": "Method",
    "detail": "Function (InPrerequisites .)",
    "insertText": "FilterByComponent(*OutGatheredPrereqs, FComponentTypeID::Invalid())"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Temp(UE::MovieScene::PopulatePrerequisites(&Accessors.template Get<Indices>(), InPrerequisites, OutGatheredPrereqs), 0)"
  },
  {
    "label": "PopulateSubsequents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateSubsequents(const FGraphEventRef& InEvent, FSystemSubsequentTasks& OutSubsequents)"
  },
  {
    "label": "AddRootTask()",
    "kind": "Method",
    "detail": "Function (OutSubsequents .)",
    "insertText": "AddRootTask(InEvent)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Temp(UE::MovieScene::PopulateSubsequents(&Accessors.template Get<Indices>(), InEvent, OutSubsequents), 0)"
  },
  {
    "label": "PreLockComponentHeaders()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreLockComponentHeaders(const FEntityAllocation* Allocation, TArray<FPreLockedDataPtr>& OutComponentHeaders)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (TPrelockedDataOffsets<T . . .> PrelockedDataOffsets ; int32 StartIndex = OutComponentHeaders .)",
    "insertText": "Num()"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (OutComponentHeaders .)",
    "insertText": "AddDefaulted(PrelockedDataOffsets.Num)"
  },
  {
    "label": "PopulateReadWriteDependencies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateReadWriteDependencies(FComponentMask& OutReadDependencies, FComponentMask& OutWriteDependencies)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Temp(UE::MovieScene::PopulateReadWriteDependencies(&Accessors.template Get<Indices>(), OutReadDependencies, OutWriteDependencies), 0)"
  },
  {
    "label": "Iterate_PerAllocation()",
    "kind": "Method",
    "detail": "Function (} template<Callback> void)",
    "insertText": "Iterate_PerAllocation(FEntityManager* EntityManager, Callback&& InCallback)"
  },
  {
    "label": "Iterate_PerAllocationImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iterate_PerAllocationImpl(EntityManager, Filter, InCallback)"
  },
  {
    "label": "Iterate_PerEntity()",
    "kind": "Method",
    "detail": "Function (} template<Callback> void)",
    "insertText": "Iterate_PerEntity(FEntityManager* EntityManager, Callback&& InCallback)"
  },
  {
    "label": "Iterate_PerEntityImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iterate_PerEntityImpl(EntityManager, Filter, InCallback)"
  },
  {
    "label": "Iterate_PerEntityImpl()",
    "kind": "Method",
    "detail": "Function (} template<Callback> void)",
    "insertText": "Iterate_PerEntityImpl(FEntityManager* EntityManager, const FEntityComponentFilter& Filter, Callback&& InCallback)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using TupleType = TTuple<)",
    "insertText": "decltype(Accessors.template Get<Indices>().LockComponentData(nullptr, DeclVal<FEntityAllocationWriteContext>()))"
  },
  {
    "label": "WriteContext()",
    "kind": "Method",
    "detail": "Function (FEntityAllocationWriteContext)",
    "insertText": "WriteContext(*EntityManager)"
  },
  {
    "label": "GetThreadingModel()",
    "kind": "Method",
    "detail": "Function (EComponentHeaderLockMode LockMode = EntityManager ->)",
    "insertText": "GetThreadingModel()"
  },
  {
    "label": "LockGuard()",
    "kind": "Method",
    "detail": "Function (FEntityIterationResult Result ; FEntityAllocationMutexGuard)",
    "insertText": "LockGuard(Allocation, LockMode)"
  },
  {
    "label": "ComponentData()",
    "kind": "Method",
    "detail": "Function (TupleType)",
    "insertText": "ComponentData(Accessors.template Get<Indices>().LockComponentData(Allocation, WriteContext)...)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Result(InCallback( ComponentData.template Get<Indices>().ComponentAtIndex(ComponentOffset)... ), Result)"
  },
  {
    "label": "Iterate_PerAllocationImpl()",
    "kind": "Method",
    "detail": "Function (} } } } template<Callback> void)",
    "insertText": "Iterate_PerAllocationImpl(FEntityManager* EntityManager, const FEntityComponentFilter& Filter, Callback&& InCallback)"
  },
  {
    "label": "LockGuard()",
    "kind": "Method",
    "detail": "Function (FEntityAllocation* Allocation = Item ; FEntityAllocationMutexGuard)",
    "insertText": "LockGuard(Item.GetAllocation(), LockMode)"
  },
  {
    "label": "MakeTuple()",
    "kind": "Method",
    "detail": "Function (auto ComponentData =)",
    "insertText": "MakeTuple(Accessors.template Get<Indices>().LockComponentData(Allocation, WriteContext)...)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (FEntityIterationResult)",
    "insertText": "Result(InCallback(Item, ComponentData.template Get<Indices>()...), FEntityIterationResult{})"
  },
  {
    "label": "GetAccessor()",
    "kind": "Method",
    "detail": "Function (break ; } } } } public : template<int Index> auto)",
    "insertText": "GetAccessor()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString(FEntityManager* EntityManager)"
  },
  {
    "label": "Unused()",
    "kind": "Method",
    "detail": "Function (# if UE_MOVIESCENE_ENTITY_DEBUG FString Result ; int)",
    "insertText": "Unused(AccessorToString(&Accessors.template Get<Indices>(), EntityManager, Result), 0)"
  },
  {
    "label": "TEntityTaskComponentsImpl()",
    "kind": "Method",
    "detail": "Function (# endif } protected :)",
    "insertText": "TEntityTaskComponentsImpl()"
  },
  {
    "label": "TEntityTaskComponentsImpl()",
    "kind": "Method",
    "detail": "Function (} template<. . . ConstructionTypes>)",
    "insertText": "TEntityTaskComponentsImpl(const FCommonEntityTaskParams& InCommonParams, ConstructionTypes&&... InTypes)"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (} protected : template<. . .> struct TEntityTaskComponentsImpl ; TTuple<T . . .> Accessors ; public : FCommonEntityTaskParams CommonParams ; } ; struct FEntityTaskBuilder : TEntityTaskComponents<> {)",
    "insertText": "FEntityTaskBuilder() : TEntityTaskComponents<>()"
  },
  {
    "label": "TFilteredEntityTask()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . T> struct TFilteredEntityTask {)",
    "insertText": "TFilteredEntityTask(const TEntityTaskComponents<T...>& InComponents) : Components(InComponents)"
  },
  {
    "label": "TFilteredEntityTask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFilteredEntityTask(const TEntityTaskComponents<T...>& InComponents, const FEntityComponentFilter& InFilter) : Components(InComponents) , Filter(InFilter)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (Filter .)",
    "insertText": "All(InComponentMask)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (Filter .)",
    "insertText": "All(InComponentTypes)"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (Filter .)",
    "insertText": "None(InComponentMask)"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (Filter .)",
    "insertText": "None(InComponentTypes)"
  },
  {
    "label": "Any()",
    "kind": "Method",
    "detail": "Function (Filter .)",
    "insertText": "Any(InComponentMask)"
  },
  {
    "label": "Any()",
    "kind": "Method",
    "detail": "Function (Filter .)",
    "insertText": "Any(InComponentTypes)"
  },
  {
    "label": "Deny()",
    "kind": "Method",
    "detail": "Function (Filter .)",
    "insertText": "Deny(InComponentMask)"
  },
  {
    "label": "Deny()",
    "kind": "Method",
    "detail": "Function (Filter .)",
    "insertText": "Deny(InComponentTypes)"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (Filter .)",
    "insertText": "Combine(InFilter)"
  },
  {
    "label": "GetDesiredThread()",
    "kind": "Method",
    "detail": "Function (Components . CommonParams . TaskParams = InOtherParams ; return* this ; } ENamedThreads::Type)",
    "insertText": "GetDesiredThread()"
  },
  {
    "label": "SetAll()",
    "kind": "Method",
    "detail": "Function (DynamicReadMask .)",
    "insertText": "SetAll(InReadDependencies)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (DynamicReadMask .)",
    "insertText": "Set(Component)"
  },
  {
    "label": "AddDynamicReadDependency()",
    "kind": "Method",
    "detail": "Function (} return* this ; } TFilteredEntityTask<T . . .>&)",
    "insertText": "AddDynamicReadDependency(const FComponentMask& InDynamicReadDependency)"
  },
  {
    "label": "CombineWithBitwiseOR()",
    "kind": "Method",
    "detail": "Function (DynamicReadMask .)",
    "insertText": "CombineWithBitwiseOR(InDynamicReadDependency, EBitwiseOperatorFlags::MaxSize)"
  },
  {
    "label": "SetAll()",
    "kind": "Method",
    "detail": "Function (DynamicWriteMask .)",
    "insertText": "SetAll(InWriteDependencies)"
  },
  {
    "label": "AddDynamicWriteDependency()",
    "kind": "Method",
    "detail": "Function (} return* this ; } TFilteredEntityTask<T . . .>&)",
    "insertText": "AddDynamicWriteDependency(const FComponentMask& InDynamicWriteDependency)"
  },
  {
    "label": "CombineWithBitwiseOR()",
    "kind": "Method",
    "detail": "Function (DynamicWriteMask .)",
    "insertText": "CombineWithBitwiseOR(InDynamicWriteDependency, EBitwiseOperatorFlags::MaxSize)"
  },
  {
    "label": "RunInline_PerEntity()",
    "kind": "Method",
    "detail": "Function (} template<TaskImpl> void)",
    "insertText": "RunInline_PerEntity(FEntityManager* EntityManager, TaskImpl Task)"
  },
  {
    "label": "Iterate_PerEntityImpl()",
    "kind": "Method",
    "detail": "Function (Components .)",
    "insertText": "Iterate_PerEntityImpl(EntityManager, Filter, Forward<Callback>(InCallback))"
  },
  {
    "label": "Iterate_PerAllocationImpl()",
    "kind": "Method",
    "detail": "Function (Components .)",
    "insertText": "Iterate_PerAllocationImpl(EntityManager, Filter, Forward<Callback>(InCallback))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Components.HasAnyWork(EntityManager))"
  },
  {
    "label": "TaskType()",
    "kind": "Method",
    "detail": "Function (} using TaskType = TScheduledEntityTask<TaskImpl,T . . .> ; TSharedPtr<TaskType> SharedTask = MakeShared<)",
    "insertText": "TaskType(Components, Forward<TaskConstructionArgs>(InArgs)...)"
  },
  {
    "label": "TEntityTaskBase()",
    "kind": "Method",
    "detail": "Function (} return TaskID ; } private : TEntityTaskComponents<T . . .> Components ; FEntityComponentFilter Filter ; FComponentMask DynamicReadMask ; FComponentMask DynamicWriteMask ; } ; template<TaskImpl,. . . ComponentTypes> struct TEntityTaskBase {)",
    "insertText": "TEntityTaskBase(FEntityManager* InEntityManager, const TEntityTaskComponents<ComponentTypes...>& InComponents) : FilteredTask(InComponents) , EntityManager(InEntityManager) , WriteContext(*InEntityManager)"
  },
  {
    "label": "TEntityTaskBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TEntityTaskBase(FEntityManager* InEntityManager, const TFilteredEntityTask<ComponentTypes...>& InFilteredTask) : FilteredTask(InFilteredTask) , EntityManager(InEntityManager) , WriteContext(*InEntityManager)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Run(TaskImpl& TaskImplInstance)"
  },
  {
    "label": "PreTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreTask(&TaskImplInstance)"
  },
  {
    "label": "ForEachEntityImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachEntityImpl(TaskImplInstance, Allocation, WriteContext, FilteredTask.GetComponents())"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PostTask(&TaskImplInstance)"
  },
  {
    "label": "PreTask()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "PreTask(void*, ...)"
  },
  {
    "label": "PreTask()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "PreTask(T* InTask, decltype(&T::PreTask)* = 0)"
  },
  {
    "label": "PreTask()",
    "kind": "Method",
    "detail": "Function (InTask ->)",
    "insertText": "PreTask()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostTask(void*, ...)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "PostTask(T* InTask, decltype(&T::PostTask)* = 0)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (InTask ->)",
    "insertText": "PostTask()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} using Caller = TEntityTaskCaller<)",
    "insertText": "sizeof(ComponentTypes)"
  },
  {
    "label": "TEntityTask()",
    "kind": "Method",
    "detail": "Function (TFilteredEntityTask<ComponentTypes . . .> FilteredTask ; FEntityManager* EntityManager ; FEntityAllocationWriteContext WriteContext ; } ; template<TaskImpl,. . . ComponentTypes> struct TEntityTask : TEntityTaskBase<TaskImpl,ComponentTypes . . .> { template<. . . ArgTypes>)",
    "insertText": "TEntityTask(FEntityManager* InEntityManager, const TEntityTaskComponents<ComponentTypes...>& InComponents, ArgTypes&&... InArgs) : TEntityTaskBase<TaskImpl, ComponentTypes...>(InEntityManager, InComponents)"
  },
  {
    "label": "TEntityTask()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes>)",
    "insertText": "TEntityTask(FEntityManager* InEntityManager, const TFilteredEntityTask<ComponentTypes...>& InFilteredTask, ArgTypes&&... InArgs) : TEntityTaskBase<TaskImpl, ComponentTypes...>(InEntityManager, InFilteredTask)"
  },
  {
    "label": "GetSubsequentsMode()",
    "kind": "Method",
    "detail": "Function (} ESubsequentsMode::Type)",
    "insertText": "GetSubsequentsMode()"
  },
  {
    "label": "UE_DEBUG_BREAK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEBUG_BREAK()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((this->FilteredTask.GetDesiredThread() & ENamedThreads::AnyThread) == 0)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "Run(TaskImplInstance)"
  },
  {
    "label": "TScheduledEntityTask()",
    "kind": "Method",
    "detail": "Function (} private : TaskImpl TaskImplInstance ; } ; template<TaskImpl,. . . ComponentTypes> struct TScheduledEntityTask : ITaskContext { template<. . . ArgTypes>)",
    "insertText": "TScheduledEntityTask(const TEntityTaskComponents<ComponentTypes...>& InComponents, ArgTypes&&... InArgs)"
  },
  {
    "label": "PreTaskImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreTaskImpl(const_cast<TaskImpl*>(&TaskImplInstance))"
  },
  {
    "label": "PostTaskImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTaskImpl(const_cast<TaskImpl*>(&TaskImplInstance))"
  },
  {
    "label": "ScheduledRun_PerEntity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScheduledRun_PerEntity(FEntityAllocationIteratorItem Item, TArrayView<const FPreLockedDataPtr> PreLockedData, const ITaskContext* Context, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "ComponentTypes()",
    "kind": "Method",
    "detail": "Function (const TScheduledEntityTask<TaskImpl,ComponentTypes . . .>* This = static_cast<const TScheduledEntityTask<TaskImpl,)",
    "insertText": "ComponentTypes(Context)"
  },
  {
    "label": "ForEachEntityImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachEntityImpl(This->TaskImplInstance, Item, PreLockedData, WriteContext, This->Components)"
  },
  {
    "label": "ScheduledRun_PerAllocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScheduledRun_PerAllocation(FEntityAllocationIteratorItem Item, TArrayView<const FPreLockedDataPtr> PreLockedData, const ITaskContext* Context, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "ForEachAllocationImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachAllocationImpl(This->TaskImplInstance, Item, PreLockedData, WriteContext, This->Components)"
  },
  {
    "label": "PreTaskImpl()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "PreTaskImpl(void*, ...)"
  },
  {
    "label": "PreTaskImpl()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "PreTaskImpl(T* InTask, decltype(&T::PreTask)* = 0)"
  },
  {
    "label": "PostTaskImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostTaskImpl(void*, ...)"
  },
  {
    "label": "PostTaskImpl()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "PostTaskImpl(T* InTask, decltype(&T::PostTask)* = 0)"
  },
  {
    "label": "TEntityAllocationTaskBase()",
    "kind": "Method",
    "detail": "Function (TaskImpl TaskImplInstance ; TEntityTaskComponents<ComponentTypes . . .> Components ; } ; template<TaskImpl,. . . ComponentTypes> struct TEntityAllocationTaskBase {)",
    "insertText": "TEntityAllocationTaskBase(FEntityManager* InEntityManager, const TEntityTaskComponents<ComponentTypes...>& InComponents) : ComponentFilter(InComponents) , EntityManager(InEntityManager) , WriteContext(*InEntityManager)"
  },
  {
    "label": "TEntityAllocationTaskBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TEntityAllocationTaskBase(FEntityManager* InEntityManager, const TFilteredEntityTask<ComponentTypes...>& InComponentFilter) : ComponentFilter(InComponentFilter) , EntityManager(InEntityManager) , WriteContext(*InEntityManager)"
  },
  {
    "label": "ForEachAllocationImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachAllocationImpl(TaskImplInstance, Item, WriteContext, ComponentFilter.GetComponents())"
  },
  {
    "label": "TEntityAllocationTask()",
    "kind": "Method",
    "detail": "Function (TFilteredEntityTask<ComponentTypes . . .> ComponentFilter ; FEntityManager* EntityManager ; FEntityAllocationWriteContext WriteContext ; } ; template<TaskImpl,. . . ComponentTypes> struct TEntityAllocationTask : TEntityAllocationTaskBase<TaskImpl,ComponentTypes . . .> { template<. . . ArgTypes>)",
    "insertText": "TEntityAllocationTask(FEntityManager* InEntityManager, const TEntityTaskComponents<ComponentTypes...>& InComponents, ArgTypes&&... InArgs) : TEntityAllocationTaskBase<TaskImpl, ComponentTypes...>(InEntityManager, InComponents)"
  },
  {
    "label": "TEntityAllocationTask()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes>)",
    "insertText": "TEntityAllocationTask(FEntityManager* InEntityManager, const TFilteredEntityTask<ComponentTypes...>& InComponentFilter, ArgTypes&&... InArgs) : TEntityAllocationTaskBase<TaskImpl, ComponentTypes...>(InEntityManager, InComponentFilter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((this->ComponentFilter.GetDesiredThread() & ENamedThreads::AnyThread) == 0)"
  },
  {
    "label": "TUnstructuredTask()",
    "kind": "Method",
    "detail": "Function (} private : TaskImpl TaskImplInstance ; } ; template<TaskImpl> struct TUnstructuredTask { template<. . . ArgTypes>)",
    "insertText": "TUnstructuredTask(const FCommonEntityTaskParams& InCommonParams, ArgTypes&&... InArgs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((CommonParams.DesiredThread & ENamedThreads::AnyThread) == 0)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_LOG(LogMovieSceneECS, VeryVerbose, TEXT(\"Running unstructured task\"))"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} private : TaskImpl TaskImplInstance ; FCommonEntityTaskParams CommonParams ; } ; template<. . .> struct TEntityTaskCaller_AutoExpansion ; template<. . . AccessorTypes> struct TPrelockedDataOffsets { int32)",
    "insertText": "Num(... + AccessorTypes::PreLockedDataNum)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int32 StartOffset [)",
    "insertText": "sizeof(AccessorTypes)"
  },
  {
    "label": "TPrelockedDataOffsets()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "TPrelockedDataOffsets()"
  },
  {
    "label": "DataIndex()",
    "kind": "Method",
    "detail": "Function (int Index = 0,)",
    "insertText": "DataIndex(..., Assign(Index, DataIndex, AccessorTypes::PreLockedDataNum))"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Assign(int& Index, int& DataIndex, int DataSize)"
  },
  {
    "label": "ForEachEntityImpl()",
    "kind": "Method",
    "detail": "Function (StartOffset [ Index ] = DataIndex ; DataIndex + = DataSize ; + + Index ; } } ; template<int . . . Indices> struct TEntityTaskCaller_AutoExpansion<TIntegerSequence<int,Indices . . .>> { template<TaskImpl,. . . AccessorTypes> void)",
    "insertText": "ForEachEntityImpl(TaskImpl& TaskImplInstance, const FEntityAllocation* Allocation, TArrayView<const FPreLockedDataPtr> PreLockedData, FEntityAllocationWriteContext WriteContext, const TEntityTaskComponents<AccessorTypes...>& Components)"
  },
  {
    "label": "MakeTuple()",
    "kind": "Method",
    "detail": "Function (FEntityIterationResult Result ; TPrelockedDataOffsets<AccessorTypes . . .> PrelockedDataOffsets ; auto ResolvedComponentData =)",
    "insertText": "MakeTuple(Components.template GetAccessor<Indices>().ResolvePreLockedComponentData(Allocation, &PreLockedData[PrelockedDataOffsets.StartOffset[Indices]], WriteContext)...)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Result(TaskImplInstance.ForEachEntity(ResolvedComponentData.template Get<Indices>().ComponentAtIndex(ComponentOffset)... ), Result)"
  },
  {
    "label": "ForEachEntityImpl()",
    "kind": "Method",
    "detail": "Function (} } template<TaskImpl,. . . AccessorTypes> void)",
    "insertText": "ForEachEntityImpl(TaskImpl& TaskImplInstance, const FEntityAllocation* Allocation, FEntityAllocationWriteContext WriteContext, const TEntityTaskComponents<AccessorTypes...>& Components)"
  },
  {
    "label": "MakeTuple()",
    "kind": "Method",
    "detail": "Function (FEntityIterationResult Result ; auto LockedComponentData =)",
    "insertText": "MakeTuple(Components.template GetAccessor<Indices>().LockComponentData(Allocation, WriteContext)...)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Result(TaskImplInstance.ForEachEntity(LockedComponentData.template Get<Indices>().ComponentAtIndex(ComponentOffset)... ), Result)"
  },
  {
    "label": "ForEachAllocationImpl()",
    "kind": "Method",
    "detail": "Function (} } template<TaskImpl,. . . AccessorTypes> void)",
    "insertText": "ForEachAllocationImpl(TaskImpl& TaskImplInstance, FEntityAllocationIteratorItem Item, TArrayView<const FPreLockedDataPtr> PreLockedData, FEntityAllocationWriteContext WriteContext, const TEntityTaskComponents<AccessorTypes...>& Components)"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (TPrelockedDataOffsets<AccessorTypes . . .> PrelockedDataOffsets ; const FEntityAllocation* Allocation = Item .)",
    "insertText": "GetAllocation()"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (TaskImplInstance .)",
    "insertText": "ForEachAllocation(Item, Components.template GetAccessor<Indices>().ResolvePreLockedComponentData(Allocation, &PreLockedData[PrelockedDataOffsets.StartOffset[Indices]], WriteContext)...)"
  },
  {
    "label": "ForEachAllocationImpl()",
    "kind": "Method",
    "detail": "Function (} template<TaskImpl,. . . AccessorTypes> void)",
    "insertText": "ForEachAllocationImpl(TaskImpl& TaskImplInstance, FEntityAllocationIteratorItem Item, FEntityAllocationWriteContext WriteContext, const TEntityTaskComponents<AccessorTypes...>& Components)"
  },
  {
    "label": "MakeTuple()",
    "kind": "Method",
    "detail": "Function (auto LockedComponentData =)",
    "insertText": "MakeTuple(Components.template GetAccessor<Indices>().LockComponentData(Item.GetAllocation(), WriteContext)...)"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (TaskImplInstance .)",
    "insertText": "ForEachAllocation(Item, LockedComponentData.template Get<Indices>()...)"
  },
  {
    "label": "ForEachEntityImpl()",
    "kind": "Method",
    "detail": "Function (} } ; template<int NumComponents> struct TEntityTaskCaller<NumComponents,true> : TEntityTaskCaller_AutoExpansion<TMakeIntegerSequence<int,NumComponents>> { } ; template<int32 NumComponents> struct TEntityTaskCaller<NumComponents,false> { template<TaskImpl> void)",
    "insertText": "ForEachEntityImpl(TaskImpl& TaskImplInstance, ...)"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (TaskImplInstance .)",
    "insertText": "ForEachAllocation(Item, Components, PreLockedData)"
  },
  {
    "label": "ForEachAllocationImpl()",
    "kind": "Method",
    "detail": "Function (} template<TaskImpl,. . . AccessorTypes> void)",
    "insertText": "ForEachAllocationImpl(TaskImpl& TaskImplInstance, FEntityAllocationIteratorItem Item, const TEntityTaskComponents<AccessorTypes...>& Components)"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (TaskImplInstance .)",
    "insertText": "ForEachAllocation(Item, Components)"
  }
]