[
  {
    "label": "Comdat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Comdat"
  },
  {
    "label": "PointerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerType"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "ID",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ID"
  },
  {
    "label": "GlobalValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalValue"
  },
  {
    "label": "LinkageTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LinkageTypes"
  },
  {
    "label": "VisibilityTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VisibilityTypes"
  },
  {
    "label": "DLLStorageClassTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DLLStorageClassTypes"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "ThreadLocalMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ThreadLocalMode"
  },
  {
    "label": "GlobalValue()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_GLOBALVALUE_H # define LLVM_IR_GLOBALVALUE_H # include \" llvm / IR / Constant . h \" # include \" llvm / IR / DerivedTypes . h \" # include<system_error> namespace llvm { class Comdat ; class PointerType ; class Module ; namespace Intrinsic { enum ID : unsigned ; } class GlobalValue : public Constant {)",
    "insertText": "GlobalValue(const GlobalValue &)"
  },
  {
    "label": "GlobalValue()",
    "kind": "Method",
    "detail": "Function (public : enum LinkageTypes { ExternalLinkage = 0,AvailableExternallyLinkage,LinkOnceAnyLinkage,LinkOnceODRLinkage,WeakAnyLinkage,WeakODRLinkage,AppendingLinkage,InternalLinkage,PrivateLinkage,ExternalWeakLinkage,CommonLinkage } ; enum VisibilityTypes { DefaultVisibility = 0,HiddenVisibility,ProtectedVisibility } ; enum DLLStorageClassTypes { DefaultStorageClass = 0,DLLImportStorageClass = 1,DLLExportStorageClass = 2 } ; protected :)",
    "insertText": "GlobalValue(PointerType *Ty, ValueTy VTy, Use *Ops, unsigned NumOps, LinkageTypes Linkage, const Twine &Name) : Constant(Ty, VTy, Ops, NumOps), Linkage(Linkage), Visibility(DefaultVisibility), UnnamedAddr(0), DllStorageClass(DefaultStorageClass), ThreadLocal(NotThreadLocal), IntID((Intrinsic::ID)0U), Parent(nullptr)"
  },
  {
    "label": "setName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setName(Name)"
  },
  {
    "label": "destroyConstantImpl()",
    "kind": "Method",
    "detail": "Function (} LinkageTypes Linkage : 5 ; unsigned Visibility : 2 ; unsigned UnnamedAddr : 1 ; unsigned DllStorageClass : 2 ; unsigned ThreadLocal : 3 ; const unsigned GlobalValueSubClassDataBits = 1 9 ; private : unsigned SubClassData : GlobalValueSubClassDataBits ; class Constant ; void)",
    "insertText": "destroyConstantImpl()"
  },
  {
    "label": "handleOperandChangeImpl()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "handleOperandChangeImpl(Value *From, Value *To, Use *U)"
  },
  {
    "label": "getGlobalValueSubClassData()",
    "kind": "Method",
    "detail": "Function (protected : Intrinsic::ID IntID ; unsigned)",
    "insertText": "getGlobalValueSubClassData()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(V < (1 << GlobalValueSubClassDataBits) && \"It will not fit\")"
  },
  {
    "label": "GlobalValue()",
    "kind": "Method",
    "detail": "Function (SubClassData = V ; } Module* Parent ; public : enum ThreadLocalMode { NotThreadLocal = 0,GeneralDynamicTLSModel,LocalDynamicTLSModel,InitialExecTLSModel,LocalExecTLSModel } ; ~)",
    "insertText": "GlobalValue()"
  },
  {
    "label": "removeDeadConstantUsers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeDeadConstantUsers()"
  },
  {
    "label": "getAlignment()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getAlignment()"
  },
  {
    "label": "hasUnnamedAddr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasUnnamedAddr()"
  },
  {
    "label": "hasComdat()",
    "kind": "Method",
    "detail": "Function (UnnamedAddr = Val ; } bool)",
    "insertText": "hasComdat()"
  },
  {
    "label": "getComdat()",
    "kind": "Method",
    "detail": "Function (} Comdat*)",
    "insertText": "getComdat()"
  },
  {
    "label": "getVisibility()",
    "kind": "Method",
    "detail": "Function (} VisibilityTypes)",
    "insertText": "getVisibility()"
  },
  {
    "label": "hasDefaultVisibility()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasDefaultVisibility()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((!hasLocalLinkage() || V == DefaultVisibility) && \"local linkage requires default visibility\")"
  },
  {
    "label": "isThreadLocal()",
    "kind": "Method",
    "detail": "Function (Visibility = V ; } bool)",
    "insertText": "isThreadLocal()"
  },
  {
    "label": "setThreadLocal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setThreadLocal(bool Val)"
  },
  {
    "label": "setThreadLocalMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setThreadLocalMode(Val ? GeneralDynamicTLSModel : NotThreadLocal)"
  },
  {
    "label": "setThreadLocalMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setThreadLocalMode(ThreadLocalMode Val)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Val == NotThreadLocal || getValueID() != Value::FunctionVal)"
  },
  {
    "label": "getThreadLocalMode()",
    "kind": "Method",
    "detail": "Function (ThreadLocal = Val ; } ThreadLocalMode)",
    "insertText": "getThreadLocalMode()"
  },
  {
    "label": "getDLLStorageClass()",
    "kind": "Method",
    "detail": "Function (} DLLStorageClassTypes)",
    "insertText": "getDLLStorageClass()"
  },
  {
    "label": "hasDLLImportStorageClass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasDLLImportStorageClass()"
  },
  {
    "label": "hasSection()",
    "kind": "Method",
    "detail": "Function (DllStorageClass = C ; } bool)",
    "insertText": "hasSection()"
  },
  {
    "label": "getSection()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getSection()"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (PointerType*)",
    "insertText": "getType()"
  },
  {
    "label": "getValueType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getValueType()"
  },
  {
    "label": "getLinkOnceLinkage()",
    "kind": "Method",
    "detail": "Function (} LinkageTypes)",
    "insertText": "getLinkOnceLinkage(bool ODR)"
  },
  {
    "label": "isAppendingLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAppendingLinkage(LinkageTypes Linkage)"
  },
  {
    "label": "isExternalWeakLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isExternalWeakLinkage(LinkageTypes Linkage)"
  },
  {
    "label": "mayBeOverridden()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "mayBeOverridden(LinkageTypes Linkage)"
  },
  {
    "label": "hasAvailableExternallyLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasAvailableExternallyLinkage()"
  },
  {
    "label": "hasLinkOnceLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasLinkOnceLinkage()"
  },
  {
    "label": "hasLinkOnceODRLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasLinkOnceODRLinkage()"
  },
  {
    "label": "hasWeakLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasWeakLinkage()"
  },
  {
    "label": "hasWeakAnyLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasWeakAnyLinkage()"
  },
  {
    "label": "hasWeakODRLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasWeakODRLinkage()"
  },
  {
    "label": "hasAppendingLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasAppendingLinkage()"
  },
  {
    "label": "hasInternalLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasInternalLinkage()"
  },
  {
    "label": "hasPrivateLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasPrivateLinkage()"
  },
  {
    "label": "hasLocalLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasLocalLinkage()"
  },
  {
    "label": "hasExternalWeakLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasExternalWeakLinkage()"
  },
  {
    "label": "hasCommonLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasCommonLinkage()"
  },
  {
    "label": "setLinkage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setLinkage(LinkageTypes LT)"
  },
  {
    "label": "getLinkage()",
    "kind": "Method",
    "detail": "Function (Linkage = LT ; } LinkageTypes)",
    "insertText": "getLinkage()"
  },
  {
    "label": "mayBeOverridden()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "mayBeOverridden()"
  },
  {
    "label": "isWeakForLinker()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isWeakForLinker()"
  },
  {
    "label": "copyAttributesFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "copyAttributesFrom(const GlobalValue *Src)"
  },
  {
    "label": "getRealLinkageName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getRealLinkageName(StringRef Name)"
  },
  {
    "label": "isDematerializable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isDematerializable()"
  },
  {
    "label": "materialize()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "materialize()"
  },
  {
    "label": "dematerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dematerialize()"
  },
  {
    "label": "isDeclaration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isDeclaration()"
  },
  {
    "label": "isDeclarationForLinker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isDeclarationForLinker()"
  },
  {
    "label": "isStrongDefinitionForLinker()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isStrongDefinitionForLinker()"
  },
  {
    "label": "removeFromParent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeFromParent()"
  },
  {
    "label": "eraseFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eraseFromParent()"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (Module*)",
    "insertText": "getParent()"
  }
]