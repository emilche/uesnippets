[
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "FSequencerSnapField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSnapField"
  },
  {
    "label": "FEditToolDragOperation_Stretch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditToolDragOperation_Stretch"
  },
  {
    "label": "FStretchTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStretchTarget"
  },
  {
    "label": "FEditToolDragOperation_Stretch()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" ISequencerEditTool . h \" # include \" MVVM / Extensions / IStretchableExtension . h \" # include \" Tools / SequencerSnapField . h \" # include \" ScopedTransaction . h \" class ISequencer ; class FSequencerSnapField ; namespace UE { namespace Sequencer { class FEditToolDragOperation_Stretch : public ISequencerEditToolDragOperation,public IStretchOperation,public ISnapCandidate { public :)",
    "insertText": "FEditToolDragOperation_Stretch(ISequencer* InSequencer, EStretchConstraint InStretchConstraint, FFrameNumber InDragStartPosition)"
  },
  {
    "label": "DoNotSnapTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoNotSnapTo(TSharedPtr<FViewModel> Model)"
  },
  {
    "label": "InitiateStretch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitiateStretch(TSharedPtr<FViewModel> Controller, TSharedPtr<IStretchableExtension> Target, int32 Priority, const FStretchParameters& InParams)"
  },
  {
    "label": "OnBeginDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginDrag(const FPointerEvent& MouseEvent, FVector2D LocalMousePos, const FVirtualTrackArea& VirtualTrackArea)"
  },
  {
    "label": "OnDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrag(const FPointerEvent& MouseEvent, FVector2D LocalMousePos, const FVirtualTrackArea& VirtualTrackArea)"
  },
  {
    "label": "OnEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndDrag(const FPointerEvent& MouseEvent, FVector2D LocalMousePos, const FVirtualTrackArea& VirtualTrackArea)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "GetCursor()"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "IsKeyApplicable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeyApplicable(FKeyHandle KeyHandle, const FViewModelPtr& Owner)"
  },
  {
    "label": "AreSectionBoundsApplicable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreSectionBoundsApplicable(UMovieSceneSection* Section)"
  },
  {
    "label": "AreSectionCustomSnapsApplicable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreSectionCustomSnapsApplicable(UMovieSceneSection* Section)"
  }
]