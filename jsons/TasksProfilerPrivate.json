[
  {
    "label": "FTasksProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTasksProvider"
  },
  {
    "label": "FTasksProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" TraceServices / Model / AnalysisSession . h \" # include \" TraceServices / Model / TasksProfiler . h \" # include \" TraceServices / Model / Counters . h \" # include \" HAL / CriticalSection . h \" # include \" Async / TaskTrace . h \" # include \" Containers / Map . h \" namespace TraceServices { class FTasksProvider : public ITasksProvider { public :)",
    "insertText": "FTasksProvider(IAnalysisSession& Session)"
  },
  {
    "label": "FTasksProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTasksProvider()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(uint32 Version)"
  },
  {
    "label": "TaskCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskCreated(TaskTrace::FId TaskId, double Timestamp, uint32 ThreadId, uint64 TaskSize)"
  },
  {
    "label": "TaskLaunched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskLaunched(TaskTrace::FId TaskId, const TCHAR* DebugName, bool bTracked, int32 ThreadToExecuteOn, double Timestamp, uint32 ThreadId, uint64 TaskSize)"
  },
  {
    "label": "TaskScheduled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskScheduled(TaskTrace::FId TaskId, double Timestamp, uint32 ThreadId)"
  },
  {
    "label": "SubsequentAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubsequentAdded(TaskTrace::FId TaskId, TaskTrace::FId SubsequentId, double Timestamp, uint32 ThreadId)"
  },
  {
    "label": "TaskStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskStarted(TaskTrace::FId TaskId, double Timestamp, uint32 ThreadId)"
  },
  {
    "label": "TaskFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskFinished(TaskTrace::FId TaskId, double Timestamp)"
  },
  {
    "label": "TaskCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskCompleted(TaskTrace::FId TaskId, double Timestamp, uint32 ThreadId)"
  },
  {
    "label": "TaskDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskDestroyed(TaskTrace::FId TaskId, double Timestamp, uint32 ThreadId)"
  },
  {
    "label": "WaitingStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitingStarted(TArray<TaskTrace::FId> Tasks, double Timestamp, uint32 ThreadId)"
  },
  {
    "label": "WaitingFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitingFinished(double Timestamp, uint32 ThreadId)"
  },
  {
    "label": "TryGetTask()",
    "kind": "Method",
    "detail": "Function (const FTaskInfo*)",
    "insertText": "TryGetTask(uint32 ThreadId, double Timestamp)"
  },
  {
    "label": "TryGetTask()",
    "kind": "Method",
    "detail": "Function (const FTaskInfo*)",
    "insertText": "TryGetTask(TaskTrace::FId TaskId)"
  },
  {
    "label": "TryGetWaiting()",
    "kind": "Method",
    "detail": "Function (const FWaitingForTasks*)",
    "insertText": "TryGetWaiting(const TCHAR* TimerName, uint32 ThreadId, double Timestamp)"
  },
  {
    "label": "TryGetParallelForTasks()",
    "kind": "Method",
    "detail": "Function (TArray<TaskTrace::FId>)",
    "insertText": "TryGetParallelForTasks(const TCHAR* TimerName, uint32 ThreadId, double StartTime, double EndTime)"
  },
  {
    "label": "GetNumTasks()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetNumTasks()"
  },
  {
    "label": "EnumerateTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateTasks(double StartTime, double EndTime, ETaskEnumerationOption EnumerationOption, TaskCallback Callback)"
  },
  {
    "label": "InitTaskIdToIndexConversion()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitTaskIdToIndexConversion(TaskTrace::FId FirstTaskId)"
  },
  {
    "label": "GetTaskIndex()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetTaskIndex(TaskTrace::FId TaskId)"
  },
  {
    "label": "TryGetOrCreateTask()",
    "kind": "Method",
    "detail": "Function (FTaskInfo*)",
    "insertText": "TryGetOrCreateTask(TaskTrace::FId TaskId)"
  },
  {
    "label": "IsNamedThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNamedThread(int32 Thread)"
  },
  {
    "label": "CreateCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCounters()"
  },
  {
    "label": "AddRelative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRelative(const TCHAR* RelativeType, TaskTrace::FId TaskId, TArray<FTaskInfo::FRelationInfo> FTaskInfo::* RelationsPtr, TaskTrace::FId RelativeId, double Timestamp, uint32 ThreadId)"
  },
  {
    "label": "Version()",
    "kind": "Method",
    "detail": "Function (private : IAnalysisSession& Session ; uint32)",
    "insertText": "Version(uint32)"
  }
]