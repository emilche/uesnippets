[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___CHARCONV_TO_CHARS_BASE_10_H # define _LIBCPP___CHARCONV_TO_CHARS_BASE_10_H # include<__algorithm / copy_n . h> # include<__charconv / tables . h> # include<__config> # include<cstdint> # include<limits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__append1()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__append1(char* __first, uint32_t __value)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (* __first = ' 0 ' + static_cast<)",
    "insertText": "char(__value)"
  },
  {
    "label": "__append3()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__append3(char* __first, uint32_t __value)"
  },
  {
    "label": "__append4()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__append4(char* __first, uint32_t __value)"
  },
  {
    "label": "__append5()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__append5(char* __first, uint32_t __value)"
  },
  {
    "label": "__append6()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__append6(char* __first, uint32_t __value)"
  },
  {
    "label": "__append7()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__append7(char* __first, uint32_t __value)"
  },
  {
    "label": "__append8()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__append8(char* __first, uint32_t __value)"
  },
  {
    "label": "__append9()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__append9(char* __first, uint32_t __value)"
  },
  {
    "label": "__append10()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__append10(char* __first, _Tp __value)"
  },
  {
    "label": "__base_10_u32()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__base_10_u32(char* __first, uint32_t __value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__value < 1000) return __itoa::__append3(__first, __value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__value < 100000) return __itoa::__append5(__first, __value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__value < 100000000)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__value < 1000000000) return __itoa::__append9(__first, __value)"
  },
  {
    "label": "__base_10_u64()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__base_10_u64(char* __buffer, uint64_t __value)"
  },
  {
    "label": "__base_10_u32()",
    "kind": "Method",
    "detail": "Function (__buffer =)",
    "insertText": "__base_10_u32(__buffer, static_cast<uint32_t>(__value / 10000000000))"
  },
  {
    "label": "__append10()",
    "kind": "Method",
    "detail": "Function (__value % = 1 0 0 0 0 0 0 0 0 0 0 ; } return)",
    "insertText": "__append10(__buffer, __value)"
  },
  {
    "label": "__pow_10()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_HAS_NO_INT128 _LIBCPP_HIDE_FROM_ABI __uint128_t)",
    "insertText": "__pow_10(int __exp)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__exp >= __table<>::__pow10_128_offset, \"Index out of bounds\")"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__value > numeric_limits<uint64_t>::max(), \"The optimizations for this algorithm fail when this isn't true.\")"
  },
  {
    "label": "__append1()",
    "kind": "Method",
    "detail": "Function (__buffer =)",
    "insertText": "__append1(__buffer, static_cast<uint32_t>(__value / __itoa::__pow_10(38)))"
  },
  {
    "label": "__pow_10()",
    "kind": "Method",
    "detail": "Function (__value % =)",
    "insertText": "__pow_10(38)"
  },
  {
    "label": "__append9()",
    "kind": "Method",
    "detail": "Function (__buffer =)",
    "insertText": "__append9(__buffer, static_cast<uint32_t>(__value / __itoa::__pow_10(29)))"
  },
  {
    "label": "__pow_10()",
    "kind": "Method",
    "detail": "Function (__value % =)",
    "insertText": "__pow_10(29)"
  },
  {
    "label": "__append10()",
    "kind": "Method",
    "detail": "Function (__buffer =)",
    "insertText": "__append10(__buffer, static_cast<uint64_t>(__value / __itoa::__pow_10(19)))"
  },
  {
    "label": "__pow_10()",
    "kind": "Method",
    "detail": "Function (__value % =)",
    "insertText": "__pow_10(19)"
  },
  {
    "label": "__base_10_u64()",
    "kind": "Method",
    "detail": "Function (} else { __buffer =)",
    "insertText": "__base_10_u64(__buffer, static_cast<uint64_t>(__value / __itoa::__pow_10(19)))"
  },
  {
    "label": "__append9()",
    "kind": "Method",
    "detail": "Function (} __buffer =)",
    "insertText": "__append9(__buffer, static_cast<uint32_t>(__value / 10000000000))"
  },
  {
    "label": "__append10()",
    "kind": "Method",
    "detail": "Function (__buffer =)",
    "insertText": "__append10(__buffer, static_cast<uint64_t>(__value % 10000000000))"
  }
]