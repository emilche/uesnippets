[
  {
    "label": "msgpack_unpacked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "msgpack_unpacked"
  },
  {
    "label": "msgpack_unpacker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "msgpack_unpacker"
  },
  {
    "label": "msgpack_unpack_next()",
    "kind": "Method",
    "detail": "Function (# ifndef MSGPACK_UNPACKER_H # define MSGPACK_UNPACKER_H # include \" zone . h \" # include \" object . h \" # include<string . h> # ifdef __cplusplus \" C \" { # endif typedef struct msgpack_unpacked { msgpack_zone* zone ; msgpack_object data ; } msgpack_unpacked ; typedef enum { MSGPACK_UNPACK_SUCCESS = 2,MSGPACK_UNPACK_EXTRA_BYTES = 1,MSGPACK_UNPACK_CONTINUE = 0,MSGPACK_UNPACK_PARSE_ERROR = - 1,MSGPACK_UNPACK_NOMEM_ERROR = - 2 } msgpack_unpack_return ; MSGPACK_DLLEXPORT msgpack_unpack_return)",
    "insertText": "msgpack_unpack_next(msgpack_unpacked* result, const char* data, size_t len, size_t* off)"
  },
  {
    "label": "MSGPACK_UNPACKER_INIT_BUFFER_SIZE()",
    "kind": "Method",
    "detail": "Function (typedef struct msgpack_unpacker { char* buffer ; size_t used ; size_t free ; size_t off ; size_t parsed ; msgpack_zone* z ; size_t initial_buffer_size ; void* ctx ; } msgpack_unpacker ; # ifndef MSGPACK_UNPACKER_INIT_BUFFER_SIZE # define)",
    "insertText": "MSGPACK_UNPACKER_INIT_BUFFER_SIZE(64*1024) #endif MSGPACK_DLLEXPORT bool msgpack_unpacker_init(msgpack_unpacker* mpac, size_t initial_buffer_size)"
  },
  {
    "label": "msgpack_unpacker_destroy()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT void)",
    "insertText": "msgpack_unpacker_destroy(msgpack_unpacker* mpac)"
  },
  {
    "label": "msgpack_unpacker_new()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT msgpack_unpacker*)",
    "insertText": "msgpack_unpacker_new(size_t initial_buffer_size)"
  },
  {
    "label": "msgpack_unpacker_free()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT void)",
    "insertText": "msgpack_unpacker_free(msgpack_unpacker* mpac)"
  },
  {
    "label": "MSGPACK_UNPACKER_RESERVE_SIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef MSGPACK_UNPACKER_RESERVE_SIZE # define)",
    "insertText": "MSGPACK_UNPACKER_RESERVE_SIZE(32*1024) #endif static inline bool msgpack_unpacker_reserve_buffer(msgpack_unpacker* mpac, size_t size)"
  },
  {
    "label": "msgpack_unpacker_buffer()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "msgpack_unpacker_buffer(msgpack_unpacker* mpac)"
  },
  {
    "label": "msgpack_unpacker_buffer_capacity()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "msgpack_unpacker_buffer_capacity(const msgpack_unpacker* mpac)"
  },
  {
    "label": "msgpack_unpacker_buffer_consumed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "msgpack_unpacker_buffer_consumed(msgpack_unpacker* mpac, size_t size)"
  },
  {
    "label": "msgpack_unpacker_next()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT msgpack_unpack_return)",
    "insertText": "msgpack_unpacker_next(msgpack_unpacker* mpac, msgpack_unpacked* pac)"
  },
  {
    "label": "msgpack_unpacker_next_with_size()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT msgpack_unpack_return)",
    "insertText": "msgpack_unpacker_next_with_size(msgpack_unpacker* mpac, msgpack_unpacked* result, size_t *p_bytes)"
  },
  {
    "label": "msgpack_unpacked_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "msgpack_unpacked_init(msgpack_unpacked* result)"
  },
  {
    "label": "msgpack_unpacked_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "msgpack_unpacked_destroy(msgpack_unpacked* result)"
  },
  {
    "label": "msgpack_unpacked_release_zone()",
    "kind": "Method",
    "detail": "Function (msgpack_zone*)",
    "insertText": "msgpack_unpacked_release_zone(msgpack_unpacked* result)"
  },
  {
    "label": "msgpack_unpacker_execute()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT int)",
    "insertText": "msgpack_unpacker_execute(msgpack_unpacker* mpac)"
  },
  {
    "label": "msgpack_unpacker_data()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT msgpack_object)",
    "insertText": "msgpack_unpacker_data(msgpack_unpacker* mpac)"
  },
  {
    "label": "msgpack_unpacker_release_zone()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT msgpack_zone*)",
    "insertText": "msgpack_unpacker_release_zone(msgpack_unpacker* mpac)"
  },
  {
    "label": "msgpack_unpacker_reset_zone()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT void)",
    "insertText": "msgpack_unpacker_reset_zone(msgpack_unpacker* mpac)"
  },
  {
    "label": "msgpack_unpacker_reset()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT void)",
    "insertText": "msgpack_unpacker_reset(msgpack_unpacker* mpac)"
  },
  {
    "label": "msgpack_unpacker_message_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "msgpack_unpacker_message_size(const msgpack_unpacker* mpac)"
  },
  {
    "label": "msgpack_unpack()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT msgpack_unpack_return)",
    "insertText": "msgpack_unpack(const char* data, size_t len, size_t* off, msgpack_zone* result_zone, msgpack_object* result)"
  },
  {
    "label": "msgpack_unpacker_parsed_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "msgpack_unpacker_parsed_size(const msgpack_unpacker* mpac)"
  },
  {
    "label": "msgpack_unpacker_flush_zone()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT bool)",
    "insertText": "msgpack_unpacker_flush_zone(msgpack_unpacker* mpac)"
  },
  {
    "label": "msgpack_unpacker_expand_buffer()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT bool)",
    "insertText": "msgpack_unpacker_expand_buffer(msgpack_unpacker* mpac, size_t size)"
  },
  {
    "label": "msgpack_unpacker_reserve_buffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "msgpack_unpacker_reserve_buffer(msgpack_unpacker* mpac, size_t size)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(result, 0, sizeof(msgpack_unpacked))"
  },
  {
    "label": "msgpack_zone_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "msgpack_zone_free(result->zone)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (result -> zone = NULL ;)",
    "insertText": "memset(&result->data, 0, sizeof(msgpack_object))"
  }
]