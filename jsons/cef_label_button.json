[
  {
    "label": "CefMenuButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefMenuButton"
  },
  {
    "label": "CefLabelButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefLabelButton"
  },
  {
    "label": "CreateLabelButton()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_VIEWS_CEF_LABEL_BUTTON_H_ # define CEF_INCLUDE_VIEWS_CEF_LABEL_BUTTON_H_ # pragma once # include \" include / cef_image . h \" # include \" include / views / cef_button . h \" # include \" include / views / cef_button_delegate . h \" class CefMenuButton ; class CefLabelButton : public CefButton { public : CefRefPtr<CefLabelButton>)",
    "insertText": "CreateLabelButton(CefRefPtr<CefButtonDelegate> delegate, const CefString& text)"
  },
  {
    "label": "AsMenuButton()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefMenuButton>)",
    "insertText": "AsMenuButton()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const CefString& text)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetText()"
  },
  {
    "label": "SetImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImage(cef_button_state_t button_state, CefRefPtr<CefImage> image)"
  },
  {
    "label": "GetImage()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefImage>)",
    "insertText": "GetImage(cef_button_state_t button_state)"
  },
  {
    "label": "SetTextColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextColor(cef_button_state_t for_state, cef_color_t color)"
  },
  {
    "label": "SetEnabledTextColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledTextColors(cef_color_t color)"
  },
  {
    "label": "SetFontList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFontList(const CefString& font_list)"
  },
  {
    "label": "SetHorizontalAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHorizontalAlignment(cef_horizontal_alignment_t alignment)"
  },
  {
    "label": "SetMinimumSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinimumSize(const CefSize& size)"
  },
  {
    "label": "SetMaximumSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaximumSize(const CefSize& size)"
  }
]