[
  {
    "label": "UNumberRangeCollapse",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberRangeCollapse"
  },
  {
    "label": "UNumberRangeIdentityFallback",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberRangeIdentityFallback"
  },
  {
    "label": "UNumberRangeIdentityResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberRangeIdentityResult"
  },
  {
    "label": "UnlocalizedNumberRangeFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnlocalizedNumberRangeFormatter"
  },
  {
    "label": "LocalizedNumberRangeFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalizedNumberRangeFormatter"
  },
  {
    "label": "FormattedNumberRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormattedNumberRange"
  },
  {
    "label": "RangeMacroProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RangeMacroProps"
  },
  {
    "label": "DecimalQuantity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecimalQuantity"
  },
  {
    "label": "UFormattedNumberRangeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFormattedNumberRangeData"
  },
  {
    "label": "NumberRangeFormatterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberRangeFormatterImpl"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "NumberRangeFormatterSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberRangeFormatterSettings"
  },
  {
    "label": "NumberRangeFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberRangeFormatter"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_FORMATTING # ifndef __NUMBERRANGEFORMATTER_H__ # define __NUMBERRANGEFORMATTER_H__ # include<atomic> # include \" unicode / appendable . h \" # include \" unicode / fieldpos . h \" # include \" unicode / formattedvalue . h \" # include \" unicode / fpositer . h \" # include \" unicode / numberformatter . h \" # ifndef typedef enum UNumberRangeCollapse { UNUM_RANGE_COLLAPSE_AUTO,UNUM_RANGE_COLLAPSE_NONE,UNUM_RANGE_COLLAPSE_UNIT,UNUM_RANGE_COLLAPSE_ALL } UNumberRangeCollapse ; typedef enum UNumberRangeIdentityFallback { UNUM_IDENTITY_FALLBACK_SINGLE_VALUE,UNUM_IDENTITY_FALLBACK_APPROXIMATELY_OR_SINGLE_VALUE,UNUM_IDENTITY_FALLBACK_APPROXIMATELY,UNUM_IDENTITY_FALLBACK_RANGE } UNumberRangeIdentityFallback ; typedef enum UNumberRangeIdentityResult { UNUM_IDENTITY_RESULT_EQUAL_BEFORE_ROUNDING,UNUM_IDENTITY_RESULT_EQUAL_AFTER_ROUNDING,UNUM_IDENTITY_RESULT_NOT_EQUAL,# ifndef UNUM_IDENTITY_RESULT_COUNT # endif } UNumberRangeIdentityResult ; U_NAMESPACE_BEGIN namespace number { class UnlocalizedNumberRangeFormatter ; class LocalizedNumberRangeFormatter ; class FormattedNumberRange ; namespace impl { struct RangeMacroProps ; class DecimalQuantity ; class UFormattedNumberRangeData ; class NumberRangeFormatterImpl ; } # if U_PLATFORM = = U_PF_WINDOWS&& !)",
    "insertText": "defined(U_IN_DOXYGEN)"
  },
  {
    "label": "copyErrorTo()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_BEGIN namespace number { # endif namespace impl { struct U_I18N_API RangeMacroProps : public UMemory { UnlocalizedNumberFormatter formatter1 ; UnlocalizedNumberFormatter formatter2 ; bool singleFormatter = true ; UNumberRangeCollapse collapse = UNUM_RANGE_COLLAPSE_AUTO ; UNumberRangeIdentityFallback identityFallback = UNUM_IDENTITY_FALLBACK_APPROXIMATELY ; Locale locale ; bool)",
    "insertText": "copyErrorTo(UErrorCode &status)"
  },
  {
    "label": "numberFormatterBoth()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> class U_I18N_API NumberRangeFormatterSettings { public : Derived)",
    "insertText": "numberFormatterBoth(const UnlocalizedNumberFormatter &formatter)"
  },
  {
    "label": "numberFormatterBoth()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "numberFormatterBoth(UnlocalizedNumberFormatter &&formatter)"
  },
  {
    "label": "numberFormatterFirst()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "numberFormatterFirst(const UnlocalizedNumberFormatter &formatterFirst)"
  },
  {
    "label": "numberFormatterFirst()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "numberFormatterFirst(UnlocalizedNumberFormatter &&formatterFirst)"
  },
  {
    "label": "numberFormatterSecond()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "numberFormatterSecond(const UnlocalizedNumberFormatter &formatterSecond)"
  },
  {
    "label": "numberFormatterSecond()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "numberFormatterSecond(UnlocalizedNumberFormatter &&formatterSecond)"
  },
  {
    "label": "collapse()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "collapse(UNumberRangeCollapse collapse)"
  },
  {
    "label": "identityFallback()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "identityFallback(UNumberRangeIdentityFallback identityFallback)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (LocalPointer<Derived>)",
    "insertText": "clone()"
  },
  {
    "label": "copyErrorTo()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "copyErrorTo(UErrorCode &outErrorCode)"
  },
  {
    "label": "NumberRangeFormatterSettings()",
    "kind": "Method",
    "detail": "Function (} private : impl::RangeMacroProps fMacros ;)",
    "insertText": "NumberRangeFormatterSettings()"
  },
  {
    "label": "locale()",
    "kind": "Method",
    "detail": "Function (class LocalizedNumberRangeFormatter ; class UnlocalizedNumberRangeFormatter ; } ; class U_I18N_API UnlocalizedNumberRangeFormatter : public NumberRangeFormatterSettings<UnlocalizedNumberRangeFormatter>,public UMemory { public : LocalizedNumberRangeFormatter)",
    "insertText": "locale(const icu::Locale &locale)"
  },
  {
    "label": "UnlocalizedNumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlocalizedNumberRangeFormatter()"
  },
  {
    "label": "UnlocalizedNumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlocalizedNumberRangeFormatter(const UnlocalizedNumberRangeFormatter &other)"
  },
  {
    "label": "UnlocalizedNumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlocalizedNumberRangeFormatter(UnlocalizedNumberRangeFormatter&& src)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnlocalizedNumberRangeFormatter&)",
    "insertText": "operator(const UnlocalizedNumberRangeFormatter& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnlocalizedNumberRangeFormatter&)",
    "insertText": "operator(UnlocalizedNumberRangeFormatter&& src)"
  },
  {
    "label": "UnlocalizedNumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "UnlocalizedNumberRangeFormatter(const NumberRangeFormatterSettings<UnlocalizedNumberRangeFormatter>& other)"
  },
  {
    "label": "UnlocalizedNumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlocalizedNumberRangeFormatter(NumberRangeFormatterSettings<UnlocalizedNumberRangeFormatter>&& src)"
  },
  {
    "label": "formatFormattableRange()",
    "kind": "Method",
    "detail": "Function (class NumberRangeFormatterSettings<UnlocalizedNumberRangeFormatter> ; class NumberRangeFormatter ; } ; class U_I18N_API LocalizedNumberRangeFormatter : public NumberRangeFormatterSettings<LocalizedNumberRangeFormatter>,public UMemory { public : FormattedNumberRange)",
    "insertText": "formatFormattableRange(const Formattable& first, const Formattable& second, UErrorCode& status)"
  },
  {
    "label": "LocalizedNumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberRangeFormatter()"
  },
  {
    "label": "LocalizedNumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberRangeFormatter(const LocalizedNumberRangeFormatter &other)"
  },
  {
    "label": "LocalizedNumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberRangeFormatter(LocalizedNumberRangeFormatter&& src)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LocalizedNumberRangeFormatter&)",
    "insertText": "operator(const LocalizedNumberRangeFormatter& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LocalizedNumberRangeFormatter&)",
    "insertText": "operator(LocalizedNumberRangeFormatter&& src)"
  },
  {
    "label": "formatImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef void)",
    "insertText": "formatImpl(impl::UFormattedNumberRangeData& results, bool equalBeforeRounding, UErrorCode& status)"
  },
  {
    "label": "getFormatter()",
    "kind": "Method",
    "detail": "Function (private : std::atomic<impl::NumberRangeFormatterImpl*> fAtomicFormatter = { } ; const impl::NumberRangeFormatterImpl*)",
    "insertText": "getFormatter(UErrorCode& stauts)"
  },
  {
    "label": "LocalizedNumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberRangeFormatter(const NumberRangeFormatterSettings<LocalizedNumberRangeFormatter>& other)"
  },
  {
    "label": "LocalizedNumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberRangeFormatter(NumberRangeFormatterSettings<LocalizedNumberRangeFormatter>&& src)"
  },
  {
    "label": "LocalizedNumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberRangeFormatter(const impl::RangeMacroProps &macros, const Locale &locale)"
  },
  {
    "label": "LocalizedNumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberRangeFormatter(impl::RangeMacroProps &&macros, const Locale &locale)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (class NumberRangeFormatterSettings<UnlocalizedNumberRangeFormatter> ; class NumberRangeFormatterSettings<LocalizedNumberRangeFormatter> ; class UnlocalizedNumberRangeFormatter ; } ; class U_I18N_API FormattedNumberRange : public UMemory,public FormattedValue { public : UnicodeString)",
    "insertText": "toString(UErrorCode& status)"
  },
  {
    "label": "toTempString()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "toTempString(UErrorCode& status)"
  },
  {
    "label": "appendTo()",
    "kind": "Method",
    "detail": "Function (Appendable&)",
    "insertText": "appendTo(Appendable &appendable, UErrorCode& status)"
  },
  {
    "label": "nextPosition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "nextPosition(ConstrainedFieldPosition& cfpos, UErrorCode& status)"
  },
  {
    "label": "nextFieldPosition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "nextFieldPosition(FieldPosition& fieldPosition, UErrorCode& status)"
  },
  {
    "label": "getAllFieldPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAllFieldPositions(FieldPositionIterator &iterator, UErrorCode &status)"
  },
  {
    "label": "getFirstDecimal()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getFirstDecimal(UErrorCode& status)"
  },
  {
    "label": "getSecondDecimal()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getSecondDecimal(UErrorCode& status)"
  },
  {
    "label": "getIdentityResult()",
    "kind": "Method",
    "detail": "Function (UNumberRangeIdentityResult)",
    "insertText": "getIdentityResult(UErrorCode& status)"
  },
  {
    "label": "FormattedNumberRange()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FormattedNumberRange()"
  },
  {
    "label": "FormattedNumberRange()",
    "kind": "Method",
    "detail": "Function (private : const impl::UFormattedNumberRangeData* fData ; UErrorCode fErrorCode ;)",
    "insertText": "FormattedNumberRange(impl::UFormattedNumberRangeData *results) : fData(results), fErrorCode(U_ZERO_ERROR)"
  },
  {
    "label": "FormattedNumberRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FormattedNumberRange(UErrorCode errorCode) : fData(nullptr), fErrorCode(errorCode)"
  },
  {
    "label": "getAllFieldPositionsImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getAllFieldPositionsImpl(FieldPositionIteratorHandler& fpih, UErrorCode& status)"
  },
  {
    "label": "with()",
    "kind": "Method",
    "detail": "Function (class LocalizedNumberRangeFormatter ; } ; class U_I18N_API NumberRangeFormatter final { public : UnlocalizedNumberRangeFormatter)",
    "insertText": "with()"
  },
  {
    "label": "withLocale()",
    "kind": "Method",
    "detail": "Function (LocalizedNumberRangeFormatter)",
    "insertText": "withLocale(const Locale &locale)"
  },
  {
    "label": "NumberRangeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NumberRangeFormatter()"
  }
]