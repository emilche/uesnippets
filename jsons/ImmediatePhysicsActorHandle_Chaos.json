[
  {
    "label": "FActorHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorHandle"
  },
  {
    "label": "FSimulation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimulation"
  },
  {
    "label": "FJointHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJointHandle"
  },
  {
    "label": "FActorHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Physics / ImmediatePhysics / ImmediatePhysicsChaos / ImmediatePhysicsCore_Chaos . h \" # include \" Chaos / ChaosEngineInterface . h \" # include \" Engine / EngineTypes . h \" namespace ImmediatePhysics_Chaos { struct FActorHandle { public : ~)",
    "insertText": "FActorHandle()"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(const FName& InName)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (Name = InName ; } const FName&)",
    "insertText": "GetName()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(bool bEnabled)"
  },
  {
    "label": "GetHasCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHasCollision()"
  },
  {
    "label": "SetHasCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasCollision(bool bHasCollision)"
  },
  {
    "label": "InitWorldTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWorldTransform(const FTransform& WorldTM)"
  },
  {
    "label": "SetWorldTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldTransform(const FTransform& WorldTM)"
  },
  {
    "label": "SetIsKinematic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetIsKinematic(bool bKinematic)"
  },
  {
    "label": "GetIsKinematic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsKinematic()"
  },
  {
    "label": "GetKinematicTarget()",
    "kind": "Method",
    "detail": "Function (const FKinematicTarget&)",
    "insertText": "GetKinematicTarget()"
  },
  {
    "label": "SetKinematicTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKinematicTarget(const FTransform& WorldTM)"
  },
  {
    "label": "HasKinematicTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasKinematicTarget()"
  },
  {
    "label": "IsGravityEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGravityEnabled()"
  },
  {
    "label": "IsStatic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStatic()"
  },
  {
    "label": "CouldBeDynamic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CouldBeDynamic()"
  },
  {
    "label": "SetGravityEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGravityEnabled(bool bEnable)"
  },
  {
    "label": "IsSimulated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulated()"
  },
  {
    "label": "GetWorldTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetWorldTransform()"
  },
  {
    "label": "SetLinearVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearVelocity(const FVector& NewLinearVelocity)"
  },
  {
    "label": "GetLinearVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetLinearVelocity()"
  },
  {
    "label": "SetAngularVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularVelocity(const FVector& NewAngularVelocity)"
  },
  {
    "label": "GetAngularVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetAngularVelocity()"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce(const FVector& Force)"
  },
  {
    "label": "AddTorque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorque(const FVector& Torque)"
  },
  {
    "label": "AddRadialForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialForce(const FVector& Origin, FReal Strength, FReal Radius, ERadialImpulseFalloff Falloff, EForceType ForceType)"
  },
  {
    "label": "AddImpulseAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpulseAtLocation(FVector Impulse, FVector Location)"
  },
  {
    "label": "SetLinearDamping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDamping(FReal NewLinearDamping)"
  },
  {
    "label": "GetLinearDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetLinearDamping()"
  },
  {
    "label": "SetAngularDamping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDamping(FReal NewAngularDamping)"
  },
  {
    "label": "GetAngularDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularDamping()"
  },
  {
    "label": "SetMaxLinearVelocitySquared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxLinearVelocitySquared(FReal NewMaxLinearVelocitySquared)"
  },
  {
    "label": "GetMaxLinearVelocitySquared()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetMaxLinearVelocitySquared()"
  },
  {
    "label": "SetMaxAngularVelocitySquared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxAngularVelocitySquared(FReal NewMaxAngularVelocitySquared)"
  },
  {
    "label": "GetMaxAngularVelocitySquared()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetMaxAngularVelocitySquared()"
  },
  {
    "label": "SetInverseMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInverseMass(FReal NewInverseMass)"
  },
  {
    "label": "GetInverseMass()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetInverseMass()"
  },
  {
    "label": "GetMass()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetMass()"
  },
  {
    "label": "SetInverseInertia()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInverseInertia(const FVector& NewInverseInertia)"
  },
  {
    "label": "GetInverseInertia()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetInverseInertia()"
  },
  {
    "label": "GetInertia()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetInertia()"
  },
  {
    "label": "SetMaxDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxDepenetrationVelocity(FReal NewMaxDepenetrationVelocity)"
  },
  {
    "label": "GetMaxDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetMaxDepenetrationVelocity()"
  },
  {
    "label": "SetMaxContactImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxContactImpulse(FReal NewMaxContactImpulse)"
  },
  {
    "label": "GetMaxContactImpulse()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetMaxContactImpulse()"
  },
  {
    "label": "GetLocalCoMTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetLocalCoMTransform()"
  },
  {
    "label": "GetLocalCoMLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetLocalCoMLocation()"
  },
  {
    "label": "GetParticle()",
    "kind": "Method",
    "detail": "Function (Chaos::FGeometryParticleHandle*)",
    "insertText": "GetParticle()"
  },
  {
    "label": "GetLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLevel()"
  },
  {
    "label": "SetLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLevel(int32 InLevel)"
  },
  {
    "label": "CreateParticleHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateParticleHandle(FBodyInstance* BodyInstance, const EActorType ActorType, const FTransform& WorldTransform, const FReal Mass, const Chaos::FVec3 Inertia, const Chaos::FRigidTransform3& CoMTransform)"
  },
  {
    "label": "FActorHandle()",
    "kind": "Method",
    "detail": "Function (struct FSimulation ; struct FJointHandle ;)",
    "insertText": "FActorHandle(Chaos::FPBDRigidsSOAs& InParticles, Chaos::TArrayCollectionArray<Chaos::FVec3>& InParticlePrevXs, Chaos::TArrayCollectionArray<Chaos::FRotation3>& InParticlePrevRs, EActorType ActorType, FBodyInstance* BodyInstance, const FTransform& Transform)"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (Chaos::FGenericParticleHandle)",
    "insertText": "Handle()"
  }
]