[
  {
    "label": "FActorHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorHandle"
  },
  {
    "label": "FSimulation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimulation"
  },
  {
    "label": "FJointHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJointHandle"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(bool bEnabled)"
  },
  {
    "label": "SetHasCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasCollision(bool bHasCollision)"
  },
  {
    "label": "InitWorldTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWorldTransform(const FTransform& WorldTM)"
  },
  {
    "label": "SetWorldTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldTransform(const FTransform& WorldTM)"
  },
  {
    "label": "SetIsKinematic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetIsKinematic(bool bKinematic)"
  },
  {
    "label": "SetKinematicTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKinematicTarget(const FTransform& WorldTM)"
  },
  {
    "label": "SetGravityEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGravityEnabled(bool bEnable)"
  },
  {
    "label": "SetLinearVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearVelocity(const FVector& NewLinearVelocity)"
  },
  {
    "label": "SetAngularVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularVelocity(const FVector& NewAngularVelocity)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce(const FVector& Force)"
  },
  {
    "label": "AddTorque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorque(const FVector& Torque)"
  },
  {
    "label": "AddRadialForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialForce(const FVector& Origin, FReal Strength, FReal Radius, ERadialImpulseFalloff Falloff, EForceType ForceType)"
  },
  {
    "label": "AddImpulseAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpulseAtLocation(FVector Impulse, FVector Location)"
  },
  {
    "label": "SetLinearDamping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDamping(FReal NewLinearDamping)"
  },
  {
    "label": "SetAngularDamping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDamping(FReal NewAngularDamping)"
  },
  {
    "label": "SetMaxLinearVelocitySquared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxLinearVelocitySquared(FReal NewMaxLinearVelocitySquared)"
  },
  {
    "label": "SetMaxAngularVelocitySquared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxAngularVelocitySquared(FReal NewMaxAngularVelocitySquared)"
  },
  {
    "label": "SetInverseMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInverseMass(FReal NewInverseMass)"
  },
  {
    "label": "SetInverseInertia()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInverseInertia(const FVector& NewInverseInertia)"
  },
  {
    "label": "SetMaxDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxDepenetrationVelocity(FReal NewMaxDepenetrationVelocity)"
  },
  {
    "label": "SetMaxContactImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxContactImpulse(FReal NewMaxContactImpulse)"
  },
  {
    "label": "SetLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLevel(int32 InLevel)"
  },
  {
    "label": "CreateParticleHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateParticleHandle(\n\t\t\tFBodyInstance*                 BodyInstance,\n\t\t\tconst EActorType               ActorType,\n\t\t\tconst FTransform&              WorldTransform,\n\t\t\tconst FReal                    Mass,\n\t\t\tconst Chaos::FVec3             Inertia,\n\t\t\tconst Chaos::FRigidTransform3& CoMTransform)"
  },
  {
    "label": "FActorHandle()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FActorHandle(\n\t\t\tChaos::FPBDRigidsSOAs& InParticles,\n\t\t\tChaos::TArrayCollectionArray<Chaos::FVec3>& InParticlePrevXs,\n\t\t\tChaos::TArrayCollectionArray<Chaos::FRotation3>& InParticlePrevRs,\n\t\t\tEActorType ActorType,\n\t\t\tFBodyInstance* BodyInstance,\n\t\t\tconst FTransform& Transform)"
  }
]