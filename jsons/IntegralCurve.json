[
  {
    "label": "FIntegralKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntegralKey"
  },
  {
    "label": "FIntegralCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntegralCurve"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Curves / KeyHandle . h \" # include \" Curves / IndexedCurve . h \" # include \" IntegralCurve . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: FIntegralKey(float InTime = 0.f, int32 InValue = 0) : Time(InTime) , Value(InValue)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: FIntegralCurve() : FIndexedCurve() , DefaultValue(MAX_int32) , bUseDefaultValueBeforeFirstKey(false)"
  },
  {
    "label": "FIntegralCurve()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FIntegralCurve()"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (} FIndexedCurve*)",
    "insertText": "Duplicate()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Evaluate(float Time, int32 InDefaultValue = 0)"
  },
  {
    "label": "HasAnyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyData()"
  },
  {
    "label": "GetKeyIterator()",
    "kind": "Method",
    "detail": "Function (} TArray<FIntegralKey>::TConstIterator)",
    "insertText": "GetKeyIterator()"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "AddKey(float InTime, int32 InValue, FKeyHandle KeyHandle = FKeyHandle())"
  },
  {
    "label": "DeleteKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKey(FKeyHandle KeyHandle)"
  },
  {
    "label": "UpdateOrAddKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "UpdateOrAddKey(float InTime, int32 Value, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "SetKeyTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTime(FKeyHandle KeyHandle, float NewTime)"
  },
  {
    "label": "GetKeyTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetKeyTime(FKeyHandle KeyHandle)"
  },
  {
    "label": "SetKeyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyValue(FKeyHandle KeyHandle, int32 NewValue)"
  },
  {
    "label": "GetKeyValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetKeyValue(FKeyHandle KeyHandle)"
  },
  {
    "label": "SetDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultValue(int32 InDefaultValue)"
  },
  {
    "label": "GetDefaultValue()",
    "kind": "Method",
    "detail": "Function (DefaultValue = InDefaultValue ; } int32)",
    "insertText": "GetDefaultValue()"
  },
  {
    "label": "SetUseDefaultValueBeforeFirstKey()",
    "kind": "Method",
    "detail": "Function (DefaultValue = MAX_int32 ; } void)",
    "insertText": "SetUseDefaultValueBeforeFirstKey(bool InbUseDefaultValueBeforeFirstKey)"
  },
  {
    "label": "GetUseDefaultValueBeforeFirstKey()",
    "kind": "Method",
    "detail": "Function (bUseDefaultValueBeforeFirstKey = InbUseDefaultValueBeforeFirstKey ; } bool)",
    "insertText": "GetUseDefaultValueBeforeFirstKey()"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (FIntegralKey)",
    "insertText": "GetKey(FKeyHandle KeyHandle)"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "FindKey(float KeyTime, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "FindKeyBeforeOrAt()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "FindKeyBeforeOrAt(float KeyTime)"
  },
  {
    "label": "RemoveRedundantKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantKeys()"
  }
]