[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FWeakObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeakObjectPtr"
  },
  {
    "label": "FFieldPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldPath"
  },
  {
    "label": "TStrongObjectPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStrongObjectPtr"
  },
  {
    "label": "FObjectKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectKey"
  },
  {
    "label": "FWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / ScriptDelegates . h \" # include \" UObject / UObjectArray . h \" # include \" UObject / StrongObjectPtr . h \" # include \" UObject / WeakObjectPtrFwd . h \" # include<type_traits> class FArchive ; class UObject ; # ifndef UE_WEAKOBJECTPTR_ZEROINIT_FIX # define UE_WEAKOBJECTPTR_ZEROINIT_FIX 1 # endif namespace UE::Core::Private { # if UE_WEAKOBJECTPTR_ZEROINIT_FIX int32 InvalidWeakObjectIndex = 0 ; # else int32 InvalidWeakObjectIndex = INDEX_NONE ; # endif } struct FWeakObjectPtr { public : struct FFieldPath ; # if UE_WEAKOBJECTPTR_ZEROINIT_FIX)",
    "insertText": "FWeakObjectPtr()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWeakObjectPtr(TYPE_OF_NULLPTR)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} # endif template<U)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<U, const UObject*>) > FORCEINLINE FWeakObjectPtr(U&& Object)"
  },
  {
    "label": "FWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWeakObjectPtr(const FWeakObjectPtr& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Core::Private ; ObjectIndex = InvalidWeakObjectIndex ; ObjectSerialNumber = 0 ; } void)",
    "insertText": "operator(const class UObject* Object)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(TObjectPtr<UObject> Object)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWeakObjectPtr&)",
    "insertText": "operator(const FWeakObjectPtr& Other)"
  },
  {
    "label": "HasSameIndexAndSerialNumber()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "HasSameIndexAndSerialNumber(const FWeakObjectPtr& Other)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (class UObject*)",
    "insertText": "Get()"
  },
  {
    "label": "GetEvenIfUnreachable()",
    "kind": "Method",
    "detail": "Function (class UObject*)",
    "insertText": "GetEvenIfUnreachable()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (class TStrongObjectPtr<UObject>)",
    "insertText": "Pin(bool bEvenIfGarbage)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (class TStrongObjectPtr<UObject>)",
    "insertText": "Pin()"
  },
  {
    "label": "PinEvenIfUnreachable()",
    "kind": "Method",
    "detail": "Function (class TStrongObjectPtr<UObject>)",
    "insertText": "PinEvenIfUnreachable()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(bool bEvenIfGarbage, bool bThreadsafeTest = false)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsStale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStale(bool bIncludingGarbage = true, bool bThreadsafeTest = false)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Core::Private ; # if UE_WEAKOBJECTPTR_ZEROINIT_FIX return ObjectIndex = = InvalidWeakObjectIndex&& ObjectSerialNumber = = 0 ; # else return ObjectIndex = = InvalidWeakObjectIndex ; # endif } uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetSerialNumber()",
    "kind": "Method",
    "detail": "Function (int32 ActualSerialNumber = GUObjectArray .)",
    "insertText": "GetSerialNumber(ObjectIndex)"
  },
  {
    "label": "GetSerialNumber()",
    "kind": "Method",
    "detail": "Function (const int32 ActualSerialNumber = ObjectItem ->)",
    "insertText": "GetSerialNumber()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Core::Private ;)",
    "insertText": "if(ObjectSerialNumber == 0)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (# if UE_WEAKOBJECTPTR_ZEROINIT_FIX)",
    "insertText": "checkSlow(ObjectIndex == InvalidWeakObjectIndex)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "checkSlow(ObjectIndex == 0 || ObjectIndex == -1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif return nullptr ; })",
    "insertText": "if(ObjectIndex < 0)"
  },
  {
    "label": "Internal_GetObjectItem()",
    "kind": "Method",
    "detail": "Function (FUObjectItem* const ObjectItem =)",
    "insertText": "Internal_GetObjectItem()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(ObjectItem != nullptr) && GUObjectArray.IsValid(ObjectItem, bEvenIfGarbage)"
  },
  {
    "label": "Internal_Get()",
    "kind": "Method",
    "detail": "Function (} } UObject*)",
    "insertText": "Internal_Get(bool bEvenIfGarbage)"
  },
  {
    "label": "Internal_Pin()",
    "kind": "Method",
    "detail": "Function (} TStrongObjectPtr<UObject>)",
    "insertText": "Internal_Pin(bool bEvenIfGarbage)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# if UE_WEAKOBJECTPTR_ZEROINIT_FIX int32 ObjectIndex = UE::Core::Private::InvalidWeakObjectIndex ; int32 ObjectSerialNumber = 0 ; # else int32 ObjectIndex ; int32 ObjectSerialNumber ; # endif } ; uint32)",
    "insertText": "GetTypeHash(const FWeakObjectPtr& WeakObjectPtr)"
  }
]