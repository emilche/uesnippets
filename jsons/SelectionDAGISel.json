[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FastISel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FastISel"
  },
  {
    "label": "SelectionDAGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelectionDAGBuilder"
  },
  {
    "label": "SDValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDValue"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "TargetLowering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLowering"
  },
  {
    "label": "TargetLibraryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfo"
  },
  {
    "label": "FunctionLoweringInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionLoweringInfo"
  },
  {
    "label": "ScheduleHazardRecognizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleHazardRecognizer"
  },
  {
    "label": "GCFunctionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GCFunctionInfo"
  },
  {
    "label": "ScheduleDAGSDNodes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGSDNodes"
  },
  {
    "label": "LoadInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoadInst"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "SelectionDAGISel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelectionDAGISel"
  },
  {
    "label": "BuiltinOpcodes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BuiltinOpcodes"
  },
  {
    "label": "SelectionDAGISel()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "SelectionDAGISel(TargetMachine &tm,\n                            CodeGenOpt::Level OL = CodeGenOpt::Default)"
  },
  {
    "label": "IsLegalToFold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLegalToFold(SDValue N, SDNode *U, SDNode *Root,\n                            CodeGenOpt::Level OptLevel,\n                            bool IgnoreChains = false)"
  },
  {
    "label": "SelectInlineAsmMemoryOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInlineAsmMemoryOperands(std::vector<SDValue> &Ops, SDLoc DL)"
  },
  {
    "label": "CannotYetSelect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CannotYetSelect(SDNode *N)"
  },
  {
    "label": "DoInstructionSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoInstructionSelection()"
  },
  {
    "label": "PrepareEHLandingPad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareEHLandingPad()"
  },
  {
    "label": "SelectAllBasicBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllBasicBlocks(const Function &Fn)"
  },
  {
    "label": "SelectBasicBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectBasicBlock(BasicBlock::const_iterator Begin,\n                        BasicBlock::const_iterator End,\n                        bool &HadTailCall)"
  },
  {
    "label": "FinishBasicBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishBasicBlock()"
  },
  {
    "label": "CodeGenAndEmitDAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CodeGenAndEmitDAG()"
  },
  {
    "label": "LowerArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowerArguments(const Function &F)"
  },
  {
    "label": "ComputeLiveOutVRegInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeLiveOutVRegInfo()"
  },
  {
    "label": "UpdateChainsAndGlue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateChainsAndGlue(SDNode *NodeToMatch, SDValue InputChain,\n                           const SmallVectorImpl<SDNode*> &ChainNodesMatched,\n                           SDValue InputGlue, const SmallVectorImpl<SDNode*> &F,\n                           bool isMorphNodeTo)"
  }
]