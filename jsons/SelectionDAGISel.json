[
  {
    "label": "FastISel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FastISel"
  },
  {
    "label": "SelectionDAGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelectionDAGBuilder"
  },
  {
    "label": "SDValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDValue"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "TargetLowering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLowering"
  },
  {
    "label": "TargetLibraryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfo"
  },
  {
    "label": "FunctionLoweringInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionLoweringInfo"
  },
  {
    "label": "ScheduleHazardRecognizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleHazardRecognizer"
  },
  {
    "label": "GCFunctionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GCFunctionInfo"
  },
  {
    "label": "ScheduleDAGSDNodes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGSDNodes"
  },
  {
    "label": "LoadInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoadInst"
  },
  {
    "label": "SelectionDAGISel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelectionDAGISel"
  },
  {
    "label": "BuiltinOpcodes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BuiltinOpcodes"
  },
  {
    "label": "SelectionDAGISel()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_SELECTIONDAGISEL_H # define LLVM_CODEGEN_SELECTIONDAGISEL_H # include \" llvm / CodeGen / MachineFunctionPass . h \" # include \" llvm / CodeGen / SelectionDAG . h \" # include \" llvm / IR / BasicBlock . h \" # include \" llvm / Pass . h \" # include \" llvm / Target / TargetSubtargetInfo . h \" namespace llvm { class FastISel ; class SelectionDAGBuilder ; class SDValue ; class MachineRegisterInfo ; class MachineBasicBlock ; class MachineFunction ; class MachineInstr ; class TargetLowering ; class TargetLibraryInfo ; class FunctionLoweringInfo ; class ScheduleHazardRecognizer ; class GCFunctionInfo ; class ScheduleDAGSDNodes ; class LoadInst ; class SelectionDAGISel : public MachineFunctionPass { public : TargetMachine& TM ; const TargetLibraryInfo* LibInfo ; FunctionLoweringInfo* FuncInfo ; MachineFunction* MF ; MachineRegisterInfo* RegInfo ; SelectionDAG* CurDAG ; SelectionDAGBuilder* SDB ; AliasAnalysis* AA ; GCFunctionInfo* GFI ; CodeGenOpt::Level OptLevel ; const TargetInstrInfo* TII ; const TargetLowering* TLI ; char ID ;)",
    "insertText": "SelectionDAGISel(TargetMachine &tm, CodeGenOpt::Level OL = CodeGenOpt::Default)"
  },
  {
    "label": "SelectionDAGISel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SelectionDAGISel()"
  },
  {
    "label": "getTargetLowering()",
    "kind": "Method",
    "detail": "Function (const TargetLowering*)",
    "insertText": "getTargetLowering()"
  },
  {
    "label": "runOnMachineFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnMachineFunction(MachineFunction &MF)"
  },
  {
    "label": "EmitFunctionEntryCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitFunctionEntryCode()"
  },
  {
    "label": "PreprocessISelDAG()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreprocessISelDAG()"
  },
  {
    "label": "PostprocessISelDAG()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostprocessISelDAG()"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (} SDNode*)",
    "insertText": "Select(SDNode *N)"
  },
  {
    "label": "SelectInlineAsmMemoryOperand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectInlineAsmMemoryOperand(const SDValue &Op, unsigned ConstraintID, std::vector<SDValue> &OutOps)"
  },
  {
    "label": "IsLegalToFold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLegalToFold(SDValue N, SDNode *U, SDNode *Root, CodeGenOpt::Level OptLevel, bool IgnoreChains = false)"
  },
  {
    "label": "getNumFixedFromVariadicInfo()",
    "kind": "Method",
    "detail": "Function (enum BuiltinOpcodes { OPC_Scope,OPC_RecordNode,OPC_RecordChild0,OPC_RecordChild1,OPC_RecordChild2,OPC_RecordChild3,OPC_RecordChild4,OPC_RecordChild5,OPC_RecordChild6,OPC_RecordChild7,OPC_RecordMemRef,OPC_CaptureGlueInput,OPC_MoveChild,OPC_MoveParent,OPC_CheckSame,OPC_CheckChild0Same,OPC_CheckChild1Same,OPC_CheckChild2Same,OPC_CheckChild3Same,OPC_CheckPatternPredicate,OPC_CheckPredicate,OPC_CheckOpcode,OPC_SwitchOpcode,OPC_CheckType,OPC_SwitchType,OPC_CheckChild0Type,OPC_CheckChild1Type,OPC_CheckChild2Type,OPC_CheckChild3Type,OPC_CheckChild4Type,OPC_CheckChild5Type,OPC_CheckChild6Type,OPC_CheckChild7Type,OPC_CheckInteger,OPC_CheckChild0Integer,OPC_CheckChild1Integer,OPC_CheckChild2Integer,OPC_CheckChild3Integer,OPC_CheckChild4Integer,OPC_CheckCondCode,OPC_CheckValueType,OPC_CheckComplexPat,OPC_CheckAndImm,OPC_CheckOrImm,OPC_CheckFoldableChainNode,OPC_EmitInteger,OPC_EmitRegister,OPC_EmitRegister2,OPC_EmitConvertToTarget,OPC_EmitMergeInputChains,OPC_EmitMergeInputChains1_0,OPC_EmitMergeInputChains1_1,OPC_EmitCopyToReg,OPC_EmitNodeXForm,OPC_EmitNode,OPC_MorphNodeTo,OPC_MarkGlueResults,OPC_CompleteMatch } ; enum { OPFL_None = 0,OPFL_Chain = 1,OPFL_GlueInput = 2,OPFL_GlueOutput = 4,OPFL_MemRefs = 8,OPFL_Variadic0 = 1<<4,OPFL_Variadic1 = 2<<4,OPFL_Variadic2 = 3<<4,OPFL_Variadic3 = 4<<4,OPFL_Variadic4 = 5<<4,OPFL_Variadic5 = 6<<4,OPFL_Variadic6 = 7<<4,OPFL_VariadicInfo = OPFL_Variadic6 } ; int)",
    "insertText": "getNumFixedFromVariadicInfo(unsigned Flags)"
  },
  {
    "label": "ReplaceUses()",
    "kind": "Method",
    "detail": "Function (} protected : unsigned DAGSize ; void)",
    "insertText": "ReplaceUses(SDValue F, SDValue T)"
  },
  {
    "label": "ReplaceAllUsesOfValueWith()",
    "kind": "Method",
    "detail": "Function (CurDAG ->)",
    "insertText": "ReplaceAllUsesOfValueWith(F, T)"
  },
  {
    "label": "ReplaceUses()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReplaceUses(const SDValue *F, const SDValue *T, unsigned Num)"
  },
  {
    "label": "ReplaceAllUsesOfValuesWith()",
    "kind": "Method",
    "detail": "Function (CurDAG ->)",
    "insertText": "ReplaceAllUsesOfValuesWith(F, T, Num)"
  },
  {
    "label": "ReplaceUses()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReplaceUses(SDNode *F, SDNode *T)"
  },
  {
    "label": "ReplaceAllUsesWith()",
    "kind": "Method",
    "detail": "Function (CurDAG ->)",
    "insertText": "ReplaceAllUsesWith(F, T)"
  },
  {
    "label": "SelectInlineAsmMemoryOperands()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectInlineAsmMemoryOperands(std::vector<SDValue> &Ops, SDLoc DL)"
  },
  {
    "label": "CheckAndMask()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "CheckAndMask(SDValue LHS, ConstantSDNode *RHS, int64_t DesiredMaskS)"
  },
  {
    "label": "CheckOrMask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckOrMask(SDValue LHS, ConstantSDNode *RHS, int64_t DesiredMaskS)"
  },
  {
    "label": "CheckPatternPredicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckPatternPredicate(unsigned PredNo)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "llvm_unreachable(\"Tblgen should generate the implementation of this!\")"
  },
  {
    "label": "CheckNodePredicate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckNodePredicate(SDNode *N, unsigned PredNo)"
  },
  {
    "label": "CheckComplexPattern()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckComplexPattern(SDNode *Root, SDNode *Parent, SDValue N, unsigned PatternNo, SmallVectorImpl<std::pair<SDValue, SDNode*> > &Result)"
  },
  {
    "label": "RunSDNodeXForm()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "RunSDNodeXForm(SDValue V, unsigned XFormNo)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "llvm_unreachable(\"Tblgen should generate this!\")"
  },
  {
    "label": "SelectCodeCommon()",
    "kind": "Method",
    "detail": "Function (} SDNode*)",
    "insertText": "SelectCodeCommon(SDNode *NodeToMatch, const unsigned char *MatcherTable, unsigned TableSize)"
  },
  {
    "label": "ComplexPatternFuncMutatesDAG()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComplexPatternFuncMutatesDAG()"
  },
  {
    "label": "Select_READ_REGISTER()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "Select_READ_REGISTER(SDNode *N)"
  },
  {
    "label": "Select_WRITE_REGISTER()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "Select_WRITE_REGISTER(SDNode *N)"
  },
  {
    "label": "Select_UNDEF()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "Select_UNDEF(SDNode *N)"
  },
  {
    "label": "CannotYetSelect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CannotYetSelect(SDNode *N)"
  },
  {
    "label": "DoInstructionSelection()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DoInstructionSelection()"
  },
  {
    "label": "MorphNode()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "MorphNode(SDNode *Node, unsigned TargetOpc, SDVTList VTs, ArrayRef<SDValue> Ops, unsigned EmitNodeInfo)"
  },
  {
    "label": "PrepareEHLandingPad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareEHLandingPad()"
  },
  {
    "label": "SelectAllBasicBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllBasicBlocks(const Function &Fn)"
  },
  {
    "label": "SelectBasicBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectBasicBlock(BasicBlock::const_iterator Begin, BasicBlock::const_iterator End, bool &HadTailCall)"
  },
  {
    "label": "FinishBasicBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishBasicBlock()"
  },
  {
    "label": "CodeGenAndEmitDAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CodeGenAndEmitDAG()"
  },
  {
    "label": "LowerArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowerArguments(const Function &F)"
  },
  {
    "label": "ComputeLiveOutVRegInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeLiveOutVRegInfo()"
  },
  {
    "label": "CreateScheduler()",
    "kind": "Method",
    "detail": "Function (ScheduleDAGSDNodes*)",
    "insertText": "CreateScheduler()"
  },
  {
    "label": "UpdateChainsAndGlue()",
    "kind": "Method",
    "detail": "Function (std::vector<unsigned> OpcodeOffset ; void)",
    "insertText": "UpdateChainsAndGlue(SDNode *NodeToMatch, SDValue InputChain, const SmallVectorImpl<SDNode*> &ChainNodesMatched, SDValue InputGlue, const SmallVectorImpl<SDNode*> &F, bool isMorphNodeTo)"
  }
]