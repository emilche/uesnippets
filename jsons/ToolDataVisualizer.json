[
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "IToolsContextRenderAPI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolsContextRenderAPI"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FToolDataVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FToolDataVisualizer"
  },
  {
    "label": "FToolDataVisualizer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ToolContextInterfaces . h \" class FPrimitiveDrawInterface ; class IToolsContextRenderAPI ; class FMaterialRenderProxy ; class FToolDataVisualizer { public : FLinearColor LineColor ; float LineThickness = 1 . 0 f ; FLinearColor PointColor ; float PointSize = 1 . 0 f ; float DepthBias = 0 . 0 f ; bool bDepthTested = true ; public :)",
    "insertText": "FToolDataVisualizer()"
  },
  {
    "label": "FToolDataVisualizer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FToolDataVisualizer(const FToolDataVisualizer&)"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame(IToolsContextRenderAPI* RenderAPI, const FViewCameraState& CameraState)"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame(IToolsContextRenderAPI* RenderAPI)"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransform(const FTransform& Transform)"
  },
  {
    "label": "PushTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTransform(const FTransform& Transform)"
  },
  {
    "label": "PopTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopTransform()"
  },
  {
    "label": "PopAllTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopAllTransforms()"
  },
  {
    "label": "TransformP()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "TransformP(const FVector& Point)"
  },
  {
    "label": "TransformV()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "TransformV(const FVector& Vector)"
  },
  {
    "label": "TransformN()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "TransformN(const FVector& Normal)"
  },
  {
    "label": "GetScale3D()",
    "kind": "Method",
    "detail": "Function (const FVector& S = TotalTransform .)",
    "insertText": "GetScale3D()"
  },
  {
    "label": "SafeInvS()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "SafeInvS(S.Y*S.Z*DetSign, S.X*S.Z*DetSign, S.X*S.Y*DetSign)"
  },
  {
    "label": "SetLineParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLineParameters(const FLinearColor& Color, float Thickness)"
  },
  {
    "label": "SetPointParameters()",
    "kind": "Method",
    "detail": "Function (LineColor = Color ; LineThickness = Thickness ; } void)",
    "insertText": "SetPointParameters(const FLinearColor& Color, float Size)"
  },
  {
    "label": "DrawLine()",
    "kind": "Method",
    "detail": "Function (PointColor = Color ; PointSize = Size ; } template<PointType> void)",
    "insertText": "DrawLine(const PointType& A, const PointType& B)"
  },
  {
    "label": "InternalDrawTransformedLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawTransformedLine(TransformP((FVector)A), TransformP((FVector)B), LineColor, LineThickness, bDepthTested)"
  },
  {
    "label": "DrawLine()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawLine(const PointType& A, const PointType& B, const FLinearColor& Color)"
  },
  {
    "label": "InternalDrawTransformedLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawTransformedLine(TransformP((FVector)A), TransformP((FVector)B), Color, LineThickness, bDepthTested)"
  },
  {
    "label": "DrawLine()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawLine(const PointType& A, const PointType& B, const FLinearColor& Color, float LineThicknessIn)"
  },
  {
    "label": "InternalDrawTransformedLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawTransformedLine(TransformP((FVector)A), TransformP((FVector)B), Color, LineThicknessIn, bDepthTested)"
  },
  {
    "label": "DrawLine()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawLine(const PointType& A, const PointType& B, const FLinearColor& Color, float LineThicknessIn, bool bDepthTestedIn)"
  },
  {
    "label": "InternalDrawTransformedLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawTransformedLine(TransformP((FVector)A), TransformP((FVector)B), Color, LineThicknessIn, bDepthTestedIn)"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawPoint(const PointType& Position)"
  },
  {
    "label": "InternalDrawTransformedPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawTransformedPoint(TransformP((FVector)Position), PointColor, PointSize, bDepthTested)"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawPoint(const PointType& Position, const FLinearColor& Color)"
  },
  {
    "label": "InternalDrawTransformedPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawTransformedPoint(TransformP((FVector)Position), Color, PointSize, bDepthTested)"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawPoint(const PointType& Position, const FLinearColor& Color, float PointSizeIn, bool bDepthTestedIn)"
  },
  {
    "label": "InternalDrawTransformedPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawTransformedPoint(TransformP((FVector)Position), Color, PointSizeIn, bDepthTestedIn)"
  },
  {
    "label": "DrawCircle()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawCircle(const PointType& Position, const PointType& Normal, float Radius, int Steps, const FLinearColor& Color, float LineThicknessIn, bool bDepthTestedIn)"
  },
  {
    "label": "InternalDrawCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawCircle((FVector)Position, (FVector)Normal, Radius, Steps, Color, LineThicknessIn, bDepthTestedIn)"
  },
  {
    "label": "DrawViewFacingCircle()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawViewFacingCircle(const PointType& Position, float Radius, int Steps, const FLinearColor& Color, float LineThicknessIn, bool bDepthTestedIn)"
  },
  {
    "label": "InternalDrawViewFacingCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawViewFacingCircle((FVector)Position, Radius, Steps, Color, LineThicknessIn, bDepthTestedIn)"
  },
  {
    "label": "DrawViewFacingX()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawViewFacingX(const PointType& Position, float Width)"
  },
  {
    "label": "InternalDrawViewFacingX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawViewFacingX((FVector)Position, Width, LineColor, LineThickness, bDepthTested)"
  },
  {
    "label": "DrawViewFacingX()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawViewFacingX(const PointType& Position, float Width, const FLinearColor& Color, float LineThicknessIn, bool bDepthTestedIn)"
  },
  {
    "label": "InternalDrawViewFacingX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawViewFacingX((FVector)Position, Width, Color, LineThicknessIn, bDepthTestedIn)"
  },
  {
    "label": "DrawWireCylinder()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawWireCylinder(const PointType& Position, const PointType& Normal, float Radius, float Height, int Steps, const FLinearColor& Color, float LineThicknessIn, bool bDepthTestedIn)"
  },
  {
    "label": "InternalDrawWireCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawWireCylinder((FVector)Position, (FVector)Normal, Radius, Height, Steps, Color, LineThicknessIn, bDepthTestedIn)"
  },
  {
    "label": "DrawWireCylinder()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawWireCylinder(const PointType& Position, const PointType& Normal, float Radius, float Height, int Steps)"
  },
  {
    "label": "InternalDrawWireCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawWireCylinder((FVector)Position, (FVector)Normal, Radius, Height, Steps, LineColor, LineThickness, bDepthTested)"
  },
  {
    "label": "DrawWireBox()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawWireBox(const FBox& Box)"
  },
  {
    "label": "InternalDrawWireBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawWireBox(Box, LineColor, LineThickness, bDepthTested)"
  },
  {
    "label": "DrawWireBox()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawWireBox(const FBox& Box, const FLinearColor& Color, float LineThicknessIn, bool bDepthTestedIn)"
  },
  {
    "label": "InternalDrawWireBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawWireBox(Box, Color, LineThicknessIn, bDepthTestedIn)"
  },
  {
    "label": "DrawSquare()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawSquare(const PointType& Center, const PointType& SideA, const PointType& SideB, const FLinearColor& Color, float LineThicknessIn, bool bDepthTestedIn)"
  },
  {
    "label": "InternalDrawSquare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawSquare(Center, SideA, SideB, Color, LineThicknessIn, bDepthTestedIn)"
  },
  {
    "label": "DrawSquare()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawSquare(const PointType& Center, const PointType& SideA, const PointType& SideB)"
  },
  {
    "label": "InternalDrawSquare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawSquare(Center, SideA, SideB, LineColor, LineThickness, bDepthTested)"
  },
  {
    "label": "DrawDisc()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "DrawDisc(const PointType& Position, const PointType& Normal, float Radius, int Steps, const FColor& Color, FMaterialRenderProxy* RenderProxy, bool bDepthTestedIn)"
  },
  {
    "label": "InternalDrawDisc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawDisc(Position, Normal, Radius, Steps, Color, RenderProxy, bDepthTestedIn)"
  },
  {
    "label": "InternalDrawTransformedLine()",
    "kind": "Method",
    "detail": "Function (} protected : FPrimitiveDrawInterface* CurrentPDI = nullptr ; FViewCameraState CameraState ; bool bHaveCameraState ; float PDISizeScale = 1 . 0 ; TArray<FTransform> TransformStack ; FTransform TotalTransform ; void)",
    "insertText": "InternalDrawTransformedLine(const FVector& A, const FVector& B, const FLinearColor& Color, float LineThickness, bool bDepthTested)"
  },
  {
    "label": "InternalDrawTransformedPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawTransformedPoint(const FVector& Position, const FLinearColor& Color, float PointSize, bool bDepthTested)"
  },
  {
    "label": "InternalDrawCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawCircle(const FVector& Position, const FVector& Normal, float Radius, int Steps, const FLinearColor& Color, float LineThickness, bool bDepthTested)"
  },
  {
    "label": "InternalDrawViewFacingCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawViewFacingCircle(const FVector& Position, float Radius, int Steps, const FLinearColor& Color, float LineThickness, bool bDepthTested)"
  },
  {
    "label": "InternalDrawWireCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawWireCylinder(const FVector& Position, const FVector& Normal, float Radius, float Height, int Steps, const FLinearColor& Color, float LineThickness, bool bDepthTested)"
  },
  {
    "label": "InternalDrawWireBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawWireBox(const FBox& Box, const FLinearColor& Color, float LineThickness, bool bDepthTested)"
  },
  {
    "label": "InternalDrawSquare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawSquare(const FVector& Center, const FVector& SideA, const FVector& SideB, const FLinearColor& Color, float LineThickness, bool bDepthTested)"
  },
  {
    "label": "InternalDrawViewFacingX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawViewFacingX(const FVector& Position, float Width, const FLinearColor& Color, float LineThickness, bool bDepthTested)"
  },
  {
    "label": "InternalDrawDisc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDrawDisc(const FVector& Position, const FVector& Normal, float Radius, int Steps, const FColor& Color, FMaterialRenderProxy* RenderProxy, bool bDepthTested)"
  }
]