[
  {
    "label": "FVulkanLinuxPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanLinuxPlatform"
  },
  {
    "label": "VULKAN_SHOULD_ENABLE_DRAW_MARKERS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHI . h \" # define VULKAN_DYNAMICALLYLOADED 1 # define VULKAN_ENABLE_DUMP_LAYER 0 # define VULKAN_SHOULD_DEBUG_IN_DEVELOPMENT 1 # define)",
    "insertText": "VULKAN_SHOULD_ENABLE_DRAW_MARKERS(UE_BUILD_DEBUG || UE_BUILD_DEVELOPMENT) #define VULKAN_SIGNAL_UNIMPLEMENTED() checkf(false, TEXT(\"Unimplemented vulkan functionality: %hs\"), __PRETTY_FUNCTION__) #define VULKAN_SUPPORTS_AMD_BUFFER_MARKER 1 #define VULKAN_SUPPORTS_SCALAR_BLOCK_LAYOUT 1 #define VULKAN_SUPPORTS_RAY_TRACING_POSITION_FETCH 1 #define UE_VK_API_VERSION VK_API_VERSION_1_1 #if UE_BUILD_DEBUG || UE_BUILD_DEVELOPMENT # include \"vk_enum_string_helper.h\" # define VK_TYPE_TO_STRING(Type, Value) ANSI_TO_TCHAR(string_##Type(Value)) # define VK_FLAGS_TO_STRING(Type, Value) ANSI_TO_TCHAR(string_##Type(Value).c_str()) #endif #define ENUM_VK_ENTRYPOINTS_PLATFORM_BASE(EnumMacro) #define ENUM_VK_ENTRYPOINTS_PLATFORM_INSTANCE(EnumMacro) #define ENUM_VK_ENTRYPOINTS_OPTIONAL_PLATFORM_INSTANCE(EnumMacro)"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "LoadVulkanLibrary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadVulkanLibrary()"
  },
  {
    "label": "LoadVulkanInstanceFunctions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadVulkanInstanceFunctions(VkInstance inInstance)"
  },
  {
    "label": "FreeVulkanLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVulkanLibrary()"
  },
  {
    "label": "GetInstanceExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceExtensions(FVulkanInstanceExtensionArray& OutExtensions)"
  },
  {
    "label": "GetInstanceLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceLayers(TArray<const ANSICHAR*>& OutLayers)"
  },
  {
    "label": "GetDeviceExtensions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDeviceExtensions(FVulkanDevice* Device, FVulkanDeviceExtensionArray& OutExtensions)"
  },
  {
    "label": "GetDeviceLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDeviceLayers(TArray<const ANSICHAR*>& OutLayers)"
  },
  {
    "label": "CreateSurface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateSurface(void* WindowHandle, VkInstance Instance, VkSurfaceKHR* OutSurface)"
  },
  {
    "label": "WriteCrashMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCrashMarker(const FOptionalVulkanDeviceExtensions& OptionalExtensions, FVulkanCmdBuffer* CmdBuffer, VkBuffer DestBuffer, const TArrayView<uint32>& Entries, bool bAdding)"
  }
]