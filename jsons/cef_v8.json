[
  {
    "label": "CefV8Exception",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefV8Exception"
  },
  {
    "label": "CefV8Handler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefV8Handler"
  },
  {
    "label": "CefV8StackFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefV8StackFrame"
  },
  {
    "label": "CefV8Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefV8Value"
  },
  {
    "label": "CefV8Context",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefV8Context"
  },
  {
    "label": "CefV8Accessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefV8Accessor"
  },
  {
    "label": "CefV8Interceptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefV8Interceptor"
  },
  {
    "label": "CefV8ArrayBufferReleaseCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefV8ArrayBufferReleaseCallback"
  },
  {
    "label": "CefV8StackTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefV8StackTrace"
  },
  {
    "label": "CefRegisterExtension()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CEF_V8_H_ # define CEF_INCLUDE_CEF_V8_H_ # pragma once # include<vector> # include \" include / cef_base . h \" # include \" include / cef_browser . h \" # include \" include / cef_frame . h \" # include \" include / cef_task . h \" class CefV8Exception ; class CefV8Handler ; class CefV8StackFrame ; class CefV8Value ; bool)",
    "insertText": "CefRegisterExtension(const CefString& extension_name, const CefString& javascript_code, CefRefPtr<CefV8Handler> handler)"
  },
  {
    "label": "GetCurrentContext()",
    "kind": "Method",
    "detail": "Function (class CefV8Context : public CefBaseRefCounted { public : CefRefPtr<CefV8Context>)",
    "insertText": "GetCurrentContext()"
  },
  {
    "label": "GetEnteredContext()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Context>)",
    "insertText": "GetEnteredContext()"
  },
  {
    "label": "InContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InContext()"
  },
  {
    "label": "GetTaskRunner()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefTaskRunner>)",
    "insertText": "GetTaskRunner()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetBrowser()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefBrowser>)",
    "insertText": "GetBrowser()"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefFrame>)",
    "insertText": "GetFrame()"
  },
  {
    "label": "GetGlobal()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "GetGlobal()"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Enter()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exit()"
  },
  {
    "label": "IsSame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSame(CefRefPtr<CefV8Context> that)"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Eval(const CefString& code, const CefString& script_url, int start_line, CefRefPtr<CefV8Value>& retval, CefRefPtr<CefV8Exception>& exception)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} ; typedef std::vector<CefRefPtr<CefV8Value>> CefV8ValueList ; class CefV8Handler : public CefBaseRefCounted { public : bool)",
    "insertText": "Execute(const CefString& name, CefRefPtr<CefV8Value> object, const CefV8ValueList& arguments, CefRefPtr<CefV8Value>& retval, CefString& exception)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; class CefV8Accessor : public CefBaseRefCounted { public : bool)",
    "insertText": "Get(const CefString& name, const CefRefPtr<CefV8Value> object, CefRefPtr<CefV8Value>& retval, CefString& exception)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Set(const CefString& name, const CefRefPtr<CefV8Value> object, const CefRefPtr<CefV8Value> value, CefString& exception)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Get(int index, const CefRefPtr<CefV8Value> object, CefRefPtr<CefV8Value>& retval, CefString& exception)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Set(int index, const CefRefPtr<CefV8Value> object, const CefRefPtr<CefV8Value> value, CefString& exception)"
  },
  {
    "label": "GetMessage()",
    "kind": "Method",
    "detail": "Function (} ; class CefV8Exception : public CefBaseRefCounted { public : CefString)",
    "insertText": "GetMessage()"
  },
  {
    "label": "GetSourceLine()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetSourceLine()"
  },
  {
    "label": "GetScriptResourceName()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetScriptResourceName()"
  },
  {
    "label": "GetLineNumber()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLineNumber()"
  },
  {
    "label": "GetStartPosition()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetStartPosition()"
  },
  {
    "label": "GetEndPosition()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetEndPosition()"
  },
  {
    "label": "GetStartColumn()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetStartColumn()"
  },
  {
    "label": "GetEndColumn()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetEndColumn()"
  },
  {
    "label": "ReleaseBuffer()",
    "kind": "Method",
    "detail": "Function (} ; class CefV8ArrayBufferReleaseCallback : public CefBaseRefCounted { public : void)",
    "insertText": "ReleaseBuffer(void* buffer)"
  },
  {
    "label": "CreateUndefined()",
    "kind": "Method",
    "detail": "Function (} ; class CefV8Value : public CefBaseRefCounted { public : typedef cef_v8_accesscontrol_t AccessControl ; typedef cef_v8_propertyattribute_t PropertyAttribute ; CefRefPtr<CefV8Value>)",
    "insertText": "CreateUndefined()"
  },
  {
    "label": "CreateNull()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "CreateNull()"
  },
  {
    "label": "CreateBool()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "CreateBool(bool value)"
  },
  {
    "label": "CreateInt()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "CreateInt(int32 value)"
  },
  {
    "label": "CreateUInt()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "CreateUInt(uint32 value)"
  },
  {
    "label": "CreateDouble()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "CreateDouble(double value)"
  },
  {
    "label": "CreateDate()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "CreateDate(const CefTime& date)"
  },
  {
    "label": "CreateString()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "CreateString(const CefString& value)"
  },
  {
    "label": "CreateObject()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "CreateObject(CefRefPtr<CefV8Accessor> accessor, CefRefPtr<CefV8Interceptor> interceptor)"
  },
  {
    "label": "CreateArray()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "CreateArray(int length)"
  },
  {
    "label": "CreateArrayBuffer()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "CreateArrayBuffer(void* buffer, size_t length, CefRefPtr<CefV8ArrayBufferReleaseCallback> release_callback)"
  },
  {
    "label": "CreateFunction()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "CreateFunction(const CefString& name, CefRefPtr<CefV8Handler> handler)"
  },
  {
    "label": "IsUndefined()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUndefined()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "IsBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBool()"
  },
  {
    "label": "IsInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInt()"
  },
  {
    "label": "IsUInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUInt()"
  },
  {
    "label": "IsDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDouble()"
  },
  {
    "label": "IsDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDate()"
  },
  {
    "label": "IsString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsString()"
  },
  {
    "label": "IsObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObject()"
  },
  {
    "label": "IsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsArray()"
  },
  {
    "label": "IsArrayBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsArrayBuffer()"
  },
  {
    "label": "IsFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFunction()"
  },
  {
    "label": "IsSame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSame(CefRefPtr<CefV8Value> that)"
  },
  {
    "label": "GetBoolValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBoolValue()"
  },
  {
    "label": "GetIntValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIntValue()"
  },
  {
    "label": "GetUIntValue()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetUIntValue()"
  },
  {
    "label": "GetDoubleValue()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetDoubleValue()"
  },
  {
    "label": "GetDateValue()",
    "kind": "Method",
    "detail": "Function (CefTime)",
    "insertText": "GetDateValue()"
  },
  {
    "label": "GetStringValue()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetStringValue()"
  },
  {
    "label": "IsUserCreated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUserCreated()"
  },
  {
    "label": "HasException()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasException()"
  },
  {
    "label": "GetException()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Exception>)",
    "insertText": "GetException()"
  },
  {
    "label": "ClearException()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClearException()"
  },
  {
    "label": "WillRethrowExceptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillRethrowExceptions()"
  },
  {
    "label": "SetRethrowExceptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRethrowExceptions(bool rethrow)"
  },
  {
    "label": "HasValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValue(const CefString& key)"
  },
  {
    "label": "HasValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValue(int index)"
  },
  {
    "label": "DeleteValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteValue(const CefString& key)"
  },
  {
    "label": "DeleteValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteValue(int index)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "GetValue(const CefString& key)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "GetValue(int index)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetValue(const CefString& key, CefRefPtr<CefV8Value> value, PropertyAttribute attribute)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetValue(int index, CefRefPtr<CefV8Value> value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetValue(const CefString& key, AccessControl settings, PropertyAttribute attribute)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetKeys(std::vector<CefString>& keys)"
  },
  {
    "label": "SetUserData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetUserData(CefRefPtr<CefBaseRefCounted> user_data)"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefBaseRefCounted>)",
    "insertText": "GetUserData()"
  },
  {
    "label": "GetExternallyAllocatedMemory()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetExternallyAllocatedMemory()"
  },
  {
    "label": "AdjustExternallyAllocatedMemory()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AdjustExternallyAllocatedMemory(int change_in_bytes)"
  },
  {
    "label": "GetArrayLength()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetArrayLength()"
  },
  {
    "label": "GetArrayBufferReleaseCallback()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8ArrayBufferReleaseCallback>)",
    "insertText": "GetArrayBufferReleaseCallback()"
  },
  {
    "label": "NeuterArrayBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeuterArrayBuffer()"
  },
  {
    "label": "GetFunctionName()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetFunctionName()"
  },
  {
    "label": "GetFunctionHandler()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Handler>)",
    "insertText": "GetFunctionHandler()"
  },
  {
    "label": "ExecuteFunction()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "ExecuteFunction(CefRefPtr<CefV8Value> object, const CefV8ValueList& arguments)"
  },
  {
    "label": "ExecuteFunctionWithContext()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8Value>)",
    "insertText": "ExecuteFunctionWithContext(CefRefPtr<CefV8Context> context, CefRefPtr<CefV8Value> object, const CefV8ValueList& arguments)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (} ; class CefV8StackTrace : public CefBaseRefCounted { public : CefRefPtr<CefV8StackTrace>)",
    "insertText": "GetCurrent(int frame_limit)"
  },
  {
    "label": "GetFrameCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFrameCount()"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefV8StackFrame>)",
    "insertText": "GetFrame(int index)"
  },
  {
    "label": "GetScriptName()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetScriptName()"
  },
  {
    "label": "GetScriptNameOrSourceURL()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetScriptNameOrSourceURL()"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetColumn()"
  },
  {
    "label": "IsEval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEval()"
  },
  {
    "label": "IsConstructor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstructor()"
  }
]