[
  {
    "label": "CefBaseRefCounted",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefBaseRefCounted"
  },
  {
    "label": "CefBaseScoped",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefBaseScoped"
  },
  {
    "label": "CefRefCount",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefRefCount"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CEF_BASE_H_ # define CEF_INCLUDE_CEF_BASE_H_ # pragma once # include \" include / base / cef_atomic_ref_count . h \" # include \" include / base / cef_build . h \" # include \" include / base / cef_macros . h \" # include \" include / internal / cef_ptr . h \" # include \" include / internal / cef_types_wrappers . h \" # if)",
    "insertText": "defined(OS_WIN) #include \"include/internal/cef_win.h\" #elif defined(OS_MAC) #include \"include/internal/cef_mac.h\" #elif defined(OS_LINUX)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Release()"
  },
  {
    "label": "HasOneRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOneRef()"
  },
  {
    "label": "HasAtLeastOneRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAtLeastOneRef()"
  },
  {
    "label": "CefBaseRefCounted()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "CefBaseRefCounted()"
  },
  {
    "label": "CefBaseScoped()",
    "kind": "Method",
    "detail": "Function (} } ; class CefBaseScoped { public : ~)",
    "insertText": "CefBaseScoped()"
  },
  {
    "label": "CefRefCount()",
    "kind": "Method",
    "detail": "Function (} } ; class CefRefCount { public :)",
    "insertText": "CefRefCount()"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (ref_count_ .)",
    "insertText": "Increment()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (} private : base::AtomicRefCount ref_count_ { 0 } ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(CefRefCount)"
  },
  {
    "label": "IMPLEMENT_REFCOUNTING()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "IMPLEMENT_REFCOUNTING(ClassName) \\ public: \\ void AddRef()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(ref_count_.Release())"
  },
  {
    "label": "ClassName()",
    "kind": "Method",
    "detail": "Function (\\ delete static_cast<const)",
    "insertText": "ClassName(this)"
  }
]