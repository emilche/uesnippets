[
  {
    "label": "FGaussSeidelCorotatedCodimensionalConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGaussSeidelCorotatedCodimensionalConstraints"
  },
  {
    "label": "FGaussSeidelCorotatedCodimensionalConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / Deformable / ChaosDeformableSolverTypes . h \" # include \" Chaos / Vector . h \" namespace Chaos::Softs { template<T,ParticleType> class FGaussSeidelCorotatedCodimensionalConstraints { public :)",
    "insertText": "FGaussSeidelCorotatedCodimensionalConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 3>>& InMesh, const bool bRecordMetricIn = true, const T& EMesh = (T)10.0, const T& NuMesh = (T).3 ) : bRecordMetric(bRecordMetricIn), MeshConstraints(InMesh)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Measure .)",
    "insertText": "Init((T)0., MeshConstraints.Num())"
  },
  {
    "label": "NuMesh()",
    "kind": "Method",
    "detail": "Function (Lambda = EMesh*)",
    "insertText": "NuMesh(((T)1. + NuMesh) * ((T)1. - (T)2. * NuMesh))"
  },
  {
    "label": "EMesh()",
    "kind": "Method",
    "detail": "Function (Mu =)",
    "insertText": "EMesh((T)2. * ((T)1. + NuMesh))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (MuElementArray .)",
    "insertText": "Init(Mu, MeshConstraints.Num())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (LambdaElementArray .)",
    "insertText": "Init(Lambda, MeshConstraints.Num())"
  },
  {
    "label": "InitializeCodimensionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCodimensionData(InParticles)"
  },
  {
    "label": "FGaussSeidelCorotatedCodimensionalConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGaussSeidelCorotatedCodimensionalConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 3>>& InMesh, const TArray<T>& EMeshArray, const T& NuMesh = (T).3 ) : MeshConstraints(InMesh)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (MuElementArray [ e ] = EMeshArray [)",
    "insertText": "e((T)2. * ((T)1. + NuMesh))"
  },
  {
    "label": "FGaussSeidelCorotatedCodimensionalConstraints()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FGaussSeidelCorotatedCodimensionalConstraints()"
  },
  {
    "label": "DsInit()",
    "kind": "Method",
    "detail": "Function (} PMatrix<T,3,3>)",
    "insertText": "DsInit(const int32 E, const ParticleType& InParticles)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "Result((T)0.)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetAt(c, i, InParticles.X(MeshConstraints[E][i + 1])[c] - InParticles.X(MeshConstraints[E][0])[c])"
  },
  {
    "label": "Ds()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } PMatrix<T,3,2>)",
    "insertText": "Ds(const int32 E, const ParticleType& InParticles)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const TVec3<T> P1P0 = InParticles .)",
    "insertText": "P(MeshConstraints[E][1]) - InParticles.P(MeshConstraints[E][0])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const TVec3<T> P2P0 = InParticles .)",
    "insertText": "P(MeshConstraints[E][2]) - InParticles.P(MeshConstraints[E][0])"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} else { return PMatrix<)",
    "insertText": "T((T)0., (T)0, (T)0, (T)0, (T)0, (T)0)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (} } PMatrix<T,3,2>)",
    "insertText": "F(const int32 E, const ParticleType& InParticles)"
  },
  {
    "label": "GetConstraintsArray()",
    "kind": "Method",
    "detail": "Function (} } TArray<TArray<int32>>)",
    "insertText": "GetConstraintsArray()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>> Constraints ; Constraints .)",
    "insertText": "SetNum(MeshConstraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Constraints [ i ] .)",
    "insertText": "SetNum(3)"
  },
  {
    "label": "ComputeNodalMass()",
    "kind": "Method",
    "detail": "Function (Constraints [ i ] [ j ] = MeshConstraints [ i ] [ j ] ; } } return Constraints ; } void)",
    "insertText": "ComputeNodalMass(const T InDensity, const int32 NumParticles, TArray<T>& NodalMass)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (NodalMass .)",
    "insertText": "Init((T)0., NumParticles)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const T TotalMass = InDensity* Measure [ e ] ;)",
    "insertText": "for(int32 j = 0; j < 3; j++)"
  },
  {
    "label": "TotalMass()",
    "kind": "Method",
    "detail": "Function (NodalMass [ MeshConstraints [ e ] [ j ] ] + =)",
    "insertText": "TotalMass(T)"
  },
  {
    "label": "InitializeCodimensionData()",
    "kind": "Method",
    "detail": "Function (} } } protected : void)",
    "insertText": "InitializeCodimensionData(const ParticleType& Particles)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (DmInverse .)",
    "insertText": "Init(PMatrix<FSolverReal, 2, 2>(0.f, 0.f, 0.f), MeshConstraints.Num())"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const TVec3<T> X1X0 = Particles .)",
    "insertText": "GetX(MeshConstraints[e][1]) - Particles.GetX(MeshConstraints[e][0])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const TVec3<T> X2X0 = Particles .)",
    "insertText": "GetX(MeshConstraints[e][2]) - Particles.GetX(MeshConstraints[e][0])"
  },
  {
    "label": "Dm()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,2,2>)",
    "insertText": "Dm((T)0., (T)0., (T)0.)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (Dm . M [ 0 ] = X1X0 .)",
    "insertText": "Size()"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Dm . M [ 2 ] = X1X0 .)",
    "insertText": "Dot(X2X0)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (Dm . M [ 3 ] = Chaos::TVector<T,3)",
    "insertText": "CrossProduct(X1X0, X2X0).Size()"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (Measure [ e ] = Chaos::TVector<T,3)",
    "insertText": "CrossProduct(X1X0, X2X0).Size() / (T)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,2,2> DmInv = Dm .)",
    "insertText": "Inverse()"
  },
  {
    "label": "SafeRecip()",
    "kind": "Method",
    "detail": "Function (DmInverse [ e ] = DmInv ; } } } T)",
    "insertText": "SafeRecip(const T Len, const T Fallback)"
  },
  {
    "label": "SymSchur2D()",
    "kind": "Method",
    "detail": "Function (} return Fallback ; } void)",
    "insertText": "SymSchur2D(const T Aqq, const T App, const T Apq, T& c, T& s)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T Tau =)",
    "insertText": "T(0.5) * (Aqq - App)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T t ;)",
    "insertText": "if(Tau >= 0) t = T(1) / (Tau + FMath::Sqrt((T)1. + Tau * Tau))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (c =)",
    "insertText": "T(1) / FMath::Sqrt((T)1. + t * t)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (s = t* c ; } else {)",
    "insertText": "c(T)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s(T)"
  },
  {
    "label": "Jacobi()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Jacobi(const PMatrix<T, 2, 2>& B, PMatrix<T, 2, 2>& D, PMatrix<T, 2, 2>& V)"
  },
  {
    "label": "SymSchur2D()",
    "kind": "Method",
    "detail": "Function (T c,s ;)",
    "insertText": "SymSchur2D(B.M[3], B.M[0], B.M[1], c, s)"
  },
  {
    "label": "GetTransposed()",
    "kind": "Method",
    "detail": "Function (V . M [ 0 ] = c ; V . M [ 1 ] = - s ; V . M [ 2 ] = s ; V . M [ 3 ] = c ; D = V .)",
    "insertText": "GetTransposed()"
  },
  {
    "label": "ComputeR()",
    "kind": "Method",
    "detail": "Function (} PMatrix<T,3,2>)",
    "insertText": "ComputeR(const PMatrix<T, 3, 2>& Fe)"
  },
  {
    "label": "ComputeFTF()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,2,2> FTF =)",
    "insertText": "ComputeFTF(Fe), D((T)0., (T)0., (T)0.), U((T)0., (T)0., (T)0.)"
  },
  {
    "label": "Jacobi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Jacobi(FTF, D, U)"
  },
  {
    "label": "SDiag()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,2,2>)",
    "insertText": "SDiag(FMath::Sqrt(D.M[0]), (T)0., (T)0., FMath::Sqrt(D.M[3]))"
  },
  {
    "label": "GetTransposed()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,2,2> S = U* SDiag* U .)",
    "insertText": "GetTransposed(), SInv = S.Inverse()"
  },
  {
    "label": "ComputeRSimple()",
    "kind": "Method",
    "detail": "Function (} PMatrix<T,3,2>)",
    "insertText": "ComputeRSimple(const PMatrix<T, 3, 2>& InputMatrix)"
  },
  {
    "label": "Col1()",
    "kind": "Method",
    "detail": "Function (TVec3<T>)",
    "insertText": "Col1(InputMatrix.M[0], InputMatrix.M[1], InputMatrix.M[2]), Col2(InputMatrix.M[3], InputMatrix.M[4], InputMatrix.M[5]), a(T(0)), b(T(0))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (a [ 0 ] =)",
    "insertText": "T(1)"
  },
  {
    "label": "SafeRecip()",
    "kind": "Method",
    "detail": "Function (} else { a [ 0 ] = - Col1 [ 1 ] ; a [ 1 ] = Col1 [ 0 ] ; const T OneOveraNorm =)",
    "insertText": "SafeRecip(a.Length(), 0.f)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (a* = OneOveraNorm ; } b = TVec3<T)",
    "insertText": "CrossProduct(a, Col2)"
  },
  {
    "label": "SafeRecip()",
    "kind": "Method",
    "detail": "Function (const T OneOverbNorm =)",
    "insertText": "SafeRecip(b.Length(), 0.f)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (b* = OneOverbNorm ; return Chaos::PMatrix<)",
    "insertText": "T(b[0], b[1], b[2], a[0], a[1], a[2])"
  },
  {
    "label": "GramSchmidt()",
    "kind": "Method",
    "detail": "Function (} Chaos::PMatrix<T,3,2>)",
    "insertText": "GramSchmidt(const Chaos::PMatrix<T, 3, 2>& InputMatrix)"
  },
  {
    "label": "Col1()",
    "kind": "Method",
    "detail": "Function (TVec3<T>)",
    "insertText": "Col1(InputMatrix.M[0], InputMatrix.M[1], InputMatrix.M[2]), Col2(InputMatrix.M[3], InputMatrix.M[4], InputMatrix.M[5])"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (const T Col1Norm = Col1 .)",
    "insertText": "Length()"
  },
  {
    "label": "SafeRecip()",
    "kind": "Method",
    "detail": "Function (const T OneOverCol1Norm =)",
    "insertText": "SafeRecip(Col1Norm, 0.f)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (TVec3<T> Col1Normalized = Col1* OneOverCol1Norm ; TVec3<T> Col2Orthogonal = Col2 - TVec3<T)",
    "insertText": "DotProduct(Col1Normalized, Col2)"
  },
  {
    "label": "SafeRecip()",
    "kind": "Method",
    "detail": "Function (const T OneOverCol2OrthogonalNorm =)",
    "insertText": "SafeRecip(Col2OrthogonalNorm, 0.f)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Col2Orthogonal* = OneOverCol2OrthogonalNorm ; return Chaos::PMatrix<)",
    "insertText": "T(Col1Normalized[0], Col1Normalized[1], Col1Normalized[2], Col2Orthogonal[0], Col2Orthogonal[1], Col2Orthogonal[2])"
  },
  {
    "label": "ComputeFTF()",
    "kind": "Method",
    "detail": "Function (} PMatrix<T,2,2>)",
    "insertText": "ComputeFTF(const PMatrix<T, 3, 2>& InputMatrix)"
  },
  {
    "label": "dJdF32()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dJdF32(const PMatrix<T, 3, 2>& F, PMatrix<T, 3, 2>& dJ)"
  },
  {
    "label": "ComputeFTF()",
    "kind": "Method",
    "detail": "Function (const PMatrix<T,2,2> FTF =)",
    "insertText": "ComputeFTF(F)"
  },
  {
    "label": "Determinant()",
    "kind": "Method",
    "detail": "Function (const T J2 = FTF .)",
    "insertText": "Determinant()"
  },
  {
    "label": "J2invT()",
    "kind": "Method",
    "detail": "Function (const PMatrix<T,2,2>)",
    "insertText": "J2invT(FTF.M[3], -FTF.M[2], -FTF.M[1], FTF.M[0])"
  },
  {
    "label": "dJ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dJ(T(1) / FMath::Sqrt(J2)) * (F * J2invT)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} else { dJ = PMatrix<)",
    "insertText": "T(TVec3<T>((T)0.), TVec3<T>((T)0.))"
  },
  {
    "label": "AddHyperelasticResidualAndHessian()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "AddHyperelasticResidualAndHessian(const ParticleType& Particles, const int32 ElementIndex, const int32 ElementIndexLocal, const T Dt, TVec3<T>& ParticleResidual, Chaos::PMatrix<T, 3, 3>& ParticleHessian)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (const Chaos::PMatrix<T,3,2> Fe =)",
    "insertText": "F(ElementIndex, Particles)"
  },
  {
    "label": "ComputeR()",
    "kind": "Method",
    "detail": "Function (const PMatrix<T,3,2> Re =)",
    "insertText": "ComputeR(Fe)"
  },
  {
    "label": "ComputeFTF()",
    "kind": "Method",
    "detail": "Function (const PMatrix<T,2,2> FTF =)",
    "insertText": "ComputeFTF(Fe)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const T J =)",
    "insertText": "Sqrt(FTF.Determinant())"
  },
  {
    "label": "Pe()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,2>)",
    "insertText": "Pe(TVec3<T>((T)0.), TVec3<T>((T)0.)), ForceTerm(TVec3<T>((T)0.), TVec3<T>((T)0.))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Pe =)",
    "insertText": "T(2) * MuElementArray[ElementIndex] * (Fe - Re) + LambdaElementArray[ElementIndex] * (J - T(1)) * J * Fe * ComputeFTF(Fe).Inverse()"
  },
  {
    "label": "Dx()",
    "kind": "Method",
    "detail": "Function (Chaos::TVector<T,3>)",
    "insertText": "Dx((T)0.)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Dx [ c ] + = ForceTerm . M [ ElementIndexLocal* 3 - 3 + c ] ; } } else {)",
    "insertText": "for(int32 c = 0; c < 3; c++)"
  },
  {
    "label": "dJ()",
    "kind": "Method",
    "detail": "Function (Dx [ c ] - = ForceTerm . M [ h* 3 + c ] ; } } } Dx* = Dt* Dt ; ParticleResidual - = Dx ; PMatrix<T,3,2>)",
    "insertText": "dJ(TVec3<T>((T)0.), TVec3<T>((T)0.))"
  },
  {
    "label": "dJdF32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dJdF32(Fe, dJ)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T Coeff = Dt* Dt* Measure [ ElementIndex ] ;)",
    "insertText": "if(ElementIndexLocal == 0)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T DmInvsum =)",
    "insertText": "T(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (localDmsum + = DmInv . M [ nu* 2 + k ] ; } DmInvsum + = localDmsum* localDmsum ; })",
    "insertText": "for(int32 alpha = 0; alpha < 3; alpha++)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (ParticleHessian .)",
    "insertText": "SetAt(alpha, alpha, ParticleHessian.GetAt(alpha, alpha) + Coeff * T(2) * MuElementArray[ElementIndex] * DmInvsum)"
  },
  {
    "label": "L()",
    "kind": "Method",
    "detail": "Function (} const PMatrix<T,3,2> dJDmInvT = dJ* DmInvT ; Chaos::TVector<T,3>)",
    "insertText": "L((T)0.)"
  },
  {
    "label": "SetRow()",
    "kind": "Method",
    "detail": "Function (ParticleHessian .)",
    "insertText": "SetRow(alpha, ParticleHessian.GetRow(alpha) + Coeff * LambdaElementArray[ElementIndex] * L[alpha] * L)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (DmInvsum + = DmInv .)",
    "insertText": "GetAt(ElementIndexLocal - 1, nu) * DmInv.GetAt(ElementIndexLocal - 1, nu)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (ParticleHessian .)",
    "insertText": "SetAt(alpha, alpha, ParticleHessian.GetAt(alpha, alpha) + Dt * Dt * Measure[ElementIndex] * T(2) * MuElementArray[ElementIndex] * DmInvsum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 IndexVisited = ElementIndexLocal* 3 - 3 + alpha ;)",
    "insertText": "if(IndexVisited < 6 && IndexVisited > INDEX_NONE)"
  },
  {
    "label": "SetRow()",
    "kind": "Method",
    "detail": "Function (ParticleHessian .)",
    "insertText": "SetRow(alpha, ParticleHessian.GetRow(alpha) + Dt * Dt * Measure[ElementIndex] * LambdaElementArray[ElementIndex] * L[alpha] * L)"
  }
]