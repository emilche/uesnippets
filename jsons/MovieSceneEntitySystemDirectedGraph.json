[
  {
    "label": "FDirectedGraphStringParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectedGraphStringParameters"
  },
  {
    "label": "FDirectedGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectedGraph"
  },
  {
    "label": "FDirectionalEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectionalEdge"
  },
  {
    "label": "FDepthFirstSearch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepthFirstSearch"
  },
  {
    "label": "FBreadthFirstSearch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBreadthFirstSearch"
  },
  {
    "label": "FDiscoverCyclicEdges",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoverCyclicEdges"
  },
  {
    "label": "FDirectionalEdge()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Templates / Function . h \" # include \" Containers / StringFwd . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" namespace UE::MovieScene { struct FDirectedGraphStringParameters { FStringView ClusterName ; FColor Color = FColor::Black ; } ; struct FDirectedGraph { struct FDirectionalEdge {)",
    "insertText": "FDirectionalEdge(uint16 InFromNode, uint16 InToNode) : FromNode(InFromNode) , ToNode(InToNode)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FDirectionalEdge& A, const FDirectionalEdge& B)"
  },
  {
    "label": "Search()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Search(uint16 Node)"
  },
  {
    "label": "GetVisited()",
    "kind": "Method",
    "detail": "Function (const TBitArray<>&)",
    "insertText": "GetVisited()"
  },
  {
    "label": "IsCyclic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCyclic(const uint16 EdgeIndex)"
  },
  {
    "label": "GetCyclicEdges()",
    "kind": "Method",
    "detail": "Function (} const TBitArray<>&)",
    "insertText": "GetCyclicEdges()"
  },
  {
    "label": "SearchFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchFrom(uint16 NodeID)"
  },
  {
    "label": "DiscoverCycles()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DiscoverCycles(uint16 NodeID, TBitArray<>& VisitedNodes)"
  },
  {
    "label": "TagCyclicChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TagCyclicChain(uint16 CyclicNodeID)"
  },
  {
    "label": "FDirectedGraph()",
    "kind": "Method",
    "detail": "Function (TBitArray<> CyclicEdges ; TBitArray<> VisitedEdges ; TArray<uint16,TInlineAllocator<1 6>> EdgeChain ; const FDirectedGraph* Graph ; } ; public :)",
    "insertText": "FDirectedGraph() : bHasDanglingEdges(false)"
  },
  {
    "label": "AllocateNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocateNode(uint16 NodeID)"
  },
  {
    "label": "IsNodeAllocated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeAllocated(uint16 NodeID)"
  },
  {
    "label": "CleanUpDanglingEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpDanglingEdges()"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNode(uint16 NodeID)"
  },
  {
    "label": "GetNodeMask()",
    "kind": "Method",
    "detail": "Function (const TBitArray<>&)",
    "insertText": "GetNodeMask()"
  },
  {
    "label": "MakeEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeEdge(uint16 FromNode, uint16 ToNode)"
  },
  {
    "label": "DestroyEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEdge(uint16 FromNode, uint16 ToNode)"
  },
  {
    "label": "DestroyAllEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAllEdges()"
  },
  {
    "label": "FindEdgeUpstreamNodes()",
    "kind": "Method",
    "detail": "Function (TBitArray<>)",
    "insertText": "FindEdgeUpstreamNodes()"
  },
  {
    "label": "GetEdges()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FDirectionalEdge>)",
    "insertText": "GetEdges()"
  },
  {
    "label": "GetEdgesFrom()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FDirectionalEdge>)",
    "insertText": "GetEdgesFrom(uint16 InNode)"
  },
  {
    "label": "HasEdgeFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEdgeFrom(uint16 InNode)"
  },
  {
    "label": "HasEdgeTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEdgeTo(uint16 InNode)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const UE::MovieScene::FDirectedGraphStringParameters& Parameters)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const UE::MovieScene::FDirectedGraphStringParameters& Parameters, TFunctionRef<void(uint16, FStringBuilderBase&)> EmitLabel)"
  },
  {
    "label": "FindEdgeStart()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "FindEdgeStart(uint16 FromNode)"
  },
  {
    "label": "FindEdgeIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindEdgeIndex(const FDirectionalEdge& Edge)"
  },
  {
    "label": "EdgeExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EdgeExists(const FDirectionalEdge& Edge)"
  },
  {
    "label": "IsCyclicImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCyclicImpl(uint16 NodeID, TBitArray<>& Visiting)"
  }
]