[
  {
    "label": "FLockedPhysicsObjectExternalInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLockedPhysicsObjectExternalInterface"
  },
  {
    "label": "FPhysicsObjectExternalInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsObjectExternalInterface"
  },
  {
    "label": "FLockedPhysicsObjectExternalInterface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PhysicsObject . h \" # include \" Chaos / PhysicsObjectInterface . h \" # include \" Physics / Experimental / ChaosScopedSceneLock . h \" # include \" PhysicsObjectPhysicsCoreInterface . h \" # include \" Containers / ArrayView . h \" # include<type_traits> template<EPhysicsInterfaceScopedLockType LockType> class FLockedPhysicsObjectExternalInterface { public : using InterfaceType = std::conditional_t<LockType = = EPhysicsInterfaceScopedLockType::Read,Chaos::FReadPhysicsObjectInterface_External,Chaos::FWritePhysicsObjectInterface_External> ;)",
    "insertText": "FLockedPhysicsObjectExternalInterface(FChaosScene* Scene, InterfaceType&& InInterface) : Lock(Scene, LockType) , Interface(InInterface)"
  },
  {
    "label": "FLockedPhysicsObjectExternalInterface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLockedPhysicsObjectExternalInterface(FLockedPhysicsObjectExternalInterface& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLockedPhysicsObjectExternalInterface&)",
    "insertText": "operator(FLockedPhysicsObjectExternalInterface& Other)"
  },
  {
    "label": "FLockedPhysicsObjectExternalInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLockedPhysicsObjectExternalInterface(FLockedPhysicsObjectExternalInterface&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLockedPhysicsObjectExternalInterface&)",
    "insertText": "operator(FLockedPhysicsObjectExternalInterface&& Other)"
  },
  {
    "label": "GetInterface()",
    "kind": "Method",
    "detail": "Function (InterfaceType&)",
    "insertText": "GetInterface()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "Release()"
  },
  {
    "label": "LockRead()",
    "kind": "Method",
    "detail": "Function (} private : FScopedSceneLock_Chaos Lock ; InterfaceType Interface ; } ; using FLockedReadPhysicsObjectExternalInterface = FLockedPhysicsObjectExternalInterface<EPhysicsInterfaceScopedLockType::Read> ; using FLockedWritePhysicsObjectExternalInterface = FLockedPhysicsObjectExternalInterface<EPhysicsInterfaceScopedLockType::Write> ; class FPhysicsObjectExternalInterface : public Chaos::FPhysicsObjectInterface,public PhysicsObjectPhysicsCoreInterface { public : FLockedReadPhysicsObjectExternalInterface)",
    "insertText": "LockRead(FChaosScene* Scene)"
  },
  {
    "label": "LockRead()",
    "kind": "Method",
    "detail": "Function (FLockedReadPhysicsObjectExternalInterface)",
    "insertText": "LockRead(Chaos::FConstPhysicsObjectHandle InObject)"
  },
  {
    "label": "LockRead()",
    "kind": "Method",
    "detail": "Function (FLockedReadPhysicsObjectExternalInterface)",
    "insertText": "LockRead(TArrayView<const Chaos::FConstPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "LockWrite()",
    "kind": "Method",
    "detail": "Function (FLockedWritePhysicsObjectExternalInterface)",
    "insertText": "LockWrite(FChaosScene* Scene)"
  },
  {
    "label": "LockWrite()",
    "kind": "Method",
    "detail": "Function (FLockedWritePhysicsObjectExternalInterface)",
    "insertText": "LockWrite(TArrayView<const Chaos::FPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "GetRead_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (Chaos::FReadPhysicsObjectInterface_External)",
    "insertText": "GetRead_AssumesLocked()"
  },
  {
    "label": "GetWrite_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (Chaos::FWritePhysicsObjectInterface_External)",
    "insertText": "GetWrite_AssumesLocked()"
  },
  {
    "label": "GetComponentFromPhysicsObject()",
    "kind": "Method",
    "detail": "Function (UPrimitiveComponent*)",
    "insertText": "GetComponentFromPhysicsObject(UWorld* World, Chaos::FPhysicsObjectHandle PhysicsObject)"
  }
]