[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "EDITORFRAMEWORK_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EDITORFRAMEWORK_API"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EditorSubsystem . h \" # include \" Elements / Framework / TypedElementHandle . h \" # include \" Elements / Framework / TypedElementListFwd . h \" # include \" Elements / Framework / TypedElementSelectionSet . h \" # include \" Elements / Interfaces / TypedElementWorldInterface . h \" # include \" Math / Transform . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" EditorElementSubsystem . generated . h \" class UObject ; struct FTypedElementHandle ;)",
    "insertText": "UCLASS(Transient)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: static bool SetElementTransform(FTypedElementHandle InElementHandle, const FTransform& InWorldTransform)"
  },
  {
    "label": "GetEditorNormalizedSelectionSet()",
    "kind": "Method",
    "detail": "Function (FTypedElementListRef)",
    "insertText": "GetEditorNormalizedSelectionSet(const UTypedElementSelectionSet& SelectionSet)"
  },
  {
    "label": "GetEditorManipulableElements()",
    "kind": "Method",
    "detail": "Function (FTypedElementListRef)",
    "insertText": "GetEditorManipulableElements(const FTypedElementListRef& NormalizedSelection)"
  },
  {
    "label": "GetLastSelectedEditorManipulableElement()",
    "kind": "Method",
    "detail": "Function (TTypedElement<ITypedElementWorldInterface>)",
    "insertText": "GetLastSelectedEditorManipulableElement(const FTypedElementListRef& NormalizedSelection)"
  },
  {
    "label": "IsElementEditorManipulable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsElementEditorManipulable(const TTypedElement<ITypedElementWorldInterface>& WorldElement)"
  }
]