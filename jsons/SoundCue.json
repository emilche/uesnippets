[
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "USoundCue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundCue"
  },
  {
    "label": "USoundNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundNode"
  },
  {
    "label": "USoundNodeAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundNodeAttenuation"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "FSoundParseParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundParseParameters"
  },
  {
    "label": "FSoundNodeEditorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundNodeEditorData"
  },
  {
    "label": "ISoundCueAudioEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundCueAudioEditor"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FSoundCueParameterTransmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundCueParameterTransmitter"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IAudioParameterTransmitter . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" Sound / SoundAttenuation . h \" # include \" Sound / SoundBase . h \" # include \" Sound / SoundNode . h \" # include \" Sound / SoundWave . h \" # if WITH_EDITOR # include \" EdGraph / EdGraph . h \" # endif # include \" SoundCue . generated . h \" # if WITH_EDITORONLY_DATA class UEdGraph ; # endif class USoundCue ; class USoundNode ; class USoundNodeAttenuation ; struct FActiveSound ; struct FSoundParseParameters ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FSoundNodeEditorData()",
    "kind": "Method",
    "detail": "Function (int32 NodePosY ;)",
    "insertText": "FSoundNodeEditorData() : NodePosX(0) , NodePosY(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar,FSoundNodeEditorData& MySoundNodeEditorData)"
  },
  {
    "label": "CreateNewSoundCueGraph()",
    "kind": "Method",
    "detail": "Function (} UEdGraph*)",
    "insertText": "CreateNewSoundCueGraph(USoundCue* InSoundCue)"
  },
  {
    "label": "SetupSoundNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSoundNode(UEdGraph* SoundCueGraph, USoundNode* SoundNode, bool bSelectNewNode)"
  },
  {
    "label": "LinkGraphNodesFromSoundNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkGraphNodesFromSoundNodes(USoundCue* SoundCue)"
  },
  {
    "label": "CompileSoundNodesFromGraphNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileSoundNodesFromGraphNodes(USoundCue* SoundCue)"
  },
  {
    "label": "RemoveNullNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNullNodes(USoundCue* SoundCue)"
  },
  {
    "label": "CreateInputPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateInputPin(UEdGraphNode* SoundCueNode)"
  },
  {
    "label": "RenameNodePins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameNodePins(USoundNode* SoundNode)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ; # endif)",
    "insertText": "UCLASS(hidecategories=object, BlueprintType, meta= (LoadBehavior = \"LazyOnDemand\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(BlueprintReadOnly, Category = Sound)"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "GetDesc()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FStructuredArchive::FRecord Record)"
  },
  {
    "label": "CanBeClusterRoot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeClusterRoot()"
  },
  {
    "label": "CanBeInCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeInCluster()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsPlayable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayable()"
  },
  {
    "label": "IsPlayWhenSilent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayWhenSilent()"
  },
  {
    "label": "ShouldApplyInteriorVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldApplyInteriorVolumes()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(class FAudioDevice* AudioDevice, const UPTRINT NodeWaveInstanceHash, FActiveSound& ActiveSound, const FSoundParseParameters& ParseParams, TArray<FWaveInstance*>& WaveInstances)"
  },
  {
    "label": "GetVolumeMultiplier()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVolumeMultiplier()"
  },
  {
    "label": "GetPitchMultiplier()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPitchMultiplier()"
  },
  {
    "label": "GetMaxDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxDistance()"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDuration()"
  },
  {
    "label": "GetAttenuationSettingsToApply()",
    "kind": "Method",
    "detail": "Function (const FSoundAttenuationSettings*)",
    "insertText": "GetAttenuationSettingsToApply()"
  },
  {
    "label": "GetSubtitlePriority()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSubtitlePriority()"
  },
  {
    "label": "GetSoundWavesWithCookedAnalysisData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoundWavesWithCookedAnalysisData(TArray<USoundWave*>& OutSoundWaves)"
  },
  {
    "label": "HasCookedFFTData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCookedFFTData()"
  },
  {
    "label": "HasCookedAmplitudeEnvelopeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCookedAmplitudeEnvelopeData()"
  },
  {
    "label": "CreateParameterTransmitter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<Audio::IParameterTransmitter>)",
    "insertText": "CreateParameterTransmitter(Audio::FParameterTransmitterInitParams&& InParams)"
  },
  {
    "label": "IsAttenuationSettingsEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttenuationSettingsEditable()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* SoundNode = NewObject<)",
    "insertText": "T(this, SoundNodeClass, NAME_None, RF_Transactional)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR AllNodes .)",
    "insertText": "Add(SoundNode)"
  },
  {
    "label": "SetupSoundNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSoundNode(SoundNode, bSelectNewNode)"
  },
  {
    "label": "GetResourceSizeForFormat()",
    "kind": "Method",
    "detail": "Function (# endif return SoundNode ; } int32)",
    "insertText": "GetResourceSizeForFormat(FName Format)"
  },
  {
    "label": "RecursiveFindAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveFindAllNodes(USoundNode* Node, TArray<USoundNode*>& OutNodes)"
  },
  {
    "label": "RecursiveFindNode()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "RecursiveFindNode(USoundNode* Node, TArray<T*>& OutNodes)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutNodes .)",
    "insertText": "AddUnique(FoundNode)"
  },
  {
    "label": "GetMaxChildNodes()",
    "kind": "Method",
    "detail": "Function (} const int32 MaxChildNodes = Node ->)",
    "insertText": "GetMaxChildNodes()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (RecursiveFindNode<)",
    "insertText": "T(Node->ChildNodes[ChildIndex], OutNodes)"
  },
  {
    "label": "RecursiveFindNode()",
    "kind": "Method",
    "detail": "Function (} } } template<T> void)",
    "insertText": "RecursiveFindNode(const USoundNode* Node, TArray<const T*>& OutNodes)"
  },
  {
    "label": "FindPathToNode()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "FindPathToNode(const UPTRINT NodeHashToFind, TArray<USoundNode*>& OutPath)"
  },
  {
    "label": "StaticAudioQualityChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticAudioQualityChanged(int32 NewQualityLevel)"
  },
  {
    "label": "PrimeSoundCue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrimeSoundCue()"
  },
  {
    "label": "RetainSoundCue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetainSoundCue()"
  },
  {
    "label": "ReleaseRetainedAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRetainedAudio()"
  },
  {
    "label": "CacheLoadingBehavior()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheLoadingBehavior(ESoundWaveLoadingBehavior InBehavior)"
  },
  {
    "label": "RecursiveFindPathToNode()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "RecursiveFindPathToNode(USoundNode* CurrentNode, const UPTRINT CurrentHash, const UPTRINT NodeHashToFind, TArray<USoundNode*>& OutPath)"
  },
  {
    "label": "ComputeMaxDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeMaxDistance()"
  },
  {
    "label": "AudioQualityChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AudioQualityChanged()"
  },
  {
    "label": "OnPostEngineInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostEngineInit()"
  },
  {
    "label": "EvaluateNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateNodes(bool bAddToRoot)"
  },
  {
    "label": "CacheQualityLevel()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle OnPostEngineInitHandle ; int32 CachedQualityLevel ; public : void)",
    "insertText": "CacheQualityLevel()"
  },
  {
    "label": "RecursiveFindAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveFindAttenuation(USoundNode* Node, TArray<USoundNodeAttenuation*> &OutNodes)"
  },
  {
    "label": "RecursiveFindAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveFindAttenuation(const USoundNode* Node, TArray<const USoundNodeAttenuation*>& OutNodes)"
  },
  {
    "label": "EvaluateMaxAttenuation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvaluateMaxAttenuation(const FTransform& Origin, FVector Location, float DistanceScale = 1.f)"
  },
  {
    "label": "CreateGraph()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "CreateGraph()"
  },
  {
    "label": "ClearGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearGraph()"
  },
  {
    "label": "SetupSoundNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSoundNode(USoundNode* InSoundNode, bool bSelectNewNode = true)"
  },
  {
    "label": "LinkGraphNodesFromSoundNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkGraphNodesFromSoundNodes()"
  },
  {
    "label": "CompileSoundNodesFromGraphNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileSoundNodesFromGraphNodes()"
  },
  {
    "label": "GetGraph()",
    "kind": "Method",
    "detail": "Function (UEdGraph*)",
    "insertText": "GetGraph()"
  },
  {
    "label": "ResetGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGraph()"
  },
  {
    "label": "SetSoundCueAudioEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoundCueAudioEditor(TSharedPtr<ISoundCueAudioEditor> InSoundCueGraphEditor)"
  },
  {
    "label": "GetSoundCueAudioEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISoundCueAudioEditor>)",
    "insertText": "GetSoundCueAudioEditor()"
  },
  {
    "label": "RecursivelySetExcludeBranchCulling()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RecursivelySetExcludeBranchCulling(USoundNode* CurrentNode)"
  },
  {
    "label": "FSoundCueParameterTransmitter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISoundCueAudioEditor> SoundCueAudioEditor ; FCriticalSection EditorOnlyCs ; # endif } ; class FSoundCueParameterTransmitter : public Audio::FParameterTransmitterBase { public :)",
    "insertText": "FSoundCueParameterTransmitter(Audio::FParameterTransmitterInitParams&& InParams) : Audio::FParameterTransmitterBase(MoveTemp(InParams.DefaultParams))"
  },
  {
    "label": "FSoundCueParameterTransmitter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSoundCueParameterTransmitter()"
  },
  {
    "label": "GetReferencedObjects()",
    "kind": "Method",
    "detail": "Function (TArray<const TObjectPtr<UObject>*>)",
    "insertText": "GetReferencedObjects()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetParameters(TArray<FAudioParameter>&& InParameters)"
  }
]