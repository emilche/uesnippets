[
  {
    "label": "RtcEventLogOutputFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLogOutputFile"
  },
  {
    "label": "RtcEventLogOutputFile()",
    "kind": "Method",
    "detail": "Function (# ifndef API_RTC_EVENT_LOG_OUTPUT_FILE_H_ # define API_RTC_EVENT_LOG_OUTPUT_FILE_H_ # include<stddef . h> # include<stdio . h> # include<string> # include \" api / rtc_event_log_output . h \" # include \" rtc_base / system / file_wrapper . h \" namespace webrtc { class RtcEventLogOutputFile final : public RtcEventLogOutput { public : const size_t kMaxReasonableFileSize ;)",
    "insertText": "RtcEventLogOutputFile(const std::string& file_name)"
  },
  {
    "label": "RtcEventLogOutputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtcEventLogOutputFile(const std::string& file_name, size_t max_size_bytes)"
  },
  {
    "label": "RtcEventLogOutputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtcEventLogOutputFile(FILE* file, size_t max_size_bytes)"
  },
  {
    "label": "RtcEventLogOutputFile()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcEventLogOutputFile()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(absl::string_view output)"
  },
  {
    "label": "RtcEventLogOutputFile()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "RtcEventLogOutputFile(FileWrapper file, size_t max_size_bytes)"
  },
  {
    "label": "IsActiveInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActiveInternal()"
  }
]