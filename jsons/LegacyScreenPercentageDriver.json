[
  {
    "label": "FLegacyScreenPercentageDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyScreenPercentageDriver"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStaticResolutionFractionHeuristic",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticResolutionFractionHeuristic"
  },
  {
    "label": "FUserSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUserSettings"
  },
  {
    "label": "FLegacyScreenPercentageDriver()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SceneView . h \" # include \" LegacyScreenPercentageDriver . generated . h \" class FLegacyScreenPercentageDriver : public ISceneViewFamilyScreenPercentage { public :)",
    "insertText": "FLegacyScreenPercentageDriver(const FSceneViewFamily& InViewFamily, float InGlobalResolutionFraction)"
  },
  {
    "label": "FLegacyScreenPercentageDriver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLegacyScreenPercentageDriver(const FSceneViewFamily& InViewFamily, float InGlobalResolutionFraction, float InGlobalResolutionFractionUpperBound)"
  },
  {
    "label": "GetCVarResolutionFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCVarResolutionFraction()"
  },
  {
    "label": "GetResolutionFractionsUpperBound()",
    "kind": "Method",
    "detail": "Function (private : const FSceneViewFamily& ViewFamily ; const float GlobalResolutionFraction ; const float GlobalResolutionFractionUpperBound ; DynamicRenderScaling::TMap<float>)",
    "insertText": "GetResolutionFractionsUpperBound()"
  },
  {
    "label": "GetResolutionFractions_RenderThread()",
    "kind": "Method",
    "detail": "Function (DynamicRenderScaling::TMap<float>)",
    "insertText": "GetResolutionFractions_RenderThread()"
  },
  {
    "label": "Fork_GameThread()",
    "kind": "Method",
    "detail": "Function (ISceneViewFamilyScreenPercentage*)",
    "insertText": "Fork_GameThread(const class FSceneViewFamily& ForkedViewFamily)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (NonRealtime)",
    "insertText": "UMETA(DisplayName = \"Non-Realtime\"), Desktop UMETA(DisplayName = \"Desktop Rendered\"), Mobile UMETA(DisplayName = \"Mobile Rendered\"), VR UMETA(DisplayName = \"VR Rendered\"), PathTracer UMETA(DisplayName = \"Path Traced\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Manual)",
    "insertText": "UMETA(DisplayName=\"Manual\"), BasedOnDisplayResolution UMETA(DisplayName=\"Based on display resolution\"), BasedOnDPIScale UMETA(DisplayName=\"Based on operating system's DPI scale\")"
  },
  {
    "label": "FStaticResolutionFractionHeuristic()",
    "kind": "Method",
    "detail": "Function (struct FStaticResolutionFractionHeuristic {)",
    "insertText": "FStaticResolutionFractionHeuristic()"
  },
  {
    "label": "EditorOverridePIESettings()",
    "kind": "Method",
    "detail": "Function (struct FUserSettings { EScreenPercentageMode Mode = EScreenPercentageMode::Manual ; float GlobalResolutionFraction = 1 . 0 f ; float MinRenderingResolution = 0 . 0 f ; float MaxRenderingResolution = 0 . 0 f ; float AutoPixelCountMultiplier = 1 . 0 f ; bool bAllowDisplayBasedScreenPercentageMode = true ; # if WITH_EDITOR bool)",
    "insertText": "EditorOverridePIESettings()"
  },
  {
    "label": "PullEditorRenderingSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PullEditorRenderingSettings(EViewStatusForScreenPercentage ViewStatus)"
  },
  {
    "label": "PullViewFamilyRenderingSettings()",
    "kind": "Method",
    "detail": "Function (} ; FUserSettings Settings ; int32 TotalDisplayedPixelCount = 0 ; float SecondaryViewFraction = 1 . 0 f ; float DPIScale = 1 . 0 f ; void)",
    "insertText": "PullViewFamilyRenderingSettings(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "ResolveResolutionFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ResolveResolutionFraction()"
  }
]