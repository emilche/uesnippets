[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "BitrateAdjuster()",
    "kind": "Method",
    "detail": "Function (# ifndef COMMON_VIDEO_INCLUDE_BITRATE_ADJUSTER_H_ # define COMMON_VIDEO_INCLUDE_BITRATE_ADJUSTER_H_ # include<stddef . h> # include<stdint . h> # include \" absl / types / optional . h \" # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class RTC_EXPORT BitrateAdjuster { public :)",
    "insertText": "BitrateAdjuster(float min_adjusted_bitrate_pct, float max_adjusted_bitrate_pct)"
  },
  {
    "label": "BitrateAdjuster()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BitrateAdjuster()"
  },
  {
    "label": "SetTargetBitrateBps()",
    "kind": "Method",
    "detail": "Function (} const uint32_t kBitrateUpdateIntervalMs ; const uint32_t kBitrateUpdateFrameInterval ; const float kBitrateTolerancePct ; const float kBytesPerMsToBitsPerSecond ; void)",
    "insertText": "SetTargetBitrateBps(uint32_t bitrate_bps)"
  },
  {
    "label": "GetTargetBitrateBps()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetTargetBitrateBps()"
  },
  {
    "label": "GetAdjustedBitrateBps()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetAdjustedBitrateBps()"
  },
  {
    "label": "GetEstimatedBitrateBps()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "GetEstimatedBitrateBps()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(size_t frame_size)"
  },
  {
    "label": "IsWithinTolerance()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsWithinTolerance(uint32_t bitrate_bps, uint32_t target_bitrate_bps)"
  },
  {
    "label": "GetMinAdjustedBitrateBps()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetMinAdjustedBitrateBps() const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "GetMaxAdjustedBitrateBps()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetMaxAdjustedBitrateBps() const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UpdateBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBitrate(uint32_t current_time_ms) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex mutex_ ; const float min_adjusted_bitrate_pct_ ; const float max_adjusted_bitrate_pct_ ; volatile uint32_t target_bitrate_bps_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]