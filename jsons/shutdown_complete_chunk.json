[
  {
    "label": "ShutdownCompleteChunkConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ShutdownCompleteChunkConfig"
  },
  {
    "label": "ShutdownCompleteChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShutdownCompleteChunk"
  },
  {
    "label": "ShutdownCompleteChunk()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_CHUNK_SHUTDOWN_COMPLETE_CHUNK_H_ # define NET_DCSCTP_PACKET_CHUNK_SHUTDOWN_COMPLETE_CHUNK_H_ # include<stddef . h> # include<stdint . h> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" net / dcsctp / packet / chunk / chunk . h \" # include \" net / dcsctp / packet / tlv_trait . h \" namespace dcsctp { struct ShutdownCompleteChunkConfig : ChunkConfig { int kType = 1 4 ; size_t kHeaderSize = 4 ; size_t kVariableLengthAlignment = 0 ; } ; class ShutdownCompleteChunk : public Chunk,public TLVTrait<ShutdownCompleteChunkConfig> { public : int kType = ShutdownCompleteChunkConfig::kType ;)",
    "insertText": "ShutdownCompleteChunk(bool tag_reflected) : tag_reflected_(tag_reflected)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} absl::optional<ShutdownCompleteChunk>)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "SerializeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTo(std::vector<uint8_t>& out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "tag_reflected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "tag_reflected()"
  }
]