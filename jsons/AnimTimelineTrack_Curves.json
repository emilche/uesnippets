[
  {
    "label": "FAnimTimelineTrack_Curves",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimelineTrack_Curves"
  },
  {
    "label": "ANIMTIMELINE_DECLARE_TRACK()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimTimeline / AnimTimelineTrack . h \" # include \" Animation / Skeleton . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" class FAnimTimelineTrack_Curves : public FAnimTimelineTrack {)",
    "insertText": "ANIMTIMELINE_DECLARE_TRACK(FAnimTimelineTrack_Curves, FAnimTimelineTrack)"
  },
  {
    "label": "FAnimTimelineTrack_Curves()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimTimelineTrack_Curves(const TSharedRef<FAnimModel>& InModel)"
  },
  {
    "label": "GenerateContainerWidgetForOutliner()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateContainerWidgetForOutliner(const TSharedRef<SAnimOutlinerItem>& InRow)"
  },
  {
    "label": "BuildCurvesSubMenu()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<SWidget>)",
    "insertText": "BuildCurvesSubMenu()"
  },
  {
    "label": "FillMetadataEntryMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillMetadataEntryMenu(FMenuBuilder& Builder)"
  },
  {
    "label": "FillVariableCurveMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillVariableCurveMenu(FMenuBuilder& Builder)"
  },
  {
    "label": "AddMetadataEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadataEntry(const FName& InCurveName)"
  },
  {
    "label": "CreateNewMetadataEntryClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewMetadataEntryClicked()"
  },
  {
    "label": "CreateNewMetadataEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewMetadataEntry(const FText& CommittedText, ETextCommit::Type CommitType)"
  },
  {
    "label": "CreateNewCurveClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewCurveClicked()"
  },
  {
    "label": "CreateTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTrack(const FText& ComittedText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "AddVariableCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVariableCurve(const FName& InCurveName)"
  },
  {
    "label": "DeleteAllCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteAllCurves()"
  },
  {
    "label": "HandleShowCurvePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleShowCurvePoints()"
  },
  {
    "label": "IsShowCurvePointsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowCurvePointsEnabled()"
  },
  {
    "label": "HandleUseTreeView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleUseTreeView()"
  },
  {
    "label": "IsUseTreeViewEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUseTreeViewEnabled()"
  },
  {
    "label": "OnMetadataCurveNamePicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMetadataCurveNamePicked(const FName& InCurveName)"
  },
  {
    "label": "OnVariableCurveNamePicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVariableCurveNamePicked(const FName& InCurveName)"
  },
  {
    "label": "IsCurveMarkedForExclusion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurveMarkedForExclusion(const FName& InCurveName)"
  }
]