[
  {
    "label": "FContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContext"
  },
  {
    "label": "FIOContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIOContext"
  },
  {
    "label": "FAccessContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccessContext"
  },
  {
    "label": "FRunningContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRunningContext"
  },
  {
    "label": "FAllocationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocationContext"
  },
  {
    "label": "FHandshakeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHandshakeContext"
  },
  {
    "label": "FStopRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStopRequest"
  },
  {
    "label": "FHardHandshakeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHardHandshakeContext"
  },
  {
    "label": "VValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VValue"
  },
  {
    "label": "TWriteBarrier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWriteBarrier"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHeap"
  },
  {
    "label": "FStoppedWorld",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStoppedWorld"
  },
  {
    "label": "FIOContextPromise",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIOContextPromise"
  },
  {
    "label": "FIOContextScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIOContextScope"
  },
  {
    "label": "FAccessContextPromise",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccessContextPromise"
  },
  {
    "label": "FContextImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextImpl"
  },
  {
    "label": "FRunningContextPromise",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRunningContextPromise"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "FContext()",
    "kind": "Method",
    "detail": "Function (struct FContext ; struct FIOContext ; struct FAccessContext ; struct FRunningContext ; struct FAllocationContext ; struct FHandshakeContext ; struct FStopRequest ; struct FHardHandshakeContext ; struct VValue ; template<T> struct TWriteBarrier ; enum class EIsInHandshake { No,Yes } ; struct FContext {)",
    "insertText": "FContext()"
  },
  {
    "label": "FContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FContext(const FContext& Other) : EncodedWord(Other.EncodedWord)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FContext&)",
    "insertText": "operator(const FContext&)"
  },
  {
    "label": "IsInHandshake()",
    "kind": "Method",
    "detail": "Function (EIsInHandshake)",
    "insertText": "IsInHandshake()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FContext& Other)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetHeapRole()",
    "kind": "Method",
    "detail": "Function (} EContextHeapRole)",
    "insertText": "GetHeapRole()"
  },
  {
    "label": "EnableManualStackScanning()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableManualStackScanning()"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->EnableManualStackScanning()"
  },
  {
    "label": "UsesManualStackScanning()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesManualStackScanning()"
  },
  {
    "label": "ManualStackScanRequested()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ManualStackScanRequested()"
  },
  {
    "label": "ClearManualStackScanRequest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearManualStackScanRequest()"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->ClearManualStackScanRequest()"
  },
  {
    "label": "IsInManuallyEmptyStack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInManuallyEmptyStack()"
  },
  {
    "label": "SetIsInManuallyEmptyStack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsInManuallyEmptyStack(bool bInIsInManuallyEmptyStack)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->SetIsInManuallyEmptyStack(bInIsInManuallyEmptyStack)"
  },
  {
    "label": "FContext()",
    "kind": "Method",
    "detail": "Function (} protected : class FHeap ; struct FIOContext ; struct FStoppedWorld ;)",
    "insertText": "FContext(FContextImpl* Impl, EIsInHandshake IsInHandshake)"
  },
  {
    "label": "SetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImpl(Impl)"
  },
  {
    "label": "SetIsInHandshake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsInHandshake(IsInHandshake)"
  },
  {
    "label": "CheckBaseInvariants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckBaseInvariants()"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (} FContextImpl*)",
    "insertText": "GetImpl()"
  },
  {
    "label": "SetImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetImpl(FContextImpl* Impl)"
  },
  {
    "label": "EncodedWord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodedWord(EncodedWord & IsInHandshakeBit) | reinterpret_cast<uintptr_t>(Impl)"
  },
  {
    "label": "SetIsInHandshake()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsInHandshake(EIsInHandshake IsInHandshake)"
  },
  {
    "label": "EncodedWord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodedWord(EncodedWord & ~IsInHandshakeBit) | (IsInHandshake == EIsInHandshake::Yes ? IsInHandshakeBit : 0)"
  },
  {
    "label": "FIOContextPromise()",
    "kind": "Method",
    "detail": "Function (} uintptr_t IsInHandshakeBit = 1 ; uintptr_t EncodedWord = 0 ; } ; struct FIOContextPromise {)",
    "insertText": "FIOContextPromise()"
  },
  {
    "label": "FIOContext()",
    "kind": "Method",
    "detail": "Function (} ; struct FIOContext : FContext {)",
    "insertText": "FIOContext(const FIOContext& Other) : FContext(Other)"
  },
  {
    "label": "FIOContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIOContext(const FIOContextPromise& Other) : FContext(FContextImpl::GetCurrentImpl(), EIsInHandshake::No)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<TFunc>)",
    "insertText": "decltype(auto) Create(const TFunc& Func, EContextHeapRole HeapRole = EContextHeapRole::Mutator)"
  },
  {
    "label": "AcquireAccess()",
    "kind": "Method",
    "detail": "Function (template<TFunc> void)",
    "insertText": "AcquireAccess(const TFunc& Func)"
  },
  {
    "label": "CreateForManualStackScanning()",
    "kind": "Method",
    "detail": "Function (FIOContext)",
    "insertText": "CreateForManualStackScanning()"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (FIOContext)",
    "insertText": "Context(FContextImpl::ClaimOrAllocateContext(EContextHeapRole::Mutator), EIsInHandshake::No)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->ReleaseContext()"
  },
  {
    "label": "AcquireAccessForManualStackScanning()",
    "kind": "Method",
    "detail": "Function (} FRunningContext)",
    "insertText": "AcquireAccessForManualStackScanning()"
  },
  {
    "label": "PairHandshake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PairHandshake(FContext Context, TFunctionRef<void(FHandshakeContext)> HandshakeAction)"
  },
  {
    "label": "SoftHandshake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SoftHandshake(TFunctionRef<void(FHandshakeContext)> HandshakeAction)"
  },
  {
    "label": "HardHandshake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HardHandshake(TFunctionRef<void(FHardHandshakeContext)> HandshakeAction)"
  },
  {
    "label": "StopTheWorld()",
    "kind": "Method",
    "detail": "Function (FStoppedWorld)",
    "insertText": "StopTheWorld()"
  },
  {
    "label": "FIOContext()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FIOContext()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIOContext&)",
    "insertText": "operator(const FIOContext&)"
  },
  {
    "label": "CheckIOInvariants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckIOInvariants()"
  },
  {
    "label": "DieIfInvariantsBroken()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DieIfInvariantsBroken()"
  },
  {
    "label": "CheckInvariants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckInvariants()"
  },
  {
    "label": "FIOContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIOContext(FContextImpl* Impl, EIsInHandshake IsInHandshake) : FContext(Impl, IsInHandshake)"
  },
  {
    "label": "FIOContext()",
    "kind": "Method",
    "detail": "Function (} private : struct FIOContextScope ; struct FRunningContext ;)",
    "insertText": "FIOContext(const FRunningContext& Other)"
  },
  {
    "label": "FIOContextScope()",
    "kind": "Method",
    "detail": "Function (} ; struct FIOContextScope {)",
    "insertText": "FIOContextScope(EContextHeapRole HeapRole = EContextHeapRole::Mutator)"
  },
  {
    "label": "ClaimOrAllocateContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClaimOrAllocateContext(HeapRole)"
  },
  {
    "label": "FIOContextScope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIOContextScope(const FIOContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIOContextScope&)",
    "insertText": "operator(const FIOContextScope&)"
  },
  {
    "label": "FIOContextScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIOContextScope(FIOContextScope&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIOContextScope&)",
    "insertText": "operator(FIOContextScope&&)"
  },
  {
    "label": "FIOContextScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FIOContextScope()"
  },
  {
    "label": "FAccessContextPromise()",
    "kind": "Method",
    "detail": "Function (} FIOContext Context ; } ; struct FAccessContextPromise {)",
    "insertText": "FAccessContextPromise()"
  },
  {
    "label": "FAccessContext()",
    "kind": "Method",
    "detail": "Function (} ; struct FAccessContext : FContext {)",
    "insertText": "FAccessContext(const FAccessContext& Other) : FContext(Other)"
  },
  {
    "label": "FAccessContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAccessContext(const FAccessContextPromise& Other) : FContext(FContextImpl::GetCurrentImpl(), EIsInHandshake::No)"
  },
  {
    "label": "StopAllocators()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopAllocators()"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->StopAllocators()"
  },
  {
    "label": "GetMarkStack()",
    "kind": "Method",
    "detail": "Function (} FMarkStack&)",
    "insertText": "GetMarkStack()"
  },
  {
    "label": "RunWriteBarrier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RunWriteBarrier(VCell* Cell)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->RunWriteBarrier(Cell)"
  },
  {
    "label": "RunWriteBarrierNonNull()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RunWriteBarrierNonNull(const VCell* Cell)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->RunWriteBarrierNonNull(Cell)"
  },
  {
    "label": "RunWriteBarrierNonNullDuringMarking()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RunWriteBarrierNonNullDuringMarking(VCell* Cell)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->RunWriteBarrierNonNullDuringMarking(Cell)"
  },
  {
    "label": "RunWriteBarrierDuringMarking()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RunWriteBarrierDuringMarking(VCell* Cell)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->RunWriteBarrierDuringMarking(Cell)"
  },
  {
    "label": "RunWeakReadBarrier()",
    "kind": "Method",
    "detail": "Function (} VCell*)",
    "insertText": "RunWeakReadBarrier(VCell* Cell)"
  },
  {
    "label": "RunWeakReadBarrierUnmarkedWhenActive()",
    "kind": "Method",
    "detail": "Function (} VCell*)",
    "insertText": "RunWeakReadBarrierUnmarkedWhenActive(VCell* Cell)"
  },
  {
    "label": "RunAuxWriteBarrier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RunAuxWriteBarrier(void* Aux)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->RunAuxWriteBarrier(Aux)"
  },
  {
    "label": "RunAuxWriteBarrierNonNull()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RunAuxWriteBarrierNonNull(const void* Aux)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->RunAuxWriteBarrierNonNull(Aux)"
  },
  {
    "label": "RunAuxWriteBarrierNonNullDuringMarking()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RunAuxWriteBarrierNonNullDuringMarking(void* Aux)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->RunAuxWriteBarrierNonNullDuringMarking(Aux)"
  },
  {
    "label": "RunAuxWriteBarrierDuringMarking()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RunAuxWriteBarrierDuringMarking(void* Aux)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->RunAuxWriteBarrierDuringMarking(Aux)"
  },
  {
    "label": "RunAuxWeakReadBarrier()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RunAuxWeakReadBarrier(void* Aux)"
  },
  {
    "label": "RunAuxWeakReadBarrierUnmarkedWhenActive()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RunAuxWeakReadBarrierUnmarkedWhenActive(void* Aux)"
  },
  {
    "label": "CurrentTransaction()",
    "kind": "Method",
    "detail": "Function (} FTransaction*)",
    "insertText": "CurrentTransaction()"
  },
  {
    "label": "SetCurrentTransaction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCurrentTransaction(FTransaction* Transaction)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->SetCurrentTransaction(Transaction)"
  },
  {
    "label": "NativeContext()",
    "kind": "Method",
    "detail": "Function (} const FNativeContext&)",
    "insertText": "NativeContext()"
  },
  {
    "label": "RunInNativeContext()",
    "kind": "Method",
    "detail": "Function (} template<TFunctor> void)",
    "insertText": "RunInNativeContext(VFailureContext* FailureContext, VTask* Task, const TFunctor& F)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->RunInNativeContext(FailureContext, Task, F)"
  },
  {
    "label": "TransactInNewNativeContext()",
    "kind": "Method",
    "detail": "Function (} template<TFunctor> void)",
    "insertText": "TransactInNewNativeContext(const TFunctor& F)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->TransactInNewNativeContext(F)"
  },
  {
    "label": "FAccessContext()",
    "kind": "Method",
    "detail": "Function (} protected : struct FContextImpl ;)",
    "insertText": "FAccessContext()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAccessContext&)",
    "insertText": "operator(const FAccessContext&)"
  },
  {
    "label": "FAccessContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAccessContext(FContextImpl* Impl, EIsInHandshake IsInHandshake) : FContext(Impl, IsInHandshake)"
  },
  {
    "label": "CheckAccessInvariants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckAccessInvariants()"
  },
  {
    "label": "FRunningContextPromise()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRunningContextPromise {)",
    "insertText": "FRunningContextPromise()"
  },
  {
    "label": "FRunningContext()",
    "kind": "Method",
    "detail": "Function (} ; struct FRunningContext : FAccessContext {)",
    "insertText": "FRunningContext(const FRunningContext& Other) : FAccessContext(Other)"
  },
  {
    "label": "FRunningContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRunningContext(const FRunningContextPromise& Promise) : FAccessContext(FContextImpl::GetCurrentImpl(), EIsInHandshake::No)"
  },
  {
    "label": "FRunningContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRunningContext(const FAccessContext&)"
  },
  {
    "label": "FRunningContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRunningContext(const FAllocationContext&)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (template<TFunc> void)",
    "insertText": "Create(const TFunc& Func)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Create([&Func](FIOContext Context) { Context.AcquireAccess(Func); })"
  },
  {
    "label": "RelinquishAccess()",
    "kind": "Method",
    "detail": "Function (} template<TFunc> void)",
    "insertText": "RelinquishAccess(const TFunc& Func)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->ExitConservativeStack([this, &Func]() { GetImpl()->RelinquishAccess(); Func(FIOContext(*this)); GetImpl()->AcquireAccess(); })"
  },
  {
    "label": "RelinquishAccessForManualStackScanning()",
    "kind": "Method",
    "detail": "Function (} FIOContext)",
    "insertText": "RelinquishAccessForManualStackScanning()"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->RelinquishAccess()"
  },
  {
    "label": "CheckForHandshake()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckForHandshake()"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->CheckForHandshake()"
  },
  {
    "label": "FRunningContext()",
    "kind": "Method",
    "detail": "Function (} private : struct FIOContext ;)",
    "insertText": "FRunningContext(const FIOContext& Other) : FAccessContext(Other.GetImpl(), EIsInHandshake::No)"
  },
  {
    "label": "FRunningContext()",
    "kind": "Method",
    "detail": "Function (} protected : struct FContextImpl ;)",
    "insertText": "FRunningContext(FContextImpl* Impl, EIsInHandshake IsInHandshake) : FAccessContext(Impl, IsInHandshake)"
  },
  {
    "label": "CheckRunningInvariants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckRunningInvariants()"
  },
  {
    "label": "FAllocationContext()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAllocationContext : FAccessContext {)",
    "insertText": "FAllocationContext(const FAllocationContext& Other) : FAccessContext(Other)"
  },
  {
    "label": "FAllocationContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAllocationContext(const FRunningContext& Other) : FAccessContext(Other)"
  },
  {
    "label": "FAllocationContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAllocationContext(const FAccessContext&)"
  },
  {
    "label": "FAllocationContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAllocationContext()"
  },
  {
    "label": "AllocateFastCell()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "AllocateFastCell(size_t NumBytes)"
  },
  {
    "label": "TryAllocateFastCell()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "TryAllocateFastCell(size_t NumBytes)"
  },
  {
    "label": "AllocateAuxCell()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "AllocateAuxCell(size_t NumBytes)"
  },
  {
    "label": "TryAllocateAuxCell()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "TryAllocateAuxCell(size_t NumBytes)"
  },
  {
    "label": "AllocateEmergentType()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "AllocateEmergentType(size_t NumBytes)"
  },
  {
    "label": "TryAllocate()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "TryAllocate(FSubspace* Subspace, size_t NumBytes)"
  },
  {
    "label": "TryAllocate()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "TryAllocate(FSubspace* Subspace, size_t NumBytes, size_t Alignment)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "Allocate(FSubspace* Subspace, size_t NumBytes)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "Allocate(FSubspace* Subspace, size_t NumBytes, size_t Alignment)"
  },
  {
    "label": "FAllocationContext()",
    "kind": "Method",
    "detail": "Function (} protected : struct FContextImpl ;)",
    "insertText": "FAllocationContext(FContextImpl* Impl, EIsInHandshake IsInHandshake) : FAccessContext(Impl, IsInHandshake)"
  },
  {
    "label": "CheckAllocationInvariants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckAllocationInvariants()"
  },
  {
    "label": "FHandshakeContext()",
    "kind": "Method",
    "detail": "Function (} } ; struct FHandshakeContext : FAccessContext {)",
    "insertText": "FHandshakeContext(const FHandshakeContext& Other)"
  },
  {
    "label": "RequestStop()",
    "kind": "Method",
    "detail": "Function (FStopRequest)",
    "insertText": "RequestStop()"
  },
  {
    "label": "MarkReferencedCells()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkReferencedCells()"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->MarkReferencedCells()"
  },
  {
    "label": "FHandshakeContext()",
    "kind": "Method",
    "detail": "Function (} private : struct FContextImpl ;)",
    "insertText": "FHandshakeContext(FContextImpl* Impl) : FAccessContext(Impl, EIsInHandshake::Yes)"
  },
  {
    "label": "CancelStop()",
    "kind": "Method",
    "detail": "Function (} } ; struct FStopRequest : FAccessContext { void)",
    "insertText": "CancelStop()"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->CancelStop()"
  },
  {
    "label": "FStopRequest()",
    "kind": "Method",
    "detail": "Function (} private : struct FHandshakeContext ;)",
    "insertText": "FStopRequest(FHandshakeContext Context) : FAccessContext(Context)"
  },
  {
    "label": "FIOContext()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FIOContext(const FRunningContext& Other) : FContext(Other)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<TFunc>)",
    "insertText": "decltype(auto) FIOContext::Create(const TFunc& Func, EContextHeapRole HeapRole)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (FIOContextScope Scope { HeapRole } ; return)",
    "insertText": "Func(Scope.Context)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->AcquireAccess()"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImpl()->EnterConservativeStack([this, &Func]() { Func(FRunningContext(*this)); })"
  },
  {
    "label": "NativeContextGuard()",
    "kind": "Method",
    "detail": "Function (TGuardValue<FNativeContext>)",
    "insertText": "NativeContextGuard(_NativeContext, {FailureContext, Task})"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "F()"
  },
  {
    "label": "TransactThenOpen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransactThenOpen([&] { TGuardValue<FNativeContext> NativeContextGuard(_NativeContext, MakeNewNativeContext()); FRunningContext Context(this, EIsInHandshake::No); _NativeContext.Start(Context); F(); _NativeContext.Commit(Context); })"
  }
]