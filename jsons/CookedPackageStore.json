[
  {
    "label": "FZenStoreHttpClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenStoreHttpClient"
  },
  {
    "label": "FCookedPackageStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookedPackageStore"
  },
  {
    "label": "FChunkInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkInfo"
  },
  {
    "label": "FCookedPackageStore()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" IO / IoBuffer . h \" # include \" IO / IoChunkId . h \" # include \" IO / IoHash . h \" # include \" IO / IoStatus . h \" # include \" IO / PackageStore . h \" # include \" Serialization / FileRegions . h \" # include \" Tasks / Task . h \" # include \" UObject / NameTypes . h \" namespace UE { class FZenStoreHttpClient ; } class FCookedPackageStore { public : struct FChunkInfo { FIoChunkId ChunkId ; FIoHash ChunkHash ; uint64 ChunkSize = 0 ; FName PackageName ; FString RelativeFileName ; TArray<FFileRegion> FileRegions ; } ;)",
    "insertText": "FCookedPackageStore(FStringView InCookedDir)"
  },
  {
    "label": "LoadManifest()",
    "kind": "Method",
    "detail": "Function (FIoStatus)",
    "insertText": "LoadManifest(const TCHAR* ManifestFilename)"
  },
  {
    "label": "LoadProjectStore()",
    "kind": "Method",
    "detail": "Function (FIoStatus)",
    "insertText": "LoadProjectStore(const TCHAR* ProjectStoreFilename)"
  },
  {
    "label": "GetChunkIdFromFileName()",
    "kind": "Method",
    "detail": "Function (FIoChunkId)",
    "insertText": "GetChunkIdFromFileName(const FString& Filename)"
  },
  {
    "label": "GetChunkInfoFromChunkId()",
    "kind": "Method",
    "detail": "Function (const FChunkInfo*)",
    "insertText": "GetChunkInfoFromChunkId(const FIoChunkId& ChunkId)"
  },
  {
    "label": "GetChunkInfoFromFileName()",
    "kind": "Method",
    "detail": "Function (const FChunkInfo*)",
    "insertText": "GetChunkInfoFromFileName(const FString& Filename)"
  },
  {
    "label": "GetRelativeFilenameFromChunkId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRelativeFilenameFromChunkId(const FIoChunkId& ChunkId)"
  },
  {
    "label": "GetPackageNameFromChunkId()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPackageNameFromChunkId(const FIoChunkId& ChunkId)"
  },
  {
    "label": "GetPackageNameFromFileName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPackageNameFromFileName(const FString& Filename)"
  },
  {
    "label": "GetPackageStoreEntry()",
    "kind": "Method",
    "detail": "Function (const FPackageStoreEntryResource*)",
    "insertText": "GetPackageStoreEntry(FPackageId PackageId)"
  },
  {
    "label": "HasZenStoreClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasZenStoreClient()"
  },
  {
    "label": "GetZenStoreClient()",
    "kind": "Method",
    "detail": "Function (UE::FZenStoreHttpClient*)",
    "insertText": "GetZenStoreClient()"
  },
  {
    "label": "ReadChunk()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoBuffer>)",
    "insertText": "ReadChunk(const FIoChunkId& ChunkId)"
  },
  {
    "label": "ReadChunkAsync()",
    "kind": "Method",
    "detail": "Function (UE::Tasks::FTask)",
    "insertText": "ReadChunkAsync(const FIoChunkId& ChunkId, TFunction<void(TIoStatusOr<FIoBuffer>)>&& Callback)"
  },
  {
    "label": "ParseOplog()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ParseOplog(FCbObject& OplogObject)"
  },
  {
    "label": "LoadChunkHashes()",
    "kind": "Method",
    "detail": "Function (FIoStatus)",
    "insertText": "LoadChunkHashes()"
  }
]