[
  {
    "label": "Arg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Arg"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_SAFE_SPRINTF_H_ # define BASE_STRINGS_SAFE_SPRINTF_H_ # include<stddef . h> # include<stdint . h> # include<stdlib . h> # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (namespace strings { # if)",
    "insertText": "defined(COMPILER_MSVC) #if defined(_WIN64)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (# else typedef long ssize_t ; # endif # endif namespace internal { struct Arg { enum Type { INT,UINT,STRING,POINTER } ;)",
    "insertText": "Arg(signed char c) : type(INT)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (integer . i = c ; integer . width =)",
    "insertText": "sizeof(char)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(unsigned char c) : type(UINT)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(signed short j) : type(INT)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (integer . i = j ; integer . width =)",
    "insertText": "sizeof(short)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(unsigned short j) : type(UINT)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(signed int j) : type(INT)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (integer . i = j ; integer . width =)",
    "insertText": "sizeof(int)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(unsigned int j) : type(UINT)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(signed long j) : type(INT)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (integer . i = j ; integer . width =)",
    "insertText": "sizeof(long)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(unsigned long j) : type(UINT)"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (integer . i = static_cast<)",
    "insertText": "int64_t(j)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(signed long long j) : type(INT)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (integer . i = j ; integer . width =)",
    "insertText": "sizeof(long long)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(unsigned long long j) : type(UINT)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(const char* s) : str(s), type(STRING)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(char* s) : str(s), type(STRING)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (} template<class T>)",
    "insertText": "Arg(T* p) : ptr((void*)p), type(POINTER)"
  },
  {
    "label": "SafeSNPrintf()",
    "kind": "Method",
    "detail": "Function (} union { struct { int64_t i ; unsigned char width ; } integer ; const char* str ; const void* ptr ; } ; const enum Type type ; } ; BASE_EXPORT ssize_t)",
    "insertText": "SafeSNPrintf(char* buf, size_t sz, const char* fmt, const Arg* args, size_t max_args)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(NDEBUG) BASE_EXPORT void SetSafeSPrintfSSizeMaxForTest(size_t max)"
  },
  {
    "label": "GetSafeSPrintfSSizeMaxForTest()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "GetSafeSPrintfSSizeMaxForTest()"
  },
  {
    "label": "SafeSNPrintf()",
    "kind": "Method",
    "detail": "Function (# endif } template<. . . Args> ssize_t)",
    "insertText": "SafeSNPrintf(char* buf, size_t N, const char* fmt, Args... args)"
  },
  {
    "label": "SafeSNPrintf()",
    "kind": "Method",
    "detail": "Function (const internal::Arg arg_array [ ] = { args . . . } ; return)",
    "insertText": "SafeSNPrintf(buf, N, fmt, arg_array, sizeof...(args))"
  },
  {
    "label": "SafeSPrintf()",
    "kind": "Method",
    "detail": "Function (} template<size_t N,. . . Args> ssize_t)",
    "insertText": "SafeSPrintf(char (&buf)[N], const char* fmt, Args... args)"
  },
  {
    "label": "SafeSNPrintf()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT ssize_t)",
    "insertText": "SafeSNPrintf(char* buf, size_t N, const char* fmt)"
  },
  {
    "label": "SafeSPrintf()",
    "kind": "Method",
    "detail": "Function (template<size_t N> ssize_t)",
    "insertText": "SafeSPrintf(char (&buf)[N], const char* fmt)"
  }
]