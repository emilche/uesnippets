[
  {
    "label": "FSyncPattern",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSyncPattern"
  },
  {
    "label": "FBlendSpaceUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendSpaceUtilities"
  },
  {
    "label": "FBlendSampleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSampleData"
  },
  {
    "label": "FBlendSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSample"
  },
  {
    "label": "IndexOf()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FSyncPattern { TArray<FName> MarkerNames ; int32)",
    "insertText": "IndexOf(const FName Name, const int32 StartIndex = 0)"
  },
  {
    "label": "DoOneMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoOneMatch(const TArray<FName>& TestMarkerNames, const int32 StartIndex)"
  },
  {
    "label": "DoesPatternMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPatternMatch(const TArray<FName>& TestMarkerNames)"
  },
  {
    "label": "GetHighestWeightSample()",
    "kind": "Method",
    "detail": "Function (} ; class FBlendSpaceUtilities { public : int32)",
    "insertText": "GetHighestWeightSample(const TArray<struct FBlendSampleData> &SampleDataList)"
  },
  {
    "label": "GetHighestWeightMarkerSyncSample()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHighestWeightMarkerSyncSample(const TArray<struct FBlendSampleData> &SampleDataList, const TArray<struct FBlendSample>& BlendSamples)"
  }
]