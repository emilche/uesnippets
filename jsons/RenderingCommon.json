[
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHIBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBuffer"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FRDGTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTexture"
  },
  {
    "label": "FSlateElementBatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateElementBatcher"
  },
  {
    "label": "FSlateInstanceBufferUpdate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInstanceBufferUpdate"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateRenderBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderBatch"
  },
  {
    "label": "FShaderParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderParams"
  },
  {
    "label": "FSlateVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateVertex"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FShortRect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShortRect"
  },
  {
    "label": "ISlateViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateViewport"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlateShaderResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateShaderResource"
  },
  {
    "label": "ICustomSlateElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICustomSlateElement"
  },
  {
    "label": "FDrawPassInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDrawPassInputs"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "ISlateUpdatableInstanceBufferRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateUpdatableInstanceBufferRenderProxy"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "ISlateUpdatableInstanceBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateUpdatableInstanceBuffer"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" Layout / SlateRect . h \" # include \" Layout / SlateRotatedRect . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Input / NavigationReply . h \" # include \" Input / PopupMethodReply . h \" # include \" PixelFormat . h \" # include \" Rendering / DrawElementCoreTypes . h \" # include \" Rendering / SlateRendererTypes . h \" # include \" SlateGlobals . h \" # include<type_traits> # include<utility> # include \" RenderingCommon . generated . h \" class FRHICommandListImmediate ; class FRHIBuffer ; class FRDGBuilder ; class FRDGTexture ; class FSlateElementBatcher ; class FSlateInstanceBufferUpdate ; class FWidgetStyle ; class SWidget ;)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Num Cached Element Lists\"), STAT_SlateNumCachedElementLists, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Num Cached Elements\"), STAT_SlateNumCachedElements, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"PreFill Buffers\"), STAT_SlatePreFullBufferTime, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# define UE_SLATE_VERIFY_PIXELSIZE UE_BUILD_DEBUG # define SLATE_USE_32BIT_INDICES ! PLATFORM_USES_GLES # if SLATE_USE_32BIT_INDICES typedef uint32 SlateIndex ; # else typedef uint16 SlateIndex ; # endif enum class ESlateDrawPrimitive : uint8 { None,LineList,TriangleList,} ; enum class ESlateShader : uint8 { Default = 0,Border = 1,GrayscaleFont = 2,ColorFont = 3,LineSegment = 4,Custom = 5,PostProcess = 6,RoundedBox = 7,SdfFont = 8,MsdfFont = 9,} ; enum class ESlateDrawEffect : uint8 { None = 0,NoBlending = 1<<0,PreMultipliedAlpha = 1<<1,NoGamma = 1<<2,InvertAlpha = 1<<3,NoPixelSnapping = 1<<4,DisabledEffect = 1<<5,IgnoreTextureAlpha = 1<<6,ReverseGamma = 1<<7 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESlateDrawEffect)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ESlateBatchDrawFlag : uint16 { None = 0,NoBlending = 1<<0,PreMultipliedAlpha = 1<<1,NoGamma = 1<<2,InvertAlpha = 1<<3,Wireframe = 1<<4,TileU = 1<<5,TileV = 1<<6,ReverseGamma = 1<<7,HDR = 1<<8 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESlateBatchDrawFlag)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (enum class ESlateLineJoinType : uint8 { Sharp = 0,Simple = 1,} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (NormalVision)",
    "insertText": "UMETA(DisplayName=\"Normal Vision\"), Deuteranope UMETA(DisplayName=\"Deuteranope (green weak/blind) (7% of males, 0.4% of females)\"), Protanope UMETA(DisplayName=\"Protanope (red weak/blind) (2% of males, 0.01% of females)\"), Tritanope UMETA(DisplayName=\"Tritanope (blue weak/blind) (0.0003% of males)\")"
  },
  {
    "label": "FShaderParams()",
    "kind": "Method",
    "detail": "Function (enum class ESlateVertexRounding : uint8 { Disabled,Enabled } ; enum class ESlateViewportDynamicRange : uint8 { SDR,HDR } ; class FSlateRenderBatch ; struct FShaderParams { FVector4f PixelParams ; FVector4f PixelParams2 ; FVector4f PixelParams3 ;)",
    "insertText": "FShaderParams() : PixelParams(0, 0, 0, 0) , PixelParams2(0, 0, 0, 0) , PixelParams3(0, 0, 0, 0)"
  },
  {
    "label": "FShaderParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShaderParams(const FVector4f& InPixelParams, const FVector4f& InPixelParams2 = FVector4f(0), const FVector4f& InPixelParams3 = FVector4f(0)) : PixelParams(InPixelParams) , PixelParams2(InPixelParams2) , PixelParams3(InPixelParams3)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FShaderParams& Other)"
  },
  {
    "label": "FSlateVertex()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSlateVertex { float TexCoords [ 4 ] ; FVector2f MaterialTexCoords ; FVector2f Position ; FColor Color ; FColor SecondaryColor ; uint16 PixelSize [ 2 ] ;)",
    "insertText": "FSlateVertex()"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} public : template<ESlateVertexRounding Rounding> FSlateVertex)",
    "insertText": "Make(const FSlateRenderTransform& RenderTransform, const FVector2f InLocalPosition, const FVector2f InTexCoord, const FVector2f InTexCoord2, const FColor InColor, const FColor SecondaryColor = FColor())"
  },
  {
    "label": "Rounding()",
    "kind": "Method",
    "detail": "Function (FSlateVertex Vertex ; Vertex . TexCoords [ 0 ] = InTexCoord . X ; Vertex . TexCoords [ 1 ] = InTexCoord . Y ; Vertex . TexCoords [ 2 ] = InTexCoord2 . X ; Vertex . TexCoords [ 3 ] = InTexCoord2 . Y ; Vertex . InitCommon<)",
    "insertText": "Rounding(RenderTransform, InLocalPosition, InColor, SecondaryColor)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (FSlateVertex Vertex ; Vertex . TexCoords [ 0 ] = InTexCoords . X ; Vertex . TexCoords [ 1 ] = InTexCoords . Y ; Vertex . TexCoords [ 2 ] = InTexCoords . Z ; Vertex . TexCoords [ 3 ] = InTexCoords . W ; Vertex . MaterialTexCoords =)",
    "insertText": "FVector2f(InLocalPosition.X / InLocalSize.X, InLocalPosition.Y / InLocalSize.Y)"
  },
  {
    "label": "RoundToInt()",
    "kind": "Method",
    "detail": "Function (const int32 PixelSizeX =)",
    "insertText": "RoundToInt(InLocalSize.X * Scale)"
  },
  {
    "label": "RoundToInt()",
    "kind": "Method",
    "detail": "Function (const int32 PixelSizeY =)",
    "insertText": "RoundToInt(InLocalSize.Y * Scale)"
  },
  {
    "label": "PixelSize()",
    "kind": "Method",
    "detail": "Function (Vertex .)",
    "insertText": "PixelSize(uint16)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (# if UE_SLATE_VERIFY_PIXELSIZE)",
    "insertText": "ensureMsgf((int32)Vertex.PixelSize[0] == PixelSizeX, TEXT(\"Conversion of PixelSizeX is bigger than 16. Cast:%d, int16:%d, int32:%d\") , (int32)Vertex.PixelSize[0], Vertex.PixelSize[0], PixelSizeX)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (# endif return Vertex ; } FSlateVertex)",
    "insertText": "Make(const FSlateRenderTransform& RenderTransform, const FVector2f InLocalPosition, const FVector2f InTexCoord, const FVector2f InTexCoord2, const FColor InColor, const FColor SecondaryColor = FColor(), const ESlateVertexRounding InRounding = ESlateVertexRounding::Disabled)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} FSlateVertex)",
    "insertText": "Make(const FSlateRenderTransform& RenderTransform, const FVector2f InLocalPosition, const FVector2f InTexCoord, const FColor& InColor, const FColor SecondaryColor = FColor(), const ESlateVertexRounding InRounding = ESlateVertexRounding::Disabled)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} FSlateVertex)",
    "insertText": "Make(const FSlateRenderTransform& RenderTransform, const FVector2f InLocalPosition, const FVector4f InTexCoords, const FVector2f InMaterialTexCoords, const FColor InColor, const FColor SecondaryColor = FColor(), const ESlateVertexRounding InRounding = ESlateVertexRounding::Disabled)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} FSlateVertex)",
    "insertText": "Make(const FSlateRenderTransform& RenderTransform, const FVector2f InLocalPosition, const FVector2f InLocalSize, float Scale, const FVector4f InTexCoords, const FColor InColor, const FColor SecondaryColor = FColor(), const ESlateVertexRounding InRounding = ESlateVertexRounding::Disabled)"
  },
  {
    "label": "SetTexCoords()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTexCoords(const FVector4f InTexCoords)"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (TexCoords [ 0 ] = InTexCoords . X ; TexCoords [ 1 ] = InTexCoords . Y ; TexCoords [ 2 ] = InTexCoords . Z ; TexCoords [ 3 ] = InTexCoords . W ; } void)",
    "insertText": "SetPosition(const FVector2f InPosition)"
  },
  {
    "label": "InitCommon()",
    "kind": "Method",
    "detail": "Function (Position = InPosition ; } private : template<ESlateVertexRounding Rounding> void)",
    "insertText": "InitCommon(const FSlateRenderTransform& RenderTransform, const FVector2f InLocalPosition, const FColor InColor, const FColor InSecondaryColor)"
  },
  {
    "label": "TransformPoint()",
    "kind": "Method",
    "detail": "Function (Position =)",
    "insertText": "TransformPoint(RenderTransform, InLocalPosition)"
  },
  {
    "label": "RoundToFloat()",
    "kind": "Method",
    "detail": "Function (Position . X =)",
    "insertText": "RoundToFloat(Position.X)"
  },
  {
    "label": "RoundToFloat()",
    "kind": "Method",
    "detail": "Function (Position . Y =)",
    "insertText": "RoundToFloat(Position.Y)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} Color = InColor ; SecondaryColor = InSecondaryColor ; } } ; template<> struct TIsPODType<FSlateVertex> { enum { Value = true } ; } ;)",
    "insertText": "static_assert(std::is_trivially_destructible_v<FSlateVertex>, \"FSlateVertex should be trivially destructible\")"
  },
  {
    "label": "FShortRect()",
    "kind": "Method",
    "detail": "Function (struct FShortRect {)",
    "insertText": "FShortRect() : Left(0) , Top(0) , Right(0) , Bottom(0)"
  },
  {
    "label": "FShortRect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShortRect(uint16 InLeft, uint16 InTop, uint16 InRight, uint16 InBottom) : Left(InLeft) , Top(InTop) , Right(InRight) , Bottom(InBottom)"
  },
  {
    "label": "FShortRect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShortRect(const FSlateRect& Rect) : Left((uint16)FMath::Clamp(Rect.Left, 0.0f, 65535.0f)) , Top((uint16)FMath::Clamp(Rect.Top, 0.0f, 65535.0f)) , Right((uint16)FMath::Clamp(Rect.Right, 0.0f, 65535.0f)) , Bottom((uint16)FMath::Clamp(Rect.Bottom, 0.0f, 65535.0f))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FShortRect& RHS)"
  },
  {
    "label": "DoesIntersect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesIntersect(const FShortRect& B)"
  },
  {
    "label": "DoesIntersect()",
    "kind": "Method",
    "detail": "Function (const bool bDoNotOverlap = B . Right<Left | | Right<B . Left | | B . Bottom<Top | | Bottom<B . Top ; return ! bDoNotOverlap ; } bool)",
    "insertText": "DoesIntersect(const FSlateRect& B)"
  },
  {
    "label": "GetTopLeft()",
    "kind": "Method",
    "detail": "Function (const bool bDoNotOverlap = B . Right<Left | | Right<B . Left | | B . Bottom<Top | | Bottom<B . Top ; return ! bDoNotOverlap ; } FVector2f)",
    "insertText": "GetTopLeft()"
  },
  {
    "label": "GetBottomRight()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetBottomRight()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} uint16 Left ; uint16 Top ; uint16 Right ; uint16 Bottom ; } ; template<> struct TIsPODType<FShortRect> { enum { Value = true } ; } ;)",
    "insertText": "static_assert(std::is_trivially_destructible_v<FShortRect>, \"FShortRect should be trivially destructible\")"
  },
  {
    "label": "MakeTupleIndiciesInner()",
    "kind": "Method",
    "detail": "Function (namespace UE::Slate { template<IndexType,IndexType . . . Indices> auto)",
    "insertText": "MakeTupleIndiciesInner(std::integer_sequence<IndexType, Indices...>)"
  },
  {
    "label": "MakeTupleIndicies()",
    "kind": "Method",
    "detail": "Function (} ; template<IndexType,std::size_t Num,Indices = std::make_integer_sequence<IndexType,Num>> auto)",
    "insertText": "MakeTupleIndicies()"
  },
  {
    "label": "ISlateViewport()",
    "kind": "Method",
    "detail": "Function (} ; } ; # if STATS typedef TArray<FSlateVertex,FSlateStatTrackingMemoryAllocator<FRenderingBufferStatTracker>> FSlateVertexArray ; typedef TArray<SlateIndex,FSlateStatTrackingMemoryAllocator<FRenderingBufferStatTracker>> FSlateIndexArray ; # else typedef TArray<FSlateVertex> FSlateVertexArray ; typedef TArray<SlateIndex> FSlateIndexArray ; # endif class ISlateViewport { public : ~)",
    "insertText": "ISlateViewport()"
  },
  {
    "label": "OnDrawViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDrawViewport(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, class FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetViewportRenderTargetTexture()",
    "kind": "Method",
    "detail": "Function (class FSlateShaderResource*)",
    "insertText": "GetViewportRenderTargetTexture()"
  },
  {
    "label": "GetSceneTargetFormat()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "GetSceneTargetFormat()"
  },
  {
    "label": "RequiresVsync()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresVsync()"
  },
  {
    "label": "AllowScaling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowScaling()"
  },
  {
    "label": "OnMapCursor()",
    "kind": "Method",
    "detail": "Function (} TOptional<TSharedRef<SWidget>>)",
    "insertText": "OnMapCursor(const FCursorReply& CursorReply)"
  },
  {
    "label": "IsSoftwareCursorVisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSoftwareCursorVisible()"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnAnalogValueChanged()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnAnalogValueChanged(const FGeometry& MyGeometry, const FAnalogInputEvent& InAnalogInputEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyChar(const FGeometry& MyGeometry, const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnFocusReceived(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTouchMoved(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchForceChanged()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTouchForceChanged(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchFirstMove()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTouchFirstMove(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTouchGesture(const FGeometry& MyGeometry, const FPointerEvent& InGestureEvent)"
  },
  {
    "label": "OnMotionDetected()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMotionDetected(const FGeometry& MyGeometry, const FMotionEvent& InMotionEvent)"
  },
  {
    "label": "OnQueryShowFocus()",
    "kind": "Method",
    "detail": "Function (} TOptional<bool>)",
    "insertText": "OnQueryShowFocus(const EFocusCause InFocusCause)"
  },
  {
    "label": "OnFinishedPointerInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFinishedPointerInput()"
  },
  {
    "label": "OnQueryPopupMethod()",
    "kind": "Method",
    "detail": "Function (} FPopupMethodReply)",
    "insertText": "OnQueryPopupMethod()"
  },
  {
    "label": "OnNavigation()",
    "kind": "Method",
    "detail": "Function (} FNavigationReply)",
    "insertText": "OnNavigation(const FGeometry& MyGeometry, const FNavigationEvent& InNavigationEvent)"
  },
  {
    "label": "HandleNavigation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleNavigation(const uint32 InUserIndex, TSharedPtr<SWidget> InDestination)"
  },
  {
    "label": "OnRequestWindowClose()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnRequestWindowClose()"
  },
  {
    "label": "OnViewportClosed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnViewportClosed()"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<SWidget>)",
    "insertText": "GetWidget()"
  },
  {
    "label": "OnViewportDeactivated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnViewportDeactivated(const FWindowActivateEvent& InActivateEvent)"
  },
  {
    "label": "ICustomSlateElement()",
    "kind": "Method",
    "detail": "Function (} } ; class ICustomSlateElement { public : ~)",
    "insertText": "ICustomSlateElement()"
  },
  {
    "label": "PostCustomElementAdded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostCustomElementAdded(FSlateElementBatcher& ElementBatcher)"
  },
  {
    "label": "Draw_RenderThread()",
    "kind": "Method",
    "detail": "Function (} struct FDrawPassInputs { FRDGTexture* OutputTexture = nullptr ; FIntRect SceneViewRect ; FMatrix44f ElementsMatrix ; FVector2f ElementsOffset ; EDisplayColorGamut HDRDisplayColorGamut = EDisplayColorGamut::sRGB_D65 ; ESlatePostRT UsedSlatePostBuffers = ESlatePostRT::None ; bool bOutputIsHDRDisplay = false ; bool bWireFrame = false ; } ; void)",
    "insertText": "Draw_RenderThread(FRDGBuilder& GraphBuilder, const FDrawPassInputs& Inputs)"
  },
  {
    "label": "GetRHI()",
    "kind": "Method",
    "detail": "Function (} ; public : FRHIBuffer*)",
    "insertText": "GetRHI()"
  },
  {
    "label": "ISlateUpdatableInstanceBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TArray<FVector4f> FSlateInstanceBufferData ; class ISlateUpdatableInstanceBuffer { public : ~)",
    "insertText": "ISlateUpdatableInstanceBuffer()"
  },
  {
    "label": "GetNumInstances()",
    "kind": "Method",
    "detail": "Function (} ; class FSlateInstanceBufferUpdate ; uint32)",
    "insertText": "GetNumInstances()"
  },
  {
    "label": "GetRenderProxy()",
    "kind": "Method",
    "detail": "Function (ISlateUpdatableInstanceBufferRenderProxy*)",
    "insertText": "GetRenderProxy()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(FSlateInstanceBufferData& Data)"
  }
]