[
  {
    "label": "FProfilerSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerSample"
  },
  {
    "label": "EProfilerSampleTypes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EProfilerSampleTypes"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "IDataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDataProvider"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IHistogramDataSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHistogramDataSource"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" Containers / ChunkedArray . h \" # include \" Stats / Stats . h \" typedef TChunkedArray<class FProfilerSample,1 0 2 4* 6 4> FProfilerSampleArray ; typedef TArray<uint32> FIndicesArray ; struct EProfilerSampleTypes { enum Type : uint32 { HierarchicalTime = 0,NumberInt = 1,NumberFloat = 2,Memory = 3,InvalidOrMax = 4,Shift = 0,NumBits = 3,)",
    "insertText": "Num(1 << NumBits)"
  },
  {
    "label": "ToName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToName(EProfilerSampleTypes::Type ProfilerSampleType)"
  },
  {
    "label": "ToDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToDescription(EProfilerSampleTypes::Type ProfilerSampleType)"
  },
  {
    "label": "SizeOf()",
    "kind": "Method",
    "detail": "Function (protected : FIndicesArray _ChildrenIndices ; int64 StatData ; const uint32 _ThreadID ; uint32 CombinedMeta ; public : SIZE_T)",
    "insertText": "SizeOf()"
  },
  {
    "label": "ThreadID()",
    "kind": "Method",
    "detail": "Function (} const uint32)",
    "insertText": "ThreadID()"
  },
  {
    "label": "StatID()",
    "kind": "Method",
    "detail": "Function (} const uint32)",
    "insertText": "StatID()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (} const EProfilerSampleTypes::Type)",
    "insertText": "Type()"
  },
  {
    "label": "SetMeta()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetMeta(const uint32 StatID, const uint32 GroupID, const EProfilerSampleTypes::Type SampleType)"
  },
  {
    "label": "CombinedMeta()",
    "kind": "Method",
    "detail": "Function (CombinedMeta = 0 ;)",
    "insertText": "CombinedMeta(StatID & (uint32)EStatID::Mask) << (uint32)"
  },
  {
    "label": "CombinedMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombinedMeta(GroupID & (uint32)EGroupID::Mask) << (uint32)"
  },
  {
    "label": "CombinedMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombinedMeta(SampleType & (uint32)EProfilerSampleTypes::Mask) << (uint32)"
  },
  {
    "label": "GetDurationCycles()",
    "kind": "Method",
    "detail": "Function (} const uint32)",
    "insertText": "GetDurationCycles()"
  },
  {
    "label": "GetCallCount()",
    "kind": "Method",
    "detail": "Function (} const uint32)",
    "insertText": "GetCallCount()"
  },
  {
    "label": "GetDoubleValue()",
    "kind": "Method",
    "detail": "Function (} const double)",
    "insertText": "GetDoubleValue()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "Value(double*)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (_ChildrenIndices .)",
    "insertText": "Add(ChildIndex)"
  },
  {
    "label": "FixupChildrenOrdering()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FixupChildrenOrdering(const TMap<uint32,uint32>& ChildrenOrderingIndices)"
  },
  {
    "label": "InvalidIndex()",
    "kind": "Method",
    "detail": "Function (public : const uint32)",
    "insertText": "InvalidIndex(uint32)(-1)"
  },
  {
    "label": "FProfilerSample()",
    "kind": "Method",
    "detail": "Function (const FProfilerSample Invalid ; public :)",
    "insertText": "FProfilerSample(const uint32 InThreadID, const uint32 InGroupID, const uint32 InStatID, const uint32 InDurationCycles, const uint32 InCallsPerFrame ) : _ThreadID( InThreadID)"
  },
  {
    "label": "SetMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeta(InStatID, InGroupID, EProfilerSampleTypes::HierarchicalTime)"
  },
  {
    "label": "ToPackedCallCountDuration()",
    "kind": "Method",
    "detail": "Function (StatData =)",
    "insertText": "ToPackedCallCountDuration(InCallsPerFrame, InDurationCycles)"
  },
  {
    "label": "FProfilerSample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProfilerSample(const uint32 InGroupID, const uint32 InStatID, const double InCounter, const EProfilerSampleTypes::Type InProfilerSampleType ) : _ThreadID( 0)"
  },
  {
    "label": "SetMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeta(InStatID, InGroupID, InProfilerSampleType)"
  },
  {
    "label": "FProfilerSample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProfilerSample(const FProfilerSample& Other ) : _ChildrenIndices( Other._ChildrenIndices ) , StatData(Other.StatData) , _ThreadID( Other._ThreadID ) , CombinedMeta( Other.CombinedMeta)"
  },
  {
    "label": "FProfilerSample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProfilerSample() : StatData(0) , _ThreadID( 0)"
  },
  {
    "label": "SetMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeta(0, 0, EProfilerSampleTypes::InvalidOrMax)"
  },
  {
    "label": "SetDurationCycles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDurationCycles(const uint32 InDurationCycles)"
  },
  {
    "label": "ToPackedCallCountDuration()",
    "kind": "Method",
    "detail": "Function (StatData =)",
    "insertText": "ToPackedCallCountDuration(GetCallCount(), InDurationCycles)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsIndexValid()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "IsIndexValid(const uint32 IndexToCheck)"
  },
  {
    "label": "GetTotalCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTotalCount()"
  }
]