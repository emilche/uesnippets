[
  {
    "label": "DispatcherEvent",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DispatcherEvent"
  },
  {
    "label": "Signaler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Signaler"
  },
  {
    "label": "Dispatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Dispatcher"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "PhysicalSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PhysicalSocket"
  },
  {
    "label": "sockaddr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sockaddr"
  },
  {
    "label": "SocketDispatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SocketDispatcher"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_PHYSICAL_SOCKET_SERVER_H_ # define RTC_BASE_PHYSICAL_SOCKET_SERVER_H_ # include \" api / units / time_delta . h \" # if)",
    "insertText": "defined(WEBRTC_POSIX) && defined(WEBRTC_LINUX) #include <sys/epoll.h> #define WEBRTC_USE_EPOLL 1 #endif #include <array> #include <memory> #include <unordered_map> #include <vector> #include \"rtc_base/async_resolver.h\" #include \"rtc_base/async_resolver_interface.h\" #include \"rtc_base/deprecated/recursive_critical_section.h\" #include \"rtc_base/socket_server.h\" #include \"rtc_base/synchronization/mutex.h\" #include \"rtc_base/system/rtc_export.h\" #include \"rtc_base/thread_annotations.h\" #if defined(WEBRTC_POSIX)"
  },
  {
    "label": "Dispatcher()",
    "kind": "Method",
    "detail": "Function (# endif namespace rtc { enum DispatcherEvent { DE_READ = 0 x0001,DE_WRITE = 0 x0002,DE_CONNECT = 0 x0004,DE_CLOSE = 0 x0008,DE_ACCEPT = 0 x0010,} ; class Signaler ; class Dispatcher { public : ~)",
    "insertText": "Dispatcher()"
  },
  {
    "label": "GetRequestedEvents()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetRequestedEvents()"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEvent(uint32_t ff, int err)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_WIN) virtual WSAEVENT GetWSAEvent()"
  },
  {
    "label": "GetSocket()",
    "kind": "Method",
    "detail": "Function (SOCKET)",
    "insertText": "GetSocket()"
  },
  {
    "label": "CheckSignalClose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckSignalClose()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(WEBRTC_POSIX) virtual int GetDescriptor()"
  },
  {
    "label": "IsDescriptorClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDescriptorClosed()"
  },
  {
    "label": "PhysicalSocketServer()",
    "kind": "Method",
    "detail": "Function (# endif } ; class RTC_EXPORT PhysicalSocketServer : public SocketServer { public :)",
    "insertText": "PhysicalSocketServer()"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (Socket*)",
    "insertText": "CreateSocket(int family, int type)"
  },
  {
    "label": "WrapSocket()",
    "kind": "Method",
    "detail": "Function (Socket*)",
    "insertText": "WrapSocket(SOCKET s)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Wait(webrtc::TimeDelta max_wait_duration, bool process_io)"
  },
  {
    "label": "WakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeUp()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(Dispatcher* dispatcher)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(Dispatcher* dispatcher)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(Dispatcher* dispatcher)"
  },
  {
    "label": "ToCmsWait()",
    "kind": "Method",
    "detail": "Function (private : size_t kNumEpollEvents = 1 2 8 ; int kForeverMs = - 1 ; int)",
    "insertText": "ToCmsWait(webrtc::TimeDelta max_wait_duration)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_POSIX) bool WaitSelect(int cmsWait, bool process_io)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(WEBRTC_USE_EPOLL) void AddEpoll(Dispatcher* dispatcher, uint64_t key)"
  },
  {
    "label": "RemoveEpoll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEpoll(Dispatcher* dispatcher)"
  },
  {
    "label": "UpdateEpoll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEpoll(Dispatcher* dispatcher, uint64_t key)"
  },
  {
    "label": "WaitEpoll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitEpoll(int cmsWait)"
  },
  {
    "label": "WaitPoll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitPoll(int cmsWait, Dispatcher* dispatcher)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::array<epoll_event,kNumEpollEvents> epoll_events_ ; const int epoll_fd_ = INVALID_SOCKET ; # endif uint64_t next_dispatcher_key_)",
    "insertText": "RTC_GUARDED_BY(crit_)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (std::vector<uint64_t> current_dispatcher_keys_ ; Signaler* signal_wakeup_ ; RecursiveCriticalSection crit_ ; # if)",
    "insertText": "defined(WEBRTC_WIN)"
  },
  {
    "label": "PhysicalSocket()",
    "kind": "Method",
    "detail": "Function (# endif bool fWait_ ; bool waiting_ = false ; } ; class PhysicalSocket : public Socket,public sigslot::has_slots<> { public :)",
    "insertText": "PhysicalSocket(PhysicalSocketServer* ss, SOCKET s = INVALID_SOCKET)"
  },
  {
    "label": "PhysicalSocket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PhysicalSocket()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(int family, int type)"
  },
  {
    "label": "GetLocalAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetLocalAddress()"
  },
  {
    "label": "GetRemoteAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetRemoteAddress()"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Bind(const SocketAddress& bind_addr)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Connect(const SocketAddress& addr)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(int error)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (ConnState)",
    "insertText": "GetState()"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetOption(Option opt, int* value)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(Option opt, int value)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const void* pv, size_t cb)"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTo(const void* buffer, size_t length, const SocketAddress& addr)"
  },
  {
    "label": "Recv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Recv(void* buffer, size_t length, int64_t* timestamp)"
  },
  {
    "label": "RecvFrom()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RecvFrom(void* buffer, size_t length, SocketAddress* out_addr, int64_t* timestamp)"
  },
  {
    "label": "Listen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Listen(int backlog)"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (Socket*)",
    "insertText": "Accept(SocketAddress* out_addr)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Close()"
  },
  {
    "label": "socketserver()",
    "kind": "Method",
    "detail": "Function (SocketServer*)",
    "insertText": "socketserver()"
  },
  {
    "label": "DoAccept()",
    "kind": "Method",
    "detail": "Function (SOCKET)",
    "insertText": "DoAccept(SOCKET socket, sockaddr* addr, socklen_t* addrlen)"
  },
  {
    "label": "DoSend()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DoSend(SOCKET socket, const char* buf, int len, int flags)"
  },
  {
    "label": "DoSendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DoSendTo(SOCKET socket, const char* buf, int len, int flags, const struct sockaddr* dest_addr, socklen_t addrlen)"
  },
  {
    "label": "DoReadFromSocket()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DoReadFromSocket(void* buffer, size_t length, SocketAddress* out_addr, int64_t* timestamp)"
  },
  {
    "label": "OnResolveResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResolveResult(AsyncResolverInterface* resolver)"
  },
  {
    "label": "UpdateLastError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLastError()"
  },
  {
    "label": "MaybeRemapSendError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeRemapSendError()"
  },
  {
    "label": "enabled_events()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "enabled_events()"
  },
  {
    "label": "EnableEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableEvents(uint8_t events)"
  },
  {
    "label": "DisableEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableEvents(uint8_t events)"
  },
  {
    "label": "TranslateOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "TranslateOption(Option opt, int* slevel, int* sopt)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (PhysicalSocketServer* ss_ ; SOCKET s_ ; bool udp_ ; int family_ = 0 ; webrtc::Mutex mutex_ ; int error_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (ConnState state_ ; AsyncResolver* resolver_ ; # if !)",
    "insertText": "defined(NDEBUG)"
  },
  {
    "label": "SocketDispatcher()",
    "kind": "Method",
    "detail": "Function (# endif private : const bool read_scm_timestamp_experiment_ ; uint8_t enabled_events_ = 0 ; } ; class SocketDispatcher : public Dispatcher,public PhysicalSocket { public :)",
    "insertText": "SocketDispatcher(PhysicalSocketServer* ss)"
  },
  {
    "label": "SocketDispatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SocketDispatcher(SOCKET s, PhysicalSocketServer* ss)"
  },
  {
    "label": "SocketDispatcher()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SocketDispatcher()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(int type)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_WIN) WSAEVENT GetWSAEvent()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(WEBRTC_POSIX) int GetDescriptor()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_USE_EPOLL) protected: void StartBatchedEventUpdates()"
  },
  {
    "label": "FinishBatchedEventUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishBatchedEventUpdates()"
  },
  {
    "label": "SetEnabledEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledEvents(uint8_t events)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (int id_ ; bool signal_close_ ; int signal_err_ ; # endif # if)",
    "insertText": "defined(WEBRTC_USE_EPOLL) void MaybeUpdateDispatcher(uint8_t old_events)"
  }
]