[
  {
    "label": "FSkeletalMeshLODModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODModel"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FSkelMeshSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshSection"
  },
  {
    "label": "FSkeletalMeshLODGroupSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshLODGroupSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSectionReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionReference"
  },
  {
    "label": "FMorphTargetImportedSourceFileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMorphTargetImportedSourceFileInfo"
  },
  {
    "label": "FSkeletalMeshLODInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshLODInfo"
  },
  {
    "label": "FThreadSafeBuildGUID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadSafeBuildGUID"
  },
  {
    "label": "FSkeletalMaterial",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMaterial"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoneContainer . h \" # include \" Components . h \" # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" UObject / PerPlatformProperties . h \" # include \" SkeletalMeshReductionSettings . h \" # include \" Animation / SkeletalMeshVertexAttribute . h \" # include \" SkinnedAssetCommon . generated . h \" class FSkeletalMeshLODModel ; class UAnimSequence ; class UMaterialInterface ; struct FSkelMeshSection ; struct FSkeletalMeshLODGroupSettings ;)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Cloth Total\"), STAT_ClothTotalTime, STATGROUP_Physics)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Cloth Writeback\"), STAT_ClothWriteback, STATGROUP_Physics)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Auto = 0,Disabled =)",
    "insertText": "uint8(-1)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Exclusive = 0,Inclusive = 1,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = SectionReference)"
  },
  {
    "label": "FSectionReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSectionReference() : SectionIndex(INDEX_NONE)"
  },
  {
    "label": "FSectionReference()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSectionReference(const int32& InSectionIndex) : SectionIndex(InSectionIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSectionReference& Other)"
  },
  {
    "label": "GetMeshLodSection()",
    "kind": "Method",
    "detail": "Function (const FSkelMeshSection*)",
    "insertText": "GetMeshLodSection(const FSkeletalMeshLODModel& LodModel)"
  },
  {
    "label": "GetMeshLodSectionIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMeshLodSectionIndex(const FSkeletalMeshLODModel& LodModel)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<SectionIndex ; return true ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FSectionReference& B)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (B .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() ENGINE_API const FString& GetSourceFilename()"
  },
  {
    "label": "SetSourceFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceFilename(const FString& Filename)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FMorphTargetImportedSourceFileInfo& MorphTargetImportedSourceFileInfo)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=SkeletalMeshLODInfo)"
  },
  {
    "label": "FThreadSafeBuildGUID()",
    "kind": "Method",
    "detail": "Function (struct FThreadSafeBuildGUID { private : FGuid BuildGuid ; UE::FMutex Mutex ; public :)",
    "insertText": "FThreadSafeBuildGUID()"
  },
  {
    "label": "FThreadSafeBuildGUID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FThreadSafeBuildGUID(const FGuid& InGuid) : BuildGuid(InGuid)"
  },
  {
    "label": "FThreadSafeBuildGUID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FThreadSafeBuildGUID(const FThreadSafeBuildGUID& Other)"
  },
  {
    "label": "OtherLock()",
    "kind": "Method",
    "detail": "Function (UE::TUniqueLock)",
    "insertText": "OtherLock(Other.Mutex)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (UE::TUniqueLock)",
    "insertText": "Lock(Mutex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BuildGuid = Other . BuildGuid ; } FThreadSafeBuildGUID&)",
    "insertText": "operator(const FThreadSafeBuildGUID& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BuildGuid = Other . BuildGuid ; } return* this ; } bool)",
    "insertText": "operator(const FGuid& Other)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (BuildGuid = Other ; } void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FGuid()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString(EGuidFormats Format = EGuidFormats::Digits)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (FString Out ; BuildGuid .)",
    "insertText": "AppendString(Out, Format)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FThreadSafeBuildGUID&)",
    "insertText": "operator(FThreadSafeBuildGUID&&)"
  },
  {
    "label": "ComputeDeriveDataCacheKey()",
    "kind": "Method",
    "detail": "Function (} ; FThreadSafeBuildGUID BuildGUID ; FGuid)",
    "insertText": "ComputeDeriveDataCacheKey(const FSkeletalMeshLODGroupSettings* SkeletalMeshLODGroupSettings)"
  },
  {
    "label": "FSkeletalMeshLODInfo()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FSkeletalMeshLODInfo() : ScreenSize(1.0) , LODHysteresis(0.0f) , WeightOfPrioritization(1.f) , BakePose(nullptr) , BakePoseOverride(nullptr) , bHasBeenSimplified(false) , bHasPerLODVertexColors(false) , bAllowCPUAccess(false) , bBuildHalfEdgeBuffers(false) , bAllowMeshDeformer(true) , bSupportUniformlyDistributedSampling(false) #if WITH_EDITORONLY_DATA , bImportWithBaseMesh(false)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# endif } } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FSkeletalMaterial() : MaterialInterface(nullptr) , MaterialSlotName(NAME_None) #if WITH_EDITORONLY_DATA , bEnableShadowCasting_DEPRECATED(true) , bRecomputeTangent_DEPRECATED(false) , ImportedMaterialSlotName(NAME_None)"
  },
  {
    "label": "FSkeletalMaterial()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSkeletalMaterial(UMaterialInterface* InMaterialInterface, FName InMaterialSlotName, FName InImportedMaterialSlotName = NAME_None) : MaterialInterface( InMaterialInterface ) , MaterialSlotName(InMaterialSlotName) #if WITH_EDITORONLY_DATA , bEnableShadowCasting_DEPRECATED(true) , bRecomputeTangent_DEPRECATED(false) , ImportedMaterialSlotName(InImportedMaterialSlotName)"
  },
  {
    "label": "FSkeletalMaterial()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSkeletalMaterial(UMaterialInterface* InMaterialInterface , bool bInEnableShadowCasting = true , bool bInRecomputeTangent = false , FName InMaterialSlotName = NAME_None , FName InImportedMaterialSlotName = NAME_None) : MaterialInterface( InMaterialInterface ) , MaterialSlotName(InMaterialSlotName) #if WITH_EDITORONLY_DATA , bEnableShadowCasting_DEPRECATED(bInEnableShadowCasting) , bRecomputeTangent_DEPRECATED(bInRecomputeTangent) , ImportedMaterialSlotName(InImportedMaterialSlotName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FSkeletalMaterial& Elem)"
  },
  {
    "label": "DeclareCustomVersions()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DeclareCustomVersions(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "operator(const FSkeletalMaterial& LHS, const FSkeletalMaterial& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSkeletalMaterial& LHS, const UMaterialInterface& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const UMaterialInterface& LHS, const FSkeletalMaterial& RHS)"
  }
]