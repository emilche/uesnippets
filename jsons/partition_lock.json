[
  {
    "label": "PA_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_LOCKABLE"
  },
  {
    "label": "PA_SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_SCOPED_LOCKABLE"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_LOCK_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_LOCK_H_ # include<atomic> # include<type_traits> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / immediate_crash . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / thread_annotations . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / threading / platform_thread . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / spinning_mutex . h \" # include \" build / build_config . h \" namespace partition_alloc::internal { class PA_LOCKABLE Lock { public :)",
    "insertText": "Lock()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Acquire() PA_EXCLUSIVE_LOCK_FUNCTION()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) base::PlatformThreadRef current_thread = base::PlatformThread::CurrentRef()"
  },
  {
    "label": "PA_IMMEDIATE_CRASH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_IMMEDIATE_CRASH()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (} lock_ .)",
    "insertText": "Acquire()"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} owning_thread_ref_ .)",
    "insertText": "store(current_thread, std::memory_order_release)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "Release() PA_UNLOCK_FUNCTION()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) owning_thread_ref_.store(base::PlatformThreadRef(), std::memory_order_release)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (# endif lock_ .)",
    "insertText": "Release()"
  },
  {
    "label": "AssertAcquired()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssertAcquired() const PA_ASSERT_EXCLUSIVE_LOCK()"
  },
  {
    "label": "AssertAcquired()",
    "kind": "Method",
    "detail": "Function (lock_ .)",
    "insertText": "AssertAcquired()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) PA_DCHECK(owning_thread_ref_.load(std ::memory_order_acquire) == base::PlatformThread::CurrentRef())"
  },
  {
    "label": "Reinit()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "Reinit() PA_UNLOCK_FUNCTION()"
  },
  {
    "label": "Reinit()",
    "kind": "Method",
    "detail": "Function (# endif lock_ .)",
    "insertText": "Reinit()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} private : SpinningMutex lock_ ; # if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) std::atomic<base::PlatformThreadRef> owning_thread_ref_ = base::PlatformThreadRef()"
  },
  {
    "label": "ScopedGuard()",
    "kind": "Method",
    "detail": "Function (# endif } ; class PA_SCOPED_LOCKABLE ScopedGuard { public :)",
    "insertText": "ScopedGuard(Lock& lock) PA_EXCLUSIVE_LOCK_FUNCTION(lock) : lock_(lock)"
  },
  {
    "label": "ScopedGuard()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedGuard() PA_UNLOCK_FUNCTION()"
  },
  {
    "label": "ScopedUnlockGuard()",
    "kind": "Method",
    "detail": "Function (} private : Lock& lock_ ; } ; class PA_SCOPED_LOCKABLE ScopedUnlockGuard { public :)",
    "insertText": "ScopedUnlockGuard(Lock& lock) PA_UNLOCK_FUNCTION(lock) : lock_(lock)"
  },
  {
    "label": "ScopedUnlockGuard()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedUnlockGuard() PA_EXCLUSIVE_LOCK_FUNCTION()"
  }
]