[
  {
    "label": "FMovieSceneDoubleChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneDoubleChannel"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "UMovieScene3DTransformTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene3DTransformTrack"
  },
  {
    "label": "UMovieScene3DTransformSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene3DTransformSection"
  },
  {
    "label": "UMovieScene3DAttachSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene3DAttachSection"
  },
  {
    "label": "ITransformEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ITransformEvaluator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "F3DAttachTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F3DAttachTrackEditor"
  },
  {
    "label": "F3DAttachTrackEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Templates / SubclassOf . h \" # include \" MovieSceneTrack . h \" # include \" ISequencerSection . h \" # include \" ISequencer . h \" # include \" ISequencerTrackEditor . h \" # include \" TrackEditors / ActorPickerTrackEditor . h \" # include \" Containers / Union . h \" # include \" Containers / Map . h \" # include \" Templates / Function . h \" # include \" EntitySystem / Interrogation / MovieSceneInterrogationLinker . h \" struct FMovieSceneDoubleChannel ; class AActor ; class FMenuBuilder ; class USceneComponent ; class UMovieScene3DTransformTrack ; class UMovieScene3DTransformSection ; class UMovieScene3DAttachSection ; struct ITransformEvaluator ; enum class ETransformPreserveType { CurrentKey,AllKeys,Bake,None } ; class F3DAttachTrackEditor : public FActorPickerTrackEditor { public :)",
    "insertText": "F3DAttachTrackEditor(TSharedRef<ISequencer> InSequencer)"
  },
  {
    "label": "F3DAttachTrackEditor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "F3DAttachTrackEditor()"
  },
  {
    "label": "CreateTrackEditor()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerTrackEditor>)",
    "insertText": "CreateTrackEditor(TSharedRef<ISequencer> OwningSequencer)"
  },
  {
    "label": "BuildObjectBindingTrackMenu()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BuildObjectBindingTrackMenu(FMenuBuilder& MenuBuilder, const TArray<FGuid>& ObjectBindings, const UClass* ObjectClass)"
  },
  {
    "label": "MakeSectionInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerSection>)",
    "insertText": "MakeSectionInterface(UMovieSceneSection& SectionObject, UMovieSceneTrack& Track, FGuid ObjectBinding)"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsType(TSubclassOf<UMovieSceneTrack> Type)"
  },
  {
    "label": "SupportsSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSequence(UMovieSceneSequence* InSequence)"
  },
  {
    "label": "IsActorPickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorPickable(const AActor* const ParentActor, FGuid ObjectBinding, UMovieSceneSection* InSection)"
  },
  {
    "label": "ActorSocketPicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorSocketPicked(const FName SocketName, USceneComponent* Component, FActorPickerID ActorPickerID, TArray<FGuid> ObjectBindings, UMovieSceneSection* Section)"
  },
  {
    "label": "TrimAndPreserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimAndPreserve(const FGuid InObjectBinding, UMovieSceneSection* InSection, bool bInTrimLeft)"
  },
  {
    "label": "ShowPickerSubMenu()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ShowPickerSubMenu(FMenuBuilder& MenuBuilder, TArray<FGuid> ObjectBindings, UMovieSceneSection* Section)"
  },
  {
    "label": "FindOrCreateTransformTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindOrCreateTransformTrack(const TRange<FFrameNumber>& InAttachRange, UMovieScene* InMovieScene, const FGuid& InObjectHandle, UMovieScene3DTransformTrack*& OutTransformTrack, UMovieScene3DTransformSection*& OutTransformSection)"
  },
  {
    "label": "CompensateChildTrack()",
    "kind": "Method",
    "detail": "Function (template<ModifierFuncType> void)",
    "insertText": "CompensateChildTrack(const TRange<FFrameNumber>& InAttachRange, TArrayView<FMovieSceneDoubleChannel*> Channels, TOptional<TArrayView<FMovieSceneDoubleChannel*>> ParentChannels, const ITransformEvaluator& InParentTransformEval, const ITransformEvaluator& InChildTransformEval, ETransformPreserveType InPreserveType, ModifierFuncType InModifyTransform)"
  },
  {
    "label": "AddKeyInternal()",
    "kind": "Method",
    "detail": "Function (FKeyPropertyResult)",
    "insertText": "AddKeyInternal(FFrameNumber KeyTime, const TArray<TWeakObjectPtr<UObject>> Objects, const FName SocketName, const FName ComponentName, FActorPickerID ActorPickerID)"
  }
]