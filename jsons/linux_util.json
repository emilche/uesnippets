[
  {
    "label": "GetLinuxDistro()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_LINUX_UTIL_H_ # define BASE_LINUX_UTIL_H_ # include<stdint . h> # include<sys / types . h> # include<string> # include<vector> # include \" base / base_export . h \" namespace base { BASE_EXPORT char g_linux_distro [ ] ; BASE_EXPORT std::string)",
    "insertText": "GetLinuxDistro()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(UNIT_TEST) BASE_EXPORT std::string GetKeyValueFromOSReleaseFileForTesting( const std::string& input, const char* key)"
  },
  {
    "label": "SetLinuxDistro()",
    "kind": "Method",
    "detail": "Function (# endif BASE_EXPORT void)",
    "insertText": "SetLinuxDistro(const std::string& distro)"
  },
  {
    "label": "GetThreadsForProcess()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetThreadsForProcess(pid_t pid, std::vector<pid_t>* tids)"
  },
  {
    "label": "FindThreadIDWithSyscall()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT pid_t)",
    "insertText": "FindThreadIDWithSyscall(pid_t pid, const std::string& expected_data, bool* syscall_supported)"
  },
  {
    "label": "FindThreadID()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT pid_t)",
    "insertText": "FindThreadID(pid_t pid, pid_t ns_tid, bool* ns_pid_supported)"
  }
]