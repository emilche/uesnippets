[
  {
    "label": "GetLinuxDistro()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetLinuxDistro()"
  },
  {
    "label": "input()",
    "kind": "Method",
    "detail": "Function (given)",
    "insertText": "input(content of the\n// /etc/os-release file. Exposed for testing.\nBASE_EXPORT std::string GetKeyValueFromOSReleaseFileForTesting(\n    const std::string& input,\n    const char* key)"
  },
  {
    "label": "SetLinuxDistro()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinuxDistro(const std::string& distro)"
  },
  {
    "label": "GetThreadsForProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetThreadsForProcess(pid_t pid, std::vector<pid_t>* tids)"
  },
  {
    "label": "FindThreadIDWithSyscall()",
    "kind": "Method",
    "detail": "Function (pid_t)",
    "insertText": "FindThreadIDWithSyscall(pid_t pid,\n                                          const std::string& expected_data,\n                                          bool* syscall_supported)"
  },
  {
    "label": "FindThreadID()",
    "kind": "Method",
    "detail": "Function (pid_t)",
    "insertText": "FindThreadID(pid_t pid, pid_t ns_tid, bool* ns_pid_supported)"
  }
]