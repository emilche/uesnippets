[
  {
    "label": "UVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVector"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "BasicTimeZone()",
    "kind": "Method",
    "detail": "Function (# ifndef BASICTZ_H # define BASICTZ_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / timezone . h \" # include \" unicode / tzrule . h \" # include \" unicode / tztrans . h \" U_NAMESPACE_BEGIN class UVector ; class U_I18N_API BasicTimeZone : public TimeZone { public : ~)",
    "insertText": "BasicTimeZone()"
  },
  {
    "label": "getNextTransition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getNextTransition(UDate base, UBool inclusive, TimeZoneTransition& result)"
  },
  {
    "label": "getPreviousTransition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getPreviousTransition(UDate base, UBool inclusive, TimeZoneTransition& result)"
  },
  {
    "label": "hasEquivalentTransitions()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "hasEquivalentTransitions(const BasicTimeZone& tz, UDate start, UDate end, UBool ignoreDstAmount, UErrorCode& ec)"
  },
  {
    "label": "countTransitionRules()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "countTransitionRules(UErrorCode& status)"
  },
  {
    "label": "getTimeZoneRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getTimeZoneRules(const InitialTimeZoneRule*& initial, const TimeZoneRule* trsrules[], int32_t& trscount, UErrorCode& status)"
  },
  {
    "label": "getSimpleRulesNear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getSimpleRulesNear(UDate date, InitialTimeZoneRule*& initial, AnnualTimeZoneRule*& std, AnnualTimeZoneRule*& dst, UErrorCode& status)"
  },
  {
    "label": "getOffsetFromLocal()",
    "kind": "Method",
    "detail": "Function (# ifndef enum { kStandard = 0 x01,kDaylight = 0 x03,kFormer = 0 x04,kLatter = 0 x0C } ; # endif void)",
    "insertText": "getOffsetFromLocal(UDate date, int32_t nonExistingTimeOpt, int32_t duplicatedTimeOpt, int32_t& rawOffset, int32_t& dstOffset, UErrorCode& status)"
  },
  {
    "label": "BasicTimeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BasicTimeZone(const UnicodeString &id)"
  },
  {
    "label": "BasicTimeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BasicTimeZone(const BasicTimeZone& source)"
  },
  {
    "label": "getTimeZoneRulesAfter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getTimeZoneRulesAfter(UDate start, InitialTimeZoneRule*& initial, UVector*& transitionRules, UErrorCode& status)"
  }
]