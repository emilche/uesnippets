[
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "FAllocatedPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocatedPayload"
  },
  {
    "label": "FDebuggableFragmentType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebuggableFragmentType"
  },
  {
    "label": "FDebuggableFragment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebuggableFragment"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FUniversalObjectLocatorEmptyPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniversalObjectLocatorEmptyPayload"
  },
  {
    "label": "TUniversalObjectLocatorFragment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TUniversalObjectLocatorFragment"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" UObject / Class . h \" # include \" UniversalObjectLocatorFwd . h \" # include \" UniversalObjectLocatorFragmentType . h \" # include \" UniversalObjectLocatorFragmentTypeHandle . h \" # include \" UniversalObjectLocatorFragmentDebugging . h \" # include \" Templates / Function . h \" # include \" UniversalObjectLocatorFragment . generated . h \")",
    "insertText": "USTRUCT(BlueprintType) struct alignas(8)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "ValidFragmentDelimiters()",
    "kind": "Method",
    "detail": "Function (using FParseStringParams = UE::UniversalObjectLocator::FParseStringParams ; FAsciiSet ValidFragmentTypeCharacters = \" abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_ - \" ; FAsciiSet)",
    "insertText": "ValidFragmentDelimiters()"
  },
  {
    "label": "FUniversalObjectLocatorFragment()",
    "kind": "Method",
    "detail": "Function (= / ? : @ . ~ \" ; FAsciiSet ValidFragmentPayloadCharacters = ValidFragmentTypeCharacters | ValidFragmentDelimiters ; # if WITH_EDITORONLY_DATA SIZE_T SizeInMemory = 6 4 ; # else SIZE_T SizeInMemory = 3 2 ; # endif template<T,. . . ArgTypes>)",
    "insertText": "FUniversalObjectLocatorFragment(UE::UniversalObjectLocator::TFragmentTypeHandle<T> InHandle, ArgTypes&& ...InArgs)"
  },
  {
    "label": "FUniversalObjectLocatorFragment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUniversalObjectLocatorFragment(const UE::UniversalObjectLocator::FFragmentType& InFragmentType)"
  },
  {
    "label": "FUniversalObjectLocatorFragment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUniversalObjectLocatorFragment(const UObject* InObject, UObject* Context)"
  },
  {
    "label": "FUniversalObjectLocatorFragment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUniversalObjectLocatorFragment()"
  },
  {
    "label": "FUniversalObjectLocatorFragment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUniversalObjectLocatorFragment(const FUniversalObjectLocatorFragment& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FUniversalObjectLocatorFragment&)",
    "insertText": "operator(const FUniversalObjectLocatorFragment& RHS)"
  },
  {
    "label": "FUniversalObjectLocatorFragment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUniversalObjectLocatorFragment(FUniversalObjectLocatorFragment&& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FUniversalObjectLocatorFragment&)",
    "insertText": "operator(FUniversalObjectLocatorFragment&& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FUniversalObjectLocatorFragment& A, const FUniversalObjectLocatorFragment& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FUniversalObjectLocatorFragment& Fragment)"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (public : UE::UniversalObjectLocator::FResolveResult)",
    "insertText": "Resolve(const UE::UniversalObjectLocator::FResolveParams& Params)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(const UObject* InObject, UObject* Context)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(const UObject* InObject, UObject* Context, TFunctionRef<bool(UE::UniversalObjectLocator::FFragmentTypeHandle)> CanUseFragmentType)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ToString(FStringBuilderBase& OutString)"
  },
  {
    "label": "TryParseString()",
    "kind": "Method",
    "detail": "Function (FParseStringResult)",
    "insertText": "TryParseString(FStringView InString, const FParseStringParams& InParams)"
  },
  {
    "label": "TryParseFragmentType()",
    "kind": "Method",
    "detail": "Function (FParseStringResult)",
    "insertText": "TryParseFragmentType(FStringView InString, const FParseStringParams& InParams)"
  },
  {
    "label": "TryParseFragmentPayload()",
    "kind": "Method",
    "detail": "Function (FParseStringResult)",
    "insertText": "TryParseFragmentPayload(FStringView InString, const FParseStringParams& InParams)"
  },
  {
    "label": "GetPayloadAs()",
    "kind": "Method",
    "detail": "Function (public : template<T> T*)",
    "insertText": "GetPayloadAs(UE::UniversalObjectLocator::TFragmentTypeHandle<T> InType)"
  },
  {
    "label": "TryGetPayloadAs()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "TryGetPayloadAs(UE::UniversalObjectLocator::TFragmentTypeHandle<T> InType, T*& OutData)"
  },
  {
    "label": "TryGetPayloadAs()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "TryGetPayloadAs(UE::UniversalObjectLocator::TFragmentTypeHandle<T> InType, const T*& OutData)"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetPayload()"
  },
  {
    "label": "GetFragmentType()",
    "kind": "Method",
    "detail": "Function (const UE::UniversalObjectLocator::FFragmentType*)",
    "insertText": "GetFragmentType()"
  },
  {
    "label": "GetFragmentStruct()",
    "kind": "Method",
    "detail": "Function (UScriptStruct*)",
    "insertText": "GetFragmentStruct()"
  },
  {
    "label": "GetFragmentTypeHandle()",
    "kind": "Method",
    "detail": "Function (UE::UniversalObjectLocator::FFragmentTypeHandle)",
    "insertText": "GetFragmentTypeHandle()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AddStructReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStructReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "ExportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportTextItem(FString& ValueStr, const FUniversalObjectLocatorFragment& DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope)"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText, FArchive* InSerializingArchive = nullptr)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(const FPropertyTag& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "GetPreloadDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreloadDependencies(TArray<UObject*>& OutDeps)"
  },
  {
    "label": "CheckPayloadType()",
    "kind": "Method",
    "detail": "Function (protected : # if DO_CHECK void)",
    "insertText": "CheckPayloadType(UScriptStruct* TypeToCompare)"
  },
  {
    "label": "CheckPayloadType()",
    "kind": "Method",
    "detail": "Function (# else void)",
    "insertText": "CheckPayloadType(void* TypeToCompare)"
  },
  {
    "label": "AllocatePayload()",
    "kind": "Method",
    "detail": "Function (} # endif protected : struct FAllocatedPayload { # if UE_UNIVERSALOBJECTLOCATOR_DEBUG void* DebugVFTablePtr ; # endif void* Payload ; } ; FAllocatedPayload)",
    "insertText": "AllocatePayload(size_t Size, size_t Alignment)"
  },
  {
    "label": "DefaultConstructPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultConstructPayload(const UE::UniversalObjectLocator::FFragmentType& InFragmentType)"
  },
  {
    "label": "DestroyPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPayload()"
  },
  {
    "label": "GetDebugHeaderOffset()",
    "kind": "Method",
    "detail": "Function (private : uint32)",
    "insertText": "GetDebugHeaderOffset()"
  },
  {
    "label": "FUniversalObjectLocatorFragment()",
    "kind": "Method",
    "detail": "Function (} # if UE_UNIVERSALOBJECTLOCATOR_DEBUG struct FDebuggableFragmentType { using Type = UE::UniversalObjectLocator::FFragmentType ; } ; struct FDebuggableFragment { using Type = UE::UniversalObjectLocator::IFragmentPayload ; } ; # endif uint8 Data [ SizeInMemory - 2 ] ; UE::UniversalObjectLocator::FFragmentTypeHandle FragmentType ; uint8 bIsInitialized : 1 ; uint8 bIsInline : 1 ; uint8 DebugHeaderSizeLog2 : 6 ; } ; template<> struct TStructOpsTypeTraits<FUniversalObjectLocatorFragment> : public TStructOpsTypeTraitsBase2<FUniversalObjectLocatorFragment> { enum { WithSerializer = true,WithCopy = true,WithIdenticalViaEquality = true,WithExportTextItem = true,WithImportTextItem = true,WithAddStructReferencedObjects = true,} ; } ; template<T,. . . ArgTypes>)",
    "insertText": "FUniversalObjectLocatorFragment(UE::UniversalObjectLocator::TFragmentTypeHandle<T> InHandle, ArgTypes&& ...InArgs) : FragmentType(InHandle) , bIsInitialized(0) , DebugHeaderSizeLog2(0)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (using namespace UE::UniversalObjectLocator ;)",
    "insertText": "checkf(InHandle, TEXT(\"Attempting to construct a new fragment from an invalid fragment type handle - was it registered?\"))"
  },
  {
    "label": "AllocatePayload()",
    "kind": "Method",
    "detail": "Function (FAllocatedPayload Allocation =)",
    "insertText": "AllocatePayload(sizeof(T), alignof(T))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# if UE_UNIVERSALOBJECTLOCATOR_DEBUG)",
    "insertText": "new(Allocation.DebugVFTablePtr)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "new(Allocation.Payload)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (OutData = static_cast<)",
    "insertText": "T(GetPayload())"
  },
  {
    "label": "TUniversalObjectLocatorFragment()",
    "kind": "Method",
    "detail": "Function (template<PayloadType> struct TUniversalObjectLocatorFragment : FUniversalObjectLocatorFragment {)",
    "insertText": "TUniversalObjectLocatorFragment() : FUniversalObjectLocatorFragment(PayloadType::FragmentType)"
  },
  {
    "label": "TUniversalObjectLocatorFragment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUniversalObjectLocatorFragment(UE::UniversalObjectLocator::TFragmentTypeHandle<PayloadType> InHandle) : FUniversalObjectLocatorFragment(InHandle)"
  },
  {
    "label": "TUniversalObjectLocatorFragment()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes>)",
    "insertText": "TUniversalObjectLocatorFragment(ArgTypes&& ...InArgs) : FUniversalObjectLocatorFragment(PayloadType::FragmentType, Forward<ArgTypes>(InArgs)...)"
  },
  {
    "label": "TUniversalObjectLocatorFragment()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes>)",
    "insertText": "TUniversalObjectLocatorFragment(UE::UniversalObjectLocator::TFragmentTypeHandle<PayloadType> InHandle, ArgTypes&& ...InArgs) : FUniversalObjectLocatorFragment(InHandle, Forward<ArgTypes>(InArgs)...)"
  }
]