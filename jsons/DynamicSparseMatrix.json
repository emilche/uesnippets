[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "DynamicSparseMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicSparseMatrix"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "ReverseInnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReverseInnerIterator"
  },
  {
    "label": "evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_DYNAMIC_SPARSEMATRIX_H # define EIGEN_DYNAMIC_SPARSEMATRIX_H namespace Eigen { namespace internal { template<_Scalar,int _Options,_StorageIndex> struct traits<DynamicSparseMatrix<_Scalar,_Options,_StorageIndex>> { typedef _Scalar Scalar ; typedef _StorageIndex StorageIndex ; typedef Sparse StorageKind ; typedef MatrixXpr XprKind ; enum { RowsAtCompileTime = Dynamic,ColsAtCompileTime = Dynamic,MaxRowsAtCompileTime = Dynamic,MaxColsAtCompileTime = Dynamic,Flags = _Options | NestByRefBit | LvalueBit,CoeffReadCost = NumTraits<Scalar>::ReadCost,SupportedAccessPatterns = OuterRandomAccessPattern } ; } ; } template<_Scalar,int _Options,_StorageIndex> class DynamicSparseMatrix : public SparseMatrixBase<DynamicSparseMatrix<_Scalar,_Options,_StorageIndex>> { typedef SparseMatrixBase<DynamicSparseMatrix> Base ; using Base::convert_index ; public :)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(DynamicSparseMatrix)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (using Base::IsRowMajor ; using Base::operator = ; enum { Options = _Options } ; protected : typedef DynamicSparseMatrix<)",
    "insertText": "Scalar(Flags&~RowMajorBit)|(IsRowMajor?RowMajorBit:0)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index m_innerSize ; std::vector<internal::CompressedStorage<Scalar,StorageIndex>> m_data ; public : Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "innerSize()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "innerSize()"
  },
  {
    "label": "innerNonZeros()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "innerNonZeros(Index j)"
  },
  {
    "label": "_data()",
    "kind": "Method",
    "detail": "Function (} std::vector<internal::CompressedStorage<Scalar,StorageIndex>>&)",
    "insertText": "_data()"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (const Index outer = IsRowMajor ? row : col ; const Index inner = IsRowMajor ? col : row ; return m_data [ outer ] .)",
    "insertText": "at(inner)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "coeffRef(Index row, Index col)"
  },
  {
    "label": "atWithInsertion()",
    "kind": "Method",
    "detail": "Function (const Index outer = IsRowMajor ? row : col ; const Index inner = IsRowMajor ? col : row ; return m_data [ outer ] .)",
    "insertText": "atWithInsertion(inner)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (} class InnerIterator ; class ReverseInnerIterator ; void)",
    "insertText": "setZero()"
  },
  {
    "label": "nonZeros()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZeros()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index res = 0 ;)",
    "insertText": "for(Index j=0; j<outerSize(); ++j) res += m_data[j].size()"
  },
  {
    "label": "reserveSizePerVector()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "reserveSizePerVector(std::max)(reserveSize/outerSize(),Index(4))"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (m_data [ j ] .)",
    "insertText": "reserve(reserveSizePerVector)"
  },
  {
    "label": "startVec()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "startVec(Index)"
  },
  {
    "label": "insertBack()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "insertBack(Index row, Index col)"
  },
  {
    "label": "insertBackByOuterInner()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "insertBackByOuterInner(Index outer, Index inner)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(outer<Index(m_data.size()) && inner<m_innerSize && \"out of range\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(((m_data[outer].size()==0) || (m_data[outer].index(m_data[outer].size()-1)<inner)) && \"wrong sorted insertion\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (m_data [ outer ] .)",
    "insertText": "append(0, inner)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "insert(Index row, Index col)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const Index outer = IsRowMajor ? row : col ; const Index inner = IsRowMajor ? col : row ; Index startId = 0 ; Index id = static_cast<)",
    "insertText": "Index(m_data[outer].size())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_data [ outer ] .)",
    "insertText": "resize(id+2,1)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (m_data [ outer ] .)",
    "insertText": "index(id+1) = m_data[outer].index(id)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (m_data [ outer ] .)",
    "insertText": "value(id+1) = m_data[outer].value(id)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (- - id ; } m_data [ outer ] .)",
    "insertText": "index(id+1)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (m_data [ outer ] .)",
    "insertText": "value(id+1)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "finalize()"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "prune(Scalar reference, RealScalar epsilon = NumTraits<RealScalar>::dummy_precision())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(Index rows, Index cols)"
  },
  {
    "label": "convert_index()",
    "kind": "Method",
    "detail": "Function (const Index outerSize = IsRowMajor ? rows : cols ; m_innerSize =)",
    "insertText": "convert_index(IsRowMajor ? cols : rows)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "resize(outerSize)"
  },
  {
    "label": "resizeAndKeepData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "resizeAndKeepData(Index rows, Index cols)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index outerSize = IsRowMajor ? rows : cols ; const Index innerSize = IsRowMajor ? cols : rows ;)",
    "insertText": "if(m_innerSize>innerSize)"
  },
  {
    "label": "exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exit(2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_data.size() != outerSize)"
  },
  {
    "label": "DynamicSparseMatrix()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEPRECATED)",
    "insertText": "DynamicSparseMatrix() : m_innerSize(0), m_data(0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_SPARSE_CREATE_TEMPORARY_PLUGIN EIGEN_SPARSE_CREATE_TEMPORARY_PLUGIN # endif)",
    "insertText": "eigen_assert(innerSize()==0 && outerSize()==0)"
  },
  {
    "label": "DynamicSparseMatrix()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEPRECATED)",
    "insertText": "DynamicSparseMatrix(Index rows, Index cols) : m_innerSize(0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_SPARSE_CREATE_TEMPORARY_PLUGIN EIGEN_SPARSE_CREATE_TEMPORARY_PLUGIN # endif)",
    "insertText": "resize(rows, cols)"
  },
  {
    "label": "DynamicSparseMatrix()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEPRECATED)",
    "insertText": "DynamicSparseMatrix(const SparseMatrixBase<OtherDerived>& other) : m_innerSize(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_SPARSE_CREATE_TEMPORARY_PLUGIN EIGEN_SPARSE_CREATE_TEMPORARY_PLUGIN # endif)",
    "insertText": "operator(other.derived())"
  },
  {
    "label": "DynamicSparseMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DynamicSparseMatrix(const DynamicSparseMatrix& other) : Base(), m_innerSize(0)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_SPARSE_CREATE_TEMPORARY_PLUGIN EIGEN_SPARSE_CREATE_TEMPORARY_PLUGIN # endif* this = other .)",
    "insertText": "derived()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(DynamicSparseMatrix& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_innerSize, other.m_innerSize)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "swap(other.m_data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DynamicSparseMatrix&)",
    "insertText": "operator(const DynamicSparseMatrix& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(other.const_cast_derived())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "resize(other.rows(), other.cols())"
  },
  {
    "label": "DynamicSparseMatrix()",
    "kind": "Method",
    "detail": "Function (m_data = other . m_data ; } return* this ; } ~)",
    "insertText": "DynamicSparseMatrix()"
  },
  {
    "label": "startFill()",
    "kind": "Method",
    "detail": "Function (} public : EIGEN_DEPRECATED void)",
    "insertText": "startFill(Index reserveSize = 1000)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(reserveSize)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEPRECATED Scalar&)",
    "insertText": "fill(Index row, Index col)"
  },
  {
    "label": "insertBack()",
    "kind": "Method",
    "detail": "Function (const Index outer = IsRowMajor ? row : col ; const Index inner = IsRowMajor ? col : row ; return)",
    "insertText": "insertBack(outer,inner)"
  },
  {
    "label": "fillrand()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEPRECATED Scalar&)",
    "insertText": "fillrand(Index row, Index col)"
  },
  {
    "label": "endFill()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEPRECATED void)",
    "insertText": "endFill()"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_DYNAMICSPARSEMATRIX_PLUGIN # include EIGEN_DYNAMICSPARSEMATRIX_PLUGIN # endif } ; template<Scalar,int _Options,_StorageIndex> class DynamicSparseMatrix<Scalar,_Options,_StorageIndex>::InnerIterator : public SparseVector<Scalar,_Options,_StorageIndex>::InnerIterator { typedef SparseVector<Scalar,_Options,_StorageIndex>::InnerIterator Base ; public :)",
    "insertText": "InnerIterator(const DynamicSparseMatrix& mat, Index outer) : Base(mat.m_data[outer]), m_outer(outer)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "row()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "col()"
  },
  {
    "label": "outer()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "outer()"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "evaluator(const SparseMatrixType &mat) : m_matrix(&mat)"
  },
  {
    "label": "SparseMatrixType()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "SparseMatrixType()"
  },
  {
    "label": "nonZerosEstimate()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZerosEstimate()"
  }
]