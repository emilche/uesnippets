[
  {
    "label": "FVectorComplexFFT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVectorComplexFFT"
  },
  {
    "label": "FVectorRealToComplexFFT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVectorRealToComplexFFT"
  },
  {
    "label": "FConversionBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConversionBuffers"
  },
  {
    "label": "FVectorFFTFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVectorFFTFactory"
  },
  {
    "label": "FVectorRealToComplexFFT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DSP / FFTAlgorithm . h \" # include \" DSP / BufferVectorOperations . h \" namespace Audio { class FVectorComplexFFT ; class FVectorRealToComplexFFT : public IFFTAlgorithm { public : const int32 MinLog2FFTSize ; const int32 MaxLog2FFTSize ;)",
    "insertText": "FVectorRealToComplexFFT(int32 InLog2Size)"
  },
  {
    "label": "FVectorRealToComplexFFT()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVectorRealToComplexFFT()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Size()"
  },
  {
    "label": "ForwardScaling()",
    "kind": "Method",
    "detail": "Function (EFFTScaling)",
    "insertText": "ForwardScaling()"
  },
  {
    "label": "InverseScaling()",
    "kind": "Method",
    "detail": "Function (EFFTScaling)",
    "insertText": "InverseScaling()"
  },
  {
    "label": "ForwardRealToComplex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForwardRealToComplex(const float* RESTRICT InReal, float* RESTRICT OutComplex)"
  },
  {
    "label": "InverseComplexToReal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InverseComplexToReal(const float* RESTRICT InComplex, float* RESTRICT OutReal)"
  },
  {
    "label": "BatchForwardRealToComplex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchForwardRealToComplex(int32 InCount, const float* const RESTRICT InReal[], float* RESTRICT OutComplex[])"
  },
  {
    "label": "BatchInverseComplexToReal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchInverseComplexToReal(int32 InCount, const float* const RESTRICT InComplex[], float* RESTRICT OutReal[])"
  },
  {
    "label": "InitRealSequenceConversionBuffers()",
    "kind": "Method",
    "detail": "Function (private : struct FConversionBuffers { FAlignedFloatBuffer AlphaReal ; FAlignedFloatBuffer AlphaImag ; FAlignedFloatBuffer BetaReal ; FAlignedFloatBuffer BetaImag ; } ; void)",
    "insertText": "InitRealSequenceConversionBuffers()"
  },
  {
    "label": "ConvertSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSequence(const FConversionBuffers& InBuffers, const float* RESTRICT InValues, int32 InStartIndex, float* RESTRICT OutValues)"
  },
  {
    "label": "FVectorFFTFactory()",
    "kind": "Method",
    "detail": "Function (int32 FFTSize ; int32 Log2FFTSize ; FAlignedFloatBuffer WorkBuffer ; FConversionBuffers ForwardConvBuffers ; FConversionBuffers InverseConvBuffers ; TUniquePtr<FVectorComplexFFT> ComplexFFT ; } ; class FVectorFFTFactory : public IFFTAlgorithmFactory { public : ~)",
    "insertText": "FVectorFFTFactory()"
  },
  {
    "label": "GetFactoryName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFactoryName()"
  },
  {
    "label": "IsHardwareAccelerated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHardwareAccelerated()"
  },
  {
    "label": "Expects128BitAlignedArrays()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Expects128BitAlignedArrays()"
  },
  {
    "label": "AreFFTSettingsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreFFTSettingsSupported(const FFFTSettings& InSettings)"
  },
  {
    "label": "NewFFTAlgorithm()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IFFTAlgorithm>)",
    "insertText": "NewFFTAlgorithm(const FFFTSettings& InSettings)"
  }
]