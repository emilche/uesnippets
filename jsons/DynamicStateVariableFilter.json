[
  {
    "label": "EDynamicFilterType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDynamicFilterType"
  },
  {
    "label": "FDynamicStateVariableFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicStateVariableFilter"
  },
  {
    "label": "FSVFCoefficients",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSVFCoefficients"
  },
  {
    "label": "FSVFState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSVFState"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / EnvelopeFollower . h \" namespace Audio { enum EDynamicFilterType { Bell,LowShelf,HighShelf,} ; class FDynamicStateVariableFilter { public : void)",
    "insertText": "Init(const float InSampleRate, const int32 InNumChannels)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const float* InSamples, float* OutSamples, const int32 InNumSamples)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const float* InSamples, float* OutSamples, const float* KeySamples, const int32 InNumSamples)"
  },
  {
    "label": "SetFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrequency(const float InFrequency)"
  },
  {
    "label": "SetQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQ(const float InQ)"
  },
  {
    "label": "SetGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGain(const float InGain)"
  },
  {
    "label": "SetFilterType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterType(const EDynamicFilterType InFilterType)"
  },
  {
    "label": "SetAnalog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnalog(const bool bInAnalog)"
  },
  {
    "label": "SetAttackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttackTime(const float InAttackTime)"
  },
  {
    "label": "SetReleaseTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReleaseTime(const float InReleaseTime)"
  },
  {
    "label": "SetThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreshold(const float InThresholdDb)"
  },
  {
    "label": "SetEnvMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnvMode(const EPeakMode::Type InMode)"
  },
  {
    "label": "SetDynamicRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDynamicRange(const float InDynamicRange)"
  },
  {
    "label": "SetRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRatio(const float InRatio)"
  },
  {
    "label": "SetKnee()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKnee(const float InKnee)"
  },
  {
    "label": "GetGainReduction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGainReduction()"
  },
  {
    "label": "ProcessSample()",
    "kind": "Method",
    "detail": "Function (protected : float SampleRate = 4 8 0 0 0 . f ; float OneOverSampleRate = 1 . f / 4 8 0 0 0 . f ; int32 NumChannels = 0 ; EDynamicFilterType FilterType = EDynamicFilterType::Bell ; float Frequency = 1 0 0 0 . f ; float Q = 1 . f ; float OneOverQ = 1 . f ; float ThresholdDb = - 1 2 . f ; float DynamicRangeDb = 0 . f ; float Ratio = 1 . 5 f ; float GainDb = 1 . f ; float Knee = 1 2 . f ; float HalfKnee = 6 . f ; float ScaledGainLinear = 1 . f ; float SlopeFactor = 0 . f ; bool bNeedsUpdate = true ; struct FSVFCoefficients { float G = 0 . f ; float K = 0 . f ; float A0 = 1 . f ; float A1 = 0 . f ; float A2 = 0 . f ; float A3 = 0 . f ; float M0 = 1 . f ; float M1 = 0 . f ; float M2 = 0 . f ; } ; struct FSVFState { float V1 = 0 . f ; float V2 = 0 . f ; float V3 = 0 . f ; float Z1 = 0 . f ; float Z2 = 0 . f ; void)",
    "insertText": "ProcessSample(const FSVFCoefficients& Coeffs, const float InSample)"
  },
  {
    "label": "ProcessBell()",
    "kind": "Method",
    "detail": "Function (} ; FInlineEnvelopeFollower Envelope ; FSVFState KeyFilterState ; TArray<FSVFState> FilterState ; FSVFCoefficients KeyVars ; FSVFCoefficients OutputVars ; TArray<FVector2D> KneePoints ; void)",
    "insertText": "ProcessBell(const float* InSamples, float* OutSamples, const float* KeySamples, const int32 InNumSamples)"
  },
  {
    "label": "ProcessLowShelf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessLowShelf(const float* InSamples, float* OutSamples, const float* KeySamples, const int32 InNumSamples)"
  },
  {
    "label": "ProcessHighShelf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessHighShelf(const float* InSamples, float* OutSamples, const float* KeySamples, const int32 InNumSamples)"
  },
  {
    "label": "UpdateSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSettings()"
  },
  {
    "label": "UpdatePreFilterVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePreFilterVariables()"
  },
  {
    "label": "UpdatePostFilterVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePostFilterVariables()"
  },
  {
    "label": "CalcGain()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcGain(const float KeySample)"
  }
]