[
  {
    "label": "bernoulli_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "bernoulli_distribution"
  },
  {
    "label": "param_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "param_type"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_BERNOULLI_DISTRIBUTION_H_ # define ABSL_RANDOM_BERNOULLI_DISTRIBUTION_H_ # include<cstdint> # include<istream> # include<limits> # include \" absl / base / optimization . h \" # include \" absl / random / internal / fast_uniform_bits . h \" # include \" absl / random / internal / iostream_state_saver . h \" namespace absl { ABSL_NAMESPACE_BEGIN class bernoulli_distribution { public : using result_type = bool ; class param_type { public : using distribution_type = bernoulli_distribution ;)",
    "insertText": "param_type(double p = 0.5) : prob_(p)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(p >= 0.0 && p <= 1.0)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "p()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const param_type& p1, const param_type& p2)"
  },
  {
    "label": "bernoulli_distribution()",
    "kind": "Method",
    "detail": "Function (} private : double prob_ ; } ;)",
    "insertText": "bernoulli_distribution() : bernoulli_distribution(0.5)"
  },
  {
    "label": "bernoulli_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "bernoulli_distribution(double p) : param_(p)"
  },
  {
    "label": "bernoulli_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "bernoulli_distribution(param_type p) : param_(p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> bool)",
    "insertText": "operator()(URBG& g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> bool)",
    "insertText": "operator()(URBG& g, const param_type& param)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} param_type)",
    "insertText": "param()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "result_type(min)()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (template<URBG> bool)",
    "insertText": "Generate(double p, URBG& g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (param_type param_ ; } ; template<CharT,Traits> std::basic_ostream<CharT,Traits>&)",
    "insertText": "operator(std::basic_ostream<CharT, Traits>& os, const bernoulli_distribution& x)"
  },
  {
    "label": "make_ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (auto saver =)",
    "insertText": "make_ostream_state_saver(os)"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "precision(random_internal::stream_precision_helper<double>::kPrecision)"
  },
  {
    "label": "make_istream_state_saver()",
    "kind": "Method",
    "detail": "Function (auto saver =)",
    "insertText": "make_istream_state_saver(is)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (auto p = random_internal::read_floating_point<)",
    "insertText": "double(is)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "param(bernoulli_distribution::param_type(p))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (random_internal::FastUniformBits<uint32_t> fast_u32 ;)",
    "insertText": "while(true)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (const uint64_t c = static_cast<)",
    "insertText": "uint64_t(static_cast<int64_t>(p * kP32))"
  },
  {
    "label": "fast_u32()",
    "kind": "Method",
    "detail": "Function (const uint32_t v =)",
    "insertText": "fast_u32(g)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double q = static_cast<)",
    "insertText": "double(c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const double left = p - q ; const double here = left* kP32 ;)",
    "insertText": "if(here == 0)"
  }
]