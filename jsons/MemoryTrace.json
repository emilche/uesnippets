[
  {
    "label": "EMemoryTraceRootHeap",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMemoryTraceRootHeap"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMalloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMalloc"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Misc / EnumClassFlags . h \" # include \" Trace / Config . h \" # include \" Trace / Trace . h \" # if !)",
    "insertText": "defined(UE_MEMORY_TRACE_AVAILABLE) # define UE_MEMORY_TRACE_AVAILABLE 0 #endif #if !defined(UE_MEMORY_TRACE_LATE_INIT) # define UE_MEMORY_TRACE_LATE_INIT 0 #endif #if !defined(UE_MEMORY_TRACE_ENABLED) && UE_TRACE_ENABLED # if UE_MEMORY_TRACE_AVAILABLE # if !PLATFORM_USES_FIXED_GMalloc_CLASS && PLATFORM_64BITS # define UE_MEMORY_TRACE_ENABLED !UE_BUILD_SHIPPING # endif # endif #endif #if !defined(UE_MEMORY_TRACE_ENABLED)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum EMemoryTraceRootHeap : uint8 { SystemMemory,VideoMemory,EndHardcoded = VideoMemory,EndReserved = 1 5 } ; enum class EMemoryTraceHeapFlags : uint16 { None = 0,Root = 1<<0,NeverFrees = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMemoryTraceHeapFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EMemoryTraceHeapAllocationFlags : uint8 { None = 0,Heap = 1<<0,Swap = 2<<0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMemoryTraceHeapAllocationFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EMemoryTraceSwapOperation : uint8 { PageOut = 0,PageIn = 1,FreeInSwap = 2,} ; enum class EMemoryTraceInit : uint8 { Disabled = 0,AllocEvents = 1<<0,Callstacks = 1<<1,Tags = 1<<2,Full = AllocEvents | Callstacks | Tags,Light = AllocEvents | Tags,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMemoryTraceInit)"
  },
  {
    "label": "UE_MEMORY_TRACE()",
    "kind": "Method",
    "detail": "Function (# if UE_MEMORY_TRACE_ENABLED # define)",
    "insertText": "UE_MEMORY_TRACE(x) x CORE_API UE_TRACE_CHANNEL_EXTERN(MemAllocChannel)"
  },
  {
    "label": "MemoryTrace_Create()",
    "kind": "Method",
    "detail": "Function (class FMalloc*)",
    "insertText": "MemoryTrace_Create(class FMalloc* InMalloc)"
  },
  {
    "label": "MemoryTrace_Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Initialize()"
  },
  {
    "label": "MemoryTrace_HeapSpec()",
    "kind": "Method",
    "detail": "Function (HeapId)",
    "insertText": "MemoryTrace_HeapSpec(HeapId ParentId, const TCHAR* Name, EMemoryTraceHeapFlags Flags = EMemoryTraceHeapFlags::None)"
  },
  {
    "label": "MemoryTrace_RootHeapSpec()",
    "kind": "Method",
    "detail": "Function (HeapId)",
    "insertText": "MemoryTrace_RootHeapSpec(const TCHAR* Name, EMemoryTraceHeapFlags Flags = EMemoryTraceHeapFlags::None)"
  },
  {
    "label": "MemoryTrace_MarkAllocAsHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_MarkAllocAsHeap(uint64 Address, HeapId Heap, EMemoryTraceHeapAllocationFlags Flags = EMemoryTraceHeapAllocationFlags::None, uint32 ExternalCallstackId = 0)"
  },
  {
    "label": "MemoryTrace_UnmarkAllocAsHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_UnmarkAllocAsHeap(uint64 Address, HeapId Heap, uint32 ExternalCallstackId = 0)"
  },
  {
    "label": "MemoryTrace_Alloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Alloc(uint64 Address, uint64 Size, uint32 Alignment, HeapId RootHeap = EMemoryTraceRootHeap::SystemMemory, uint32 ExternalCallstackId = 0)"
  },
  {
    "label": "MemoryTrace_Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Free(uint64 Address, HeapId RootHeap = EMemoryTraceRootHeap::SystemMemory, uint32 ExternalCallstackId = 0)"
  },
  {
    "label": "MemoryTrace_ReallocFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_ReallocFree(uint64 Address, HeapId RootHeap = EMemoryTraceRootHeap::SystemMemory, uint32 ExternalCallstackId = 0)"
  },
  {
    "label": "MemoryTrace_ReallocAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_ReallocAlloc(uint64 Address, uint64 NewSize, uint32 Alignment, HeapId RootHeap = EMemoryTraceRootHeap::SystemMemory, uint32 ExternalCallstackId = 0)"
  },
  {
    "label": "MemoryTrace_SwapOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_SwapOp(uint64 PageAddress, EMemoryTraceSwapOperation SwapOperation, uint32 CompressedSize = 0, uint32 CallstackId = 0)"
  },
  {
    "label": "UE_MEMORY_TRACE()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "UE_MEMORY_TRACE(x) inline HeapId MemoryTrace_RootHeapSpec(const TCHAR* Name, EMemoryTraceHeapFlags Flags = EMemoryTraceHeapFlags::None)"
  },
  {
    "label": "MemoryTrace_UnmarkAllocAsHeap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MemoryTrace_UnmarkAllocAsHeap(uint64 Address, HeapId Heap)"
  }
]