[
  {
    "label": "FRDGAllowRHIAccessScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGAllowRHIAccessScope"
  },
  {
    "label": "DEFINE_LOG_CATEGORY_STATIC()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / ScopeExit . h \" # include \" RenderGraphDefinitions . h \" # include \" ProfilingDebugging / CountersTrace . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # include \" RHI . h \" # include \" DataDrivenShaderPlatformInfo . h \")",
    "insertText": "DEFINE_LOG_CATEGORY_STATIC(LogRDG, Log, All)"
  },
  {
    "label": "RDG_RECURSION_COUNTER_SCOPE()",
    "kind": "Method",
    "detail": "Function (# define RDG_DUMP_GRAPH_PRODUCERS 1 # define RDG_DUMP_GRAPH_RESOURCES 2 # define RDG_DUMP_GRAPH_TRACKS 3 # define RDG_ASYNC_COMPUTE_DISABLED 0 # define RDG_ASYNC_COMPUTE_ENABLED 1 # define RDG_ASYNC_COMPUTE_FORCE_ENABLED 2 # ifndef RDG_ENABLE_PARALLEL_TASKS # define RDG_ENABLE_PARALLEL_TASKS 1 # endif # define)",
    "insertText": "RDG_RECURSION_COUNTER_SCOPE(Counter)"
  },
  {
    "label": "FRDGAllowRHIAccessScope()",
    "kind": "Method",
    "detail": "Function (ON_SCOPE_EXIT { Counter - - ; } # if RDG_ENABLE_DEBUG int32 GRDGAsyncCompute ; int32 GRDGClobberResources ; int32 GRDGValidation ; int32 GRDGDebug ; int32 GRDGDebugFlushGPU ; int32 GRDGDebugExtendResourceLifetimes ; int32 GRDGDebugDisableTransientResources ; int32 GRDGTransitionLog ; int32 GRDGImmediateMode ; int32 GRDGOverlapUAVs ; bool GRDGAllowRHIAccess ; bool GRDGAllowRHIAccessAsync ; class FRDGAllowRHIAccessScope { public :)",
    "insertText": "FRDGAllowRHIAccessScope()"
  },
  {
    "label": "RDG_ALLOW_RHI_ACCESS_SCOPE()",
    "kind": "Method",
    "detail": "Function (GRDGAllowRHIAccess = false ; } } ; # define)",
    "insertText": "RDG_ALLOW_RHI_ACCESS_SCOPE()"
  },
  {
    "label": "GetClobberColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetClobberColor()"
  },
  {
    "label": "GetClobberBufferValue()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetClobberBufferValue()"
  },
  {
    "label": "GetClobberDepth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetClobberDepth()"
  },
  {
    "label": "GetClobberStencil()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetClobberStencil()"
  },
  {
    "label": "IsDebugAllowedForGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugAllowedForGraph(const TCHAR* GraphName)"
  },
  {
    "label": "IsDebugAllowedForPass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugAllowedForPass(const TCHAR* PassName)"
  },
  {
    "label": "IsDebugAllowedForResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugAllowedForResource(const TCHAR* ResourceName)"
  },
  {
    "label": "EmitRDGWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitRDGWarning(const FString& WarningMessage)"
  },
  {
    "label": "EmitRDGWarningf()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EmitRDGWarningf(WarningMessageFormat, ...) \\ EmitRDGWarning(FString::Printf(WarningMessageFormat, ##__VA_ARGS__))"
  },
  {
    "label": "RDG_ALLOW_RHI_ACCESS_SCOPE()",
    "kind": "Method",
    "detail": "Function (# else const int32 GRDGClobberResources = 0 ; const int32 GRDGValidation = 0 ; const int32 GRDGDebug = 0 ; const int32 GRDGDebugFlushGPU = 0 ; const int32 GRDGDebugExtendResourceLifetimes = 0 ; const int32 GRDGDebugDisableTransientResources = 0 ; const int32 GRDGTransitionLog = 0 ; const int32 GRDGImmediateMode = 0 ; const int32 GRDGOverlapUAVs = 1 ; # define)",
    "insertText": "RDG_ALLOW_RHI_ACCESS_SCOPE() #define EmitRDGWarningf(WarningMessageFormat, ...)"
  },
  {
    "label": "CSV_DECLARE_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (int32 GRDGCullPasses ; int32 GRDGMergeRenderPasses ; int32 GRDGTransientAllocator ; int32 GRDGAsyncComputeTransientAliasing ; int32 GRDGTransientExtractedResources ; int32 GRDGTransientIndirectArgBuffers ; # if RDG_ENABLE_PARALLEL_TASKS int32 GRDGParallelDestruction ; int32 GRDGParallelSetup ; int32 GRDGParallelExecute ; int32 GRDGParallelExecutePassMin ; int32 GRDGParallelExecutePassMax ; int32 GRDGParallelExecutePassTaskModeThreshold ; # else const int32 GRDGParallelDestruction = 0 ; const int32 GRDGParallelSetup = 0 ; const int32 GRDGParallelExecute = 0 ; const int32 GRDGParallelExecutePassMin = 0 ; const int32 GRDGParallelExecutePassMax = 0 ; const int32 GRDGParallelExecutePassTaskModeThreshold = 0 ; # endif # if CSV_PROFILER_STATS int32 GRDGVerboseCSVStats ; # else const int32 GRDGVerboseCSVStats = 0 ; # endif)",
    "insertText": "CSV_DECLARE_CATEGORY_EXTERN(RDGCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define RDG_STATS STATS | | COUNTERSTRACE_ENABLED # if RDG_STATS int32 GRDGStatPassCount ; int32 GRDGStatPassCullCount ; int32 GRDGStatRenderPassMergeCount ; int32 GRDGStatPassDependencyCount ; int32 GRDGStatTextureCount ; int32 GRDGStatTextureReferenceCount ; int32 GRDGStatBufferCount ; int32 GRDGStatBufferReferenceCount ; int32 GRDGStatViewCount ; int32 GRDGStatTransientTextureCount ; int32 GRDGStatTransientBufferCount ; int32 GRDGStatTransitionCount ; int32 GRDGStatAliasingCount ; int32 GRDGStatTransitionBatchCount ; int32 GRDGStatMemoryWatermark ; # endif)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_PassCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_PassWithParameterCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_PassCullCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_RenderPassMergeCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_PassDependencyCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_TextureCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_TextureReferenceCount)"
  },
  {
    "label": "TRACE_DECLARE_FLOAT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_FLOAT_COUNTER_EXTERN(COUNTER_RDG_TextureReferenceAverage)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_BufferCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_BufferReferenceCount)"
  },
  {
    "label": "TRACE_DECLARE_FLOAT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_FLOAT_COUNTER_EXTERN(COUNTER_RDG_BufferReferenceAverage)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_ViewCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_TransientTextureCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_TransientBufferCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_TransitionCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_AliasingCount)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_INT_COUNTER_EXTERN(COUNTER_RDG_TransitionBatchCount)"
  },
  {
    "label": "TRACE_DECLARE_MEMORY_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_DECLARE_MEMORY_COUNTER_EXTERN(COUNTER_RDG_MemoryWatermark)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Passes\"), STAT_RDG_PassCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Passes With Parameters\"), STAT_RDG_PassWithParameterCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Passes Culled\"), STAT_RDG_PassCullCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Render Passes Merged\"), STAT_RDG_RenderPassMergeCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Pass Dependencies\"), STAT_RDG_PassDependencyCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Textures\"), STAT_RDG_TextureCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Texture References\"), STAT_RDG_TextureReferenceCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_COUNTER_STAT_EXTERN(TEXT(\"Texture References Average\"), STAT_RDG_TextureReferenceAverage, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Buffers\"), STAT_RDG_BufferCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Buffer References\"), STAT_RDG_BufferReferenceCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_COUNTER_STAT_EXTERN(TEXT(\"Buffer References Average\"), STAT_RDG_BufferReferenceAverage, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Views\"), STAT_RDG_ViewCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Transient Textures\"), STAT_RDG_TransientTextureCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Transient Buffers\"), STAT_RDG_TransientBufferCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Resource Transitions\"), STAT_RDG_TransitionCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Resource Acquires and Discards\"), STAT_RDG_AliasingCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Resource Transition Batches\"), STAT_RDG_TransitionBatchCount, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Setup\"), STAT_RDG_SetupTime, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Compile\"), STAT_RDG_CompileTime, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Execute\"), STAT_RDG_ExecuteTime, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Collect Resources\"), STAT_RDG_CollectResourcesTime, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Collect Barriers\"), STAT_RDG_CollectBarriersTime, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Clear\"), STAT_RDG_ClearTime, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Flush RHI Resources\"), STAT_RDG_FlushRHIResources, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Builder Watermark\"), STAT_RDG_MemoryWatermark, STATGROUP_RDG, RENDERCORE_API)"
  },
  {
    "label": "GetEpilogueBarriersToBeginDebugName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetEpilogueBarriersToBeginDebugName(ERHIPipeline Pipelines)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (# if RDG_ENABLE_DEBUG)",
    "insertText": "switch(Pipelines)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} # endif return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "SkipUAVBarrier()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SkipUAVBarrier(FRDGViewHandle PreviousHandle, FRDGViewHandle NextHandle)"
  },
  {
    "label": "IsAsyncComputeSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAsyncComputeSupported()"
  },
  {
    "label": "IsParallelExecuteEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsParallelExecuteEnabled()"
  },
  {
    "label": "IsParallelSetupEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParallelSetupEnabled()"
  },
  {
    "label": "IsExtendedLifetimeResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExtendedLifetimeResource(FRDGViewableResource* Resource)"
  },
  {
    "label": "IsAsyncComputeTransientAliasingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsyncComputeTransientAliasingEnabled()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if RDG_ENABLE_DEBUG)",
    "insertText": "if(GRDGDebugExtendResourceLifetimes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto* Resource = Registry [ Handle ] ;)",
    "insertText": "if(IsExtendedLifetimeResource(Resource))"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(Resource)"
  }
]