[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "FReferrerToken()",
    "kind": "Method",
    "detail": "Function (namespace Verse { FAbstractVisitor::)",
    "insertText": "FReferrerToken(VCell* Cell) : EncodedBits(BitCast<uint64>(Cell) | static_cast<uint64>(EReferrerType::Cell))"
  },
  {
    "label": "FReferrerToken()",
    "kind": "Method",
    "detail": "Function (} FAbstractVisitor::)",
    "insertText": "FReferrerToken(UObject* Object) : EncodedBits(BitCast<uint64>(Object) | static_cast<uint64>(EReferrerType::UObject))"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} FAbstractVisitor::EReferrerType FAbstractVisitor::)",
    "insertText": "GetType()"
  },
  {
    "label": "IsCell()",
    "kind": "Method",
    "detail": "Function (} bool FAbstractVisitor::)",
    "insertText": "IsCell()"
  },
  {
    "label": "AsCell()",
    "kind": "Method",
    "detail": "Function (} VCell* FAbstractVisitor::)",
    "insertText": "AsCell()"
  },
  {
    "label": "IsUObject()",
    "kind": "Method",
    "detail": "Function (} bool FAbstractVisitor::)",
    "insertText": "IsUObject()"
  },
  {
    "label": "AsUObject()",
    "kind": "Method",
    "detail": "Function (} UObject* FAbstractVisitor::)",
    "insertText": "AsUObject()"
  },
  {
    "label": "FReferrerContext()",
    "kind": "Method",
    "detail": "Function (} FAbstractVisitor::)",
    "insertText": "FReferrerContext(FAbstractVisitor& InVisitor, FReferrerToken InReferrer) : Visitor(InVisitor) , Referrer(InReferrer)"
  },
  {
    "label": "FReferrerContext()",
    "kind": "Method",
    "detail": "Function (Previous = Visitor . Context ; Visitor . Context = this ; } FAbstractVisitor::FReferrerContext::~)",
    "insertText": "FReferrerContext()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Visitor . Context = Previous ; } template<ValueType> void)",
    "insertText": "Visit(FAbstractVisitor& Visitor, ValueType& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "Visit(Value, ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Visit(T Begin, T End)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (::)",
    "insertText": "Visit(*this, *Begin, TEXT(\"\"))"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} } template<ElementType,AllocatorType> void)",
    "insertText": "Visit(TArray<ElementType, AllocatorType>& Values, const TCHAR* ElementName)"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (uint64 ScratchNumElements = 0 ;)",
    "insertText": "BeginArray(ElementName, ScratchNumElements)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "SetNum((typename TArray<ElementType, AllocatorType>::SizeType)ScratchNumElements)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(Values.begin(), Values.end())"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndArray()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} else { uint64 ScratchNumElements = Values .)",
    "insertText": "Num()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} } template<ElementType,KeyFuncs,Allocator> void)",
    "insertText": "Visit(const TSet<ElementType, KeyFuncs, Allocator>& Values, const TCHAR* ElementName)"
  },
  {
    "label": "BeginSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSet(ElementName, ScratchNumElements)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (::)",
    "insertText": "Visit(*this, const_cast<ElementType&>(Value), TEXT(\"\"))"
  },
  {
    "label": "EndSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EndSet()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} template<KeyType,ValueType,SetAllocator,KeyFuncs> void)",
    "insertText": "Visit(TMap<KeyType, ValueType, SetAllocator, KeyFuncs>& Values, const TCHAR* ElementName)"
  },
  {
    "label": "BeginMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginMap(ElementName, ScratchNumElements)"
  },
  {
    "label": "VisitPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitPair([this, &Kvp] { ::Verse::Visit(*this, Kvp.Key, TEXT(\"Key\")); ::Verse::Visit(*this, Kvp.Value, TEXT(\"Value\")); })"
  },
  {
    "label": "EndMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EndMap()"
  }
]