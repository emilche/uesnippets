[
  {
    "label": "PooledTaskRunnerDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PooledTaskRunnerDelegate"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "State",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "State"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Value"
  },
  {
    "label": "JoinFlag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JoinFlag"
  },
  {
    "label": "JobTaskSource()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_JOB_TASK_SOURCE_H_ # define BASE_TASK_THREAD_POOL_JOB_TASK_SOURCE_H_ # include<stddef . h> # include<atomic> # include<limits> # include<memory> # include<utility> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / memory / raw_ptr . h \" # include \" base / synchronization / condition_variable . h \" # include \" base / task / common / checked_lock . h \" # include \" base / task / post_job . h \" # include \" base / task / task_traits . h \" # include \" base / task / thread_pool / task . h \" # include \" base / task / thread_pool / task_source . h \" # include \" base / task / thread_pool / task_source_sort_key . h \" namespace base { namespace internal { class PooledTaskRunnerDelegate ; class BASE_EXPORT JobTaskSource : public TaskSource { public :)",
    "insertText": "JobTaskSource(const Location& from_here, const TaskTraits& traits, RepeatingCallback<void(JobDelegate*)> worker_task, MaxConcurrencyCallback max_concurrency_callback, PooledTaskRunnerDelegate* delegate)"
  },
  {
    "label": "JobTaskSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JobTaskSource(const JobTaskSource&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JobTaskSource&)",
    "insertText": "operator(const JobTaskSource&)"
  },
  {
    "label": "CreateJobHandle()",
    "kind": "Method",
    "detail": "Function (JobHandle)",
    "insertText": "CreateJobHandle(scoped_refptr<internal::JobTaskSource> task_source)"
  },
  {
    "label": "NotifyConcurrencyIncrease()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyConcurrencyIncrease()"
  },
  {
    "label": "WillJoin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillJoin()"
  },
  {
    "label": "RunJoinTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunJoinTask()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel(TaskSource::Transaction* transaction = nullptr)"
  },
  {
    "label": "GetExecutionEnvironment()",
    "kind": "Method",
    "detail": "Function (ExecutionEnvironment)",
    "insertText": "GetExecutionEnvironment()"
  },
  {
    "label": "GetRemainingConcurrency()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetRemainingConcurrency()"
  },
  {
    "label": "GetSortKey()",
    "kind": "Method",
    "detail": "Function (TaskSourceSortKey)",
    "insertText": "GetSortKey()"
  },
  {
    "label": "GetDelayedSortKey()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "GetDelayedSortKey()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "GetWorkerCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetWorkerCount()"
  },
  {
    "label": "GetMaxConcurrency()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetMaxConcurrency()"
  },
  {
    "label": "AcquireTaskId()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "AcquireTaskId()"
  },
  {
    "label": "ReleaseTaskId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTaskId(uint8_t task_id)"
  },
  {
    "label": "ShouldYield()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldYield()"
  },
  {
    "label": "delegate()",
    "kind": "Method",
    "detail": "Function (PooledTaskRunnerDelegate*)",
    "insertText": "delegate()"
  },
  {
    "label": "is_canceled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_canceled()"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "State()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (Value)",
    "insertText": "Cancel()"
  },
  {
    "label": "IncrementWorkerCount()",
    "kind": "Method",
    "detail": "Function (Value)",
    "insertText": "IncrementWorkerCount()"
  },
  {
    "label": "DecrementWorkerCount()",
    "kind": "Method",
    "detail": "Function (Value)",
    "insertText": "DecrementWorkerCount()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (Value)",
    "insertText": "Load()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (private : std::atomic<uint32_t> value_ { 0 } ; } ; class JoinFlag { public : uint32_t kNotWaiting = 0 ; uint32_t kWaitingForWorkerToSignal = 1 ; uint32_t kWaitingForWorkerToYield = 3 ;)",
    "insertText": "static_assert((kWaitingForWorkerToYield & kWaitingForWorkerToSignal) == kWaitingForWorkerToSignal, \"\")"
  },
  {
    "label": "JoinFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinFlag()"
  },
  {
    "label": "IsWaiting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWaiting()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetWaiting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWaiting()"
  },
  {
    "label": "ShouldWorkerYield()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldWorkerYield()"
  },
  {
    "label": "ShouldWorkerSignal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldWorkerSignal()"
  },
  {
    "label": "JobTaskSource()",
    "kind": "Method",
    "detail": "Function (private : std::atomic<uint32_t> value_ { kNotWaiting } ; } ; ~)",
    "insertText": "JobTaskSource()"
  },
  {
    "label": "WaitForParticipationOpportunity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForParticipationOpportunity() EXCLUSIVE_LOCKS_REQUIRED(worker_lock_)"
  },
  {
    "label": "GetMaxConcurrency()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetMaxConcurrency(size_t worker_count)"
  },
  {
    "label": "WillRunTask()",
    "kind": "Method",
    "detail": "Function (RunStatus)",
    "insertText": "WillRunTask()"
  },
  {
    "label": "TakeTask()",
    "kind": "Method",
    "detail": "Function (Task)",
    "insertText": "TakeTask(TaskSource::Transaction* transaction)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (Task)",
    "insertText": "Clear(TaskSource::Transaction* transaction)"
  },
  {
    "label": "DidProcessTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DidProcessTask(TaskSource::Transaction* transaction)"
  },
  {
    "label": "WillReEnqueue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillReEnqueue(TimeTicks now, TaskSource::Transaction* transaction)"
  },
  {
    "label": "OnBecomeReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBecomeReady()"
  },
  {
    "label": "UniversalSuccessor()",
    "kind": "Method",
    "detail": "Function (CheckedLock worker_lock_ {)",
    "insertText": "UniversalSuccessor()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (State state_)",
    "insertText": "GUARDED_BY(worker_lock_)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (std::atomic<uint32_t> assigned_task_ids_ { 0 } ; const Location from_here_ ; RepeatingCallback<)",
    "insertText": "size_t(size_t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "void(JobDelegate*)"
  }
]