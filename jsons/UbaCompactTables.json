[
  {
    "label": "BinaryReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryReader"
  },
  {
    "label": "BinaryWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryWriter"
  },
  {
    "label": "StringKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StringKey"
  },
  {
    "label": "CompactPathTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompactPathTable"
  },
  {
    "label": "Version",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Version"
  },
  {
    "label": "CompactCasKeyTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompactCasKeyTable"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Value"
  },
  {
    "label": "CompactPathTable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaHash . h \" # include \" UbaMemory . h \" namespace uba { struct BinaryReader ; struct BinaryWriter ; struct StringKey ; class CompactPathTable { public : enum Version : u8 { V0,V1 } ;)",
    "insertText": "CompactPathTable(u64 reserveSize, Version version, bool caseSensitive, u64 reservePathCount = 0, u64 reserveSegmentCount = 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "Add(const tchar* str, u64 strLen, u32* outRequiredCasTableSize = nullptr)"
  },
  {
    "label": "AddNoLock()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "AddNoLock(const tchar* str, u64 strLen)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetString(StringBufferBase& out, u64 offset)"
  },
  {
    "label": "GetMemory()",
    "kind": "Method",
    "detail": "Function (u8*)",
    "insertText": "GetMemory()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetSize()"
  },
  {
    "label": "ReadMem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadMem(BinaryReader& reader, bool populateLookup)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(CompactPathTable& other)"
  },
  {
    "label": "GetPathCount()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetPathCount()"
  },
  {
    "label": "GetSegmentCount()",
    "kind": "Method",
    "detail": "Function (} u64)",
    "insertText": "GetSegmentCount()"
  },
  {
    "label": "InternalAdd()",
    "kind": "Method",
    "detail": "Function (} private : u32)",
    "insertText": "InternalAdd(const tchar* str, const tchar* stringKeyString, u64 strLen)"
  },
  {
    "label": "CompactCasKeyTable()",
    "kind": "Method",
    "detail": "Function (ReaderWriterLock m_lock ; MemoryBlock m_mem ; UnorderedMap<StringKey,u32> m_offsets ; UnorderedMap<StringKey,u32> m_segmentOffsets ; u64 m_reserveSize ; Version m_version ; bool m_caseInsensitive ; } ; class CompactCasKeyTable { public :)",
    "insertText": "CompactCasKeyTable(u64 reserveSize, u64 reserveOffsetsCount = 0)"
  },
  {
    "label": "CompactCasKeyTable()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CompactCasKeyTable()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "Add(const CasKey& casKey, u64 stringOffset, u32* outRequiredCasTableSize = nullptr)"
  },
  {
    "label": "TraverseOffsets()",
    "kind": "Method",
    "detail": "Function (template<Func> void)",
    "insertText": "TraverseOffsets(const CasKey& casKey, const Func& func)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKey(CasKey& outKey, u64 offset)"
  },
  {
    "label": "GetPathAndKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPathAndKey(StringBufferBase& outPath, CasKey& outKey, const CompactPathTable& pathTable, u64 offset)"
  },
  {
    "label": "GetLock()",
    "kind": "Method",
    "detail": "Function (ReaderWriterLock&)",
    "insertText": "GetLock()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(CompactCasKeyTable& other)"
  },
  {
    "label": "GetKeyCount()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetKeyCount()"
  },
  {
    "label": "InternalAdd()",
    "kind": "Method",
    "detail": "Function (} private : u32*)",
    "insertText": "InternalAdd(const CasKey& casKey, u64 stringOffset, bool& outAdded)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto findIt = m_offsets .)",
    "insertText": "find(casKey)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Value& value = findIt -> second ;)",
    "insertText": "if(value.count == 1) func(value.single.casKeyOffset)"
  }
]