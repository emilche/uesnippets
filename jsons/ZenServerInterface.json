[
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FServiceConnectSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FServiceConnectSettings"
  },
  {
    "label": "FServiceAutoLaunchSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FServiceAutoLaunchSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FServiceSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FServiceSettings"
  },
  {
    "label": "FZenServiceInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenServiceInstance"
  },
  {
    "label": "FZenLocalServiceRunContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenLocalServiceRunContext"
  },
  {
    "label": "FGCStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGCStatus"
  },
  {
    "label": "FScopeZenService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopeZenService"
  },
  {
    "label": "FZenHttpRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenHttpRequest"
  },
  {
    "label": "IsAutoLaunch()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Future . h \" # include \" Async / Mutex . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" Dom / JsonObject . h \" # include \" Experimental / ZenGlobals . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / Optional . h \" # include \" Misc / TVariant . h \" # include \" Policies / PrettyJsonPrintPolicy . h \" # include \" Serialization / JsonWriter . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / UniquePtr . h \" # if UE_WITH_ZEN # include \" ZenStatistics . h \" # endif # define struct FAnalyticsEventAttribute ; class FCbFieldView ; namespace UE::Zen { struct FServiceConnectSettings { FString HostName ; uint16 Port = 8 5 5 8 ; } ; struct FServiceAutoLaunchSettings { FString DataPath ; FString ExtraArgs ; uint16 DesiredPort = 8 5 5 8 ; bool bShowConsole = false ; bool bIsDefaultDataPath = false ; bool bLimitProcessLifetime = false ; bool bAllowRemoteNetworkService = false ; bool bSendUnattendedBugReports = false ; bool bIsDefaultSharedRunContext = true ; enum class EInstallMode { Copy,Link } InstallMode = EInstallMode::Copy ; } ; struct FServiceSettings { TVariant<FServiceAutoLaunchSettings,FServiceConnectSettings> SettingsVariant ; bool)",
    "insertText": "IsAutoLaunch()"
  },
  {
    "label": "IsConnectExisting()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConnectExisting()"
  },
  {
    "label": "ReadFromConfig()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReadFromConfig()"
  },
  {
    "label": "ReadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFromCompactBinary(FCbFieldView Field)"
  },
  {
    "label": "ReadFromURL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFromURL(FStringView InstanceURL)"
  },
  {
    "label": "WriteToCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToCompactBinary(FCbWriter& Writer)"
  },
  {
    "label": "TryApplyAutoLaunchOverride()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "TryApplyAutoLaunchOverride()"
  },
  {
    "label": "IsLocalAutoLaunched()",
    "kind": "Method",
    "detail": "Function (} ; } # if UE_WITH_ZEN namespace UE::Zen { namespace Private { bool)",
    "insertText": "IsLocalAutoLaunched(FStringView InstanceURL)"
  },
  {
    "label": "GetLocalDataCachePathOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLocalDataCachePathOverride(FString& OutDataPath)"
  },
  {
    "label": "TryGetLocalServiceRunContext()",
    "kind": "Method",
    "detail": "Function (} class FZenServiceInstance ; class FZenLocalServiceRunContext ; bool)",
    "insertText": "TryGetLocalServiceRunContext(FZenLocalServiceRunContext& OutContext)"
  },
  {
    "label": "GetExecutable()",
    "kind": "Method",
    "detail": "Function (class FZenLocalServiceRunContext { public : FString)",
    "insertText": "GetExecutable()"
  },
  {
    "label": "ReadFromJson()",
    "kind": "Method",
    "detail": "Function (} private : FString Executable ; FString CommandlineArguments ; FString WorkingDirectory ; FString DataPath ; bool bShowConsole ; bool)",
    "insertText": "ReadFromJson(FJsonObject& JsonObject)"
  },
  {
    "label": "WriteToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToJson(TJsonWriter<TCHAR, TPrettyJsonPrintPolicy<TCHAR>>& Writer)"
  },
  {
    "label": "ReadFromJsonFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFromJsonFile(const TCHAR* Filename)"
  },
  {
    "label": "WriteToJsonFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteToJsonFile(const TCHAR* Filename)"
  },
  {
    "label": "IsLocalServiceRunning()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsLocalServiceRunning(const TCHAR* DataPath, uint16* OutPort = nullptr)"
  },
  {
    "label": "StartLocalService()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "StartLocalService(const FZenLocalServiceRunContext& Context, const TCHAR* TransientArgs = nullptr)"
  },
  {
    "label": "StopLocalService()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopLocalService(const TCHAR* DataPath, double MaximumWaitDurationSeconds = 25.0)"
  },
  {
    "label": "GetLocalServiceInstallPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalServiceInstallPath()"
  },
  {
    "label": "GetLocalServiceInstallVersion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalServiceInstallVersion(bool bDetailed = true)"
  },
  {
    "label": "GetLocalInstallUtilityPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalInstallUtilityPath()"
  },
  {
    "label": "FScopeZenService()",
    "kind": "Method",
    "detail": "Function (struct FGCStatus { FString Description ; } ; class FScopeZenService { public :)",
    "insertText": "FScopeZenService()"
  },
  {
    "label": "FScopeZenService()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopeZenService(FStringView InstanceURL)"
  },
  {
    "label": "FScopeZenService()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopeZenService(FServiceSettings&& InSettings)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (const FZenServiceInstance&)",
    "insertText": "GetInstance()"
  },
  {
    "label": "IsDefaultServicePresent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultServicePresent()"
  },
  {
    "label": "FZenServiceInstance()",
    "kind": "Method",
    "detail": "Function (class FZenServiceInstance { public :)",
    "insertText": "FZenServiceInstance()"
  },
  {
    "label": "FZenServiceInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FZenServiceInstance(FStringView InstanceURL)"
  },
  {
    "label": "FZenServiceInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FZenServiceInstance(FServiceSettings&& InSettings)"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetPath()"
  },
  {
    "label": "GetURL()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetURL()"
  },
  {
    "label": "IsServiceReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServiceReady()"
  },
  {
    "label": "IsServiceRunningLocally()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServiceRunningLocally()"
  },
  {
    "label": "GetCacheStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCacheStats(FZenCacheStats& Stats)"
  },
  {
    "label": "GetProjectStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetProjectStats(FZenProjectStats& Stats)"
  },
  {
    "label": "GatherAnalytics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GatherAnalytics(TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "GetGCStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGCStatus(FGCStatus& Status)"
  },
  {
    "label": "RequestGC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestGC(const bool* OverrideCollectSmallObjects = nullptr, const uint32* OverrideMaxCacheDuration = nullptr)"
  },
  {
    "label": "AddSponsorProcessIDs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSponsorProcessIDs(TArrayView<uint32> SponsorProcessIDs)"
  },
  {
    "label": "GetAutoLaunchedPort()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetAutoLaunchedPort()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "ConditionalUpdateLocalInstall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionalUpdateLocalInstall(FServiceAutoLaunchSettings::EInstallMode InstallMode)"
  },
  {
    "label": "AutoLaunch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AutoLaunch(const FServiceAutoLaunchSettings& InSettings, const FString& ExecutablePath, const FString& ExecutionContextFilePath, FString& OutHostName, uint16& OutPort)"
  }
]