[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SSlider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSlider"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Input / Reply . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / SlateDelegates . h \" # include \" Widgets / SLeafWidget . h \" class FPaintArgs ; class FSlateWindowElementList ; class SSlider : public SLeafWidget {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SSlider, SLeafWidget, SLATE_API) public: SLATE_BEGIN_ARGS(SSlider) : _IndentHandle(true) , _MouseUsesStep(false) , _RequiresControllerLock(true) , _Locked(false) , _Orientation(EOrientation::Orient_Horizontal) , _SliderBarColor(FLinearColor::White) , _SliderHandleColor(FLinearColor::White) , _Style(&FCoreStyle::Get().GetWidgetStyle<FSliderStyle>(\"Slider\")) , _StepSize(0.01f) , _Value(1.f) , _MinValue(0.0f) , _MaxValue(1.0f) , _IsFocusable(true) , _OnMouseCaptureBegin() , _OnMouseCaptureEnd() , _OnValueChanged()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(bool, IndentHandle ) SLATE_ARGUMENT( bool, MouseUsesStep ) SLATE_ARGUMENT( bool, RequiresControllerLock ) SLATE_ATTRIBUTE( bool, Locked ) SLATE_ARGUMENT( EOrientation, Orientation) SLATE_ATTRIBUTE( FSlateColor, SliderBarColor ) SLATE_ATTRIBUTE( FSlateColor, SliderHandleColor ) SLATE_STYLE_ARGUMENT( FSliderStyle, Style ) SLATE_ATTRIBUTE(float, StepSize) SLATE_ATTRIBUTE( float, Value ) SLATE_ARGUMENT(float, MinValue) SLATE_ARGUMENT(float, MaxValue) SLATE_ARGUMENT(bool, IsFocusable) SLATE_EVENT(FSimpleDelegate, OnMouseCaptureBegin) SLATE_EVENT(FSimpleDelegate, OnMouseCaptureEnd) SLATE_EVENT(FSimpleDelegate, OnControllerCaptureBegin) SLATE_EVENT(FSimpleDelegate, OnControllerCaptureEnd) SLATE_EVENT( FOnFloatValueChanged, OnValueChanged ) SLATE_END_ARGS() SLATE_API SSlider()"
  },
  {
    "label": "SSlider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SSlider()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const SSlider::FArguments& InDeclaration)"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStyle(const FSliderStyle* InStyle)"
  },
  {
    "label": "GetMinValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinValue()"
  },
  {
    "label": "GetNormalizedValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNormalizedValue()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(TAttribute<float> InValueAttribute)"
  },
  {
    "label": "SetMinAndMaxValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinAndMaxValues(float InMinValue, float InMaxValue)"
  },
  {
    "label": "SetIndentHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIndentHandle(TAttribute<bool> InIndentHandle)"
  },
  {
    "label": "SetLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocked(TAttribute<bool> InLocked)"
  },
  {
    "label": "SetOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientation(EOrientation InOrientation)"
  },
  {
    "label": "SetSliderBarColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSliderBarColor(TAttribute<FSlateColor> InSliderBarColor)"
  },
  {
    "label": "SetSliderHandleColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSliderHandleColor(TAttribute<FSlateColor> InSliderHandleColor)"
  },
  {
    "label": "GetStepSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStepSize()"
  },
  {
    "label": "SetStepSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStepSize(TAttribute<float> InStepSize)"
  },
  {
    "label": "SetMouseUsesStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMouseUsesStep(bool MouseUsesStep)"
  },
  {
    "label": "SetRequiresControllerLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequiresControllerLock(bool RequiresControllerLock)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchMoved(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnNavigation()",
    "kind": "Method",
    "detail": "Function (FNavigationReply)",
    "insertText": "OnNavigation(const FGeometry& MyGeometry, const FNavigationEvent& InNavigationEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "IsInteractable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInteractable()"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY TSharedRef<FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "IsLocked()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsLocked()"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CommitValue(float NewValue)"
  },
  {
    "label": "PositionToValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PositionToValue(const FGeometry& MyGeometry, const UE::Slate::FDeprecateVector2DParameter& AbsolutePosition)"
  },
  {
    "label": "GetBarImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetBarImage()"
  },
  {
    "label": "GetThumbImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetThumbImage()"
  },
  {
    "label": "GetValueAttribute()",
    "kind": "Method",
    "detail": "Function (protected : TSlateAttributeRef<float>)",
    "insertText": "GetValueAttribute()"
  },
  {
    "label": "GetIndentHandleAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<bool>)",
    "insertText": "GetIndentHandleAttribute()"
  },
  {
    "label": "GetLockedAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<bool>)",
    "insertText": "GetLockedAttribute()"
  },
  {
    "label": "GetSliderBarColorAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<FSlateColor>)",
    "insertText": "GetSliderBarColorAttribute()"
  },
  {
    "label": "GetSliderHandleColorAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<FSlateColor>)",
    "insertText": "GetSliderHandleColorAttribute()"
  },
  {
    "label": "ResetControllerState()",
    "kind": "Method",
    "detail": "Function (} const FSliderStyle* Style ; EOrientation Orientation ; EMouseCursor::Type CachedCursor ; UE::Slate::FDeprecateVector2DResult PressedScreenSpaceTouchDownPosition ; TAttribute<float> StepSize ; float MinValue ; float MaxValue ; bool bControllerInputCaptured ; bool bMouseUsesStep ; bool bRequiresControllerLock ; bool bIsFocusable ; private : void)",
    "insertText": "ResetControllerState()"
  }
]