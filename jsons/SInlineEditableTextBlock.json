[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "SMultiLineEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiLineEditableTextBox"
  },
  {
    "label": "STextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextBlock"
  },
  {
    "label": "SInlineEditableTextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInlineEditableTextBlock"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" SlateGlobals . h \" # include \" Styling / SlateColor . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / Reply . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / SlateDelegates . h \" # include \" Framework / Text / TextLayout . h \" class FActiveTimerHandle ; class IBreakIterator ; class SEditableTextBox ; class SHorizontalBox ; class SMultiLineEditableTextBox ; class STextBlock ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnBeginTextEdit, const FText&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SInlineEditableTextBlock ) : _Text() , _Style( &FCoreStyle::Get().GetWidgetStyle<FInlineEditableTextBlockStyle>(\"InlineEditableTextBlockStyle\") ) , _Font() , _ColorAndOpacity() , _ShadowOffset() , _ShadowColorAndOpacity() , _HighlightText() , _WrapTextAt(0.0f) , _AutoWrapNonEditText(false) , _AutoWrapMultilineEditText(false) , _Justification(ETextJustify::Left) , _LineBreakPolicy() , _IsReadOnly(false) , _MultiLine(false) , _ModiferKeyForNewLine(EModifierKey::None) , _OverflowPolicy()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, Text ) SLATE_STYLE_ARGUMENT( FInlineEditableTextBlockStyle, Style ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ATTRIBUTE( FSlateColor, ColorAndOpacity ) SLATE_ATTRIBUTE( FVector2D, ShadowOffset ) SLATE_ATTRIBUTE( FLinearColor, ShadowColorAndOpacity ) SLATE_ATTRIBUTE( FText, HighlightText ) SLATE_ATTRIBUTE( float, WrapTextAt ) SLATE_ATTRIBUTE( bool, AutoWrapNonEditText ) SLATE_ATTRIBUTE( bool, AutoWrapMultilineEditText ) SLATE_ATTRIBUTE( ETextJustify::Type, Justification ) SLATE_ARGUMENT( TSharedPtr<IBreakIterator>, LineBreakPolicy ) SLATE_ATTRIBUTE( bool, IsReadOnly ) SLATE_ARGUMENT( bool, MultiLine ) SLATE_ARGUMENT(EModifierKey::Type, ModiferKeyForNewLine) SLATE_EVENT( FOnBeginTextEdit, OnBeginTextEdit ) SLATE_EVENT( FOnTextCommitted, OnTextCommitted ) SLATE_EVENT(FSimpleDelegate, OnEnterEditingMode) SLATE_EVENT(FSimpleDelegate, OnExitEditingMode) SLATE_EVENT( FIsSelected, IsSelected ) SLATE_EVENT( FOnVerifyTextChanged, OnVerifyTextChanged ) SLATE_ARGUMENT(TOptional<ETextOverflowPolicy>, OverflowPolicy) SLATE_END_ARGS() SLATE_API ~SInlineEditableTextBlock()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "EnterEditingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterEditingMode()"
  },
  {
    "label": "ExitEditingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitEditingMode()"
  },
  {
    "label": "IsInEditMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInEditMode()"
  },
  {
    "label": "SetReadOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReadOnly(const TAttribute<bool>& bInIsReadOnly)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TAttribute< FText >& InText)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const FString& InText)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetText()"
  },
  {
    "label": "SetHighlightText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighlightText(const TAttribute<FText>& InText)"
  },
  {
    "label": "SetWrapTextAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrapTextAt(const TAttribute<float>& InWrapTextAt)"
  },
  {
    "label": "SetOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverflowPolicy(TOptional<ETextOverflowPolicy> InOverflowPolicy)"
  },
  {
    "label": "OnTextChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnTextChanged(const FText& InText)"
  },
  {
    "label": "OnTextBoxCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextBoxCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "CancelEditMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelEditMode()"
  },
  {
    "label": "GetEditableTextWidget()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<STextBlock> TextBlock ; TSharedPtr<SEditableTextBox> TextBox ; # if WITH_FANCY_TEXT TSharedPtr<SMultiLineEditableTextBox> MultiLineTextBox ; # endif FSimpleDelegate OnEnterEditingMode ; FSimpleDelegate OnExitEditingMode ; FOnBeginTextEdit OnBeginTextEditDelegate ; FOnTextCommitted OnTextCommittedDelegate ; FIsSelected IsSelected ; TSharedPtr<SHorizontalBox> HorizontalBox ; FOnVerifyTextChanged OnVerifyTextChanged ; TAttribute<FText> Text ; TAttribute<bool> bIsReadOnly ; TWeakPtr<SWidget> WidgetToFocus ; private : TSharedPtr<SWidget>)",
    "insertText": "GetEditableTextWidget()"
  },
  {
    "label": "SetEditableText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditableText(const TAttribute< FText >& InNewText)"
  },
  {
    "label": "SetTextBoxError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextBoxError(const FText& ErrorText)"
  },
  {
    "label": "TriggerEditMode()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "TriggerEditMode(double InCurrentTime, float InDeltaTime)"
  }
]