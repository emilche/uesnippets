[
  {
    "label": "RDATPart",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RDATPart"
  },
  {
    "label": "StringBufferPart",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringBufferPart"
  },
  {
    "label": "IndexArraysPart",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndexArraysPart"
  },
  {
    "label": "CmpIndices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CmpIndices"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "RawBytesPart",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RawBytesPart"
  },
  {
    "label": "RDATTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RDATTable"
  },
  {
    "label": "GetPartSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / DxilContainer / DxilRuntimeReflection . h \" # include \" dxc / Support / WinIncludes . h \" # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / raw_ostream . h \" # include<set> # include<string> # include<unordered_map> # include<vector> namespace hlsl { class RDATPart { public : uint32_t)",
    "insertText": "GetPartSize()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} RDAT::RuntimeDataPartType)",
    "insertText": "GetType()"
  },
  {
    "label": "StringBufferPart()",
    "kind": "Method",
    "detail": "Function (} } ; class StringBufferPart : public RDATPart { private : std::unordered_map<std::string,uint32_t> m_Map ; std::vector<llvm::StringRef> m_List ; size_t m_Size = 0 ; public :)",
    "insertText": "StringBufferPart()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(\"\")"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "Insert(llvm::StringRef str)"
  },
  {
    "label": "CmpIndices()",
    "kind": "Method",
    "detail": "Function (} ; class IndexArraysPart : public RDATPart { private : std::vector<uint32_t> m_IndexBuffer ; struct CmpIndices { const IndexArraysPart& Table ;)",
    "insertText": "CmpIndices(const IndexArraysPart &table) : Table(table)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(uint32_t left, uint32_t right)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (const uint32_t* pLeft = Table . m_IndexBuffer .)",
    "insertText": "data()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32_t count =* pLeft ;)",
    "insertText": "for(unsigned i = 0; i < count; i++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + pLeft ; + + pRight ;)",
    "insertText": "if(*pLeft != *pRight) return (*pLeft < *pRight)"
  },
  {
    "label": "IndexArraysPart()",
    "kind": "Method",
    "detail": "Function (} return false ; } } ; std::set<uint32_t,CmpIndices> m_IndexSet ; public :)",
    "insertText": "IndexArraysPart() : m_IndexBuffer(), m_IndexSet(*this)"
  },
  {
    "label": "AddIndex()",
    "kind": "Method",
    "detail": "Function (} template<class iterator> uint32_t)",
    "insertText": "AddIndex(iterator begin, iterator end)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (uint32_t newOffset = m_IndexBuffer .)",
    "insertText": "size()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (m_IndexBuffer .)",
    "insertText": "push_back(0)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (m_IndexBuffer .)",
    "insertText": "insert(m_IndexBuffer.end(), begin, end)"
  },
  {
    "label": "newOffset()",
    "kind": "Method",
    "detail": "Function (m_IndexBuffer [)",
    "insertText": "newOffset(m_IndexBuffer.size() - newOffset)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (auto insertResult = m_IndexSet .)",
    "insertText": "insert(newOffset)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_IndexBuffer .)",
    "insertText": "resize(newOffset)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Write(void *ptr)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(ptr, m_IndexBuffer.data(), m_IndexBuffer.size() * sizeof(uint32_t))"
  },
  {
    "label": "RawBytesPart()",
    "kind": "Method",
    "detail": "Function (} } ; class RawBytesPart : public RDATPart { private : std::unordered_map<std::string,uint32_t> m_Map ; std::vector<llvm::StringRef> m_List ; size_t m_Size = 0 ; public :)",
    "insertText": "RawBytesPart()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "Insert(const void *pData, size_t dataSize)"
  },
  {
    "label": "InsertBytesRef()",
    "kind": "Method",
    "detail": "Function (RDAT::BytesRef)",
    "insertText": "InsertBytesRef(const void *pData, size_t dataSize)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (RDAT::BytesRef ret = { } ; ret . Offset =)",
    "insertText": "Insert(pData, dataSize)"
  },
  {
    "label": "InsertImpl()",
    "kind": "Method",
    "detail": "Function (} ; class RDATTable : public RDATPart { protected : std::unordered_map<std::string,uint32_t> m_map ; std::vector<llvm::StringRef> m_rows ; size_t m_RecordStride = 0 ; bool m_bDeduplicationEnabled = false ; RDAT::RuntimeDataPartType m_Type = RDAT::RuntimeDataPartType::Invalid ; uint32_t)",
    "insertText": "InsertImpl(const void *ptr, size_t size)"
  },
  {
    "label": "RDATTable()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "RDATTable()"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetType(RDAT::RuntimeDataPartType type)"
  },
  {
    "label": "GetRecordStride()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetRecordStride()"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (m_bDeduplicationEnabled = bEnabled ; } uint32_t)",
    "insertText": "Count()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} template<RecordType> uint32_t)",
    "insertText": "Insert(const RecordType &data)"
  }
]