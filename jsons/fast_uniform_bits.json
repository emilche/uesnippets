[
  {
    "label": "SimplifiedLoopTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SimplifiedLoopTag"
  },
  {
    "label": "RejectionLoopTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RejectionLoopTag"
  },
  {
    "label": "FastUniformBits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FastUniformBits"
  },
  {
    "label": "IsPowerOfTwoOrZero()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_FAST_UNIFORM_BITS_H_ # define ABSL_RANDOM_INTERNAL_FAST_UNIFORM_BITS_H_ # include<cstddef> # include<cstdint> # include<limits> # include<type_traits> # include \" absl / base / config . h \" # include \" absl / meta / type_traits . h \" # include \" absl / random / internal / traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { template<UIntType> bool)",
    "insertText": "IsPowerOfTwoOrZero(UIntType n)"
  },
  {
    "label": "RangeSize()",
    "kind": "Method",
    "detail": "Function (} template<URBG> URBG::result_type)",
    "insertText": "RangeSize()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using result_type = URBG::result_type ;)",
    "insertText": "static_assert((URBG::max)() != (URBG::min)(), \"URBG range cannot be 0.\")"
  },
  {
    "label": "IntegerLog2()",
    "kind": "Method",
    "detail": "Function (} template<UIntType> UIntType)",
    "insertText": "IntegerLog2(UIntType n)"
  },
  {
    "label": "NumBits()",
    "kind": "Method",
    "detail": "Function (} template<URBG> size_t)",
    "insertText": "NumBits()"
  },
  {
    "label": "MaskFromShift()",
    "kind": "Method",
    "detail": "Function (} template<UIntType> UIntType)",
    "insertText": "MaskFromShift(size_t n)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (1 } ; } struct SimplifiedLoopTag { } ; struct RejectionLoopTag { } ; template<UIntType = uint64_t> class FastUniformBits { public : using result_type = UIntType ;)",
    "insertText": "result_type(min)()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "static_assert(IsUnsigned<UIntType>::value, \"Class-template FastUniformBits<> must be parameterized using \" \"an unsigned type.\")"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (template<URBG> result_type)",
    "insertText": "Generate(URBG& g, SimplifiedLoopTag)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (template<URBG> result_type)",
    "insertText": "Generate(URBG& g, RejectionLoopTag)"
  },
  {
    "label": "IsPowerOfTwoOrZero()",
    "kind": "Method",
    "detail": "Function (using tag = absl::conditional_t<)",
    "insertText": "IsPowerOfTwoOrZero(RangeSize<URBG>())"
  },
  {
    "label": "URBG()",
    "kind": "Method",
    "detail": "Function (size_t kResultBits = std::numeric_limits<result_type>::digits ; size_t kUrbgBits = NumBits<)",
    "insertText": "URBG()"
  },
  {
    "label": "kIters()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "kIters(kResultBits / kUrbgBits) + (kResultBits % kUrbgBits != 0)"
  },
  {
    "label": "kShift()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "kShift(kIters == 1)"
  },
  {
    "label": "kMin()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "kMin(URBG::min)()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (result_type r = static_cast<)",
    "insertText": "result_type(g() - kMin)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (r = static_cast<)",
    "insertText": "result_type(r << kShift) + static_cast<result_type>(g() - kMin)"
  },
  {
    "label": "kA()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "kA(kResultBits / kUrbgBits) + ((kResultBits % kUrbgBits) != 0)"
  },
  {
    "label": "kARejection()",
    "kind": "Method",
    "detail": "Function (size_t kABits = kResultBits / kA ; urbg_result_type)",
    "insertText": "kARejection((kUrbgRange >> kABits) << kABits)"
  },
  {
    "label": "kTotalIters()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "kTotalIters((kUrbgRange - kARejection) <= (kARejection / kA)) ? kA : (kA + 1)"
  },
  {
    "label": "kTotalIters()",
    "kind": "Method",
    "detail": "Function (size_t kSmallIters =)",
    "insertText": "kTotalIters(kResultBits % kTotalIters)"
  },
  {
    "label": "kSmallRejection()",
    "kind": "Method",
    "detail": "Function (size_t kSmallBits = kResultBits / kTotalIters ; urbg_result_type)",
    "insertText": "kSmallRejection((kUrbgRange >> kSmallBits) << kSmallBits)"
  },
  {
    "label": "kLargeRejection()",
    "kind": "Method",
    "detail": "Function (size_t kLargeBits = kSmallBits + 1 ; urbg_result_type)",
    "insertText": "kLargeRejection((kUrbgRange >> kLargeBits) << kLargeBits)"
  },
  {
    "label": "urbg_result_type()",
    "kind": "Method",
    "detail": "Function (size_t kSmallShift = kSmallBits % kResultBits ; auto kSmallMask = MaskFromShift<)",
    "insertText": "urbg_result_type(kSmallShift)"
  },
  {
    "label": "urbg_result_type()",
    "kind": "Method",
    "detail": "Function (size_t kLargeShift = kLargeBits % kResultBits ; auto kLargeMask = MaskFromShift<)",
    "insertText": "urbg_result_type(kLargeShift)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (result_type s = 0 ;)",
    "insertText": "for(size_t n = 0; n < kSmallIters; ++n)"
  },
  {
    "label": "g()",
    "kind": "Method",
    "detail": "Function (urbg_result_type v ; do { v =)",
    "insertText": "g()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(v >= kSmallRejection)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s(s << kSmallShift) + static_cast<result_type>(v & kSmallMask)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(size_t n = kSmallIters; n < kTotalIters; ++n)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(v >= kLargeRejection)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s(s << kLargeShift) + static_cast<result_type>(v & kLargeMask)"
  }
]