[
  {
    "label": "UMeshPaintSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshPaintSettings"
  },
  {
    "label": "UPaintBrushSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPaintBrushSettings"
  },
  {
    "label": "UMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshComponent"
  },
  {
    "label": "IMeshPaintGeometryAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMeshPaintGeometryAdapter"
  },
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MESHPAINT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESHPAINT_API"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "IMeshPainter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / EngineBaseTypes . h \" # include \" InputCoreTypes . h \" class UMeshPaintSettings ; class UPaintBrushSettings ; class UMeshComponent ; class IMeshPaintGeometryAdapter ; class FScopedTransaction ; class FUICommandList ; class FViewport ; class FPrimitiveDrawInterface ; class FEditorViewportClient ; class FSceneView ; class AActor ; struct FHitResult ; enum class EMeshPaintAction : uint8 ; class IMeshPainter { public :)",
    "insertText": "IMeshPainter()"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "IsPainting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPainting()"
  },
  {
    "label": "UnregisterCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCommands(TSharedRef<FUICommandList> CommandList)"
  },
  {
    "label": "Paint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Paint(FViewport* Viewport, const FVector& InCameraOrigin, const FVector& InRayOrigin, const FVector& InRayDirection)"
  },
  {
    "label": "Paint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Paint(FViewport* Viewport, const FVector& InCameraOrigin, const TArrayView<TPair<FVector, FVector>>& Rays)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FEditorViewportClient* InViewportClient, FViewport* InViewport, FKey InKey, EInputEvent InEvent)"
  },
  {
    "label": "FinishPainting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishPainting()"
  },
  {
    "label": "ActorSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorSelected(AActor* Actor)"
  },
  {
    "label": "ActorDeselected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorDeselected(AActor* Actor)"
  },
  {
    "label": "GetMeshAdapterForComponent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMeshPaintGeometryAdapter>)",
    "insertText": "GetMeshAdapterForComponent(const UMeshComponent* Component)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetBrushSettings()",
    "kind": "Method",
    "detail": "Function (UPaintBrushSettings*)",
    "insertText": "GetBrushSettings()"
  },
  {
    "label": "GetPainterSettings()",
    "kind": "Method",
    "detail": "Function (UMeshPaintSettings*)",
    "insertText": "GetPainterSettings()"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SWidget>)",
    "insertText": "GetWidget()"
  },
  {
    "label": "GetHitResult()",
    "kind": "Method",
    "detail": "Function (const FHitResult)",
    "insertText": "GetHitResult(const FVector& Origin, const FVector& Direction)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "PaintInternal()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "PaintInternal(const FVector& InCameraOrigin, const TArrayView<TPair<FVector, FVector>>& Rays, EMeshPaintAction PaintAction, float PaintStrength)"
  },
  {
    "label": "RenderInteractors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderInteractors(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI, bool bRenderVertices, ESceneDepthPriorityGroup DepthGroup = SDPG_World)"
  },
  {
    "label": "RenderInteractorWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderInteractorWidget(const FVector& InCameraOrigin, const FVector& InRayOrigin, const FVector& InRayDirection, FPrimitiveDrawInterface* PDI, EMeshPaintAction PaintAction, bool bRenderVertices, ESceneDepthPriorityGroup DepthGroup = SDPG_World)"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (protected : bool bArePainting ; float TimeSinceStartedPainting ; float Time ; float WidgetLineThickness ; FLinearColor WidgetLineColor ; FLinearColor VertexPointColor ; FLinearColor HoverVertexPointColor ; TSharedPtr<FUICommandList> UICommandList ; protected : void)",
    "insertText": "BeginTransaction(const FText Description)"
  },
  {
    "label": "EndTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTransaction()"
  },
  {
    "label": "ChangeBrushRadius()",
    "kind": "Method",
    "detail": "Function (FScopedTransaction* PaintTransaction ; private : void)",
    "insertText": "ChangeBrushRadius(float Multiplier)"
  },
  {
    "label": "ChangeBrushStrength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeBrushStrength(float Multiplier)"
  },
  {
    "label": "ChangeBrushFalloff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeBrushFalloff(float Multiplier)"
  }
]