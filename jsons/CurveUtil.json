[
  {
    "label": "GetPrevNext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" SegmentTypes . h \" # include \" LineTypes . h \" # include \" BoxTypes . h \" # include \" SegmentTypes . h \" namespace UE { namespace Geometry { namespace CurveUtil { using namespace UE::Math ; template<RealType,VectorType,bool bLoop> void)",
    "insertText": "GetPrevNext(const TArrayView<const VectorType>& Vertices, int32 Idx, VectorType& OutPrev, VectorType& OutNext)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NextIdx = Idx + 1 ; int32 PrevIdx = Idx - 1 ; int32 NV = Vertices .)",
    "insertText": "Num()"
  },
  {
    "label": "PrevIdx()",
    "kind": "Method",
    "detail": "Function (NextIdx = NextIdx % NV ;)",
    "insertText": "PrevIdx(PrevIdx + NV)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} else { NextIdx =)",
    "insertText": "Min(NV - 1, NextIdx)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (PrevIdx =)",
    "insertText": "Max(0, PrevIdx)"
  },
  {
    "label": "GetVectorsToPrevNext()",
    "kind": "Method",
    "detail": "Function (} OutNext = Vertices [ NextIdx ] ; OutPrev = Vertices [ PrevIdx ] ; } template<RealType,VectorType,bool bLoop> void)",
    "insertText": "GetVectorsToPrevNext(const TArrayView<const VectorType>& Vertices, int32 VertexIndex, VectorType& OutToPrev, VectorType& OutToNext, bool bNormalize)"
  },
  {
    "label": "bLoop()",
    "kind": "Method",
    "detail": "Function (GetPrevNext<RealType,VectorType,)",
    "insertText": "bLoop(Vertices, VertexIndex, OutToPrev, OutToNext)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutToNext - = Vertices [ VertexIndex ] ; OutToPrev - = Vertices [ VertexIndex ] ;)",
    "insertText": "if(bNormalize)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(OutToNext)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(OutToPrev)"
  },
  {
    "label": "GetVectorsToPrevNext()",
    "kind": "Method",
    "detail": "Function (} } template<RealType,VectorType> void)",
    "insertText": "GetVectorsToPrevNext(const TArrayView<const VectorType>& Vertices, int32 VertexIndex, VectorType& OutToPrev, VectorType& OutToNext, bool bNormalize, bool bLoop)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (GetVectorsToPrevNext<RealType,VectorType,)",
    "insertText": "true(Vertices, VertexIndex, OutToPrev, OutToNext, bNormalize)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (} else { GetVectorsToPrevNext<RealType,VectorType,)",
    "insertText": "false(Vertices, VertexIndex, OutToPrev, OutToNext, bNormalize)"
  },
  {
    "label": "Tangent()",
    "kind": "Method",
    "detail": "Function (} } template<RealType,VectorType,bool bLoop> VectorType)",
    "insertText": "Tangent(const TArrayView<const VectorType>& Vertices, int32 Idx)"
  },
  {
    "label": "bLoop()",
    "kind": "Method",
    "detail": "Function (VectorType Prev,Next ; GetPrevNext<RealType,VectorType,)",
    "insertText": "bLoop(Vertices, Idx, Prev, Next)"
  },
  {
    "label": "Tangent()",
    "kind": "Method",
    "detail": "Function (} template<RealType,VectorType> VectorType)",
    "insertText": "Tangent(const TArrayView<const VectorType>& Vertices, int32 Idx, bool bLoop = false)"
  },
  {
    "label": "GetNormal_FaceAvg2()",
    "kind": "Method",
    "detail": "Function (} template<RealType,VectorType,bool bLoop> VectorType)",
    "insertText": "GetNormal_FaceAvg2(const TArrayView<const VectorType>& Vertices, int VertexIndex)"
  },
  {
    "label": "bLoop()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType> ToPrev,ToNext ; GetVectorsToPrevNext<RealType,VectorType,)",
    "insertText": "bLoop(Vertices, VertexIndex, ToPrev, ToNext, true)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType>)",
    "insertText": "N(PerpCW(ToNext) - PerpCW(ToPrev))"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (RealType Len =)",
    "insertText": "Normalize(N)"
  },
  {
    "label": "SignedArea2()",
    "kind": "Method",
    "detail": "Function (} else { return N ; } } template<RealType,VectorType> RealType)",
    "insertText": "SignedArea2(const TArrayView<const VectorType>& Vertices)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (const TVector2<RealType>& V1 = Vertices [ PrevIdx ] ; const TVector2<RealType>& V2 = Vertices [ Idx ] ; Area + = V1 . X* V2 . Y - V1 . Y* V2 . X ; } return static_cast<)",
    "insertText": "RealType(Area * 0.5)"
  },
  {
    "label": "WindingIntegral2()",
    "kind": "Method",
    "detail": "Function (} template<RealType,VectorType> RealType)",
    "insertText": "WindingIntegral2(const TArrayView<const VectorType>& Vertices, const VectorType& QueryPoint)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (VectorType A = Vertices [ N - 1 ] - QueryPoint,B =)",
    "insertText": "Zero()"
  },
  {
    "label": "Atan2()",
    "kind": "Method",
    "detail": "Function (B = Vertices [ Idx ] - QueryPoint ; Sum + = TMathUtil<RealType)",
    "insertText": "Atan2(A.X * B.Y - A.Y * B.X, A.X * B.X + A.Y * B.Y)"
  },
  {
    "label": "Contains2()",
    "kind": "Method",
    "detail": "Function (A = B ; } return Sum / FMathd::TwoPi ; } template<RealType,VectorType> bool)",
    "insertText": "Contains2(const TArrayView<const VectorType>& Vertices, const VectorType& QueryPoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (B = Vertices [ Idx ] ;)",
    "insertText": "if(A.Y <= QueryPoint.Y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + WindingNumber ; } } } else {)",
    "insertText": "if(B.Y <= QueryPoint.Y)"
  },
  {
    "label": "ArcLength()",
    "kind": "Method",
    "detail": "Function (- - WindingNumber ; } } } A = B ; } return WindingNumber ! = 0 ; } template<RealType,VectorType> RealType)",
    "insertText": "ArcLength(const TArrayView<const VectorType>& Vertices, bool bLoop = false)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (Sum + =)",
    "insertText": "Distance(Vertices[i], Vertices[i-1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bLoop && NV > 1)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (Sum + =)",
    "insertText": "Distance(Vertices[NV-1], Vertices[0])"
  },
  {
    "label": "FindNearestIndex()",
    "kind": "Method",
    "detail": "Function (} return Sum ; } template<RealType,VectorType> int)",
    "insertText": "FindNearestIndex(const TArrayView<const VectorType>& Vertices, const VectorType& V)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (RealType dSqr =)",
    "insertText": "DistanceSquared(Vertices[i], V)"
  },
  {
    "label": "ClipConvexToBounds()",
    "kind": "Method",
    "detail": "Function (dNear = dSqr ; iNearest = i ; } } return iNearest ; } template<RealType,VectorType,bool bLoop = true,int ClipDims = 2> void)",
    "insertText": "ClipConvexToBounds(TArray<VectorType>& Vertices, VectorType Min, VectorType Max)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<VectorType> Clipped ; Clipped .)",
    "insertText": "Reserve(Vertices.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (VectorType SidePt = Min ;)",
    "insertText": "for(int32 SideIdx = 0; SideIdx < 2; ++SideIdx, SidePt = Max)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 SideSign = - SideIdx* 2 + 1 ;)",
    "insertText": "for(int32 ClipDim = 0; ClipDim < ClipDims; ++ClipDim)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (int32 StartCur,StartPrev ; if)",
    "insertText": "constexpr(bLoop)"
  },
  {
    "label": "PrevDist()",
    "kind": "Method",
    "detail": "Function (StartCur = 0 ; StartPrev = VertNum - 1 ; } else { StartCur = 1 ; StartPrev = 0 ; } RealType)",
    "insertText": "PrevDist(Vertices[StartPrev][ClipDim] - ClipCoord) * RealType(SideSign)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Clipped .)",
    "insertText": "Add(Vertices[0])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int32 CurIdx = StartCur, PrevIdx = StartPrev; CurIdx < VertNum; PrevIdx = CurIdx++)"
  },
  {
    "label": "CurDist()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "CurDist(Vertices[CurIdx][ClipDim] - ClipCoord) * RealType(SideSign)"
  },
  {
    "label": "CurDist()",
    "kind": "Method",
    "detail": "Function (RealType T =)",
    "insertText": "CurDist(CurDist - PrevDist)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (VectorType LerpVec =)",
    "insertText": "Lerp(Vertices[CurIdx], Vertices[PrevIdx], T)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LerpVec [ ClipDim ] = ClipCoord ; Clipped .)",
    "insertText": "Add(LerpVec)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} Clipped .)",
    "insertText": "Add(Vertices[CurIdx])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(PrevDist > 0)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} PrevDist = CurDist ; })",
    "insertText": "Swap(Vertices, Clipped)"
  },
  {
    "label": "ClipConvexToPlane()",
    "kind": "Method",
    "detail": "Function (} } } template<RealType,VectorType,bool bLoop = true> bool)",
    "insertText": "ClipConvexToPlane(TArray<VectorType>& Vertices, const TPlane<RealType>& Plane, TArray<VectorType>& OutClipped, bool bKeepPositiveSide = false)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutClipped .)",
    "insertText": "Reset(Vertices.Num())"
  },
  {
    "label": "bKeepPositiveSide()",
    "kind": "Method",
    "detail": "Function (StartCur = 0 ; StartPrev = VertNum - 1 ; } else { StartCur = 1 ; StartPrev = 0 ; } RealType SideSign =)",
    "insertText": "bKeepPositiveSide(RealType)1 : (RealType)"
  },
  {
    "label": "PlaneDot()",
    "kind": "Method",
    "detail": "Function (RealType PrevDist = Plane .)",
    "insertText": "PlaneDot(Vertices[StartPrev]) * RealType(SideSign)"
  },
  {
    "label": "PlaneDot()",
    "kind": "Method",
    "detail": "Function (RealType CurDist = Plane .)",
    "insertText": "PlaneDot(Vertices[CurIdx]) * RealType(SideSign)"
  },
  {
    "label": "IsConvex2()",
    "kind": "Method",
    "detail": "Function (} } PrevDist = CurDist ; } return bWasClipped ; } template<RealType,VectorType> bool)",
    "insertText": "IsConvex2(const TArrayView<const VectorType> Vertices, RealType Tolerance = TMathUtil<RealType>::ZeroTolerance, bool bDegenerateIsConvex = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UsedPrevIdx - - ;)",
    "insertText": "if(UsedPrevIdx < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (VectorType ToNext = Vertices [ Next ] - Vertices [ Cur ] ;)",
    "insertText": "if(!ToNext.Normalize(0))"
  },
  {
    "label": "SignedAngleR()",
    "kind": "Method",
    "detail": "Function (continue ; } RealType Angle =)",
    "insertText": "SignedAngleR(FromPrev, ToNext)"
  },
  {
    "label": "bSeenNeg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bSeenNeg(Angle < -Tolerance)"
  },
  {
    "label": "bSeenPos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bSeenPos(Angle > Tolerance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AngleSum + = Angle ; FromPrev = ToNext ; Cur = Next ; NonZeroEdges + + ; })",
    "insertText": "if(NonZeroEdges < 3)"
  },
  {
    "label": "ProjectPointInsideConvexPolygon()",
    "kind": "Method",
    "detail": "Function (} template<RealType> bool)",
    "insertText": "ProjectPointInsideConvexPolygon(const TArrayView<const TVector2<RealType>> Vertices, TVector2<RealType>& ProjPt, bool bReverseOrientation = false)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (const TVector2<RealType>& V1 = Vertices [ PrevIdx ] ; const TVector2<RealType>& V2 = Vertices [ Idx ] ; TVector2<RealType> ToPt = ProjPt - V1 ; TVector2<RealType> Normal = PerpCW<)",
    "insertText": "RealType(V2 - V1)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType Orient = ToPt .)",
    "insertText": "Dot(Normal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bOutside = bReverseOrientation ? Orient<0 : Orient> 0 ;)",
    "insertText": "if(bOutside)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (RealType SqLen = Normal .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "InPlaceSmooth()",
    "kind": "Method",
    "detail": "Function (bProjected = true ; ProjPt - = Normal* Orient / SqLen ; } } } return bProjected ; } template<RealType,VectorType> void)",
    "insertText": "InPlaceSmooth(TArrayView<VectorType> Vertices, int StartIdx, int EndIdx, double Alpha, int NumIterations, bool bClosed)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i(ii % N)"
  },
  {
    "label": "iPrev()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "iPrev(ii == 0)"
  },
  {
    "label": "iNext()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "iNext(ii + 1)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> prev = Vertices [ iPrev ],next = Vertices [ iNext ] ; TVector<RealType>)",
    "insertText": "c(prev + next)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (Vertices [)",
    "insertText": "i(1 - Alpha) * Vertices[i] + (Alpha)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "for(int Iter = 0; Iter < NumIterations; ++Iter)"
  },
  {
    "label": "IterativeSmooth()",
    "kind": "Method",
    "detail": "Function (} } } } template<RealType,VectorType> void)",
    "insertText": "IterativeSmooth(TArrayView<VectorType> Vertices, int StartIdx, int EndIdx, double Alpha, int NumIterations, bool bClosed)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (TArray<TVector<RealType>> Buffer ; Buffer .)",
    "insertText": "SetNumZeroed(N)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int ii = StartIdx; ii < EndIdx; ++ii)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int i = StartIdx; i < EndIdx && i < N; ++i)"
  }
]