[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FLayersBroadcast",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayersBroadcast"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "UEditorEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorEngine"
  },
  {
    "label": "ULayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULayer"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "IFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFilter"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "ULayersSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULayersSubsystem"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EditorSubsystem . h \" # include \" LayersSubsystem . generated . h \" class AActor ; class FLayersBroadcast ; class FLevelEditorViewportClient ; class UEditorEngine ; class ULayer ; class ULevel ; class UWorld ; template<TItemType> class IFilter ; namespace ELayersAction { enum Type { Add,Modify,Delete,Rename,Reset,} ; })",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FSubsystemCollectionBase& Collection)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "ULayersSubsystem()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ULayersSubsystem()"
  },
  {
    "label": "DECLARE_EVENT_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_ThreeParams(ULayersSubsystem, FOnLayersChanged, const ELayersAction::Type , const TWeakObjectPtr< ULayer >& , const FName&)"
  },
  {
    "label": "OnLayersChanged()",
    "kind": "Method",
    "detail": "Function (FOnLayersChanged&)",
    "insertText": "OnLayersChanged()"
  },
  {
    "label": "OnActorsLayersChanged()",
    "kind": "Method",
    "detail": "Function (FOnActorsLayersChanged&)",
    "insertText": "OnActorsLayersChanged()"
  },
  {
    "label": "AddActorsToLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddActorsToLayer(const TArray< TWeakObjectPtr< AActor > >& Actors, const FName& LayerName)"
  },
  {
    "label": "AddActorsToLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddActorsToLayers(const TArray< TWeakObjectPtr< AActor > >& Actors, const TArray< FName >& LayerNames)"
  },
  {
    "label": "RemoveActorsFromLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveActorsFromLayer(const TArray< TWeakObjectPtr< AActor > >& Actors, const FName& LayerName, const bool bUpdateStats = true)"
  },
  {
    "label": "RemoveActorsFromLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveActorsFromLayers(const TArray< TWeakObjectPtr< AActor > >& Actors, const TArray< FName >& LayerNames, const bool bUpdateStats = true)"
  },
  {
    "label": "SelectActorsInLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectActorsInLayer(const FName& LayerName, const bool bSelect, const bool bNotify, const bool bSelectEvenIfHidden, const TSharedPtr< ActorFilter >& Filter)"
  },
  {
    "label": "SelectActorsInLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectActorsInLayers(const TArray< FName >& LayerNames, const bool bSelect, const bool bNotify, const bool bSelectEvenIfHidden, const TSharedPtr< ActorFilter >& Filter)"
  },
  {
    "label": "UpdatePerViewVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePerViewVisibility(FLevelEditorViewportClient* ViewportClient, const FName& LayerThatChanged = NAME_Skip)"
  },
  {
    "label": "UpdateActorViewVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorViewVisibility(FLevelEditorViewportClient* ViewportClient, AActor* Actor, const bool bReregisterIfDirty = true)"
  },
  {
    "label": "RemoveViewFromActorViewVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewFromActorViewVisibility(FLevelEditorViewportClient* ViewportClient)"
  },
  {
    "label": "AppendActorsFromLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendActorsFromLayer(const FName& LayerName, TArray< AActor* >& InOutActors, const TSharedPtr< ActorFilter >& Filter)"
  },
  {
    "label": "AppendActorsFromLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendActorsFromLayer(const FName& LayerName, TArray< TWeakObjectPtr< AActor > >& InOutActors, const TSharedPtr< ActorFilter >& Filter = TSharedPtr< ActorFilter >(nullptr))"
  },
  {
    "label": "AppendActorsFromLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendActorsFromLayers(const TArray< FName >& LayerNames, TArray< AActor* >& InOutActors, const TSharedPtr< ActorFilter >& Filter)"
  },
  {
    "label": "AppendActorsFromLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendActorsFromLayers(const TArray< FName >& LayerNames, TArray< TWeakObjectPtr< AActor > >& InOutActors, const TSharedPtr< ActorFilter >& Filter = TSharedPtr< ActorFilter >(nullptr))"
  },
  {
    "label": "GetActorsFromLayer()",
    "kind": "Method",
    "detail": "Function (TArray<AActor*>)",
    "insertText": "GetActorsFromLayer(const FName& LayerName, const TSharedPtr< ActorFilter >& Filter)"
  },
  {
    "label": "GetActorsFromLayers()",
    "kind": "Method",
    "detail": "Function (TArray<AActor*>)",
    "insertText": "GetActorsFromLayers(const TArray< FName >& LayerNames, const TSharedPtr< ActorFilter >& Filter)"
  },
  {
    "label": "AddAllLayersTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllLayersTo(TArray< TWeakObjectPtr< ULayer > >& OutLayers)"
  },
  {
    "label": "PostUndoRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndoRedo()"
  },
  {
    "label": "AddActorToStats()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddActorToStats(ULayer* Layer, AActor* Actor)"
  },
  {
    "label": "RemoveActorFromStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorFromStats(ULayer* Layer, AActor* Actor)"
  },
  {
    "label": "EnsureLayerExists()",
    "kind": "Method",
    "detail": "Function (ULayer*)",
    "insertText": "EnsureLayerExists(const FName& LayerName)"
  }
]