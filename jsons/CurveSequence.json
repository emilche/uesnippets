[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCurveSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveSequence"
  },
  {
    "label": "FSlateCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCurve"
  },
  {
    "label": "FSlateCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Animation / CurveHandle . h \" # include \" Containers / Ticker . h \" class FActiveTimerHandle ; class SWidget ; enum class EActiveTimerReturnType : uint8 ; struct FCurveSequence : public TSharedFromThis<FCurveSequence> { public : struct FSlateCurve {)",
    "insertText": "FSlateCurve(float InStartTime, float InDurationSeconds, const ECurveEaseFunction InEaseFunction ) : DurationSeconds(InDurationSeconds) , StartTime(InStartTime) , EaseFunction(InEaseFunction)"
  },
  {
    "label": "FCurveSequence()",
    "kind": "Method",
    "detail": "Function (} float DurationSeconds ; float StartTime ; ECurveEaseFunction EaseFunction ; } ;)",
    "insertText": "FCurveSequence()"
  },
  {
    "label": "FCurveSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCurveSequence(const float InStartTimeSeconds, const float InDurationSeconds, const ECurveEaseFunction InEaseFunction = ECurveEaseFunction::Linear)"
  },
  {
    "label": "AddCurve()",
    "kind": "Method",
    "detail": "Function (FCurveHandle)",
    "insertText": "AddCurve(const float InStartTimeSeconds, const float InDurationSeconds, const ECurveEaseFunction InEaseFunction = ECurveEaseFunction::Linear)"
  },
  {
    "label": "AddCurveRelative()",
    "kind": "Method",
    "detail": "Function (FCurveHandle)",
    "insertText": "AddCurveRelative(const float InOffset, const float InDurationSecond, const ECurveEaseFunction InEaseFunction = ECurveEaseFunction::Linear)"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play(const TSharedRef<SWidget>& InOwnerWidget, bool bPlayLooped = false, const float StartAtTime = 0.0f, bool bRequiresActiveTimer = true)"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play(const FTickerDelegate& InDelegate, bool bPlayLooped = false, const float StartAtTime = 0.0f)"
  },
  {
    "label": "PlayReverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayReverse(const TSharedRef<SWidget>& InOwnerWidget, bool bPlayLooped = false, const float StartAtTime = 0.0f, bool bRequiresActiveTimer = true)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume()"
  },
  {
    "label": "PlayRelative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayRelative(const TSharedRef<SWidget>& InOwnerWidget, bool bForward)"
  },
  {
    "label": "IsPlaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlaying()"
  },
  {
    "label": "GetSequenceTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSequenceTime()"
  },
  {
    "label": "IsInReverse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInReverse()"
  },
  {
    "label": "IsForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForward()"
  },
  {
    "label": "JumpToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToStart()"
  },
  {
    "label": "JumpToEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToEnd()"
  },
  {
    "label": "IsAtStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAtStart()"
  },
  {
    "label": "IsAtEnd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAtEnd()"
  },
  {
    "label": "IsLooping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLooping()"
  },
  {
    "label": "GetLerp()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLerp()"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (const FCurveSequence::FSlateCurve&)",
    "insertText": "GetCurve(int32 CurveIndex)"
  },
  {
    "label": "SetStartTime()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetStartTime(double InStartTime)"
  },
  {
    "label": "RegisterActiveTimerIfNeeded()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegisterActiveTimerIfNeeded(TSharedRef<SWidget> InOwnerWidget)"
  },
  {
    "label": "TickPlay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TickPlay(float InDeltaTime, FTickerDelegate InUserDelegate)"
  },
  {
    "label": "EnsureSlateTickDuringAnimation()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "EnsureSlateTickDuringAnimation(double InCurrentTime, float InDeltaTime)"
  }
]