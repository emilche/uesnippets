[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCurveSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveSequence"
  },
  {
    "label": "FSlateCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCurve"
  },
  {
    "label": "FCurveSequence()",
    "kind": "Method",
    "detail": "Function (SLATECORE_API)",
    "insertText": "FCurveSequence( )"
  },
  {
    "label": "FCurveSequence()",
    "kind": "Method",
    "detail": "Function (SLATECORE_API)",
    "insertText": "FCurveSequence( const float InStartTimeSeconds, const float InDurationSeconds, const ECurveEaseFunction InEaseFunction = ECurveEaseFunction::Linear  )"
  },
  {
    "label": "AddCurve()",
    "kind": "Method",
    "detail": "Function (FCurveHandle)",
    "insertText": "AddCurve( const float InStartTimeSeconds, const float InDurationSeconds, const ECurveEaseFunction InEaseFunction = ECurveEaseFunction::Linear )"
  },
  {
    "label": "AddCurveRelative()",
    "kind": "Method",
    "detail": "Function (FCurveHandle)",
    "insertText": "AddCurveRelative( const float InOffset, const float InDurationSecond, const ECurveEaseFunction InEaseFunction = ECurveEaseFunction::Linear )"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play( const TSharedRef<SWidget>& InOwnerWidget, bool bPlayLooped = false, const float StartAtTime = 0.0f, bool bRequiresActiveTimer = true)"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play(const FTickerDelegate& InDelegate, bool bPlayLooped = false, const float StartAtTime = 0.0f)"
  },
  {
    "label": "PlayReverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayReverse( const TSharedRef<SWidget>& InOwnerWidget, bool bPlayLooped = false, const float StartAtTime = 0.0f, bool bRequiresActiveTimer = true)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse( )"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume( )"
  },
  {
    "label": "PlayRelative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayRelative(const TSharedRef<SWidget>& InOwnerWidget, bool bForward)"
  },
  {
    "label": "JumpToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToStart( )"
  },
  {
    "label": "JumpToEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToEnd( )"
  },
  {
    "label": "SetStartTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartTime( double InStartTime )"
  },
  {
    "label": "RegisterActiveTimerIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActiveTimerIfNeeded(TSharedRef<SWidget> InOwnerWidget)"
  },
  {
    "label": "TickPlay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TickPlay(float InDeltaTime, FTickerDelegate InUserDelegate)"
  },
  {
    "label": "EnsureSlateTickDuringAnimation()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "EnsureSlateTickDuringAnimation( double InCurrentTime, float InDeltaTime )"
  }
]