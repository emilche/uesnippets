[
  {
    "label": "SRowHeaderCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SRowHeaderCell"
  },
  {
    "label": "IPropertyTableCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableCell"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Layout / SBorder . h \" # include \" IPropertyTable . h \" # include \" Widgets / Images / SImage . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / SOverlay . h \" # include \" PropertyEditorHelpers . h \" # include \" IPropertyTableCell . h \" # include \" Widgets / Layout / SBox . h \" class SRowHeaderCell : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SRowHeaderCell ) : _Style( TEXT(\"PropertyTable\"))"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FName, Style ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TSharedRef< class IPropertyTableCell >& InCell, const TSharedPtr< FPropertyEditor >& PropertyEditor)"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Style = InArgs . _Style ; Cell = InCell ; CellBackground =)",
    "insertText": "GetBrush(Style, \".CellBorder\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<EPropertyButton::Type> RequiredButtons ;)",
    "insertText": "if(PropertyEditor.IsValid())"
  },
  {
    "label": "GetRequiredPropertyButtons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRequiredPropertyButtons(PropertyEditor->GetPropertyNode(), RequiredButtons)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget> Content =)",
    "insertText": "SNew(SImage) .Image( FAppStyle::GetBrush(\"Icons.DirtyBadge\") ) .DesiredSizeOverride(FVector2D{ 16.0f }) .ColorAndOpacity(FSlateColor::UseForeground()) .Visibility( this, &SRowHeaderCell::GetDirtyImageVisibility)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (Editor = PropertyEditor ; Content =)",
    "insertText": "SNew(SOverlay ) +SOverlay::Slot() [ Content ] +SOverlay::Slot() [ PropertyEditorHelpers::MakePropertyButton( EPropertyButton::Insert_Delete_Duplicate, PropertyEditor.ToSharedRef())"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} ChildSlot [)",
    "insertText": "SNew(SBox ) .HeightOverride( 20.0f ) .HAlign(HAlign_Center) .VAlign(VAlign_Center)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<IPropertyTable> Table = Cell ->)",
    "insertText": "GetTable()"
  },
  {
    "label": "SetLastClickedCell()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetLastClickedCell(Cell)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeBox(OutDrawElements, LayerId, AllottedGeometry.ToPaintGeometry(), CellBackground, ESlateDrawEffect::None, CellBackground->GetTint( InWidgetStyle ) * InWidgetStyle.GetColorAndOpacityTint())"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "OnPaint(Args, AllottedGeometry, MyCullingRect, OutDrawElements, LayerId, InWidgetStyle, bParentEnabled)"
  },
  {
    "label": "GetBorder()",
    "kind": "Method",
    "detail": "Function (} private : const FSlateBrush*)",
    "insertText": "GetBorder()"
  },
  {
    "label": "GetDirtyImageVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetDirtyImageVisibility()"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (const TWeakObjectPtr<UObject> Object = Cell ->)",
    "insertText": "GetObject()"
  }
]