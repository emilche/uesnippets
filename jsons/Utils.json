[
  {
    "label": "Vector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vector"
  },
  {
    "label": "StringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringBuilder"
  },
  {
    "label": "Dest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Dest"
  },
  {
    "label": "Source",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Source"
  },
  {
    "label": "DOUBLE_CONVERSION_ASSERT()",
    "kind": "Method",
    "detail": "Function (# ifndef DOUBLE_CONVERSION_UTILS_H_ # define DOUBLE_CONVERSION_UTILS_H_ # include<cstdlib> # include<cstring> # include<cassert> # ifndef DOUBLE_CONVERSION_ASSERT # define)",
    "insertText": "DOUBLE_CONVERSION_ASSERT(condition) \\ assert(condition)"
  },
  {
    "label": "DOUBLE_CONVERSION_UNIMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef DOUBLE_CONVERSION_UNIMPLEMENTED # define)",
    "insertText": "DOUBLE_CONVERSION_UNIMPLEMENTED() (abort()) #endif #ifndef DOUBLE_CONVERSION_NO_RETURN #ifdef _MSC_VER #define DOUBLE_CONVERSION_NO_RETURN __declspec(noreturn) #else #define DOUBLE_CONVERSION_NO_RETURN __attribute__((noreturn)) #endif #endif #ifndef DOUBLE_CONVERSION_UNREACHABLE #ifdef _MSC_VER void DOUBLE_CONVERSION_NO_RETURN abort_noreturn()"
  },
  {
    "label": "abort_noreturn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "abort_noreturn()"
  },
  {
    "label": "abort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "abort()"
  },
  {
    "label": "DOUBLE_CONVERSION_UNREACHABLE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DOUBLE_CONVERSION_UNREACHABLE() (abort_noreturn()) #else #define DOUBLE_CONVERSION_UNREACHABLE() (abort()) #endif #endif #ifdef __has_attribute # define DOUBLE_CONVERSION_HAS_ATTRIBUTE(x) __has_attribute(x) #else # define DOUBLE_CONVERSION_HAS_ATTRIBUTE(x) 0 #endif #ifndef DOUBLE_CONVERSION_UNUSED #if DOUBLE_CONVERSION_HAS_ATTRIBUTE(unused) #define DOUBLE_CONVERSION_UNUSED __attribute__((unused)) #else #define DOUBLE_CONVERSION_UNUSED #endif #endif #if DOUBLE_CONVERSION_HAS_ATTRIBUTE(uninitialized) #define DOUBLE_CONVERSION_STACK_UNINITIALIZED __attribute__((uninitialized)) #else #define DOUBLE_CONVERSION_STACK_UNINITIALIZED #endif #if defined(_M_X64) || defined(__x86_64__) || \\ defined(__ARMEL__) || defined(__avr32__) || defined(_M_ARM) || defined(_M_ARM64) || \\ defined(__hppa__) || defined(__ia64__) || \\ defined(__mips__) || \\ defined(__loongarch__) || \\ defined(__nios2__) || defined(__ghs) || \\ defined(__powerpc__) || defined(__ppc__) || defined(__ppc64__) || \\ defined(_POWER) || defined(_ARCH_PPC) || defined(_ARCH_PPC64) || \\ defined(__sparc__) || defined(__sparc) || defined(__s390__) || \\ defined(__SH4__) || defined(__alpha__) || \\ defined(_MIPS_ARCH_MIPS32R2) || defined(__ARMEB__) ||\\ defined(__AARCH64EL__) || defined(__aarch64__) || defined(__AARCH64EB__) || \\ defined(__riscv) || defined(__e2k__) || \\ defined(__or1k__) || defined(__arc__) || \\ defined(__microblaze__) || defined(__XTENSA__) || \\ defined(__EMSCRIPTEN__) || defined(__wasm32__) #define DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS 1 #elif defined(__mc68000__) || \\ defined(__pnacl__) || defined(__native_client__) #undef DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS #elif defined(_M_IX86) || defined(__i386__) || defined(__i386) #if defined(_WIN32) #define DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS 1 #else #undef DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS #endif #else #error Target architecture was not detected as supported by Double-Conversion. #endif #if defined(_WIN32) && !defined(__MINGW32__)"
  },
  {
    "label": "DOUBLE_CONVERSION_UINT64_2PART_C()",
    "kind": "Method",
    "detail": "Function (typedef unsigned char uint8_t ; typedef short int16_t ; typedef unsigned short uint16_t ; typedef int int32_t ; typedef unsigned int uint32_t ; typedef __int64 int64_t ; typedef unsigned __int64 uint64_t ; # else # include<stdint . h> # endif typedef uint16_t uc16 ; # define)",
    "insertText": "DOUBLE_CONVERSION_UINT64_2PART_C(a, b) (((static_cast<uint64_t>(a) << 32) + 0x##b##u)) #ifndef DOUBLE_CONVERSION_ARRAY_SIZE #define DOUBLE_CONVERSION_ARRAY_SIZE(a) \\ ((sizeof(a) / sizeof(*(a))) / \\ static_cast<size_t>(!(sizeof(a) % sizeof(*(a))))) #endif #ifndef DOUBLE_CONVERSION_DISALLOW_COPY_AND_ASSIGN #define DOUBLE_CONVERSION_DISALLOW_COPY_AND_ASSIGN(TypeName) \\ TypeName(const TypeName&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "operator(const TypeName&) #endif #ifndef DOUBLE_CONVERSION_DISALLOW_IMPLICIT_CONSTRUCTORS #define DOUBLE_CONVERSION_DISALLOW_IMPLICIT_CONSTRUCTORS(TypeName) \\ TypeName()"
  },
  {
    "label": "DOUBLE_CONVERSION_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DOUBLE_CONVERSION_DISALLOW_COPY_AND_ASSIGN(TypeName)"
  },
  {
    "label": "StrLength()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StrLength(const char* string)"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (size_t length =)",
    "insertText": "strlen(string)"
  },
  {
    "label": "Vector()",
    "kind": "Method",
    "detail": "Function (} template<T> class Vector { public :)",
    "insertText": "Vector() : start_(NULL), length_(0)"
  },
  {
    "label": "Vector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vector(T* data, int len) : start_(data), length_(len)"
  },
  {
    "label": "SubVector()",
    "kind": "Method",
    "detail": "Function (} Vector<T>)",
    "insertText": "SubVector(int from, int to)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "length()"
  },
  {
    "label": "StringBuilder()",
    "kind": "Method",
    "detail": "Function (- - length_ ; } private : T* start_ ; int length_ ; } ; class StringBuilder { public :)",
    "insertText": "StringBuilder(char* buffer, int buffer_size) : buffer_(buffer, buffer_size), position_(0)"
  },
  {
    "label": "StringBuilder()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "StringBuilder()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "size()"
  },
  {
    "label": "position()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "position()"
  },
  {
    "label": "AddCharacter()",
    "kind": "Method",
    "detail": "Function (position_ = 0 ; } void)",
    "insertText": "AddCharacter(char c)"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (buffer_ [ position_ + + ] = c ; } void)",
    "insertText": "AddString(const char* s)"
  },
  {
    "label": "AddSubstring()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubstring(s, StrLength(s))"
  },
  {
    "label": "AddSubstring()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSubstring(const char* s, int n)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(&buffer_[position_], s, static_cast<size_t>(n))"
  },
  {
    "label": "AddPadding()",
    "kind": "Method",
    "detail": "Function (position_ + = n ; } void)",
    "insertText": "AddPadding(char c, int count)"
  },
  {
    "label": "AddCharacter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCharacter(c)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (} } char*)",
    "insertText": "Finalize()"
  },
  {
    "label": "DOUBLE_CONVERSION_ASSERT()",
    "kind": "Method",
    "detail": "Function (buffer_ [ position_ ] = ' \\ 0 ' ;)",
    "insertText": "DOUBLE_CONVERSION_ASSERT(strlen(buffer_.start()) == static_cast<size_t>(position_))"
  },
  {
    "label": "DOUBLE_CONVERSION_ASSERT()",
    "kind": "Method",
    "detail": "Function (position_ = - 1 ;)",
    "insertText": "DOUBLE_CONVERSION_ASSERT(is_finalized())"
  },
  {
    "label": "is_finalized()",
    "kind": "Method",
    "detail": "Function (} private : Vector<char> buffer_ ; int position_ ; bool)",
    "insertText": "is_finalized()"
  },
  {
    "label": "BitCast()",
    "kind": "Method",
    "detail": "Function (} ; template<class Dest,class Source> Dest)",
    "insertText": "BitCast(const Source& source)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# if __cplusplus> = 2 0 1 1 0 3 L)",
    "insertText": "static_assert(sizeof(Dest) == sizeof(Source), \"source and destination size mismatch\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# else DOUBLE_CONVERSION_UNUSED typedef char VerifySizesAreEqual [)",
    "insertText": "sizeof(Dest) == sizeof(Source)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (# endif Dest dest ;)",
    "insertText": "memmove(&dest, &source, sizeof(dest))"
  }
]