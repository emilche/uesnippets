[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "OArrayProperty()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_OArrayProperty_h # define Alembic_Abc_OArrayProperty_h # include<Alembic / Util / Export . h> # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / Base . h> # include<Alembic / Abc / Argument . h> # include<Alembic / Abc / OBaseProperty . h> # include<Alembic / Abc / OCompoundProperty . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT OArrayProperty : public OBasePropertyT<AbcA::ArrayPropertyWriterPtr> { public : typedef OArrayProperty this_type ;)",
    "insertText": "OArrayProperty() : OBasePropertyT<AbcA::ArrayPropertyWriterPtr>()"
  },
  {
    "label": "OArrayProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OArrayProperty(OCompoundProperty iParent, const std::string &iName, const AbcA::DataType &iDataType, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument(), const Argument &iArg2 = Argument())"
  },
  {
    "label": "OArrayProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OArrayProperty(AbcA::ArrayPropertyWriterPtr iPtr, const Argument &iArg0 = Argument() ) : OBasePropertyT<AbcA::ArrayPropertyWriterPtr>( iPtr, GetErrorHandlerPolicy( iPtr, iArg0 ))"
  },
  {
    "label": "OArrayProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OArrayProperty(AbcA::ArrayPropertyWriterPtr iPtr, WrapExistingFlag iWrapFlag, const Argument &iArg0 = Argument() ) : OBasePropertyT<AbcA::ArrayPropertyWriterPtr>( iPtr, GetErrorHandlerPolicy( iPtr, iArg0 ))"
  },
  {
    "label": "OArrayProperty()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "OArrayProperty()"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(const AbcA::ArraySample &iSample)"
  },
  {
    "label": "setFromPrevious()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFromPrevious()"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(uint32_t iIndex)"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(AbcA::TimeSamplingPtr iTime)"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (OCompoundProperty)",
    "insertText": "getParent()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "init(AbcA::CompoundPropertyWriterPtr iParentObject, const std::string &iName, const AbcA::DataType &iDataType, ErrorHandler::Policy iParentPolicy, const Argument &iArg0, const Argument &iArg1, const Argument &iArg2)"
  }
]