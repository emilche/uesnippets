[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FModuleContextInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleContextInfo"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FTemplateCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTemplateCategory"
  },
  {
    "label": "FGameProjectGenerationModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameProjectGenerationModule"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AddToProjectConfig . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" ModuleDescriptor . h \" # include \" Modules / ModuleInterface . h \" # include \" Modules / ModuleManager . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" class FText ; class UClass ; struct FModuleContextInfo ; struct FSlateBrush ; struct FTemplateCategory ; class FGameProjectGenerationModule : public IModuleInterface { public : typedef TMap<FName,TSharedPtr<FTemplateCategory>> FTemplateCategoryMap ; void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FGameProjectGenerationModule&)",
    "insertText": "Get()"
  },
  {
    "label": "FGameProjectGenerationModule()",
    "kind": "Method",
    "detail": "Function (const FName ModuleName = \" GameProjectGeneration \" ; return FModuleManager::LoadModuleChecked<)",
    "insertText": "FGameProjectGenerationModule(ModuleName)"
  },
  {
    "label": "CreateGameProjectDialog()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class SWidget>)",
    "insertText": "CreateGameProjectDialog(bool bAllowProjectOpening, bool bAllowProjectCreate)"
  },
  {
    "label": "CreateNewClassDialog()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SWidget>)",
    "insertText": "CreateNewClassDialog(const UClass* InClass)"
  },
  {
    "label": "OpenAddCodeToProjectDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenAddCodeToProjectDialog(const FAddToProjectConfig& Config = FAddToProjectConfig())"
  },
  {
    "label": "OpenAddBlueprintToProjectDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenAddBlueprintToProjectDialog(const FAddToProjectConfig& Config)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FGameProjectGenerationModule, FAddCodeToProjectDialogOpenedEvent)"
  },
  {
    "label": "OnAddCodeToProjectDialogOpened()",
    "kind": "Method",
    "detail": "Function (FAddCodeToProjectDialogOpenedEvent&)",
    "insertText": "OnAddCodeToProjectDialogOpened()"
  },
  {
    "label": "CheckForOutOfDateGameProjectFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForOutOfDateGameProjectFile()"
  },
  {
    "label": "UpdateGameProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateGameProject(const FString& ProjectFile, const FString& EngineIdentifier, FText& OutFailReason)"
  },
  {
    "label": "UpdateCodeProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCodeProject(FText& OutFailReason, FText& OutFailLog)"
  },
  {
    "label": "ProjectHasCodeFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProjectHasCodeFiles()"
  },
  {
    "label": "DetermineModuleIncludePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DetermineModuleIncludePath(const FModuleContextInfo& ModuleInfo, const FString& FileRelativeTo)"
  },
  {
    "label": "GetCurrentProjectModules()",
    "kind": "Method",
    "detail": "Function (const TArray<FModuleContextInfo>&)",
    "insertText": "GetCurrentProjectModules()"
  },
  {
    "label": "IsValidBaseClassForCreation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidBaseClassForCreation(const UClass* InClass, const FModuleContextInfo& InModuleInfo)"
  },
  {
    "label": "IsValidBaseClassForCreation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidBaseClassForCreation(const UClass* InClass, const TArray<FModuleContextInfo>& InModuleInfoArray)"
  },
  {
    "label": "GetProjectSourceDirectoryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetProjectSourceDirectoryInfo(int32& OutNumFiles, int64& OutDirectorySize)"
  },
  {
    "label": "CheckAndWarnProjectFilenameValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAndWarnProjectFilenameValid()"
  },
  {
    "label": "GenerateBasicSourceCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateBasicSourceCode(TArray<FString>& OutCreatedFiles, FText& OutFailReason)"
  },
  {
    "label": "UpdateSupportedTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSupportedTargetPlatforms(const FName& InPlatformName, const bool bIsSupported)"
  },
  {
    "label": "ClearSupportedTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSupportedTargetPlatforms()"
  },
  {
    "label": "GetCategory()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<const FTemplateCategory>)",
    "insertText": "GetCategory(FName Type)"
  },
  {
    "label": "GetAllTemplateCategories()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllTemplateCategories(TArray<TSharedPtr<FTemplateCategory>>& OutCategories)"
  },
  {
    "label": "GenerateValueArray()",
    "kind": "Method",
    "detail": "Function (TemplateCategories .)",
    "insertText": "GenerateValueArray(OutCategories)"
  },
  {
    "label": "LoadTemplateCategories()",
    "kind": "Method",
    "detail": "Function (} private : FAddCodeToProjectDialogOpenedEvent AddCodeToProjectDialogOpenedEvent ; FTemplateCategoryMap TemplateCategories ; void)",
    "insertText": "LoadTemplateCategories()"
  }
]