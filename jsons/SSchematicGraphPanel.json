[
  {
    "label": "SSchematicGraphPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSchematicGraphPanel"
  },
  {
    "label": "SSchematicGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSchematicGraphNode"
  },
  {
    "label": "ANIMATIONEDITORWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANIMATIONEDITORWIDGETS_API"
  },
  {
    "label": "FSchematicGraphModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSchematicGraphModel"
  },
  {
    "label": "FSchematicLinkWidgetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSchematicLinkWidgetInfo"
  },
  {
    "label": "FPerNodeCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerNodeCache"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" SchematicGraphModel . h \" # include \" SNodePanel . h \" # include \" TickableEditorObject . h \" # include \" Framework / Animation / AnimatedAttribute . h \" class SSchematicGraphPanel ; class SSchematicGraphNode ; class FSchematicGraphNodeDragDropOp : public FDragDropOperation { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FSchematicGraphNodeDragDropOp, FDragDropOperation) static TSharedRef<FSchematicGraphNodeDragDropOp> New(TArray<SSchematicGraphNode*> InSchematicGraphNodes, const TArray<FGuid>& InElements)"
  },
  {
    "label": "FSchematicGraphNodeDragDropOp()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSchematicGraphNodeDragDropOp()"
  },
  {
    "label": "GetDefaultDecorator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetDefaultDecorator()"
  },
  {
    "label": "HasElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasElements()"
  },
  {
    "label": "GetElements()",
    "kind": "Method",
    "detail": "Function (} const TArray<FGuid>&)",
    "insertText": "GetElements()"
  },
  {
    "label": "GetJoinedDecoratorLabels()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetJoinedDecoratorLabels()"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (private : TArray<SSchematicGraphNode*> SchematicGraphNodes ; TArray<FGuid> Elements ; } ; class SSchematicGraphNode : public SNodePanel::SNode { public : typedef TAnimatedAttribute<FVector2d> FVector2dAttribute ; typedef TAnimatedAttribute<float> FFloatAttribute ; typedef TAnimatedAttribute<FLinearColor> FLinearColorAttribute ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnClicked, SSchematicGraphNode*, const FPointerEvent&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnBeginDrag, SSchematicGraphNode*, const TSharedPtr<FDragDropOperation>&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnEndDrag, SSchematicGraphNode*, const TSharedPtr<FDragDropOperation>&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnDrop, SSchematicGraphNode*, const FDragDropEvent&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SSchematicGraphNode)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(const FSchematicGraphNode*, NodeData) SLATE_ARGUMENT(TSharedPtr<FVector2dAttribute>, Position) SLATE_ARGUMENT(TSharedPtr<FVector2dAttribute>, Size) SLATE_ARGUMENT(TSharedPtr<FFloatAttribute>, Scale) SLATE_ATTRIBUTE(bool, EnableAutoScale) SLATE_ARGUMENT(TArray<TSharedPtr<FLinearColorAttribute>>, LayerColors) SLATE_ARGUMENT(TFunction<const FSlateBrush*(const FGuid&, int32)>, BrushGetter) SLATE_EVENT(FOnClicked, OnClicked) SLATE_EVENT(FOnBeginDrag, OnBeginDrag) SLATE_EVENT(FOnEndDrag, OnEndDrag) SLATE_EVENT(FOnDrop, OnDrop) SLATE_ATTRIBUTE(FText, ToolTipText) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetNodeVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetNodeVisibility()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (FVector2d)",
    "insertText": "GetPosition()"
  },
  {
    "label": "EnablePositionAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePositionAnimation(bool bEnabled = true)"
  },
  {
    "label": "GetOriginalSize()",
    "kind": "Method",
    "detail": "Function (const FVector2d&)",
    "insertText": "GetOriginalSize()"
  },
  {
    "label": "GetNodeData()",
    "kind": "Method",
    "detail": "Function (} FSchematicGraphNode*)",
    "insertText": "GetNodeData()"
  },
  {
    "label": "GetGuid()",
    "kind": "Method",
    "detail": "Function (} const FGuid)",
    "insertText": "GetGuid()"
  },
  {
    "label": "IsInteractive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInteractive()"
  },
  {
    "label": "IsBeingDragged()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsBeingDragged()"
  },
  {
    "label": "FVector2d()",
    "kind": "Method",
    "detail": "Function (private : bool bIsBeingDragged = false ; const FVector2d DefaultNodeSize =)",
    "insertText": "FVector2d(32.0,32.0)"
  },
  {
    "label": "FSlateBrush()",
    "kind": "Method",
    "detail": "Function (FVector2d OriginalSize = DefaultNodeSize ; TSharedPtr<FSchematicGraphNode> NodeData ; TSharedPtr<FVector2dAttribute> Position ; TOptional<FVector2d> PositionDuringDrag ; TOptional<FVector2d> OffsetDuringDrag ; TSharedPtr<FVector2dAttribute> Size ; TSharedPtr<FFloatAttribute> Scale ; TAttribute<bool> EnableAutoScale ; TOptional<float> AutoScale ; TArray<TSharedPtr<FLinearColorAttribute>> LayerColors ; TFunction<const)",
    "insertText": "FSlateBrush(const FGuid&, int32)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (FOnClicked OnClickedDelegate ; FOnBeginDrag OnBeginDragDelegate ; FOnEndDrag OnEndDragDelegate ; FOnDrop OnDropDelegate ; SSchematicGraphPanel* SchematicGraphPanel = nullptr ; TSharedPtr<FFloatAttribute> ExpansionCircleFactor ; class SSchematicGraphPanel ; class FSchematicGraphModel ; } ; class SSchematicGraphPanel : public SNodePanel,public FTickableEditorObject { public : using FVector2dAttribute = SSchematicGraphNode::FVector2dAttribute ; using FFloatAttribute = SSchematicGraphNode::FFloatAttribute ; using FLinearColorAttribute = SSchematicGraphNode::FLinearColorAttribute ;)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnNodeClicked, SSchematicGraphPanel*, SSchematicGraphNode*, const FPointerEvent&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnBeginDrag, SSchematicGraphPanel*, SSchematicGraphNode*, const TSharedPtr<FDragDropOperation>&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnEndDrag, SSchematicGraphPanel*, SSchematicGraphNode*, const TSharedPtr<FDragDropOperation>&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnEnterDrag, SSchematicGraphPanel*, const TSharedPtr<FDragDropOperation>&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnLeaveDrag, SSchematicGraphPanel*, const TSharedPtr<FDragDropOperation>&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnCancelDrag, SSchematicGraphPanel*, SSchematicGraphNode*, const TSharedPtr<FDragDropOperation>&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnDrop, SSchematicGraphPanel*, SSchematicGraphNode*, const FDragDropEvent&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SSchematicGraphPanel)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, IsOverlay) SLATE_ARGUMENT(FSchematicGraphModel*, GraphData) SLATE_ARGUMENT(int32, PaddingLeft) SLATE_ARGUMENT(int32, PaddingRight) SLATE_ARGUMENT(int32, PaddingTop) SLATE_ARGUMENT(int32, PaddingBottom) SLATE_ARGUMENT(int32, PaddingInterNode) SLATE_EVENT(FOnNodeClicked, OnNodeClicked) SLATE_EVENT(FOnBeginDrag, OnBeginDrag) SLATE_EVENT(FOnEndDrag, OnEndDrag) SLATE_EVENT(FOnEnterDrag, OnEnterDrag) SLATE_EVENT(FOnLeaveDrag, OnLeaveDrag) SLATE_EVENT(FOnCancelDrag, OnCancelDrag) SLATE_EVENT(FOnDrop, OnDrop) SLATE_END_ARGS()"
  },
  {
    "label": "SSchematicGraphPanel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFloatAttribute> Minimum ; TSharedPtr<FFloatAttribute> Maximum ; TSharedPtr<FLinearColorAttribute> Color ; TSharedPtr<FFloatAttribute> Thickness ; } ; ~)",
    "insertText": "SSchematicGraphPanel()"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (OnNodeClickedDelegate .)",
    "insertText": "Unbind()"
  },
  {
    "label": "SetSchematicGraph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSchematicGraph(FSchematicGraphModel* InGraphData)"
  },
  {
    "label": "GetSchematicGraph()",
    "kind": "Method",
    "detail": "Function (const FSchematicGraphModel*)",
    "insertText": "GetSchematicGraph()"
  },
  {
    "label": "RebuildPanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildPanel()"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNode(const FSchematicGraphNode* InNodeToAdd)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNode(const FSchematicGraphNode* InNodeToRemove)"
  },
  {
    "label": "FindNode()",
    "kind": "Method",
    "detail": "Function (const SSchematicGraphNode*)",
    "insertText": "FindNode(const FGuid& InGuid)"
  },
  {
    "label": "AddLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLink(const FSchematicGraphLink* InLinkToAdd)"
  },
  {
    "label": "RemoveLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLink(const FSchematicGraphLink* InLinkToRemove)"
  },
  {
    "label": "FindLink()",
    "kind": "Method",
    "detail": "Function (const FSchematicLinkWidgetInfo*)",
    "insertText": "FindLink(const FGuid& InGuid)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "RemoveAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllNodes()"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetChild()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SSchematicGraphNode>)",
    "insertText": "GetChild(int32 ChildIndex)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "OnNodeClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeClicked(SSchematicGraphNode* Node, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnBeginDragEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginDragEvent(SSchematicGraphNode* Node, const TSharedPtr<FDragDropOperation>& InDragDropEvent)"
  },
  {
    "label": "OnEndDragEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndDragEvent(SSchematicGraphNode* Node, const TSharedPtr<FDragDropOperation>& InDragDropEvent)"
  },
  {
    "label": "OnEnterDragEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterDragEvent(const TSharedPtr<FDragDropOperation>& InDragDropEvent)"
  },
  {
    "label": "OnLeaveDragEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLeaveDragEvent(const TSharedPtr<FDragDropOperation>& InDragDropEvent)"
  },
  {
    "label": "OnCancelDragEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCancelDragEvent(SSchematicGraphNode* Node, const TSharedPtr<FDragDropOperation>& InDragDropEvent)"
  },
  {
    "label": "OnDropEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDropEvent(SSchematicGraphNode* Node, const FDragDropEvent& InDragDropEvent)"
  },
  {
    "label": "HandleNodeDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleNodeDragDetected(FGuid Guid, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetPositionForNode()",
    "kind": "Method",
    "detail": "Function (FVector2d)",
    "insertText": "GetPositionForNode(FGuid InNodeGuid)"
  },
  {
    "label": "GetColorForNode()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColorForNode(FGuid InNodeGuid, int32 InLayerIndex)"
  },
  {
    "label": "GetToolTipForNode()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipForNode(FGuid InNodeGuid)"
  },
  {
    "label": "GetScaleForNode()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScaleForNode(FGuid InNodeGuid)"
  },
  {
    "label": "AdjustPositionWithDPIScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustPositionWithDPIScale(FVector2d& InOutPosition, bool bInverse = false)"
  },
  {
    "label": "IsAutoGroupingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutoGroupingEnabled()"
  },
  {
    "label": "GetAutoGroupingDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAutoGroupingDistance()"
  },
  {
    "label": "IsAutoScaleEnabledForNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutoScaleEnabledForNode(FGuid InNodeGuid)"
  },
  {
    "label": "GetMinimumLinkDistanceForNode()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinimumLinkDistanceForNode(FGuid InLinkGuid, bool bIncludeScale = true)"
  },
  {
    "label": "OnNodeClicked()",
    "kind": "Method",
    "detail": "Function (FOnNodeClicked&)",
    "insertText": "OnNodeClicked()"
  },
  {
    "label": "UpdateAutoGroupingForNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAutoGroupingForNodes()"
  },
  {
    "label": "UpdateAutoScalingForNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAutoScalingForNodes()"
  },
  {
    "label": "FPerNodeCache()",
    "kind": "Method",
    "detail": "Function (bool bIsDragDropping = false ; TSharedPtr<FDragDropOperation> DragDropOpFromOutside ; bool bIsOverlay = false ; int32 PaddingLeft = 0 ; int32 PaddingRight = 0 ; int32 PaddingTop = 0 ; int32 PaddingBottom = 0 ; int32 PaddingInterNode = 0 ; FSchematicGraphModel* GraphData = nullptr ; FOnNodeClicked OnNodeClickedDelegate ; FOnBeginDrag OnBeginDragDelegate ; FOnEndDrag OnEndDragDelegate ; FOnEnterDrag OnEnterDragDelegate ; FOnLeaveDrag OnLeaveDragDelegate ; FOnCancelDrag OnCancelDragDelegate ; FOnDrop OnDropDelegate ; TMap<FGuid,TSharedPtr<SSchematicGraphNode>> NodeByGuid ; struct FPerNodeCache {)",
    "insertText": "FPerNodeCache() : Guid() , Label() , bHasParent(false) , Visibility(ESchematicGraphVisibility::Visible) , bIsAutoScaling(false) , Position(FVector2d::ZeroVector) , Radius(0.0)"
  }
]