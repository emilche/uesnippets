[
  {
    "label": "cpu_ctl_env",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "cpu_ctl_env"
  },
  {
    "label": "__TBB_machine_lg()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_machine_gcc_ia32_common_H # define __TBB_machine_gcc_ia32_common_H # ifndef __TBB_Log2 template<T> intptr_t)",
    "insertText": "__TBB_machine_lg(T x)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(x>0, \"The logarithm of a non-positive value is undefined.\")"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (uintptr_t j,i = x ;)",
    "insertText": "__asm__(\"bsr %1,%0\" : \"=r\"(j) : \"r\"(i))"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"pause;\")"
  },
  {
    "label": "__TBB_Pause()",
    "kind": "Method",
    "detail": "Function (} return ; } # define)",
    "insertText": "__TBB_Pause(V) __TBB_machine_pause(V)"
  },
  {
    "label": "__TBB_machine_time_stamp()",
    "kind": "Method",
    "detail": "Function (namespace internal { typedef uint64_t machine_tsc_t ; } } tbb::internal::machine_tsc_t)",
    "insertText": "__TBB_machine_time_stamp()"
  },
  {
    "label": "_rdtsc()",
    "kind": "Method",
    "detail": "Function (# if __INTEL_COMPILER return)",
    "insertText": "_rdtsc()"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (# else tbb::internal::uint32_t hi,lo ; __asm__)",
    "insertText": "__volatile__(\"rdtsc\" : \"=d\"(hi), \"=a\"(lo))"
  },
  {
    "label": "__TBB_time_stamp()",
    "kind": "Method",
    "detail": "Function (# endif } # define)",
    "insertText": "__TBB_time_stamp() __TBB_machine_time_stamp()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace internal { class cpu_ctl_env { private : int mxcsr ; short x87cw ; const int MXCSR_CONTROL_MASK = ~ 0 x3f ; public : bool)",
    "insertText": "operator(const cpu_ctl_env& ctl)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (# if __TBB_ICC_12_0_INL_ASM_FSTCW_BROKEN cpu_ctl_env loc_ctl ; __asm__)",
    "insertText": "__volatile__(\"stmxcsr %0\\n\\t\" \"fstcw %1\" : \"=m\"(loc_ctl.mxcsr), \"=m\"(loc_ctl.x87cw))"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (* this = loc_ctl ; # else __asm__)",
    "insertText": "__volatile__(\"stmxcsr %0\\n\\t\" \"fstcw %1\" : \"=m\"(mxcsr), \"=m\"(x87cw))"
  },
  {
    "label": "set_env()",
    "kind": "Method",
    "detail": "Function (# endif mxcsr& = MXCSR_CONTROL_MASK ; } void)",
    "insertText": "set_env()"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"ldmxcsr %0\\n\\t\" \"fldcw %1\" : : \"m\"(mxcsr), \"m\"(x87cw))"
  }
]