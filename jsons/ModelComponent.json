[
  {
    "label": "FLightingBuildOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightingBuildOptions"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FStaticLightingPrimitiveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingPrimitiveInfo"
  },
  {
    "label": "FModelElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelElement"
  },
  {
    "label": "UModelComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModelComponent"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "FTriMeshCollisionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriMeshCollisionData"
  },
  {
    "label": "FTriMeshCollisionDataEstimates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriMeshCollisionDataEstimates"
  },
  {
    "label": "FStaticLightingSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingSystem"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / IndirectArray . h \" # include \" UObject / ObjectMacros . h \" # include \" Model . h \" # include \" Interfaces / Interface_CollisionDataProvider . h \" # include \" Engine / TextureStreamingTypes . h \" # include \" Components / PrimitiveComponent . h \" # include \" ModelComponent . generated . h \" class FLightingBuildOptions ; class FPrimitiveSceneProxy ; class ULightComponent ; class UMaterialInterface ; struct FStaticLightingPrimitiveInfo ; class FModelElement ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "InitializeModelComponent()",
    "kind": "Method",
    "detail": "Function (private : TArray<uint16> Nodes ; TIndirectArray<FModelElement> Elements ; public : # if WITH_EDITOR void)",
    "insertText": "InitializeModelComponent(UModel* InModel, uint16 InComponentIndex, uint32 MaskedSurfaceFlags, const TArray<uint16>& InNodes)"
  },
  {
    "label": "CommitSurfaces()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "CommitSurfaces()"
  },
  {
    "label": "BuildRenderData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildRenderData()"
  },
  {
    "label": "ShrinkElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkElements()"
  },
  {
    "label": "GetSurfaceLightMapResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSurfaceLightMapResolution(int32 SurfaceIndex, int32 QualityScale, int32& Width, int32& Height, FMatrix& WorldToMap, TArray<int32>* GatheredNodes=NULL)"
  },
  {
    "label": "CopyElementsFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyElementsFrom(UModelComponent* OtherModelComponent)"
  },
  {
    "label": "CreateRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRenderState_Concurrent(FRegisterComponentContext* Context)"
  },
  {
    "label": "DestroyRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderState_Concurrent()"
  },
  {
    "label": "GetLightMapResolution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLightMapResolution(int32& Width, int32& Height)"
  },
  {
    "label": "GetStaticLightMapResolution()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStaticLightMapResolution()"
  },
  {
    "label": "GetLightAndShadowMapMemoryUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLightAndShadowMapMemoryUsage(int32& LightMapMemoryUsage, int32& ShadowMapMemoryUsage)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "ShouldRecreateProxyOnUpdateTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecreateProxyOnUpdateTransform()"
  },
  {
    "label": "GetStaticLightingInfo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "GetStaticLightingInfo(FStaticLightingPrimitiveInfo& OutPrimitiveInfo,const TArray<ULightComponent*>& InRelevantLights,const FLightingBuildOptions& Options)"
  },
  {
    "label": "AddMapBuildDataGUIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMapBuildDataGUIDs(TSet<FGuid>& InGUIDs)"
  },
  {
    "label": "GetStaticLightingType()",
    "kind": "Method",
    "detail": "Function (# endif ELightMapInteractionType)",
    "insertText": "GetStaticLightingType()"
  },
  {
    "label": "GetUsedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedMaterials(TArray<UMaterialInterface*>& OutMaterials, bool bGetDebugMaterials = false)"
  },
  {
    "label": "GetBodySetup()",
    "kind": "Method",
    "detail": "Function (class UBodySetup*)",
    "insertText": "GetBodySetup()"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterial(int32 MaterialIndex)"
  },
  {
    "label": "GetMaterialFromCollisionFaceIndex()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterialFromCollisionFaceIndex(int32 FaceIndex, int32& SectionIndex)"
  },
  {
    "label": "IsPrecomputedLightingValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecomputedLightingValid()"
  },
  {
    "label": "InvalidateLightingCacheDetailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateLightingCacheDetailed(bool bInvalidateBuildEnqueuedLighting, bool bTranslationOnly)"
  },
  {
    "label": "PropagateLightingScenarioChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateLightingScenarioChange()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "IsNameStableForNetworking()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsNameStableForNetworking()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "GetPhysicsTriMeshData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPhysicsTriMeshData(struct FTriMeshCollisionData* CollisionData, bool InUseAllTriData)"
  },
  {
    "label": "GetTriMeshSizeEstimates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTriMeshSizeEstimates(struct FTriMeshCollisionDataEstimates& OutTriMeshEstimates, bool bInUseAllTriData)"
  },
  {
    "label": "ContainsPhysicsTriMeshData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsPhysicsTriMeshData(bool InUseAllTriData)"
  },
  {
    "label": "WantsNegXTriMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantsNegXTriMesh()"
  },
  {
    "label": "SelectAllSurfaces()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SelectAllSurfaces()"
  },
  {
    "label": "InvalidateCollisionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateCollisionData()"
  },
  {
    "label": "GenerateElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateElements(bool bBuildRenderData)"
  },
  {
    "label": "GetModel()",
    "kind": "Method",
    "detail": "Function (# endif UModel*)",
    "insertText": "GetModel()"
  },
  {
    "label": "ApplyTempElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTempElements(bool bLightingWasSuccessful)"
  },
  {
    "label": "SetDebugLightmapSample()",
    "kind": "Method",
    "detail": "Function (private : TMap<UModelComponent*,TIndirectArray<FModelElement>> TempBSPElements ; void)",
    "insertText": "SetDebugLightmapSample(TArray<UActorComponent*>* Components, UModel* Model, int32 iSurf, FVector ClickLocation)"
  },
  {
    "label": "SupportsStaticLighting()",
    "kind": "Method",
    "detail": "Function (class UModel ; class FStaticLightingSystem ; protected : bool)",
    "insertText": "SupportsStaticLighting()"
  }
]