[
  {
    "label": "PyCodeObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PyCodeObject"
  },
  {
    "label": "_opaque",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_opaque"
  },
  {
    "label": "_line_offsets",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_line_offsets"
  },
  {
    "label": "_PyCodeLocationInfoKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_PyCodeLocationInfoKind"
  },
  {
    "label": "_Py_OPCODE()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_LIMITED_API # ifndef Py_CODE_H # define Py_CODE_H # ifdef __cplusplus \" C \" { # endif typedef uint16_t _Py_CODEUNIT ; # ifdef WORDS_BIGENDIAN # define)",
    "insertText": "_Py_OPCODE(word) ((word) >> 8) # define _Py_OPARG(word) ((word) & 255) # define _Py_MAKECODEUNIT(opcode, oparg) (((opcode)<<8)|(oparg)) #else # define _Py_OPCODE(word) ((word) & 255) # define _Py_OPARG(word) ((word) >> 8) # define _Py_MAKECODEUNIT(opcode, oparg) ((opcode)|((oparg)<<8)) #endif #define _Py_SET_OPCODE(word, opcode) (((unsigned char *)&(word))[0] = (opcode)) #define _PyCode_DEF(SIZE)"
  },
  {
    "label": "co_code_adaptive()",
    "kind": "Method",
    "detail": "Function (\\ PyObject_VAR_HEAD \\ \\ \\ \\ \\ \\ \\ PyObject* co_consts ; \\ PyObject* co_names ; \\ PyObject* co_exceptiontable ; \\ int co_flags ; \\ short co_warmup ; \\ short _co_linearray_entry_size ; \\ \\ \\ int co_argcount ; \\ int co_posonlyargcount ; \\ int co_kwonlyargcount ; \\ int co_stacksize ; \\ int co_firstlineno ; \\ \\ \\ int co_nlocalsplus ; \\ int co_nlocals ; \\ int co_nplaincellvars ; \\ int co_ncellvars ; \\ int co_nfreevars ; \\ \\ PyObject* co_localsplusnames ; \\ PyObject* co_localspluskinds ; \\ PyObject* co_filename ; \\ PyObject* co_name ; \\ PyObject* co_qualname ; \\ PyObject* co_linetable ; \\ PyObject* co_weakreflist ; \\ PyObject* _co_code ; \\ char* _co_linearray ; \\ int _co_firsttraceable ; \\ \\ void* co_extra ; \\ char)",
    "insertText": "co_code_adaptive(SIZE)"
  },
  {
    "label": "_PyCode_DEF()",
    "kind": "Method",
    "detail": "Function (\\ } struct PyCodeObject)",
    "insertText": "_PyCode_DEF(1)"
  },
  {
    "label": "PyAPI_DATA()",
    "kind": "Method",
    "detail": "Function (# define CO_OPTIMIZED 0 x0001 # define CO_NEWLOCALS 0 x0002 # define CO_VARARGS 0 x0004 # define CO_VARKEYWORDS 0 x0008 # define CO_NESTED 0 x0010 # define CO_GENERATOR 0 x0020 # define CO_COROUTINE 0 x0080 # define CO_ITERABLE_COROUTINE 0 x0100 # define CO_ASYNC_GENERATOR 0 x0200 # define CO_FUTURE_DIVISION 0 x20000 # define CO_FUTURE_ABSOLUTE_IMPORT 0 x40000 # define CO_FUTURE_WITH_STATEMENT 0 x80000 # define CO_FUTURE_PRINT_FUNCTION 0 x100000 # define CO_FUTURE_UNICODE_LITERALS 0 x200000 # define CO_FUTURE_BARRY_AS_BDFL 0 x400000 # define CO_FUTURE_GENERATOR_STOP 0 x800000 # define CO_FUTURE_ANNOTATIONS 0 x1000000 # define PY_PARSER_REQUIRES_FUTURE_KEYWORD # define CO_MAXBLOCKS 2 0)",
    "insertText": "PyAPI_DATA(PyTypeObject)"
  },
  {
    "label": "PyCode_Check()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "PyCode_Check(op) Py_IS_TYPE(op, &PyCode_Type) #define PyCode_GetNumFree(op) ((op)->co_nfreevars) #define _PyCode_CODE(CO) ((_Py_CODEUNIT *)(CO)->co_code_adaptive) #define _PyCode_NBYTES(CO) (Py_SIZE(CO) * (Py_ssize_t)sizeof(_Py_CODEUNIT)) PyAPI_FUNC(PyCodeObject *) PyCode_New( int, int, int, int, int, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, int, PyObject *, PyObject *)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyCodeObject *) PyCode_NewWithPosOnlyArgs( int, int, int, int, int, int, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, int, PyObject *, PyObject *)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyCodeObject *) PyCode_NewEmpty(const char *filename, const char *funcname, int firstlineno)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) PyCode_Addr2Line(PyCodeObject *, int)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) PyCode_Addr2Location(PyCodeObject *, int, int *, int *, int *, int *)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (struct _opaque { int computed_line ; const uint8_t* lo_next ; const uint8_t* limit ; } ; typedef struct _line_offsets { int ar_start ; int ar_end ; int ar_line ; struct _opaque opaque ; } PyCodeAddressRange ;)",
    "insertText": "PyAPI_FUNC(int) _PyCode_CheckLineNumber(int lasti, PyCodeAddressRange *bounds)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject*) _PyCode_ConstantKey(PyObject *obj)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject*) PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names, PyObject *lnotab)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _PyCode_GetExtra(PyObject *code, Py_ssize_t index, void **extra)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _PyCode_SetExtra(PyObject *code, Py_ssize_t index, void *extra)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) PyCode_GetCode(PyCodeObject *code)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) PyCode_GetVarnames(PyCodeObject *code)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) PyCode_GetCellvars(PyCodeObject *code)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) PyCode_GetFreevars(PyCodeObject *code)"
  }
]