[
  {
    "label": "TAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttribute"
  },
  {
    "label": "SourceType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SourceType"
  },
  {
    "label": "OtherType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherType"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / TVariant . h \" # include \" Templates / Function . h \" # include \" Templates / Identity . h \" # include \" Templates / SharedPointer . h \" # include \" Delegates / Delegate . h \" template<ObjectType> class TAttribute { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal(ObjectType, FGetter)"
  },
  {
    "label": "TAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TAttribute() : Value() , bIsSet(false) , Getter()"
  },
  {
    "label": "TAttribute()",
    "kind": "Method",
    "detail": "Function (} template<OtherType>)",
    "insertText": "TAttribute(const OtherType& InInitialValue ) : Value( static_cast<ObjectType>(InInitialValue) ) , bIsSet(true) , Getter()"
  },
  {
    "label": "TAttribute()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TAttribute(ObjectType&& InInitialValue) : Value(MoveTemp(InInitialValue)) , bIsSet(true) , Getter()"
  },
  {
    "label": "TAttribute()",
    "kind": "Method",
    "detail": "Function (} template<class SourceType>)",
    "insertText": "TAttribute(TSharedRef< SourceType > InUserObject, typename FGetter::template TConstMethodPtr< SourceType > InMethodPtr ) : Value() , bIsSet(true) , Getter(FGetter::CreateSP(InUserObject, InMethodPtr))"
  },
  {
    "label": "TAttribute()",
    "kind": "Method",
    "detail": "Function (} template<class SourceType>)",
    "insertText": "TAttribute(SourceType* InUserObject, typename FGetter::template TConstMethodPtr< SourceType > InMethodPtr ) : Value() , bIsSet(true) , Getter(FGetter::CreateSP(InUserObject, InMethodPtr))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] TAttribute)",
    "insertText": "Create(const FGetter& InGetter)"
  },
  {
    "label": "TAttribute()",
    "kind": "Method",
    "detail": "Function (const bool bExplicitConstructor = true ; return)",
    "insertText": "TAttribute(InGetter, bExplicitConstructor)"
  },
  {
    "label": "CreateStatic()",
    "kind": "Method",
    "detail": "Function (} template<. . . VarTypes> [ [ nodiscard ] ] TAttribute)",
    "insertText": "CreateStatic(TIdentity_T< typename FGetter::template TFuncPtr< VarTypes... > > InFuncPtr, VarTypes... Vars)"
  },
  {
    "label": "TAttribute()",
    "kind": "Method",
    "detail": "Function (const bool bExplicitConstructor = true ; return)",
    "insertText": "TAttribute(FGetter::CreateStatic( InFuncPtr, Vars... ), bExplicitConstructor)"
  },
  {
    "label": "CreateStatic()",
    "kind": "Method",
    "detail": "Function (} template<FuncPtrType,. . . VarTypes> [ [ nodiscard ] ] TAttribute)",
    "insertText": "CreateStatic(FuncPtrType&& InFuncPtr, VarTypes... Vars)"
  },
  {
    "label": "TAttribute()",
    "kind": "Method",
    "detail": "Function (const bool bExplicitConstructor = true ; return)",
    "insertText": "TAttribute(FGetter::CreateStatic(InFuncPtr, MoveTemp(Vars)...), bExplicitConstructor)"
  },
  {
    "label": "CreateRaw()",
    "kind": "Method",
    "detail": "Function (} template<SourceType,SourceTypeOrBase,. . . PayloadTypes> [ [ nodiscard ] ] TAttribute)",
    "insertText": "CreateRaw(const SourceType* InObject, ObjectType (SourceTypeOrBase::*InMethod)(PayloadTypes...) const, typename TDecay<PayloadTypes>::Type... InputPayload)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (} template<SourceType,SourceTypeOrBase,. . . PayloadTypes> [ [ nodiscard ] ] TAttribute)",
    "insertText": "CreateSP(const SourceType* InObject, ObjectType (SourceTypeOrBase::*InMethod)(PayloadTypes...) const, typename TDecay<PayloadTypes>::Type... InputPayload)"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (} template<LambdaType,. . . PayloadTypes> [ [ nodiscard ] ] TAttribute)",
    "insertText": "CreateLambda(LambdaType&& InCallable, PayloadTypes&&... InputPayload)"
  },
  {
    "label": "CreateSPLambda()",
    "kind": "Method",
    "detail": "Function (} template<UserClass,ESPMode Mode,LambdaType,. . . PayloadTypes> [ [ nodiscard ] ] TAttribute)",
    "insertText": "CreateSPLambda(const TSharedRef<UserClass, Mode>& InUserObjectRef, LambdaType&& InCallable, PayloadTypes&&... InputPayload)"
  },
  {
    "label": "CreateSPLambda()",
    "kind": "Method",
    "detail": "Function (} template<UserClass,LambdaType,. . . PayloadTypes> [ [ nodiscard ] ] TAttribute)",
    "insertText": "CreateSPLambda(UserClass* InUserObject, LambdaType&& InCallable, PayloadTypes&&... InputPayload)"
  },
  {
    "label": "CreateWeakLambda()",
    "kind": "Method",
    "detail": "Function (} template<UserClass,LambdaType,. . . PayloadTypes> [ [ nodiscard ] ] TAttribute)",
    "insertText": "CreateWeakLambda(UserClass* InUserObject, LambdaType&& InCallable, PayloadTypes&&... InputPayload)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} template<class SourceType> [ [ nodiscard ] ] TAttribute<ObjectType>)",
    "insertText": "Create(SourceType* InUserObject, const FName& InFunctionName)"
  },
  {
    "label": "SourceType()",
    "kind": "Method",
    "detail": "Function (TAttribute<ObjectType> Attrib ; Attrib . BindUFunction<)",
    "insertText": "SourceType(InUserObject, InFunctionName)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<OtherType> void)",
    "insertText": "Set(const OtherType& InNewValue)"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (Getter .)",
    "insertText": "Unbind()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value = InNewValue ; bIsSet = true ; } void)",
    "insertText": "Set(ObjectType&& InNewValue)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "MoveTemp(InNewValue)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ; } bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Value = Getter .)",
    "insertText": "Execute()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} return Value ; } const ObjectType&)",
    "insertText": "Get(const ObjectType& DefaultValue)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Bind(const FGetter& InGetter)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ; Getter = InGetter ; } void)",
    "insertText": "Bind(FGetter&& InGetter)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ; Getter =)",
    "insertText": "MoveTemp(InGetter)"
  },
  {
    "label": "BindStatic()",
    "kind": "Method",
    "detail": "Function (} template<. . . VarTypes> void)",
    "insertText": "BindStatic(TIdentity_T< typename FGetter::template TFuncPtr< VarTypes... > > InFuncPtr, VarTypes... Vars)"
  },
  {
    "label": "BindStatic()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ; Getter .)",
    "insertText": "BindStatic(InFuncPtr, Vars...)"
  },
  {
    "label": "BindRaw()",
    "kind": "Method",
    "detail": "Function (} template<class SourceType> void)",
    "insertText": "BindRaw(SourceType* InUserObject, typename FGetter::template TConstMethodPtr< SourceType > InMethodPtr)"
  },
  {
    "label": "BindRaw()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ; Getter .)",
    "insertText": "BindRaw(InUserObject, InMethodPtr)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (} template<class SourceType> void)",
    "insertText": "Bind(TSharedRef< SourceType > InUserObject, typename FGetter::template TConstMethodPtr< SourceType > InMethodPtr)"
  },
  {
    "label": "BindSP()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ; Getter .)",
    "insertText": "BindSP(InUserObject, InMethodPtr)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (} template<class SourceType> void)",
    "insertText": "Bind(SourceType* InUserObject, typename FGetter::template TConstMethodPtr< SourceType > InMethodPtr)"
  },
  {
    "label": "BindUObject()",
    "kind": "Method",
    "detail": "Function (} template<class SourceType> void)",
    "insertText": "BindUObject(SourceType* InUserObject, typename FGetter::template TConstMethodPtr< SourceType > InMethodPtr)"
  },
  {
    "label": "BindUObject()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ; Getter .)",
    "insertText": "BindUObject(InUserObject, InMethodPtr)"
  },
  {
    "label": "BindUFunction()",
    "kind": "Method",
    "detail": "Function (} template<class SourceType> void)",
    "insertText": "BindUFunction(SourceType* InUserObject, const FName& InFunctionName)"
  },
  {
    "label": "BindUFunction()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ; Getter .)",
    "insertText": "BindUFunction(InUserObject, InFunctionName)"
  },
  {
    "label": "BindLambda()",
    "kind": "Method",
    "detail": "Function (} template<LambdaType,. . . PayloadTypes> void)",
    "insertText": "BindLambda(LambdaType&& InCallable, PayloadTypes&&... InputPayload)"
  },
  {
    "label": "BindLambda()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ; Getter .)",
    "insertText": "BindLambda(Forward<LambdaType>(InCallable), Forward<PayloadTypes>(InputPayload)...)"
  },
  {
    "label": "BindSPLambda()",
    "kind": "Method",
    "detail": "Function (} template<UserClass,ESPMode Mode,LambdaType,. . . PayloadTypes> void)",
    "insertText": "BindSPLambda(const TSharedRef<UserClass, Mode>& InUserObjectRef, LambdaType&& InCallable, PayloadTypes&&... InputPayload)"
  },
  {
    "label": "BindSPLambda()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ; Getter .)",
    "insertText": "BindSPLambda(InUserObjectRef, Forward<LambdaType>(InCallable), Forward<PayloadTypes>(InputPayload)...)"
  },
  {
    "label": "BindSPLambda()",
    "kind": "Method",
    "detail": "Function (} template<UserClass,LambdaType,. . . PayloadTypes> void)",
    "insertText": "BindSPLambda(const UserClass* InUserObject, LambdaType&& InCallable, PayloadTypes&&... InputPayload)"
  },
  {
    "label": "BindSPLambda()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ; Getter .)",
    "insertText": "BindSPLambda(InUserObject, Forward<LambdaType>(InCallable), Forward<PayloadTypes>(InputPayload)...)"
  },
  {
    "label": "BindWeakLambda()",
    "kind": "Method",
    "detail": "Function (} template<UserClass,LambdaType,. . . PayloadTypes> void)",
    "insertText": "BindWeakLambda(UserClass* InUserObject, LambdaType&& InCallable, PayloadTypes&&... InputPayload)"
  },
  {
    "label": "BindWeakLambda()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ; Getter .)",
    "insertText": "BindWeakLambda(InUserObject, Forward<LambdaType>(InCallable), Forward<PayloadTypes>(InputPayload)...)"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBound()"
  },
  {
    "label": "GetBinding()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] const FGetter&)",
    "insertText": "GetBinding()"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (bIsSet = false ; return)",
    "insertText": "IsBound() ? TVariant<ObjectType, FGetter>(TInPlaceType<FGetter>(), MoveTemp(Getter)) : TVariant<ObjectType, FGetter>(TInPlaceType<ObjectType>(), MoveTemp(Value))"
  },
  {
    "label": "IdenticalTo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IdenticalTo(const TAttribute& InOther)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "IsSet() == InOther.IsSet()"
  },
  {
    "label": "TAttribute()",
    "kind": "Method",
    "detail": "Function (} } return false ; } private :)",
    "insertText": "TAttribute(const FGetter& InGetter, bool bExplicitConstructor ) : Value() , bIsSet( true ) , Getter(InGetter)"
  },
  {
    "label": "MakeAttributeRaw()",
    "kind": "Method",
    "detail": "Function (} template<class OtherType> class TAttribute ; ObjectType Value ; bool bIsSet ; FGetter Getter ; } ; template<T,SourceType,SourceTypeOrBase,. . . PayloadTypes> [ [ nodiscard ] ] TAttribute<T>)",
    "insertText": "MakeAttributeRaw(const SourceType* InObject, T (SourceTypeOrBase::*InMethod)(PayloadTypes...) const, typename TDecay<PayloadTypes>::Type... InputPayload)"
  },
  {
    "label": "MakeAttributeSP()",
    "kind": "Method",
    "detail": "Function (} template<T,SourceType,SourceTypeOrBase,. . . PayloadTypes> [ [ nodiscard ] ] TAttribute<T>)",
    "insertText": "MakeAttributeSP(const SourceType* InObject, T (SourceTypeOrBase::*InMethod)(PayloadTypes...) const, typename TDecay<PayloadTypes>::Type... InputPayload)"
  },
  {
    "label": "MakeAttributeSP()",
    "kind": "Method",
    "detail": "Function (} template<T,SourceType,SourceTypeOrBase,. . . PayloadTypes> [ [ nodiscard ] ] TAttribute<T>)",
    "insertText": "MakeAttributeSP(TSharedRef<SourceType> InObject, T (SourceTypeOrBase::*InMethod)(PayloadTypes...) const, typename TDecay<PayloadTypes>::Type... InputPayload)"
  },
  {
    "label": "MakeAttributeUObject()",
    "kind": "Method",
    "detail": "Function (} template<T,SourceType,SourceTypeOrBase,. . . PayloadTypes> [ [ nodiscard ] ] TAttribute<T>)",
    "insertText": "MakeAttributeUObject(const SourceType* InObject, T (SourceTypeOrBase::*InMethod)(PayloadTypes...) const, typename TDecay<PayloadTypes>::Type... InputPayload)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<LambdaType,. . . PayloadTypes> [ [ nodiscard ] ])",
    "insertText": "decltype(auto) MakeAttributeLambda(LambdaType&& InCallable, PayloadTypes&&... InputPayload)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "decltype(InCallable(DeclVal<PayloadTypes>()...))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<UserClass,ESPMode Mode,LambdaType,. . . PayloadTypes> [ [ nodiscard ] ])",
    "insertText": "decltype(auto) MakeAttributeSPLambda(const TSharedRef<UserClass, Mode>& InUserObjectRef, LambdaType&& InCallable, PayloadTypes&&... InputPayload)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<UserClass,LambdaType,. . . PayloadTypes> [ [ nodiscard ] ])",
    "insertText": "decltype(auto) MakeAttributeSPLambda(UserClass* InUserObject, LambdaType&& InCallable, PayloadTypes&&... InputPayload)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<UserClass,LambdaType,. . . PayloadTypes> [ [ nodiscard ] ])",
    "insertText": "decltype(auto) MakeAttributeWeakLambda(UserClass* InUserObject, LambdaType&& InCallable, PayloadTypes&&... InputPayload)"
  }
]