[
  {
    "label": "FTriangleMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTriangleMesh"
  },
  {
    "label": "FXPBDStretchBiasElementConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDStretchBiasElementConstraints"
  },
  {
    "label": "MinStiffness()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / CollectionPropertyFacade . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / PBDStiffness . h \" # include \" Chaos / ParticleRule . h \" # include \" ChaosStats . h \" namespace Chaos { class FTriangleMesh ; } namespace Chaos::Softs { class FXPBDStretchBiasElementConstraints { public : FSolverReal)",
    "insertText": "MinStiffness(FSolverReal)"
  },
  {
    "label": "MaxStiffness()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxStiffness(FSolverReal)"
  },
  {
    "label": "MinDamping()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MinDamping(FSolverReal)"
  },
  {
    "label": "MaxDamping()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxDamping(FSolverReal)"
  },
  {
    "label": "MinWarpWeftScale()",
    "kind": "Method",
    "detail": "Function (bool bDefaultUse3dRestLengths = true ; FSolverReal)",
    "insertText": "MinWarpWeftScale(FSolverReal)"
  },
  {
    "label": "MaxWarpWeftScale()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxWarpWeftScale(FSolverReal)"
  },
  {
    "label": "DefaultWarpWeftScale()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "DefaultWarpWeftScale(FSolverReal)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FXPBDStretchBiasElementConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDStretchBiasElementConstraints(const FSolverParticlesRange& InParticles, const FTriangleMesh& TriangleMesh, const TArray<TVec3<FVec2f>>& FaceVertexUVs, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, bool bTrimKinematicConstraints = false)"
  },
  {
    "label": "FXPBDStretchBiasElementConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FXPBDStretchBiasElementConstraints(const FSolverParticles& InParticles, int32 ParticleOffset, int32 ParticleCount, const FTriangleMesh& TriangleMesh, const TArray<TVec3<FVec2f>>& FaceVertexUVs, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, bool bTrimKinematicConstraints = false)"
  },
  {
    "label": "FXPBDStretchBiasElementConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FXPBDStretchBiasElementConstraints(const FSolverParticles& InParticles, int32 ParticleOffset, int32 ParticleCount, const FTriangleMesh& TriangleMesh, const TArray<TVec3<FVec2f>>& FaceVertexUVs, const TConstArrayView<FRealSingle>& StiffnessWarpMultipliers, const TConstArrayView<FRealSingle>& StiffnessWeftMultipliers, const TConstArrayView<FRealSingle>& StiffnessBiasMultipliers, const TConstArrayView<FRealSingle>& DampingMultipliers, const TConstArrayView<FRealSingle>& WarpScaleMultipliers, const TConstArrayView<FRealSingle>& WeftScaleMultipliers, const FSolverVec2& InStiffnessWarp, const FSolverVec2& InStiffnessWeft, const FSolverVec2& InStiffnessBias, const FSolverVec2& InDampingRatio, const FSolverVec2& InWarpScale, const FSolverVec2& InWeftScale, bool bUse3dRestLengths, bool bTrimKinematicConstraints = false)"
  },
  {
    "label": "FXPBDStretchBiasElementConstraints()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FXPBDStretchBiasElementConstraints()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Lambdas .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Lambdas .)",
    "insertText": "AddZeroed(Constraints.Num())"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(const FSolverVec2& InStiffnessWarp, const FSolverVec2& InStiffnessWeft, const FSolverVec2& InStiffnessBias, const FSolverVec2& InDampingRatio, const FSolverVec2& InWarpScale, const FSolverVec2& InWeftScale)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (StiffnessWarp .)",
    "insertText": "SetWeightedValue(InStiffnessWarp, MaxStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (StiffnessWeft .)",
    "insertText": "SetWeightedValue(InStiffnessWeft, MaxStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (StiffnessBias .)",
    "insertText": "SetWeightedValue(InStiffnessBias, MaxStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (DampingRatio .)",
    "insertText": "SetWeightedValue(InDampingRatio.ClampAxes(MinDamping, MaxDamping))"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (WarpScale .)",
    "insertText": "SetWeightedValue(InWarpScale.ClampAxes(MinWarpWeftScale, MaxWarpWeftScale))"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (WeftScale .)",
    "insertText": "SetWeightedValue(InWeftScale.ClampAxes(MinWarpWeftScale, MaxWarpWeftScale))"
  },
  {
    "label": "ApplyProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProperties(const FSolverReal , const int32)"
  },
  {
    "label": "ApplyXPBDValues()",
    "kind": "Method",
    "detail": "Function (StiffnessWarp .)",
    "insertText": "ApplyXPBDValues(MaxStiffness)"
  },
  {
    "label": "ApplyValues()",
    "kind": "Method",
    "detail": "Function (DampingRatio .)",
    "insertText": "ApplyValues()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "Apply(SolverParticlesOrRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "CalculateUVStretch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateUVStretch(const int32 ConstraintIndex, const FSolverVec3& P0, const FSolverVec3& P1, const FSolverVec3& P2, FSolverVec3& DXDu, FSolverVec3& DXDv)"
  },
  {
    "label": "GetConstraints()",
    "kind": "Method",
    "detail": "Function (const TArray<TVec3<int32>>&)",
    "insertText": "GetConstraints()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>> ConstraintsArray ; ConstraintsArray .)",
    "insertText": "SetNum(Constraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ConstraintsArray [ i ] .)",
    "insertText": "SetNum(3)"
  },
  {
    "label": "GetRestStretchLengths()",
    "kind": "Method",
    "detail": "Function (ConstraintsArray [ i ] [ j ] = Constraints [ i ] [ j ] ; } } return ConstraintsArray ; } const TArray<FSolverVec3>)",
    "insertText": "GetRestStretchLengths()"
  },
  {
    "label": "GetConstraintsPerColorStartIndex()",
    "kind": "Method",
    "detail": "Function (} const TArray<int32>&)",
    "insertText": "GetConstraintsPerColorStartIndex()"
  },
  {
    "label": "InitializeDmInvAndMeasures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDmInvAndMeasures(const FSolverParticles& Particles)"
  },
  {
    "label": "AddInternalForceDifferential()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternalForceDifferential(const FSolverParticles& InParticles, const TArray<TVector<FSolverReal, 3>>& DeltaParticles, TArray<TVector<FSolverReal, 3>>& ndf)"
  },
  {
    "label": "InitConstraintsAndRestData()",
    "kind": "Method",
    "detail": "Function (private : template<SolverParticlesOrRange> void)",
    "insertText": "InitConstraintsAndRestData(const SolverParticlesOrRange& InParticles, const FTriangleMesh& TriangleMesh, const TArray<TVec3<FVec2f>>& FaceVertexUVs, const bool bUse3dRestLengths, const bool bTrimKinematicConstraints)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (template<SolverParticlesOrRange> void)",
    "insertText": "InitColor(const SolverParticlesOrRange& InParticles)"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (template<SolverParticlesOrRange> void)",
    "insertText": "ApplyHelper(SolverParticlesOrRange& Particles, const FSolverReal Dt, const int32 ConstraintIndex, const FSolverVec3& ExpStiffnessValue, const FSolverReal DampingRatioValue, const FSolverReal WarpScaleValue, const FSolverReal WeftScaleValue)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (TArray<TVec3<int32>> Constraints ; const int32 ParticleOffset ; const int32 ParticleCount ; FPBDStiffness StiffnessWarp ; FPBDStiffness StiffnessWeft ; FPBDStiffness StiffnessBias ; FPBDWeightMap DampingRatio ; FPBDWeightMap WarpScale ; FPBDWeightMap WeftScale ; TArray<FSolverVec3> Lambdas ; TArray<int32> ConstraintsPerColorStartIndex ; TArray<FSolverMatrix22> DeltaUVInverse ; TArray<FSolverVec3> RestStretchLengths ; TArray<FSolverVec3> StiffnessScales ; TArray<FSolverReal> Measure ; TArray<FSolverMatrix22> DmInverse ; TArray<FSolverMatrix22> DmArray ; bool bDmInitialized = false ; TArray<PMatrix<FSolverReal,3,2>> RestDmArray ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoStretchUse3dRestLengths, bool)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoStretchStiffnessWarp, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoStretchStiffnessWeft, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoStretchStiffnessBias, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoStretchDamping, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoStretchWarpScale, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoStretchWeftScale, float)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; } # if !)",
    "insertText": "defined(CHAOS_XPBD_STRETCH_BIAS_ELEMENT_ISPC_ENABLED_DEFAULT)"
  }
]