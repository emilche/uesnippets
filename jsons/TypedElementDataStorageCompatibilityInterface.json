[
  {
    "label": "IEditorDataStorageCompatibilityProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditorDataStorageCompatibilityProvider"
  },
  {
    "label": "TTypedElementSubsystemTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypedElementSubsystemTraits"
  },
  {
    "label": "HasRequiresGameThreadVariable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasRequiresGameThreadVariable"
  },
  {
    "label": "HasIsHotReloadableVariable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasIsHotReloadableVariable"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Interfaces / TypedElementDataStorageInterface . h \" # include \" Features / IModularFeature . h \" # include \" Templates / Function . h \" # include \" UObject / Interface . h \" # include \" UObject / ObjectKey . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / StrongObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class IEditorDataStorageCompatibilityProvider : public IModularFeature { public : using ObjectRegistrationFilter = TFunction<)",
    "insertText": "bool(const IEditorDataStorageCompatibilityProvider&, const UObject*)"
  },
  {
    "label": "RowHandle()",
    "kind": "Method",
    "detail": "Function (using ObjectToRowDealiaser = TFunction<UE::Editor::)",
    "insertText": "RowHandle(const IEditorDataStorageCompatibilityProvider&, const UObject*)"
  },
  {
    "label": "AddCompatibleObject()",
    "kind": "Method",
    "detail": "Function (template<ObjectType> UE::Editor::DataStorage::RowHandle)",
    "insertText": "AddCompatibleObject(ObjectType&& Object)"
  },
  {
    "label": "RemoveCompatibleObject()",
    "kind": "Method",
    "detail": "Function (template<ObjectType> void)",
    "insertText": "RemoveCompatibleObject(ObjectType&& Object)"
  },
  {
    "label": "FindRowWithCompatibleObject()",
    "kind": "Method",
    "detail": "Function (template<ObjectType> UE::Editor::DataStorage::RowHandle)",
    "insertText": "FindRowWithCompatibleObject(ObjectType&& Object)"
  },
  {
    "label": "RegisterRegistrationFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterRegistrationFilter(ObjectRegistrationFilter Filter)"
  },
  {
    "label": "RegisterDealiaserCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDealiaserCallback(ObjectToRowDealiaser Dealiaser)"
  },
  {
    "label": "RegisterTypeTableAssociation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTypeTableAssociation(TObjectPtr<UStruct> TypeInfo, UE::Editor::DataStorage::TableHandle Table)"
  },
  {
    "label": "AddCompatibleObjectExplicit()",
    "kind": "Method",
    "detail": "Function (UE::Editor::DataStorage::RowHandle)",
    "insertText": "AddCompatibleObjectExplicit(UObject* Object)"
  },
  {
    "label": "AddCompatibleObjectExplicit()",
    "kind": "Method",
    "detail": "Function (UE::Editor::DataStorage::RowHandle)",
    "insertText": "AddCompatibleObjectExplicit(void* Object, TWeakObjectPtr<UScriptStruct> TypeInfo)"
  },
  {
    "label": "RemoveCompatibleObjectExplicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCompatibleObjectExplicit(UObject* Object)"
  },
  {
    "label": "RemoveCompatibleObjectExplicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCompatibleObjectExplicit(void* Object)"
  },
  {
    "label": "FindRowWithCompatibleObjectExplicit()",
    "kind": "Method",
    "detail": "Function (UE::Editor::DataStorage::RowHandle)",
    "insertText": "FindRowWithCompatibleObjectExplicit(const UObject* Object)"
  },
  {
    "label": "FindRowWithCompatibleObjectExplicit()",
    "kind": "Method",
    "detail": "Function (UE::Editor::DataStorage::RowHandle)",
    "insertText": "FindRowWithCompatibleObjectExplicit(const void* Object)"
  },
  {
    "label": "SupportsExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsExtension(FName Extension)"
  },
  {
    "label": "ListExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListExtensions(TFunctionRef<void(FName)> Callback)"
  },
  {
    "label": "GetRawPointer()",
    "kind": "Method",
    "detail": "Function (} ; template<Type> Type*)",
    "insertText": "GetRawPointer(const TWeakObjectPtr<Type> Object)"
  },
  {
    "label": "GetRawPointer()",
    "kind": "Method",
    "detail": "Function (} template<Type> Type*)",
    "insertText": "GetRawPointer(const TObjectPtr<Type> Object)"
  },
  {
    "label": "GetRawPointer()",
    "kind": "Method",
    "detail": "Function (} template<Type> Type*)",
    "insertText": "GetRawPointer(const TStrongObjectPtr<Type> Object)"
  },
  {
    "label": "GetRawPointer()",
    "kind": "Method",
    "detail": "Function (} template<Type> Type*)",
    "insertText": "GetRawPointer(const TObjectKey<Type> Object)"
  },
  {
    "label": "GetRawPointer()",
    "kind": "Method",
    "detail": "Function (} template<Type> Type*)",
    "insertText": "GetRawPointer(const TUniquePtr<Type> Object)"
  },
  {
    "label": "GetRawPointer()",
    "kind": "Method",
    "detail": "Function (} template<Type> Type*)",
    "insertText": "GetRawPointer(const TSharedPtr<Type> Object)"
  },
  {
    "label": "GetRawPointer()",
    "kind": "Method",
    "detail": "Function (} template<Type> Type*)",
    "insertText": "GetRawPointer(Type* Object)"
  },
  {
    "label": "GetRawPointer()",
    "kind": "Method",
    "detail": "Function (auto RawPointer =)",
    "insertText": "GetRawPointer(Forward<ObjectType>(Object))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using BaseType = std::remove_cv_t<std::remove_pointer_t<)",
    "insertText": "decltype(RawPointer)"
  },
  {
    "label": "AddCompatibleObjectExplicit()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "AddCompatibleObjectExplicit(RawPointer, BaseType::StaticStruct())"
  },
  {
    "label": "RemoveCompatibleObjectExplicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCompatibleObjectExplicit(GetRawPointer(Forward<ObjectType>(Object)))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<Subsystem> struct TTypedElementSubsystemTraits final { template<T,= void> struct HasRequiresGameThreadVariable { bool bAvailable = false ; } ; template<T> struct HasRequiresGameThreadVariable<T,)",
    "insertText": "decltype((void)T::bRequiresGameThread)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bool bAvailable = true ; } ; template<T,= void> struct HasIsHotReloadableVariable { bool bAvailable = false ; } ; template<T> struct HasIsHotReloadableVariable<T,)",
    "insertText": "decltype((void)T::bIsHotReloadable)"
  },
  {
    "label": "RequiresGameThread()",
    "kind": "Method",
    "detail": "Function (bool bAvailable = true ; } ; bool)",
    "insertText": "RequiresGameThread()"
  }
]