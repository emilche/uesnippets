[
  {
    "label": "CordRepBtreeNavigator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordRepBtreeNavigator"
  },
  {
    "label": "CordRepBtree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordRepBtree"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Action",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Action"
  },
  {
    "label": "OpResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpResult"
  },
  {
    "label": "CopyResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyResult"
  },
  {
    "label": "Position",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Position"
  },
  {
    "label": "CordRepBtreeTestPeer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordRepBtreeTestPeer"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CORD_REP_BTREE_H_ # define ABSL_STRINGS_INTERNAL_CORD_REP_BTREE_H_ # include<cassert> # include<cstdint> # include<iosfwd> # include \" absl / base / config . h \" # include \" absl / base / internal / raw_logging . h \" # include \" absl / base / optimization . h \" # include \" absl / strings / internal / cord_data_edge . h \" # include \" absl / strings / internal / cord_internal . h \" # include \" absl / strings / internal / cord_rep_flat . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / span . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cord_internal { class CordRepBtreeNavigator ; class CordRepBtree : public CordRep { public : enum class EdgeType { kFront,kBack } ; EdgeType kFront = EdgeType::kFront ; EdgeType kBack = EdgeType::kBack ; size_t kMaxCapacity = 6 ; size_t kMaxDepth = 1 2 ; int kMaxHeight = static_cast<)",
    "insertText": "int(kMaxDepth - 1)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (enum Action { kSelf,kCopied,kPopped } ; struct OpResult { CordRepBtree* tree ; Action action ; } ; struct CopyResult { CordRep* edge ; int height ; } ; struct Position { size_t index ; size_t n ; } ; CordRepBtree*)",
    "insertText": "Create(CordRep* rep)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(CordRepBtree* tree)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete(CordRepBtree* tree)"
  },
  {
    "label": "Unref()",
    "kind": "Method",
    "detail": "Function (delete tree ; } using CordRep::Unref ; void)",
    "insertText": "Unref(absl::Span<CordRep* const> edges)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "Append(CordRepBtree* tree, CordRep* rep)"
  },
  {
    "label": "Prepend()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "Prepend(CordRepBtree* tree, CordRep* rep)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "Append(CordRepBtree* tree, string_view data, size_t extra = 0)"
  },
  {
    "label": "Prepend()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "Prepend(CordRepBtree* tree, string_view data, size_t extra = 0)"
  },
  {
    "label": "SubTree()",
    "kind": "Method",
    "detail": "Function (CordRep*)",
    "insertText": "SubTree(size_t offset, size_t n)"
  },
  {
    "label": "RemoveSuffix()",
    "kind": "Method",
    "detail": "Function (CordRep*)",
    "insertText": "RemoveSuffix(CordRepBtree* tree, size_t n)"
  },
  {
    "label": "GetCharacter()",
    "kind": "Method",
    "detail": "Function (char)",
    "insertText": "GetCharacter(size_t offset)"
  },
  {
    "label": "IsFlat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlat(absl::string_view* fragment)"
  },
  {
    "label": "IsFlat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlat(size_t offset, size_t n, absl::string_view* fragment)"
  },
  {
    "label": "GetAppendBuffer()",
    "kind": "Method",
    "detail": "Function (Span<char>)",
    "insertText": "GetAppendBuffer(size_t size)"
  },
  {
    "label": "ExtractAppendBuffer()",
    "kind": "Method",
    "detail": "Function (ExtractResult)",
    "insertText": "ExtractAppendBuffer(CordRepBtree* tree, size_t extra_capacity = 1)"
  },
  {
    "label": "height()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "height()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "begin()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "back()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "end()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "index(EdgeType edge)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "capacity()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "capacity()"
  },
  {
    "label": "Edge()",
    "kind": "Method",
    "detail": "Function (CordRep*)",
    "insertText": "Edge(EdgeType edge_type)"
  },
  {
    "label": "Edges()",
    "kind": "Method",
    "detail": "Function (absl::Span<CordRep* const>)",
    "insertText": "Edges()"
  },
  {
    "label": "Edges()",
    "kind": "Method",
    "detail": "Function (absl::Span<CordRep* const>)",
    "insertText": "Edges(size_t begin, size_t end)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "Data(size_t index)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(const CordRepBtree* tree, bool shallow = false)"
  },
  {
    "label": "AssertValid()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "AssertValid(CordRepBtree* tree, bool shallow = true)"
  },
  {
    "label": "AssertValid()",
    "kind": "Method",
    "detail": "Function (const CordRepBtree*)",
    "insertText": "AssertValid(const CordRepBtree* tree, bool shallow = true)"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dump(const CordRep* rep, std::ostream& stream)"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dump(const CordRep* rep, absl::string_view label, std::ostream& stream)"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dump(const CordRep* rep, absl::string_view label, bool include_contents, std::ostream& stream)"
  },
  {
    "label": "AddEdge()",
    "kind": "Method",
    "detail": "Function (template<EdgeType edge_type> OpResult)",
    "insertText": "AddEdge(bool owned, CordRep* edge, size_t delta)"
  },
  {
    "label": "SetEdge()",
    "kind": "Method",
    "detail": "Function (template<EdgeType edge_type> OpResult)",
    "insertText": "SetEdge(bool owned, CordRep* edge, size_t delta)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "New(int height = 0)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "New(CordRep* rep)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "New(CordRepBtree* front, CordRepBtree* back)"
  },
  {
    "label": "Rebuild()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "Rebuild(CordRepBtree* tree)"
  },
  {
    "label": "CordRepBtree()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "CordRepBtree()"
  },
  {
    "label": "InitInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitInstance(int height, size_t begin = 0, size_t end = 0)"
  },
  {
    "label": "set_begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_begin(size_t begin)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (storage [ 1 ] = static_cast<)",
    "insertText": "uint8_t(begin)"
  },
  {
    "label": "set_end()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_end(size_t end)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (storage [ 2 ] = static_cast<)",
    "insertText": "uint8_t(end)"
  },
  {
    "label": "sub_fetch_begin()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "sub_fetch_begin(size_t n)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (storage [ 1 ] - = static_cast<)",
    "insertText": "uint8_t(n)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (const uint8_t current = storage [ 2 ] ; storage [ 2 ] = static_cast<)",
    "insertText": "uint8_t(current + n)"
  },
  {
    "label": "IndexBefore()",
    "kind": "Method",
    "detail": "Function (Position)",
    "insertText": "IndexBefore(size_t offset)"
  },
  {
    "label": "IndexOfLength()",
    "kind": "Method",
    "detail": "Function (Position)",
    "insertText": "IndexOfLength(size_t n)"
  },
  {
    "label": "IndexBefore()",
    "kind": "Method",
    "detail": "Function (Position)",
    "insertText": "IndexBefore(Position front, size_t offset)"
  },
  {
    "label": "IndexBeyond()",
    "kind": "Method",
    "detail": "Function (Position)",
    "insertText": "IndexBeyond(size_t offset)"
  },
  {
    "label": "NewLeaf()",
    "kind": "Method",
    "detail": "Function (template<EdgeType edge_type> CordRepBtree*)",
    "insertText": "NewLeaf(absl::string_view data, size_t extra)"
  },
  {
    "label": "CopyRaw()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "CopyRaw()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "Copy()"
  },
  {
    "label": "CopyBeginTo()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "CopyBeginTo(size_t end, size_t new_length)"
  },
  {
    "label": "ConsumeBeginTo()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "ConsumeBeginTo(CordRepBtree* tree, size_t end, size_t new_length)"
  },
  {
    "label": "CopyToEndFrom()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "CopyToEndFrom(size_t begin, size_t new_length)"
  },
  {
    "label": "ExtractFront()",
    "kind": "Method",
    "detail": "Function (CordRep*)",
    "insertText": "ExtractFront(CordRepBtree* tree)"
  },
  {
    "label": "MergeTrees()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "MergeTrees(CordRepBtree* left, CordRepBtree* right)"
  },
  {
    "label": "CreateSlow()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "CreateSlow(CordRep* rep)"
  },
  {
    "label": "AppendSlow()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "AppendSlow(CordRepBtree*, CordRep* rep)"
  },
  {
    "label": "PrependSlow()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "PrependSlow(CordRepBtree*, CordRep* rep)"
  },
  {
    "label": "Rebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rebuild(CordRepBtree** stack, CordRepBtree* tree, bool consume)"
  },
  {
    "label": "AlignBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlignBegin()"
  },
  {
    "label": "AlignEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlignEnd()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (template<EdgeType edge_type> void)",
    "insertText": "Add(CordRep* rep)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (template<EdgeType edge_type> void)",
    "insertText": "Add(absl::Span<CordRep* const>)"
  },
  {
    "label": "AddData()",
    "kind": "Method",
    "detail": "Function (template<EdgeType edge_type> absl::string_view)",
    "insertText": "AddData(absl::string_view data, size_t extra)"
  },
  {
    "label": "SetEdge()",
    "kind": "Method",
    "detail": "Function (template<EdgeType edge_type> void)",
    "insertText": "SetEdge(CordRep* edge)"
  },
  {
    "label": "CopyPrefix()",
    "kind": "Method",
    "detail": "Function (CopyResult)",
    "insertText": "CopyPrefix(size_t n, bool allow_folding = true)"
  },
  {
    "label": "CopySuffix()",
    "kind": "Method",
    "detail": "Function (CopyResult)",
    "insertText": "CopySuffix(size_t offset)"
  },
  {
    "label": "ToOpResult()",
    "kind": "Method",
    "detail": "Function (OpResult)",
    "insertText": "ToOpResult(bool owned)"
  },
  {
    "label": "AddCordRep()",
    "kind": "Method",
    "detail": "Function (template<EdgeType edge_type> CordRepBtree*)",
    "insertText": "AddCordRep(CordRepBtree* tree, CordRep* rep)"
  },
  {
    "label": "AddData()",
    "kind": "Method",
    "detail": "Function (template<EdgeType edge_type> CordRepBtree*)",
    "insertText": "AddData(CordRepBtree* tree, absl::string_view data, size_t extra = 0)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (template<EdgeType edge_type> CordRepBtree*)",
    "insertText": "Merge(CordRepBtree* dst, CordRepBtree* src)"
  },
  {
    "label": "GetAppendBufferSlow()",
    "kind": "Method",
    "detail": "Function (Span<char>)",
    "insertText": "GetAppendBufferSlow(size_t size)"
  },
  {
    "label": "btree()",
    "kind": "Method",
    "detail": "Function (CordRep* edges_ [ kMaxCapacity ] ; class CordRepBtreeTestPeer ; class CordRepBtreeNavigator ; } ; CordRepBtree*)",
    "insertText": "btree()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsBtree())"
  },
  {
    "label": "InitInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitInstance(int height, size_t begin, size_t end)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (tag = BTREE ; storage [ 0 ] = static_cast<)",
    "insertText": "uint8_t(height)"
  },
  {
    "label": "Edge()",
    "kind": "Method",
    "detail": "Function (} CordRep*)",
    "insertText": "Edge(size_t index)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(index >= begin())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(index < end())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(begin <= end)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(begin >= this->begin())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(end <= this->end())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(height() == 0)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} CordRepBtree*)",
    "insertText": "New(int height)"
  },
  {
    "label": "InitInstance()",
    "kind": "Method",
    "detail": "Function (CordRepBtree* tree = new CordRepBtree ; tree -> length = 0 ; tree ->)",
    "insertText": "InitInstance(height)"
  },
  {
    "label": "IsBtree()",
    "kind": "Method",
    "detail": "Function (CordRepBtree* tree = new CordRepBtree ; int height = rep ->)",
    "insertText": "IsBtree() ? rep->btree()->height()"
  },
  {
    "label": "InitInstance()",
    "kind": "Method",
    "detail": "Function (tree -> length = rep -> length ; tree ->)",
    "insertText": "InitInstance(height, 0, 1)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(front->height() == back->height())"
  },
  {
    "label": "InitInstance()",
    "kind": "Method",
    "detail": "Function (CordRepBtree* tree = new CordRepBtree ; tree -> length = front -> length + back -> length ; tree ->)",
    "insertText": "InitInstance(front->height() + 1, 0, 2)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(edge)"
  },
  {
    "label": "CordRepBtree()",
    "kind": "Method",
    "detail": "Function (auto* tree = static_cast<)",
    "insertText": "CordRepBtree(::operator new(sizeof(CordRepBtree)))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(static_cast<void*>(tree), this, sizeof(CordRepBtree))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&tree->refcount)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(begin <= this->end())"
  },
  {
    "label": "set_begin()",
    "kind": "Method",
    "detail": "Function (tree -> length = new_length ; tree ->)",
    "insertText": "set_begin(begin)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(end <= capacity())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(end >= this->begin())"
  },
  {
    "label": "set_end()",
    "kind": "Method",
    "detail": "Function (tree -> length = new_length ; tree ->)",
    "insertText": "set_end(end)"
  },
  {
    "label": "set_begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_begin(0)"
  },
  {
    "label": "set_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_end(new_end)"
  },
  {
    "label": "ABSL_ASSUME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_ASSUME(new_end <= kMaxCapacity)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# ifdef __clang__ # pragma unroll 1 # endif)",
    "insertText": "for(size_t i = 0; i < new_end; ++i)"
  },
  {
    "label": "capacity()",
    "kind": "Method",
    "detail": "Function (const size_t delta =)",
    "insertText": "capacity() - end()"
  },
  {
    "label": "set_begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_begin(new_begin)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# ifdef __clang__ # pragma unroll 1 # endif)",
    "insertText": "for(size_t i = new_end - 1; i >= new_begin; --i)"
  },
  {
    "label": "kBack()",
    "kind": "Method",
    "detail": "Function (edges_ [ i ] = edges_ [ i - delta ] ; } } } template<> void CordRepBtree::Add<)",
    "insertText": "kBack(CordRep* rep)"
  },
  {
    "label": "fetch_add_end()",
    "kind": "Method",
    "detail": "Function (edges_ [)",
    "insertText": "fetch_add_end(1)"
  },
  {
    "label": "kBack()",
    "kind": "Method",
    "detail": "Function (} template<> void CordRepBtree::Add<)",
    "insertText": "kBack(absl::Span<CordRep* const> edges)"
  },
  {
    "label": "kFront()",
    "kind": "Method",
    "detail": "Function (} template<> void CordRepBtree::Add<)",
    "insertText": "kFront(CordRep* rep)"
  },
  {
    "label": "sub_fetch_begin()",
    "kind": "Method",
    "detail": "Function (edges_ [)",
    "insertText": "sub_fetch_begin(1)"
  },
  {
    "label": "kFront()",
    "kind": "Method",
    "detail": "Function (} template<> void CordRepBtree::Add<)",
    "insertText": "kFront(absl::Span<CordRep* const> edges)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (size_t new_begin =)",
    "insertText": "begin() - edges.size()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (const int idx = edge_type = = kFront ?)",
    "insertText": "begin() : back()"
  },
  {
    "label": "Unref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unref(edges_[idx])"
  },
  {
    "label": "IndexOf()",
    "kind": "Method",
    "detail": "Function (} CordRepBtree::Position)",
    "insertText": "IndexOf(size_t offset)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(offset < length)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(offset > 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(offset <= length)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (length)",
    "insertText": "while(offset > edges_[index]->length)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n <= length)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (length)",
    "insertText": "while(strip >= edges_[index]->length)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(refcount.IsOne())"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (CordRepBtree* n1 = tree ; CordRepBtree* n2 = tree ; CordRepBtree* n3 = tree ;)",
    "insertText": "switch(height)"
  },
  {
    "label": "Edge()",
    "kind": "Method",
    "detail": "Function (} ; n2 = tree ; ABSL_FALLTHROUGH_INTENDED ; case 2 : tree = tree ->)",
    "insertText": "Edge(kBack)->btree()"
  },
  {
    "label": "Edge()",
    "kind": "Method",
    "detail": "Function (} ; ABSL_FALLTHROUGH_INTENDED ; case 0 : CordRep* edge = tree ->)",
    "insertText": "Edge(kBack)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(edge->tag < FLAT)"
  },
  {
    "label": "flat()",
    "kind": "Method",
    "detail": "Function (length)",
    "insertText": "flat()->Capacity()"
  },
  {
    "label": "delta()",
    "kind": "Method",
    "detail": "Function (} ; size_t)",
    "insertText": "delta(std::min)(size, avail)"
  },
  {
    "label": "flat()",
    "kind": "Method",
    "detail": "Function (length, delta})",
    "insertText": "flat()->Data()"
  },
  {
    "label": "kBack()",
    "kind": "Method",
    "detail": "Function (} template CordRepBtree* CordRepBtree::AddCordRep<)",
    "insertText": "kBack(CordRepBtree* tree, CordRep* rep)"
  },
  {
    "label": "kFront()",
    "kind": "Method",
    "detail": "Function (template CordRepBtree* CordRepBtree::AddCordRep<)",
    "insertText": "kFront(CordRepBtree* tree, CordRep* rep)"
  },
  {
    "label": "AppendSlow()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "AppendSlow(tree, rep)"
  },
  {
    "label": "PrependSlow()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "PrependSlow(tree, rep)"
  },
  {
    "label": "AssertValid()",
    "kind": "Method",
    "detail": "Function (} # ifdef NDEBUG CordRepBtree*)",
    "insertText": "AssertValid(CordRepBtree* tree, bool)"
  }
]