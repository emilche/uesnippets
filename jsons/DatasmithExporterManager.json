[
  {
    "label": "FDefaultDelegateUserPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDefaultDelegateUserPolicy"
  },
  {
    "label": "TDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDelegate"
  },
  {
    "label": "DATASMITHEXPORTER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DATASMITHEXPORTER_API"
  },
  {
    "label": "FInitOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitOptions"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FDatasmithGameThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithGameThread"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # if IS_PROGRAM # include \" Templates / SharedPointer . h \" struct FDefaultDelegateUserPolicy ; template<DelegateSignature,UserPolicy> class TDelegate ; typedef TDelegate<)",
    "insertText": "void()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# endif class FDatasmithExporterManager { public : struct FInitOptions { bool bSuppressLogs = true ; bool bSaveLogToUserDir = true ; bool bEnableMessaging = false ; bool bUseDatasmithExporterUI = false ; const TCHAR* RemoteEngineDirPath = nullptr ; } ; bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(const FInitOptions& InitOptions)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "RunGarbageCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunGarbageCollection()"
  },
  {
    "label": "PushCommandIntoGameThread()",
    "kind": "Method",
    "detail": "Function (# if IS_PROGRAM void)",
    "insertText": "PushCommandIntoGameThread(FSimpleDelegate&& Command, bool bWakeUpGameThread = false)"
  },
  {
    "label": "WasInitializedWithMessaging()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasInitializedWithMessaging()"
  },
  {
    "label": "WasInitializedWithGameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasInitializedWithGameThread()"
  }
]