[
  {
    "label": "SteamAPI_ISteamClient_CreateSteamPipe()",
    "kind": "Method",
    "detail": "Function (HSteamPipe)",
    "insertText": "SteamAPI_ISteamClient_CreateSteamPipe( ISteamClient* self )"
  },
  {
    "label": "SteamAPI_ISteamClient_BReleaseSteamPipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamClient_BReleaseSteamPipe( ISteamClient* self, HSteamPipe hSteamPipe )"
  },
  {
    "label": "SteamAPI_ISteamClient_ConnectToGlobalUser()",
    "kind": "Method",
    "detail": "Function (HSteamUser)",
    "insertText": "SteamAPI_ISteamClient_ConnectToGlobalUser( ISteamClient* self, HSteamPipe hSteamPipe )"
  },
  {
    "label": "SteamAPI_ISteamClient_CreateLocalUser()",
    "kind": "Method",
    "detail": "Function (HSteamUser)",
    "insertText": "SteamAPI_ISteamClient_CreateLocalUser( ISteamClient* self, HSteamPipe * phSteamPipe, EAccountType eAccountType )"
  },
  {
    "label": "SteamAPI_ISteamClient_ReleaseUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamClient_ReleaseUser( ISteamClient* self, HSteamPipe hSteamPipe, HSteamUser hUser )"
  },
  {
    "label": "SteamAPI_ISteamClient_SetLocalIPBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamClient_SetLocalIPBinding( ISteamClient* self, const SteamIPAddress_t & unIP, uint16 usPort )"
  },
  {
    "label": "SteamAPI_ISteamClient_GetIPCCallCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamClient_GetIPCCallCount( ISteamClient* self )"
  },
  {
    "label": "SteamAPI_ISteamClient_SetWarningMessageHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamClient_SetWarningMessageHook( ISteamClient* self, SteamAPIWarningMessageHook_t pFunction )"
  },
  {
    "label": "SteamAPI_ISteamClient_BShutdownIfAllPipesClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamClient_BShutdownIfAllPipesClosed( ISteamClient* self )"
  },
  {
    "label": "SteamAPI_SteamUser_v023()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamUser_v023()"
  },
  {
    "label": "SteamAPI_ISteamUser_GetHSteamUser()",
    "kind": "Method",
    "detail": "Function (HSteamUser)",
    "insertText": "SteamAPI_ISteamUser_GetHSteamUser( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_BLoggedOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUser_BLoggedOn( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_GetSteamID()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamUser_GetSteamID( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED( ISteamUser* self, void * pAuthBlob, int cbMaxAuthBlob, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure )"
  },
  {
    "label": "SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED( ISteamUser* self, uint32 unIPServer, uint16 usPortServer )"
  },
  {
    "label": "SteamAPI_ISteamUser_TrackAppUsageEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUser_TrackAppUsageEvent( ISteamUser* self, uint64_gameid gameID, int eAppUsageEvent, const char * pchExtraInfo )"
  },
  {
    "label": "SteamAPI_ISteamUser_GetUserDataFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUser_GetUserDataFolder( ISteamUser* self, char * pchBuffer, int cubBuffer )"
  },
  {
    "label": "SteamAPI_ISteamUser_StartVoiceRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUser_StartVoiceRecording( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_StopVoiceRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUser_StopVoiceRecording( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_GetAvailableVoice()",
    "kind": "Method",
    "detail": "Function (EVoiceResult)",
    "insertText": "SteamAPI_ISteamUser_GetAvailableVoice( ISteamUser* self, uint32 * pcbCompressed, uint32 * pcbUncompressed_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated )"
  },
  {
    "label": "SteamAPI_ISteamUser_GetVoice()",
    "kind": "Method",
    "detail": "Function (EVoiceResult)",
    "insertText": "SteamAPI_ISteamUser_GetVoice( ISteamUser* self, bool bWantCompressed, void * pDestBuffer, uint32 cbDestBufferSize, uint32 * nBytesWritten, bool bWantUncompressed_Deprecated, void * pUncompressedDestBuffer_Deprecated, uint32 cbUncompressedDestBufferSize_Deprecated, uint32 * nUncompressBytesWritten_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated )"
  },
  {
    "label": "SteamAPI_ISteamUser_DecompressVoice()",
    "kind": "Method",
    "detail": "Function (EVoiceResult)",
    "insertText": "SteamAPI_ISteamUser_DecompressVoice( ISteamUser* self, const void * pCompressed, uint32 cbCompressed, void * pDestBuffer, uint32 cbDestBufferSize, uint32 * nBytesWritten, uint32 nDesiredSampleRate )"
  },
  {
    "label": "SteamAPI_ISteamUser_GetVoiceOptimalSampleRate()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUser_GetVoiceOptimalSampleRate( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_GetAuthSessionTicket()",
    "kind": "Method",
    "detail": "Function (HAuthTicket)",
    "insertText": "SteamAPI_ISteamUser_GetAuthSessionTicket( ISteamUser* self, void * pTicket, int cbMaxTicket, uint32 * pcbTicket, const SteamNetworkingIdentity * pSteamNetworkingIdentity )"
  },
  {
    "label": "SteamAPI_ISteamUser_GetAuthTicketForWebApi()",
    "kind": "Method",
    "detail": "Function (HAuthTicket)",
    "insertText": "SteamAPI_ISteamUser_GetAuthTicketForWebApi( ISteamUser* self, const char * pchIdentity )"
  },
  {
    "label": "SteamAPI_ISteamUser_BeginAuthSession()",
    "kind": "Method",
    "detail": "Function (EBeginAuthSessionResult)",
    "insertText": "SteamAPI_ISteamUser_BeginAuthSession( ISteamUser* self, const void * pAuthTicket, int cbAuthTicket, uint64_steamid steamID )"
  },
  {
    "label": "SteamAPI_ISteamUser_EndAuthSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUser_EndAuthSession( ISteamUser* self, uint64_steamid steamID )"
  },
  {
    "label": "SteamAPI_ISteamUser_CancelAuthTicket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUser_CancelAuthTicket( ISteamUser* self, HAuthTicket hAuthTicket )"
  },
  {
    "label": "SteamAPI_ISteamUser_UserHasLicenseForApp()",
    "kind": "Method",
    "detail": "Function (EUserHasLicenseForAppResult)",
    "insertText": "SteamAPI_ISteamUser_UserHasLicenseForApp( ISteamUser* self, uint64_steamid steamID, AppId_t appID )"
  },
  {
    "label": "SteamAPI_ISteamUser_BIsBehindNAT()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUser_BIsBehindNAT( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_AdvertiseGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUser_AdvertiseGame( ISteamUser* self, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer )"
  },
  {
    "label": "SteamAPI_ISteamUser_RequestEncryptedAppTicket()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUser_RequestEncryptedAppTicket( ISteamUser* self, void * pDataToInclude, int cbDataToInclude )"
  },
  {
    "label": "SteamAPI_ISteamUser_GetEncryptedAppTicket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUser_GetEncryptedAppTicket( ISteamUser* self, void * pTicket, int cbMaxTicket, uint32 * pcbTicket )"
  },
  {
    "label": "SteamAPI_ISteamUser_GetGameBadgeLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamUser_GetGameBadgeLevel( ISteamUser* self, int nSeries, bool bFoil )"
  },
  {
    "label": "SteamAPI_ISteamUser_GetPlayerSteamLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamUser_GetPlayerSteamLevel( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_RequestStoreAuthURL()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUser_RequestStoreAuthURL( ISteamUser* self, const char * pchRedirectURL )"
  },
  {
    "label": "SteamAPI_ISteamUser_BIsPhoneVerified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUser_BIsPhoneVerified( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_BIsTwoFactorEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUser_BIsTwoFactorEnabled( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_BIsPhoneIdentifying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUser_BIsPhoneIdentifying( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_BIsPhoneRequiringVerification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUser_BIsPhoneRequiringVerification( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_GetMarketEligibility()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUser_GetMarketEligibility( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_GetDurationControl()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUser_GetDurationControl( ISteamUser* self )"
  },
  {
    "label": "SteamAPI_ISteamUser_BSetDurationControlOnlineState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUser_BSetDurationControlOnlineState( ISteamUser* self, EDurationControlOnlineState eNewState )"
  },
  {
    "label": "SteamAPI_SteamFriends_v017()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamFriends_v017()"
  },
  {
    "label": "SteamAPI_ISteamFriends_SetPersonaName()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamFriends_SetPersonaName( ISteamFriends* self, const char * pchPersonaName )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetPersonaState()",
    "kind": "Method",
    "detail": "Function (EPersonaState)",
    "insertText": "SteamAPI_ISteamFriends_GetPersonaState( ISteamFriends* self )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendCount( ISteamFriends* self, int iFriendFlags )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendByIndex()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendByIndex( ISteamFriends* self, int iFriend, int iFriendFlags )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendRelationship()",
    "kind": "Method",
    "detail": "Function (EFriendRelationship)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendRelationship( ISteamFriends* self, uint64_steamid steamIDFriend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendPersonaState()",
    "kind": "Method",
    "detail": "Function (EPersonaState)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendPersonaState( ISteamFriends* self, uint64_steamid steamIDFriend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendGamePlayed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendGamePlayed( ISteamFriends* self, uint64_steamid steamIDFriend, FriendGameInfo_t * pFriendGameInfo )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendSteamLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendSteamLevel( ISteamFriends* self, uint64_steamid steamIDFriend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendsGroupCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendsGroupCount( ISteamFriends* self )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex()",
    "kind": "Method",
    "detail": "Function (FriendsGroupID_t)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex( ISteamFriends* self, int iFG )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendsGroupMembersCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendsGroupMembersCount( ISteamFriends* self, FriendsGroupID_t friendsGroupID )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendsGroupMembersList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendsGroupMembersList( ISteamFriends* self, FriendsGroupID_t friendsGroupID, CSteamID * pOutSteamIDMembers, int nMembersCount )"
  },
  {
    "label": "SteamAPI_ISteamFriends_HasFriend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_HasFriend( ISteamFriends* self, uint64_steamid steamIDFriend, int iFriendFlags )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetClanCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetClanCount( ISteamFriends* self )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetClanByIndex()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamFriends_GetClanByIndex( ISteamFriends* self, int iClan )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetClanActivityCounts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_GetClanActivityCounts( ISteamFriends* self, uint64_steamid steamIDClan, int * pnOnline, int * pnInGame, int * pnChatting )"
  },
  {
    "label": "SteamAPI_ISteamFriends_DownloadClanActivityCounts()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamFriends_DownloadClanActivityCounts( ISteamFriends* self, CSteamID * psteamIDClans, int cClansToRequest )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendCountFromSource()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendCountFromSource( ISteamFriends* self, uint64_steamid steamIDSource )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendFromSourceByIndex()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendFromSourceByIndex( ISteamFriends* self, uint64_steamid steamIDSource, int iFriend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_IsUserInSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_IsUserInSource( ISteamFriends* self, uint64_steamid steamIDUser, uint64_steamid steamIDSource )"
  },
  {
    "label": "SteamAPI_ISteamFriends_SetInGameVoiceSpeaking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamFriends_SetInGameVoiceSpeaking( ISteamFriends* self, uint64_steamid steamIDUser, bool bSpeaking )"
  },
  {
    "label": "SteamAPI_ISteamFriends_ActivateGameOverlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamFriends_ActivateGameOverlay( ISteamFriends* self, const char * pchDialog )"
  },
  {
    "label": "SteamAPI_ISteamFriends_ActivateGameOverlayToUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamFriends_ActivateGameOverlayToUser( ISteamFriends* self, const char * pchDialog, uint64_steamid steamID )"
  },
  {
    "label": "SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage( ISteamFriends* self, const char * pchURL, EActivateGameOverlayToWebPageMode eMode )"
  },
  {
    "label": "SteamAPI_ISteamFriends_ActivateGameOverlayToStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamFriends_ActivateGameOverlayToStore( ISteamFriends* self, AppId_t nAppID, EOverlayToStoreFlag eFlag )"
  },
  {
    "label": "SteamAPI_ISteamFriends_SetPlayedWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamFriends_SetPlayedWith( ISteamFriends* self, uint64_steamid steamIDUserPlayedWith )"
  },
  {
    "label": "SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog( ISteamFriends* self, uint64_steamid steamIDLobby )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetSmallFriendAvatar()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetSmallFriendAvatar( ISteamFriends* self, uint64_steamid steamIDFriend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetMediumFriendAvatar()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetMediumFriendAvatar( ISteamFriends* self, uint64_steamid steamIDFriend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetLargeFriendAvatar()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetLargeFriendAvatar( ISteamFriends* self, uint64_steamid steamIDFriend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_RequestUserInformation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_RequestUserInformation( ISteamFriends* self, uint64_steamid steamIDUser, bool bRequireNameOnly )"
  },
  {
    "label": "SteamAPI_ISteamFriends_RequestClanOfficerList()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamFriends_RequestClanOfficerList( ISteamFriends* self, uint64_steamid steamIDClan )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetClanOwner()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamFriends_GetClanOwner( ISteamFriends* self, uint64_steamid steamIDClan )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetClanOfficerCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetClanOfficerCount( ISteamFriends* self, uint64_steamid steamIDClan )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetClanOfficerByIndex()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamFriends_GetClanOfficerByIndex( ISteamFriends* self, uint64_steamid steamIDClan, int iOfficer )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetUserRestrictions()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamFriends_GetUserRestrictions( ISteamFriends* self )"
  },
  {
    "label": "SteamAPI_ISteamFriends_SetRichPresence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_SetRichPresence( ISteamFriends* self, const char * pchKey, const char * pchValue )"
  },
  {
    "label": "SteamAPI_ISteamFriends_ClearRichPresence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamFriends_ClearRichPresence( ISteamFriends* self )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount( ISteamFriends* self, uint64_steamid steamIDFriend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_RequestFriendRichPresence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamFriends_RequestFriendRichPresence( ISteamFriends* self, uint64_steamid steamIDFriend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_InviteUserToGame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_InviteUserToGame( ISteamFriends* self, uint64_steamid steamIDFriend, const char * pchConnectString )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetCoplayFriendCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetCoplayFriendCount( ISteamFriends* self )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetCoplayFriend()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamFriends_GetCoplayFriend( ISteamFriends* self, int iCoplayFriend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendCoplayTime()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendCoplayTime( ISteamFriends* self, uint64_steamid steamIDFriend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendCoplayGame()",
    "kind": "Method",
    "detail": "Function (AppId_t)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendCoplayGame( ISteamFriends* self, uint64_steamid steamIDFriend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_JoinClanChatRoom()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamFriends_JoinClanChatRoom( ISteamFriends* self, uint64_steamid steamIDClan )"
  },
  {
    "label": "SteamAPI_ISteamFriends_LeaveClanChatRoom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_LeaveClanChatRoom( ISteamFriends* self, uint64_steamid steamIDClan )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetClanChatMemberCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetClanChatMemberCount( ISteamFriends* self, uint64_steamid steamIDClan )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetChatMemberByIndex()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamFriends_GetChatMemberByIndex( ISteamFriends* self, uint64_steamid steamIDClan, int iUser )"
  },
  {
    "label": "SteamAPI_ISteamFriends_SendClanChatMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_SendClanChatMessage( ISteamFriends* self, uint64_steamid steamIDClanChat, const char * pchText )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetClanChatMessage()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetClanChatMessage( ISteamFriends* self, uint64_steamid steamIDClanChat, int iMessage, void * prgchText, int cchTextMax, EChatEntryType * peChatEntryType, CSteamID * psteamidChatter )"
  },
  {
    "label": "SteamAPI_ISteamFriends_IsClanChatAdmin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_IsClanChatAdmin( ISteamFriends* self, uint64_steamid steamIDClanChat, uint64_steamid steamIDUser )"
  },
  {
    "label": "SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam( ISteamFriends* self, uint64_steamid steamIDClanChat )"
  },
  {
    "label": "SteamAPI_ISteamFriends_OpenClanChatWindowInSteam()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_OpenClanChatWindowInSteam( ISteamFriends* self, uint64_steamid steamIDClanChat )"
  },
  {
    "label": "SteamAPI_ISteamFriends_CloseClanChatWindowInSteam()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_CloseClanChatWindowInSteam( ISteamFriends* self, uint64_steamid steamIDClanChat )"
  },
  {
    "label": "SteamAPI_ISteamFriends_SetListenForFriendsMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_SetListenForFriendsMessages( ISteamFriends* self, bool bInterceptEnabled )"
  },
  {
    "label": "SteamAPI_ISteamFriends_ReplyToFriendMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_ReplyToFriendMessage( ISteamFriends* self, uint64_steamid steamIDFriend, const char * pchMsgToSend )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFriendMessage()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetFriendMessage( ISteamFriends* self, uint64_steamid steamIDFriend, int iMessageID, void * pvData, int cubData, EChatEntryType * peChatEntryType )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetFollowerCount()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamFriends_GetFollowerCount( ISteamFriends* self, uint64_steamid steamID )"
  },
  {
    "label": "SteamAPI_ISteamFriends_IsFollowing()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamFriends_IsFollowing( ISteamFriends* self, uint64_steamid steamID )"
  },
  {
    "label": "SteamAPI_ISteamFriends_EnumerateFollowingList()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamFriends_EnumerateFollowingList( ISteamFriends* self, uint32 unStartIndex )"
  },
  {
    "label": "SteamAPI_ISteamFriends_IsClanPublic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_IsClanPublic( ISteamFriends* self, uint64_steamid steamIDClan )"
  },
  {
    "label": "SteamAPI_ISteamFriends_IsClanOfficialGameGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_IsClanOfficialGameGroup( ISteamFriends* self, uint64_steamid steamIDClan )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages( ISteamFriends* self )"
  },
  {
    "label": "SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog( ISteamFriends* self, uint64_steamid steamIDLobby )"
  },
  {
    "label": "SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser( ISteamFriends* self, const char * pchProtocol )"
  },
  {
    "label": "SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString( ISteamFriends* self, const char * pchConnectString )"
  },
  {
    "label": "SteamAPI_ISteamFriends_RequestEquippedProfileItems()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamFriends_RequestEquippedProfileItems( ISteamFriends* self, uint64_steamid steamID )"
  },
  {
    "label": "SteamAPI_ISteamFriends_BHasEquippedProfileItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamFriends_BHasEquippedProfileItem( ISteamFriends* self, uint64_steamid steamID, ECommunityProfileItemType itemType )"
  },
  {
    "label": "SteamAPI_ISteamFriends_GetProfileItemPropertyUint()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamFriends_GetProfileItemPropertyUint( ISteamFriends* self, uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop )"
  },
  {
    "label": "SteamAPI_SteamUtils_v010()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamUtils_v010()"
  },
  {
    "label": "SteamAPI_SteamGameServerUtils_v010()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamGameServerUtils_v010()"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetSecondsSinceAppActive()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUtils_GetSecondsSinceAppActive( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetSecondsSinceComputerActive()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUtils_GetSecondsSinceComputerActive( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetConnectedUniverse()",
    "kind": "Method",
    "detail": "Function (EUniverse)",
    "insertText": "SteamAPI_ISteamUtils_GetConnectedUniverse( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetServerRealTime()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUtils_GetServerRealTime( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetImageSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_GetImageSize( ISteamUtils* self, int iImage, uint32 * pnWidth, uint32 * pnHeight )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetImageRGBA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_GetImageRGBA( ISteamUtils* self, int iImage, uint8 * pubDest, int nDestBufferSize )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetCurrentBatteryPower()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "SteamAPI_ISteamUtils_GetCurrentBatteryPower( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetAppID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUtils_GetAppID( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_SetOverlayNotificationPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUtils_SetOverlayNotificationPosition( ISteamUtils* self, ENotificationPosition eNotificationPosition )"
  },
  {
    "label": "SteamAPI_ISteamUtils_IsAPICallCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_IsAPICallCompleted( ISteamUtils* self, SteamAPICall_t hSteamAPICall, bool * pbFailed )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetAPICallFailureReason()",
    "kind": "Method",
    "detail": "Function (ESteamAPICallFailure)",
    "insertText": "SteamAPI_ISteamUtils_GetAPICallFailureReason( ISteamUtils* self, SteamAPICall_t hSteamAPICall )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetAPICallResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_GetAPICallResult( ISteamUtils* self, SteamAPICall_t hSteamAPICall, void * pCallback, int cubCallback, int iCallbackExpected, bool * pbFailed )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetIPCCallCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUtils_GetIPCCallCount( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_SetWarningMessageHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUtils_SetWarningMessageHook( ISteamUtils* self, SteamAPIWarningMessageHook_t pFunction )"
  },
  {
    "label": "SteamAPI_ISteamUtils_IsOverlayEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_IsOverlayEnabled( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_BOverlayNeedsPresent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_BOverlayNeedsPresent( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_CheckFileSignature()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUtils_CheckFileSignature( ISteamUtils* self, const char * szFileName )"
  },
  {
    "label": "SteamAPI_ISteamUtils_ShowGamepadTextInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_ShowGamepadTextInput( ISteamUtils* self, EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char * pchDescription, uint32 unCharMax, const char * pchExistingText )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetEnteredGamepadTextLength()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUtils_GetEnteredGamepadTextLength( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetEnteredGamepadTextInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_GetEnteredGamepadTextInput( ISteamUtils* self, char * pchText, uint32 cchText )"
  },
  {
    "label": "SteamAPI_ISteamUtils_IsSteamRunningInVR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_IsSteamRunningInVR( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_SetOverlayNotificationInset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUtils_SetOverlayNotificationInset( ISteamUtils* self, int nHorizontalInset, int nVerticalInset )"
  },
  {
    "label": "SteamAPI_ISteamUtils_IsSteamInBigPictureMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_IsSteamInBigPictureMode( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_StartVRDashboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUtils_StartVRDashboard( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled( ISteamUtils* self, bool bEnabled )"
  },
  {
    "label": "SteamAPI_ISteamUtils_IsSteamChinaLauncher()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_IsSteamChinaLauncher( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_InitFilterText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_InitFilterText( ISteamUtils* self, uint32 unFilterOptions )"
  },
  {
    "label": "SteamAPI_ISteamUtils_FilterText()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamUtils_FilterText( ISteamUtils* self, ETextFilteringContext eContext, uint64_steamid sourceSteamID, const char * pchInputMessage, char * pchOutFilteredText, uint32 nByteSizeOutFilteredText )"
  },
  {
    "label": "SteamAPI_ISteamUtils_GetIPv6ConnectivityState()",
    "kind": "Method",
    "detail": "Function (ESteamIPv6ConnectivityState)",
    "insertText": "SteamAPI_ISteamUtils_GetIPv6ConnectivityState( ISteamUtils* self, ESteamIPv6ConnectivityProtocol eProtocol )"
  },
  {
    "label": "SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput( ISteamUtils* self, EFloatingGamepadTextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight )"
  },
  {
    "label": "SteamAPI_ISteamUtils_SetGameLauncherMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUtils_SetGameLauncherMode( ISteamUtils* self, bool bLauncherMode )"
  },
  {
    "label": "SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput( ISteamUtils* self )"
  },
  {
    "label": "SteamAPI_SteamMatchmaking_v009()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamMatchmaking_v009()"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_GetFavoriteGameCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamMatchmaking_GetFavoriteGameCount( ISteamMatchmaking* self )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_GetFavoriteGame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_GetFavoriteGame( ISteamMatchmaking* self, int iGame, AppId_t * pnAppID, uint32 * pnIP, uint16 * pnConnPort, uint16 * pnQueryPort, uint32 * punFlags, uint32 * pRTime32LastPlayedOnServer )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_AddFavoriteGame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamMatchmaking_AddFavoriteGame( ISteamMatchmaking* self, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_RemoveFavoriteGame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_RemoveFavoriteGame( ISteamMatchmaking* self, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_RequestLobbyList()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamMatchmaking_RequestLobbyList( ISteamMatchmaking* self )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter( ISteamMatchmaking* self, const char * pchKeyToMatch, const char * pchValueToMatch, ELobbyComparison eComparisonType )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter( ISteamMatchmaking* self, const char * pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter( ISteamMatchmaking* self, const char * pchKeyToMatch, int nValueToBeCloseTo )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable( ISteamMatchmaking* self, int nSlotsAvailable )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter( ISteamMatchmaking* self, ELobbyDistanceFilter eLobbyDistanceFilter )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter( ISteamMatchmaking* self, int cMaxResults )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter( ISteamMatchmaking* self, uint64_steamid steamIDLobby )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_GetLobbyByIndex()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamMatchmaking_GetLobbyByIndex( ISteamMatchmaking* self, int iLobby )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_CreateLobby()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamMatchmaking_CreateLobby( ISteamMatchmaking* self, ELobbyType eLobbyType, int cMaxMembers )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_JoinLobby()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamMatchmaking_JoinLobby( ISteamMatchmaking* self, uint64_steamid steamIDLobby )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_LeaveLobby()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmaking_LeaveLobby( ISteamMatchmaking* self, uint64_steamid steamIDLobby )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_InviteUserToLobby()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_InviteUserToLobby( ISteamMatchmaking* self, uint64_steamid steamIDLobby, uint64_steamid steamIDInvitee )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_GetNumLobbyMembers()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamMatchmaking_GetNumLobbyMembers( ISteamMatchmaking* self, uint64_steamid steamIDLobby )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex( ISteamMatchmaking* self, uint64_steamid steamIDLobby, int iMember )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_SetLobbyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_SetLobbyData( ISteamMatchmaking* self, uint64_steamid steamIDLobby, const char * pchKey, const char * pchValue )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_GetLobbyDataCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamMatchmaking_GetLobbyDataCount( ISteamMatchmaking* self, uint64_steamid steamIDLobby )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex( ISteamMatchmaking* self, uint64_steamid steamIDLobby, int iLobbyData, char * pchKey, int cchKeyBufferSize, char * pchValue, int cchValueBufferSize )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_DeleteLobbyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_DeleteLobbyData( ISteamMatchmaking* self, uint64_steamid steamIDLobby, const char * pchKey )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_SetLobbyMemberData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmaking_SetLobbyMemberData( ISteamMatchmaking* self, uint64_steamid steamIDLobby, const char * pchKey, const char * pchValue )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_SendLobbyChatMsg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_SendLobbyChatMsg( ISteamMatchmaking* self, uint64_steamid steamIDLobby, const void * pvMsgBody, int cubMsgBody )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_GetLobbyChatEntry()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamMatchmaking_GetLobbyChatEntry( ISteamMatchmaking* self, uint64_steamid steamIDLobby, int iChatID, CSteamID * pSteamIDUser, void * pvData, int cubData, EChatEntryType * peChatEntryType )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_RequestLobbyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_RequestLobbyData( ISteamMatchmaking* self, uint64_steamid steamIDLobby )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_SetLobbyGameServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmaking_SetLobbyGameServer( ISteamMatchmaking* self, uint64_steamid steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, uint64_steamid steamIDGameServer )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_GetLobbyGameServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_GetLobbyGameServer( ISteamMatchmaking* self, uint64_steamid steamIDLobby, uint32 * punGameServerIP, uint16 * punGameServerPort, CSteamID * psteamIDGameServer )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit( ISteamMatchmaking* self, uint64_steamid steamIDLobby, int cMaxMembers )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit( ISteamMatchmaking* self, uint64_steamid steamIDLobby )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_SetLobbyType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_SetLobbyType( ISteamMatchmaking* self, uint64_steamid steamIDLobby, ELobbyType eLobbyType )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_SetLobbyJoinable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_SetLobbyJoinable( ISteamMatchmaking* self, uint64_steamid steamIDLobby, bool bLobbyJoinable )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_GetLobbyOwner()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamMatchmaking_GetLobbyOwner( ISteamMatchmaking* self, uint64_steamid steamIDLobby )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_SetLobbyOwner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_SetLobbyOwner( ISteamMatchmaking* self, uint64_steamid steamIDLobby, uint64_steamid steamIDNewOwner )"
  },
  {
    "label": "SteamAPI_ISteamMatchmaking_SetLinkedLobby()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmaking_SetLinkedLobby( ISteamMatchmaking* self, uint64_steamid steamIDLobby, uint64_steamid steamIDLobbyDependent )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded( ISteamMatchmakingServerListResponse* self, HServerListRequest hRequest, int iServer )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond( ISteamMatchmakingServerListResponse* self, HServerListRequest hRequest, int iServer )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete( ISteamMatchmakingServerListResponse* self, HServerListRequest hRequest, EMatchMakingServerResponse response )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingPingResponse_ServerResponded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingPingResponse_ServerResponded( ISteamMatchmakingPingResponse* self, gameserveritem_t & server )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond( ISteamMatchmakingPingResponse* self )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList( ISteamMatchmakingPlayersResponse* self, const char * pchName, int nScore, float flTimePlayed )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond( ISteamMatchmakingPlayersResponse* self )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete( ISteamMatchmakingPlayersResponse* self )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded( ISteamMatchmakingRulesResponse* self, const char * pchRule, const char * pchValue )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond( ISteamMatchmakingRulesResponse* self )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete( ISteamMatchmakingRulesResponse* self )"
  },
  {
    "label": "SteamAPI_SteamMatchmakingServers_v002()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamMatchmakingServers_v002()"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_RequestInternetServerList()",
    "kind": "Method",
    "detail": "Function (HServerListRequest)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_RequestInternetServerList( ISteamMatchmakingServers* self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_RequestLANServerList()",
    "kind": "Method",
    "detail": "Function (HServerListRequest)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_RequestLANServerList( ISteamMatchmakingServers* self, AppId_t iApp, ISteamMatchmakingServerListResponse * pRequestServersResponse )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList()",
    "kind": "Method",
    "detail": "Function (HServerListRequest)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList( ISteamMatchmakingServers* self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList()",
    "kind": "Method",
    "detail": "Function (HServerListRequest)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList( ISteamMatchmakingServers* self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList()",
    "kind": "Method",
    "detail": "Function (HServerListRequest)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList( ISteamMatchmakingServers* self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList()",
    "kind": "Method",
    "detail": "Function (HServerListRequest)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList( ISteamMatchmakingServers* self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_ReleaseRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_ReleaseRequest( ISteamMatchmakingServers* self, HServerListRequest hServerListRequest )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_CancelQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_CancelQuery( ISteamMatchmakingServers* self, HServerListRequest hRequest )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_RefreshQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_RefreshQuery( ISteamMatchmakingServers* self, HServerListRequest hRequest )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_IsRefreshing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_IsRefreshing( ISteamMatchmakingServers* self, HServerListRequest hRequest )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_GetServerCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_GetServerCount( ISteamMatchmakingServers* self, HServerListRequest hRequest )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_RefreshServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_RefreshServer( ISteamMatchmakingServers* self, HServerListRequest hRequest, int iServer )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_PingServer()",
    "kind": "Method",
    "detail": "Function (HServerQuery)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_PingServer( ISteamMatchmakingServers* self, uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse * pRequestServersResponse )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_PlayerDetails()",
    "kind": "Method",
    "detail": "Function (HServerQuery)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_PlayerDetails( ISteamMatchmakingServers* self, uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse * pRequestServersResponse )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_ServerRules()",
    "kind": "Method",
    "detail": "Function (HServerQuery)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_ServerRules( ISteamMatchmakingServers* self, uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse * pRequestServersResponse )"
  },
  {
    "label": "SteamAPI_ISteamMatchmakingServers_CancelServerQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMatchmakingServers_CancelServerQuery( ISteamMatchmakingServers* self, HServerQuery hServerQuery )"
  },
  {
    "label": "SteamAPI_SteamGameSearch_v001()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamGameSearch_v001()"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_AddGameSearchParams()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_AddGameSearchParams( ISteamGameSearch* self, const char * pchKeyToFind, const char * pchValuesToFind )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_SearchForGameWithLobby()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_SearchForGameWithLobby( ISteamGameSearch* self, uint64_steamid steamIDLobby, int nPlayerMin, int nPlayerMax )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_SearchForGameSolo()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_SearchForGameSolo( ISteamGameSearch* self, int nPlayerMin, int nPlayerMax )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_AcceptGame()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_AcceptGame( ISteamGameSearch* self )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_DeclineGame()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_DeclineGame( ISteamGameSearch* self )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_RetrieveConnectionDetails()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_RetrieveConnectionDetails( ISteamGameSearch* self, uint64_steamid steamIDHost, char * pchConnectionDetails, int cubConnectionDetails )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_EndGameSearch()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_EndGameSearch( ISteamGameSearch* self )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_SetGameHostParams()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_SetGameHostParams( ISteamGameSearch* self, const char * pchKey, const char * pchValue )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_SetConnectionDetails()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_SetConnectionDetails( ISteamGameSearch* self, const char * pchConnectionDetails, int cubConnectionDetails )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_RequestPlayersForGame()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_RequestPlayersForGame( ISteamGameSearch* self, int nPlayerMin, int nPlayerMax, int nMaxTeamSize )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_HostConfirmGameStart()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_HostConfirmGameStart( ISteamGameSearch* self, uint64 ullUniqueGameID )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame( ISteamGameSearch* self )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_SubmitPlayerResult()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_SubmitPlayerResult( ISteamGameSearch* self, uint64 ullUniqueGameID, uint64_steamid steamIDPlayer, EPlayerResult_t EPlayerResult )"
  },
  {
    "label": "SteamAPI_ISteamGameSearch_EndGame()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SteamAPI_ISteamGameSearch_EndGame( ISteamGameSearch* self, uint64 ullUniqueGameID )"
  },
  {
    "label": "SteamAPI_SteamParties_v002()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamParties_v002()"
  },
  {
    "label": "SteamAPI_ISteamParties_GetNumActiveBeacons()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamParties_GetNumActiveBeacons( ISteamParties* self )"
  },
  {
    "label": "SteamAPI_ISteamParties_GetBeaconByIndex()",
    "kind": "Method",
    "detail": "Function (PartyBeaconID_t)",
    "insertText": "SteamAPI_ISteamParties_GetBeaconByIndex( ISteamParties* self, uint32 unIndex )"
  },
  {
    "label": "SteamAPI_ISteamParties_GetBeaconDetails()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamParties_GetBeaconDetails( ISteamParties* self, PartyBeaconID_t ulBeaconID, CSteamID * pSteamIDBeaconOwner, SteamPartyBeaconLocation_t * pLocation, char * pchMetadata, int cchMetadata )"
  },
  {
    "label": "SteamAPI_ISteamParties_JoinParty()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamParties_JoinParty( ISteamParties* self, PartyBeaconID_t ulBeaconID )"
  },
  {
    "label": "SteamAPI_ISteamParties_GetNumAvailableBeaconLocations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamParties_GetNumAvailableBeaconLocations( ISteamParties* self, uint32 * puNumLocations )"
  },
  {
    "label": "SteamAPI_ISteamParties_GetAvailableBeaconLocations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamParties_GetAvailableBeaconLocations( ISteamParties* self, SteamPartyBeaconLocation_t * pLocationList, uint32 uMaxNumLocations )"
  },
  {
    "label": "SteamAPI_ISteamParties_CreateBeacon()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamParties_CreateBeacon( ISteamParties* self, uint32 unOpenSlots, SteamPartyBeaconLocation_t * pBeaconLocation, const char * pchConnectString, const char * pchMetadata )"
  },
  {
    "label": "SteamAPI_ISteamParties_OnReservationCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamParties_OnReservationCompleted( ISteamParties* self, PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser )"
  },
  {
    "label": "SteamAPI_ISteamParties_CancelReservation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamParties_CancelReservation( ISteamParties* self, PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser )"
  },
  {
    "label": "SteamAPI_ISteamParties_ChangeNumOpenSlots()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamParties_ChangeNumOpenSlots( ISteamParties* self, PartyBeaconID_t ulBeacon, uint32 unOpenSlots )"
  },
  {
    "label": "SteamAPI_ISteamParties_DestroyBeacon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamParties_DestroyBeacon( ISteamParties* self, PartyBeaconID_t ulBeacon )"
  },
  {
    "label": "SteamAPI_ISteamParties_GetBeaconLocationData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamParties_GetBeaconLocationData( ISteamParties* self, SteamPartyBeaconLocation_t BeaconLocation, ESteamPartyBeaconLocationData eData, char * pchDataStringOut, int cchDataStringOut )"
  },
  {
    "label": "SteamAPI_SteamRemoteStorage_v016()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamRemoteStorage_v016()"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileWrite( ISteamRemoteStorage* self, const char * pchFile, const void * pvData, int32 cubData )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileRead()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileRead( ISteamRemoteStorage* self, const char * pchFile, void * pvData, int32 cubDataToRead )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileWriteAsync()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileWriteAsync( ISteamRemoteStorage* self, const char * pchFile, const void * pvData, uint32 cubData )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileReadAsync()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileReadAsync( ISteamRemoteStorage* self, const char * pchFile, uint32 nOffset, uint32 cubToRead )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete( ISteamRemoteStorage* self, SteamAPICall_t hReadCall, void * pvBuffer, uint32 cubToRead )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileForget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileForget( ISteamRemoteStorage* self, const char * pchFile )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileDelete( ISteamRemoteStorage* self, const char * pchFile )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileShare()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileShare( ISteamRemoteStorage* self, const char * pchFile )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_SetSyncPlatforms()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_SetSyncPlatforms( ISteamRemoteStorage* self, const char * pchFile, ERemoteStoragePlatform eRemoteStoragePlatform )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen()",
    "kind": "Method",
    "detail": "Function (UGCFileWriteStreamHandle_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen( ISteamRemoteStorage* self, const char * pchFile )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk( ISteamRemoteStorage* self, UGCFileWriteStreamHandle_t writeHandle, const void * pvData, int32 cubData )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileWriteStreamClose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileWriteStreamClose( ISteamRemoteStorage* self, UGCFileWriteStreamHandle_t writeHandle )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel( ISteamRemoteStorage* self, UGCFileWriteStreamHandle_t writeHandle )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FileExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FileExists( ISteamRemoteStorage* self, const char * pchFile )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_FilePersisted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_FilePersisted( ISteamRemoteStorage* self, const char * pchFile )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetFileSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetFileSize( ISteamRemoteStorage* self, const char * pchFile )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetFileTimestamp()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetFileTimestamp( ISteamRemoteStorage* self, const char * pchFile )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetSyncPlatforms()",
    "kind": "Method",
    "detail": "Function (ERemoteStoragePlatform)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetSyncPlatforms( ISteamRemoteStorage* self, const char * pchFile )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetFileCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetFileCount( ISteamRemoteStorage* self )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetQuota()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetQuota( ISteamRemoteStorage* self, uint64 * pnTotalBytes, uint64 * puAvailableBytes )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount( ISteamRemoteStorage* self )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp( ISteamRemoteStorage* self )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp( ISteamRemoteStorage* self, bool bEnabled )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_UGCDownload()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_UGCDownload( ISteamRemoteStorage* self, UGCHandle_t hContent, uint32 unPriority )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress( ISteamRemoteStorage* self, UGCHandle_t hContent, int32 * pnBytesDownloaded, int32 * pnBytesExpected )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetUGCDetails()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetUGCDetails( ISteamRemoteStorage* self, UGCHandle_t hContent, AppId_t * pnAppID, char ** ppchName, int32 * pnFileSizeInBytes, CSteamID * pSteamIDOwner )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_UGCRead()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SteamAPI_ISteamRemoteStorage_UGCRead( ISteamRemoteStorage* self, UGCHandle_t hContent, void * pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetCachedUGCCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetCachedUGCCount( ISteamRemoteStorage* self )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle()",
    "kind": "Method",
    "detail": "Function (UGCHandle_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle( ISteamRemoteStorage* self, int32 iCachedContent )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_PublishWorkshopFile()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_PublishWorkshopFile( ISteamRemoteStorage* self, const char * pchFile, const char * pchPreviewFile, AppId_t nConsumerAppId, const char * pchTitle, const char * pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t * pTags, EWorkshopFileType eWorkshopFileType )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest()",
    "kind": "Method",
    "detail": "Function (PublishedFileUpdateHandle_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest( ISteamRemoteStorage* self, PublishedFileId_t unPublishedFileId )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile( ISteamRemoteStorage* self, PublishedFileUpdateHandle_t updateHandle, const char * pchFile )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile( ISteamRemoteStorage* self, PublishedFileUpdateHandle_t updateHandle, const char * pchPreviewFile )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle( ISteamRemoteStorage* self, PublishedFileUpdateHandle_t updateHandle, const char * pchTitle )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription( ISteamRemoteStorage* self, PublishedFileUpdateHandle_t updateHandle, const char * pchDescription )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility( ISteamRemoteStorage* self, PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags( ISteamRemoteStorage* self, PublishedFileUpdateHandle_t updateHandle, SteamParamStringArray_t * pTags )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate( ISteamRemoteStorage* self, PublishedFileUpdateHandle_t updateHandle )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails( ISteamRemoteStorage* self, PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_DeletePublishedFile()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_DeletePublishedFile( ISteamRemoteStorage* self, PublishedFileId_t unPublishedFileId )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles( ISteamRemoteStorage* self, uint32 unStartIndex )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_SubscribePublishedFile()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_SubscribePublishedFile( ISteamRemoteStorage* self, PublishedFileId_t unPublishedFileId )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles( ISteamRemoteStorage* self, uint32 unStartIndex )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile( ISteamRemoteStorage* self, PublishedFileId_t unPublishedFileId )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription( ISteamRemoteStorage* self, PublishedFileUpdateHandle_t updateHandle, const char * pchChangeDescription )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails( ISteamRemoteStorage* self, PublishedFileId_t unPublishedFileId )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote( ISteamRemoteStorage* self, PublishedFileId_t unPublishedFileId, bool bVoteUp )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails( ISteamRemoteStorage* self, PublishedFileId_t unPublishedFileId )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles( ISteamRemoteStorage* self, uint64_steamid steamId, uint32 unStartIndex, SteamParamStringArray_t * pRequiredTags, SteamParamStringArray_t * pExcludedTags )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_PublishVideo()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_PublishVideo( ISteamRemoteStorage* self, EWorkshopVideoProvider eVideoProvider, const char * pchVideoAccount, const char * pchVideoIdentifier, const char * pchPreviewFile, AppId_t nConsumerAppId, const char * pchTitle, const char * pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t * pTags )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction( ISteamRemoteStorage* self, PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction( ISteamRemoteStorage* self, EWorkshopFileAction eAction, uint32 unStartIndex )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles( ISteamRemoteStorage* self, EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, SteamParamStringArray_t * pTags, SteamParamStringArray_t * pUserTags )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation( ISteamRemoteStorage* self, UGCHandle_t hContent, const char * pchLocation, uint32 unPriority )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount( ISteamRemoteStorage* self )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch( ISteamRemoteStorage* self )"
  },
  {
    "label": "SteamAPI_ISteamRemoteStorage_EndFileWriteBatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemoteStorage_EndFileWriteBatch( ISteamRemoteStorage* self )"
  },
  {
    "label": "SteamAPI_SteamUserStats_v012()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamUserStats_v012()"
  },
  {
    "label": "SteamAPI_ISteamUserStats_RequestCurrentStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_RequestCurrentStats( ISteamUserStats* self )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetStatInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetStatInt32( ISteamUserStats* self, const char * pchName, int32 * pData )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetStatFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetStatFloat( ISteamUserStats* self, const char * pchName, float * pData )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_SetStatInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_SetStatInt32( ISteamUserStats* self, const char * pchName, int32 nData )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_SetStatFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_SetStatFloat( ISteamUserStats* self, const char * pchName, float fData )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_UpdateAvgRateStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_UpdateAvgRateStat( ISteamUserStats* self, const char * pchName, float flCountThisSession, double dSessionLength )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetAchievement( ISteamUserStats* self, const char * pchName, bool * pbAchieved )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_SetAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_SetAchievement( ISteamUserStats* self, const char * pchName )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_ClearAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_ClearAchievement( ISteamUserStats* self, const char * pchName )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime( ISteamUserStats* self, const char * pchName, bool * pbAchieved, uint32 * punUnlockTime )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_StoreStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_StoreStats( ISteamUserStats* self )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetAchievementIcon()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamUserStats_GetAchievementIcon( ISteamUserStats* self, const char * pchName )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_IndicateAchievementProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_IndicateAchievementProgress( ISteamUserStats* self, const char * pchName, uint32 nCurProgress, uint32 nMaxProgress )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetNumAchievements()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUserStats_GetNumAchievements( ISteamUserStats* self )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_RequestUserStats()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUserStats_RequestUserStats( ISteamUserStats* self, uint64_steamid steamIDUser )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetUserStatInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetUserStatInt32( ISteamUserStats* self, uint64_steamid steamIDUser, const char * pchName, int32 * pData )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetUserStatFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetUserStatFloat( ISteamUserStats* self, uint64_steamid steamIDUser, const char * pchName, float * pData )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetUserAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetUserAchievement( ISteamUserStats* self, uint64_steamid steamIDUser, const char * pchName, bool * pbAchieved )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime( ISteamUserStats* self, uint64_steamid steamIDUser, const char * pchName, bool * pbAchieved, uint32 * punUnlockTime )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_ResetAllStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_ResetAllStats( ISteamUserStats* self, bool bAchievementsToo )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_FindOrCreateLeaderboard()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUserStats_FindOrCreateLeaderboard( ISteamUserStats* self, const char * pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_FindLeaderboard()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUserStats_FindLeaderboard( ISteamUserStats* self, const char * pchLeaderboardName )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetLeaderboardEntryCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamUserStats_GetLeaderboardEntryCount( ISteamUserStats* self, SteamLeaderboard_t hSteamLeaderboard )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetLeaderboardSortMethod()",
    "kind": "Method",
    "detail": "Function (ELeaderboardSortMethod)",
    "insertText": "SteamAPI_ISteamUserStats_GetLeaderboardSortMethod( ISteamUserStats* self, SteamLeaderboard_t hSteamLeaderboard )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetLeaderboardDisplayType()",
    "kind": "Method",
    "detail": "Function (ELeaderboardDisplayType)",
    "insertText": "SteamAPI_ISteamUserStats_GetLeaderboardDisplayType( ISteamUserStats* self, SteamLeaderboard_t hSteamLeaderboard )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_DownloadLeaderboardEntries()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUserStats_DownloadLeaderboardEntries( ISteamUserStats* self, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers( ISteamUserStats* self, SteamLeaderboard_t hSteamLeaderboard, CSteamID * prgUsers, int cUsers )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry( ISteamUserStats* self, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t * pLeaderboardEntry, int32 * pDetails, int cDetailsMax )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_UploadLeaderboardScore()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUserStats_UploadLeaderboardScore( ISteamUserStats* self, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 * pScoreDetails, int cScoreDetailsCount )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_AttachLeaderboardUGC()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUserStats_AttachLeaderboardUGC( ISteamUserStats* self, SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers( ISteamUserStats* self )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages( ISteamUserStats* self )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo( ISteamUserStats* self, char * pchName, uint32 unNameBufLen, float * pflPercent, bool * pbAchieved )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo( ISteamUserStats* self, int iIteratorPrevious, char * pchName, uint32 unNameBufLen, float * pflPercent, bool * pbAchieved )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetAchievementAchievedPercent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetAchievementAchievedPercent( ISteamUserStats* self, const char * pchName, float * pflPercent )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_RequestGlobalStats()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUserStats_RequestGlobalStats( ISteamUserStats* self, int nHistoryDays )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetGlobalStatInt64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetGlobalStatInt64( ISteamUserStats* self, const char * pchStatName, int64 * pData )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetGlobalStatDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetGlobalStatDouble( ISteamUserStats* self, const char * pchStatName, double * pData )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64( ISteamUserStats* self, const char * pchStatName, int64 * pData, uint32 cubData )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble( ISteamUserStats* self, const char * pchStatName, double * pData, uint32 cubData )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32( ISteamUserStats* self, const char * pchName, int32 * pnMinProgress, int32 * pnMaxProgress )"
  },
  {
    "label": "SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat( ISteamUserStats* self, const char * pchName, float * pfMinProgress, float * pfMaxProgress )"
  },
  {
    "label": "SteamAPI_SteamApps_v008()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamApps_v008()"
  },
  {
    "label": "SteamAPI_ISteamApps_BIsSubscribed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_BIsSubscribed( ISteamApps* self )"
  },
  {
    "label": "SteamAPI_ISteamApps_BIsLowViolence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_BIsLowViolence( ISteamApps* self )"
  },
  {
    "label": "SteamAPI_ISteamApps_BIsCybercafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_BIsCybercafe( ISteamApps* self )"
  },
  {
    "label": "SteamAPI_ISteamApps_BIsVACBanned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_BIsVACBanned( ISteamApps* self )"
  },
  {
    "label": "SteamAPI_ISteamApps_BIsSubscribedApp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_BIsSubscribedApp( ISteamApps* self, AppId_t appID )"
  },
  {
    "label": "SteamAPI_ISteamApps_BIsDlcInstalled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_BIsDlcInstalled( ISteamApps* self, AppId_t appID )"
  },
  {
    "label": "SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime( ISteamApps* self, AppId_t nAppID )"
  },
  {
    "label": "SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend( ISteamApps* self )"
  },
  {
    "label": "SteamAPI_ISteamApps_GetDLCCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamApps_GetDLCCount( ISteamApps* self )"
  },
  {
    "label": "SteamAPI_ISteamApps_BGetDLCDataByIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_BGetDLCDataByIndex( ISteamApps* self, int iDLC, AppId_t * pAppID, bool * pbAvailable, char * pchName, int cchNameBufferSize )"
  },
  {
    "label": "SteamAPI_ISteamApps_InstallDLC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamApps_InstallDLC( ISteamApps* self, AppId_t nAppID )"
  },
  {
    "label": "SteamAPI_ISteamApps_UninstallDLC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamApps_UninstallDLC( ISteamApps* self, AppId_t nAppID )"
  },
  {
    "label": "SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey( ISteamApps* self, AppId_t nAppID )"
  },
  {
    "label": "SteamAPI_ISteamApps_GetCurrentBetaName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_GetCurrentBetaName( ISteamApps* self, char * pchName, int cchNameBufferSize )"
  },
  {
    "label": "SteamAPI_ISteamApps_MarkContentCorrupt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_MarkContentCorrupt( ISteamApps* self, bool bMissingFilesOnly )"
  },
  {
    "label": "SteamAPI_ISteamApps_GetInstalledDepots()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamApps_GetInstalledDepots( ISteamApps* self, AppId_t appID, DepotId_t * pvecDepots, uint32 cMaxDepots )"
  },
  {
    "label": "SteamAPI_ISteamApps_GetAppInstallDir()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamApps_GetAppInstallDir( ISteamApps* self, AppId_t appID, char * pchFolder, uint32 cchFolderBufferSize )"
  },
  {
    "label": "SteamAPI_ISteamApps_BIsAppInstalled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_BIsAppInstalled( ISteamApps* self, AppId_t appID )"
  },
  {
    "label": "SteamAPI_ISteamApps_GetAppOwner()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamApps_GetAppOwner( ISteamApps* self )"
  },
  {
    "label": "SteamAPI_ISteamApps_GetDlcDownloadProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_GetDlcDownloadProgress( ISteamApps* self, AppId_t nAppID, uint64 * punBytesDownloaded, uint64 * punBytesTotal )"
  },
  {
    "label": "SteamAPI_ISteamApps_GetAppBuildId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamApps_GetAppBuildId( ISteamApps* self )"
  },
  {
    "label": "SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys( ISteamApps* self )"
  },
  {
    "label": "SteamAPI_ISteamApps_GetFileDetails()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamApps_GetFileDetails( ISteamApps* self, const char * pszFileName )"
  },
  {
    "label": "SteamAPI_ISteamApps_GetLaunchCommandLine()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamApps_GetLaunchCommandLine( ISteamApps* self, char * pszCommandLine, int cubCommandLine )"
  },
  {
    "label": "SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing( ISteamApps* self )"
  },
  {
    "label": "SteamAPI_ISteamApps_BIsTimedTrial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_BIsTimedTrial( ISteamApps* self, uint32 * punSecondsAllowed, uint32 * punSecondsPlayed )"
  },
  {
    "label": "SteamAPI_ISteamApps_SetDlcContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamApps_SetDlcContext( ISteamApps* self, AppId_t nAppID )"
  },
  {
    "label": "SteamAPI_SteamNetworking_v006()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamNetworking_v006()"
  },
  {
    "label": "SteamAPI_SteamGameServerNetworking_v006()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamGameServerNetworking_v006()"
  },
  {
    "label": "SteamAPI_ISteamNetworking_SendP2PPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_SendP2PPacket( ISteamNetworking* self, uint64_steamid steamIDRemote, const void * pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_IsP2PPacketAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_IsP2PPacketAvailable( ISteamNetworking* self, uint32 * pcubMsgSize, int nChannel )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_ReadP2PPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_ReadP2PPacket( ISteamNetworking* self, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize, CSteamID * psteamIDRemote, int nChannel )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser( ISteamNetworking* self, uint64_steamid steamIDRemote )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_CloseP2PSessionWithUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_CloseP2PSessionWithUser( ISteamNetworking* self, uint64_steamid steamIDRemote )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_CloseP2PChannelWithUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_CloseP2PChannelWithUser( ISteamNetworking* self, uint64_steamid steamIDRemote, int nChannel )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_GetP2PSessionState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_GetP2PSessionState( ISteamNetworking* self, uint64_steamid steamIDRemote, P2PSessionState_t * pConnectionState )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_AllowP2PPacketRelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_AllowP2PPacketRelay( ISteamNetworking* self, bool bAllow )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_CreateListenSocket()",
    "kind": "Method",
    "detail": "Function (SNetListenSocket_t)",
    "insertText": "SteamAPI_ISteamNetworking_CreateListenSocket( ISteamNetworking* self, int nVirtualP2PPort, SteamIPAddress_t nIP, uint16 nPort, bool bAllowUseOfPacketRelay )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_CreateP2PConnectionSocket()",
    "kind": "Method",
    "detail": "Function (SNetSocket_t)",
    "insertText": "SteamAPI_ISteamNetworking_CreateP2PConnectionSocket( ISteamNetworking* self, uint64_steamid steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_CreateConnectionSocket()",
    "kind": "Method",
    "detail": "Function (SNetSocket_t)",
    "insertText": "SteamAPI_ISteamNetworking_CreateConnectionSocket( ISteamNetworking* self, SteamIPAddress_t nIP, uint16 nPort, int nTimeoutSec )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_DestroySocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_DestroySocket( ISteamNetworking* self, SNetSocket_t hSocket, bool bNotifyRemoteEnd )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_DestroyListenSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_DestroyListenSocket( ISteamNetworking* self, SNetListenSocket_t hSocket, bool bNotifyRemoteEnd )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_SendDataOnSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_SendDataOnSocket( ISteamNetworking* self, SNetSocket_t hSocket, void * pubData, uint32 cubData, bool bReliable )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_IsDataAvailableOnSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_IsDataAvailableOnSocket( ISteamNetworking* self, SNetSocket_t hSocket, uint32 * pcubMsgSize )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_RetrieveDataFromSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_RetrieveDataFromSocket( ISteamNetworking* self, SNetSocket_t hSocket, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_IsDataAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_IsDataAvailable( ISteamNetworking* self, SNetListenSocket_t hListenSocket, uint32 * pcubMsgSize, SNetSocket_t * phSocket )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_RetrieveData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_RetrieveData( ISteamNetworking* self, SNetListenSocket_t hListenSocket, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize, SNetSocket_t * phSocket )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_GetSocketInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_GetSocketInfo( ISteamNetworking* self, SNetSocket_t hSocket, CSteamID * pSteamIDRemote, int * peSocketStatus, SteamIPAddress_t * punIPRemote, uint16 * punPortRemote )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_GetListenSocketInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworking_GetListenSocketInfo( ISteamNetworking* self, SNetListenSocket_t hListenSocket, SteamIPAddress_t * pnIP, uint16 * pnPort )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_GetSocketConnectionType()",
    "kind": "Method",
    "detail": "Function (ESNetSocketConnectionType)",
    "insertText": "SteamAPI_ISteamNetworking_GetSocketConnectionType( ISteamNetworking* self, SNetSocket_t hSocket )"
  },
  {
    "label": "SteamAPI_ISteamNetworking_GetMaxPacketSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworking_GetMaxPacketSize( ISteamNetworking* self, SNetSocket_t hSocket )"
  },
  {
    "label": "SteamAPI_SteamScreenshots_v003()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamScreenshots_v003()"
  },
  {
    "label": "SteamAPI_ISteamScreenshots_WriteScreenshot()",
    "kind": "Method",
    "detail": "Function (ScreenshotHandle)",
    "insertText": "SteamAPI_ISteamScreenshots_WriteScreenshot( ISteamScreenshots* self, void * pubRGB, uint32 cubRGB, int nWidth, int nHeight )"
  },
  {
    "label": "SteamAPI_ISteamScreenshots_AddScreenshotToLibrary()",
    "kind": "Method",
    "detail": "Function (ScreenshotHandle)",
    "insertText": "SteamAPI_ISteamScreenshots_AddScreenshotToLibrary( ISteamScreenshots* self, const char * pchFilename, const char * pchThumbnailFilename, int nWidth, int nHeight )"
  },
  {
    "label": "SteamAPI_ISteamScreenshots_TriggerScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamScreenshots_TriggerScreenshot( ISteamScreenshots* self )"
  },
  {
    "label": "SteamAPI_ISteamScreenshots_HookScreenshots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamScreenshots_HookScreenshots( ISteamScreenshots* self, bool bHook )"
  },
  {
    "label": "SteamAPI_ISteamScreenshots_SetLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamScreenshots_SetLocation( ISteamScreenshots* self, ScreenshotHandle hScreenshot, const char * pchLocation )"
  },
  {
    "label": "SteamAPI_ISteamScreenshots_TagUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamScreenshots_TagUser( ISteamScreenshots* self, ScreenshotHandle hScreenshot, uint64_steamid steamID )"
  },
  {
    "label": "SteamAPI_ISteamScreenshots_TagPublishedFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamScreenshots_TagPublishedFile( ISteamScreenshots* self, ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID )"
  },
  {
    "label": "SteamAPI_ISteamScreenshots_IsScreenshotsHooked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamScreenshots_IsScreenshotsHooked( ISteamScreenshots* self )"
  },
  {
    "label": "SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary()",
    "kind": "Method",
    "detail": "Function (ScreenshotHandle)",
    "insertText": "SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary( ISteamScreenshots* self, EVRScreenshotType eType, const char * pchFilename, const char * pchVRFilename )"
  },
  {
    "label": "SteamAPI_SteamMusic_v001()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamMusic_v001()"
  },
  {
    "label": "SteamAPI_ISteamMusic_BIsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusic_BIsEnabled( ISteamMusic* self )"
  },
  {
    "label": "SteamAPI_ISteamMusic_BIsPlaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusic_BIsPlaying( ISteamMusic* self )"
  },
  {
    "label": "SteamAPI_ISteamMusic_GetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (AudioPlayback_Status)",
    "insertText": "SteamAPI_ISteamMusic_GetPlaybackStatus( ISteamMusic* self )"
  },
  {
    "label": "SteamAPI_ISteamMusic_Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMusic_Play( ISteamMusic* self )"
  },
  {
    "label": "SteamAPI_ISteamMusic_Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMusic_Pause( ISteamMusic* self )"
  },
  {
    "label": "SteamAPI_ISteamMusic_PlayPrevious()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMusic_PlayPrevious( ISteamMusic* self )"
  },
  {
    "label": "SteamAPI_ISteamMusic_PlayNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMusic_PlayNext( ISteamMusic* self )"
  },
  {
    "label": "SteamAPI_ISteamMusic_SetVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamMusic_SetVolume( ISteamMusic* self, float flVolume )"
  },
  {
    "label": "SteamAPI_ISteamMusic_GetVolume()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SteamAPI_ISteamMusic_GetVolume( ISteamMusic* self )"
  },
  {
    "label": "SteamAPI_SteamMusicRemote_v001()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamMusicRemote_v001()"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote( ISteamMusicRemote* self, const char * pchName )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote( ISteamMusicRemote* self )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote( ISteamMusicRemote* self )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_BActivationSuccess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_BActivationSuccess( ISteamMusicRemote* self, bool bValue )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_SetDisplayName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_SetDisplayName( ISteamMusicRemote* self, const char * pchDisplayName )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64( ISteamMusicRemote* self, void * pvBuffer, uint32 cbBufferLength )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_EnablePlayPrevious()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_EnablePlayPrevious( ISteamMusicRemote* self, bool bValue )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_EnablePlayNext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_EnablePlayNext( ISteamMusicRemote* self, bool bValue )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_EnableShuffled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_EnableShuffled( ISteamMusicRemote* self, bool bValue )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_EnableLooped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_EnableLooped( ISteamMusicRemote* self, bool bValue )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_EnableQueue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_EnableQueue( ISteamMusicRemote* self, bool bValue )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_EnablePlaylists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_EnablePlaylists( ISteamMusicRemote* self, bool bValue )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus( ISteamMusicRemote* self, AudioPlayback_Status nStatus )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_UpdateShuffled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_UpdateShuffled( ISteamMusicRemote* self, bool bValue )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_UpdateLooped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_UpdateLooped( ISteamMusicRemote* self, bool bValue )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_UpdateVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_UpdateVolume( ISteamMusicRemote* self, float flValue )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_CurrentEntryWillChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_CurrentEntryWillChange( ISteamMusicRemote* self )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable( ISteamMusicRemote* self, bool bAvailable )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText( ISteamMusicRemote* self, const char * pchText )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds( ISteamMusicRemote* self, int nValue )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt( ISteamMusicRemote* self, void * pvBuffer, uint32 cbBufferLength )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_CurrentEntryDidChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_CurrentEntryDidChange( ISteamMusicRemote* self )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_QueueWillChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_QueueWillChange( ISteamMusicRemote* self )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_ResetQueueEntries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_ResetQueueEntries( ISteamMusicRemote* self )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_SetQueueEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_SetQueueEntry( ISteamMusicRemote* self, int nID, int nPosition, const char * pchEntryText )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry( ISteamMusicRemote* self, int nID )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_QueueDidChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_QueueDidChange( ISteamMusicRemote* self )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_PlaylistWillChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_PlaylistWillChange( ISteamMusicRemote* self )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_ResetPlaylistEntries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_ResetPlaylistEntries( ISteamMusicRemote* self )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_SetPlaylistEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_SetPlaylistEntry( ISteamMusicRemote* self, int nID, int nPosition, const char * pchEntryText )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry( ISteamMusicRemote* self, int nID )"
  },
  {
    "label": "SteamAPI_ISteamMusicRemote_PlaylistDidChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamMusicRemote_PlaylistDidChange( ISteamMusicRemote* self )"
  },
  {
    "label": "SteamAPI_SteamHTTP_v003()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamHTTP_v003()"
  },
  {
    "label": "SteamAPI_SteamGameServerHTTP_v003()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamGameServerHTTP_v003()"
  },
  {
    "label": "SteamAPI_ISteamHTTP_CreateHTTPRequest()",
    "kind": "Method",
    "detail": "Function (HTTPRequestHandle)",
    "insertText": "SteamAPI_ISteamHTTP_CreateHTTPRequest( ISteamHTTP* self, EHTTPMethod eHTTPRequestMethod, const char * pchAbsoluteURL )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_SetHTTPRequestContextValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_SetHTTPRequestContextValue( ISteamHTTP* self, HTTPRequestHandle hRequest, uint64 ulContextValue )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout( ISteamHTTP* self, HTTPRequestHandle hRequest, uint32 unTimeoutSeconds )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue( ISteamHTTP* self, HTTPRequestHandle hRequest, const char * pchHeaderName, const char * pchHeaderValue )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter( ISteamHTTP* self, HTTPRequestHandle hRequest, const char * pchParamName, const char * pchParamValue )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_SendHTTPRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_SendHTTPRequest( ISteamHTTP* self, HTTPRequestHandle hRequest, SteamAPICall_t * pCallHandle )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse( ISteamHTTP* self, HTTPRequestHandle hRequest, SteamAPICall_t * pCallHandle )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_DeferHTTPRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_DeferHTTPRequest( ISteamHTTP* self, HTTPRequestHandle hRequest )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_PrioritizeHTTPRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_PrioritizeHTTPRequest( ISteamHTTP* self, HTTPRequestHandle hRequest )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize( ISteamHTTP* self, HTTPRequestHandle hRequest, const char * pchHeaderName, uint32 * unResponseHeaderSize )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue( ISteamHTTP* self, HTTPRequestHandle hRequest, const char * pchHeaderName, uint8 * pHeaderValueBuffer, uint32 unBufferSize )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_GetHTTPResponseBodySize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_GetHTTPResponseBodySize( ISteamHTTP* self, HTTPRequestHandle hRequest, uint32 * unBodySize )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_GetHTTPResponseBodyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_GetHTTPResponseBodyData( ISteamHTTP* self, HTTPRequestHandle hRequest, uint8 * pBodyDataBuffer, uint32 unBufferSize )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData( ISteamHTTP* self, HTTPRequestHandle hRequest, uint32 cOffset, uint8 * pBodyDataBuffer, uint32 unBufferSize )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_ReleaseHTTPRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_ReleaseHTTPRequest( ISteamHTTP* self, HTTPRequestHandle hRequest )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct( ISteamHTTP* self, HTTPRequestHandle hRequest, float * pflPercentOut )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody( ISteamHTTP* self, HTTPRequestHandle hRequest, const char * pchContentType, uint8 * pubBody, uint32 unBodyLen )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_CreateCookieContainer()",
    "kind": "Method",
    "detail": "Function (HTTPCookieContainerHandle)",
    "insertText": "SteamAPI_ISteamHTTP_CreateCookieContainer( ISteamHTTP* self, bool bAllowResponsesToModify )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_ReleaseCookieContainer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_ReleaseCookieContainer( ISteamHTTP* self, HTTPCookieContainerHandle hCookieContainer )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_SetCookie()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_SetCookie( ISteamHTTP* self, HTTPCookieContainerHandle hCookieContainer, const char * pchHost, const char * pchUrl, const char * pchCookie )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer( ISteamHTTP* self, HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo( ISteamHTTP* self, HTTPRequestHandle hRequest, const char * pchUserAgentInfo )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate( ISteamHTTP* self, HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS( ISteamHTTP* self, HTTPRequestHandle hRequest, uint32 unMilliseconds )"
  },
  {
    "label": "SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut( ISteamHTTP* self, HTTPRequestHandle hRequest, bool * pbWasTimedOut )"
  },
  {
    "label": "SteamAPI_SteamInput_v006()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamInput_v006()"
  },
  {
    "label": "SteamAPI_ISteamInput_Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInput_Init( ISteamInput* self, bool bExplicitlyCallRunFrame )"
  },
  {
    "label": "SteamAPI_ISteamInput_Shutdown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInput_Shutdown( ISteamInput* self )"
  },
  {
    "label": "SteamAPI_ISteamInput_SetInputActionManifestFilePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInput_SetInputActionManifestFilePath( ISteamInput* self, const char * pchInputActionManifestAbsolutePath )"
  },
  {
    "label": "SteamAPI_ISteamInput_RunFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_RunFrame( ISteamInput* self, bool bReservedValue )"
  },
  {
    "label": "SteamAPI_ISteamInput_BWaitForData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInput_BWaitForData( ISteamInput* self, bool bWaitForever, uint32 unTimeout )"
  },
  {
    "label": "SteamAPI_ISteamInput_BNewDataAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInput_BNewDataAvailable( ISteamInput* self )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetConnectedControllers()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamInput_GetConnectedControllers( ISteamInput* self, InputHandle_t * handlesOut )"
  },
  {
    "label": "SteamAPI_ISteamInput_EnableDeviceCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_EnableDeviceCallbacks( ISteamInput* self )"
  },
  {
    "label": "SteamAPI_ISteamInput_EnableActionEventCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_EnableActionEventCallbacks( ISteamInput* self, SteamInputActionEventCallbackPointer pCallback )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetActionSetHandle()",
    "kind": "Method",
    "detail": "Function (InputActionSetHandle_t)",
    "insertText": "SteamAPI_ISteamInput_GetActionSetHandle( ISteamInput* self, const char * pszActionSetName )"
  },
  {
    "label": "SteamAPI_ISteamInput_ActivateActionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_ActivateActionSet( ISteamInput* self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetCurrentActionSet()",
    "kind": "Method",
    "detail": "Function (InputActionSetHandle_t)",
    "insertText": "SteamAPI_ISteamInput_GetCurrentActionSet( ISteamInput* self, InputHandle_t inputHandle )"
  },
  {
    "label": "SteamAPI_ISteamInput_ActivateActionSetLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_ActivateActionSetLayer( ISteamInput* self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle )"
  },
  {
    "label": "SteamAPI_ISteamInput_DeactivateActionSetLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_DeactivateActionSetLayer( ISteamInput* self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle )"
  },
  {
    "label": "SteamAPI_ISteamInput_DeactivateAllActionSetLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_DeactivateAllActionSetLayers( ISteamInput* self, InputHandle_t inputHandle )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetActiveActionSetLayers()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamInput_GetActiveActionSetLayers( ISteamInput* self, InputHandle_t inputHandle, InputActionSetHandle_t * handlesOut )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetDigitalActionHandle()",
    "kind": "Method",
    "detail": "Function (InputDigitalActionHandle_t)",
    "insertText": "SteamAPI_ISteamInput_GetDigitalActionHandle( ISteamInput* self, const char * pszActionName )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetDigitalActionData()",
    "kind": "Method",
    "detail": "Function (InputDigitalActionData_t)",
    "insertText": "SteamAPI_ISteamInput_GetDigitalActionData( ISteamInput* self, InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetDigitalActionOrigins()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamInput_GetDigitalActionOrigins( ISteamInput* self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, EInputActionOrigin * originsOut )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetAnalogActionHandle()",
    "kind": "Method",
    "detail": "Function (InputAnalogActionHandle_t)",
    "insertText": "SteamAPI_ISteamInput_GetAnalogActionHandle( ISteamInput* self, const char * pszActionName )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetAnalogActionData()",
    "kind": "Method",
    "detail": "Function (InputAnalogActionData_t)",
    "insertText": "SteamAPI_ISteamInput_GetAnalogActionData( ISteamInput* self, InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetAnalogActionOrigins()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamInput_GetAnalogActionOrigins( ISteamInput* self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, EInputActionOrigin * originsOut )"
  },
  {
    "label": "SteamAPI_ISteamInput_StopAnalogActionMomentum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_StopAnalogActionMomentum( ISteamInput* self, InputHandle_t inputHandle, InputAnalogActionHandle_t eAction )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetMotionData()",
    "kind": "Method",
    "detail": "Function (InputMotionData_t)",
    "insertText": "SteamAPI_ISteamInput_GetMotionData( ISteamInput* self, InputHandle_t inputHandle )"
  },
  {
    "label": "SteamAPI_ISteamInput_TriggerVibration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_TriggerVibration( ISteamInput* self, InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed )"
  },
  {
    "label": "SteamAPI_ISteamInput_TriggerVibrationExtended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_TriggerVibrationExtended( ISteamInput* self, InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed, unsigned short usLeftTriggerSpeed, unsigned short usRightTriggerSpeed )"
  },
  {
    "label": "SteamAPI_ISteamInput_TriggerSimpleHapticEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_TriggerSimpleHapticEvent( ISteamInput* self, InputHandle_t inputHandle, EControllerHapticLocation eHapticLocation, uint8 nIntensity, char nGainDB, uint8 nOtherIntensity, char nOtherGainDB )"
  },
  {
    "label": "SteamAPI_ISteamInput_SetLEDColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_SetLEDColor( ISteamInput* self, InputHandle_t inputHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags )"
  },
  {
    "label": "SteamAPI_ISteamInput_Legacy_TriggerHapticPulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_Legacy_TriggerHapticPulse( ISteamInput* self, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec )"
  },
  {
    "label": "SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse( ISteamInput* self, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags )"
  },
  {
    "label": "SteamAPI_ISteamInput_ShowBindingPanel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInput_ShowBindingPanel( ISteamInput* self, InputHandle_t inputHandle )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetInputTypeForHandle()",
    "kind": "Method",
    "detail": "Function (ESteamInputType)",
    "insertText": "SteamAPI_ISteamInput_GetInputTypeForHandle( ISteamInput* self, InputHandle_t inputHandle )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetControllerForGamepadIndex()",
    "kind": "Method",
    "detail": "Function (InputHandle_t)",
    "insertText": "SteamAPI_ISteamInput_GetControllerForGamepadIndex( ISteamInput* self, int nIndex )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetGamepadIndexForController()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamInput_GetGamepadIndexForController( ISteamInput* self, InputHandle_t ulinputHandle )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin()",
    "kind": "Method",
    "detail": "Function (EInputActionOrigin)",
    "insertText": "SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin( ISteamInput* self, InputHandle_t inputHandle, EXboxOrigin eOrigin )"
  },
  {
    "label": "SteamAPI_ISteamInput_TranslateActionOrigin()",
    "kind": "Method",
    "detail": "Function (EInputActionOrigin)",
    "insertText": "SteamAPI_ISteamInput_TranslateActionOrigin( ISteamInput* self, ESteamInputType eDestinationInputType, EInputActionOrigin eSourceOrigin )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetDeviceBindingRevision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInput_GetDeviceBindingRevision( ISteamInput* self, InputHandle_t inputHandle, int * pMajor, int * pMinor )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetRemotePlaySessionID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamInput_GetRemotePlaySessionID( ISteamInput* self, InputHandle_t inputHandle )"
  },
  {
    "label": "SteamAPI_ISteamInput_GetSessionInputConfigurationSettings()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "SteamAPI_ISteamInput_GetSessionInputConfigurationSettings( ISteamInput* self )"
  },
  {
    "label": "SteamAPI_ISteamInput_SetDualSenseTriggerEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInput_SetDualSenseTriggerEffect( ISteamInput* self, InputHandle_t inputHandle, const ScePadTriggerEffectParam * pParam )"
  },
  {
    "label": "SteamAPI_SteamController_v008()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamController_v008()"
  },
  {
    "label": "SteamAPI_ISteamController_Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamController_Init( ISteamController* self )"
  },
  {
    "label": "SteamAPI_ISteamController_Shutdown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamController_Shutdown( ISteamController* self )"
  },
  {
    "label": "SteamAPI_ISteamController_RunFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamController_RunFrame( ISteamController* self )"
  },
  {
    "label": "SteamAPI_ISteamController_GetConnectedControllers()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamController_GetConnectedControllers( ISteamController* self, ControllerHandle_t * handlesOut )"
  },
  {
    "label": "SteamAPI_ISteamController_GetActionSetHandle()",
    "kind": "Method",
    "detail": "Function (ControllerActionSetHandle_t)",
    "insertText": "SteamAPI_ISteamController_GetActionSetHandle( ISteamController* self, const char * pszActionSetName )"
  },
  {
    "label": "SteamAPI_ISteamController_ActivateActionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamController_ActivateActionSet( ISteamController* self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle )"
  },
  {
    "label": "SteamAPI_ISteamController_GetCurrentActionSet()",
    "kind": "Method",
    "detail": "Function (ControllerActionSetHandle_t)",
    "insertText": "SteamAPI_ISteamController_GetCurrentActionSet( ISteamController* self, ControllerHandle_t controllerHandle )"
  },
  {
    "label": "SteamAPI_ISteamController_ActivateActionSetLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamController_ActivateActionSetLayer( ISteamController* self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle )"
  },
  {
    "label": "SteamAPI_ISteamController_DeactivateActionSetLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamController_DeactivateActionSetLayer( ISteamController* self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle )"
  },
  {
    "label": "SteamAPI_ISteamController_DeactivateAllActionSetLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamController_DeactivateAllActionSetLayers( ISteamController* self, ControllerHandle_t controllerHandle )"
  },
  {
    "label": "SteamAPI_ISteamController_GetActiveActionSetLayers()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamController_GetActiveActionSetLayers( ISteamController* self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t * handlesOut )"
  },
  {
    "label": "SteamAPI_ISteamController_GetDigitalActionHandle()",
    "kind": "Method",
    "detail": "Function (ControllerDigitalActionHandle_t)",
    "insertText": "SteamAPI_ISteamController_GetDigitalActionHandle( ISteamController* self, const char * pszActionName )"
  },
  {
    "label": "SteamAPI_ISteamController_GetDigitalActionData()",
    "kind": "Method",
    "detail": "Function (InputDigitalActionData_t)",
    "insertText": "SteamAPI_ISteamController_GetDigitalActionData( ISteamController* self, ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle )"
  },
  {
    "label": "SteamAPI_ISteamController_GetDigitalActionOrigins()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamController_GetDigitalActionOrigins( ISteamController* self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin * originsOut )"
  },
  {
    "label": "SteamAPI_ISteamController_GetAnalogActionHandle()",
    "kind": "Method",
    "detail": "Function (ControllerAnalogActionHandle_t)",
    "insertText": "SteamAPI_ISteamController_GetAnalogActionHandle( ISteamController* self, const char * pszActionName )"
  },
  {
    "label": "SteamAPI_ISteamController_GetAnalogActionData()",
    "kind": "Method",
    "detail": "Function (InputAnalogActionData_t)",
    "insertText": "SteamAPI_ISteamController_GetAnalogActionData( ISteamController* self, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle )"
  },
  {
    "label": "SteamAPI_ISteamController_GetAnalogActionOrigins()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamController_GetAnalogActionOrigins( ISteamController* self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin * originsOut )"
  },
  {
    "label": "SteamAPI_ISteamController_StopAnalogActionMomentum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamController_StopAnalogActionMomentum( ISteamController* self, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction )"
  },
  {
    "label": "SteamAPI_ISteamController_GetMotionData()",
    "kind": "Method",
    "detail": "Function (InputMotionData_t)",
    "insertText": "SteamAPI_ISteamController_GetMotionData( ISteamController* self, ControllerHandle_t controllerHandle )"
  },
  {
    "label": "SteamAPI_ISteamController_TriggerHapticPulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamController_TriggerHapticPulse( ISteamController* self, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec )"
  },
  {
    "label": "SteamAPI_ISteamController_TriggerRepeatedHapticPulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamController_TriggerRepeatedHapticPulse( ISteamController* self, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags )"
  },
  {
    "label": "SteamAPI_ISteamController_TriggerVibration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamController_TriggerVibration( ISteamController* self, ControllerHandle_t controllerHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed )"
  },
  {
    "label": "SteamAPI_ISteamController_SetLEDColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamController_SetLEDColor( ISteamController* self, ControllerHandle_t controllerHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags )"
  },
  {
    "label": "SteamAPI_ISteamController_ShowBindingPanel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamController_ShowBindingPanel( ISteamController* self, ControllerHandle_t controllerHandle )"
  },
  {
    "label": "SteamAPI_ISteamController_GetInputTypeForHandle()",
    "kind": "Method",
    "detail": "Function (ESteamInputType)",
    "insertText": "SteamAPI_ISteamController_GetInputTypeForHandle( ISteamController* self, ControllerHandle_t controllerHandle )"
  },
  {
    "label": "SteamAPI_ISteamController_GetControllerForGamepadIndex()",
    "kind": "Method",
    "detail": "Function (ControllerHandle_t)",
    "insertText": "SteamAPI_ISteamController_GetControllerForGamepadIndex( ISteamController* self, int nIndex )"
  },
  {
    "label": "SteamAPI_ISteamController_GetGamepadIndexForController()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamController_GetGamepadIndexForController( ISteamController* self, ControllerHandle_t ulControllerHandle )"
  },
  {
    "label": "SteamAPI_ISteamController_GetActionOriginFromXboxOrigin()",
    "kind": "Method",
    "detail": "Function (EControllerActionOrigin)",
    "insertText": "SteamAPI_ISteamController_GetActionOriginFromXboxOrigin( ISteamController* self, ControllerHandle_t controllerHandle, EXboxOrigin eOrigin )"
  },
  {
    "label": "SteamAPI_ISteamController_TranslateActionOrigin()",
    "kind": "Method",
    "detail": "Function (EControllerActionOrigin)",
    "insertText": "SteamAPI_ISteamController_TranslateActionOrigin( ISteamController* self, ESteamInputType eDestinationInputType, EControllerActionOrigin eSourceOrigin )"
  },
  {
    "label": "SteamAPI_ISteamController_GetControllerBindingRevision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamController_GetControllerBindingRevision( ISteamController* self, ControllerHandle_t controllerHandle, int * pMajor, int * pMinor )"
  },
  {
    "label": "SteamAPI_SteamUGC_v017()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamUGC_v017()"
  },
  {
    "label": "SteamAPI_SteamGameServerUGC_v017()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamGameServerUGC_v017()"
  },
  {
    "label": "SteamAPI_ISteamUGC_CreateQueryUserUGCRequest()",
    "kind": "Method",
    "detail": "Function (UGCQueryHandle_t)",
    "insertText": "SteamAPI_ISteamUGC_CreateQueryUserUGCRequest( ISteamUGC* self, AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage )"
  },
  {
    "label": "SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage()",
    "kind": "Method",
    "detail": "Function (UGCQueryHandle_t)",
    "insertText": "SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage( ISteamUGC* self, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage )"
  },
  {
    "label": "SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor()",
    "kind": "Method",
    "detail": "Function (UGCQueryHandle_t)",
    "insertText": "SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor( ISteamUGC* self, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, const char * pchCursor )"
  },
  {
    "label": "SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest()",
    "kind": "Method",
    "detail": "Function (UGCQueryHandle_t)",
    "insertText": "SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest( ISteamUGC* self, PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SendQueryUGCRequest()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_SendQueryUGCRequest( ISteamUGC* self, UGCQueryHandle_t handle )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCResult( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t * pDetails )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCNumTags()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCNumTags( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCTag( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char * pchValue, uint32 cchValueSize )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char * pchValue, uint32 cchValueSize )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCPreviewURL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCPreviewURL( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index, char * pchURL, uint32 cchURLSize )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCMetadata( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index, char * pchMetadata, uint32 cchMetadatasize )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCChildren( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index, PublishedFileId_t * pvecPublishedFileID, uint32 cMaxEntries )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCStatistic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCStatistic( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint64 * pStatValue )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char * pchURLOrVideoID, uint32 cchURLSize, char * pchOriginalFileName, uint32 cchOriginalFileNameSize, EItemPreviewType * pPreviewType )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char * pchKey, uint32 cchKeySize, char * pchValue, uint32 cchValueSize )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index, const char * pchKey, char * pchValue, uint32 cchValueSize )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors( ISteamUGC* self, UGCQueryHandle_t handle, uint32 index, EUGCContentDescriptorID * pvecDescriptors, uint32 cMaxEntries )"
  },
  {
    "label": "SteamAPI_ISteamUGC_ReleaseQueryUGCRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_ReleaseQueryUGCRequest( ISteamUGC* self, UGCQueryHandle_t handle )"
  },
  {
    "label": "SteamAPI_ISteamUGC_AddRequiredTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_AddRequiredTag( ISteamUGC* self, UGCQueryHandle_t handle, const char * pTagName )"
  },
  {
    "label": "SteamAPI_ISteamUGC_AddRequiredTagGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_AddRequiredTagGroup( ISteamUGC* self, UGCQueryHandle_t handle, const SteamParamStringArray_t * pTagGroups )"
  },
  {
    "label": "SteamAPI_ISteamUGC_AddExcludedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_AddExcludedTag( ISteamUGC* self, UGCQueryHandle_t handle, const char * pTagName )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetReturnOnlyIDs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetReturnOnlyIDs( ISteamUGC* self, UGCQueryHandle_t handle, bool bReturnOnlyIDs )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetReturnKeyValueTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetReturnKeyValueTags( ISteamUGC* self, UGCQueryHandle_t handle, bool bReturnKeyValueTags )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetReturnLongDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetReturnLongDescription( ISteamUGC* self, UGCQueryHandle_t handle, bool bReturnLongDescription )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetReturnMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetReturnMetadata( ISteamUGC* self, UGCQueryHandle_t handle, bool bReturnMetadata )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetReturnChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetReturnChildren( ISteamUGC* self, UGCQueryHandle_t handle, bool bReturnChildren )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetReturnAdditionalPreviews()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetReturnAdditionalPreviews( ISteamUGC* self, UGCQueryHandle_t handle, bool bReturnAdditionalPreviews )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetReturnTotalOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetReturnTotalOnly( ISteamUGC* self, UGCQueryHandle_t handle, bool bReturnTotalOnly )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetReturnPlaytimeStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetReturnPlaytimeStats( ISteamUGC* self, UGCQueryHandle_t handle, uint32 unDays )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetLanguage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetLanguage( ISteamUGC* self, UGCQueryHandle_t handle, const char * pchLanguage )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetAllowCachedResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetAllowCachedResponse( ISteamUGC* self, UGCQueryHandle_t handle, uint32 unMaxAgeSeconds )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetCloudFileNameFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetCloudFileNameFilter( ISteamUGC* self, UGCQueryHandle_t handle, const char * pMatchCloudFileName )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetMatchAnyTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetMatchAnyTag( ISteamUGC* self, UGCQueryHandle_t handle, bool bMatchAnyTag )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetSearchText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetSearchText( ISteamUGC* self, UGCQueryHandle_t handle, const char * pSearchText )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetRankedByTrendDays()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetRankedByTrendDays( ISteamUGC* self, UGCQueryHandle_t handle, uint32 unDays )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetTimeCreatedDateRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetTimeCreatedDateRange( ISteamUGC* self, UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetTimeUpdatedDateRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetTimeUpdatedDateRange( ISteamUGC* self, UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd )"
  },
  {
    "label": "SteamAPI_ISteamUGC_AddRequiredKeyValueTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_AddRequiredKeyValueTag( ISteamUGC* self, UGCQueryHandle_t handle, const char * pKey, const char * pValue )"
  },
  {
    "label": "SteamAPI_ISteamUGC_RequestUGCDetails()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_RequestUGCDetails( ISteamUGC* self, PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds )"
  },
  {
    "label": "SteamAPI_ISteamUGC_CreateItem()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_CreateItem( ISteamUGC* self, AppId_t nConsumerAppId, EWorkshopFileType eFileType )"
  },
  {
    "label": "SteamAPI_ISteamUGC_StartItemUpdate()",
    "kind": "Method",
    "detail": "Function (UGCUpdateHandle_t)",
    "insertText": "SteamAPI_ISteamUGC_StartItemUpdate( ISteamUGC* self, AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetItemTitle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetItemTitle( ISteamUGC* self, UGCUpdateHandle_t handle, const char * pchTitle )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetItemDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetItemDescription( ISteamUGC* self, UGCUpdateHandle_t handle, const char * pchDescription )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetItemUpdateLanguage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetItemUpdateLanguage( ISteamUGC* self, UGCUpdateHandle_t handle, const char * pchLanguage )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetItemMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetItemMetadata( ISteamUGC* self, UGCUpdateHandle_t handle, const char * pchMetaData )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetItemVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetItemVisibility( ISteamUGC* self, UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetItemTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetItemTags( ISteamUGC* self, UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t * pTags )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetItemContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetItemContent( ISteamUGC* self, UGCUpdateHandle_t handle, const char * pszContentFolder )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetItemPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetItemPreview( ISteamUGC* self, UGCUpdateHandle_t handle, const char * pszPreviewFile )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetAllowLegacyUpload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_SetAllowLegacyUpload( ISteamUGC* self, UGCUpdateHandle_t handle, bool bAllowLegacyUpload )"
  },
  {
    "label": "SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags( ISteamUGC* self, UGCUpdateHandle_t handle )"
  },
  {
    "label": "SteamAPI_ISteamUGC_RemoveItemKeyValueTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_RemoveItemKeyValueTags( ISteamUGC* self, UGCUpdateHandle_t handle, const char * pchKey )"
  },
  {
    "label": "SteamAPI_ISteamUGC_AddItemKeyValueTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_AddItemKeyValueTag( ISteamUGC* self, UGCUpdateHandle_t handle, const char * pchKey, const char * pchValue )"
  },
  {
    "label": "SteamAPI_ISteamUGC_AddItemPreviewFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_AddItemPreviewFile( ISteamUGC* self, UGCUpdateHandle_t handle, const char * pszPreviewFile, EItemPreviewType type )"
  },
  {
    "label": "SteamAPI_ISteamUGC_AddItemPreviewVideo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_AddItemPreviewVideo( ISteamUGC* self, UGCUpdateHandle_t handle, const char * pszVideoID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_UpdateItemPreviewFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_UpdateItemPreviewFile( ISteamUGC* self, UGCUpdateHandle_t handle, uint32 index, const char * pszPreviewFile )"
  },
  {
    "label": "SteamAPI_ISteamUGC_UpdateItemPreviewVideo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_UpdateItemPreviewVideo( ISteamUGC* self, UGCUpdateHandle_t handle, uint32 index, const char * pszVideoID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_RemoveItemPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_RemoveItemPreview( ISteamUGC* self, UGCUpdateHandle_t handle, uint32 index )"
  },
  {
    "label": "SteamAPI_ISteamUGC_AddContentDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_AddContentDescriptor( ISteamUGC* self, UGCUpdateHandle_t handle, EUGCContentDescriptorID descid )"
  },
  {
    "label": "SteamAPI_ISteamUGC_RemoveContentDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_RemoveContentDescriptor( ISteamUGC* self, UGCUpdateHandle_t handle, EUGCContentDescriptorID descid )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SubmitItemUpdate()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_SubmitItemUpdate( ISteamUGC* self, UGCUpdateHandle_t handle, const char * pchChangeNote )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetItemUpdateProgress()",
    "kind": "Method",
    "detail": "Function (EItemUpdateStatus)",
    "insertText": "SteamAPI_ISteamUGC_GetItemUpdateProgress( ISteamUGC* self, UGCUpdateHandle_t handle, uint64 * punBytesProcessed, uint64 * punBytesTotal )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SetUserItemVote()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_SetUserItemVote( ISteamUGC* self, PublishedFileId_t nPublishedFileID, bool bVoteUp )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetUserItemVote()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_GetUserItemVote( ISteamUGC* self, PublishedFileId_t nPublishedFileID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_AddItemToFavorites()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_AddItemToFavorites( ISteamUGC* self, AppId_t nAppId, PublishedFileId_t nPublishedFileID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_RemoveItemFromFavorites()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_RemoveItemFromFavorites( ISteamUGC* self, AppId_t nAppId, PublishedFileId_t nPublishedFileID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SubscribeItem()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_SubscribeItem( ISteamUGC* self, PublishedFileId_t nPublishedFileID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_UnsubscribeItem()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_UnsubscribeItem( ISteamUGC* self, PublishedFileId_t nPublishedFileID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetNumSubscribedItems()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUGC_GetNumSubscribedItems( ISteamUGC* self )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetSubscribedItems()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUGC_GetSubscribedItems( ISteamUGC* self, PublishedFileId_t * pvecPublishedFileID, uint32 cMaxEntries )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetItemState()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamUGC_GetItemState( ISteamUGC* self, PublishedFileId_t nPublishedFileID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetItemInstallInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_GetItemInstallInfo( ISteamUGC* self, PublishedFileId_t nPublishedFileID, uint64 * punSizeOnDisk, char * pchFolder, uint32 cchFolderSize, uint32 * punTimeStamp )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetItemDownloadInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_GetItemDownloadInfo( ISteamUGC* self, PublishedFileId_t nPublishedFileID, uint64 * punBytesDownloaded, uint64 * punBytesTotal )"
  },
  {
    "label": "SteamAPI_ISteamUGC_DownloadItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_DownloadItem( ISteamUGC* self, PublishedFileId_t nPublishedFileID, bool bHighPriority )"
  },
  {
    "label": "SteamAPI_ISteamUGC_BInitWorkshopForGameServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_BInitWorkshopForGameServer( ISteamUGC* self, DepotId_t unWorkshopDepotID, const char * pszFolder )"
  },
  {
    "label": "SteamAPI_ISteamUGC_SuspendDownloads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamUGC_SuspendDownloads( ISteamUGC* self, bool bSuspend )"
  },
  {
    "label": "SteamAPI_ISteamUGC_StartPlaytimeTracking()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_StartPlaytimeTracking( ISteamUGC* self, PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs )"
  },
  {
    "label": "SteamAPI_ISteamUGC_StopPlaytimeTracking()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_StopPlaytimeTracking( ISteamUGC* self, PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs )"
  },
  {
    "label": "SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems( ISteamUGC* self )"
  },
  {
    "label": "SteamAPI_ISteamUGC_AddDependency()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_AddDependency( ISteamUGC* self, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_RemoveDependency()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_RemoveDependency( ISteamUGC* self, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_AddAppDependency()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_AddAppDependency( ISteamUGC* self, PublishedFileId_t nPublishedFileID, AppId_t nAppID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_RemoveAppDependency()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_RemoveAppDependency( ISteamUGC* self, PublishedFileId_t nPublishedFileID, AppId_t nAppID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetAppDependencies()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_GetAppDependencies( ISteamUGC* self, PublishedFileId_t nPublishedFileID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_DeleteItem()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_DeleteItem( ISteamUGC* self, PublishedFileId_t nPublishedFileID )"
  },
  {
    "label": "SteamAPI_ISteamUGC_ShowWorkshopEULA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamUGC_ShowWorkshopEULA( ISteamUGC* self )"
  },
  {
    "label": "SteamAPI_ISteamUGC_GetWorkshopEULAStatus()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamUGC_GetWorkshopEULAStatus( ISteamUGC* self )"
  },
  {
    "label": "SteamAPI_SteamAppList_v001()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamAppList_v001()"
  },
  {
    "label": "SteamAPI_ISteamAppList_GetNumInstalledApps()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamAppList_GetNumInstalledApps( ISteamAppList* self )"
  },
  {
    "label": "SteamAPI_ISteamAppList_GetInstalledApps()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamAppList_GetInstalledApps( ISteamAppList* self, AppId_t * pvecAppID, uint32 unMaxAppIDs )"
  },
  {
    "label": "SteamAPI_ISteamAppList_GetAppName()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamAppList_GetAppName( ISteamAppList* self, AppId_t nAppID, char * pchName, int cchNameMax )"
  },
  {
    "label": "SteamAPI_ISteamAppList_GetAppInstallDir()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamAppList_GetAppInstallDir( ISteamAppList* self, AppId_t nAppID, char * pchDirectory, int cchNameMax )"
  },
  {
    "label": "SteamAPI_ISteamAppList_GetAppBuildId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamAppList_GetAppBuildId( ISteamAppList* self, AppId_t nAppID )"
  },
  {
    "label": "SteamAPI_SteamHTMLSurface_v005()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamHTMLSurface_v005()"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTMLSurface_Init( ISteamHTMLSurface* self )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_Shutdown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamHTMLSurface_Shutdown( ISteamHTMLSurface* self )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_CreateBrowser()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamHTMLSurface_CreateBrowser( ISteamHTMLSurface* self, const char * pchUserAgent, const char * pchUserCSS )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_RemoveBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_RemoveBrowser( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_LoadURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_LoadURL( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, const char * pchURL, const char * pchPostData )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_SetSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_SetSize( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_StopLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_StopLoad( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_Reload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_Reload( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_GoBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_GoBack( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_GoForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_GoForward( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_AddHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_AddHeader( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, const char * pchKey, const char * pchValue )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_ExecuteJavascript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_ExecuteJavascript( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, const char * pchScript )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_MouseUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_MouseUp( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_MouseDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_MouseDown( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_MouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_MouseDoubleClick( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_MouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_MouseMove( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, int x, int y )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_MouseWheel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_MouseWheel( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, int32 nDelta )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_KeyDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_KeyDown( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers, bool bIsSystemKey )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_KeyUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_KeyUp( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_KeyChar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_KeyChar( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_SetHorizontalScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_SetHorizontalScroll( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_SetVerticalScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_SetVerticalScroll( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_SetKeyFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_SetKeyFocus( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, bool bHasKeyFocus )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_ViewSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_ViewSource( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_CopyToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_CopyToClipboard( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_PasteFromClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_PasteFromClipboard( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_Find()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_Find( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, const char * pchSearchStr, bool bCurrentlyInFind, bool bReverse )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_StopFind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_StopFind( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_GetLinkAtPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_GetLinkAtPosition( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, int x, int y )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_SetCookie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_SetCookie( ISteamHTMLSurface* self, const char * pchHostname, const char * pchKey, const char * pchValue, const char * pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_SetPageScaleFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_SetPageScaleFactor( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_SetBackgroundMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_SetBackgroundMode( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, bool bBackgroundMode )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, float flDPIScaling )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_OpenDeveloperTools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_OpenDeveloperTools( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_AllowStartRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_AllowStartRequest( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, bool bAllowed )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_JSDialogResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_JSDialogResponse( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, bool bResult )"
  },
  {
    "label": "SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse( ISteamHTMLSurface* self, HHTMLBrowser unBrowserHandle, const char ** pchSelectedFiles )"
  },
  {
    "label": "SteamAPI_SteamInventory_v003()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamInventory_v003()"
  },
  {
    "label": "SteamAPI_SteamGameServerInventory_v003()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamGameServerInventory_v003()"
  },
  {
    "label": "SteamAPI_ISteamInventory_GetResultStatus()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SteamAPI_ISteamInventory_GetResultStatus( ISteamInventory* self, SteamInventoryResult_t resultHandle )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GetResultItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_GetResultItems( ISteamInventory* self, SteamInventoryResult_t resultHandle, SteamItemDetails_t * pOutItemsArray, uint32 * punOutItemsArraySize )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GetResultItemProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_GetResultItemProperty( ISteamInventory* self, SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char * pchPropertyName, char * pchValueBuffer, uint32 * punValueBufferSizeOut )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GetResultTimestamp()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamInventory_GetResultTimestamp( ISteamInventory* self, SteamInventoryResult_t resultHandle )"
  },
  {
    "label": "SteamAPI_ISteamInventory_CheckResultSteamID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_CheckResultSteamID( ISteamInventory* self, SteamInventoryResult_t resultHandle, uint64_steamid steamIDExpected )"
  },
  {
    "label": "SteamAPI_ISteamInventory_DestroyResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInventory_DestroyResult( ISteamInventory* self, SteamInventoryResult_t resultHandle )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GetAllItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_GetAllItems( ISteamInventory* self, SteamInventoryResult_t * pResultHandle )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GetItemsByID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_GetItemsByID( ISteamInventory* self, SteamInventoryResult_t * pResultHandle, const SteamItemInstanceID_t * pInstanceIDs, uint32 unCountInstanceIDs )"
  },
  {
    "label": "SteamAPI_ISteamInventory_SerializeResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_SerializeResult( ISteamInventory* self, SteamInventoryResult_t resultHandle, void * pOutBuffer, uint32 * punOutBufferSize )"
  },
  {
    "label": "SteamAPI_ISteamInventory_DeserializeResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_DeserializeResult( ISteamInventory* self, SteamInventoryResult_t * pOutResultHandle, const void * pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GenerateItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_GenerateItems( ISteamInventory* self, SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayItemDefs, const uint32 * punArrayQuantity, uint32 unArrayLength )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GrantPromoItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_GrantPromoItems( ISteamInventory* self, SteamInventoryResult_t * pResultHandle )"
  },
  {
    "label": "SteamAPI_ISteamInventory_AddPromoItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_AddPromoItem( ISteamInventory* self, SteamInventoryResult_t * pResultHandle, SteamItemDef_t itemDef )"
  },
  {
    "label": "SteamAPI_ISteamInventory_AddPromoItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_AddPromoItems( ISteamInventory* self, SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayItemDefs, uint32 unArrayLength )"
  },
  {
    "label": "SteamAPI_ISteamInventory_ConsumeItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_ConsumeItem( ISteamInventory* self, SteamInventoryResult_t * pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity )"
  },
  {
    "label": "SteamAPI_ISteamInventory_ExchangeItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_ExchangeItems( ISteamInventory* self, SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayGenerate, const uint32 * punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t * pArrayDestroy, const uint32 * punArrayDestroyQuantity, uint32 unArrayDestroyLength )"
  },
  {
    "label": "SteamAPI_ISteamInventory_TransferItemQuantity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_TransferItemQuantity( ISteamInventory* self, SteamInventoryResult_t * pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest )"
  },
  {
    "label": "SteamAPI_ISteamInventory_SendItemDropHeartbeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamInventory_SendItemDropHeartbeat( ISteamInventory* self )"
  },
  {
    "label": "SteamAPI_ISteamInventory_TriggerItemDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_TriggerItemDrop( ISteamInventory* self, SteamInventoryResult_t * pResultHandle, SteamItemDef_t dropListDefinition )"
  },
  {
    "label": "SteamAPI_ISteamInventory_TradeItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_TradeItems( ISteamInventory* self, SteamInventoryResult_t * pResultHandle, uint64_steamid steamIDTradePartner, const SteamItemInstanceID_t * pArrayGive, const uint32 * pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t * pArrayGet, const uint32 * pArrayGetQuantity, uint32 nArrayGetLength )"
  },
  {
    "label": "SteamAPI_ISteamInventory_LoadItemDefinitions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_LoadItemDefinitions( ISteamInventory* self )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GetItemDefinitionIDs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_GetItemDefinitionIDs( ISteamInventory* self, SteamItemDef_t * pItemDefIDs, uint32 * punItemDefIDsArraySize )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GetItemDefinitionProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_GetItemDefinitionProperty( ISteamInventory* self, SteamItemDef_t iDefinition, const char * pchPropertyName, char * pchValueBuffer, uint32 * punValueBufferSizeOut )"
  },
  {
    "label": "SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs( ISteamInventory* self, uint64_steamid steamID )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs( ISteamInventory* self, uint64_steamid steamID, SteamItemDef_t * pItemDefIDs, uint32 * punItemDefIDsArraySize )"
  },
  {
    "label": "SteamAPI_ISteamInventory_StartPurchase()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamInventory_StartPurchase( ISteamInventory* self, const SteamItemDef_t * pArrayItemDefs, const uint32 * punArrayQuantity, uint32 unArrayLength )"
  },
  {
    "label": "SteamAPI_ISteamInventory_RequestPrices()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamInventory_RequestPrices( ISteamInventory* self )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GetNumItemsWithPrices()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamInventory_GetNumItemsWithPrices( ISteamInventory* self )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GetItemsWithPrices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_GetItemsWithPrices( ISteamInventory* self, SteamItemDef_t * pArrayItemDefs, uint64 * pCurrentPrices, uint64 * pBasePrices, uint32 unArrayLength )"
  },
  {
    "label": "SteamAPI_ISteamInventory_GetItemPrice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_GetItemPrice( ISteamInventory* self, SteamItemDef_t iDefinition, uint64 * pCurrentPrice, uint64 * pBasePrice )"
  },
  {
    "label": "SteamAPI_ISteamInventory_StartUpdateProperties()",
    "kind": "Method",
    "detail": "Function (SteamInventoryUpdateHandle_t)",
    "insertText": "SteamAPI_ISteamInventory_StartUpdateProperties( ISteamInventory* self )"
  },
  {
    "label": "SteamAPI_ISteamInventory_RemoveProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_RemoveProperty( ISteamInventory* self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName )"
  },
  {
    "label": "SteamAPI_ISteamInventory_SetPropertyString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_SetPropertyString( ISteamInventory* self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, const char * pchPropertyValue )"
  },
  {
    "label": "SteamAPI_ISteamInventory_SetPropertyBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_SetPropertyBool( ISteamInventory* self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, bool bValue )"
  },
  {
    "label": "SteamAPI_ISteamInventory_SetPropertyInt64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_SetPropertyInt64( ISteamInventory* self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, int64 nValue )"
  },
  {
    "label": "SteamAPI_ISteamInventory_SetPropertyFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_SetPropertyFloat( ISteamInventory* self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, float flValue )"
  },
  {
    "label": "SteamAPI_ISteamInventory_SubmitUpdateProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_SubmitUpdateProperties( ISteamInventory* self, SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t * pResultHandle )"
  },
  {
    "label": "SteamAPI_ISteamInventory_InspectItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamInventory_InspectItem( ISteamInventory* self, SteamInventoryResult_t * pResultHandle, const char * pchItemToken )"
  },
  {
    "label": "SteamAPI_SteamVideo_v002()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamVideo_v002()"
  },
  {
    "label": "SteamAPI_ISteamVideo_GetVideoURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamVideo_GetVideoURL( ISteamVideo* self, AppId_t unVideoAppID )"
  },
  {
    "label": "SteamAPI_ISteamVideo_IsBroadcasting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamVideo_IsBroadcasting( ISteamVideo* self, int * pnNumViewers )"
  },
  {
    "label": "SteamAPI_ISteamVideo_GetOPFSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamVideo_GetOPFSettings( ISteamVideo* self, AppId_t unVideoAppID )"
  },
  {
    "label": "SteamAPI_ISteamVideo_GetOPFStringForApp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamVideo_GetOPFStringForApp( ISteamVideo* self, AppId_t unVideoAppID, char * pchBuffer, int32 * pnBufferSize )"
  },
  {
    "label": "SteamAPI_SteamParentalSettings_v001()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamParentalSettings_v001()"
  },
  {
    "label": "SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled( ISteamParentalSettings* self )"
  },
  {
    "label": "SteamAPI_ISteamParentalSettings_BIsParentalLockLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamParentalSettings_BIsParentalLockLocked( ISteamParentalSettings* self )"
  },
  {
    "label": "SteamAPI_ISteamParentalSettings_BIsAppBlocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamParentalSettings_BIsAppBlocked( ISteamParentalSettings* self, AppId_t nAppID )"
  },
  {
    "label": "SteamAPI_ISteamParentalSettings_BIsAppInBlockList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamParentalSettings_BIsAppInBlockList( ISteamParentalSettings* self, AppId_t nAppID )"
  },
  {
    "label": "SteamAPI_ISteamParentalSettings_BIsFeatureBlocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamParentalSettings_BIsFeatureBlocked( ISteamParentalSettings* self, EParentalFeature eFeature )"
  },
  {
    "label": "SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList( ISteamParentalSettings* self, EParentalFeature eFeature )"
  },
  {
    "label": "SteamAPI_SteamRemotePlay_v001()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamRemotePlay_v001()"
  },
  {
    "label": "SteamAPI_ISteamRemotePlay_GetSessionCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_ISteamRemotePlay_GetSessionCount( ISteamRemotePlay* self )"
  },
  {
    "label": "SteamAPI_ISteamRemotePlay_GetSessionID()",
    "kind": "Method",
    "detail": "Function (RemotePlaySessionID_t)",
    "insertText": "SteamAPI_ISteamRemotePlay_GetSessionID( ISteamRemotePlay* self, int iSessionIndex )"
  },
  {
    "label": "SteamAPI_ISteamRemotePlay_GetSessionSteamID()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamRemotePlay_GetSessionSteamID( ISteamRemotePlay* self, RemotePlaySessionID_t unSessionID )"
  },
  {
    "label": "SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor()",
    "kind": "Method",
    "detail": "Function (ESteamDeviceFormFactor)",
    "insertText": "SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor( ISteamRemotePlay* self, RemotePlaySessionID_t unSessionID )"
  },
  {
    "label": "SteamAPI_ISteamRemotePlay_BGetSessionClientResolution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemotePlay_BGetSessionClientResolution( ISteamRemotePlay* self, RemotePlaySessionID_t unSessionID, int * pnResolutionX, int * pnResolutionY )"
  },
  {
    "label": "SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite( ISteamRemotePlay* self, uint64_steamid steamIDFriend )"
  },
  {
    "label": "SteamAPI_SteamNetworkingMessages_SteamAPI_v002()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamNetworkingMessages_SteamAPI_v002()"
  },
  {
    "label": "SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002()"
  },
  {
    "label": "SteamAPI_ISteamNetworkingMessages_SendMessageToUser()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SteamAPI_ISteamNetworkingMessages_SendMessageToUser( ISteamNetworkingMessages* self, const SteamNetworkingIdentity & identityRemote, const void * pubData, uint32 cubData, int nSendFlags, int nRemoteChannel )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel( ISteamNetworkingMessages* self, int nLocalChannel, SteamNetworkingMessage_t ** ppOutMessages, int nMaxMessages )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser( ISteamNetworkingMessages* self, const SteamNetworkingIdentity & identityRemote )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser( ISteamNetworkingMessages* self, const SteamNetworkingIdentity & identityRemote )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser( ISteamNetworkingMessages* self, const SteamNetworkingIdentity & identityRemote, int nLocalChannel )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingConnectionState)",
    "insertText": "SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo( ISteamNetworkingMessages* self, const SteamNetworkingIdentity & identityRemote, SteamNetConnectionInfo_t * pConnectionInfo, SteamNetConnectionRealTimeStatus_t * pQuickStatus )"
  },
  {
    "label": "SteamAPI_SteamNetworkingSockets_SteamAPI_v012()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamNetworkingSockets_SteamAPI_v012()"
  },
  {
    "label": "SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012()"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP()",
    "kind": "Method",
    "detail": "Function (HSteamListenSocket)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP( ISteamNetworkingSockets* self, const SteamNetworkingIPAddr & localAddress, int nOptions, const SteamNetworkingConfigValue_t * pOptions )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress()",
    "kind": "Method",
    "detail": "Function (HSteamNetConnection)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress( ISteamNetworkingSockets* self, const SteamNetworkingIPAddr & address, int nOptions, const SteamNetworkingConfigValue_t * pOptions )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P()",
    "kind": "Method",
    "detail": "Function (HSteamListenSocket)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P( ISteamNetworkingSockets* self, int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_ConnectP2P()",
    "kind": "Method",
    "detail": "Function (HSteamNetConnection)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_ConnectP2P( ISteamNetworkingSockets* self, const SteamNetworkingIdentity & identityRemote, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_AcceptConnection()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_AcceptConnection( ISteamNetworkingSockets* self, HSteamNetConnection hConn )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_CloseConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_CloseConnection( ISteamNetworkingSockets* self, HSteamNetConnection hPeer, int nReason, const char * pszDebug, bool bEnableLinger )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_CloseListenSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_CloseListenSocket( ISteamNetworkingSockets* self, HSteamListenSocket hSocket )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_SetConnectionUserData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_SetConnectionUserData( ISteamNetworkingSockets* self, HSteamNetConnection hPeer, int64 nUserData )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetConnectionUserData()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetConnectionUserData( ISteamNetworkingSockets* self, HSteamNetConnection hPeer )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_SetConnectionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_SetConnectionName( ISteamNetworkingSockets* self, HSteamNetConnection hPeer, const char * pszName )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetConnectionName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetConnectionName( ISteamNetworkingSockets* self, HSteamNetConnection hPeer, char * pszName, int nMaxLen )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_SendMessageToConnection()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_SendMessageToConnection( ISteamNetworkingSockets* self, HSteamNetConnection hConn, const void * pData, uint32 cbData, int nSendFlags, int64 * pOutMessageNumber )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_SendMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_SendMessages( ISteamNetworkingSockets* self, int nMessages, SteamNetworkingMessage_t *const * pMessages, int64 * pOutMessageNumberOrResult )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection( ISteamNetworkingSockets* self, HSteamNetConnection hConn )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection( ISteamNetworkingSockets* self, HSteamNetConnection hConn, SteamNetworkingMessage_t ** ppOutMessages, int nMaxMessages )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetConnectionInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetConnectionInfo( ISteamNetworkingSockets* self, HSteamNetConnection hConn, SteamNetConnectionInfo_t * pInfo )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus( ISteamNetworkingSockets* self, HSteamNetConnection hConn, SteamNetConnectionRealTimeStatus_t * pStatus, int nLanes, SteamNetConnectionRealTimeLaneStatus_t * pLanes )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus( ISteamNetworkingSockets* self, HSteamNetConnection hConn, char * pszBuf, int cbBuf )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress( ISteamNetworkingSockets* self, HSteamListenSocket hSocket, SteamNetworkingIPAddr * address )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_CreateSocketPair()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_CreateSocketPair( ISteamNetworkingSockets* self, HSteamNetConnection * pOutConnection1, HSteamNetConnection * pOutConnection2, bool bUseNetworkLoopback, const SteamNetworkingIdentity * pIdentity1, const SteamNetworkingIdentity * pIdentity2 )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes( ISteamNetworkingSockets* self, HSteamNetConnection hConn, int nNumLanes, const int * pLanePriorities, const uint16 * pLaneWeights )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetIdentity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetIdentity( ISteamNetworkingSockets* self, SteamNetworkingIdentity * pIdentity )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_InitAuthentication()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingAvailability)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_InitAuthentication( ISteamNetworkingSockets* self )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingAvailability)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus( ISteamNetworkingSockets* self, SteamNetAuthenticationStatus_t * pDetails )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_CreatePollGroup()",
    "kind": "Method",
    "detail": "Function (HSteamNetPollGroup)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_CreatePollGroup( ISteamNetworkingSockets* self )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_DestroyPollGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_DestroyPollGroup( ISteamNetworkingSockets* self, HSteamNetPollGroup hPollGroup )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup( ISteamNetworkingSockets* self, HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup( ISteamNetworkingSockets* self, HSteamNetPollGroup hPollGroup, SteamNetworkingMessage_t ** ppOutMessages, int nMaxMessages )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_ReceivedRelayAuthTicket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_ReceivedRelayAuthTicket( ISteamNetworkingSockets* self, const void * pvTicket, int cbTicket, SteamDatagramRelayAuthTicket * pOutParsedTicket )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_FindRelayAuthTicketForServer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_FindRelayAuthTicketForServer( ISteamNetworkingSockets* self, const SteamNetworkingIdentity & identityGameServer, int nRemoteVirtualPort, SteamDatagramRelayAuthTicket * pOutParsedTicket )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer()",
    "kind": "Method",
    "detail": "Function (HSteamNetConnection)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer( ISteamNetworkingSockets* self, const SteamNetworkingIdentity & identityTarget, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort( ISteamNetworkingSockets* self )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID()",
    "kind": "Method",
    "detail": "Function (SteamNetworkingPOPID)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID( ISteamNetworkingSockets* self )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress( ISteamNetworkingSockets* self, SteamDatagramHostedAddress * pRouting )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket()",
    "kind": "Method",
    "detail": "Function (HSteamListenSocket)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket( ISteamNetworkingSockets* self, int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin( ISteamNetworkingSockets* self, SteamDatagramGameCoordinatorServerLogin * pLoginInfo, int * pcbSignedBlob, void * pBlob )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_ConnectP2PCustomSignaling()",
    "kind": "Method",
    "detail": "Function (HSteamNetConnection)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_ConnectP2PCustomSignaling( ISteamNetworkingSockets* self, ISteamNetworkingConnectionSignaling * pSignaling, const SteamNetworkingIdentity * pPeerIdentity, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_ReceivedP2PCustomSignal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_ReceivedP2PCustomSignal( ISteamNetworkingSockets* self, const void * pMsg, int cbMsg, ISteamNetworkingSignalingRecvContext * pContext )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetCertificateRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetCertificateRequest( ISteamNetworkingSockets* self, int * pcbBlob, void * pBlob, SteamNetworkingErrMsg & errMsg )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_SetCertificate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_SetCertificate( ISteamNetworkingSockets* self, const void * pCertificate, int cbCertificate, SteamNetworkingErrMsg & errMsg )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_ResetIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_ResetIdentity( ISteamNetworkingSockets* self, const SteamNetworkingIdentity * pIdentity )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_RunCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_RunCallbacks( ISteamNetworkingSockets* self )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP( ISteamNetworkingSockets* self, int nNumPorts )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetFakeIP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetFakeIP( ISteamNetworkingSockets* self, int idxFirstPort, SteamNetworkingFakeIPResult_t * pInfo )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP()",
    "kind": "Method",
    "detail": "Function (HSteamListenSocket)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP( ISteamNetworkingSockets* self, int idxFakePort, int nOptions, const SteamNetworkingConfigValue_t * pOptions )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection( ISteamNetworkingSockets* self, HSteamNetConnection hConn, SteamNetworkingIPAddr * pOutAddr )"
  },
  {
    "label": "SteamAPI_SteamNetworkingUtils_SteamAPI_v004()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamNetworkingUtils_SteamAPI_v004()"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess( ISteamNetworkingUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingAvailability)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus( ISteamNetworkingUtils* self, SteamRelayNetworkStatus_t * pDetails )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation( ISteamNetworkingUtils* self, SteamNetworkPingLocation_t & result )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations( ISteamNetworkingUtils* self, const SteamNetworkPingLocation_t & location1, const SteamNetworkPingLocation_t & location2 )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost( ISteamNetworkingUtils* self, const SteamNetworkPingLocation_t & remoteLocation )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString( ISteamNetworkingUtils* self, const SteamNetworkPingLocation_t & location, char * pszBuf, int cchBufSize )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_ParsePingLocationString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_ParsePingLocationString( ISteamNetworkingUtils* self, const char * pszString, SteamNetworkPingLocation_t & result )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate( ISteamNetworkingUtils* self, float flMaxAgeSeconds )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter( ISteamNetworkingUtils* self, SteamNetworkingPOPID popID, SteamNetworkingPOPID * pViaRelayPoP )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP( ISteamNetworkingUtils* self, SteamNetworkingPOPID popID )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_GetPOPCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_GetPOPCount( ISteamNetworkingUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_GetPOPList()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_GetPOPList( ISteamNetworkingUtils* self, SteamNetworkingPOPID * list, int nListSz )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp()",
    "kind": "Method",
    "detail": "Function (SteamNetworkingMicroseconds)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp( ISteamNetworkingUtils* self )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction( ISteamNetworkingUtils* self, ESteamNetworkingSocketsDebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_IsFakeIPv4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_IsFakeIPv4( ISteamNetworkingUtils* self, uint32 nIPv4 )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingFakeIPType)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType( ISteamNetworkingUtils* self, uint32 nIPv4 )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP( ISteamNetworkingUtils* self, const SteamNetworkingIPAddr & fakeIP, SteamNetworkingIdentity * pOutRealIdentity )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32( ISteamNetworkingUtils* self, ESteamNetworkingConfigValue eValue, int32 val )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat( ISteamNetworkingUtils* self, ESteamNetworkingConfigValue eValue, float val )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString( ISteamNetworkingUtils* self, ESteamNetworkingConfigValue eValue, const char * val )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr( ISteamNetworkingUtils* self, ESteamNetworkingConfigValue eValue, void * val )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32( ISteamNetworkingUtils* self, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, int32 val )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat( ISteamNetworkingUtils* self, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, float val )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString( ISteamNetworkingUtils* self, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, const char * val )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged( ISteamNetworkingUtils* self, FnSteamNetConnectionStatusChanged fnCallback )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged( ISteamNetworkingUtils* self, FnSteamNetAuthenticationStatusChanged fnCallback )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged( ISteamNetworkingUtils* self, FnSteamRelayNetworkStatusChanged fnCallback )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult( ISteamNetworkingUtils* self, FnSteamNetworkingFakeIPResult fnCallback )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest( ISteamNetworkingUtils* self, FnSteamNetworkingMessagesSessionRequest fnCallback )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed( ISteamNetworkingUtils* self, FnSteamNetworkingMessagesSessionFailed fnCallback )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetConfigValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetConfigValue( ISteamNetworkingUtils* self, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType eDataType, const void * pArg )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct( ISteamNetworkingUtils* self, const SteamNetworkingConfigValue_t & opt, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_GetConfigValue()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingGetConfigValueResult)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_GetConfigValue( ISteamNetworkingUtils* self, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType * pOutDataType, void * pResult, size_t * cbResult )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingConfigValue)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues( ISteamNetworkingUtils* self, ESteamNetworkingConfigValue eCurrent, bool bEnumerateDevVars )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString( ISteamNetworkingUtils* self, const SteamNetworkingIPAddr & addr, char * buf, uint32 cbBuf, bool bWithPort )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString( ISteamNetworkingUtils* self, SteamNetworkingIPAddr * pAddr, const char * pszStr )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingFakeIPType)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType( ISteamNetworkingUtils* self, const SteamNetworkingIPAddr & addr )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString( ISteamNetworkingUtils* self, const SteamNetworkingIdentity & identity, char * buf, uint32 cbBuf )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString( ISteamNetworkingUtils* self, SteamNetworkingIdentity * pIdentity, const char * pszStr )"
  },
  {
    "label": "SteamAPI_SteamGameServer_v015()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamGameServer_v015()"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetProduct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetProduct( ISteamGameServer* self, const char * pszProduct )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetGameDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetGameDescription( ISteamGameServer* self, const char * pszGameDescription )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetModDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetModDir( ISteamGameServer* self, const char * pszModDir )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetDedicatedServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetDedicatedServer( ISteamGameServer* self, bool bDedicated )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_LogOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_LogOn( ISteamGameServer* self, const char * pszToken )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_LogOnAnonymous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_LogOnAnonymous( ISteamGameServer* self )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_LogOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_LogOff( ISteamGameServer* self )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_BLoggedOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServer_BLoggedOn( ISteamGameServer* self )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_BSecure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServer_BSecure( ISteamGameServer* self )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_GetSteamID()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamGameServer_GetSteamID( ISteamGameServer* self )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_WasRestartRequested()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServer_WasRestartRequested( ISteamGameServer* self )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetMaxPlayerCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetMaxPlayerCount( ISteamGameServer* self, int cPlayersMax )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetBotPlayerCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetBotPlayerCount( ISteamGameServer* self, int cBotplayers )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetServerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetServerName( ISteamGameServer* self, const char * pszServerName )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetMapName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetMapName( ISteamGameServer* self, const char * pszMapName )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetPasswordProtected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetPasswordProtected( ISteamGameServer* self, bool bPasswordProtected )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetSpectatorPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetSpectatorPort( ISteamGameServer* self, uint16 unSpectatorPort )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetSpectatorServerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetSpectatorServerName( ISteamGameServer* self, const char * pszSpectatorServerName )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_ClearAllKeyValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_ClearAllKeyValues( ISteamGameServer* self )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetKeyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetKeyValue( ISteamGameServer* self, const char * pKey, const char * pValue )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetGameTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetGameTags( ISteamGameServer* self, const char * pchGameTags )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetGameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetGameData( ISteamGameServer* self, const char * pchGameData )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetRegion( ISteamGameServer* self, const char * pszRegion )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SetAdvertiseServerActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SetAdvertiseServerActive( ISteamGameServer* self, bool bActive )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_GetAuthSessionTicket()",
    "kind": "Method",
    "detail": "Function (HAuthTicket)",
    "insertText": "SteamAPI_ISteamGameServer_GetAuthSessionTicket( ISteamGameServer* self, void * pTicket, int cbMaxTicket, uint32 * pcbTicket, const SteamNetworkingIdentity * pSnid )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_BeginAuthSession()",
    "kind": "Method",
    "detail": "Function (EBeginAuthSessionResult)",
    "insertText": "SteamAPI_ISteamGameServer_BeginAuthSession( ISteamGameServer* self, const void * pAuthTicket, int cbAuthTicket, uint64_steamid steamID )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_EndAuthSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_EndAuthSession( ISteamGameServer* self, uint64_steamid steamID )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_CancelAuthTicket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_CancelAuthTicket( ISteamGameServer* self, HAuthTicket hAuthTicket )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_UserHasLicenseForApp()",
    "kind": "Method",
    "detail": "Function (EUserHasLicenseForAppResult)",
    "insertText": "SteamAPI_ISteamGameServer_UserHasLicenseForApp( ISteamGameServer* self, uint64_steamid steamID, AppId_t appID )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_RequestUserGroupStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServer_RequestUserGroupStatus( ISteamGameServer* self, uint64_steamid steamIDUser, uint64_steamid steamIDGroup )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_GetGameplayStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_GetGameplayStats( ISteamGameServer* self )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_GetServerReputation()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamGameServer_GetServerReputation( ISteamGameServer* self )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_GetPublicIP()",
    "kind": "Method",
    "detail": "Function (SteamIPAddress_t)",
    "insertText": "SteamAPI_ISteamGameServer_GetPublicIP( ISteamGameServer* self )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_HandleIncomingPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServer_HandleIncomingPacket( ISteamGameServer* self, const void * pData, int cbData, uint32 srcIP, uint16 srcPort )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_GetNextOutgoingPacket()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamGameServer_GetNextOutgoingPacket( ISteamGameServer* self, void * pOut, int cbMaxOut, uint32 * pNetAdr, uint16 * pPort )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_AssociateWithClan()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamGameServer_AssociateWithClan( ISteamGameServer* self, uint64_steamid steamIDClan )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility( ISteamGameServer* self, uint64_steamid steamIDNewPlayer )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED( ISteamGameServer* self, uint32 unIPClient, const void * pvAuthBlob, uint32 cubAuthBlobSize, CSteamID * pSteamIDUser )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection( ISteamGameServer* self )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED( ISteamGameServer* self, uint64_steamid steamIDUser )"
  },
  {
    "label": "SteamAPI_ISteamGameServer_BUpdateUserData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServer_BUpdateUserData( ISteamGameServer* self, uint64_steamid steamIDUser, const char * pchPlayerName, uint32 uScore )"
  },
  {
    "label": "SteamAPI_SteamGameServerStats_v001()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SteamAPI_SteamGameServerStats_v001()"
  },
  {
    "label": "SteamAPI_ISteamGameServerStats_RequestUserStats()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamGameServerStats_RequestUserStats( ISteamGameServerStats* self, uint64_steamid steamIDUser )"
  },
  {
    "label": "SteamAPI_ISteamGameServerStats_GetUserStatInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServerStats_GetUserStatInt32( ISteamGameServerStats* self, uint64_steamid steamIDUser, const char * pchName, int32 * pData )"
  },
  {
    "label": "SteamAPI_ISteamGameServerStats_GetUserStatFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServerStats_GetUserStatFloat( ISteamGameServerStats* self, uint64_steamid steamIDUser, const char * pchName, float * pData )"
  },
  {
    "label": "SteamAPI_ISteamGameServerStats_GetUserAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServerStats_GetUserAchievement( ISteamGameServerStats* self, uint64_steamid steamIDUser, const char * pchName, bool * pbAchieved )"
  },
  {
    "label": "SteamAPI_ISteamGameServerStats_SetUserStatInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServerStats_SetUserStatInt32( ISteamGameServerStats* self, uint64_steamid steamIDUser, const char * pchName, int32 nData )"
  },
  {
    "label": "SteamAPI_ISteamGameServerStats_SetUserStatFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServerStats_SetUserStatFloat( ISteamGameServerStats* self, uint64_steamid steamIDUser, const char * pchName, float fData )"
  },
  {
    "label": "SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat( ISteamGameServerStats* self, uint64_steamid steamIDUser, const char * pchName, float flCountThisSession, double dSessionLength )"
  },
  {
    "label": "SteamAPI_ISteamGameServerStats_SetUserAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServerStats_SetUserAchievement( ISteamGameServerStats* self, uint64_steamid steamIDUser, const char * pchName )"
  },
  {
    "label": "SteamAPI_ISteamGameServerStats_ClearUserAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_ISteamGameServerStats_ClearUserAchievement( ISteamGameServerStats* self, uint64_steamid steamIDUser, const char * pchName )"
  },
  {
    "label": "SteamAPI_ISteamGameServerStats_StoreUserStats()",
    "kind": "Method",
    "detail": "Function (SteamAPICall_t)",
    "insertText": "SteamAPI_ISteamGameServerStats_StoreUserStats( ISteamGameServerStats* self, uint64_steamid steamIDUser )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort( ISteamNetworkingFakeUDPPort* self )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP( ISteamNetworkingFakeUDPPort* self, const SteamNetworkingIPAddr & remoteAddress, const void * pData, uint32 cbData, int nSendFlags )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages( ISteamNetworkingFakeUDPPort* self, SteamNetworkingMessage_t ** ppOutMessages, int nMaxMessages )"
  },
  {
    "label": "SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup( ISteamNetworkingFakeUDPPort* self, const SteamNetworkingIPAddr & remoteAddress )"
  },
  {
    "label": "SteamAPI_SteamIPAddress_t_IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamIPAddress_t_IsSet( SteamIPAddress_t* self )"
  },
  {
    "label": "SteamAPI_MatchMakingKeyValuePair_t_Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_MatchMakingKeyValuePair_t_Construct( MatchMakingKeyValuePair_t* self )"
  },
  {
    "label": "SteamAPI_servernetadr_t_Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_servernetadr_t_Construct( servernetadr_t* self )"
  },
  {
    "label": "SteamAPI_servernetadr_t_Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_servernetadr_t_Init( servernetadr_t* self, unsigned int ip, uint16 usQueryPort, uint16 usConnectionPort )"
  },
  {
    "label": "SteamAPI_servernetadr_t_GetQueryPort()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "SteamAPI_servernetadr_t_GetQueryPort( servernetadr_t* self )"
  },
  {
    "label": "SteamAPI_servernetadr_t_SetQueryPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_servernetadr_t_SetQueryPort( servernetadr_t* self, uint16 usPort )"
  },
  {
    "label": "SteamAPI_servernetadr_t_GetConnectionPort()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "SteamAPI_servernetadr_t_GetConnectionPort( servernetadr_t* self )"
  },
  {
    "label": "SteamAPI_servernetadr_t_SetConnectionPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_servernetadr_t_SetConnectionPort( servernetadr_t* self, uint16 usPort )"
  },
  {
    "label": "SteamAPI_servernetadr_t_GetIP()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_servernetadr_t_GetIP( servernetadr_t* self )"
  },
  {
    "label": "SteamAPI_servernetadr_t_SetIP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_servernetadr_t_SetIP( servernetadr_t* self, uint32 unIP )"
  },
  {
    "label": "SteamAPI_servernetadr_t_IsLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_servernetadr_t_IsLessThan( servernetadr_t* self, const servernetadr_t & netadr )"
  },
  {
    "label": "SteamAPI_servernetadr_t_Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_servernetadr_t_Assign( servernetadr_t* self, const servernetadr_t & that )"
  },
  {
    "label": "SteamAPI_gameserveritem_t_Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_gameserveritem_t_Construct( gameserveritem_t* self )"
  },
  {
    "label": "SteamAPI_gameserveritem_t_SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_gameserveritem_t_SetName( gameserveritem_t* self, const char * pName )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_Clear( SteamNetworkingIPAddr* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros( SteamNetworkingIPAddr* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_SetIPv6()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_SetIPv6( SteamNetworkingIPAddr* self, const uint8 * ipv6, uint16 nPort )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_SetIPv4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_SetIPv4( SteamNetworkingIPAddr* self, uint32 nIP, uint16 nPort )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_IsIPv4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_IsIPv4( SteamNetworkingIPAddr* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_GetIPv4()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_GetIPv4( SteamNetworkingIPAddr* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost( SteamNetworkingIPAddr* self, uint16 nPort )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_IsLocalHost()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_IsLocalHost( SteamNetworkingIPAddr* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_ToString( SteamNetworkingIPAddr* self, char * buf, uint32 cbBuf, bool bWithPort )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_ParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_ParseString( SteamNetworkingIPAddr* self, const char * pszStr )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_IsEqualTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_IsEqualTo( SteamNetworkingIPAddr* self, const SteamNetworkingIPAddr & x )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_GetFakeIPType()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingFakeIPType)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_GetFakeIPType( SteamNetworkingIPAddr* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIPAddr_IsFakeIP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIPAddr_IsFakeIP( SteamNetworkingIPAddr* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_Clear( SteamNetworkingIdentity* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_IsInvalid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_IsInvalid( SteamNetworkingIdentity* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_SetSteamID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_SetSteamID( SteamNetworkingIdentity* self, uint64_steamid steamID )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_GetSteamID()",
    "kind": "Method",
    "detail": "Function (uint64_steamid)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_GetSteamID( SteamNetworkingIdentity* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_SetSteamID64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_SetSteamID64( SteamNetworkingIdentity* self, uint64 steamID )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_GetSteamID64()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_GetSteamID64( SteamNetworkingIdentity* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID( SteamNetworkingIdentity* self, const char * pszString )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_SetPSNID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_SetPSNID( SteamNetworkingIdentity* self, uint64 id )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_GetPSNID()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_GetPSNID( SteamNetworkingIdentity* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_SetStadiaID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_SetStadiaID( SteamNetworkingIdentity* self, uint64 id )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_GetStadiaID()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_GetStadiaID( SteamNetworkingIdentity* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_SetIPAddr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_SetIPAddr( SteamNetworkingIdentity* self, const SteamNetworkingIPAddr & addr )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_SetIPv4Addr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_SetIPv4Addr( SteamNetworkingIdentity* self, uint32 nIPv4, uint16 nPort )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_GetIPv4()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_GetIPv4( SteamNetworkingIdentity* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_GetFakeIPType()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingFakeIPType)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_GetFakeIPType( SteamNetworkingIdentity* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_IsFakeIP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_IsFakeIP( SteamNetworkingIdentity* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_SetLocalHost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_SetLocalHost( SteamNetworkingIdentity* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_IsLocalHost()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_IsLocalHost( SteamNetworkingIdentity* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_SetGenericString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_SetGenericString( SteamNetworkingIdentity* self, const char * pszString )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_SetGenericBytes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_SetGenericBytes( SteamNetworkingIdentity* self, const void * data, uint32 cbLen )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_IsEqualTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_IsEqualTo( SteamNetworkingIdentity* self, const SteamNetworkingIdentity & x )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_ToString( SteamNetworkingIdentity* self, char * buf, uint32 cbBuf )"
  },
  {
    "label": "SteamAPI_SteamNetworkingIdentity_ParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamAPI_SteamNetworkingIdentity_ParseString( SteamNetworkingIdentity* self, const char * pszStr )"
  },
  {
    "label": "SteamAPI_SteamNetworkingMessage_t_Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingMessage_t_Release( SteamNetworkingMessage_t* self )"
  },
  {
    "label": "SteamAPI_SteamNetworkingConfigValue_t_SetInt32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingConfigValue_t_SetInt32( SteamNetworkingConfigValue_t* self, ESteamNetworkingConfigValue eVal, int32_t data )"
  },
  {
    "label": "SteamAPI_SteamNetworkingConfigValue_t_SetInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingConfigValue_t_SetInt64( SteamNetworkingConfigValue_t* self, ESteamNetworkingConfigValue eVal, int64_t data )"
  },
  {
    "label": "SteamAPI_SteamNetworkingConfigValue_t_SetFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingConfigValue_t_SetFloat( SteamNetworkingConfigValue_t* self, ESteamNetworkingConfigValue eVal, float data )"
  },
  {
    "label": "SteamAPI_SteamNetworkingConfigValue_t_SetPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingConfigValue_t_SetPtr( SteamNetworkingConfigValue_t* self, ESteamNetworkingConfigValue eVal, void * data )"
  },
  {
    "label": "SteamAPI_SteamNetworkingConfigValue_t_SetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamNetworkingConfigValue_t_SetString( SteamNetworkingConfigValue_t* self, ESteamNetworkingConfigValue eVal, const char * data )"
  },
  {
    "label": "SteamAPI_SteamDatagramHostedAddress_Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamDatagramHostedAddress_Clear( SteamDatagramHostedAddress* self )"
  },
  {
    "label": "SteamAPI_SteamDatagramHostedAddress_GetPopID()",
    "kind": "Method",
    "detail": "Function (SteamNetworkingPOPID)",
    "insertText": "SteamAPI_SteamDatagramHostedAddress_GetPopID( SteamDatagramHostedAddress* self )"
  },
  {
    "label": "SteamAPI_SteamDatagramHostedAddress_SetDevAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SteamDatagramHostedAddress_SetDevAddress( SteamDatagramHostedAddress* self, uint32 nIP, uint16 nPort, SteamNetworkingPOPID popid )"
  }
]