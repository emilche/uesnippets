[
  {
    "label": "FNetLevelVisibilityTransactionId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetLevelVisibilityTransactionId"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FUpdateLevelVisibilityLevelInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateLevelVisibilityLevelInfo"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UpdateLevelVisibilityLevelInfo . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FNetLevelVisibilityTransactionId()",
    "kind": "Method",
    "detail": "Function (InvalidTransactionIndex = 0 U,InvalidTransactionId = 0 U,IsClientTransactionMask = 0 x80000000U,ValueMask = ~ IsClientTransactionMask,} ;)",
    "insertText": "FNetLevelVisibilityTransactionId()"
  },
  {
    "label": "IsClientTransaction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClientTransaction()"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Data(Data & ~IsClientTransactionMask) | (bValue ? IsClientTransactionMask : 0U)"
  },
  {
    "label": "GetTransactionIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTransactionIndex()"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Data(Data & IsClientTransactionMask) | (TransactionIndex & ValueMask)"
  },
  {
    "label": "IncrementTransactionIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "IncrementTransactionIndex()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FNetLevelVisibilityTransactionId& Other)"
  },
  {
    "label": "FNetLevelVisibilityTransactionId()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FNetLevelVisibilityTransactionId(uint32 LevelVisibilityTransactionIndex, bool bIsClientInstigator)"
  },
  {
    "label": "FUpdateLevelVisibilityLevelInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUpdateLevelVisibilityLevelInfo() : PackageName(NAME_None) , FileName(NAME_None) , bIsVisible(false) , bTryMakeVisible(false) , bSkipCloseOnError(false)"
  },
  {
    "label": "FUpdateLevelVisibilityLevelInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUpdateLevelVisibilityLevelInfo(const class ULevel* const Level, const bool bInIsVisible, const bool bInTryMakeVisible = false)"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetSerialize(FArchive& Ar, UPackageMap* PackageMap, bool& bOutSuccess)"
  },
  {
    "label": "FNetLevelVisibilityTransactionId()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FUpdateLevelVisibilityLevelInfo> : public TStructOpsTypeTraitsBase2<FUpdateLevelVisibilityLevelInfo> { enum { WithNetSerializer = true } ; } ;)",
    "insertText": "FNetLevelVisibilityTransactionId() : Data(InvalidTransactionId)"
  },
  {
    "label": "FNetLevelVisibilityTransactionId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetLevelVisibilityTransactionId(uint32 LevelVisibilityTransactionIndex, bool bIsClientInstigator) : Data((bIsClientInstigator ? IsClientTransactionMask : 0U) | (LevelVisibilityTransactionIndex & ValueMask))"
  },
  {
    "label": "NewIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NewIndex(GetTransactionIndex() + 1U)"
  },
  {
    "label": "SetTransactionIndex()",
    "kind": "Method",
    "detail": "Function (+ + NewIndex ; })",
    "insertText": "SetTransactionIndex(NewIndex)"
  }
]