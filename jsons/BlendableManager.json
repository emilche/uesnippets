[
  {
    "label": "FBlendableEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendableEntry"
  },
  {
    "label": "FBlendableManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendableManager"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "GetDataPtr()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FBlendableEntry { float Weight ; private : FName BlendableType ; uint32 DataSize ; uint32 PrePadding ; uint8*)",
    "insertText": "GetDataPtr()"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (} FBlendableEntry*)",
    "insertText": "GetNext()"
  },
  {
    "label": "FBlendableManager()",
    "kind": "Method",
    "detail": "Function (} class FBlendableManager ; } ; class FBlendableManager { public :)",
    "insertText": "FBlendableManager()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Scratch .)",
    "insertText": "Reserve(10 * 1024)"
  },
  {
    "label": "PushBlendableData()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "PushBlendableData(float InWeight, const T& InData)"
  },
  {
    "label": "GetFName()",
    "kind": "Method",
    "detail": "Function (FName BlendableType =)",
    "insertText": "GetFName()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (uint32 Alignment =)",
    "insertText": "Max((uint32)4, (uint32)alignof(T))"
  },
  {
    "label": "PushBlendableDataPtr()",
    "kind": "Method",
    "detail": "Function (FBlendableEntry* Entry =)",
    "insertText": "PushBlendableDataPtr(InWeight, BlendableType, (const uint8*)&InData, sizeof(T), Alignment)"
  },
  {
    "label": "Ret()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "Ret(T*)Entry->GetDataPtr()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (FBlendableEntry* Iterator = 0 ; T* FinalDataPtr = IterateBlendables<)",
    "insertText": "T(Iterator)"
  },
  {
    "label": "SetBaseValues()",
    "kind": "Method",
    "detail": "Function (T Base ; Base .)",
    "insertText": "SetBaseValues()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (PushBlendableData<)",
    "insertText": "T(1.0f, Base)"
  },
  {
    "label": "GetSingleFinalDataConst()",
    "kind": "Method",
    "detail": "Function (} return* FinalDataPtr ; } template<class T> const T&)",
    "insertText": "GetSingleFinalDataConst()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(InIterator && InIterator->BlendableType != BlendableType)"
  },
  {
    "label": "GetNextBlendableEntryPtr()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } private : TArray<uint8> Scratch ; FBlendableEntry*)",
    "insertText": "GetNextBlendableEntryPtr(FBlendableEntry* InIterator = 0)"
  },
  {
    "label": "InIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InIterator(FBlendableEntry*)Scratch.GetData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((uint8*)InIterator == Scratch.GetData() + Scratch.Num())"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (uint32 PrePadding ; { uint8* DataStart = Scratch .)",
    "insertText": "GetData() + Scratch.Num() + sizeof(FBlendableEntry)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (PrePadding = static_cast<)",
    "insertText": "uint32(Alignment - reinterpret_cast<ptrdiff_t>(DataStart) % Alignment)"
  },
  {
    "label": "PrePadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrePadding(PrePadding == Alignment)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (} uint32 OldSize = Scratch .)",
    "insertText": "AddUninitialized(sizeof(FBlendableEntry) + InDataSize + PrePadding)"
  },
  {
    "label": "Dst()",
    "kind": "Method",
    "detail": "Function (FBlendableEntry*)",
    "insertText": "Dst(FBlendableEntry*)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (Dst -> Weight = InWeight ; Dst -> BlendableType = InBlendableType ; Dst -> DataSize = InDataSize ; Dst -> PrePadding = PrePadding ;)",
    "insertText": "memcpy(Dst->GetDataPtr(), InData, InDataSize)"
  }
]