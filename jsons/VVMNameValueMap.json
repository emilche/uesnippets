[
  {
    "label": "VNameValueMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VNameValueMap"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "VNameValueMap()",
    "kind": "Method",
    "detail": "Function (struct VNameValueMap {)",
    "insertText": "VNameValueMap(FAllocationContext Context, uint32 Capacity) : NameAndValues(Context, &VMutableArray::New(Context, 0, Capacity, EArrayType::VValue))"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} TWriteBarrier<VMutableArray> NameAndValues ; uint32)",
    "insertText": "Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(FAllocationContext Context)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (NameAndValues ->)",
    "insertText": "Reset(Context)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const VArray&)",
    "insertText": "GetName(uint32 Index)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (VValue Value = NameAndValues ->)",
    "insertText": "GetValue(2 * Index)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "GetValue(uint32 Index)"
  },
  {
    "label": "GetCell()",
    "kind": "Method",
    "detail": "Function (} template<CellType> CellType&)",
    "insertText": "GetCell(uint32 Index)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddValue(FAllocationContext Context, FUtf8StringView Name, VValue Value)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (NameAndValues ->)",
    "insertText": "AddValue(Context, VArray::New(Context, Name))"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (NameAndValues ->)",
    "insertText": "AddValue(Context, Value)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddValue(FAllocationContext Context, VArray& Name, VValue Value)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (NameAndValues ->)",
    "insertText": "AddValue(Context, VValue(Name))"
  },
  {
    "label": "Lookup()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "Lookup(FUtf8StringView Name)"
  },
  {
    "label": "VValue()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "VValue()"
  },
  {
    "label": "LookupCell()",
    "kind": "Method",
    "detail": "Function (} template<CellType> CellType*)",
    "insertText": "LookupCell(FUtf8StringView Name)"
  },
  {
    "label": "Lookup()",
    "kind": "Method",
    "detail": "Function (VValue Value =)",
    "insertText": "Lookup(Name)"
  },
  {
    "label": "AsCell()",
    "kind": "Method",
    "detail": "Function (VCell& Cell = Value .)",
    "insertText": "AsCell()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } template<TVisitor> void)",
    "insertText": "Visit(TVisitor& Visitor, const TCHAR* MapName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "Visit(NameAndValues, MapName)"
  }
]