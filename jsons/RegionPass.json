[
  {
    "label": "RGPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RGPassManager"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "RegionPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionPass"
  },
  {
    "label": "RegionPass()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_REGIONPASS_H # define LLVM_ANALYSIS_REGIONPASS_H # include \" llvm / Analysis / RegionInfo . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / LegacyPassManagers . h \" # include \" llvm / Pass . h \" # include<deque> namespace llvm { class RGPassManager ; class Function ; class RegionPass : public Pass { public :)",
    "insertText": "RegionPass(char &pid) : Pass(PT_Region, pid)"
  },
  {
    "label": "runOnRegion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "runOnRegion(Region *R, RGPassManager &RGM)"
  },
  {
    "label": "createPrinterPass()",
    "kind": "Method",
    "detail": "Function (Pass*)",
    "insertText": "createPrinterPass(raw_ostream &O, const std::string &Banner)"
  },
  {
    "label": "doInitialization()",
    "kind": "Method",
    "detail": "Function (using llvm::Pass::doInitialization ; using llvm::Pass::doFinalization ; bool)",
    "insertText": "doInitialization(Region *R, RGPassManager &RGM)"
  },
  {
    "label": "assignPassManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignPassManager(PMStack &PMS, PassManagerType PMT = PMT_RegionPassManager)"
  },
  {
    "label": "getPotentialPassManagerType()",
    "kind": "Method",
    "detail": "Function (PassManagerType)",
    "insertText": "getPotentialPassManagerType()"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnFunction(Function &F)"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &Info)"
  },
  {
    "label": "getPassName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getPassName()"
  },
  {
    "label": "getContainedPass()",
    "kind": "Method",
    "detail": "Function (Pass*)",
    "insertText": "getContainedPass(unsigned N)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N < PassVector.size() && \"Pass number out of range!\")"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (Pass* FP = static_cast<)",
    "insertText": "Pass(PassVector[N])"
  }
]