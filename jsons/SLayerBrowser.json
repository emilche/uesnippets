[
  {
    "label": "ISceneOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneOutliner"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SLayerBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLayerBrowser"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Layout / Visibility . h \" # include \" Styling / SlateColor . h \" # include \" Layout / Geometry . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / Input / SButton . h \" # include \" Misc / TextFilter . h \" # include \" ActorsAssignedToSpecificLayersFilter . h \" # include \" ISceneOutlinerColumn . h \" # include \" SceneOutlinerLayerContentsColumn . h \" # include \" DragAndDrop / ActorDragDropOp . h \" # include \" DragAndDrop / FolderDragDropOp . h \" # include \" DragAndDrop / CompositeDragDropOp . h \" # include \" SLayersView . h \" # include \" SLayersCommandsMenu . h \" # include \" EditorActorFolders . h \" class ISceneOutliner ; typedef TTextFilter<const TSharedPtr<FLayerViewModel>&> LayerTextFilter ; namespace ELayerBrowserMode { enum Type { Layers,LayerContents,Count } ; } class SLayerBrowser : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SLayerBrowser)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() ~SLayerBrowser()"
  },
  {
    "label": "OnLayersChanged()",
    "kind": "Method",
    "detail": "Function (LayerCollectionViewModel ->)",
    "insertText": "OnLayersChanged().RemoveAll( this)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (LayerCollectionViewModel ->)",
    "insertText": "OnSelectionChanged().RemoveAll( this)"
  },
  {
    "label": "OnRenameRequested()",
    "kind": "Method",
    "detail": "Function (LayerCollectionViewModel ->)",
    "insertText": "OnRenameRequested().RemoveAll( this)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (LayerCollectionViewModel ->)",
    "insertText": "RemoveFilter(SearchBoxLayerFilter.ToSharedRef())"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (protected : FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "SetupLayersMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupLayersMode()"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "FDecoratedDragDropOp()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDecoratedDragDropOp> DragOp = DragDropEvent . GetOperationAs<)",
    "insertText": "FDecoratedDragDropOp()"
  },
  {
    "label": "ResetToDefaultToolTip()",
    "kind": "Method",
    "detail": "Function (DragOp ->)",
    "insertText": "ResetToDefaultToolTip()"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (} } FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} TArray<TWeakObjectPtr<AActor>> Actors ; TSharedPtr<FActorDragDropOp> ActorDragOp = nullptr ; TSharedPtr<FFolderDragDropOp> FolderDragOp = nullptr ;)",
    "insertText": "if(const TSharedPtr<FCompositeDragDropOp> CompositeDragOp = DragDropEvent.GetOperationAs<FCompositeDragDropOp>())"
  },
  {
    "label": "FActorDragDropOp()",
    "kind": "Method",
    "detail": "Function (ActorDragOp = CompositeDragOp -> GetSubOp<)",
    "insertText": "FActorDragDropOp()"
  },
  {
    "label": "FFolderDragDropOp()",
    "kind": "Method",
    "detail": "Function (FolderDragOp = CompositeDragOp -> GetSubOp<)",
    "insertText": "FFolderDragDropOp()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ActorDragOp.IsValid() || FolderDragOp.IsValid())"
  },
  {
    "label": "FindChildGeometry()",
    "kind": "Method",
    "detail": "Function (const FGeometry LayerContentsHeaderGeometry =)",
    "insertText": "FindChildGeometry(MyGeometry, LayerContentsHeader.ToSharedRef())"
  },
  {
    "label": "IsUnderLocation()",
    "kind": "Method",
    "detail": "Function (bool bValidDrop = LayerContentsHeaderGeometry .)",
    "insertText": "IsUnderLocation(DragDropEvent.GetScreenSpacePosition())"
  },
  {
    "label": "FindChildGeometry()",
    "kind": "Method",
    "detail": "Function (const FGeometry LayerContentsSectionGeometry =)",
    "insertText": "FindChildGeometry(MyGeometry, LayerContentsSection.ToSharedRef())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bValidDrop && ActorDragOp.IsValid() && ActorDragOp->Actors.Num() > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Actors = ActorDragOp -> Actors ; })",
    "insertText": "if(bValidDrop && FolderDragOp.IsValid())"
  },
  {
    "label": "GetWeakActorsFromFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWeakActorsFromFolders(*World, FolderDragOp->Folders, Actors, FolderDragOp->RootObject)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(Actors.Num() > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bCanAssign = false ; FText Message ;)",
    "insertText": "if(Actors.Num() > 1)"
  },
  {
    "label": "CanAssignActors()",
    "kind": "Method",
    "detail": "Function (bCanAssign = SelectedLayerViewModel ->)",
    "insertText": "CanAssignActors(Actors, OUT Message)"
  },
  {
    "label": "CanAssignActor()",
    "kind": "Method",
    "detail": "Function (} else { bCanAssign = SelectedLayerViewModel ->)",
    "insertText": "CanAssignActor(Actors[0], OUT Message)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bCanAssign)"
  },
  {
    "label": "SetToolTip()",
    "kind": "Method",
    "detail": "Function (ActorDragOp ->)",
    "insertText": "SetToolTip(Message, FAppStyle::GetBrush(TEXT(\"Graph.ConnectorFeedback.OK\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FolderDragOp.IsValid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(ActorDragOp.IsValid())"
  },
  {
    "label": "SetToolTip()",
    "kind": "Method",
    "detail": "Function (ActorDragOp ->)",
    "insertText": "SetToolTip(Message, FAppStyle::GetBrush(TEXT(\"Graph.ConnectorFeedback.Error\")))"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bValidDrop)"
  },
  {
    "label": "GetWeakActorsFromFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWeakActorsFromFolders(*World, FolderDragOp->Folders, ActorsToDrop, FolderDragOp->RootObject)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bHandled = true ; } })",
    "insertText": "if(ActorsToDrop.Num() > 0)"
  },
  {
    "label": "AddActors()",
    "kind": "Method",
    "detail": "Function (SelectedLayerViewModel ->)",
    "insertText": "AddActors(ActorsToDrop)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} return bHandled ?)",
    "insertText": "Handled() : FReply::Unhandled()"
  },
  {
    "label": "RemoveActorsFromSelectedLayer()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "RemoveActorsFromSelectedLayer(const TArray< TWeakObjectPtr< AActor > >& Actors)"
  },
  {
    "label": "RemoveActors()",
    "kind": "Method",
    "detail": "Function (SelectedLayerViewModel ->)",
    "insertText": "RemoveActors(Actors)"
  },
  {
    "label": "CreateCustomLayerColumn()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ISceneOutlinerColumn>)",
    "insertText": "CreateCustomLayerColumn(ISceneOutliner& SceneOutliner)"
  },
  {
    "label": "GetInvertedForegroundIfHovered()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "GetInvertedForegroundIfHovered()"
  },
  {
    "label": "InvertedForegroundName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "InvertedForegroundName(\"InvertedForeground\")"
  },
  {
    "label": "GetToggleModeButtonImageBrush()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "GetToggleModeButtonImageBrush()"
  },
  {
    "label": "ExploreLayerContents()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "ExploreLayerContents(\"LayerBrowser.ExploreLayerContents\")"
  },
  {
    "label": "ReturnToLayersList()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "ReturnToLayersList(\"LayerBrowser.ReturnToLayersList\")"
  },
  {
    "label": "GetLayerContentsHeaderText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetLayerContentsHeaderText()"
  },
  {
    "label": "IsVisibleIfModeIs()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "IsVisibleIfModeIs(ELayerBrowserMode::Type DesiredMode)"
  },
  {
    "label": "GetLayerContentsHeaderVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetLayerContentsHeaderVisibility()"
  },
  {
    "label": "ToggleLayerContents()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "ToggleLayerContents()"
  },
  {
    "label": "SetupLayerContentsMode()",
    "kind": "Method",
    "detail": "Function (default : case ELayerBrowserMode::Layers :)",
    "insertText": "SetupLayerContentsMode()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (break ; } return)",
    "insertText": "Handled()"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (ContentAreaBox ->)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (ContentAreaBox ->)",
    "insertText": "AddSlot() .FillHeight( 1.0f ) [ LayersSection.ToSharedRef()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (ContentAreaBox ->)",
    "insertText": "AddSlot() .AutoHeight() .VAlign( VAlign_Bottom ) .MaxHeight( 23 ) [ LayerContentsHeader.ToSharedRef()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (ContentAreaBox ->)",
    "insertText": "AddSlot() .AutoHeight() .VAlign( VAlign_Top ) .MaxHeight( 23 ) [ LayerContentsHeader.ToSharedRef()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (ContentAreaBox ->)",
    "insertText": "AddSlot() .AutoHeight() .FillHeight( 1.0f ) [ LayerContentsSection.ToSharedRef()"
  },
  {
    "label": "TransformLayerToString()",
    "kind": "Method",
    "detail": "Function (Mode = ELayerBrowserMode::LayerContents ; } void)",
    "insertText": "TransformLayerToString(const TSharedPtr< FLayerViewModel >& Layer, OUT TArray< FString >& OutSearchStrings)"
  },
  {
    "label": "UpdateLayerContentsFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateLayerContentsFilter()"
  },
  {
    "label": "GetSelectedLayerNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName> LayerNames ; LayerCollectionViewModel ->)",
    "insertText": "GetSelectedLayerNames(LayerNames)"
  },
  {
    "label": "SetLayers()",
    "kind": "Method",
    "detail": "Function (SelectedLayersFilter ->)",
    "insertText": "SetLayers(LayerNames)"
  },
  {
    "label": "UpdateSelectedLayer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSelectedLayer()"
  },
  {
    "label": "GetSelectedLayers()",
    "kind": "Method",
    "detail": "Function (const auto Layers = LayerCollectionViewModel ->)",
    "insertText": "GetSelectedLayers()"
  },
  {
    "label": "SetDataSource()",
    "kind": "Method",
    "detail": "Function (SelectedLayerViewModel ->)",
    "insertText": "SetDataSource(Layers[ 0 ]->GetDataSource())"
  },
  {
    "label": "SetDataSource()",
    "kind": "Method",
    "detail": "Function (} else { SelectedLayerViewModel ->)",
    "insertText": "SetDataSource(NULL)"
  },
  {
    "label": "OnLayersChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnLayersChanged(const ELayersAction::Type Action, const TWeakObjectPtr< ULayer >& ChangedLayer, const FName& ChangedProperty)"
  },
  {
    "label": "OnRenameRequested()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnRenameRequested()"
  },
  {
    "label": "RequestRenameOnSelectedLayer()",
    "kind": "Method",
    "detail": "Function (LayersView ->)",
    "insertText": "RequestRenameOnSelectedLayer()"
  },
  {
    "label": "ConstructLayerContextMenu()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "ConstructLayerContextMenu()"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFilterTextChanged(const FText& InNewText)"
  }
]