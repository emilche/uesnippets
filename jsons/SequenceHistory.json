[
  {
    "label": "TSequenceHistory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSequenceHistory"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / IsSigned . h \" # include \" Serialization / BitWriter . h \" # include \" Serialization / BitReader . h \" template<SIZE_T HistorySize> class TSequenceHistory { public : typedef uint32 WordT ; SIZE_T BitsPerWord =)",
    "insertText": "sizeof(WordT)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (SIZE_T WordCount = HistorySize / BitsPerWord ; SIZE_T MaxSizeInBits = WordCount* BitsPerWord ; SIZE_T Size = HistorySize ;)",
    "insertText": "static_assert(HistorySize > 0, \"HistorySize must be > 0\")"
  },
  {
    "label": "TSequenceHistory()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TSequenceHistory()"
  },
  {
    "label": "TSequenceHistory()",
    "kind": "Method",
    "detail": "Function (# if WITH_AUTOMATION_WORKER)",
    "insertText": "TSequenceHistory(WordT Value, SIZE_T Count = 1)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (WordT*)",
    "insertText": "Data()"
  },
  {
    "label": "AddDeliveryStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDeliveryStatus(bool Delivered)"
  },
  {
    "label": "IsDelivered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDelivered(SIZE_T Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const TSequenceHistory& Other)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Write(FBitWriter& Writer, SIZE_T NumWords)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Read(FBitReader& Reader, SIZE_T NumWords)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "TSequenceHistory()",
    "kind": "Method",
    "detail": "Function (} # if WITH_AUTOMATION_WORKER template<SIZE_T HistorySize> TSequenceHistory<HistorySize)",
    "insertText": "TSequenceHistory(WordT Value, SIZE_T Count)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(&Storage[0], 0, WordCount * sizeof(WordT))"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (WordT Carry = Delivered ? 1 u : 0 u ; const WordT ValueMask = 1)",
    "insertText": "u(BitsPerWord - 1)"
  },
  {
    "label": "Carry()",
    "kind": "Method",
    "detail": "Function (const WordT OldValue = Carry ;)",
    "insertText": "Carry(Storage[CurrentWordIt] & ValueMask) >> (BitsPerWord - 1)"
  },
  {
    "label": "CurrentWordIt()",
    "kind": "Method",
    "detail": "Function (Storage [)",
    "insertText": "CurrentWordIt(Storage[CurrentWordIt] << 1u)"
  },
  {
    "label": "WordMask()",
    "kind": "Method",
    "detail": "Function (const SIZE_T WordIndex = Index / BitsPerWord ; const WordT)",
    "insertText": "WordMask(WordT(1) << (Index & (BitsPerWord - 1)))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (NumWords =)",
    "insertText": "Min(NumWords, WordCount)"
  }
]