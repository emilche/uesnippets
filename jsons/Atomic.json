[
  {
    "label": "MemoryFence()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_ATOMIC_H # define LLVM_SUPPORT_ATOMIC_H # include \" llvm / Support / DataTypes . h \" namespace llvm { namespace sys { void)",
    "insertText": "MemoryFence()"
  },
  {
    "label": "CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (# ifdef _MSC_VER typedef long cas_flag ; # else typedef uint32_t cas_flag ; # endif cas_flag)",
    "insertText": "CompareAndSwap(volatile cas_flag* ptr, cas_flag new_value, cas_flag old_value)"
  },
  {
    "label": "AtomicIncrement()",
    "kind": "Method",
    "detail": "Function (cas_flag)",
    "insertText": "AtomicIncrement(volatile cas_flag* ptr)"
  },
  {
    "label": "AtomicDecrement()",
    "kind": "Method",
    "detail": "Function (cas_flag)",
    "insertText": "AtomicDecrement(volatile cas_flag* ptr)"
  },
  {
    "label": "AtomicAdd()",
    "kind": "Method",
    "detail": "Function (cas_flag)",
    "insertText": "AtomicAdd(volatile cas_flag* ptr, cas_flag val)"
  },
  {
    "label": "AtomicMul()",
    "kind": "Method",
    "detail": "Function (cas_flag)",
    "insertText": "AtomicMul(volatile cas_flag* ptr, cas_flag val)"
  },
  {
    "label": "AtomicDiv()",
    "kind": "Method",
    "detail": "Function (cas_flag)",
    "insertText": "AtomicDiv(volatile cas_flag* ptr, cas_flag val)"
  }
]