[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "TAttributesSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttributesSet"
  },
  {
    "label": "UMeshDescriptionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshDescriptionBase"
  },
  {
    "label": "RegisterAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAttributes()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "ReserveNewVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveNewVertices(int32 NumberOfNewVertices)"
  },
  {
    "label": "CreateVertex()",
    "kind": "Method",
    "detail": "Function (FVertexID)",
    "insertText": "CreateVertex()"
  },
  {
    "label": "CreateVertexWithID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVertexWithID(FVertexID VertexID)"
  },
  {
    "label": "DeleteVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteVertex(FVertexID VertexID)"
  },
  {
    "label": "ReserveNewVertexInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveNewVertexInstances(int32 NumberOfNewVertexInstances)"
  },
  {
    "label": "CreateVertexInstance()",
    "kind": "Method",
    "detail": "Function (FVertexInstanceID)",
    "insertText": "CreateVertexInstance(FVertexID VertexID)"
  },
  {
    "label": "CreateVertexInstanceWithID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVertexInstanceWithID(FVertexInstanceID VertexInstanceID, FVertexID VertexID)"
  },
  {
    "label": "DeleteVertexInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteVertexInstance(FVertexInstanceID VertexInstanceID, TArray<FVertexID>& OrphanedVertices)"
  },
  {
    "label": "ReserveNewEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveNewEdges(int32 NumberOfNewEdges)"
  },
  {
    "label": "CreateEdge()",
    "kind": "Method",
    "detail": "Function (FEdgeID)",
    "insertText": "CreateEdge(FVertexID VertexID0, FVertexID VertexID1)"
  },
  {
    "label": "CreateEdgeWithID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateEdgeWithID(FEdgeID EdgeID, FVertexID VertexID0, FVertexID VertexID1)"
  },
  {
    "label": "DeleteEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteEdge(FEdgeID EdgeID, TArray<FVertexID>& OrphanedVertices)"
  },
  {
    "label": "ReserveNewTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveNewTriangles(int32 NumberOfNewTriangles)"
  },
  {
    "label": "CreateTriangle()",
    "kind": "Method",
    "detail": "Function (FTriangleID)",
    "insertText": "CreateTriangle(FPolygonGroupID PolygonGroupID, const TArray<FVertexInstanceID>& VertexInstanceIDs, TArray<FEdgeID>& NewEdgeIDs)"
  },
  {
    "label": "CreateTriangleWithID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTriangleWithID(FTriangleID TriangleID, FPolygonGroupID PolygonGroupID, const TArray<FVertexInstanceID>& VertexInstanceIDs, TArray<FEdgeID>& NewEdgeIDs)"
  },
  {
    "label": "DeleteTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteTriangle(FTriangleID TriangleID, TArray<FEdgeID>& OrphanedEdges, TArray<FVertexInstanceID>& OrphanedVertexInstances, TArray<FPolygonGroupID>& OrphanedPolygonGroupsPtr)"
  },
  {
    "label": "ReserveNewPolygons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveNewPolygons(const int32 NumberOfNewPolygons)"
  },
  {
    "label": "CreatePolygon()",
    "kind": "Method",
    "detail": "Function (FPolygonID)",
    "insertText": "CreatePolygon(FPolygonGroupID PolygonGroupID, TArray<FVertexInstanceID>& VertexInstanceIDs, TArray<FEdgeID>& NewEdgeIDs)"
  },
  {
    "label": "CreatePolygonWithID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePolygonWithID(FPolygonID PolygonID, FPolygonGroupID PolygonGroupID, TArray<FVertexInstanceID>& VertexInstanceIDs, TArray<FEdgeID>& NewEdgeIDs)"
  },
  {
    "label": "DeletePolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeletePolygon(FPolygonID PolygonID, TArray<FEdgeID>& OrphanedEdges, TArray<FVertexInstanceID>& OrphanedVertexInstances, TArray<FPolygonGroupID>& OrphanedPolygonGroups)"
  },
  {
    "label": "ReserveNewPolygonGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveNewPolygonGroups(int32 NumberOfNewPolygonGroups)"
  },
  {
    "label": "CreatePolygonGroup()",
    "kind": "Method",
    "detail": "Function (FPolygonGroupID)",
    "insertText": "CreatePolygonGroup()"
  },
  {
    "label": "CreatePolygonGroupWithID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePolygonGroupWithID(FPolygonGroupID PolygonGroupID)"
  },
  {
    "label": "DeletePolygonGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeletePolygonGroup(FPolygonGroupID PolygonGroupID)"
  },
  {
    "label": "SetVertexPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexPosition(FVertexID VertexID, const FVector& Position)"
  },
  {
    "label": "SetPolygonVertexInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPolygonVertexInstances(FPolygonID PolygonID, const TArray<FVertexInstanceID>& VertexInstanceIDs)"
  },
  {
    "label": "SetPolygonPolygonGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPolygonPolygonGroup(FPolygonID PolygonID, FPolygonGroupID PolygonGroupID)"
  },
  {
    "label": "ReversePolygonFacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReversePolygonFacing(FPolygonID PolygonID)"
  },
  {
    "label": "ComputePolygonTriangulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputePolygonTriangulation(FPolygonID PolygonID)"
  }
]