[
  {
    "label": "FSparsePointOctreeCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSparsePointOctreeCell"
  },
  {
    "label": "FSparseDynamicPointOctree3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSparseDynamicPointOctree3"
  },
  {
    "label": "FStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatistics"
  },
  {
    "label": "FPointInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointInfo"
  },
  {
    "label": "FParentChildCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParentChildCell"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / StaticArray . h \" # include \" GeometryTypes . h \" # include \" BoxTypes . h \" # include \" Util / DynamicVector . h \" # include \" Util / RefCountVector . h \" # include \" Util / SparseListSet . h \" # include \" Spatial / SparseGrid3 . h \" # include \" Intersection / IntrRay3AxisAlignedBox3 . h \" # include \" Async / ParallelFor . h \" namespace UE { namespace Geometry { struct FSparsePointOctreeCell { uint32 InvalidID = TNumericLimits<uint32)",
    "insertText": "Max()"
  },
  {
    "label": "FSparsePointOctreeCell()",
    "kind": "Method",
    "detail": "Function (uint32 CellID ; uint8 Level ; FVector3i Index ; TStaticArray<uint32,8> Children ;)",
    "insertText": "FSparsePointOctreeCell() : CellID(InvalidID), Level(0), Index(FVector3i::Zero())"
  },
  {
    "label": "FSparsePointOctreeCell()",
    "kind": "Method",
    "detail": "Function (Children [ 0 ] = Children [ 1 ] = Children [ 2 ] = Children [ 3 ] = InvalidID ; Children [ 4 ] = Children [ 5 ] = Children [ 6 ] = Children [ 7 ] = InvalidID ; })",
    "insertText": "FSparsePointOctreeCell(uint8 LevelIn, const FVector3i& IndexIn) : CellID(InvalidID), Level(LevelIn), Index(IndexIn)"
  },
  {
    "label": "IsExistingCell()",
    "kind": "Method",
    "detail": "Function (Children [ 0 ] = Children [ 1 ] = Children [ 2 ] = Children [ 3 ] = InvalidID ; Children [ 4 ] = Children [ 5 ] = Children [ 6 ] = Children [ 7 ] = InvalidID ; } bool)",
    "insertText": "IsExistingCell()"
  },
  {
    "label": "IndexOffset()",
    "kind": "Method",
    "detail": "Function (FVector3i)",
    "insertText": "IndexOffset(((ChildIndex & 1) != 0) ? 1 : 0, ((ChildIndex & 2) != 0) ? 1 : 0, ((ChildIndex & 4) != 0) ? 1 : 0)"
  },
  {
    "label": "SetChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetChild(uint32 ChildIndex, const FSparsePointOctreeCell& ChildCell)"
  },
  {
    "label": "ConfigureFromPointCountEstimate()",
    "kind": "Method",
    "detail": "Function (Children [ ChildIndex ] = ChildCell . CellID ; } } ; class FSparseDynamicPointOctree3 { public : double RootDimension = 1 0 0 0 . 0 ; int MaxTreeDepth = 1 0 ; int MaxPointsPerCell = 1 0 0 0 ; public : void)",
    "insertText": "ConfigureFromPointCountEstimate(double MaxBoundsDimension, int CountEstimate)"
  },
  {
    "label": "ContainsPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsPoint(int32 PointID)"
  },
  {
    "label": "InsertPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertPoint(int32 PointID, const FVector3d& Position)"
  },
  {
    "label": "InsertPoint_DynamicExpand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertPoint_DynamicExpand(int32 PointID, TFunctionRef<FVector3d(int)> GetPositionFunc)"
  },
  {
    "label": "ParallelInsertDensePointSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelInsertDensePointSet(int32 MaxPointID, TFunctionRef<FVector3d(int)> GetPositionFunc)"
  },
  {
    "label": "RemovePoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePoint(int32 PointID)"
  },
  {
    "label": "RemovePointUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePointUnsafe(int32 PointID)"
  },
  {
    "label": "ReinsertPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinsertPoint(int32 PointID, const FVector3d& NewPosition)"
  },
  {
    "label": "FindNearestHitPoint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindNearestHitPoint(const FRay3d& Ray, TFunctionRef<double(int, const FRay3d&)> HitPointDistFunc, double MaxDistance = TNumericLimits<double>::Max())"
  },
  {
    "label": "RangeQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangeQuery(const FAxisAlignedBox3d& Bounds, TFunctionRef<bool(int)> PredicateFunc, TArray<int>& PointIDsOut, TArray<const FSparsePointOctreeCell*>* TempBuffer = nullptr)"
  },
  {
    "label": "ParallelRangeQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelRangeQuery(const FAxisAlignedBox3d& Bounds, TFunctionRef<bool(int)> PredicateFunc, TArray<int>& PointIDsOut, TArray<const FSparsePointOctreeCell*>* TempBuffer = nullptr)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckValidity(TFunctionRef<bool(int)> IsValidPointIDFunc, TFunctionRef<FVector3d(int)> GetPointFunc, EValidityCheckFailMode FailMode = EValidityCheckFailMode::Check, bool bVerbose = false, bool bFailOnMissingPoints = false)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (struct FStatistics { int32 Levels ; TArray<int32> LevelBoxCounts ; TArray<int32> LevelObjCounts ; TArray<int32> LevelMaxObjCounts ; TArray<float> LevelCellSizes ; FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ComputeStatistics()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ComputeStatistics(FStatistics& StatsOut)"
  },
  {
    "label": "GetCellWidth()",
    "kind": "Method",
    "detail": "Function (protected : uint32 InvalidCellID = FSparsePointOctreeCell::InvalidID ; FRefCountVector CellRefCounts ; TDynamicVector<FSparsePointOctreeCell> Cells ; TSparseListSet<int32> CellPointLists ; TDynamicVector<uint32> PointIDToCellMap ; TSparseGrid3<uint32> RootCells ; double)",
    "insertText": "GetCellWidth(uint32 Level)"
  },
  {
    "label": "GetCellBox()",
    "kind": "Method",
    "detail": "Function (} FAxisAlignedBox3d)",
    "insertText": "GetCellBox(const FSparsePointOctreeCell& Cell)"
  },
  {
    "label": "GetCellCenter()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "GetCellCenter(uint32 Level, const FVector3i& Index)"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (CellWidth* = 0 . 5 ; return)",
    "insertText": "FVector3d(MinX + CellWidth, MinY + CellWidth, MinZ + CellWidth)"
  },
  {
    "label": "GetCellCenter()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "GetCellCenter(const FSparsePointOctreeCell& Cell)"
  },
  {
    "label": "PointToIndex()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "PointToIndex(uint32 Level, const FVector3d& Position)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "i(int32)FMathd::Floor(Position.X / CellWidth)"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "j(int32)FMathd::Floor(Position.Y / CellWidth)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "k(int32)FMathd::Floor(Position.Z / CellWidth)"
  },
  {
    "label": "ToChildCellIndex()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "ToChildCellIndex(uint32 Level, const FVector3i& Index, const FVector3d& Position)"
  },
  {
    "label": "GetCellCenter()",
    "kind": "Method",
    "detail": "Function (FVector3d Center =)",
    "insertText": "GetCellCenter(Level, Index)"
  },
  {
    "label": "ChildIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ChildIndex((Position.X < Center.X) ? 0 : 1) + ((Position.Y < Center.Y) ? 0 : 2) + ((Position.Z < Center.Z) ? 0 : 4)"
  },
  {
    "label": "CellContains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CellContains(const FSparsePointOctreeCell& Cell, const FVector3d& Position)"
  },
  {
    "label": "GetCellBox()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox3d CellBox =)",
    "insertText": "GetCellBox(Cell)"
  },
  {
    "label": "GetCellForPoint()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetCellForPoint(int32 PointID)"
  },
  {
    "label": "CreateNewRootCell()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CreateNewRootCell(FSparsePointOctreeCell NewRootCell, bool bInitializeCellPointList)"
  },
  {
    "label": "Insert_NewRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert_NewRoot(int32 PointID, const FVector3d& Position, FSparsePointOctreeCell NewRootCell)"
  },
  {
    "label": "Insert_ToCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert_ToCell(int32 PointID, const FVector3d& Position, const FSparsePointOctreeCell& ExistingCell)"
  },
  {
    "label": "Insert_NewChildCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert_NewChildCell(int32 PointID, const FVector3d& Position, int ParentCellID, FSparsePointOctreeCell NewChildCell, int ChildIdx)"
  },
  {
    "label": "FindNearestRayCellIntersection()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FindNearestRayCellIntersection(const FSparsePointOctreeCell& Cell, const FRay3d& Ray)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> MaxTreeDepth = 2 ; int RootCellDivisions = 6 ;)",
    "insertText": "if(CountEstimate > 500000)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> MaxTreeDepth = 3 ; RootCellDivisions = 8 ; })",
    "insertText": "if(CountEstimate > 5000000)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> MaxTreeDepth = 4 ; RootCellDivisions = 1 0 ; })",
    "insertText": "if(CountEstimate > 50000000)"
  },
  {
    "label": "MaxBoundsDimension()",
    "kind": "Method",
    "detail": "Function (this -> MaxTreeDepth = 5 ; RootCellDivisions = 1 2 ; } this -> RootDimension =)",
    "insertText": "MaxBoundsDimension(double)"
  },
  {
    "label": "Insert_NewRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert_NewRoot(PointID, Position, CurrentCell)"
  },
  {
    "label": "MakeChildCell()",
    "kind": "Method",
    "detail": "Function (FSparsePointOctreeCell NewChildCell = CurrentCell .)",
    "insertText": "MakeChildCell(PotentialChildIdx)"
  },
  {
    "label": "Insert_NewChildCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert_NewChildCell(PointID, Position, CurrentCell.CellID, NewChildCell, PotentialChildIdx)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (FSparsePointOctreeCell& OrigParentCell = Cells [ ParentCellID ] ;)",
    "insertText": "checkSlow(OrigParentCell.HasChild(ChildIdx) == false)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (NewChildCell . CellID = CellRefCounts .)",
    "insertText": "Allocate()"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "InsertAt(NewChildCell, NewChildCell.CellID)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (PointIDToCellMap .)",
    "insertText": "InsertAt(NewChildCell.CellID, PointID)"
  },
  {
    "label": "AllocateAt()",
    "kind": "Method",
    "detail": "Function (CellPointLists .)",
    "insertText": "AllocateAt(NewChildCell.CellID)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (CellPointLists .)",
    "insertText": "Insert(NewChildCell.CellID, PointID)"
  },
  {
    "label": "SetChild()",
    "kind": "Method",
    "detail": "Function (OrigParentCell .)",
    "insertText": "SetChild(ChildIdx, NewChildCell)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (PointIDToCellMap .)",
    "insertText": "InsertAt(ExistingCell.CellID, PointID)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (CellPointLists .)",
    "insertText": "Insert(ExistingCell.CellID, PointID)"
  },
  {
    "label": "CreateNewRootCell()",
    "kind": "Method",
    "detail": "Function (uint32 NewRootCellID =)",
    "insertText": "CreateNewRootCell(NewRootCell, true)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (PointIDToCellMap .)",
    "insertText": "InsertAt(NewRootCellID, PointID)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (CellPointLists .)",
    "insertText": "Insert(NewRootCellID, PointID)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "InsertAt(NewRootCell, NewRootCell.CellID)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (uint32* RootCellElem = RootCells .)",
    "insertText": "Get(NewRootCell.Index, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* RootCellElem = NewRootCell . CellID ;)",
    "insertText": "if(bInitializeCellPointList)"
  },
  {
    "label": "AllocateAt()",
    "kind": "Method",
    "detail": "Function (CellPointLists .)",
    "insertText": "AllocateAt(NewRootCell.CellID)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(MaxPointID, [&](int32 k) { PointInfos[k] = FPointInfo{ k, PointToIndex(0, GetPositionFunc(k)), InvalidCellID }; })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TMap<FVector3i,int> RootCellLinearIndices ; TArray<FVector3i> RootCellIndexes ; TArray<TUniquePtr<TDynamicVector<int>>> RootCellPointIndices ; { int LinearIndexCounter = 0 ;)",
    "insertText": "for(int32 k = 0; k < MaxPointID; ++k)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int UseLinearIndex = 0 ; const int* FoundLinearIndex = RootCellLinearIndices .)",
    "insertText": "Find(PointInfos[k].RootCell)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UseLinearIndex = LinearIndexCounter + + ; RootCellLinearIndices .)",
    "insertText": "Add(PointInfos[k].RootCell, UseLinearIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RootCellPointIndices .)",
    "insertText": "Add(MakeUnique<TDynamicVector<int>>())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RootCellIndexes .)",
    "insertText": "Add(PointInfos[k].RootCell)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { UseLinearIndex =* FoundLinearIndex ; } RootCellPointIndices [ UseLinearIndex ] ->)",
    "insertText": "Add(k)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} } TArray<FSparsePointOctreeCell*> RootCellPtrs ; { RootCellPtrs .)",
    "insertText": "SetNumUninitialized(RootCellIndexes.Num())"
  },
  {
    "label": "NewRootCell()",
    "kind": "Method",
    "detail": "Function (FVector3i RootIndex = RootCellIndexes [ Index ] ; FSparsePointOctreeCell)",
    "insertText": "NewRootCell(0, RootIndex)"
  },
  {
    "label": "CreateNewRootCell()",
    "kind": "Method",
    "detail": "Function (int32 CellsIndex =)",
    "insertText": "CreateNewRootCell(NewRootCell, false)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (RootCellPtrs [ Index ] =& Cells [ CellsIndex ] ; } RootCellIndexes .)",
    "insertText": "Empty()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} PointIDToCellMap .)",
    "insertText": "SetNum(MaxPointID)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FParentChildCell { FVector3i ParentCellIndex ; FVector3i ChildCellIndex ; int ChildNum ; int NumPoints ; uint32 NewCellID ; bool)",
    "insertText": "operator(const FParentChildCell& OtherCell)"
  },
  {
    "label": "FindCurrentContainingCell()",
    "kind": "Method",
    "detail": "Function (FSparsePointOctreeCell CurrentCell =)",
    "insertText": "FindCurrentContainingCell(Position)"
  },
  {
    "label": "Insert_ToCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert_ToCell(PointID, Position, CurrentCell)"
  },
  {
    "label": "GetPositionFunc()",
    "kind": "Method",
    "detail": "Function (FVector3d MovePosition =)",
    "insertText": "GetPositionFunc(InsertPointID)"
  },
  {
    "label": "ToChildCellIndex()",
    "kind": "Method",
    "detail": "Function (int ChildIdx = this ->)",
    "insertText": "ToChildCellIndex(*ParentCell, MovePosition)"
  },
  {
    "label": "GetChildCellID()",
    "kind": "Method",
    "detail": "Function (uint32 ChildCellID = ParentCell ->)",
    "insertText": "GetChildCellID(ChildIdx)"
  },
  {
    "label": "Insert_ToCell()",
    "kind": "Method",
    "detail": "Function (const FSparsePointOctreeCell* ChildCell =& Cells [ ChildCellID ] ; this ->)",
    "insertText": "Insert_ToCell(InsertPointID, MovePosition, *ChildCell)"
  },
  {
    "label": "MakeChildCell()",
    "kind": "Method",
    "detail": "Function (} else { FSparsePointOctreeCell NewChildCell = ParentCell ->)",
    "insertText": "MakeChildCell(ChildIdx)"
  },
  {
    "label": "Insert_NewChildCell()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Insert_NewChildCell(InsertPointID, MovePosition, ParentCell->CellID, NewChildCell, ChildIdx)"
  },
  {
    "label": "Enumerate()",
    "kind": "Method",
    "detail": "Function (} } ; CellPointLists .)",
    "insertText": "Enumerate(ParentCell->CellID, [&](int MovePointID) { InsertToChildLocalFunc(MovePointID); })"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (CellPointLists .)",
    "insertText": "Clear(ParentCell->CellID)"
  },
  {
    "label": "InsertToChildLocalFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertToChildLocalFunc(PointID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 CellID = PointIDToCellMap [ PointID ] ;)",
    "insertText": "if(CellID != InvalidCellID)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (PointIDToCellMap [ PointID ] = InvalidCellID ; CellPointLists .)",
    "insertText": "Remove(CellID, PointID)"
  },
  {
    "label": "GetCellForPoint()",
    "kind": "Method",
    "detail": "Function (uint32 CellID =)",
    "insertText": "GetCellForPoint(PointID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FSparsePointOctreeCell& CurrentCell = Cells [ CellID ] ;)",
    "insertText": "if(CellContains(CurrentCell, NewPosition))"
  },
  {
    "label": "InsertPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertPoint(PointID, NewPosition)"
  },
  {
    "label": "FindNearestHitPoint()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "FindNearestHitPoint(const FRay3d& Ray, TFunctionRef<double(int, const FRay3d&)> HitPointDistFunc, double MaxDistance)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<const FSparsePointOctreeCell*> Queue ; Queue .)",
    "insertText": "Reserve(64)"
  },
  {
    "label": "AllocatedIteration()",
    "kind": "Method",
    "detail": "Function (RootCells .)",
    "insertText": "AllocatedIteration([&](const uint32* RootCellID) { const FSparsePointOctreeCell* RootCell = &Cells[*RootCellID]; double RayHitParam = FindNearestRayCellIntersection(*RootCell, Ray); if (RayHitParam < MaxDistance) { Queue.Add(&Cells[*RootCellID]); } })"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 HitPointID = - 1 ;)",
    "insertText": "while(Queue.Num() > 0)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (const FSparsePointOctreeCell* CurCell = Queue .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "Enumerate()",
    "kind": "Method",
    "detail": "Function (CellPointLists .)",
    "insertText": "Enumerate(CurCell->CellID, [&](int32 PointID) { double HitDist = HitPointDistFunc(PointID, Ray); if (HitDist < MaxDistance) { MaxDistance = HitDist; HitPointID = PointID; } })"
  },
  {
    "label": "GetChildCellID()",
    "kind": "Method",
    "detail": "Function (const FSparsePointOctreeCell* ChildCell =& Cells [ CurCell ->)",
    "insertText": "GetChildCellID(k)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Queue .)",
    "insertText": "Add(ChildCell)"
  },
  {
    "label": "RangeQuery()",
    "kind": "Method",
    "detail": "Function (} } } } return HitPointID ; } void)",
    "insertText": "RangeQuery(const FAxisAlignedBox3d& Bounds, TFunctionRef<bool(int)> PredicateFunc, TArray<int>& PointIDs, TArray<const FSparsePointOctreeCell*>* TempBuffer)"
  },
  {
    "label": "Queue()",
    "kind": "Method",
    "detail": "Function (TArray<const FSparsePointOctreeCell*> InternalBuffer ; TArray<const FSparsePointOctreeCell*>&)",
    "insertText": "Queue(TempBuffer == nullptr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Queue .)",
    "insertText": "Reset()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Queue .)",
    "insertText": "Reserve(128)"
  },
  {
    "label": "PointToIndex()",
    "kind": "Method",
    "detail": "Function (FVector3i RootMinIndex =)",
    "insertText": "PointToIndex(0, Bounds.Min)"
  },
  {
    "label": "PointToIndex()",
    "kind": "Method",
    "detail": "Function (FVector3i RootMaxIndex =)",
    "insertText": "PointToIndex(0, Bounds.Max)"
  },
  {
    "label": "RangeIteration()",
    "kind": "Method",
    "detail": "Function (RootCells .)",
    "insertText": "RangeIteration(RootMinIndex, RootMaxIndex, [&](uint32 RootCellID) { const FSparsePointOctreeCell* RootCell = &Cells[RootCellID]; Queue.Add(RootCell); })"
  },
  {
    "label": "Enumerate()",
    "kind": "Method",
    "detail": "Function (CellPointLists .)",
    "insertText": "Enumerate(CurCell->CellID, [&](int32 PointID) { if (PredicateFunc(PointID)) { PointIDs.Add(PointID); } })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int k = 0; k < 8; ++k)"
  },
  {
    "label": "ParallelRangeQuery()",
    "kind": "Method",
    "detail": "Function (} } } } } void)",
    "insertText": "ParallelRangeQuery(const FAxisAlignedBox3d& Bounds, TFunctionRef<bool(int)> PredicateFunc, TArray<int>& PointIDs, TArray<const FSparsePointOctreeCell*>* TempBuffer)"
  },
  {
    "label": "ProcessRootCells()",
    "kind": "Method",
    "detail": "Function (TArray<const FSparsePointOctreeCell*> InternalBuffer ; TArray<const FSparsePointOctreeCell*>&)",
    "insertText": "ProcessRootCells(TempBuffer == nullptr)"
  },
  {
    "label": "RangeIteration()",
    "kind": "Method",
    "detail": "Function (RootCells .)",
    "insertText": "RangeIteration(RootMinIndex, RootMaxIndex, [&](uint32 RootCellID) { const FSparsePointOctreeCell* RootCell = &Cells[RootCellID]; ProcessRootCells.Add(RootCell); })"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(ProcessRootCells.Num(), [&](int idx) { const FSparsePointOctreeCell* RootCell = ProcessRootCells[idx]; TArray<const FSparsePointOctreeCell*, TInlineAllocator<128>> Queue; Queue.Add(RootCell); TArray<int, TInlineAllocator<256>> LocalPointIDs; while (Queue.Num() > 0) { const FSparsePointOctreeCell* CurCell = Queue.Pop(EAllowShrinking::No); CellPointLists.Enumerate(CurCell->CellID, [&](int PointID) { if (PredicateFunc(PointID)) { LocalPointIDs.Add(PointID); } }); for (int k = 0; k < 8; ++k) { if (CurCell->HasChild(k)) { const FSparsePointOctreeCell* ChildCell = &Cells[CurCell->GetChildCellID(k)]; if (GetCellBox(*ChildCell).Intersects(Bounds)) { Queue.Add(ChildCell); } } } } if (LocalPointIDs.Num() > 0) { OutputLock.Lock(); for (int ObjID : LocalPointIDs ) { PointIDs.Add(ObjID); } OutputLock.Unlock(); } })"
  },
  {
    "label": "FindCurrentContainingCell()",
    "kind": "Method",
    "detail": "Function (} FSparsePointOctreeCell)",
    "insertText": "FindCurrentContainingCell(const FVector3d& Position)"
  },
  {
    "label": "PointToIndex()",
    "kind": "Method",
    "detail": "Function (FVector3i RootIndex =)",
    "insertText": "PointToIndex(0, Position)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const uint32* RootCellID = RootCells .)",
    "insertText": "Get(RootIndex)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "checkSlow(CellRefCounts.IsValid(*RootCellID))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FSparsePointOctreeCell* RootCell =& Cells [* RootCellID ] ;)",
    "insertText": "if(CellContains(*RootCell, Position) == false)"
  },
  {
    "label": "ToChildCellIndex()",
    "kind": "Method",
    "detail": "Function (} const FSparsePointOctreeCell* CurrentCell = RootCell ; do { int ChildIdx =)",
    "insertText": "ToChildCellIndex(*CurrentCell, Position)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FSparsePointOctreeCell* ChildCell =& Cells [ ChildCellID ] ;)",
    "insertText": "if(CellContains(*ChildCell, Position))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (CurrentCell = ChildCell ; continue ; } } return* CurrentCell ; })",
    "insertText": "while(true)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckValidity(TFunctionRef<bool(int)> IsValidPointIDFunc, TFunctionRef<FVector3d(int)> GetPointFunc, EValidityCheckFailMode FailMode, bool bVerbose, bool bFailOnMissingPoints)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (bool is_ok = true ; TFunction<)",
    "insertText": "void(bool)> CheckOrFailF = [&](bool b)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (is_ok = is_ok&& b ; } ;)",
    "insertText": "if(FailMode == EValidityCheckFailMode::Check)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (is_ok = is_ok&& b ; } ; } else)",
    "insertText": "if(FailMode == EValidityCheckFailMode::Ensure)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (is_ok = is_ok&& b ; } ; } TArray<int> CellsAtLevels,PointsAtLevel ; CellsAtLevels .)",
    "insertText": "Init(0, 32)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 MissingPointCount = 0 ; uint8 MaxLevel = 0 ;)",
    "insertText": "for(int32 CellID : CellRefCounts.Indices())"
  },
  {
    "label": "Enumerate()",
    "kind": "Method",
    "detail": "Function (CellPointLists .)",
    "insertText": "Enumerate(CellID, [&](int32 PointID) { CheckOrFailF(IsValidPointIDFunc(PointID)); })"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} uint32 NumPointIDs = PointIDToCellMap .)",
    "insertText": "Num()"
  },
  {
    "label": "IsValidPointIDFunc()",
    "kind": "Method",
    "detail": "Function (bool IsValidPointID =)",
    "insertText": "IsValidPointIDFunc(PointID)"
  },
  {
    "label": "GetPointFunc()",
    "kind": "Method",
    "detail": "Function (FVector3d Position =)",
    "insertText": "GetPointFunc(PointID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 CellID = PointIDToCellMap [ PointID ] ;)",
    "insertText": "if(bFailOnMissingPoints)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CellID == InvalidCellID)"
  },
  {
    "label": "CheckOrFailF()",
    "kind": "Method",
    "detail": "Function (MissingPointCount + + ; } else {)",
    "insertText": "CheckOrFailF(CellRefCounts.IsValid(CellID))"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const FSparsePointOctreeCell& Cell = Cells [ CellID ] ; CellsAtLevels [ Cell . Level ] + + ; MaxLevel =)",
    "insertText": "Max(MaxLevel, Cell.Level)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bVerbose)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const FSparsePointOctreeCell& Cell = Cells [ CellID ] ; StatsOut . Levels =)",
    "insertText": "Max(StatsOut.Levels, (int32)Cell.Level)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} StatsOut . Levels + + ; StatsOut . LevelObjCounts .)",
    "insertText": "Init(0, StatsOut.Levels)"
  },
  {
    "label": "IsAllocated()",
    "kind": "Method",
    "detail": "Function (const FSparsePointOctreeCell& Cell = Cells [ CellID ] ; StatsOut . LevelBoxCounts [ Cell . Level ] + + ; int ObjCount = CellPointLists .)",
    "insertText": "IsAllocated(CellID) ? CellPointLists.GetCount(CellID)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (StatsOut . LevelObjCounts [ Cell . Level ] + = ObjCount ; StatsOut . LevelMaxObjCounts [ Cell . Level ] =)",
    "insertText": "Max(StatsOut.LevelMaxObjCounts[Cell.Level], ObjCount)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (StatsOut . LevelCellSizes [ Cell . Level ] =)",
    "insertText": "float(GetCellWidth(Cell.Level))"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString Result =)",
    "insertText": "Printf(TEXT(\"Levels %2d\\r\\n\"), Levels)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (Result + =)",
    "insertText": "Printf(TEXT(\" Level %2d: Cells %8d Objs %8d AvgObjs %5.3f MaxObjs %8d Dimension %5.5f\\r\\n\"), k, LevelBoxCounts[k], LevelObjCounts[k], ((float)LevelObjCounts[k] / (float)LevelBoxCounts[k]), LevelMaxObjCounts[k], LevelCellSizes[k])"
  }
]