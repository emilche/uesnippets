[
  {
    "label": "product_triangular_matrix_matrix_trmm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_triangular_matrix_matrix_trmm"
  },
  {
    "label": "product_triangular_matrix_matrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_triangular_matrix_matrix"
  },
  {
    "label": "EIGEN_BLAS_TRMM_SPECIALIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_TRIANGULAR_MATRIX_MATRIX_BLAS_H # define EIGEN_TRIANGULAR_MATRIX_MATRIX_BLAS_H namespace Eigen { namespace internal { template<Scalar,Index,int Mode,bool LhsIsTriangular,int LhsStorageOrder,bool ConjugateLhs,int RhsStorageOrder,bool ConjugateRhs,int ResStorageOrder> struct product_triangular_matrix_matrix_trmm : product_triangular_matrix_matrix<Scalar,Index,Mode,LhsIsTriangular,LhsStorageOrder,ConjugateLhs,RhsStorageOrder,ConjugateRhs,ResStorageOrder,1,BuiltIn> { } ; # define)",
    "insertText": "EIGEN_BLAS_TRMM_SPECIALIZE(Scalar, LhsIsTriangular)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "run(Index _rows, Index _cols, Index _depth, const Scalar* _lhs, Index lhsStride,\\ const Scalar* _rhs, Index rhsStride, Scalar* res, Index resIncr, Index resStride, Scalar alpha, level3_blocking<Scalar,Scalar>& blocking)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(resIncr)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "eigen_assert(resIncr == 1)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ product_triangular_matrix_matrix_trmm<Scalar,Index,Mode,\\ LhsIsTriangular,LhsStorageOrder,ConjugateLhs,\\ RhsStorageOrder,ConjugateRhs,ColMajor)",
    "insertText": "run(\\ _rows, _cols, _depth, _lhs, lhsStride, _rhs, rhsStride, res, resStride, alpha, blocking)"
  },
  {
    "label": "EIGEN_BLAS_TRMM_SPECIALIZE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ;)",
    "insertText": "EIGEN_BLAS_TRMM_SPECIALIZE(double, true) EIGEN_BLAS_TRMM_SPECIALIZE(double, false) EIGEN_BLAS_TRMM_SPECIALIZE(dcomplex, true) EIGEN_BLAS_TRMM_SPECIALIZE(dcomplex, false) EIGEN_BLAS_TRMM_SPECIALIZE(float, true) EIGEN_BLAS_TRMM_SPECIALIZE(float, false) EIGEN_BLAS_TRMM_SPECIALIZE(scomplex, true) EIGEN_BLAS_TRMM_SPECIALIZE(scomplex, false) #define EIGEN_BLAS_TRMM_L(EIGTYPE, BLASTYPE, EIGPREFIX, BLASFUNC)"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (\\ enum { \\)",
    "insertText": "IsLower(Mode&Lower) == Lower, \\ SetDiag = (Mode&(ZeroDiag|UnitDiag)) ? 0 : 1, \\ IsUnitDiag = (Mode&UnitDiag) ? 1 : 0, \\ IsZeroDiag = (Mode&ZeroDiag) ? 1 : 0, \\ LowUp = IsLower ? Lower : Upper, \\ conjA = ((LhsStorageOrder==ColMajor) && ConjugateLhs)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ \\ void)",
    "insertText": "run(\\ Index _rows, Index _cols, Index _depth, \\ const EIGTYPE* _lhs, Index lhsStride, \\ const EIGTYPE* _rhs, Index rhsStride, \\ EIGTYPE* res, Index resStride, \\ EIGTYPE alpha, level3_blocking<EIGTYPE,EIGTYPE>& blocking)"
  },
  {
    "label": "diagSize()",
    "kind": "Method",
    "detail": "Function (\\ Index)",
    "insertText": "diagSize(std::min)(_rows,_depth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ Index rows = IsLower ? _rows : diagSize ; \\ Index depth = IsLower ? diagSize : _depth ; \\ Index cols = _cols ; \\ \\ typedef Matrix<EIGTYPE,Dynamic,Dynamic,LhsStorageOrder> MatrixLhs ; \\ typedef Matrix<EIGTYPE,Dynamic,Dynamic,RhsStorageOrder> MatrixRhs ; \\ \\ \\)",
    "insertText": "if(rows != depth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ int nthr = 1 ; \\ \\)",
    "insertText": "if(((nthr==1) && (((std::max)(rows,depth)-diagSize)/(double)diagSize < 0.5)))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ \\ product_triangular_matrix_matrix<EIGTYPE,Index,Mode,true,\\ LhsStorageOrder,ConjugateLhs,RhsStorageOrder,ConjugateRhs,ColMajor,1,BuiltIn)",
    "insertText": "run(\\ _rows, _cols, _depth, _lhs, lhsStride, _rhs, rhsStride, res, 1, resStride, alpha, blocking)"
  },
  {
    "label": "lhsMap()",
    "kind": "Method",
    "detail": "Function (\\ \\ } else { \\ \\ Map<const MatrixLhs,0,OuterStride<>>)",
    "insertText": "lhsMap(_lhs,rows,depth,OuterStride<>(lhsStride))"
  },
  {
    "label": "Mode()",
    "kind": "Method",
    "detail": "Function (\\ MatrixLhs aa_tmp = lhsMap . template triangularView<)",
    "insertText": "Mode()"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ BlasIndex aStride = convert_index<)",
    "insertText": "BlasIndex(aa_tmp.outerStride())"
  },
  {
    "label": "gemm_blocking()",
    "kind": "Method",
    "detail": "Function (\\ gemm_blocking_space<ColMajor,EIGTYPE,EIGTYPE,Dynamic,Dynamic,Dynamic>)",
    "insertText": "gemm_blocking(_rows,_cols,_depth, 1, true)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ general_matrix_matrix_product<Index,EIGTYPE,LhsStorageOrder,ConjugateLhs,EIGTYPE,RhsStorageOrder,ConjugateRhs,ColMajor,1)",
    "insertText": "run(\\ rows, cols, depth, aa_tmp.data(), aStride, _rhs, rhsStride, res, 1, resStride, alpha, gemm_blocking, 0)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ } \\ return ; \\ } \\ char side = ' L ',transa,uplo,diag = ' N ' ; \\ EIGTYPE* b ; \\ const EIGTYPE* a ; \\ BlasIndex m,n,lda,ldb ; \\ \\ \\ m = convert_index<)",
    "insertText": "BlasIndex(diagSize)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ n = convert_index<)",
    "insertText": "BlasIndex(cols)"
  },
  {
    "label": "transa()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\)",
    "insertText": "transa(LhsStorageOrder==RowMajor) ? ((ConjugateLhs) ? 'C' : 'T')"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ Map<const MatrixRhs,0,OuterStride<>>)",
    "insertText": "rhs(_rhs,depth,cols,OuterStride<>(rhsStride))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ MatrixX # # EIGPREFIX b_tmp ; \\ \\)",
    "insertText": "if(ConjugateRhs) b_tmp = rhs.conjugate()"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ ldb = convert_index<)",
    "insertText": "BlasIndex(b_tmp.outerStride())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ uplo = IsLower ? ' L ' : ' U ' ; \\)",
    "insertText": "if(LhsStorageOrder==RowMajor) uplo = (uplo == 'L')"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ \\ Map<const MatrixLhs,0,OuterStride<>>)",
    "insertText": "lhs(_lhs,rows,depth,OuterStride<>(lhsStride))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ MatrixLhs a_tmp ; \\ \\)",
    "insertText": "if((conjA!=0) || (SetDiag==0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(conjA) a_tmp = lhs.conjugate()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ else)",
    "insertText": "if(IsUnitDiag) \\ a_tmp.diagonal().setOnes()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (\\ a = a_tmp .)",
    "insertText": "data()"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ lda = convert_index<)",
    "insertText": "BlasIndex(a_tmp.outerStride())"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\ a = _lhs ; \\ lda = convert_index<)",
    "insertText": "BlasIndex(lhsStride)"
  },
  {
    "label": "BLASFUNC()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\)",
    "insertText": "BLASFUNC(&side, &uplo, &transa, &diag, &m, &n, (const BLASTYPE*)&numext::real_ref(alpha), (const BLASTYPE*)a, &lda, (BLASTYPE*)b, &ldb)"
  },
  {
    "label": "res_tmp()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ Map<MatrixX # # EIGPREFIX,0,OuterStride<>>)",
    "insertText": "res_tmp(res,rows,cols,OuterStride<>(resStride))"
  },
  {
    "label": "EIGEN_BLAS_TRMM_L()",
    "kind": "Method",
    "detail": "Function (\\ res_tmp = res_tmp + b_tmp ; \\ } \\ } ; # ifdef EIGEN_USE_MKL)",
    "insertText": "EIGEN_BLAS_TRMM_L(double, double, d, dtrmm) EIGEN_BLAS_TRMM_L(dcomplex, MKL_Complex16, cd, ztrmm) EIGEN_BLAS_TRMM_L(float, float, f, strmm) EIGEN_BLAS_TRMM_L(scomplex, MKL_Complex8, cf, ctrmm) #else EIGEN_BLAS_TRMM_L(double, double, d, dtrmm_) EIGEN_BLAS_TRMM_L(dcomplex, double, cd, ztrmm_) EIGEN_BLAS_TRMM_L(float, float, f, strmm_) EIGEN_BLAS_TRMM_L(scomplex, float, cf, ctrmm_) #endif #define EIGEN_BLAS_TRMM_R(EIGTYPE, BLASTYPE, EIGPREFIX, BLASFUNC)"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (\\ enum { \\)",
    "insertText": "IsLower(Mode&Lower) == Lower, \\ SetDiag = (Mode&(ZeroDiag|UnitDiag)) ? 0 : 1, \\ IsUnitDiag = (Mode&UnitDiag) ? 1 : 0, \\ IsZeroDiag = (Mode&ZeroDiag) ? 1 : 0, \\ LowUp = IsLower ? Lower : Upper, \\ conjA = ((RhsStorageOrder==ColMajor) && ConjugateRhs)"
  },
  {
    "label": "diagSize()",
    "kind": "Method",
    "detail": "Function (\\ Index)",
    "insertText": "diagSize(std::min)(_cols,_depth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ Index rows = _rows ; \\ Index depth = IsLower ? _depth : diagSize ; \\ Index cols = IsLower ? diagSize : _cols ; \\ \\ typedef Matrix<EIGTYPE,Dynamic,Dynamic,LhsStorageOrder> MatrixLhs ; \\ typedef Matrix<EIGTYPE,Dynamic,Dynamic,RhsStorageOrder> MatrixRhs ; \\ \\ \\)",
    "insertText": "if(cols != depth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\ int nthr = 1 ; \\ \\)",
    "insertText": "if((nthr==1) && (((std::max)(cols,depth)-diagSize)/(double)diagSize < 0.5))"
  },
  {
    "label": "rhsMap()",
    "kind": "Method",
    "detail": "Function (\\ \\ } else { \\ \\ Map<const MatrixRhs,0,OuterStride<>>)",
    "insertText": "rhsMap(_rhs,depth,cols, OuterStride<>(rhsStride))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ general_matrix_matrix_product<Index,EIGTYPE,LhsStorageOrder,ConjugateLhs,EIGTYPE,RhsStorageOrder,ConjugateRhs,ColMajor,1)",
    "insertText": "run(\\ rows, cols, depth, _lhs, lhsStride, aa_tmp.data(), aStride, res, 1, resStride, alpha, gemm_blocking, 0)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ } \\ return ; \\ } \\ char side = ' R ',transa,uplo,diag = ' N ' ; \\ EIGTYPE* b ; \\ const EIGTYPE* a ; \\ BlasIndex m,n,lda,ldb ; \\ \\ \\ m = convert_index<)",
    "insertText": "BlasIndex(rows)"
  },
  {
    "label": "transa()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\)",
    "insertText": "transa(RhsStorageOrder==RowMajor) ? ((ConjugateRhs) ? 'C' : 'T')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ MatrixX # # EIGPREFIX b_tmp ; \\ \\)",
    "insertText": "if(ConjugateLhs) b_tmp = lhs.conjugate()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ uplo = IsLower ? ' L ' : ' U ' ; \\)",
    "insertText": "if(RhsStorageOrder==RowMajor) uplo = (uplo == 'L')"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ \\ Map<const MatrixRhs,0,OuterStride<>>)",
    "insertText": "rhs(_rhs,depth,cols, OuterStride<>(rhsStride))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(conjA) a_tmp = rhs.conjugate()"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\ a = _rhs ; \\ lda = convert_index<)",
    "insertText": "BlasIndex(rhsStride)"
  }
]