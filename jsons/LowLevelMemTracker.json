[
  {
    "label": "FTagTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTagTrace"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLLMTagDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMTagDeclaration"
  },
  {
    "label": "FLLMTagSetAllocationFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLLMTagSetAllocationFilter"
  },
  {
    "label": "FLLMCsvProfilerWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMCsvProfilerWriter"
  },
  {
    "label": "FLLMCsvWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMCsvWriter"
  },
  {
    "label": "FLLMThreadState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMThreadState"
  },
  {
    "label": "FLLMTraceWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMTraceWriter"
  },
  {
    "label": "FLLMTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMTracker"
  },
  {
    "label": "FTagData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTagData"
  },
  {
    "label": "FTagDataArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTagDataArray"
  },
  {
    "label": "FTagDataNameMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTagDataNameMap"
  },
  {
    "label": "FBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBin"
  },
  {
    "label": "FPage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPage"
  },
  {
    "label": "FLLMAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMAllocator"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "FPrivateCallbacks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrivateCallbacks"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FLLMTagInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLLMTagInfo"
  },
  {
    "label": "FLowLevelMemTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLowLevelMemTracker"
  },
  {
    "label": "FEnableStateScopeLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnableStateScopeLock"
  },
  {
    "label": "FLLMPauseScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMPauseScope"
  },
  {
    "label": "FLLMScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMScope"
  },
  {
    "label": "FLLMScopeDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMScopeDynamic"
  },
  {
    "label": "FLLMScopeFromPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMScopeFromPtr"
  },
  {
    "label": "ILLMDynamicTagConstructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILLMDynamicTagConstructor"
  },
  {
    "label": "FLLMDynamicTagConstructorStatString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMDynamicTagConstructorStatString"
  },
  {
    "label": "FLLMClearScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLLMClearScope"
  },
  {
    "label": "LLM_ENABLED_ON_PLATFORM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LowLevelMemTrackerDefines . h \" # include \" ProfilingDebugging / TagTrace . h \" # include \" AutoRTFM / AutoRTFM . h \" # ifndef PLATFORM_SUPPORTS_LLM # define PLATFORM_SUPPORTS_LLM 1 # endif # define)",
    "insertText": "LLM_ENABLED_ON_PLATFORM(PLATFORM_SUPPORTS_LLM && !PLATFORM_USES_FIXED_GMalloc_CLASS) #ifdef ENABLE_LOW_LEVEL_MEM_TRACKER #error ENABLE_LOW_LEVEL_MEM_TRACKER is now a derived define that should not be defined separately. Define LLM_ENABLED_IN_CONFIG (build environment only) or LLM_ENABLED_ON_PLATFORM (build environment or c++ header) instead. #endif #define ENABLE_LOW_LEVEL_MEM_TRACKER (LLM_ENABLED_IN_CONFIG && LLM_ENABLED_ON_PLATFORM) #if ENABLE_LOW_LEVEL_MEM_TRACKER #ifndef LLM_ALLOW_ASSETS_TAGS #define LLM_ALLOW_ASSETS_TAGS 0 #endif #ifndef LLM_ALLOW_STATS #define LLM_ALLOW_STATS 0 #endif #define LLM_ENABLED_STAT_TAGS (LLM_ALLOW_STATS || LLM_ALLOW_ASSETS_TAGS)"
  },
  {
    "label": "HandleAssert()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK namespace UE::LLMPrivate { bool)",
    "insertText": "HandleAssert(bool bLog, const TCHAR* Format, ...)"
  },
  {
    "label": "TrueOnFirstCallOnly()",
    "kind": "Method",
    "detail": "Function (template<Type> bool)",
    "insertText": "TrueOnFirstCallOnly(const Type&)"
  },
  {
    "label": "TrueOnFirstCallOnly()",
    "kind": "Method",
    "detail": "Function (bool bValue = true ; bool Result = bValue ; bValue = false ; return Result ; } } # if ! USING_CODE_ANALYSIS # define LLMTrueOnFirstCallOnly UE::)",
    "insertText": "TrueOnFirstCallOnly([]{}) #else #define LLMTrueOnFirstCallOnly false #endif #define LLMCheckMessage(expr) TEXT(\"LLM check failed: %s [File:%s] [Line: %d]\\r\\n\"), TEXT(#expr), TEXT(__FILE__), __LINE__ #define LLMCheckfMessage(expr, format) TEXT(\"LLM check failed: %s [File:%s] [Line: %d]\\r\\n\") format TEXT(\"\\r\\n\"), TEXT(#expr), TEXT(__FILE__), __LINE__ #define LLMEnsureMessage(expr) TEXT(\"LLM ensure failed: %s [File:%s] [Line: %d]\\r\\n\"), TEXT(#expr), TEXT(__FILE__), __LINE__ #define LLMCheck(expr)"
  },
  {
    "label": "HandleAssert()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "HandleAssert(true, LLMCheckMessage(expr))"
  },
  {
    "label": "RaiseException()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseException(1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(false) #define LLMCheckf(expr,format,...)"
  },
  {
    "label": "HandleAssert()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "HandleAssert(true, LLMCheckfMessage(expr, format), ##__VA_ARGS__)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(false) #define LLMEnsure(expr) (LIKELY(!!(expr)) || UE::LLMPrivate::HandleAssert(LLMTrueOnFirstCallOnly, LLMEnsureMessage(expr))) #else #define LLMCheck(expr) #define LLMCheckf(expr,...) #define LLMEnsure(expr) (!!(expr)) #endif #define LLM_TAG_TYPE uint8 #define LLM_MEMORY_OVERHEAD (600LL*1024*1024)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (Platform,Default,Max,} ; enum class ELLMTagSet : uint8 { None,Assets,AssetClasses,Max,} ; namespace UE::LLM { enum class ESizeParams : uint8 { Default = 0,ReportCurrent = 0,ReportPeak = 1,RelativeToSnapshot = 2 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESizeParams)"
  },
  {
    "label": "LLM_ENUM_GENERIC_TAGS()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "LLM_ENUM_GENERIC_TAGS(macro) \\ macro(Untagged, \"Untagged\", NAME_None, NAME_None, -1)\\ macro(Paused, \"Paused\", NAME_None, NAME_None, -1)\\ macro(Total, \"Total\", GET_STATFNAME(STAT_TotalLLM), GET_STATFNAME(STAT_TrackedTotalSummaryLLM), -1)\\ macro(Untracked, \"Untracked\", GET_STATFNAME(STAT_UntrackedLLM), GET_STATFNAME(STAT_TrackedTotalSummaryLLM), -1)\\ macro(PlatformTotal, \"Total\", GET_STATFNAME(STAT_PlatformTotalLLM), NAME_None, -1)\\ macro(TrackedTotal, \"TrackedTotal\", GET_STATFNAME(STAT_TrackedTotalLLM), GET_STATFNAME(STAT_TrackedTotalSummaryLLM), -1)\\ macro(UntaggedTotal, \"Untagged\", GET_STATFNAME(STAT_UntaggedTotalLLM), NAME_None, -1)\\ macro(WorkingSetSize, \"WorkingSetSize\", GET_STATFNAME(STAT_WorkingSetSizeLLM), GET_STATFNAME(STAT_TrackedTotalSummaryLLM), -1)\\ macro(PagefileUsed, \"PagefileUsed\", GET_STATFNAME(STAT_PagefileUsedLLM), GET_STATFNAME(STAT_TrackedTotalSummaryLLM), -1)\\ macro(PlatformTrackedTotal, \"TrackedTotal\", GET_STATFNAME(STAT_PlatformTrackedTotalLLM), NAME_None, -1)\\ macro(PlatformUntaggedTotal, \"Untagged\", GET_STATFNAME(STAT_PlatformUntaggedTotalLLM), NAME_None, -1)\\ macro(PlatformUntracked, \"Untracked\", GET_STATFNAME(STAT_PlatformUntrackedLLM), NAME_None, -1)\\ macro(PlatformOverhead, \"LLMOverhead\", GET_STATFNAME(STAT_PlatformOverheadLLM), NAME_None, -1)\\ macro(PlatformOSAvailable, \"OSAvailable\", GET_STATFNAME(STAT_PlatformOSAvailableLLM), NAME_None, -1)\\ \\ macro(FMalloc, \"FMalloc\", GET_STATFNAME(STAT_FMallocLLM), NAME_None, -1)\\ macro(FMallocUnused, \"FMallocUnused\", GET_STATFNAME(STAT_FMallocUnusedLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(RHIUnused, \"RHIUnused\", GET_STATFNAME(STAT_RHIUnusedLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(ThreadStack, \"ThreadStack\", GET_STATFNAME(STAT_ThreadStackLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(ThreadStackPlatform, \"ThreadStack\", GET_STATFNAME(STAT_ThreadStackPlatformLLM), NAME_None, -1)\\ macro(ProgramSizePlatform, \"ProgramSize\", GET_STATFNAME(STAT_ProgramSizePlatformLLM), NAME_None, -1)\\ macro(ProgramSize, \"ProgramSize\", GET_STATFNAME(STAT_ProgramSizeLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(BackupOOMMemoryPoolPlatform, \"OOMBackupPool\", GET_STATFNAME(STAT_OOMBackupPoolPlatformLLM), NAME_None, -1)\\ macro(BackupOOMMemoryPool, \"OOMBackupPool\", GET_STATFNAME(STAT_OOMBackupPoolLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(GenericPlatformMallocCrash, \"GenericPlatformMallocCrash\", GET_STATFNAME(STAT_GenericPlatformMallocCrashLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(GenericPlatformMallocCrashPlatform, \"GenericPlatformMallocCrash\", GET_STATFNAME(STAT_GenericPlatformMallocCrashPlatformLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ \\ macro(EngineMisc, \"EngineMisc\", GET_STATFNAME(STAT_EngineMiscLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ \\ macro(TaskGraphTasksMisc, \"TaskGraphMiscTasks\", GET_STATFNAME(STAT_TaskGraphTasksMiscLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(LinearAllocator, \"LinearAllocator\", GET_STATFNAME(STAT_LinearAllocatorLLM), NAME_None, -1)\\ macro(Audio, \"Audio\", GET_STATFNAME(STAT_AudioLLM), GET_STATFNAME(STAT_AudioSummaryLLM), -1)\\ macro(AudioMisc, \"AudioMisc\", GET_STATFNAME(STAT_AudioMiscLLM), GET_STATFNAME(STAT_AudioSummaryLLM), ELLMTag::Audio)\\ macro(AudioSoundWaves, \"AudioSoundWaves\", GET_STATFNAME(STAT_AudioSoundWavesLLM), GET_STATFNAME(STAT_AudioSummaryLLM), ELLMTag::Audio)\\ macro(AudioSoundWaveProxies, \"AudioSoundWaveProxies\", GET_STATFNAME(STAT_AudioSoundWaveProxiesLLM), GET_STATFNAME(STAT_AudioSummaryLLM), ELLMTag::Audio)\\ macro(AudioMixer, \"AudioMixer\", GET_STATFNAME(STAT_AudioMixerLLM), GET_STATFNAME(STAT_AudioSummaryLLM), ELLMTag::Audio)\\ macro(AudioMixerPlugins, \"AudioMixerPlugins\", GET_STATFNAME(STAT_AudioMixerPluginsLLM), GET_STATFNAME(STAT_AudioSummaryLLM), ELLMTag::Audio)\\ macro(AudioPrecache, \"AudioPrecache\", GET_STATFNAME(STAT_AudioPrecacheLLM), GET_STATFNAME(STAT_AudioSummaryLLM), ELLMTag::Audio)\\ macro(AudioDecompress, \"AudioDecompress\", GET_STATFNAME(STAT_AudioDecompressLLM), GET_STATFNAME(STAT_AudioSummaryLLM), ELLMTag::Audio)\\ macro(AudioRealtimePrecache, \"AudioRealtimePrecache\", GET_STATFNAME(STAT_AudioRealtimePrecacheLLM), GET_STATFNAME(STAT_AudioSummaryLLM), ELLMTag::Audio)\\ macro(AudioFullDecompress, \"AudioFullDecompress\", GET_STATFNAME(STAT_AudioFullDecompressLLM), GET_STATFNAME(STAT_AudioSummaryLLM), ELLMTag::Audio)\\ macro(AudioStreamCache, \"AudioStreamCache\", GET_STATFNAME(STAT_AudioStreamCacheLLM), GET_STATFNAME(STAT_AudioSummaryLLM), ELLMTag::Audio)\\ macro(AudioStreamCacheCompressedData, \"AudioStreamCacheCompressedData\",GET_STATFNAME(STAT_AudioStreamCacheCompressedDataLLM), GET_STATFNAME(STAT_AudioSummaryLLM), ELLMTag::Audio)\\ macro(AudioSynthesis, \"AudioSynthesis\", GET_STATFNAME(STAT_AudioSynthesisLLM), GET_STATFNAME(STAT_AudioSummaryLLM), ELLMTag::Audio)\\ macro(RealTimeCommunications, \"RealTimeCommunications\", GET_STATFNAME(STAT_RealTimeCommunicationsLLM), NAME_None, -1)\\ macro(FName, \"FName\", GET_STATFNAME(STAT_FNameLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(Networking, \"Networking\", GET_STATFNAME(STAT_NetworkingLLM), GET_STATFNAME(STAT_NetworkingSummaryLLM), -1)\\ macro(Meshes, \"Meshes\", GET_STATFNAME(STAT_MeshesLLM), GET_STATFNAME(STAT_MeshesSummaryLLM), -1)\\ macro(Stats, \"Stats\", GET_STATFNAME(STAT_StatsLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(Shaders, \"Shaders\", GET_STATFNAME(STAT_ShadersLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(PSO, \"PSO\", GET_STATFNAME(STAT_PSOLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(Textures, \"Textures\", GET_STATFNAME(STAT_TexturesLLM), GET_STATFNAME(STAT_TexturesSummaryLLM), -1)\\ macro(TextureMetaData, \"TextureMetaData\", GET_STATFNAME(STAT_TextureMetaDataLLM), GET_STATFNAME(STAT_TexturesSummaryLLM), -1)\\ macro(VirtualTextureSystem, \"VirtualTextureSystem\", GET_STATFNAME(STAT_VirtualTextureSystemLLM), GET_STATFNAME(STAT_TexturesSummaryLLM), -1)\\ macro(RenderTargets, \"RenderTargets\", GET_STATFNAME(STAT_RenderTargetsLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(SceneRender, \"SceneRender\", GET_STATFNAME(STAT_SceneRenderLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(RHIMisc, \"RHIMisc\", GET_STATFNAME(STAT_RHIMiscLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(AsyncLoading, \"AsyncLoading\", GET_STATFNAME(STAT_AsyncLoadingLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ \\ \\ \\ \\ macro(UObject, \"UObject\", GET_STATFNAME(STAT_UObjectLLM), GET_STATFNAME(STAT_UObjectSummaryLLM), -1)\\ macro(Animation, \"Animation\", GET_STATFNAME(STAT_AnimationLLM), GET_STATFNAME(STAT_AnimationSummaryLLM), -1)\\ \\ macro(StaticMesh, \"StaticMesh\", GET_STATFNAME(STAT_StaticMeshLLM), GET_STATFNAME(STAT_StaticMeshSummaryLLM), ELLMTag::Meshes)\\ macro(Materials, \"Materials\", GET_STATFNAME(STAT_MaterialsLLM), GET_STATFNAME(STAT_MaterialsSummaryLLM), -1)\\ macro(Particles, \"Particles\", GET_STATFNAME(STAT_ParticlesLLM), GET_STATFNAME(STAT_ParticlesSummaryLLM), -1)\\ macro(Niagara, \"Niagara\", GET_STATFNAME(STAT_NiagaraLLM), GET_STATFNAME(STAT_NiagaraSummaryLLM), -1)\\ macro(GPUSort, \"GPUSort\", GET_STATFNAME(STAT_GPUSortLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(GC, \"GC\", GET_STATFNAME(STAT_GCLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(UI, \"UI\", GET_STATFNAME(STAT_UILLM), GET_STATFNAME(STAT_UISummaryLLM), -1)\\ macro(NavigationRecast, \"NavigationRecast\", GET_STATFNAME(STAT_NavigationRecastLLM), GET_STATFNAME(STAT_NavigationSummaryLLM), -1)\\ macro(Physics, \"Physics\", GET_STATFNAME(STAT_PhysicsLLM), GET_STATFNAME(STAT_PhysicsSummaryLLM), -1)\\ macro(PhysX, \"PhysX\", GET_STATFNAME(STAT_PhysXLLM), GET_STATFNAME(STAT_PhysXSummaryLLM), ELLMTag::Physics)\\ macro(PhysXGeometry, \"PhysXGeometry\", GET_STATFNAME(STAT_PhysXGeometryLLM), GET_STATFNAME(STAT_PhysXSummaryLLM), ELLMTag::Physics)\\ macro(PhysXTrimesh, \"PhysXTrimesh\", GET_STATFNAME(STAT_PhysXTrimeshLLM), GET_STATFNAME(STAT_PhysXSummaryLLM), ELLMTag::Physics)\\ macro(PhysXConvex, \"PhysXConvex\", GET_STATFNAME(STAT_PhysXConvexLLM), GET_STATFNAME(STAT_PhysXSummaryLLM), ELLMTag::Physics)\\ macro(PhysXAllocator, \"PhysXAllocator\", GET_STATFNAME(STAT_PhysXAllocatorLLM), GET_STATFNAME(STAT_PhysXSummaryLLM), ELLMTag::Physics)\\ macro(PhysXLandscape, \"PhysXLandscape\", GET_STATFNAME(STAT_PhysXLandscapeLLM), GET_STATFNAME(STAT_PhysXSummaryLLM), ELLMTag::Physics)\\ macro(Chaos, \"Chaos\", GET_STATFNAME(STAT_ChaosLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(ChaosGeometry, \"ChaosGeometry\", GET_STATFNAME(STAT_ChaosGeometryLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(ChaosAcceleration, \"ChaosAcceleration\", GET_STATFNAME(STAT_ChaosAccelerationLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(ChaosParticles, \"ChaosParticles\", GET_STATFNAME(STAT_ChaosParticlesLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(ChaosLandscape, \"ChaosLandscape\", GET_STATFNAME(STAT_ChaosLandscapeLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(ChaosTrimesh, \"ChaosTrimesh\", GET_STATFNAME(STAT_ChaosTrimeshLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(ChaosConvex, \"ChaosConvex\", GET_STATFNAME(STAT_ChaosConvexLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(ChaosScene, \"ChaosScene\", GET_STATFNAME(STAT_ChaosSceneLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(ChaosUpdate, \"ChaosUpdate\", GET_STATFNAME(STAT_ChaosUpdateLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(ChaosActor, \"ChaosActor\", GET_STATFNAME(STAT_ChaosActorLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(ChaosBody, \"ChaosBody\", GET_STATFNAME(STAT_ChaosBodyLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(ChaosConstraint, \"ChaosConstraint\", GET_STATFNAME(STAT_ChaosConstraintLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(ChaosMaterial, \"ChaosMaterial\", GET_STATFNAME(STAT_ChaosMaterialLLM), GET_STATFNAME(STAT_ChaosSummaryLLM), ELLMTag::Physics)\\ macro(EnginePreInitMemory, \"EnginePreInit\", GET_STATFNAME(STAT_EnginePreInitLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(EngineInitMemory, \"EngineInit\", GET_STATFNAME(STAT_EngineInitLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(RenderingThreadMemory, \"RenderingThread\", GET_STATFNAME(STAT_RenderingThreadLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(LoadMapMisc, \"LoadMapMisc\", GET_STATFNAME(STAT_LoadMapMiscLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(StreamingManager, \"StreamingManager\", GET_STATFNAME(STAT_StreamingManagerLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(GraphicsPlatform, \"Graphics\", GET_STATFNAME(STAT_GraphicsPlatformLLM), NAME_None, -1)\\ macro(FileSystem, \"FileSystem\", GET_STATFNAME(STAT_FileSystemLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(Localization, \"Localization\", GET_STATFNAME(STAT_LocalizationLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(AssetRegistry, \"AssetRegistry\", GET_STATFNAME(STAT_AssetRegistryLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(ConfigSystem, \"ConfigSystem\", GET_STATFNAME(STAT_ConfigSystemLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(InitUObject, \"InitUObject\", GET_STATFNAME(STAT_InitUObjectLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(VideoRecording, \"VideoRecording\", GET_STATFNAME(STAT_VideoRecordingLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(Replays, \"Replays\", GET_STATFNAME(STAT_ReplaysLLM), GET_STATFNAME(STAT_NetworkingSummaryLLM), ELLMTag::Networking)\\ macro(MaterialInstance, \"MaterialInstance\", GET_STATFNAME(STAT_MaterialInstanceLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(SkeletalMesh, \"SkeletalMesh\", GET_STATFNAME(STAT_SkeletalMeshLLM), GET_STATFNAME(STAT_EngineSummaryLLM), ELLMTag::Meshes)\\ macro(InstancedMesh, \"InstancedMesh\", GET_STATFNAME(STAT_InstancedMeshLLM), GET_STATFNAME(STAT_EngineSummaryLLM), ELLMTag::Meshes)\\ macro(Landscape, \"Landscape\", GET_STATFNAME(STAT_LandscapeLLM), GET_STATFNAME(STAT_EngineSummaryLLM), ELLMTag::Meshes)\\ macro(CsvProfiler, \"CsvProfiler\", GET_STATFNAME(STAT_CsvProfilerLLM), GET_STATFNAME(STAT_EngineSummaryLLM), -1)\\ macro(MediaStreaming, \"MediaStreaming\", GET_STATFNAME(STAT_MediaStreamingLLM), GET_STATFNAME(STAT_MediaStreamingSummaryLLM), -1)\\ macro(ElectraPlayer, \"ElectraPlayer\", GET_STATFNAME(STAT_ElectraPlayerLLM), GET_STATFNAME(STAT_MediaStreamingSummaryLLM), ELLMTag::MediaStreaming)\\ macro(WMFPlayer, \"WMFPlayer\", GET_STATFNAME(STAT_WMFPlayerLLM), GET_STATFNAME(STAT_MediaStreamingSummaryLLM), ELLMTag::MediaStreaming)\\ macro(PlatformMMIO, \"MMIO\", GET_STATFNAME(STAT_PlatformMMIOLLM), NAME_None, -1)\\ macro(PlatformVM, \"Virtual Memory\", GET_STATFNAME(STAT_PlatformVMLLM), NAME_None, -1)\\ macro(CustomName, \"CustomName\", GET_STATFNAME(STAT_CustomName), NAME_None, -1)"
  },
  {
    "label": "LLM_ENUM()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_ENUM(Enum,Str,Stat,Group,Parent) Enum, LLM_ENUM_GENERIC_TAGS(LLM_ENUM)"
  },
  {
    "label": "LLM_CUSTOM_TAG_START()",
    "kind": "Method",
    "detail": "Function (uint32 LLM_TAG_COUNT = 2 5 6 ; uint32)",
    "insertText": "LLM_CUSTOM_TAG_START(int32)"
  },
  {
    "label": "LLM_CUSTOM_TAG_END()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "LLM_CUSTOM_TAG_END(int32)"
  },
  {
    "label": "LLMGetTagNameANSI()",
    "kind": "Method",
    "detail": "Function (uint32 LLM_CUSTOM_TAG_COUNT = LLM_CUSTOM_TAG_END + 1 - LLM_CUSTOM_TAG_START ; enum class ELLMAllocType { None = 0,FMalloc,System,RHI,Count } ; const ANSICHAR*)",
    "insertText": "LLMGetTagNameANSI(ELLMTag Tag)"
  },
  {
    "label": "LLMGetTagName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LLMGetTagName(ELLMTag Tag)"
  },
  {
    "label": "LLMGetUntaggedTagName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "LLMGetUntaggedTagName(ELLMTagSet TagSet)"
  },
  {
    "label": "LLM()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM(x) x #define LLM_IF_ENABLED(x) if (FLowLevelMemTracker::IsEnabled())"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (x ; } # define SCOPE_NAME)",
    "insertText": "PREPROCESSOR_JOIN(LLMScope,__LINE__) #define LLM_SCOPE(Tag) FLLMScope SCOPE_NAME(Tag, false , ELLMTagSet::None, ELLMTracker::Default)"
  },
  {
    "label": "UE_MEMSCOPE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_MEMSCOPE(Tag) #define LLM_SCOPE_DYNAMIC(UniqueName, Tracker, TagSet, Constructor) \\ FLLMScopeDynamic SCOPE_NAME(Tracker, TagSet)"
  },
  {
    "label": "UE_MEMSCOPE_UNINITIALIZED()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_MEMSCOPE_UNINITIALIZED(__LINE__)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ do \\ { \\)",
    "insertText": "if(SCOPE_NAME.IsEnabled())"
  },
  {
    "label": "UniqueNameEvaluated()",
    "kind": "Method",
    "detail": "Function (\\ FName)",
    "insertText": "UniqueNameEvaluated(UniqueName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!UniqueNameEvaluated.IsNone())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(SCOPE_NAME.TryFindTag(UniqueNameEvaluated))"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (\\ SCOPE_NAME .)",
    "insertText": "Activate()"
  },
  {
    "label": "TryAddTagAndActivate()",
    "kind": "Method",
    "detail": "Function (\\ } \\ else \\ { \\ SCOPE_NAME .)",
    "insertText": "TryAddTagAndActivate(UniqueNameEvaluated, Constructor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "if(TagSet == ELLMTagSet::None && Tracker == ELLMTracker::Default)"
  },
  {
    "label": "UE_MEMSCOPE_ACTIVATE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_MEMSCOPE_ACTIVATE(__LINE__, UniqueNameEvaluated)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } \\ })",
    "insertText": "while(false) #define LLM_TAGSET_SCOPE(Tag, TagSet) FLLMScope SCOPE_NAME(Tag, false , TagSet, ELLMTracker::Default)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_SCOPE_BYNAME(Tag) static FName PREPROCESSOR_JOIN(LLMScope_Name,__LINE__)(Tag)"
  },
  {
    "label": "SCOPE_NAME()",
    "kind": "Method",
    "detail": "Function (\\ FLLMScope)",
    "insertText": "SCOPE_NAME(PREPROCESSOR_JOIN(LLMScope_Name,__LINE__), false , ELLMTagSet::None, ELLMTracker::Default)"
  },
  {
    "label": "UE_MEMSCOPE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_MEMSCOPE(PREPROCESSOR_JOIN(LLMScope_Name,__LINE__))"
  },
  {
    "label": "LLM_SCOPE_BYTAG()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_SCOPE_BYTAG(TagDeclName) FLLMScope SCOPE_NAME(PREPROCESSOR_JOIN(LLMTagDeclaration_, TagDeclName).GetUniqueName(), false , ELLMTagSet::None, ELLMTracker::Default)"
  },
  {
    "label": "UE_MEMSCOPE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_MEMSCOPE(PREPROCESSOR_JOIN(LLMTagDeclaration_,TagDeclName).GetUniqueName())"
  },
  {
    "label": "LLM_SCOPE_RENDER_RESOURCE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_SCOPE_RENDER_RESOURCE(Tag) static const FString PREPROCESSOR_JOIN(LLMScope_NamePrefix,__LINE__)(TEXT(\"RenderResources.\"))"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ FName)",
    "insertText": "PREPROCESSOR_JOIN(LLMScope_Name,__LINE__)(PREPROCESSOR_JOIN(LLMScope_NamePrefix, __LINE__) + (Tag ? Tag : TEXT(\"Unknown\")))"
  },
  {
    "label": "SCOPE_NAME()",
    "kind": "Method",
    "detail": "Function (\\ FLLMScope)",
    "insertText": "SCOPE_NAME(PREPROCESSOR_JOIN(LLMScope_Name,__LINE__), false , ELLMTagSet::Assets, ELLMTracker::Default, false)"
  },
  {
    "label": "LLM_PLATFORM_SCOPE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_PLATFORM_SCOPE(Tag) FLLMScope SCOPE_NAME(Tag, false , ELLMTagSet::None, ELLMTracker::Platform)"
  },
  {
    "label": "LLM_PLATFORM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_PLATFORM_SCOPE_BYNAME(Tag) static FName PREPROCESSOR_JOIN(LLMScope_Name,__LINE__)(Tag)"
  },
  {
    "label": "SCOPE_NAME()",
    "kind": "Method",
    "detail": "Function (\\ FLLMScope)",
    "insertText": "SCOPE_NAME(PREPROCESSOR_JOIN(LLMScope_Name,__LINE__), false , ELLMTagSet::None, ELLMTracker::Platform)"
  },
  {
    "label": "LLM_PLATFORM_SCOPE_BYTAG()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_PLATFORM_SCOPE_BYTAG(TagDeclName) FLLMScope SCOPE_NAME(PREPROCESSOR_JOIN(LLMTagDeclaration_, TagDeclName).GetUniqueName(), false , ELLMTagSet::None, ELLMTracker::Platform)"
  },
  {
    "label": "LLM_SCOPE_CLEAR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_SCOPE_CLEAR() FLLMClearScope SCOPE_NAME(ELLMTagSet::None, ELLMTracker::Default)"
  },
  {
    "label": "UE_MEMSCOPE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_MEMSCOPE(0) #define LLM_TAGSET_SCOPE_CLEAR(TagSet) FLLMClearScope SCOPE_NAME(TagSet, ELLMTracker::Default)"
  },
  {
    "label": "LLM_SCOPED_PAUSE_TRACKING()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_SCOPED_PAUSE_TRACKING(AllocType) FLLMPauseScope SCOPE_NAME(ELLMTag::Untagged, false , 0, ELLMTracker::Max, AllocType)"
  },
  {
    "label": "LLM_SCOPED_PAUSE_TRACKING_FOR_TRACKER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_SCOPED_PAUSE_TRACKING_FOR_TRACKER(Tracker, AllocType) FLLMPauseScope SCOPE_NAME(ELLMTag::Untagged, false , 0, Tracker, AllocType)"
  },
  {
    "label": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT(Tag, Amount, Tracker, AllocType) FLLMPauseScope SCOPE_NAME(Tag, false , Amount, Tracker, AllocType)"
  },
  {
    "label": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT_BYTAG()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT_BYTAG(TagDeclName, Amount, Tracker, AllocType) FLLMPauseScope SCOPE_NAME(PREPROCESSOR_JOIN(LLMTagDeclaration_, TagDeclName).GetUniqueName(), false , Amount, Tracker, AllocType)"
  },
  {
    "label": "LLM_REALLOC_SCOPE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_REALLOC_SCOPE(Ptr) FLLMScopeFromPtr SCOPE_NAME(Ptr, ELLMTracker::Default)"
  },
  {
    "label": "LLM_REALLOC_PLATFORM_SCOPE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_REALLOC_PLATFORM_SCOPE(Ptr) FLLMScopeFromPtr SCOPE_NAME(Ptr, ELLMTracker::Platform)"
  },
  {
    "label": "LLM_DUMP_TAG()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_DUMP_TAG() FLowLevelMemTracker::Get().DumpTag(ELLMTracker::Default,__FILE__,__LINE__) #define LLM_DUMP_PLATFORM_TAG() FLowLevelMemTracker::Get().DumpTag(ELLMTracker::Platform,__FILE__,__LINE__) #define LLM_DEFINE_TAG(UniqueNameWithUnderscores, ...) FLLMTagDeclaration PREPROCESSOR_JOIN(LLMTagDeclaration_, UniqueNameWithUnderscores)(TEXT(#UniqueNameWithUnderscores), ##__VA_ARGS__) #define LLM_DECLARE_TAG(UniqueNameWithUnderscores) extern FLLMTagDeclaration PREPROCESSOR_JOIN(LLMTagDeclaration_, UniqueNameWithUnderscores) #define LLM_DECLARE_TAG_API(UniqueNameWithUnderscores, ModuleAPI) extern ModuleAPI FLLMTagDeclaration PREPROCESSOR_JOIN(LLMTagDeclaration_, UniqueNameWithUnderscores) #define LLM_TAG_NAME(UniqueNameWithUnderscores) (PREPROCESSOR_JOIN(LLMTagDeclaration_, UniqueNameWithUnderscores).GetUniqueName()) #define LLM_DEFINE_BOOTSTRAP_TAG(UniqueNameWithUnderscores, ...) \\ FLLMTagDeclaration& PREPROCESSOR_JOIN(GetLLMTagDeclaration_, UniqueNameWithUnderscores)()"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ FLLMTagDeclaration)",
    "insertText": "PREPROCESSOR_JOIN(LLMTagDeclaration_, UniqueNameWithUnderscores)(TEXT(#UniqueNameWithUnderscores), ##__VA_ARGS__)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "PREPROCESSOR_JOIN(LLMTagDeclaration_, UniqueNameWithUnderscores)"
  },
  {
    "label": "LLM_SCOPE_BY_BOOTSTRAP_TAG()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "LLM_SCOPE_BY_BOOTSTRAP_TAG(TagDeclName) FLLMScope SCOPE_NAME(PREPROCESSOR_JOIN(GetLLMTagDeclaration_, TagDeclName)().GetUniqueName(), false , ELLMTagSet::None, ELLMTracker::Default)"
  },
  {
    "label": "UE_MEMSCOPE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_MEMSCOPE(PREPROCESSOR_JOIN(GetLLMTagDeclaration_,TagDeclName)().GetUniqueName())"
  },
  {
    "label": "LLM_DECLARE_BOOTSTRAP_TAG()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_DECLARE_BOOTSTRAP_TAG(UniqueNameWithUnderscores) extern FLLMTagDeclaration& PREPROCESSOR_JOIN(GetLLMTagDeclaration_, UniqueNameWithUnderscores)()"
  },
  {
    "label": "LLM_DECLARE_BOOTSTRAP_TAG_API()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_DECLARE_BOOTSTRAP_TAG_API(UniqueNameWithUnderscores, ModuleAPI) extern ModuleAPI FLLMTagDeclaration& PREPROCESSOR_JOIN(GetLLMTagDeclaration_, UniqueNameWithUnderscores)()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*LLMAllocFunction)(size_t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*LLMFreeFunction)(void*, size_t)"
  },
  {
    "label": "FLLMAllocator()",
    "kind": "Method",
    "detail": "Function (class FLLMTagDeclaration ; struct FLLMTagSetAllocationFilter ; namespace UE::LLMPrivate { class FLLMCsvProfilerWriter ; class FLLMCsvWriter ; class FLLMThreadState ; class FLLMTraceWriter ; class FLLMTracker ; class FTagData ; class FTagDataArray ; class FTagDataNameMap ; namespace AllocatorPrivate { struct FBin ; struct FPage ; } class FLLMAllocator { public :)",
    "insertText": "FLLMAllocator()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FLLMAllocator*&)",
    "insertText": "Get()"
  },
  {
    "label": "Initialise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialise(LLMAllocFunction InAlloc, LLMFreeFunction InFree, int32 InPageSize)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Alloc(size_t Size)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Malloc(size_t Size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Ptr, size_t Size)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Realloc(void* Ptr, size_t OldSize, size_t NewSize)"
  },
  {
    "label": "GetTotal()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetTotal()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (template<T,. . . ArgsType> T*)",
    "insertText": "New(ArgsType&&... Args)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Ptr = reinterpret_cast<)",
    "insertText": "T(Alloc(sizeof(T)))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Ptr) T(Forward<ArgsType>(Args)...)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ptr -> ~)",
    "insertText": "T()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Ptr, sizeof(T))"
  },
  {
    "label": "GetPlatformAlloc()",
    "kind": "Method",
    "detail": "Function (} } LLMAllocFunction)",
    "insertText": "GetPlatformAlloc()"
  },
  {
    "label": "FreePages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreePages(void* Ptr, size_t Size)"
  },
  {
    "label": "GetBinIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBinIndex(size_t Size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (FCriticalSection CriticalSection ; LLMAllocFunction PlatformAlloc ; LLMFreeFunction PlatformFree ; AllocatorPrivate::FBin* Bins ; int64 Total ; int32 PageSize ; int32 NumBins ; struct UE::LLMPrivate::AllocatorPrivate::FPage ; struct UE::LLMPrivate::AllocatorPrivate::FBin ; } ; enum class ETagReferenceSource { Scope,Declare,EnumTag,CustomEnumTag,FunctionAPI,ImplicitParent } ; typedef)",
    "insertText": "void(*FLLMInitialisedCallback)(UPTRINT UserData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*FTagCreationCallback)(const UE::LLMPrivate::FTagData* TagData, UPTRINT UserData)"
  },
  {
    "label": "AddInitialisedCallback()",
    "kind": "Method",
    "detail": "Function (struct FPrivateCallbacks { private : void)",
    "insertText": "AddInitialisedCallback(FLLMInitialisedCallback Callback, UPTRINT UserData)"
  },
  {
    "label": "AddTagCreationCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTagCreationCallback(FTagCreationCallback Callback, UPTRINT UserData)"
  },
  {
    "label": "RemoveTagCreationCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTagCreationCallback(FTagCreationCallback Callback)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} FLowLevelMemTracker&)",
    "insertText": "Construct()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "ProcessCommandLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCommandLine(const TCHAR* CmdLine)"
  },
  {
    "label": "GetTotalTrackedMemory()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTotalTrackedMemory(ELLMTracker Tracker)"
  },
  {
    "label": "OnLowLevelAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLowLevelAlloc(ELLMTracker Tracker, const void* Ptr, uint64 Size, ELLMTag DefaultTag = ELLMTag::Untagged, ELLMAllocType AllocType = ELLMAllocType::None, bool bTrackInMemPro = true)"
  },
  {
    "label": "OnLowLevelAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLowLevelAlloc(ELLMTracker Tracker, const void* Ptr, uint64 Size, FName DefaultTag, ELLMAllocType AllocType = ELLMAllocType::None, bool bTrackInMemPro = true)"
  },
  {
    "label": "OnLowLevelFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLowLevelFree(ELLMTracker Tracker, const void* Ptr, ELLMAllocType AllocType = ELLMAllocType::None, bool bTrackInMemPro = true)"
  },
  {
    "label": "OnLowLevelChangeInMemoryUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLowLevelChangeInMemoryUse(ELLMTracker Tracker, int64 DeltaMemory, ELLMTag DefaultTag = ELLMTag::Untagged, ELLMAllocType AllocType = ELLMAllocType::None)"
  },
  {
    "label": "OnLowLevelChangeInMemoryUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLowLevelChangeInMemoryUse(ELLMTracker Tracker, int64 DeltaMemory, FName DefaultTag, ELLMAllocType AllocType = ELLMAllocType::None)"
  },
  {
    "label": "OnLowLevelAllocMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLowLevelAllocMoved(ELLMTracker Tracker, const void* Dest, const void* Source, ELLMAllocType AllocType = ELLMAllocType::None)"
  },
  {
    "label": "UpdateStatsPerFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatsPerFrame(const TCHAR* LogName=nullptr)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "SetProgramSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProgramSize(uint64 InProgramSize)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "IsTagSetActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTagSetActive(ELLMTagSet Set)"
  },
  {
    "label": "ShouldReduceThreads()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldReduceThreads()"
  },
  {
    "label": "GetActiveTagData()",
    "kind": "Method",
    "detail": "Function (const UE::LLMPrivate::FTagData*)",
    "insertText": "GetActiveTagData(ELLMTracker Tracker, ELLMTagSet TagSet = ELLMTagSet::None)"
  },
  {
    "label": "RegisterPlatformTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPlatformTag(int32 Tag, const TCHAR* Name, FName StatName, FName SummaryStatName, int32 ParentTag = -1)"
  },
  {
    "label": "RegisterProjectTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterProjectTag(int32 Tag, const TCHAR* Name, FName StatName, FName SummaryStatName, int32 ParentTag = -1)"
  },
  {
    "label": "GetTrackedTags()",
    "kind": "Method",
    "detail": "Function (TArray<const UE::LLMPrivate::FTagData*>)",
    "insertText": "GetTrackedTags(ELLMTagSet TagSet = ELLMTagSet::None)"
  },
  {
    "label": "GetTrackedTags()",
    "kind": "Method",
    "detail": "Function (TArray<const UE::LLMPrivate::FTagData*>)",
    "insertText": "GetTrackedTags(ELLMTracker Tracker, ELLMTagSet TagSet = ELLMTagSet::None)"
  },
  {
    "label": "GetTrackedTagsNamesWithAmount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTrackedTagsNamesWithAmount(TMap<FName, uint64>& TagsNamesWithAmount, ELLMTracker Tracker, ELLMTagSet TagSet)"
  },
  {
    "label": "GetTrackedTagsNamesWithAmountFiltered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTrackedTagsNamesWithAmountFiltered(TMap<FName, uint64>& TagsNamesWithAmount, ELLMTracker Tracker, ELLMTagSet TagSet, TArray<FLLMTagSetAllocationFilter>& Filters)"
  },
  {
    "label": "FindTagByName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTagByName(const TCHAR* Name, uint64& OutTag, ELLMTagSet InTagSet = ELLMTagSet::None)"
  },
  {
    "label": "FindTagDisplayName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindTagDisplayName(uint64 Tag)"
  },
  {
    "label": "FindPtrDisplayName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindPtrDisplayName(void* Ptr)"
  },
  {
    "label": "GetTagDisplayName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTagDisplayName(const UE::LLMPrivate::FTagData* TagData)"
  },
  {
    "label": "GetTagDisplayPathName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTagDisplayPathName(const UE::LLMPrivate::FTagData* TagData)"
  },
  {
    "label": "GetTagDisplayPathName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTagDisplayPathName(const UE::LLMPrivate::FTagData* TagData, FStringBuilderBase& OutPathName, int32 MaxLen=-1)"
  },
  {
    "label": "GetTagUniqueName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTagUniqueName(const UE::LLMPrivate::FTagData* TagData)"
  },
  {
    "label": "GetTagParent()",
    "kind": "Method",
    "detail": "Function (const UE::LLMPrivate::FTagData*)",
    "insertText": "GetTagParent(const UE::LLMPrivate::FTagData* TagData)"
  },
  {
    "label": "GetTagIsEnumTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTagIsEnumTag(const UE::LLMPrivate::FTagData* TagData)"
  },
  {
    "label": "GetTagClosestEnumTag()",
    "kind": "Method",
    "detail": "Function (ELLMTag)",
    "insertText": "GetTagClosestEnumTag(const UE::LLMPrivate::FTagData* TagData)"
  },
  {
    "label": "GetTagAmountForTracker()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetTagAmountForTracker(ELLMTracker Tracker, ELLMTag Tag, UE::LLM::ESizeParams SizeParams = UE::LLM::ESizeParams::Default)"
  },
  {
    "label": "GetTagAmountForTracker()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetTagAmountForTracker(ELLMTracker Tracker, const UE::LLMPrivate::FTagData* TagData, UE::LLM::ESizeParams SizeParams = UE::LLM::ESizeParams::Default)"
  },
  {
    "label": "GetTagAmountForTracker()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetTagAmountForTracker(ELLMTracker Tracker, FName Tag, ELLMTagSet TagSet, UE::LLM::ESizeParams SizeParams = UE::LLM::ESizeParams::Default)"
  },
  {
    "label": "SetTagAmountForTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTagAmountForTracker(ELLMTracker Tracker, ELLMTag Tag, int64 Amount, bool bAddToTotal)"
  },
  {
    "label": "SetTagAmountForTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTagAmountForTracker(ELLMTracker Tracker, FName Tag, ELLMTagSet TagSet, int64 Amount, bool bAddToTotal)"
  },
  {
    "label": "DumpTag()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "DumpTag(ELLMTracker Tracker, const char* FileName, int LineNumber)"
  },
  {
    "label": "PublishDataSingleFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PublishDataSingleFrame()"
  },
  {
    "label": "DumpToLog()",
    "kind": "Method",
    "detail": "Function (enum class EDumpFormat { PlainText,CSV,} ; void)",
    "insertText": "DumpToLog(EDumpFormat DumpFormat = EDumpFormat::PlainText, FOutputDevice* OutputDevice = nullptr, UE::LLM::ESizeParams SizeParams = UE::LLM::ESizeParams::Default, ELLMTagSet TagSet = ELLMTagSet::None)"
  },
  {
    "label": "OnPreFork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreFork()"
  },
  {
    "label": "FinishInitialise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishInitialise()"
  },
  {
    "label": "FLowLevelMemTracker()",
    "kind": "Method",
    "detail": "Function (private : enum class EEnabled : uint8 { NotYetKnown = 0,Disabled,Enabled,} ; struct FEnableStateScopeLock ; private :)",
    "insertText": "FLowLevelMemTracker()"
  },
  {
    "label": "IsBootstrapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBootstrapping()"
  },
  {
    "label": "InitialiseProgramSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialiseProgramSize()"
  },
  {
    "label": "GetTracker()",
    "kind": "Method",
    "detail": "Function (class UE::LLMPrivate::FLLMTracker*)",
    "insertText": "GetTracker(ELLMTracker Tracker)"
  },
  {
    "label": "TickInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickInternal()"
  },
  {
    "label": "UpdateTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTags()"
  },
  {
    "label": "SortTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTags(UE::LLMPrivate::FTagDataArray*& OutOldTagDatas)"
  },
  {
    "label": "PublishDataPerFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PublishDataPerFrame(const TCHAR* LogName)"
  },
  {
    "label": "RegisterCustomTagInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCustomTagInternal(int32 Tag, ELLMTagSet TagSet, const TCHAR* Name, FName StatName, FName SummaryStatName, int32 ParentTag = -1)"
  },
  {
    "label": "BootstrapTagDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BootstrapTagDatas()"
  },
  {
    "label": "InitialiseTagDatas_SetLLMTagNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialiseTagDatas_SetLLMTagNames()"
  },
  {
    "label": "InitialiseTagDatas_FinishRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialiseTagDatas_FinishRegister()"
  },
  {
    "label": "InitialiseTagDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialiseTagDatas()"
  },
  {
    "label": "ClearTagDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTagDatas()"
  },
  {
    "label": "RegisterTagDeclaration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTagDeclaration(FLLMTagDeclaration& TagDeclaration)"
  },
  {
    "label": "RegisterTagData()",
    "kind": "Method",
    "detail": "Function (UE::LLMPrivate::FTagData&)",
    "insertText": "RegisterTagData(FName Name, FName DisplayName, FName ParentName, FName StatName, FName SummaryStatName, bool bHasEnumTag, ELLMTag EnumTag, bool bIsStatTag, UE::LLMPrivate::ETagReferenceSource ReferenceSource, ELLMTagSet TagSet = ELLMTagSet::None)"
  },
  {
    "label": "FinishConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishConstruct(UE::LLMPrivate::FTagData* TagData, UE::LLMPrivate::ETagReferenceSource ReferenceSource)"
  },
  {
    "label": "ReportDuplicateTagName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportDuplicateTagName(UE::LLMPrivate::FTagData* TagData, UE::LLMPrivate::ETagReferenceSource ReferenceSource)"
  },
  {
    "label": "FindOrAddTagData()",
    "kind": "Method",
    "detail": "Function (const UE::LLMPrivate::FTagData*)",
    "insertText": "FindOrAddTagData(ELLMTag EnumTag, UE::LLMPrivate::ETagReferenceSource ReferenceSource = UE::LLMPrivate::ETagReferenceSource::FunctionAPI)"
  },
  {
    "label": "FindOrAddTagData()",
    "kind": "Method",
    "detail": "Function (const UE::LLMPrivate::FTagData*)",
    "insertText": "FindOrAddTagData(FName Name, ELLMTagSet TagSet, bool bIsStatData=false, UE::LLMPrivate::ETagReferenceSource ReferenceSource = UE::LLMPrivate::ETagReferenceSource::FunctionAPI)"
  },
  {
    "label": "FindOrAddTagData()",
    "kind": "Method",
    "detail": "Function (const UE::LLMPrivate::FTagData*)",
    "insertText": "FindOrAddTagData(FName Name, ELLMTagSet TagSet, FName StatName, UE::LLMPrivate::ETagReferenceSource ReferenceSource = UE::LLMPrivate::ETagReferenceSource::FunctionAPI)"
  },
  {
    "label": "FindTagData()",
    "kind": "Method",
    "detail": "Function (const UE::LLMPrivate::FTagData*)",
    "insertText": "FindTagData(ELLMTag EnumTag, UE::LLMPrivate::ETagReferenceSource ReferenceSource = UE::LLMPrivate::ETagReferenceSource::FunctionAPI)"
  },
  {
    "label": "FindTagData()",
    "kind": "Method",
    "detail": "Function (const UE::LLMPrivate::FTagData*)",
    "insertText": "FindTagData(FName Name, ELLMTagSet TagSet, UE::LLMPrivate::ETagReferenceSource ReferenceSource = UE::LLMPrivate::ETagReferenceSource::FunctionAPI)"
  },
  {
    "label": "TryEnterEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryEnterEnabled(FEnableStateScopeLock& ScopeLock)"
  },
  {
    "label": "GlobalRegisterTagDeclaration()",
    "kind": "Method",
    "detail": "Function (class FLLMPauseScope ; class FLLMScope ; class FLLMScopeDynamic ; class FLLMScopeFromPtr ; class UE::LLMPrivate::FLLMCsvWriter ; class UE::LLMPrivate::FLLMTracker ; class UE::LLMPrivate::FLLMThreadState ; class UE::LLMPrivate::FLLMTraceWriter ; class UE::LLMPrivate::FLLMCsvProfilerWriter ; void)",
    "insertText": "GlobalRegisterTagDeclaration(FLLMTagDeclaration& TagDeclaration)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (private : UE::LLMPrivate::FLLMAllocator Allocator ; UE::LLMPrivate::FTagDataArray* TagDatas ; UE::LLMPrivate::FTagDataNameMap* TagDataNameMap ; UE::LLMPrivate::FTagData** TagDataEnumMap ; UE::LLMPrivate::FLLMTracker* Trackers [ static_cast<)",
    "insertText": "int32(ELLMTracker::Max)"
  },
  {
    "label": "ActiveSets()",
    "kind": "Method",
    "detail": "Function (FRWLock TagDataLock ; FCriticalSection UpdateLock ; uint64 ProgramSize ; int64 MemoryUsageCurrentOverhead ; int64 MemoryUsagePlatformTotalUntracked ; bool)",
    "insertText": "ActiveSets(int32)"
  },
  {
    "label": "FLLMScope()",
    "kind": "Method",
    "detail": "Function (} ; class FLLMScope { public :)",
    "insertText": "FLLMScope(FName TagName, bool bIsStatTag, ELLMTagSet InTagSet, ELLMTracker InTracker, bool bOverride = true)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_OPEN {)",
    "insertText": "Init(TagName, bIsStatTag, InTagSet, InTracker, bOverride)"
  },
  {
    "label": "PushOnAbortHandler()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "PushOnAbortHandler(this, [this] { if (bEnabled) { Destruct(); } })"
  },
  {
    "label": "FLLMScope()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FLLMScope(ELLMTag TagEnum, bool bIsStatTag, ELLMTagSet InTagSet, ELLMTracker InTracker, bool bOverride = true)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_OPEN {)",
    "insertText": "Init(TagEnum, bIsStatTag, InTagSet, InTracker, bOverride)"
  },
  {
    "label": "FLLMScope()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FLLMScope(const UE::LLMPrivate::FTagData* TagData, bool bIsStatTag, ELLMTagSet Set, ELLMTracker Tracker, bool bOverride = true)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_OPEN {)",
    "insertText": "Init(TagData, bIsStatTag, Set, Tracker, bOverride)"
  },
  {
    "label": "FLLMScope()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FLLMScope()"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_OPEN {)",
    "insertText": "Destruct()"
  },
  {
    "label": "PopOnAbortHandler()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "PopOnAbortHandler(this)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } protected : void)",
    "insertText": "Init(FName TagName, bool bIsStatTag, ELLMTagSet InTagSet, ELLMTracker InTracker, bool bOverride = true)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(ELLMTag TagEnum, bool bIsStatTag, ELLMTagSet InTagSet, ELLMTracker InTracker, bool bOverride = true)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const UE::LLMPrivate::FTagData* TagData, bool bIsStatTag, ELLMTagSet InTagSet, ELLMTracker InTracker, bool bOverride = true)"
  },
  {
    "label": "ILLMDynamicTagConstructor()",
    "kind": "Method",
    "detail": "Function (ELLMTracker Tracker ; bool bEnabled = false ; ELLMTagSet TagSet ; } ; class ILLMDynamicTagConstructor { public : ~)",
    "insertText": "ILLMDynamicTagConstructor()"
  },
  {
    "label": "GetStatName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStatName()"
  },
  {
    "label": "NeedsStatConstruction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsStatConstruction()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(InTracker, InTagSet)"
  },
  {
    "label": "TryAddTagAndActivate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAddTagAndActivate(FName UniqueName, const ILLMDynamicTagConstructor& Constructor)"
  },
  {
    "label": "FLLMScopeDynamic()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLLMScopeDynamic()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } protected : void)",
    "insertText": "Init(ELLMTracker InTracker, ELLMTagSet InTagSet)"
  },
  {
    "label": "FLLMPauseScope()",
    "kind": "Method",
    "detail": "Function (const UE::LLMPrivate::FTagData* TagData ; ELLMTracker Tracker ; bool bEnabled = false ; ELLMTagSet TagSet ; } ; class FLLMPauseScope { public :)",
    "insertText": "FLLMPauseScope(FName TagName, bool bIsStatTag, uint64 Amount, ELLMTracker TrackerToPause, ELLMAllocType InAllocType)"
  },
  {
    "label": "FLLMPauseScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLLMPauseScope(ELLMTag TagEnum, bool bIsStatTag, uint64 Amount, ELLMTracker TrackerToPause, ELLMAllocType InAllocType)"
  },
  {
    "label": "FLLMPauseScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLLMPauseScope()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Init(FName TagName, ELLMTag EnumTag, bool bIsEnumTag, bool bIsStatTag, uint64 Amount, ELLMTracker TrackerToPause, ELLMAllocType InAllocType)"
  },
  {
    "label": "FLLMClearScope()",
    "kind": "Method",
    "detail": "Function (ELLMTracker PausedTracker ; ELLMAllocType AllocType ; bool bEnabled ; } ; class FLLMClearScope : public FLLMScope { public :)",
    "insertText": "FLLMClearScope(ELLMTagSet InTagSet, ELLMTracker InTracker)"
  },
  {
    "label": "FLLMScopeFromPtr()",
    "kind": "Method",
    "detail": "Function (} ; class FLLMScopeFromPtr { public :)",
    "insertText": "FLLMScopeFromPtr(void* Ptr, ELLMTracker Tracker)"
  },
  {
    "label": "FLLMScopeFromPtr()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLLMScopeFromPtr()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (protected : ELLMTracker Tracker ; bool bEnabled [ static_cast<)",
    "insertText": "int32(ELLMTagSet::Max)"
  },
  {
    "label": "DisableAll()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DisableAll()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(bEnabled)"
  },
  {
    "label": "FLLMTagDeclaration()",
    "kind": "Method",
    "detail": "Function (} } ; class FLLMTagDeclaration { public :)",
    "insertText": "FLLMTagDeclaration(const TCHAR* InCPPName, const FName InDisplayName=NAME_None, FName InParentTagName = NAME_None, FName InStatName = NAME_None, FName InSummaryStatName = NAME_None, ELLMTagSet TagSet = ELLMTagSet::None)"
  },
  {
    "label": "GetUniqueName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetUniqueName()"
  },
  {
    "label": "AddCreationCallback()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddCreationCallback(FCreationCallback InCallback)"
  },
  {
    "label": "ClearCreationCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCreationCallbacks()"
  },
  {
    "label": "GetCreationCallbacks()",
    "kind": "Method",
    "detail": "Function (TArrayView<FCreationCallback>)",
    "insertText": "GetCreationCallbacks()"
  },
  {
    "label": "GetList()",
    "kind": "Method",
    "detail": "Function (FLLMTagDeclaration*)",
    "insertText": "GetList()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register()"
  },
  {
    "label": "ConstructUniqueName()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ConstructUniqueName()"
  }
]