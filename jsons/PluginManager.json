[
  {
    "label": "FProjectDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectDescriptor"
  },
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FPlugin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlugin"
  },
  {
    "label": "FPluginManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPluginManager"
  },
  {
    "label": "FConfigurePluginResultInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConfigurePluginResultInfo"
  },
  {
    "label": "NameString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "NameString(Name)"
  },
  {
    "label": "NameString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "NameString(Name)"
  },
  {
    "label": "NameString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "NameString(Name)"
  },
  {
    "label": "UnmountExplicitlyLoadedPlugin()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "UnmountExplicitlyLoadedPlugin(PluginName, OutReason, true)"
  },
  {
    "label": "DiscoverAllPlugins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscoverAllPlugins()"
  },
  {
    "label": "ReadAllPlugins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadAllPlugins(FDiscoveredPluginMap& Plugins, const TSet<FString>& ExtraSearchPaths,\n\t\tTArray<FString>* OutPluginSources=nullptr)"
  },
  {
    "label": "ReadPluginsInDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadPluginsInDirectory(const FString& PluginsDirectory, const EPluginType Type, FDiscoveredPluginMap& Plugins, TArray<TSharedRef<FPlugin>>& ChildPlugins)"
  },
  {
    "label": "CreatePluginObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePluginObject(const FString& FileName, const FPluginDescriptor& Descriptor, const EPluginType Type, FDiscoveredPluginMap& Plugins, TArray<TSharedRef<FPlugin>>& ChildPlugins)"
  },
  {
    "label": "FindPluginsInDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPluginsInDirectory(const FString& PluginsDirectory, TArray<FString>& FileNames, IPlatformFile& PlatformFile)"
  },
  {
    "label": "FindPluginManifestsInDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPluginManifestsInDirectory(const FString& PluginManifestDirectory, TArray<FString>& FileNames)"
  },
  {
    "label": "GetCodePluginsForProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCodePluginsForProject(const FProjectDescriptor* ProjectDescriptor, const FString& Platform, EBuildConfiguration Configuration, EBuildTargetType TargetType, FDiscoveredPluginMap& AllPlugins, TSet<FString>& CodePluginNames, const TSet<FString>& AllowedOptionalPluginReferences, FConfigurePluginResultInfo& OutResultInfo)"
  },
  {
    "label": "ConfigureEnabledPlugins()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigureEnabledPlugins()"
  },
  {
    "label": "ConfigureEnabledPluginForCurrentTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigureEnabledPluginForCurrentTarget(const FPluginReferenceDescriptor& FirstReference,\n\t\tTMap<FString, FPlugin*>& EnabledPlugins, FStringView SourceOfPluginRequest, const TSet<FString>& AllowedOptionalDependencies)"
  },
  {
    "label": "ConfigureEnabledPluginForTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigureEnabledPluginForTarget(const FPluginReferenceDescriptor& FirstReference, const FProjectDescriptor* ProjectDescriptor, const FString& TargetName, const FString& Platform, EBuildConfiguration Configuration, EBuildTargetType TargetType, bool bLoadPluginsForTargetPlatforms, FDiscoveredPluginMap& AllPlugins, TMap<FString, FPlugin*>& EnabledPlugins, const TSet<FString>& AllowedOptionalDependencies, FConfigurePluginResultInfo& OutResultInfo)"
  },
  {
    "label": "PromptToDownloadPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToDownloadPlugin(const FString& PluginName, const FString& MarketplaceURL)"
  },
  {
    "label": "PromptToDisableSealedPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToDisableSealedPlugin(const FString& PluginName, const FString& SealedPluginName)"
  },
  {
    "label": "PromptToDisableDisalowedPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToDisableDisalowedPlugin(const FString& PluginName, const FString& DisallowedPluginName)"
  },
  {
    "label": "PromptToDisableMissingPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToDisableMissingPlugin(const FString& PluginName, const FString& MissingPluginName)"
  },
  {
    "label": "PromptToDisableIncompatiblePlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToDisableIncompatiblePlugin(const FString& PluginName, const FString& IncompatiblePluginName)"
  },
  {
    "label": "PromptToDisablePlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToDisablePlugin(const FText& Caption, const FText& Message, const FString& PluginName)"
  },
  {
    "label": "IsPluginCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPluginCompatible(const FPlugin& Plugin)"
  },
  {
    "label": "PromptToLoadIncompatiblePlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToLoadIncompatiblePlugin(const FPlugin& Plugin)"
  },
  {
    "label": "FindPluginInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPlugin>)",
    "insertText": "FindPluginInstance(const FString& Name)"
  },
  {
    "label": "TryMountExplicitlyLoadedPluginVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryMountExplicitlyLoadedPluginVersion(TSharedRef<FPlugin>* AllPlugins_PluginPtr)"
  },
  {
    "label": "MountPluginFromExternalSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MountPluginFromExternalSource(const TSharedRef<FPlugin>& Plugin)"
  },
  {
    "label": "AddToModuleNameToPluginMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToModuleNameToPluginMap(const TSharedRef<FPlugin>& Plugin)"
  },
  {
    "label": "RemoveFromModuleNameToPluginMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromModuleNameToPluginMap(const TSharedRef<FPlugin>& Plugin)"
  }
]