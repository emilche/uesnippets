[
  {
    "label": "FProjectDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectDescriptor"
  },
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FPlugin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlugin"
  },
  {
    "label": "FPluginManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPluginManager"
  },
  {
    "label": "FConfigurePluginResultInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConfigurePluginResultInfo"
  },
  {
    "label": "FPlugin()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PluginDescriptor . h \" # include \" Interfaces / IPluginManager . h \" struct FProjectDescriptor ; class FJsonObject ; class FPlugin final : public IPlugin { public : FString Name ; FString FileName ; TArray<FString> PluginExtensionFileNameList ; FPluginDescriptor Descriptor ; EPluginType Type ; bool bEnabled : 1 ; bool bIsMounted : 1 ; uint8 ExplicitlyLoadedLocalizationDataMountedRefCount = 0 ;)",
    "insertText": "FPlugin(const FString &FileName, const FPluginDescriptor& InDescriptor, EPluginType InType)"
  },
  {
    "label": "FPlugin()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPlugin()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetDescriptorFileName()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetDescriptorFileName()"
  },
  {
    "label": "GetExtensionBaseDirs()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetExtensionBaseDirs()"
  },
  {
    "label": "GetContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetContentDir()"
  },
  {
    "label": "GetMountedAssetPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMountedAssetPath()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHidden()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Descriptor . VersePath =)",
    "insertText": "MoveTemp(InVersePath)"
  },
  {
    "label": "GetVerseVersion()",
    "kind": "Method",
    "detail": "Function (} TOptional<uint32>)",
    "insertText": "GetVerseVersion()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Descriptor . VerseVersion = InVerseVersion ; } EPluginType)",
    "insertText": "GetType()"
  },
  {
    "label": "GetDescriptor()",
    "kind": "Method",
    "detail": "Function (const FPluginDescriptor&)",
    "insertText": "GetDescriptor()"
  },
  {
    "label": "UpdateDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateDescriptor(const FPluginDescriptor& NewDescriptor, FText& OutFailReason)"
  },
  {
    "label": "GetDescriptorJson()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const TSharedPtr<FJsonObject>&)",
    "insertText": "GetDescriptorJson()"
  },
  {
    "label": "IsMounted()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsMounted()"
  },
  {
    "label": "FPluginManager()",
    "kind": "Method",
    "detail": "Function (bIsMounted = bInIsMounted ; } } ; class FPluginManager final : public IPluginManager { public :)",
    "insertText": "FPluginManager()"
  },
  {
    "label": "RefreshPluginsList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPluginsList()"
  },
  {
    "label": "AddToPluginsList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddToPluginsList(const FString& PluginFilename, FText* OutFailReason = nullptr)"
  },
  {
    "label": "RemoveFromPluginsList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFromPluginsList(const FString& PluginFilename, FText* OutFailReason = nullptr)"
  },
  {
    "label": "LoadModulesForEnabledPlugins()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadModulesForEnabledPlugins(const ELoadingPhase::Type LoadingPhase)"
  },
  {
    "label": "OnLoadingPhaseComplete()",
    "kind": "Method",
    "detail": "Function (FLoadingModulesForPhaseEvent&)",
    "insertText": "OnLoadingPhaseComplete()"
  },
  {
    "label": "GetLastCompletedLoadingPhase()",
    "kind": "Method",
    "detail": "Function (ELoadingPhase::Type)",
    "insertText": "GetLastCompletedLoadingPhase()"
  },
  {
    "label": "GetLocalizationPathsForEnabledPlugins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLocalizationPathsForEnabledPlugins(TArray<FString>& OutLocResPaths)"
  },
  {
    "label": "SetRegisterMountPointDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRegisterMountPointDelegate(const FRegisterMountPointDelegate& Delegate)"
  },
  {
    "label": "SetUnRegisterMountPointDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUnRegisterMountPointDelegate(const FRegisterMountPointDelegate& Delegate)"
  },
  {
    "label": "AreRequiredPluginsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreRequiredPluginsAvailable()"
  },
  {
    "label": "GetExplanationForUnavailablePackageWithPluginInfoDelegate()",
    "kind": "Method",
    "detail": "Function (FGetExplanationForUnavailablePackageWithPluginInfoDelegate&)",
    "insertText": "GetExplanationForUnavailablePackageWithPluginInfoDelegate()"
  },
  {
    "label": "SuppressPluginUnloadGC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuppressPluginUnloadGC()"
  },
  {
    "label": "ResumePluginUnloadGC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumePluginUnloadGC()"
  },
  {
    "label": "CheckModuleCompatibility()",
    "kind": "Method",
    "detail": "Function (# if ! IS_MONOLITHIC bool)",
    "insertText": "CheckModuleCompatibility(TArray<FString>& OutIncompatibleModules, TArray<FString>& OutIncompatibleEngineModules)"
  },
  {
    "label": "FindPlugin()",
    "kind": "Method",
    "detail": "Function (# endif TSharedPtr<IPlugin>)",
    "insertText": "FindPlugin(const FStringView Name)"
  },
  {
    "label": "FindPlugin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "FindPlugin(const ANSICHAR* Name)"
  },
  {
    "label": "NameString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "NameString(Name)"
  },
  {
    "label": "FindPluginFromPath()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IPlugin>)",
    "insertText": "FindPluginFromPath(const FString& PluginPath)"
  },
  {
    "label": "FindPluginFromDescriptor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "FindPluginFromDescriptor(const FPluginReferenceDescriptor& PluginDesc)"
  },
  {
    "label": "FindEnabledPlugin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "FindEnabledPlugin(const FStringView Name)"
  },
  {
    "label": "FindEnabledPlugin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "FindEnabledPlugin(const ANSICHAR* Name)"
  },
  {
    "label": "FindEnabledPluginFromPath()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IPlugin>)",
    "insertText": "FindEnabledPluginFromPath(const FString& PluginPath)"
  },
  {
    "label": "FindEnabledPluginFromDescriptor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "FindEnabledPluginFromDescriptor(const FPluginReferenceDescriptor& PluginDesc)"
  },
  {
    "label": "CanEnablePluginInCurrentTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEnablePluginInCurrentTarget(const FStringView Name)"
  },
  {
    "label": "CanEnablePluginInCurrentTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEnablePluginInCurrentTarget(const ANSICHAR* Name)"
  },
  {
    "label": "FindPluginsUnderDirectory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindPluginsUnderDirectory(const FString& Directory, TArray<FString>& OutPluginFilePaths)"
  },
  {
    "label": "GetEnabledPlugins()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IPlugin>>)",
    "insertText": "GetEnabledPlugins()"
  },
  {
    "label": "GetEnabledPluginsWithContent()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IPlugin>>)",
    "insertText": "GetEnabledPluginsWithContent()"
  },
  {
    "label": "GetEnabledPluginsWithVerse()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IPlugin>>)",
    "insertText": "GetEnabledPluginsWithVerse()"
  },
  {
    "label": "GetEnabledPluginsWithContentOrVerse()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IPlugin>>)",
    "insertText": "GetEnabledPluginsWithContentOrVerse()"
  },
  {
    "label": "GetDiscoveredPlugins()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IPlugin>>)",
    "insertText": "GetDiscoveredPlugins()"
  },
  {
    "label": "GetBuiltInPluginNames()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const TSet<FString>&)",
    "insertText": "GetBuiltInPluginNames()"
  },
  {
    "label": "GetModuleOwnerPlugin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "GetModuleOwnerPlugin(FName ModuleName)"
  },
  {
    "label": "AddPluginSearchPath()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "AddPluginSearchPath(const FString& ExtraDiscoveryPath, bool bRefresh = true)"
  },
  {
    "label": "RemovePluginSearchPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePluginSearchPath(const FString& PathToRemove, bool bRefresh = true)"
  },
  {
    "label": "GetAdditionalPluginSearchPaths()",
    "kind": "Method",
    "detail": "Function (const TSet<FString>&)",
    "insertText": "GetAdditionalPluginSearchPaths()"
  },
  {
    "label": "GetExternalPluginSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExternalPluginSources(TSet<FExternalPluginPath>& OutPluginSources)"
  },
  {
    "label": "GetPluginsWithPakFile()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IPlugin>>)",
    "insertText": "GetPluginsWithPakFile()"
  },
  {
    "label": "OnNewPluginCreated()",
    "kind": "Method",
    "detail": "Function (FNewPluginMountedEvent&)",
    "insertText": "OnNewPluginCreated()"
  },
  {
    "label": "OnNewPluginMounted()",
    "kind": "Method",
    "detail": "Function (FNewPluginMountedEvent&)",
    "insertText": "OnNewPluginMounted()"
  },
  {
    "label": "OnNewPluginContentMounted()",
    "kind": "Method",
    "detail": "Function (FNewPluginMountedEvent&)",
    "insertText": "OnNewPluginContentMounted()"
  },
  {
    "label": "OnPluginEdited()",
    "kind": "Method",
    "detail": "Function (FNewPluginMountedEvent&)",
    "insertText": "OnPluginEdited()"
  },
  {
    "label": "OnPluginUnmounted()",
    "kind": "Method",
    "detail": "Function (FNewPluginMountedEvent&)",
    "insertText": "OnPluginUnmounted()"
  },
  {
    "label": "MountNewlyCreatedPlugin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MountNewlyCreatedPlugin(const FString& PluginName)"
  },
  {
    "label": "MountExplicitlyLoadedPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MountExplicitlyLoadedPlugin(const FString& PluginName)"
  },
  {
    "label": "MountExplicitlyLoadedPlugin_FromFileName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MountExplicitlyLoadedPlugin_FromFileName(const FString& PluginFileName)"
  },
  {
    "label": "MountExplicitlyLoadedPlugin_FromDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MountExplicitlyLoadedPlugin_FromDescriptor(const FPluginReferenceDescriptor& PluginDescriptor)"
  },
  {
    "label": "MountExplicitlyLoadedPluginLocalizationData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MountExplicitlyLoadedPluginLocalizationData(const FString& PluginName)"
  },
  {
    "label": "UnmountExplicitlyLoadedPluginLocalizationData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnmountExplicitlyLoadedPluginLocalizationData(const FString& PluginName)"
  },
  {
    "label": "UnmountExplicitlyLoadedPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnmountExplicitlyLoadedPlugin(const FString& PluginName, FText* OutReason)"
  },
  {
    "label": "UnmountExplicitlyLoadedPlugin()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UnmountExplicitlyLoadedPlugin(const FString& PluginName, FText* OutReason, bool bAllowUnloadCode)"
  },
  {
    "label": "GetPluginDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPluginDependencies(const FString& PluginName, TArray<FPluginReferenceDescriptor>& PluginDependencies)"
  },
  {
    "label": "GetPluginDependencies_FromFileName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPluginDependencies_FromFileName(const FString& PluginFileName, TArray<FPluginReferenceDescriptor>& PluginDependencies)"
  },
  {
    "label": "GetPluginDependencies_FromDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPluginDependencies_FromDescriptor(const FPluginReferenceDescriptor& PluginDescriptor, TArray<FPluginReferenceDescriptor>& PluginDependencies)"
  },
  {
    "label": "PackageNameFromModuleName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "PackageNameFromModuleName(FName ModuleName)"
  },
  {
    "label": "TrySplitVersePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySplitVersePath(const UE::Core::FVersePath& VersePath, FName& OutPackageName, FString& OutLeafPath)"
  },
  {
    "label": "RequiresTempTargetForCodePlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresTempTargetForCodePlugin(const FProjectDescriptor* ProjectDescriptor, const FString& Platform, EBuildConfiguration Configuration, EBuildTargetType TargetType, FText& OutReason)"
  },
  {
    "label": "IntegratePluginsIntoConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntegratePluginsIntoConfig(FConfigCacheIni& ConfigSystem, const TCHAR* EngineIniName, const TCHAR* PlatformName, const TCHAR* StagedPluginsFile)"
  },
  {
    "label": "SetBinariesRootDirectories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBinariesRootDirectories(const FString& EngineBinariesRootDir, const FString& ProjectBinariesRootDir)"
  },
  {
    "label": "SetPreloadBinaries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreloadBinaries()"
  },
  {
    "label": "GetPreloadBinaries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPreloadBinaries()"
  },
  {
    "label": "GetExplanationForUnavailablePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExplanationForUnavailablePackage(const FName& UnavailablePackageName, FStringBuilderBase& InOutExplanation)"
  },
  {
    "label": "DiscoverAllPlugins()",
    "kind": "Method",
    "detail": "Function (private : using FDiscoveredPluginMap = TMap<FString,TArray<TSharedRef<FPlugin>>> ; struct FConfigurePluginResultInfo ; void)",
    "insertText": "DiscoverAllPlugins()"
  },
  {
    "label": "ReadAllPlugins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadAllPlugins(FDiscoveredPluginMap& Plugins, const TSet<FString>& ExtraSearchPaths, TArray<FString>* OutPluginSources=nullptr)"
  },
  {
    "label": "ReadPluginsInDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadPluginsInDirectory(const FString& PluginsDirectory, const EPluginType Type, FDiscoveredPluginMap& Plugins, TArray<TSharedRef<FPlugin>>& ChildPlugins)"
  },
  {
    "label": "CreatePluginObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePluginObject(const FString& FileName, const FPluginDescriptor& Descriptor, const EPluginType Type, FDiscoveredPluginMap& Plugins, TArray<TSharedRef<FPlugin>>& ChildPlugins)"
  },
  {
    "label": "FindPluginsInDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPluginsInDirectory(const FString& PluginsDirectory, TArray<FString>& FileNames, IPlatformFile& PlatformFile)"
  },
  {
    "label": "FindPluginManifestsInDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPluginManifestsInDirectory(const FString& PluginManifestDirectory, TArray<FString>& FileNames)"
  },
  {
    "label": "GetCodePluginsForProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCodePluginsForProject(const FProjectDescriptor* ProjectDescriptor, const FString& Platform, EBuildConfiguration Configuration, EBuildTargetType TargetType, FDiscoveredPluginMap& AllPlugins, TSet<FString>& CodePluginNames, const TSet<FString>& AllowedOptionalPluginReferences, FConfigurePluginResultInfo& OutResultInfo)"
  },
  {
    "label": "ConfigureEnabledPlugins()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigureEnabledPlugins()"
  },
  {
    "label": "ConfigureEnabledPluginForCurrentTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigureEnabledPluginForCurrentTarget(const FPluginReferenceDescriptor& FirstReference, TMap<FString, FPlugin*>& EnabledPlugins, FStringView SourceOfPluginRequest, const TSet<FString>& AllowedOptionalDependencies)"
  },
  {
    "label": "ConfigureEnabledPluginForTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigureEnabledPluginForTarget(const FPluginReferenceDescriptor& FirstReference, const FProjectDescriptor* ProjectDescriptor, const FString& TargetName, const FString& Platform, EBuildConfiguration Configuration, EBuildTargetType TargetType, bool bLoadPluginsForTargetPlatforms, FDiscoveredPluginMap& AllPlugins, TMap<FString, FPlugin*>& EnabledPlugins, const TSet<FString>& AllowedOptionalDependencies, FConfigurePluginResultInfo& OutResultInfo)"
  },
  {
    "label": "PromptToDownloadPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToDownloadPlugin(const FString& PluginName, const FString& MarketplaceURL)"
  },
  {
    "label": "PromptToDisableSealedPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToDisableSealedPlugin(const FString& PluginName, const FString& SealedPluginName)"
  },
  {
    "label": "PromptToDisableDisalowedPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToDisableDisalowedPlugin(const FString& PluginName, const FString& DisallowedPluginName)"
  },
  {
    "label": "PromptToDisableMissingPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToDisableMissingPlugin(const FString& PluginName, const FString& MissingPluginName)"
  },
  {
    "label": "PromptToDisableIncompatiblePlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToDisableIncompatiblePlugin(const FString& PluginName, const FString& IncompatiblePluginName)"
  },
  {
    "label": "PromptToDisablePlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToDisablePlugin(const FText& Caption, const FText& Message, const FString& PluginName)"
  },
  {
    "label": "IsPluginCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPluginCompatible(const FPlugin& Plugin)"
  },
  {
    "label": "PromptToLoadIncompatiblePlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToLoadIncompatiblePlugin(const FPlugin& Plugin)"
  },
  {
    "label": "TryLoadModulesForPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoadModulesForPlugin(const FPlugin& Plugin, const ELoadingPhase::Type LoadingPhase)"
  },
  {
    "label": "TryUnloadModulesForPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryUnloadModulesForPlugin(const FPlugin& Plugin, const ELoadingPhase::Type LoadingPhase, FText* OutFailureMessage = nullptr, bool bSkipUnload = false, bool bAllowUnloadCode = true)"
  },
  {
    "label": "FindPluginInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPlugin>)",
    "insertText": "FindPluginInstance(const FString& Name)"
  },
  {
    "label": "TryMountExplicitlyLoadedPluginVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryMountExplicitlyLoadedPluginVersion(TSharedRef<FPlugin>* AllPlugins_PluginPtr)"
  },
  {
    "label": "MountPluginFromExternalSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MountPluginFromExternalSource(const TSharedRef<FPlugin>& Plugin)"
  },
  {
    "label": "AddToModuleNameToPluginMap()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "AddToModuleNameToPluginMap(const TSharedRef<FPlugin>& Plugin)"
  },
  {
    "label": "RemoveFromModuleNameToPluginMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromModuleNameToPluginMap(const TSharedRef<FPlugin>& Plugin)"
  }
]