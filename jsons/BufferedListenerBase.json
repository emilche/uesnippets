[
  {
    "label": "FLockingCircularSampleBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLockingCircularSampleBuffer"
  },
  {
    "label": "FBufferedListenerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBufferedListenerBase"
  },
  {
    "label": "FLockingCircularSampleBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioDevice . h \" # include \" DSP / Dsp . h \" # include \" IBufferedAudioOutput . h \" # include \" Misc / Optional . h \" # include \" Math / UnrealMathUtility . h \" class FLockingCircularSampleBuffer { public :)",
    "insertText": "FLockingCircularSampleBuffer(int32 InInitialCapacity)"
  },
  {
    "label": "SetCapacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCapacity(InInitialCapacity)"
  },
  {
    "label": "GetCriticialSection()",
    "kind": "Method",
    "detail": "Function (} FCriticalSection&)",
    "insertText": "GetCriticialSection()"
  },
  {
    "label": "RoundUpToPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (InCapacity =)",
    "insertText": "RoundUpToPowerOfTwo(InCapacity)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} FScopeLock)",
    "insertText": "Lock(&CS)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "SetNumZeroed(InCapacity, EAllowShrinking::Yes)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Mask = InCapacity - 1 ; Read = 0 ; Write = 0 ;)",
    "insertText": "check(Mask != 0)"
  },
  {
    "label": "GetCapacity()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCapacity()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Push(const float* InBuffer, int32 InSize)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (int32 CanPush =)",
    "insertText": "Min(Remainder(), InSize)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enqueue(InBuffer[i])"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} return CanPush ; } int32)",
    "insertText": "Pop(float* OutBuffer, int32 InNumSamples)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (int32 CanPop =)",
    "insertText": "Min(Num(),InNumSamples)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (OutBuffer [ i ] =)",
    "insertText": "Dequeue()"
  },
  {
    "label": "PushZeros()",
    "kind": "Method",
    "detail": "Function (} return CanPop ; } int32)",
    "insertText": "PushZeros(int32 InNumSamplesOfSilence)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (int32 CanPush =)",
    "insertText": "Min(GetCapacity(), InNumSamplesOfSilence)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enqueue(0.f)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} return CanPush ; } private : uint32 Read = 0 ; uint32 Write = 0 ; uint32 Mask = 0 ; TArray<float> Buffer ; FCriticalSection CS ; void)",
    "insertText": "Enqueue(const float InFloat)"
  },
  {
    "label": "FBufferedListenerBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FBufferedListenerBase()"
  },
  {
    "label": "PopBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopBuffer(float* InBuffer, int32 InBufferSizeInSamples, int32& OutSamplesWritten)"
  },
  {
    "label": "GetFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFormat(IBufferedAudioOutput::FBufferFormat& OutFormat)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(int32 InNumSamplesToReserve, int32 InNumSamplesOfSilence)"
  },
  {
    "label": "SetFormatKnownDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFormatKnownDelegate(FOnFormatKnown InFormatKnownDelegate)"
  },
  {
    "label": "SetBufferStreamEndDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferStreamEndDelegate(FOnBufferStreamEnd)"
  },
  {
    "label": "OnBufferReceived()",
    "kind": "Method",
    "detail": "Function (} / void)",
    "insertText": "OnBufferReceived(const FBufferFormat& InFormat, TArrayView<const float> InBuffer)"
  },
  {
    "label": "ResetFormat()",
    "kind": "Method",
    "detail": "Function (/ void)",
    "insertText": "ResetFormat()"
  },
  {
    "label": "SetFormat()",
    "kind": "Method",
    "detail": "Function (/ void)",
    "insertText": "SetFormat(const FBufferFormat& InFormat)"
  },
  {
    "label": "IsStartedNonAtomic()",
    "kind": "Method",
    "detail": "Function (/ bool)",
    "insertText": "IsStartedNonAtomic()"
  },
  {
    "label": "TrySetStartedFlag()",
    "kind": "Method",
    "detail": "Function (/ bool)",
    "insertText": "TrySetStartedFlag()"
  },
  {
    "label": "TryUnsetStartedFlag()",
    "kind": "Method",
    "detail": "Function (/ bool)",
    "insertText": "TryUnsetStartedFlag()"
  },
  {
    "label": "TrySetStoppingFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySetStoppingFlag()"
  },
  {
    "label": "PushSilence()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PushSilence(int32 InNumSamplesOfSilence)"
  }
]