[
  {
    "label": "FakeBindState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FakeBindState"
  },
  {
    "label": "BindStateBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BindStateBase"
  },
  {
    "label": "FinallyExecutorCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FinallyExecutorCommon"
  },
  {
    "label": "ThenAndCatchExecutorCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThenAndCatchExecutorCommon"
  },
  {
    "label": "PostTaskExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PostTaskExecutor"
  },
  {
    "label": "BindState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BindState"
  },
  {
    "label": "CallbackBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbackBase"
  },
  {
    "label": "CallbackBaseCopyable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbackBaseCopyable"
  },
  {
    "label": "BindStateBaseRefCountTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BindStateBaseRefCountTraits"
  },
  {
    "label": "CancellationQueryMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CancellationQueryMode"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "ThenHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThenHelper"
  },
  {
    "label": "OriginalCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OriginalCallback"
  },
  {
    "label": "ThenCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThenCallback"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_INTERNAL_CEF_CALLBACK_INTERNAL_H_ # define CEF_INCLUDE_BASE_INTERNAL_CEF_CALLBACK_INTERNAL_H_ # include \" include / base / cef_callback_forward . h \" # include \" include / base / cef_ref_counted . h \" namespace base { struct FakeBindState ; namespace internal { class BindStateBase ; class FinallyExecutorCommon ; class ThenAndCatchExecutorCommon ; template<ReturnType> class PostTaskExecutor ; template<Functor,. . . BoundArgs> struct BindState ; class CallbackBase ; class CallbackBaseCopyable ; struct BindStateBaseRefCountTraits { void)",
    "insertText": "Destruct(const BindStateBase*)"
  },
  {
    "label": "REQUIRE_ADOPTION_FOR_REFCOUNTED_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; template<T> using PassingType = std::conditional_t<std::is_scalar<T>::value,T,T&&> ; class BindStateBase : public RefCountedThreadSafe<BindStateBase,BindStateBaseRefCountTraits> { public :)",
    "insertText": "REQUIRE_ADOPTION_FOR_REFCOUNTED_TYPE()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (enum CancellationQueryMode { IS_CANCELLED,MAYBE_VALID,} ; using InvokeFuncStorage =)",
    "insertText": "void(*)()"
  },
  {
    "label": "BindStateBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindStateBase(const BindStateBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BindStateBase&)",
    "insertText": "operator(const BindStateBase&)"
  },
  {
    "label": "BindStateBase()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "BindStateBase(InvokeFuncStorage polymorphic_invoke, void (*destructor)(const BindStateBase*))"
  },
  {
    "label": "BindStateBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindStateBase(InvokeFuncStorage polymorphic_invoke, void (*destructor)(const BindStateBase*), bool (*query_cancellation_traits)(const BindStateBase*, CancellationQueryMode mode))"
  },
  {
    "label": "BindStateBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BindStateBase()"
  },
  {
    "label": "IsCancelled()",
    "kind": "Method",
    "detail": "Function (struct BindStateBaseRefCountTraits ; class RefCountedThreadSafe<BindStateBase,BindStateBaseRefCountTraits> ; class CallbackBase ; class CallbackBaseCopyable ; template<Functor,. . . BoundArgs> struct BindState ; struct::base::FakeBindState ; bool)",
    "insertText": "IsCancelled()"
  },
  {
    "label": "MaybeValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MaybeValid()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} InvokeFuncStorage polymorphic_invoke_ ;)",
    "insertText": "void(*destructor_)(const BindStateBase*)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bool(*query_cancellation_traits_)(const BindStateBase*, CancellationQueryMode mode)"
  },
  {
    "label": "CallbackBase()",
    "kind": "Method",
    "detail": "Function (} ; class CallbackBase { public :)",
    "insertText": "CallbackBase(CallbackBase&& c)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallbackBase&)",
    "insertText": "operator(CallbackBase&& c)"
  },
  {
    "label": "CallbackBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackBase(const CallbackBaseCopyable& c)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallbackBase&)",
    "insertText": "operator(const CallbackBaseCopyable& c)"
  },
  {
    "label": "CallbackBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackBase(CallbackBaseCopyable&& c)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallbackBase&)",
    "insertText": "operator(CallbackBaseCopyable&& c)"
  },
  {
    "label": "is_null()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_null()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "EqualsInternal()",
    "kind": "Method",
    "detail": "Function (protected : class FinallyExecutorCommon ; class ThenAndCatchExecutorCommon ; template<ReturnType> class PostTaskExecutor ; using InvokeFuncStorage = BindStateBase::InvokeFuncStorage ; bool)",
    "insertText": "EqualsInternal(const CallbackBase& other)"
  },
  {
    "label": "CallbackBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackBase()"
  },
  {
    "label": "CallbackBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackBase(BindStateBase* bind_state)"
  },
  {
    "label": "polymorphic_invoke()",
    "kind": "Method",
    "detail": "Function (InvokeFuncStorage)",
    "insertText": "polymorphic_invoke()"
  },
  {
    "label": "CallbackBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackBase(CallbackBase&&)"
  },
  {
    "label": "CallbackBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackBase(BindStateBase* bind_state) : bind_state_(AdoptRef(bind_state))"
  },
  {
    "label": "CallbackBaseCopyable()",
    "kind": "Method",
    "detail": "Function (} class CallbackBaseCopyable : public CallbackBase { public :)",
    "insertText": "CallbackBaseCopyable(const CallbackBaseCopyable& c)"
  },
  {
    "label": "CallbackBaseCopyable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackBaseCopyable(CallbackBaseCopyable&& c)"
  },
  {
    "label": "CallbackBaseCopyable()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "CallbackBaseCopyable()"
  },
  {
    "label": "CallbackBaseCopyable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackBaseCopyable(BindStateBase* bind_state) : CallbackBase(bind_state)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; template<OriginalCallback,ThenCallback> struct ThenHelper ; template<template<> class OriginalCallback,template<> class ThenCallback,. . . OriginalArgs,ThenR,. . . ThenArgs> struct ThenHelper<OriginalCallback<)",
    "insertText": "void(OriginalArgs...)>, ThenCallback<ThenR(ThenArgs...)"
  },
  {
    "label": "CreateTrampoline()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "CreateTrampoline()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(c1).Run(std::forward<OriginalArgs>(c1_args)...)"
  },
  {
    "label": "OriginalR()",
    "kind": "Method",
    "detail": "Function (} ; } } ; template<template<> class OriginalCallback,template<> class ThenCallback,OriginalR,. . . OriginalArgs,ThenR,. . . ThenArgs> struct ThenHelper<OriginalCallback<)",
    "insertText": "OriginalR(OriginalArgs...)>, ThenCallback<ThenR(ThenArgs...)"
  }
]