[
  {
    "label": "ChannelController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChannelController"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_CHANNEL_CONTROLLER_H_ # define MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_CHANNEL_CONTROLLER_H_ # include<stddef . h> # include \" absl / types / optional . h \" # include \" modules / audio_coding / audio_network_adaptor / controller . h \" # include \" modules / audio_coding / audio_network_adaptor / include / audio_network_adaptor_config . h \" namespace webrtc { class ChannelController final : public Controller { public : struct Config {)",
    "insertText": "Config(size_t num_encoder_channels, size_t intial_channels_to_encode, int channel_1_to_2_bandwidth_bps, int channel_2_to_1_bandwidth_bps)"
  },
  {
    "label": "ChannelController()",
    "kind": "Method",
    "detail": "Function (size_t num_encoder_channels ; size_t intial_channels_to_encode ; int channel_1_to_2_bandwidth_bps ; int channel_2_to_1_bandwidth_bps ; } ;)",
    "insertText": "ChannelController(const Config& config)"
  },
  {
    "label": "ChannelController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ChannelController()"
  },
  {
    "label": "ChannelController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChannelController(const ChannelController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ChannelController&)",
    "insertText": "operator(const ChannelController&)"
  },
  {
    "label": "UpdateNetworkMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetworkMetrics(const NetworkMetrics& network_metrics)"
  },
  {
    "label": "MakeDecision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeDecision(AudioEncoderRuntimeConfig* config)"
  }
]