[
  {
    "label": "As()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include<type_traits> namespace pointer { template<T> T)",
    "insertText": "As(void* anyPointer)"
  },
  {
    "label": "As()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "As(const void* anyPointer)"
  },
  {
    "label": "AsInteger()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "AsInteger(const void* anyPointer)"
  },
  {
    "label": "FromInteger()",
    "kind": "Method",
    "detail": "Function (} template<To,From> To)",
    "insertText": "FromInteger(From integer)"
  },
  {
    "label": "AlignBottom()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "AlignBottom(void* anyPointer, size_t alignment)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (union { void* as_void ; uintptr_t as_uintptr_t ; } ; as_void = anyPointer ; const size_t mask = alignment - 1 u ; as_uintptr_t& = ~ mask ; return As<)",
    "insertText": "T(as_void)"
  },
  {
    "label": "AlignBottom()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "AlignBottom(const void* anyPointer, size_t alignment)"
  },
  {
    "label": "AlignTop()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "AlignTop(void* anyPointer, size_t alignment)"
  },
  {
    "label": "AlignTop()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "AlignTop(const void* anyPointer, size_t alignment)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (union { const void* as_void ; T as_T ; } ; as_void = anyPointer ; return as_T ; } template<T,U> T)",
    "insertText": "Offset(void* anyPointer, U howManyBytes)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (} template<T,U> T)",
    "insertText": "Offset(const void* anyPointer, U howManyBytes)"
  },
  {
    "label": "Displacement()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "Displacement(const void* from, const void* to)"
  }
]