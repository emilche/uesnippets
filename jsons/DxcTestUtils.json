[
  {
    "label": "DxcOpts",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxcOpts"
  },
  {
    "label": "MainArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MainArgs"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FileCheckForTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileCheckForTest"
  },
  {
    "label": "FileRunCommandResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileRunCommandResult"
  },
  {
    "label": "FileRunCommandPart",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileRunCommandPart"
  },
  {
    "label": "FileRunTestResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileRunTestResult"
  },
  {
    "label": "VersionSupportInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VersionSupportInfo"
  },
  {
    "label": "FileCheckForTest()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FileCheckForTest()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Run()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Error(1, StdErr)"
  },
  {
    "label": "FileRunCommandPart()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FileRunCommandPart(const std::string &command, const std::string &arguments,\n                     LPCWSTR commandFileName)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "Run(dxc::DxcDllSupport &DllSupport,\n                           const FileRunCommandResult *Prior,\n                           PluginToolsPaths *pPluginToolsPaths = nullptr,\n                           LPCWSTR dumpName = nullptr)"
  },
  {
    "label": "RunHashTests()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunHashTests(dxc::DxcDllSupport &DllSupport)"
  },
  {
    "label": "ReadOptsForDxc()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "ReadOptsForDxc(hlsl::options::MainArgs &argStrings,\n                                      hlsl::options::DxcOpts &Opts,\n                                      unsigned flagsToInclude = 0)"
  },
  {
    "label": "RunFileChecker()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunFileChecker(const FileRunCommandResult *Prior,\n                                      LPCWSTR dumpName = nullptr)"
  },
  {
    "label": "RunDxc()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunDxc(dxc::DxcDllSupport &DllSupport,\n                              const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunDxv()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunDxv(dxc::DxcDllSupport &DllSupport,\n                              const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunOpt()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunOpt(dxc::DxcDllSupport &DllSupport,\n                              const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunListParts()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunListParts(dxc::DxcDllSupport &DllSupport,\n                                    const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunD3DReflect()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunD3DReflect(dxc::DxcDllSupport &DllSupport,\n                                     const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunDxr()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunDxr(dxc::DxcDllSupport &DllSupport,\n                              const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunLink()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunLink(dxc::DxcDllSupport &DllSupport,\n                               const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunTee()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunTee(const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunXFail()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunXFail(const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunDxilVer()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunDxilVer(dxc::DxcDllSupport &DllSupport,\n                                  const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunDxcHashTest()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunDxcHashTest(dxc::DxcDllSupport &DllSupport)"
  },
  {
    "label": "RunFromPath()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunFromPath(const std::string &path,\n                                   const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunFileCompareText()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunFileCompareText(const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunFxc()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunFxc(dxc::DxcDllSupport &DllSupport,\n                              const FileRunCommandResult *Prior)"
  },
  {
    "label": "SubstituteFilenameVars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteFilenameVars(std::string &args)"
  },
  {
    "label": "ReadFileContentToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFileContentToString(HANDLE hFile, std::string &str)"
  },
  {
    "label": "ParseCommandParts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseCommandParts(LPCSTR commands, LPCWSTR fileName,\n                       std::vector<FileRunCommandPart> &parts)"
  },
  {
    "label": "ParseCommandPartsFromFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseCommandPartsFromFile(LPCWSTR fileName,\n                               std::vector<FileRunCommandPart> &parts)"
  },
  {
    "label": "RunHashTestFromFileCommands()",
    "kind": "Method",
    "detail": "Function (FileRunTestResult)",
    "insertText": "RunHashTestFromFileCommands(LPCWSTR fileName)"
  },
  {
    "label": "RunFromFileCommands()",
    "kind": "Method",
    "detail": "Function (FileRunTestResult)",
    "insertText": "RunFromFileCommands(LPCWSTR fileName,\n                      PluginToolsPaths *pPluginToolsPaths = nullptr,\n                      LPCWSTR dumpName = nullptr)"
  },
  {
    "label": "RunFromFileCommands()",
    "kind": "Method",
    "detail": "Function (FileRunTestResult)",
    "insertText": "RunFromFileCommands(LPCWSTR fileName, dxc::DxcDllSupport &dllSupport,\n                      PluginToolsPaths *pPluginToolsPaths = nullptr,\n                      LPCWSTR dumpName = nullptr)"
  },
  {
    "label": "AssembleToContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssembleToContainer(dxc::DxcDllSupport &dllSupport, IDxcBlob *pModule,\n                         IDxcBlob **pContainer)"
  },
  {
    "label": "BlobToUtf8()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "BlobToUtf8(IDxcBlob *pBlob)"
  },
  {
    "label": "BlobToWide()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "BlobToWide(IDxcBlob *pBlob)"
  },
  {
    "label": "CheckOperationSucceeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckOperationSucceeded(IDxcOperationResult *pResult, IDxcBlob **ppBlob)"
  },
  {
    "label": "CheckOperationResultMsgs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckOperationResultMsgs(IDxcOperationResult *pResult,\n                              llvm::ArrayRef<LPCSTR> pErrorMsgs,\n                              bool maySucceedAnyway, bool bRegex)"
  },
  {
    "label": "CheckOperationResultMsgs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckOperationResultMsgs(IDxcOperationResult *pResult,\n                              const LPCSTR *pErrorMsgs, size_t errorMsgCount,\n                              bool maySucceedAnyway, bool bRegex)"
  },
  {
    "label": "CheckMsgs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckMsgs(const LPCSTR pText, size_t TextCount, const LPCSTR *pErrorMsgs,\n               size_t errorMsgCount, bool bRegex)"
  },
  {
    "label": "CheckNotMsgs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckNotMsgs(const LPCSTR pText, size_t TextCount,\n                  const LPCSTR *pErrorMsgs, size_t errorMsgCount, bool bRegex)"
  },
  {
    "label": "GetDxilPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDxilPart(dxc::DxcDllSupport &dllSupport, IDxcBlob *pProgram,\n                 IDxcBlob **pDxilPart)"
  },
  {
    "label": "DisassembleProgram()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "DisassembleProgram(dxc::DxcDllSupport &dllSupport,\n                               IDxcBlob *pProgram)"
  },
  {
    "label": "SplitPassList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitPassList(LPWSTR pPassesBuffer, std::vector<LPCWSTR> &passes)"
  },
  {
    "label": "MultiByteStringToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiByteStringToBlob(dxc::DxcDllSupport &dllSupport,\n                           const std::string &val, UINT32 codePoint,\n                           IDxcBlob **ppBlob)"
  },
  {
    "label": "MultiByteStringToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiByteStringToBlob(dxc::DxcDllSupport &dllSupport,\n                           const std::string &val, UINT32 codePoint,\n                           IDxcBlobEncoding **ppBlob)"
  },
  {
    "label": "Utf8ToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Utf8ToBlob(dxc::DxcDllSupport &dllSupport, const std::string &val,\n                IDxcBlob **ppBlob)"
  },
  {
    "label": "Utf8ToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Utf8ToBlob(dxc::DxcDllSupport &dllSupport, const std::string &val,\n                IDxcBlobEncoding **ppBlob)"
  },
  {
    "label": "Utf8ToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Utf8ToBlob(dxc::DxcDllSupport &dllSupport, const char *pVal,\n                IDxcBlobEncoding **ppBlob)"
  },
  {
    "label": "WideToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WideToBlob(dxc::DxcDllSupport &dllSupport, const std::wstring &val,\n                IDxcBlob **ppBlob)"
  },
  {
    "label": "WideToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WideToBlob(dxc::DxcDllSupport &dllSupport, const std::wstring &val,\n                IDxcBlobEncoding **ppBlob)"
  },
  {
    "label": "VerifyCompileOK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyCompileOK(dxc::DxcDllSupport &dllSupport, LPCSTR pText,\n                     LPCWSTR pTargetProfile, LPCWSTR pArgs,\n                     IDxcBlob **ppResult)"
  },
  {
    "label": "VerifyCompileOK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyCompileOK(dxc::DxcDllSupport &dllSupport, LPCSTR pText,\n                     LPCWSTR pTargetProfile, std::vector<LPCWSTR> &args,\n                     IDxcBlob **ppResult)"
  },
  {
    "label": "GetVersion()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetVersion(dxc::DxcDllSupport &DllSupport, REFCLSID clsid,\n                   unsigned &Major, unsigned &Minor)"
  },
  {
    "label": "ParseTargetProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseTargetProfile(llvm::StringRef targetProfile,\n                        llvm::StringRef &outStage, unsigned &outMajor,\n                        unsigned &outMinor)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(dxc::DxcDllSupport &dllSupport)"
  },
  {
    "label": "SkipIRSensitiveTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SkipIRSensitiveTest()"
  },
  {
    "label": "SkipDxilVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SkipDxilVersion(unsigned major, unsigned minor)"
  },
  {
    "label": "SkipOutOfMemoryTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SkipOutOfMemoryTest()"
  }
]