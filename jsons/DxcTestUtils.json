[
  {
    "label": "DxcOpts",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxcOpts"
  },
  {
    "label": "MainArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MainArgs"
  },
  {
    "label": "FileCheckForTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileCheckForTest"
  },
  {
    "label": "FileRunCommandResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileRunCommandResult"
  },
  {
    "label": "FileRunCommandPart",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileRunCommandPart"
  },
  {
    "label": "FileRunTestResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileRunTestResult"
  },
  {
    "label": "VersionSupportInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VersionSupportInfo"
  },
  {
    "label": "FileCheckForTest()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / Support / WinIncludes . h \" # include \" dxc / Support / dxcapi . use . h \" # include \" dxc / dxcapi . h \" # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / ADT / StringRef . h \" # include<map> # include<string> # include<vector> namespace hlsl { namespace options { class DxcOpts ; class MainArgs ; } } class FileCheckForTest { public :)",
    "insertText": "FileCheckForTest()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (std::string CheckFilename ; std::string InputFilename ; std::vector<std::string> CheckPrefixes ; bool NoCanonicalizeWhiteSpace ; std::vector<std::string> ImplicitCheckNot ; bool AllowEmptyInput ; llvm::StringMap<std::string> VariableTable ; std::string InputForStdin ; std::string test_outs ; std::string test_errs ; int)",
    "insertText": "Run()"
  },
  {
    "label": "Success()",
    "kind": "Method",
    "detail": "Function (} ; typedef std::map<std::wstring,CComPtr<IDxcBlob>> FileMap ; struct FileRunCommandResult { CComPtr<IDxcOperationResult> OpResult ; std::string StdOut ; std::string StdErr ; int ExitCode = 0 ; bool AbortPipeline = false ; FileRunCommandResult)",
    "insertText": "Success()"
  },
  {
    "label": "Success()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult result ; result . ExitCode = 0 ; return result ; } FileRunCommandResult)",
    "insertText": "Success(std::string StdOut)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult result ; result . ExitCode = 0 ; result . StdOut =)",
    "insertText": "move(StdOut)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult result ; result . ExitCode = ExitCode ; result . StdErr =)",
    "insertText": "move(StdErr)"
  },
  {
    "label": "FileRunCommandPart()",
    "kind": "Method",
    "detail": "Function (} } ; typedef std::map<std::string,std::string> PluginToolsPaths ; class FileRunCommandPart { public :)",
    "insertText": "FileRunCommandPart(const std::string &command, const std::string &arguments, LPCWSTR commandFileName)"
  },
  {
    "label": "FileRunCommandPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileRunCommandPart(const FileRunCommandPart &)"
  },
  {
    "label": "FileRunCommandPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileRunCommandPart(FileRunCommandPart &&)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "Run(dxc::DxcDllSupport &DllSupport, const FileRunCommandResult *Prior, PluginToolsPaths *pPluginToolsPaths = nullptr, LPCWSTR dumpName = nullptr)"
  },
  {
    "label": "RunHashTests()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunHashTests(dxc::DxcDllSupport &DllSupport)"
  },
  {
    "label": "ReadOptsForDxc()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "ReadOptsForDxc(hlsl::options::MainArgs &argStrings, hlsl::options::DxcOpts &Opts, unsigned flagsToInclude = 0)"
  },
  {
    "label": "RunFileChecker()",
    "kind": "Method",
    "detail": "Function (std::string Command ; std::string Arguments ; LPCWSTR CommandFileName ; FileMap* pVFS = nullptr ; private : FileRunCommandResult)",
    "insertText": "RunFileChecker(const FileRunCommandResult *Prior, LPCWSTR dumpName = nullptr)"
  },
  {
    "label": "RunDxc()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunDxc(dxc::DxcDllSupport &DllSupport, const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunDxv()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunDxv(dxc::DxcDllSupport &DllSupport, const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunOpt()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunOpt(dxc::DxcDllSupport &DllSupport, const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunListParts()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunListParts(dxc::DxcDllSupport &DllSupport, const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunD3DReflect()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunD3DReflect(dxc::DxcDllSupport &DllSupport, const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunDxr()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunDxr(dxc::DxcDllSupport &DllSupport, const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunLink()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunLink(dxc::DxcDllSupport &DllSupport, const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunTee()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunTee(const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunXFail()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunXFail(const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunDxilVer()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunDxilVer(dxc::DxcDllSupport &DllSupport, const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunDxcHashTest()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunDxcHashTest(dxc::DxcDllSupport &DllSupport)"
  },
  {
    "label": "RunFromPath()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunFromPath(const std::string &path, const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunFileCompareText()",
    "kind": "Method",
    "detail": "Function (FileRunCommandResult)",
    "insertText": "RunFileCompareText(const FileRunCommandResult *Prior)"
  },
  {
    "label": "RunFxc()",
    "kind": "Method",
    "detail": "Function (# ifdef _WIN32 FileRunCommandResult)",
    "insertText": "RunFxc(dxc::DxcDllSupport &DllSupport, const FileRunCommandResult *Prior)"
  },
  {
    "label": "SubstituteFilenameVars()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SubstituteFilenameVars(std::string &args)"
  },
  {
    "label": "ReadFileContentToString()",
    "kind": "Method",
    "detail": "Function (# ifdef _WIN32 bool)",
    "insertText": "ReadFileContentToString(HANDLE hFile, std::string &str)"
  },
  {
    "label": "ParseCommandParts()",
    "kind": "Method",
    "detail": "Function (# endif } ; void)",
    "insertText": "ParseCommandParts(LPCSTR commands, LPCWSTR fileName, std::vector<FileRunCommandPart> &parts)"
  },
  {
    "label": "ParseCommandPartsFromFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseCommandPartsFromFile(LPCWSTR fileName, std::vector<FileRunCommandPart> &parts)"
  },
  {
    "label": "RunHashTestFromFileCommands()",
    "kind": "Method",
    "detail": "Function (class FileRunTestResult { public : std::string ErrorMessage ; int RunResult = - 1 ; FileRunTestResult)",
    "insertText": "RunHashTestFromFileCommands(LPCWSTR fileName)"
  },
  {
    "label": "RunFromFileCommands()",
    "kind": "Method",
    "detail": "Function (FileRunTestResult)",
    "insertText": "RunFromFileCommands(LPCWSTR fileName, PluginToolsPaths *pPluginToolsPaths = nullptr, LPCWSTR dumpName = nullptr)"
  },
  {
    "label": "RunFromFileCommands()",
    "kind": "Method",
    "detail": "Function (FileRunTestResult)",
    "insertText": "RunFromFileCommands(LPCWSTR fileName, dxc::DxcDllSupport &dllSupport, PluginToolsPaths *pPluginToolsPaths = nullptr, LPCWSTR dumpName = nullptr)"
  },
  {
    "label": "AssembleToContainer()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AssembleToContainer(dxc::DxcDllSupport &dllSupport, IDxcBlob *pModule, IDxcBlob **pContainer)"
  },
  {
    "label": "BlobToUtf8()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "BlobToUtf8(IDxcBlob *pBlob)"
  },
  {
    "label": "BlobToWide()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "BlobToWide(IDxcBlob *pBlob)"
  },
  {
    "label": "CheckOperationSucceeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckOperationSucceeded(IDxcOperationResult *pResult, IDxcBlob **ppBlob)"
  },
  {
    "label": "CheckOperationResultMsgs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckOperationResultMsgs(IDxcOperationResult *pResult, llvm::ArrayRef<LPCSTR> pErrorMsgs, bool maySucceedAnyway, bool bRegex)"
  },
  {
    "label": "CheckOperationResultMsgs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckOperationResultMsgs(IDxcOperationResult *pResult, const LPCSTR *pErrorMsgs, size_t errorMsgCount, bool maySucceedAnyway, bool bRegex)"
  },
  {
    "label": "CheckMsgs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckMsgs(const LPCSTR pText, size_t TextCount, const LPCSTR *pErrorMsgs, size_t errorMsgCount, bool bRegex)"
  },
  {
    "label": "CheckNotMsgs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckNotMsgs(const LPCSTR pText, size_t TextCount, const LPCSTR *pErrorMsgs, size_t errorMsgCount, bool bRegex)"
  },
  {
    "label": "GetDxilPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDxilPart(dxc::DxcDllSupport &dllSupport, IDxcBlob *pProgram, IDxcBlob **pDxilPart)"
  },
  {
    "label": "DisassembleProgram()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "DisassembleProgram(dxc::DxcDllSupport &dllSupport, IDxcBlob *pProgram)"
  },
  {
    "label": "SplitPassList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitPassList(LPWSTR pPassesBuffer, std::vector<LPCWSTR> &passes)"
  },
  {
    "label": "MultiByteStringToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiByteStringToBlob(dxc::DxcDllSupport &dllSupport, const std::string &val, UINT32 codePoint, IDxcBlob **ppBlob)"
  },
  {
    "label": "MultiByteStringToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiByteStringToBlob(dxc::DxcDllSupport &dllSupport, const std::string &val, UINT32 codePoint, IDxcBlobEncoding **ppBlob)"
  },
  {
    "label": "Utf8ToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Utf8ToBlob(dxc::DxcDllSupport &dllSupport, const std::string &val, IDxcBlob **ppBlob)"
  },
  {
    "label": "Utf8ToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Utf8ToBlob(dxc::DxcDllSupport &dllSupport, const std::string &val, IDxcBlobEncoding **ppBlob)"
  },
  {
    "label": "Utf8ToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Utf8ToBlob(dxc::DxcDllSupport &dllSupport, const char *pVal, IDxcBlobEncoding **ppBlob)"
  },
  {
    "label": "WideToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WideToBlob(dxc::DxcDllSupport &dllSupport, const std::wstring &val, IDxcBlob **ppBlob)"
  },
  {
    "label": "WideToBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WideToBlob(dxc::DxcDllSupport &dllSupport, const std::wstring &val, IDxcBlobEncoding **ppBlob)"
  },
  {
    "label": "VerifyCompileOK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyCompileOK(dxc::DxcDllSupport &dllSupport, LPCSTR pText, LPCWSTR pTargetProfile, LPCWSTR pArgs, IDxcBlob **ppResult)"
  },
  {
    "label": "VerifyCompileOK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyCompileOK(dxc::DxcDllSupport &dllSupport, LPCSTR pText, LPCWSTR pTargetProfile, std::vector<LPCWSTR> &args, IDxcBlob **ppResult)"
  },
  {
    "label": "GetVersion()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetVersion(dxc::DxcDllSupport &DllSupport, REFCLSID clsid, unsigned &Major, unsigned &Minor)"
  },
  {
    "label": "ParseTargetProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseTargetProfile(llvm::StringRef targetProfile, llvm::StringRef &outStage, unsigned &outMajor, unsigned &outMinor)"
  },
  {
    "label": "VersionSupportInfo()",
    "kind": "Method",
    "detail": "Function (class VersionSupportInfo { private : bool m_CompilerIsDebugBuild ; public : bool m_InternalValidator ; unsigned m_DxilMajor,m_DxilMinor ; unsigned m_ValMajor,m_ValMinor ;)",
    "insertText": "VersionSupportInfo()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(dxc::DxcDllSupport &dllSupport)"
  },
  {
    "label": "SkipIRSensitiveTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SkipIRSensitiveTest()"
  },
  {
    "label": "SkipDxilVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SkipDxilVersion(unsigned major, unsigned minor)"
  },
  {
    "label": "SkipOutOfMemoryTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SkipOutOfMemoryTest()"
  }
]