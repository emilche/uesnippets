[
  {
    "label": "CefPostData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefPostData"
  },
  {
    "label": "CefPostDataElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefPostDataElement"
  },
  {
    "label": "CefRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefRequest"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CEF_REQUEST_H_ # define CEF_INCLUDE_CEF_REQUEST_H_ # pragma once # include<map> # include<vector> # include \" include / cef_base . h \" class CefPostData ; class CefPostDataElement ; class CefRequest : public CefBaseRefCounted { public : typedef std::multimap<CefString,CefString> HeaderMap ; typedef cef_referrer_policy_t ReferrerPolicy ; typedef cef_resource_type_t ResourceType ; typedef cef_transition_type_t TransitionType ; CefRefPtr<CefRequest>)",
    "insertText": "Create()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "GetURL()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetURL()"
  },
  {
    "label": "SetURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetURL(const CefString& url)"
  },
  {
    "label": "GetMethod()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetMethod()"
  },
  {
    "label": "SetMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMethod(const CefString& method)"
  },
  {
    "label": "SetReferrer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReferrer(const CefString& referrer_url, ReferrerPolicy policy)"
  },
  {
    "label": "GetReferrerURL()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetReferrerURL()"
  },
  {
    "label": "GetReferrerPolicy()",
    "kind": "Method",
    "detail": "Function (ReferrerPolicy)",
    "insertText": "GetReferrerPolicy()"
  },
  {
    "label": "GetPostData()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefPostData>)",
    "insertText": "GetPostData()"
  },
  {
    "label": "SetPostData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPostData(CefRefPtr<CefPostData> postData)"
  },
  {
    "label": "GetHeaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHeaderMap(HeaderMap& headerMap)"
  },
  {
    "label": "SetHeaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeaderMap(const HeaderMap& headerMap)"
  },
  {
    "label": "GetHeaderByName()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetHeaderByName(const CefString& name)"
  },
  {
    "label": "SetHeaderByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeaderByName(const CefString& name, const CefString& value, bool overwrite)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const CefString& url, const CefString& method, CefRefPtr<CefPostData> postData, const HeaderMap& headerMap)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFlags()"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlags(int flags)"
  },
  {
    "label": "GetFirstPartyForCookies()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetFirstPartyForCookies()"
  },
  {
    "label": "SetFirstPartyForCookies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFirstPartyForCookies(const CefString& url)"
  },
  {
    "label": "GetResourceType()",
    "kind": "Method",
    "detail": "Function (ResourceType)",
    "insertText": "GetResourceType()"
  },
  {
    "label": "GetTransitionType()",
    "kind": "Method",
    "detail": "Function (TransitionType)",
    "insertText": "GetTransitionType()"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "HasExcludedElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExcludedElements()"
  },
  {
    "label": "GetElementCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetElementCount()"
  },
  {
    "label": "GetElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElements(ElementVector& elements)"
  },
  {
    "label": "RemoveElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveElement(CefRefPtr<CefPostDataElement> element)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddElement(CefRefPtr<CefPostDataElement> element)"
  },
  {
    "label": "RemoveElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElements()"
  },
  {
    "label": "SetToEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToEmpty()"
  },
  {
    "label": "SetToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToFile(const CefString& fileName)"
  },
  {
    "label": "SetToBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToBytes(size_t size, const void* bytes)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "GetType()"
  },
  {
    "label": "GetFile()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetFile()"
  },
  {
    "label": "GetBytesCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetBytesCount()"
  },
  {
    "label": "GetBytes()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetBytes(size_t size, void* bytes)"
  }
]