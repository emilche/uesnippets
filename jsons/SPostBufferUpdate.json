[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlateRHIPostBufferProcessorProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRHIPostBufferProcessorProxy"
  },
  {
    "label": "FPostBufferUpdater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPostBufferUpdater"
  },
  {
    "label": "FSlatePostProcessorUpdaterProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlatePostProcessorUpdaterProxy"
  },
  {
    "label": "SPostBufferUpdate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPostBufferUpdate"
  },
  {
    "label": "FSlatePostProcessorUpdaterProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SLeafWidget . h \" # include \" Styling / SlateTypes . h \" class FPaintArgs ; class FSlateWindowElementList ; class FSlateRHIPostBufferProcessorProxy ; class FPostBufferUpdater ; class FSlatePostProcessorUpdaterProxy : public TSharedFromThis<FSlatePostProcessorUpdaterProxy> { public : bool bSkipBufferUpdate = false ; public : ~)",
    "insertText": "FSlatePostProcessorUpdaterProxy()"
  },
  {
    "label": "UpdateProcessor_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateProcessor_RenderThread(TSharedPtr<FSlateRHIPostBufferProcessorProxy>)"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (} ; class SPostBufferUpdate : public SLeafWidget {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SPostBufferUpdate, SLeafWidget, UMG_API) public: SLATE_BEGIN_ARGS( SPostBufferUpdate ) : _bPerformDefaultPostBufferUpdate( true)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, bPerformDefaultPostBufferUpdate) SLATE_END_ARGS() UMG_API SPostBufferUpdate()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetPerformDefaultPostBufferUpdate()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetPerformDefaultPostBufferUpdate(bool bInPerformDefaultPostBufferUpdate)"
  },
  {
    "label": "GetPerformDefaultPostBufferUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPerformDefaultPostBufferUpdate()"
  },
  {
    "label": "SetBuffersToUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBuffersToUpdate(const TArrayView<ESlatePostRT> InBuffersToUpdate)"
  },
  {
    "label": "SetProcessorUpdaters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessorUpdaters(TMap<ESlatePostRT, TSharedPtr<FSlatePostProcessorUpdaterProxy>> InProcessorUpdaters)"
  },
  {
    "label": "GetBuffersToUpdate()",
    "kind": "Method",
    "detail": "Function (const TArrayView<const ESlatePostRT>)",
    "insertText": "GetBuffersToUpdate()"
  },
  {
    "label": "ReleasePostBufferUpdater()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePostBufferUpdater()"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  }
]