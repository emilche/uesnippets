[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FLogEntryItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogEntryItem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "values",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "values"
  },
  {
    "label": "FVisualLogEventBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEventBase"
  },
  {
    "label": "FVisualLogEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEvent"
  },
  {
    "label": "FVisualLogLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogLine"
  },
  {
    "label": "FVisualLogStatusCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogStatusCategory"
  },
  {
    "label": "FVisualLogShapeElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogShapeElement"
  },
  {
    "label": "FVisualLogHistogramSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogHistogramSample"
  },
  {
    "label": "FVisualLogDataBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogDataBlock"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "FVisualLogDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLogDevice"
  },
  {
    "label": "FVisualLogEntryItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntryItem"
  },
  {
    "label": "FVisualLoggerCategoryVerbosityPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerCategoryVerbosityPair"
  },
  {
    "label": "FVisualLoggerHelpers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerHelpers"
  },
  {
    "label": "IVisualLoggerEditorInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IVisualLoggerEditorInterface"
  },
  {
    "label": "FVisualLogExtensionInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLogExtensionInterface"
  },
  {
    "label": "FLogEntryItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogEntryItem"
  },
  {
    "label": "FVisualLogEvent()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FVisualLogEvent(const FVisualLogEventBase& Event)"
  },
  {
    "label": "FVisualLogLine()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FVisualLogLine(const FName& InCategory, ELogVerbosity::Type InVerbosity, const FString& InLine)"
  },
  {
    "label": "FVisualLogLine()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FVisualLogLine(const FName& InCategory, ELogVerbosity::Type InVerbosity, const FString& InLine, int64 InUserData)"
  },
  {
    "label": "FVisualLogLine()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FVisualLogLine(const FName& InCategory, ELogVerbosity::Type InVerbosity, const FString& InLine, const FColor& InColor, bool bInMonospace)"
  },
  {
    "label": "FVisualLogStatusCategory()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FVisualLogStatusCategory()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const FString& Key, const FString& Value)"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChild(const FVisualLogStatusCategory& Child)"
  },
  {
    "label": "FVisualLogShapeElement()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FVisualLogShapeElement(EVisualLoggerShapeElement InType = EVisualLoggerShapeElement::Invalid)"
  },
  {
    "label": "FVisualLogShapeElement()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FVisualLogShapeElement(const FString& InDescription, const FColor& InColor, uint16 InThickness, const FName& InCategory)"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColor(const FColor& InColor)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(EVisualLoggerShapeElement InType)"
  },
  {
    "label": "FVisualLogEntry()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FVisualLogEntry(const AActor* InActor, TArray<TWeakObjectPtr<UObject> >* Children)"
  },
  {
    "label": "FVisualLogEntry()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FVisualLogEntry(double InTimeStamp, FVector InLocation, const UObject* Object, TArray<TWeakObjectPtr<UObject> >* Children)"
  },
  {
    "label": "InitializeEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeEntry( const double InTimeStamp )"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetPassedObjectAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPassedObjectAllowList(const bool bPassed)"
  },
  {
    "label": "UpdateAllowedToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllowedToLog()"
  },
  {
    "label": "AddText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddText(const FString& TextLine, const FName& CategoryName, ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddElement(const FVisualLogShapeElement& Element)"
  },
  {
    "label": "AddHistogramData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHistogramData(const FVector2D& DataSample, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FName& GraphName, const FName& DataName)"
  },
  {
    "label": "AddBoxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBoxes(const TArray<FBox>& Boxes, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddEvent(const FVisualLogEventBase& Event)"
  },
  {
    "label": "FindStatusIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindStatusIndex(const FString& CategoryName)"
  },
  {
    "label": "MoveTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTo(FVisualLogEntry& Other)"
  },
  {
    "label": "GenerateTemporaryFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateTemporaryFilename(const FString& FileExt)"
  },
  {
    "label": "GenerateFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateFilename(const FString& TempFileName, const FString& Prefix, double StartRecordingTime, double EndTimeStamp)"
  },
  {
    "label": "GetCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCategories(const FVisualLogEntry& RecordedLogs, TArray<FVisualLoggerCategoryVerbosityPair>& OutCategories)"
  },
  {
    "label": "GetHistogramCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHistogramCategories(const FVisualLogEntry& RecordedLogs, TMap<FString, TArray<FString> >& OutCategories)"
  }
]