[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FLogEntryItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogEntryItem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FVisualLogEventBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEventBase"
  },
  {
    "label": "FVisualLogEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEvent"
  },
  {
    "label": "FVisualLogLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogLine"
  },
  {
    "label": "FVisualLogStatusCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogStatusCategory"
  },
  {
    "label": "FVisualLogShapeElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogShapeElement"
  },
  {
    "label": "FVisualLogHistogramSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogHistogramSample"
  },
  {
    "label": "FVisualLogDataBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogDataBlock"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "FVisualLogDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLogDevice"
  },
  {
    "label": "FVisualLogEntryItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntryItem"
  },
  {
    "label": "FVisualLoggerCategoryVerbosityPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerCategoryVerbosityPair"
  },
  {
    "label": "FVisualLoggerHelpers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerHelpers"
  },
  {
    "label": "IVisualLoggerEditorInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IVisualLoggerEditorInterface"
  },
  {
    "label": "FVisualLogExtensionInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLogExtensionInterface"
  },
  {
    "label": "DEFINE_ENUM_TO_STRING()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EngineDefines . h \" # include \" VisualLoggerCustomVersion . h \" class AActor ; class UCanvas ; struct FLogEntryItem ; # define)",
    "insertText": "DEFINE_ENUM_TO_STRING(EnumType, EnumPackage) FString EnumToString(const EnumType Value)"
  },
  {
    "label": "UEnum()",
    "kind": "Method",
    "detail": "Function (\\ const UEnum* TypeEnum = FindObject<)",
    "insertText": "UEnum(nullptr, TEXT(EnumPackage) TEXT(\".\") TEXT(#EnumType))"
  },
  {
    "label": "GetNameStringByIndex()",
    "kind": "Method",
    "detail": "Function (\\ return TypeEnum ->)",
    "insertText": "GetNameStringByIndex(static_cast<int32>(Value))"
  },
  {
    "label": "DECLARE_ENUM_TO_STRING()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DECLARE_ENUM_TO_STRING(EnumType) FString EnumToString(const EnumType Value)"
  },
  {
    "label": "FVisualLogEventBase()",
    "kind": "Method",
    "detail": "Function (Invalid = - 1,DontCreate = 0,Create = 1,} ; namespace EVisualLoggerDeviceFlags { enum Type { NoFlags = 0,CanSaveToFile = 1,StoreLogsLocally = 2,} ; } enum class EVisualLoggerShapeElement : uint8 { Invalid = 0,SinglePoint,Sphere,WireSphere,Segment,Path,Box,WireBox,Cone,WireCone,Cylinder,WireCylinder,Capsule,WireCapsule,Polygon,Mesh,NavAreaMesh,Arrow,Circle,} ; # if ENABLE_VISUAL_LOG struct FVisualLogEventBase { const FString Name ; const FString FriendlyDesc ; const ELogVerbosity::Type Verbosity ;)",
    "insertText": "FVisualLogEventBase(const FString& InName, const FString& InFriendlyDesc, ELogVerbosity::Type InVerbosity) : Name(InName), FriendlyDesc(InFriendlyDesc), Verbosity(InVerbosity)"
  },
  {
    "label": "FVisualLogEvent()",
    "kind": "Method",
    "detail": "Function (} } ; struct FVisualLogEvent { FString Name ; FString UserFriendlyDesc ; TEnumAsByte<ELogVerbosity::Type> Verbosity ; TMap<FName,int32> EventTags ; int32 Counter ; int64 UserData ; FName TagName ;)",
    "insertText": "FVisualLogEvent() : Counter(1)"
  },
  {
    "label": "FVisualLogEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVisualLogEvent(const FVisualLogEventBase& Event)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVisualLogEvent&)",
    "insertText": "operator(const FVisualLogEventBase& Event)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FVisualLogEvent& Left, const FVisualLogEvent& Right)"
  },
  {
    "label": "FVisualLogLine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVisualLogLine(const FName& InCategory, ELogVerbosity::Type InVerbosity, const FString& InLine)"
  },
  {
    "label": "FVisualLogLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVisualLogLine(const FName& InCategory, ELogVerbosity::Type InVerbosity, const FString& InLine, int64 InUserData)"
  },
  {
    "label": "FVisualLogLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVisualLogLine(const FName& InCategory, ELogVerbosity::Type InVerbosity, const FString& InLine, const FColor& InColor, bool bInMonospace)"
  },
  {
    "label": "FVisualLogStatusCategory()",
    "kind": "Method",
    "detail": "Function (} ; struct FVisualLogStatusCategory { TArray<FString> Data ; FString Category ; int32 UniqueId ; TArray<FVisualLogStatusCategory> Children ;)",
    "insertText": "FVisualLogStatusCategory()"
  },
  {
    "label": "FVisualLogStatusCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVisualLogStatusCategory(const FString& InCategory ) : Category(InCategory)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FString& Key, const FString& Value)"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDesc(int32 Index, FString& Key, FString& Value)"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChild(const FVisualLogStatusCategory& Child)"
  },
  {
    "label": "FVisualLogShapeElement()",
    "kind": "Method",
    "detail": "Function (} ; struct FVisualLogShapeElement { FString Description ; FName Category ; TEnumAsByte<ELogVerbosity::Type> Verbosity ; TArray<FVector> Points ; FMatrix TransformationMatrix ; int32 UniqueId ; EVisualLoggerShapeElement Type ; uint8 Color ; union { uint16 Thicknes ; uint16 Radius ; } ;)",
    "insertText": "FVisualLogShapeElement(EVisualLoggerShapeElement InType = EVisualLoggerShapeElement::Invalid)"
  },
  {
    "label": "FVisualLogShapeElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVisualLogShapeElement(const FString& InDescription, const FColor& InColor, uint16 InThickness, const FName& InCategory)"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColor(const FColor& InColor)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EVisualLoggerShapeElement)",
    "insertText": "GetType()"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(EVisualLoggerShapeElement InType)"
  },
  {
    "label": "GetFColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetFColor()"
  },
  {
    "label": "FVisualLogEntry()",
    "kind": "Method",
    "detail": "Function (} ; struct FVisualLogHistogramSample { FName Category ; TEnumAsByte<ELogVerbosity::Type> Verbosity ; FName GraphName ; FName DataName ; FVector2D SampleValue ; int32 UniqueId ; } ; struct FVisualLogDataBlock { FName TagName ; FName Category ; TEnumAsByte<ELogVerbosity::Type> Verbosity ; TArray<uint8> Data ; int32 UniqueId ; } ; # endif struct FVisualLogEntry { # if ENABLE_VISUAL_LOG double TimeStamp ; double WorldTimeStamp ; FVector Location ; uint8 bPassedClassAllowList : 1 ; uint8 bPassedObjectAllowList : 1 ; uint8 bIsAllowedToLog : 1 ; uint8 bIsLocationValid : 1 ; uint8 bIsInitialized : 1 ; TArray<FVisualLogEvent> Events ; TArray<FVisualLogLine> LogLines ; TArray<FVisualLogStatusCategory> Status ; TArray<FVisualLogShapeElement> ElementsToDraw ; TArray<FVisualLogHistogramSample> HistogramSamples ; TArray<FVisualLogDataBlock> DataBlocks ;)",
    "insertText": "FVisualLogEntry()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ShouldLog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldLog(const ECreateIfNeeded ShouldCreate)"
  },
  {
    "label": "SetPassedObjectAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPassedObjectAllowList(const bool bPassed)"
  },
  {
    "label": "UpdateAllowedToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllowedToLog()"
  },
  {
    "label": "AddText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddText(const FString& TextLine, const FName& CategoryName, ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "AddPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPath(const TArray<FVector>& Points, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White, const FString& Description = TEXT(\"\"), uint16 Thickness = 0)"
  },
  {
    "label": "AddLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocation(const FVector& Point, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White, const FString& Description = TEXT(\"\"), uint16 Thickness = 0)"
  },
  {
    "label": "AddSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSphere(const FVector& Center, float Radius, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White, const FString& Description = TEXT(\"\"), bool bInUseWires = false)"
  },
  {
    "label": "AddSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSegment(const FVector& Start, const FVector& End, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White, const FString& Description = TEXT(\"\"), uint16 Thickness = 0)"
  },
  {
    "label": "AddBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBox(const FBox& Box, const FMatrix& Matrix, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White, const FString& Description = TEXT(\"\"), uint16 Thickness = 0, bool bInUseWires = false)"
  },
  {
    "label": "AddCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCone(const FVector& Origin, const FVector& Direction, float Length, float AngleWidth, float AngleHeight, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White, const FString& Description = TEXT(\"\"), uint16 Thickness = 0, bool bInUseWires = false)"
  },
  {
    "label": "AddCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCylinder(const FVector& Start, const FVector& End, float Radius, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White, const FString& Description = TEXT(\"\"), uint16 Thickness = 0, bool bInUseWires = false)"
  },
  {
    "label": "AddCapsule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCapsule(const FVector& Base, float HalfHeight, float Radius, const FQuat & Rotation, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White, const FString& Description = TEXT(\"\"), bool bInUseWires = false)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddElement(const FVisualLogShapeElement& Element)"
  },
  {
    "label": "AddPulledConvex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPulledConvex(const TArray<FVector>& ConvexPoints, FVector::FReal MinZ, FVector::FReal MaxZ, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White, const FString& Description = TEXT(\"\"))"
  },
  {
    "label": "AddMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMesh(const TArray<FVector>& Vertices, const TArray<int32>& Indices, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White, const FString& Description = TEXT(\"\"))"
  },
  {
    "label": "AddConvexElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConvexElement(const TArray<FVector>& Points, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White, const FString& Description = TEXT(\"\"))"
  },
  {
    "label": "AddHistogramData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHistogramData(const FVector2D& DataSample, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FName& GraphName, const FName& DataName)"
  },
  {
    "label": "AddArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArrow(const FVector& Start, const FVector& End, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White, const FString& Description = TEXT(\"\"))"
  },
  {
    "label": "AddBoxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBoxes(const TArray<FBox>& Boxes, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color = FColor::White)"
  },
  {
    "label": "AddCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCircle(const FVector& Center, const FVector& UpAxis, const float Radius, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FColor& Color, const FString& Description = TEXT(\"\"), uint16 Thickness = 0)"
  },
  {
    "label": "AddDataBlock()",
    "kind": "Method",
    "detail": "Function (FVisualLogDataBlock&)",
    "insertText": "AddDataBlock(const FString& TagName, const TArray<uint8>& BlobDataArray, const FName& CategoryName, ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddEvent(const FVisualLogEventBase& Event)"
  },
  {
    "label": "FindStatusIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindStatusIndex(const FString& CategoryName)"
  },
  {
    "label": "MoveTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTo(FVisualLogEntry& Other)"
  },
  {
    "label": "FVisualLogEntryItem()",
    "kind": "Method",
    "detail": "Function (# endif } ; # if ENABLE_VISUAL_LOG class FVisualLogDevice { public : struct FVisualLogEntryItem {)",
    "insertText": "FVisualLogEntryItem()"
  },
  {
    "label": "FVisualLogEntryItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVisualLogEntryItem(FName InOwnerName, FName InOwnerClassName, const FVisualLogEntry& LogEntry) : OwnerName(InOwnerName), OwnerClassName(InOwnerClassName), Entry(LogEntry)"
  },
  {
    "label": "FVisualLogDevice()",
    "kind": "Method",
    "detail": "Function (} FName OwnerName ; FName OwnerClassName ; FVisualLogEntry Entry ; } ; ~)",
    "insertText": "FVisualLogDevice()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(const UObject* LogOwner, FName OwnerName, FName InOwnerClassName, const FVisualLogEntry& LogEntry)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup(bool bReleaseMemory = false)"
  },
  {
    "label": "StartRecordingToFile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartRecordingToFile(double TimeStamp)"
  },
  {
    "label": "StopRecordingToFile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopRecordingToFile(double TimeStamp)"
  },
  {
    "label": "StartRecordingToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecordingToFile(static_cast<double>(TimeStamp))"
  },
  {
    "label": "StopRecordingToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingToFile(static_cast<double>(TimeStamp))"
  },
  {
    "label": "DiscardRecordingToFile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DiscardRecordingToFile()"
  },
  {
    "label": "SetFileName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFileName(const FString& InFileName)"
  },
  {
    "label": "GetRecordedLogs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetRecordedLogs(TArray<FVisualLogDevice::FVisualLogEntryItem>& OutLogs)"
  },
  {
    "label": "HasFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasFlags(int32 InFlags)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FName CategoryName ; ELogVerbosity::Type Verbosity ; bool)",
    "insertText": "operator(const FVisualLoggerCategoryVerbosityPair& A, const FVisualLoggerCategoryVerbosityPair& B)"
  },
  {
    "label": "GenerateFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateFilename(const FString& TempFileName, const FString& Prefix, double StartRecordingTime, double EndTimeStamp)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "Serialize(FArchive& Ar, FName& Name)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "Serialize(FArchive& Ar, TArray<FVisualLogDevice::FVisualLogEntryItem>& RecordedLogs)"
  },
  {
    "label": "GetCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCategories(const FVisualLogEntry& RecordedLogs, TArray<FVisualLoggerCategoryVerbosityPair>& OutCategories)"
  },
  {
    "label": "GetHistogramCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHistogramCategories(const FVisualLogEntry& RecordedLogs, TMap<FString, TArray<FString> >& OutCategories)"
  },
  {
    "label": "GetRowClassName()",
    "kind": "Method",
    "detail": "Function (} ; struct IVisualLoggerEditorInterface { const FName&)",
    "insertText": "GetRowClassName(FName RowName)"
  },
  {
    "label": "GetSelectedItemIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSelectedItemIndex(FName RowName)"
  },
  {
    "label": "GetRowItems()",
    "kind": "Method",
    "detail": "Function (const TArray<FVisualLogDevice::FVisualLogEntryItem>&)",
    "insertText": "GetRowItems(FName RowName)"
  },
  {
    "label": "GetSelectedItem()",
    "kind": "Method",
    "detail": "Function (const FVisualLogDevice::FVisualLogEntryItem&)",
    "insertText": "GetSelectedItem(FName RowName)"
  },
  {
    "label": "GetSelectedRows()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetSelectedRows()"
  },
  {
    "label": "IsRowVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRowVisible(FName RowName)"
  },
  {
    "label": "IsItemVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsItemVisible(FName RowName, int32 ItemIndex)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetHelperActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetHelperActor(UWorld* InWorld = nullptr)"
  },
  {
    "label": "MatchCategoryFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchCategoryFilters(const FString& String, ELogVerbosity::Type Verbosity = ELogVerbosity::All)"
  },
  {
    "label": "FVisualLogExtensionInterface()",
    "kind": "Method",
    "detail": "Function (} ; class FVisualLogExtensionInterface { public : ~)",
    "insertText": "FVisualLogExtensionInterface()"
  },
  {
    "label": "ResetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetData(IVisualLoggerEditorInterface* EdInterface)"
  },
  {
    "label": "DrawData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawData(IVisualLoggerEditorInterface* EdInterface, UCanvas* Canvas)"
  },
  {
    "label": "OnItemsSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemsSelectionChanged(IVisualLoggerEditorInterface* EdInterface)"
  },
  {
    "label": "OnLogLineSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnLogLineSelectionChanged(IVisualLoggerEditorInterface* EdInterface, TSharedPtr<struct FLogEntryItem> SelectedItem, int64 UserData)"
  },
  {
    "label": "OnScrubPositionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnScrubPositionChanged(IVisualLoggerEditorInterface* EdInterface, double NewScrubPosition, bool bScrubbing)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FVisualLogDevice::FVisualLogEntryItem& FrameCacheItem)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FVisualLogDataBlock& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FVisualLogHistogramSample& Sample)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FVisualLogShapeElement& Element)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FVisualLogEvent& Event)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FVisualLogLine& LogLine)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FVisualLogStatusCategory& Status)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FVisualLogEntry& LogEntry)"
  },
  {
    "label": "FVisualLogEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVisualLogEvent(const FVisualLogEventBase& Event) : Counter(1)"
  },
  {
    "label": "FVisualLogLine()",
    "kind": "Method",
    "detail": "Function (Name = Event . Name ; UserFriendlyDesc = Event . FriendlyDesc ; Verbosity = Event . Verbosity ; return* this ; })",
    "insertText": "FVisualLogLine(const FName& InCategory, ELogVerbosity::Type InVerbosity, const FString& InLine) : Line(InLine) , Category(InCategory) , Verbosity(InVerbosity) , UserData(0) , Color(FColor::White) , bMonospace(false)"
  },
  {
    "label": "FVisualLogLine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVisualLogLine(const FName& InCategory, ELogVerbosity::Type InVerbosity, const FString& InLine, int64 InUserData) : Line(InLine) , Category(InCategory) , Verbosity(InVerbosity) , UserData(InUserData) , Color(FColor::White) , bMonospace(false)"
  },
  {
    "label": "FVisualLogLine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVisualLogLine(const FName& InCategory, ELogVerbosity::Type InVerbosity, const FString& InLine, const FColor& InColor, bool bInMonospace) : Line(InLine) , Category(InCategory) , Verbosity(InVerbosity) , UserData(0) , Color(InColor) , bMonospace(bInMonospace)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Add(FString(Key).AppendChar(TEXT('|')) + Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Add(Child)"
  },
  {
    "label": "FVisualLogShapeElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVisualLogShapeElement(const FString& InDescription, const FColor& InColor, uint16 InThickness, const FName& InCategory) : Category(InCategory) , Verbosity(ELogVerbosity::All) , TransformationMatrix(FMatrix::Identity) , Type(EVisualLoggerShapeElement::Invalid) , Thicknes(InThickness)"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (Description = InDescription ; })",
    "insertText": "SetColor(InColor)"
  },
  {
    "label": "Color()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Color(uint8)(((InColor.DWColor() >> 30) << 6) | (((InColor.DWColor() & 0x00ff0000) >> 22) << 4) | (((InColor.DWColor() & 0x0000ff00) >> 14) << 2) | ((InColor.DWColor() & 0x000000ff) >> 6))"
  },
  {
    "label": "RetColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "RetColor(((Color & 0xc0) << 24) | ((Color & 0x30) << 18) | ((Color & 0x0c) << 12) | ((Color & 0x03) << 6))"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (RetColor .)",
    "insertText": "A(RetColor.A * 255)"
  }
]