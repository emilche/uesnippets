[
  {
    "label": "NvShaderExtnStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NvShaderExtnStruct"
  },
  {
    "label": "register()",
    "kind": "Method",
    "detail": "Function (# include \" nvShaderExtnEnums . h \" struct NvShaderExtnStruct { uint opcode ; uint rid ; uint sid ; uint4 dst1u ; uint4 src3u ; uint4 src4u ; uint4 src5u ; uint4 src0u ; uint4 src1u ; uint4 src2u ; uint4 dst0u ; uint markUavRef ; uint numOutputsForIncCounter ; float padding1 [ 2 7 ] ; } ; # ifdef NV_SHADER_EXTN_REGISTER_SPACE RWStructuredBuffer<NvShaderExtnStruct> g_NvidiaExt :)",
    "insertText": "register(NV_SHADER_EXTN_SLOT, NV_SHADER_EXTN_REGISTER_SPACE)"
  },
  {
    "label": "register()",
    "kind": "Method",
    "detail": "Function (# else RWStructuredBuffer<NvShaderExtnStruct> g_NvidiaExt :)",
    "insertText": "register(NV_SHADER_EXTN_SLOT)"
  },
  {
    "label": "__NvGetShflMaskFromWidth()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "__NvGetShflMaskFromWidth(uint width)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWByteAddressBuffer uav)"
  },
  {
    "label": "IncrementCounter()",
    "kind": "Method",
    "detail": "Function (uint index = g_NvidiaExt .)",
    "insertText": "IncrementCounter()"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav .)",
    "insertText": "Store(index, 0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture1D<float2> uav)"
  },
  {
    "label": "float2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [ index ] =)",
    "insertText": "float2(0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture2D<float2> uav)"
  },
  {
    "label": "uint2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint2(index,index)] = float2(0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture3D<float2> uav)"
  },
  {
    "label": "uint3()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint3(index,index,index)] = float2(0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture1D<float4> uav)"
  },
  {
    "label": "float4()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [ index ] =)",
    "insertText": "float4(0,0,0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture2D<float4> uav)"
  },
  {
    "label": "uint2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint2(index,index)] = float4(0,0,0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture3D<float4> uav)"
  },
  {
    "label": "uint3()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint3(index,index,index)] = float4(0,0,0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture1D<float> uav)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [ index ] = 0 . 0 f ; } void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture2D<float> uav)"
  },
  {
    "label": "uint2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint2(index,index)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture3D<float> uav)"
  },
  {
    "label": "uint3()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint3(index,index,index)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture1D<uint2> uav)"
  },
  {
    "label": "uint2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [ index ] =)",
    "insertText": "uint2(0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture2D<uint2> uav)"
  },
  {
    "label": "uint2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint2(index,index)] = uint2(0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture3D<uint2> uav)"
  },
  {
    "label": "uint3()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint3(index,index,index)] = uint2(0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture1D<uint4> uav)"
  },
  {
    "label": "uint4()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [ index ] =)",
    "insertText": "uint4(0,0,0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture2D<uint4> uav)"
  },
  {
    "label": "uint2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint2(index,index)] = uint4(0,0,0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture3D<uint4> uav)"
  },
  {
    "label": "uint3()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint3(index,index,index)] = uint4(0,0,0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture1D<uint> uav)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [ index ] = 0 ; } void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture2D<uint> uav)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture3D<uint> uav)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture1D<int2> uav)"
  },
  {
    "label": "int2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [ index ] =)",
    "insertText": "int2(0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture2D<int2> uav)"
  },
  {
    "label": "uint2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint2(index,index)] = int2(0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture3D<int2> uav)"
  },
  {
    "label": "uint3()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint3(index,index,index)] = int2(0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture1D<int4> uav)"
  },
  {
    "label": "int4()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [ index ] =)",
    "insertText": "int4(0,0,0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture2D<int4> uav)"
  },
  {
    "label": "uint2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint2(index,index)] = int4(0,0,0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture3D<int4> uav)"
  },
  {
    "label": "uint3()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [)",
    "insertText": "uint3(index,index,index)] = int4(0,0,0,0)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture1D<int> uav)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . markUavRef = 1 ; uav [ index ] = 0 ; } void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture2D<int> uav)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__NvReferenceUAVForOp(RWTexture3D<int> uav)"
  },
  {
    "label": "__NvAtomicOpFP16x2()",
    "kind": "Method",
    "detail": "Function (} # define NV_EXTN_ATOM_AND 0 # define NV_EXTN_ATOM_OR 1 # define NV_EXTN_ATOM_XOR 2 # define NV_EXTN_ATOM_ADD 3 # define NV_EXTN_ATOM_MAX 6 # define NV_EXTN_ATOM_MIN 7 # define NV_EXTN_ATOM_SWAP 8 # define NV_EXTN_ATOM_CAS 9 uint)",
    "insertText": "__NvAtomicOpFP16x2(RWByteAddressBuffer uav, uint byteAddress, uint fp16x2Val, uint atomicOpType)"
  },
  {
    "label": "__NvReferenceUAVForOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__NvReferenceUAVForOp(uav)"
  },
  {
    "label": "__NvAtomicOpFP16x2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x = byteAddress ; g_NvidiaExt [ index ] . src1u . x = fp16x2Val ; g_NvidiaExt [ index ] . src2u . x = atomicOpType ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_FP16_ATOMIC ; return g_NvidiaExt [ index ] . dst0u . x ; } uint)",
    "insertText": "__NvAtomicOpFP16x2(RWTexture1D<float2> uav, uint address, uint fp16x2Val, uint atomicOpType)"
  },
  {
    "label": "__NvAtomicOpFP16x2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x = address ; g_NvidiaExt [ index ] . src1u . x = fp16x2Val ; g_NvidiaExt [ index ] . src2u . x = atomicOpType ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_FP16_ATOMIC ; return g_NvidiaExt [ index ] . dst0u . x ; } uint)",
    "insertText": "__NvAtomicOpFP16x2(RWTexture2D<float2> uav, uint2 address, uint fp16x2Val, uint atomicOpType)"
  },
  {
    "label": "__NvAtomicOpFP16x2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . xy = address ; g_NvidiaExt [ index ] . src1u . x = fp16x2Val ; g_NvidiaExt [ index ] . src2u . x = atomicOpType ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_FP16_ATOMIC ; return g_NvidiaExt [ index ] . dst0u . x ; } uint)",
    "insertText": "__NvAtomicOpFP16x2(RWTexture3D<float2> uav, uint3 address, uint fp16x2Val, uint atomicOpType)"
  },
  {
    "label": "__NvAtomicOpFP16x2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . xyz = address ; g_NvidiaExt [ index ] . src1u . x = fp16x2Val ; g_NvidiaExt [ index ] . src2u . x = atomicOpType ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_FP16_ATOMIC ; return g_NvidiaExt [ index ] . dst0u . x ; } uint2)",
    "insertText": "__NvAtomicOpFP16x2(RWTexture1D<float4> uav, uint address, uint2 fp16x2Val, uint atomicOpType)"
  },
  {
    "label": "__NvAtomicOpFP16x2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x = address* 2 + 1 ; g_NvidiaExt [ index ] . src1u . x = fp16x2Val . y ; g_NvidiaExt [ index ] . src2u . x = atomicOpType ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_FP16_ATOMIC ; retVal . y = g_NvidiaExt [ index ] . dst0u . x ; return retVal ; } uint2)",
    "insertText": "__NvAtomicOpFP16x2(RWTexture2D<float4> uav, uint2 address, uint2 fp16x2Val, uint atomicOpType)"
  },
  {
    "label": "uint2()",
    "kind": "Method",
    "detail": "Function (uint2 retVal ; uint2 addressTemp =)",
    "insertText": "uint2(address.x * 2, address.y)"
  },
  {
    "label": "__NvAtomicOpFP16x2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . xy = addressTemp ; g_NvidiaExt [ index ] . src1u . x = fp16x2Val . y ; g_NvidiaExt [ index ] . src2u . x = atomicOpType ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_FP16_ATOMIC ; retVal . y = g_NvidiaExt [ index ] . dst0u . x ; return retVal ; } uint2)",
    "insertText": "__NvAtomicOpFP16x2(RWTexture3D<float4> uav, uint3 address, uint2 fp16x2Val, uint atomicOpType)"
  },
  {
    "label": "uint3()",
    "kind": "Method",
    "detail": "Function (uint2 retVal ; uint3 addressTemp =)",
    "insertText": "uint3(address.x * 2, address.y, address.z)"
  },
  {
    "label": "__fp32x2Tofp16x2()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . xyz = addressTemp ; g_NvidiaExt [ index ] . src1u . x = fp16x2Val . y ; g_NvidiaExt [ index ] . src2u . x = atomicOpType ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_FP16_ATOMIC ; retVal . y = g_NvidiaExt [ index ] . dst0u . x ; return retVal ; } uint)",
    "insertText": "__fp32x2Tofp16x2(float2 val)"
  },
  {
    "label": "__fp32x4Tofp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "__fp32x4Tofp16x4(float4 val)"
  },
  {
    "label": "__NvAtomicAddFP32()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "__NvAtomicAddFP32(RWByteAddressBuffer uav, uint byteAddress, float val)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x = byteAddress ; g_NvidiaExt [ index ] . src1u . x =)",
    "insertText": "asuint(val)"
  },
  {
    "label": "asfloat()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src2u . x = NV_EXTN_ATOM_ADD ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_FP32_ATOMIC ; return)",
    "insertText": "asfloat(g_NvidiaExt[index].dst0u.x)"
  },
  {
    "label": "__NvAtomicAddFP32()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "__NvAtomicAddFP32(RWTexture1D<float> uav, uint address, float val)"
  },
  {
    "label": "__NvAtomicAddFP32()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "__NvAtomicAddFP32(RWTexture2D<float> uav, uint2 address, float val)"
  },
  {
    "label": "__NvAtomicAddFP32()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "__NvAtomicAddFP32(RWTexture3D<float> uav, uint3 address, float val)"
  },
  {
    "label": "__NvAtomicCompareExchangeUINT64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "__NvAtomicCompareExchangeUINT64(RWByteAddressBuffer uav, uint byteAddress, uint2 compareValue, uint2 value)"
  },
  {
    "label": "__NvAtomicOpUINT64()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x = byteAddress ; g_NvidiaExt [ index ] . src1u . xy = compareValue ; g_NvidiaExt [ index ] . src1u . zw = value ; g_NvidiaExt [ index ] . src2u . x = NV_EXTN_ATOM_CAS ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_UINT64_ATOMIC ; return g_NvidiaExt [ index ] . dst0u . xy ; } uint2)",
    "insertText": "__NvAtomicOpUINT64(RWByteAddressBuffer uav, uint byteAddress, uint2 value, uint atomicOpType)"
  },
  {
    "label": "__NvAtomicCompareExchangeUINT64()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x = byteAddress ; g_NvidiaExt [ index ] . src1u . xy = value ; g_NvidiaExt [ index ] . src2u . x = atomicOpType ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_UINT64_ATOMIC ; return g_NvidiaExt [ index ] . dst0u . xy ; } uint2)",
    "insertText": "__NvAtomicCompareExchangeUINT64(RWTexture1D<uint2> uav, uint address, uint2 compareValue, uint2 value)"
  },
  {
    "label": "__NvAtomicOpUINT64()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x = address ; g_NvidiaExt [ index ] . src1u . xy = compareValue ; g_NvidiaExt [ index ] . src1u . zw = value ; g_NvidiaExt [ index ] . src2u . x = NV_EXTN_ATOM_CAS ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_UINT64_ATOMIC ; return g_NvidiaExt [ index ] . dst0u . xy ; } uint2)",
    "insertText": "__NvAtomicOpUINT64(RWTexture1D<uint2> uav, uint address, uint2 value, uint atomicOpType)"
  },
  {
    "label": "__NvAtomicCompareExchangeUINT64()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x = address ; g_NvidiaExt [ index ] . src1u . xy = value ; g_NvidiaExt [ index ] . src2u . x = atomicOpType ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_UINT64_ATOMIC ; return g_NvidiaExt [ index ] . dst0u . xy ; } uint2)",
    "insertText": "__NvAtomicCompareExchangeUINT64(RWTexture2D<uint2> uav, uint2 address, uint2 compareValue, uint2 value)"
  },
  {
    "label": "__NvAtomicOpUINT64()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . xy = address ; g_NvidiaExt [ index ] . src1u . xy = compareValue ; g_NvidiaExt [ index ] . src1u . zw = value ; g_NvidiaExt [ index ] . src2u . x = NV_EXTN_ATOM_CAS ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_UINT64_ATOMIC ; return g_NvidiaExt [ index ] . dst0u . xy ; } uint2)",
    "insertText": "__NvAtomicOpUINT64(RWTexture2D<uint2> uav, uint2 address, uint2 value, uint atomicOpType)"
  },
  {
    "label": "__NvAtomicCompareExchangeUINT64()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . xy = address ; g_NvidiaExt [ index ] . src1u . xy = value ; g_NvidiaExt [ index ] . src2u . x = atomicOpType ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_UINT64_ATOMIC ; return g_NvidiaExt [ index ] . dst0u . xy ; } uint2)",
    "insertText": "__NvAtomicCompareExchangeUINT64(RWTexture3D<uint2> uav, uint3 address, uint2 compareValue, uint2 value)"
  },
  {
    "label": "__NvAtomicOpUINT64()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . xyz = address ; g_NvidiaExt [ index ] . src1u . xy = compareValue ; g_NvidiaExt [ index ] . src1u . zw = value ; g_NvidiaExt [ index ] . src2u . x = NV_EXTN_ATOM_CAS ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_UINT64_ATOMIC ; return g_NvidiaExt [ index ] . dst0u . xy ; } uint2)",
    "insertText": "__NvAtomicOpUINT64(RWTexture3D<uint2> uav, uint3 address, uint2 value, uint atomicOpType)"
  },
  {
    "label": "__NvFootprint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . xyz = address ; g_NvidiaExt [ index ] . src1u . xy = value ; g_NvidiaExt [ index ] . src2u . x = atomicOpType ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_UINT64_ATOMIC ; return g_NvidiaExt [ index ] . dst0u . xy ; } uint4)",
    "insertText": "__NvFootprint(uint texSpace, uint texIndex, uint smpSpace, uint smpIndex, uint texType, float3 location, uint footprintmode, uint gran, int3 offset = int3(0, 0, 0))"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x = texIndex ; g_NvidiaExt [ index ] . src0u . y = smpIndex ; g_NvidiaExt [ index ] . src1u . xyz =)",
    "insertText": "asuint(location)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src1u . w = gran ; g_NvidiaExt [ index ] . src3u . x = texSpace ; g_NvidiaExt [ index ] . src3u . y = smpSpace ; g_NvidiaExt [ index ] . src3u . z = texType ; g_NvidiaExt [ index ] . src3u . w = footprintmode ; g_NvidiaExt [ index ] . src4u . xyz =)",
    "insertText": "asuint(offset)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src1u . w = gran ; g_NvidiaExt [ index ] . src2u . x =)",
    "insertText": "asuint(bias)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src1u . w = gran ; g_NvidiaExt [ index ] . src2u . x =)",
    "insertText": "asuint(lodLevel)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src1u . w = gran ; g_NvidiaExt [ index ] . src2u . xyz =)",
    "insertText": "asuint(ddx)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src5u . xyz =)",
    "insertText": "asuint(ddy)"
  },
  {
    "label": "__NvShflGeneric()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "__NvShflGeneric(int val, uint srcLane, uint maskClampVal, out uint laneValid)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x = val ; g_NvidiaExt [ index ] . src0u . y = srcLane ; g_NvidiaExt [ index ] . src0u . z = maskClampVal ; g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_SHFL_GENERIC ; g_NvidiaExt [ index ] . numOutputsForIncCounter = 2 ; laneValid =)",
    "insertText": "asuint(g_NvidiaExt.IncrementCounter())"
  }
]