[
  {
    "label": "FElementAllocationPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FElementAllocationPolicy"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "TInlinedElementAllocationPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TInlinedElementAllocationPolicy"
  },
  {
    "label": "FNetSerializerArrayStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetSerializerArrayStorage"
  },
  {
    "label": "FNetSerializerAlignedStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetSerializerAlignedStorage"
  },
  {
    "label": "ForElementType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Iris / IrisConfig . h \" # include \" Iris / Serialization / NetSerializationContext . h \" # include \" Templates / AlignmentTemplates . h \" # include \" Templates / IsPODType . h \" namespace UE::Net { namespace AllocationPolicies { class FElementAllocationPolicy { public : using SizeType = uint32 ; template<ElementType> class ForElementType { public :)",
    "insertText": "ForElementType() : Data(nullptr)"
  },
  {
    "label": "ForElementType()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ForElementType()"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (} ElementType*)",
    "insertText": "GetAllocation()"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (Data = nullptr ; } void)",
    "insertText": "ResizeAllocation(FNetSerializationContext& Context, SizeType PreviousNumElements, SizeType NumElements)"
  },
  {
    "label": "CalculateNewCapacity()",
    "kind": "Method",
    "detail": "Function (SizeType)",
    "insertText": "CalculateNewCapacity(SizeType NumElements)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (ElementType* Data ; } ; private : void)",
    "insertText": "Free(FNetSerializationContext& Context, void* Ptr)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Realloc(FNetSerializationContext& Context, void* Original, SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "HasAllocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAllocation()"
  },
  {
    "label": "GetInitialCapacity()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "GetInitialCapacity()"
  },
  {
    "label": "GetInlineElements()",
    "kind": "Method",
    "detail": "Function (TTypeCompatibleBytes<ElementType> InlineData [ NumInlineElements ] ; SecondaryAllocator::template ForElementType<ElementType> SecondaryData ; ElementType*)",
    "insertText": "GetInlineElements()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; } ; } template<QuantizedElementType,AllocationPolicy = AllocationPolicies::FElementAllocationPolicy> class FNetSerializerArrayStorage { public :)",
    "insertText": "static_assert(TIsPODType<QuantizedElementType>::Value, \"Only pod types are supported by FNetSerializerArrayHelper\")"
  },
  {
    "label": "FNetSerializerArrayStorage()",
    "kind": "Method",
    "detail": "Function (typedef FNetSerializerArrayStorage<QuantizedElementType,AllocationPolicy> ArrayType ; typedef QuantizedElementType ElementType ; typedef AllocationPolicy::template ForElementType<ElementType> ElementAllocatorType ; typedef AllocationPolicy::SizeType SizeType ; public :)",
    "insertText": "FNetSerializerArrayStorage()"
  },
  {
    "label": "AdjustSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustSize(FNetSerializationContext& Context, SizeType InNum)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(FNetSerializationContext& Context)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clone(FNetSerializationContext& Context, const ArrayType& Source)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const ElementType*)",
    "insertText": "GetData()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "Num()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clone(FNetSerializationContext& Context, const FNetSerializerAlignedStorage& Source)"
  },
  {
    "label": "GetAlignment()",
    "kind": "Method",
    "detail": "Function (SizeType)",
    "insertText": "GetAlignment()"
  },
  {
    "label": "FNetSerializerArrayStorage()",
    "kind": "Method",
    "detail": "Function (private : uint8* Data = nullptr ; SizeType StorageNum = 0 ; SizeType StorageMaxCapacity = 0 ; SizeType StorageAlignment = 0 ; } ; template<QuantizedElementType,AllocationPolicy> FNetSerializerArrayStorage<QuantizedElementType,AllocationPolicy)",
    "insertText": "FNetSerializerArrayStorage() : ArrayNum(0) , ArrayMaxCapacity(AllocatorInstance.GetInitialCapacity())"
  },
  {
    "label": "CalculateNewCapacity()",
    "kind": "Method",
    "detail": "Function (const SizeType NewCapacity = AllocatorInstance .)",
    "insertText": "CalculateNewCapacity(InNum)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (AllocatorInstance .)",
    "insertText": "ResizeAllocation(Context, ArrayNum, NewCapacity)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ArrayMaxCapacity = NewCapacity ;)",
    "insertText": "if(NewCapacity > ArrayNum)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(GetData() + ArrayNum, (NewCapacity - ArrayNum) * sizeof(ElementType))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} ArrayNum =)",
    "insertText": "Min(InNum, NewCapacity)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (AllocatorInstance .)",
    "insertText": "ResizeAllocation(Context, ArrayNum, 0)"
  },
  {
    "label": "CalculateNewCapacity()",
    "kind": "Method",
    "detail": "Function (const SizeType NewCapacity = AllocatorInstance .)",
    "insertText": "CalculateNewCapacity(SourceNum)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (AllocatorInstance .)",
    "insertText": "ResizeAllocation(Context, 0, NewCapacity)"
  },
  {
    "label": "CopyAssignItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAssignItems(GetData(), Source.GetData(), SourceNum)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(GetData() + SourceNum, (NewCapacity - SourceNum) * sizeof(ElementType))"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Context, Data)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Data = nullptr ; } } else { SIZE_T ElementSize =)",
    "insertText": "sizeof(ElementType)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (SIZE_T ElementAlignment =)",
    "insertText": "alignof(ElementType)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Data(ElementType*)Realloc(Context, Data, NumElements*ElementSize, ElementAlignment)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (RelocateConstructItems<)",
    "insertText": "ElementType((void*)InlineData, (ElementType*)SecondaryData.GetAllocation(), FMath::Min(PreviousNumElements, NumInlineElements))"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (SecondaryData .)",
    "insertText": "ResizeAllocation(Context, 0, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(!SecondaryData.GetAllocation())"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (SecondaryData .)",
    "insertText": "ResizeAllocation(Context, 0, NumElements)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (RelocateConstructItems<)",
    "insertText": "ElementType((void*)SecondaryData.GetAllocation(), GetInlineElements(), PreviousNumElements)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (} else { SecondaryData .)",
    "insertText": "ResizeAllocation(Context, PreviousNumElements, NumElements)"
  }
]