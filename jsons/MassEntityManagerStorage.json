[
  {
    "label": "FMassArchetypeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeData"
  },
  {
    "label": "FMassEntityHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassEntityHandle"
  },
  {
    "label": "MASSENTITY_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MASSENTITY_API"
  },
  {
    "label": "IEntityStorageInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEntityStorageInterface"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSingleThreadedEntityStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleThreadedEntityStorage"
  },
  {
    "label": "FEntityData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityData"
  },
  {
    "label": "FConcurrentEntityStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConcurrentEntityStorage"
  },
  {
    "label": "IEntityStorageInterface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Mutex . h \" # include \" Containers / ChunkedArray . h \" # include \" Misc / TVariant . h \" # include \" Templates / SharedPointer . h \" # include \" MassProcessingTypes . h \" struct FMassArchetypeData ; struct FMassEntityHandle ; struct FMassEntityManager_InitParams_SingleThreaded { } ; struct FMassEntityManager_InitParams_Concurrent { uint32 MaxEntityCount = 1<<3 0 ; uint32 MaxEntitiesPerPage = 1<<1 6 ; } ; using FMassEntityManagerStorageInitParams = TVariant<FMassEntityManager_InitParams_SingleThreaded,FMassEntityManager_InitParams_Concurrent> ; namespace UE::Mass { class IEntityStorageInterface { public : enum class EEntityState { Free,Reserved,Created } ; ~)",
    "insertText": "IEntityStorageInterface()"
  },
  {
    "label": "GetArchetype()",
    "kind": "Method",
    "detail": "Function (FMassArchetypeData*)",
    "insertText": "GetArchetype(int32 Index)"
  },
  {
    "label": "GetArchetypeAsShared()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMassArchetypeData>&)",
    "insertText": "GetArchetypeAsShared(int32 Index)"
  },
  {
    "label": "SetArchetypeFromShared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArchetypeFromShared(int32 Index, TSharedPtr<FMassArchetypeData>& Archetype)"
  },
  {
    "label": "SetArchetypeFromShared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArchetypeFromShared(int32 Index, const TSharedPtr<FMassArchetypeData>& Archetype)"
  },
  {
    "label": "GetEntityState()",
    "kind": "Method",
    "detail": "Function (EEntityState)",
    "insertText": "GetEntityState(int32 Index)"
  },
  {
    "label": "GetSerialNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSerialNumber(int32 Index)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(int32 Index)"
  },
  {
    "label": "AcquireOne()",
    "kind": "Method",
    "detail": "Function (FMassEntityHandle)",
    "insertText": "AcquireOne()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Acquire(const int32 Count, TArray<FMassEntityHandle>& OutEntityHandles)"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Acquire(TArrayView<FMassEntityHandle> OutEntityHandles)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Release(TConstArrayView<FMassEntityHandle> Handles)"
  },
  {
    "label": "ReleaseOne()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReleaseOne(FMassEntityHandle Handles)"
  },
  {
    "label": "ForceRelease()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ForceRelease(TConstArrayView<FMassEntityHandle> Handles)"
  },
  {
    "label": "ForceReleaseOne()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ForceReleaseOne(FMassEntityHandle Handle)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "ComputeFreeSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeFreeSize()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} ; class FSingleThreadedEntityStorage final : public IEntityStorageInterface { public : void)",
    "insertText": "Initialize(const FMassEntityManager_InitParams_SingleThreaded&)"
  },
  {
    "label": "SetArchetypeFromShared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArchetypeFromShared(int32 Index, TSharedPtr<FMassArchetypeData>&)"
  },
  {
    "label": "SetArchetypeFromShared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArchetypeFromShared(int32 Index, const TSharedPtr<FMassArchetypeData>&)"
  },
  {
    "label": "ReleaseOne()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReleaseOne(FMassEntityHandle Handle)"
  },
  {
    "label": "FEntityData()",
    "kind": "Method",
    "detail": "Function (private : struct FEntityData { TSharedPtr<FMassArchetypeData> CurrentArchetype ; int32 SerialNumber = 0 ; ~)",
    "insertText": "FEntityData()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} ; std::atomic<int32> SerialNumberGenerator = 0 ; TChunkedArray<FEntityData> Entities ; TArray<int32> EntityFreeIndexList ; } ; class FConcurrentEntityStorage final : public IEntityStorageInterface { public : void)",
    "insertText": "Initialize(const FMassEntityManager_InitParams_Concurrent& InInitializationParams)"
  },
  {
    "label": "FConcurrentEntityStorage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FConcurrentEntityStorage()"
  },
  {
    "label": "DebugAssumptionsSelfTest()",
    "kind": "Method",
    "detail": "Function (# if WITH_MASSENTITY_DEBUG bool)",
    "insertText": "DebugAssumptionsSelfTest()"
  },
  {
    "label": "GetSerialNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSerialNumber()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FEntityData& Other)"
  },
  {
    "label": "LookupEntity()",
    "kind": "Method",
    "detail": "Function (} ; FEntityData&)",
    "insertText": "LookupEntity(int32 Index)"
  },
  {
    "label": "ComputePageSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "ComputePageSize()"
  },
  {
    "label": "AddPage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPage()"
  }
]