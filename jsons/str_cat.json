[
  {
    "label": "AlphaNumBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AlphaNumBuffer"
  },
  {
    "label": "PadSpec",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PadSpec"
  },
  {
    "label": "Hex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Hex"
  },
  {
    "label": "Dec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Dec"
  },
  {
    "label": "AlphaNum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AlphaNum"
  },
  {
    "label": "Hex()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_STR_CAT_H_ # define ABSL_STRINGS_STR_CAT_H_ # include<array> # include<cstdint> # include<string> # include<type_traits> # include<utility> # include<vector> # include \" absl / base / port . h \" # include \" absl / strings / internal / stringify_sink . h \" # include \" absl / strings / numbers . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace strings_internal { template<size_t max_size> struct AlphaNumBuffer { std::array<char,max_size> data ; size_t size ; } ; } enum PadSpec : uint8_t { kNoPad = 1,kZeroPad2,kZeroPad3,kZeroPad4,kZeroPad5,kZeroPad6,kZeroPad7,kZeroPad8,kZeroPad9,kZeroPad10,kZeroPad11,kZeroPad12,kZeroPad13,kZeroPad14,kZeroPad15,kZeroPad16,kZeroPad17,kZeroPad18,kZeroPad19,kZeroPad20,kSpacePad2 = kZeroPad2 + 6 4,kSpacePad3,kSpacePad4,kSpacePad5,kSpacePad6,kSpacePad7,kSpacePad8,kSpacePad9,kSpacePad10,kSpacePad11,kSpacePad12,kSpacePad13,kSpacePad14,kSpacePad15,kSpacePad16,kSpacePad17,kSpacePad18,kSpacePad19,kSpacePad20,} ; struct Hex { uint64_t value ; uint8_t width ; char fill ; template<Int>)",
    "insertText": "Hex(Int v, PadSpec spec = absl::kNoPad, typename std::enable_if<sizeof(Int) == 1 && !std::is_pointer<Int>::value>::type* = nullptr) : Hex(spec, static_cast<uint8_t>(v))"
  },
  {
    "label": "Hex()",
    "kind": "Method",
    "detail": "Function (} template<Int>)",
    "insertText": "Hex(Int v, PadSpec spec = absl::kNoPad, typename std::enable_if<sizeof(Int) == 2 && !std::is_pointer<Int>::value>::type* = nullptr) : Hex(spec, static_cast<uint16_t>(v))"
  },
  {
    "label": "Hex()",
    "kind": "Method",
    "detail": "Function (} template<Int>)",
    "insertText": "Hex(Int v, PadSpec spec = absl::kNoPad, typename std::enable_if<sizeof(Int) == 4 && !std::is_pointer<Int>::value>::type* = nullptr) : Hex(spec, static_cast<uint32_t>(v))"
  },
  {
    "label": "Hex()",
    "kind": "Method",
    "detail": "Function (} template<Int>)",
    "insertText": "Hex(Int v, PadSpec spec = absl::kNoPad, typename std::enable_if<sizeof(Int) == 8 && !std::is_pointer<Int>::value>::type* = nullptr) : Hex(spec, static_cast<uint64_t>(v))"
  },
  {
    "label": "Hex()",
    "kind": "Method",
    "detail": "Function (} template<Pointee>)",
    "insertText": "Hex(Pointee* v, PadSpec spec = absl::kNoPad) : Hex(spec, reinterpret_cast<uintptr_t>(v))"
  },
  {
    "label": "Hex()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "Hex(PadSpec spec, uint64_t v) : value(v), width(spec == absl::kNoPad ? 1 : spec >= absl::kSpacePad2 ? spec - absl::kSpacePad2 + 2 : spec - absl::kZeroPad2 + 2), fill(spec >= absl::kSpacePad2 ? ' ' : '0')"
  },
  {
    "label": "Dec()",
    "kind": "Method",
    "detail": "Function (} } ; struct Dec { uint64_t value ; uint8_t width ; char fill ; bool neg ; template<Int>)",
    "insertText": "Dec(Int v, PadSpec spec = absl::kNoPad, typename std::enable_if<(sizeof(Int) <= 8)>::type* = nullptr) : value(v >= 0 ? static_cast<uint64_t>(v) : uint64_t{0} - static_cast<uint64_t>(v)), width(spec == absl::kNoPad ? 1 : spec >= absl::kSpacePad2 ? spec - absl::kSpacePad2 + 2 : spec - absl::kZeroPad2 + 2), fill(spec >= absl::kSpacePad2 ? ' ' : '0'), neg(v < 0)"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (} } ; class AlphaNum { public :)",
    "insertText": "AlphaNum(int x) : piece_(digits_, static_cast<size_t>( numbers_internal::FastIntToBuffer(x, digits_) - &digits_[0]))"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlphaNum(unsigned int x) : piece_(digits_, static_cast<size_t>( numbers_internal::FastIntToBuffer(x, digits_) - &digits_[0]))"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlphaNum(long x) : piece_(digits_, static_cast<size_t>( numbers_internal::FastIntToBuffer(x, digits_) - &digits_[0]))"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlphaNum(unsigned long x) : piece_(digits_, static_cast<size_t>( numbers_internal::FastIntToBuffer(x, digits_) - &digits_[0]))"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlphaNum(long long x) : piece_(digits_, static_cast<size_t>( numbers_internal::FastIntToBuffer(x, digits_) - &digits_[0]))"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlphaNum(unsigned long long x) : piece_(digits_, static_cast<size_t>( numbers_internal::FastIntToBuffer(x, digits_) - &digits_[0]))"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlphaNum(float f) : piece_(digits_, numbers_internal::SixDigitsToBuffer(f, digits_))"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlphaNum(double f) : piece_(digits_, numbers_internal::SixDigitsToBuffer(f, digits_))"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlphaNum(Hex hex)"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlphaNum(Dec dec)"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (template<size_t size>)",
    "insertText": "AlphaNum(const strings_internal::AlphaNumBuffer<size>& buf) : piece_(&buf.data[0], buf.size)"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlphaNum(const char* c_str) : piece_(NullSafeStringView(c_str))"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlphaNum(absl::string_view pc) : piece_(pc)"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (} template<T,= std::enable_if<strings_internal::HasAbslStringify<T>::value>::type>)",
    "insertText": "AlphaNum(const T& v, strings_internal::StringifySink&& sink = {}) : piece_(strings_internal::ExtractStringification(sink, v))"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (} template<Allocator>)",
    "insertText": "AlphaNum(const std::basic_string<char, std::char_traits<char>, Allocator>& str) : piece_(str)"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlphaNum(char c)"
  },
  {
    "label": "AlphaNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlphaNum(const AlphaNum&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AlphaNum&)",
    "insertText": "operator(const AlphaNum&)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (absl::string_view::size_type)",
    "insertText": "size()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "data()"
  },
  {
    "label": "Piece()",
    "kind": "Method",
    "detail": "Function (} absl::string_view)",
    "insertText": "Piece()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} template<T,std::enable_if<std::is_class<T)",
    "insertText": "value(std::is_same<T, std::vector<bool>::reference>::value || std::is_same<T, std::vector<bool>::const_reference>::value)>::type* = nullptr> AlphaNum(T e) : AlphaNum(static_cast<bool>(e))"
  },
  {
    "label": "CatPieces()",
    "kind": "Method",
    "detail": "Function (} private : absl::string_view piece_ ; char digits_ [ numbers_internal::kFastToBufferSize ] ; } ; namespace strings_internal { std::string)",
    "insertText": "CatPieces(std::initializer_list<absl::string_view> pieces)"
  },
  {
    "label": "AppendPieces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPieces(std::string* dest, std::initializer_list<absl::string_view> pieces)"
  },
  {
    "label": "StrCat()",
    "kind": "Method",
    "detail": "Function (} ABSL_MUST_USE_RESULT std::string)",
    "insertText": "StrCat()"
  },
  {
    "label": "StrCat()",
    "kind": "Method",
    "detail": "Function (} ABSL_MUST_USE_RESULT std::string)",
    "insertText": "StrCat(const AlphaNum& a)"
  },
  {
    "label": "StrCat()",
    "kind": "Method",
    "detail": "Function (} ABSL_MUST_USE_RESULT std::string)",
    "insertText": "StrCat(const AlphaNum& a, const AlphaNum& b)"
  },
  {
    "label": "StrCat()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT std::string)",
    "insertText": "StrCat(const AlphaNum& a, const AlphaNum& b, const AlphaNum& c)"
  },
  {
    "label": "StrCat()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT std::string)",
    "insertText": "StrCat(const AlphaNum& a, const AlphaNum& b, const AlphaNum& c, const AlphaNum& d)"
  },
  {
    "label": "StrCat()",
    "kind": "Method",
    "detail": "Function (template<. . . AV> ABSL_MUST_USE_RESULT std::string)",
    "insertText": "StrCat(const AlphaNum& a, const AlphaNum& b, const AlphaNum& c, const AlphaNum& d, const AlphaNum& e, const AV&... args)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StrAppend(std::string*)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StrAppend(std::string* dest, const AlphaNum& a)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrAppend(std::string* dest, const AlphaNum& a, const AlphaNum& b)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrAppend(std::string* dest, const AlphaNum& a, const AlphaNum& b, const AlphaNum& c)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrAppend(std::string* dest, const AlphaNum& a, const AlphaNum& b, const AlphaNum& c, const AlphaNum& d)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (template<. . . AV> void)",
    "insertText": "StrAppend(std::string* dest, const AlphaNum& a, const AlphaNum& b, const AlphaNum& c, const AlphaNum& d, const AlphaNum& e, const AV&... args)"
  },
  {
    "label": "AppendPieces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPieces(dest, {a.Piece(), b.Piece(), c.Piece(), d.Piece(), e.Piece(), static_cast<const AlphaNum&>(args).Piece()...})"
  },
  {
    "label": "SixDigits()",
    "kind": "Method",
    "detail": "Function (} strings_internal::AlphaNumBuffer<numbers_internal::kSixDigitsToBufferSize>)",
    "insertText": "SixDigits(double d)"
  },
  {
    "label": "SixDigitsToBuffer()",
    "kind": "Method",
    "detail": "Function (strings_internal::AlphaNumBuffer<numbers_internal::kSixDigitsToBufferSize> result ; result . size =)",
    "insertText": "SixDigitsToBuffer(d, &result.data[0])"
  }
]