[
  {
    "label": "decrement_if_fixed_size",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "decrement_if_fixed_size"
  },
  {
    "label": "companion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "companion"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_COMPANION_H # define EIGEN_COMPANION_H namespace Eigen { namespace internal { # ifndef EIGEN_PARSED_BY_DOXYGEN template<int Size> struct decrement_if_fixed_size { enum {)",
    "insertText": "ret(Size == Dynamic)"
  },
  {
    "label": "EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE()",
    "kind": "Method",
    "detail": "Function (} ; # endif template<_Scalar,int _Deg> class companion { public :)",
    "insertText": "EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE(_Scalar,_Deg==Dynamic ? Dynamic : _Deg)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Deg = _Deg,Deg_1 = decrement_if_fixed_size<Deg>::ret } ; typedef _Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef Matrix<Scalar,Deg,1> RightColumn ; typedef Matrix<Scalar,Deg_1,1> BottomLeftDiagonal ; typedef Matrix<Scalar,Deg,Deg> DenseCompanionMatrixType ; typedef Matrix<Scalar,_Deg,Deg_1> LeftBlock ; typedef Matrix<Scalar,Deg_1,Deg_1> BottomLeftBlock ; typedef Matrix<Scalar,1,Deg_1> LeftBlockFirstRow ; typedef DenseIndex Index ; public : EIGEN_STRONG_INLINE const _Scalar)",
    "insertText": "operator()(Index row, Index col)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Index deg = poly .)",
    "insertText": "size()"
  },
  {
    "label": "head()",
    "kind": "Method",
    "detail": "Function (m_monic = - poly .)",
    "insertText": "head(deg)"
  },
  {
    "label": "setOnes()",
    "kind": "Method",
    "detail": "Function (m_bl_diag .)",
    "insertText": "setOnes(deg-1)"
  },
  {
    "label": "companion()",
    "kind": "Method",
    "detail": "Function (} template<VectorType>)",
    "insertText": "companion(const VectorType& poly)"
  },
  {
    "label": "setPolynomial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPolynomial(poly)"
  },
  {
    "label": "denseMatrix()",
    "kind": "Method",
    "detail": "Function (} public : DenseCompanionMatrixType)",
    "insertText": "denseMatrix()"
  },
  {
    "label": "companMat()",
    "kind": "Method",
    "detail": "Function (const Index deg_1 = deg - 1 ; DenseCompanionMatrixType)",
    "insertText": "companMat(deg,deg)"
  },
  {
    "label": "companMat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "companMat(LeftBlock(deg,deg_1) << LeftBlockFirstRow::Zero(1,deg_1), BottomLeftBlock::Identity(deg-1,deg-1)*m_bl_diag.asDiagonal() ).finished()"
  },
  {
    "label": "balancedR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "balancedR(RealScalar colNorm, RealScalar rowNorm, bool& isBalanced, RealScalar& colB, RealScalar& rowB)"
  },
  {
    "label": "balance()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "balance()"
  },
  {
    "label": "balanced()",
    "kind": "Method",
    "detail": "Function (protected : RightColumn m_monic ; BottomLeftDiagonal m_bl_diag ; } ; template<_Scalar,int _Deg> bool companion<_Scalar,_Deg)",
    "insertText": "balanced(RealScalar colNorm, RealScalar rowNorm, bool& isBalanced, RealScalar& colB, RealScalar& rowB)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (const RealScalar radix2 =)",
    "insertText": "RealScalar(4)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (rowB = rowNorm / radix ; colB =)",
    "insertText": "RealScalar(1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const RealScalar s = colNorm + rowNorm ; RealScalar scout = colNorm ;)",
    "insertText": "while(scout < rowB)"
  },
  {
    "label": "colNorm()",
    "kind": "Method",
    "detail": "Function (colB* = radix ; scout* = radix2 ; } scout =)",
    "insertText": "colNorm(colB / radix)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (colB / = radix ; scout / = radix2 ; })",
    "insertText": "if((rowNorm + radix * scout) < RealScalar(0.95) * s * colB)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (rowB =)",
    "insertText": "sqrt(colNorm/rowNorm)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (using std::abs ;)",
    "insertText": "EIGEN_STATIC_ASSERT(Deg == Dynamic || 1 < Deg, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const Index deg_1 = deg - 1 ; bool hasConverged = false ;)",
    "insertText": "while(!hasConverged)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (hasConverged = true ; RealScalar colNorm,rowNorm ; RealScalar colB,rowB ; colNorm =)",
    "insertText": "abs(m_bl_diag[0])"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (rowNorm =)",
    "insertText": "abs(m_monic[0])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_bl_diag [ 0 ]* = colB ; m_monic [ 0 ]* = rowB ; })",
    "insertText": "for(Index i=1; i<deg_1; ++i)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (colNorm =)",
    "insertText": "abs(m_bl_diag[i])"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (rowNorm =)",
    "insertText": "abs(m_bl_diag[i-1]) + abs(m_monic[i])"
  },
  {
    "label": "headMonic()",
    "kind": "Method",
    "detail": "Function (VectorBlock<RightColumn,Deg_1>)",
    "insertText": "headMonic(m_monic, 0, deg_1)"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (colNorm = headMonic .)",
    "insertText": "array().abs().sum()"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (rowNorm =)",
    "insertText": "abs(m_bl_diag[ebl])"
  }
]