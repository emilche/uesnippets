[
  {
    "label": "FrameDecryptorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameDecryptorInterface"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Result"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (# ifndef API_CRYPTO_FRAME_DECRYPTOR_INTERFACE_H_ # define API_CRYPTO_FRAME_DECRYPTOR_INTERFACE_H_ # include<vector> # include \" api / array_view . h \" # include \" api / media_types . h \" # include \" rtc_base / ref_count . h \" namespace webrtc { class FrameDecryptorInterface : public rtc::RefCountInterface { public : enum class Status { kOk,kRecoverable,kFailedToDecrypt,kUnknown } ; struct Result {)",
    "insertText": "Result(Status status, size_t bytes_written) : status(status), bytes_written(bytes_written)"
  },
  {
    "label": "IsOk()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOk()"
  },
  {
    "label": "Decrypt()",
    "kind": "Method",
    "detail": "Function (} Result)",
    "insertText": "Decrypt(cricket::MediaType media_type, const std::vector<uint32_t>& csrcs, rtc::ArrayView<const uint8_t> additional_data, rtc::ArrayView<const uint8_t> encrypted_frame, rtc::ArrayView<uint8_t> frame)"
  },
  {
    "label": "GetMaxPlaintextByteSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetMaxPlaintextByteSize(cricket::MediaType media_type, size_t encrypted_frame_size)"
  }
]