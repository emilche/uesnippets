[
  {
    "label": "AEmitterCameraLensEffectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AEmitterCameraLensEffectBase"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "UCameraModifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraModifier"
  },
  {
    "label": "UCameraShakeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeBase"
  },
  {
    "label": "UCameraShakeSourceComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeSourceComponent"
  },
  {
    "label": "ICameraLensEffectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICameraLensEffectInterface"
  },
  {
    "label": "FAddCameraShakeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddCameraShakeParams"
  },
  {
    "label": "EViewTargetBlendFunction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EViewTargetBlendFunction"
  },
  {
    "label": "EViewTargetBlendOrder",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EViewTargetBlendOrder"
  },
  {
    "label": "FCameraCacheEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCameraCacheEntry"
  },
  {
    "label": "FTViewTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTViewTarget"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "FViewTargetTransitionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewTargetTransitionParams"
  },
  {
    "label": "EViewTargetBlendFunction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EViewTargetBlendFunction"
  },
  {
    "label": "APlayerCameraManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerCameraManager"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FTViewTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTViewTarget"
  },
  {
    "label": "FTViewTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTViewTarget"
  },
  {
    "label": "FViewTargetTransitionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewTargetTransitionParams"
  },
  {
    "label": "FCameraCacheEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCameraCacheEntry"
  },
  {
    "label": "FCameraCacheEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCameraCacheEntry"
  },
  {
    "label": "ICameraLensEffectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICameraLensEffectInterface"
  },
  {
    "label": "UCameraModifier_CameraShake",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraModifier_CameraShake"
  },
  {
    "label": "FPostProcessSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessSettings"
  },
  {
    "label": "FPostProcessSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessSettings"
  },
  {
    "label": "FPostProcessSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessSettings"
  },
  {
    "label": "FPostProcessSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessSettings"
  },
  {
    "label": "ACameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACameraActor"
  },
  {
    "label": "FViewTargetTransitionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewTargetTransitionParams"
  },
  {
    "label": "FTViewTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTViewTarget"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "APlayerCameraManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerCameraManager"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "match",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "match"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ICameraLensEffectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICameraLensEffectInterface"
  },
  {
    "label": "on",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "on"
  },
  {
    "label": "ICameraLensEffectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICameraLensEffectInterface"
  },
  {
    "label": "ICameraLensEffectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICameraLensEffectInterface"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "originating",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "originating"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "SetNewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewTarget(AActor* NewTarget)"
  },
  {
    "label": "CheckViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckViewTarget(APlayerController* OwningController)"
  },
  {
    "label": "SetCameraCachePOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraCachePOV(const FMinimalViewInfo& InPOV)"
  },
  {
    "label": "SetLastFrameCameraCachePOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastFrameCameraCachePOV(const FMinimalViewInfo& InPOV)"
  },
  {
    "label": "AddCachedPPBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCachedPPBlend(struct FPostProcessSettings& PPSettings, float BlendWeight, EViewTargetBlendOrder BlendOrder = VTBlendOrder_Base)"
  },
  {
    "label": "ClearCachedPPBlends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedPPBlends()"
  },
  {
    "label": "PhotographyCameraModify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhotographyCameraModify(const FVector NewCameraLocation, const FVector PreviousCameraLocation, const FVector OriginalCameraLocation, FVector& ResultCameraLocation)"
  },
  {
    "label": "OnPhotographySessionStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPhotographySessionStart()"
  },
  {
    "label": "OnPhotographySessionEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPhotographySessionEnd()"
  },
  {
    "label": "OnPhotographyMultiPartCaptureStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPhotographyMultiPartCaptureStart()"
  },
  {
    "label": "OnPhotographyMultiPartCaptureEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPhotographyMultiPartCaptureEnd()"
  },
  {
    "label": "BlueprintUpdateCamera()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BlueprintUpdateCamera(AActor* CameraTarget, FVector& NewCameraLocation, FRotator& NewCameraRotation, float& NewCameraFOV)"
  },
  {
    "label": "PlayWorldCameraShake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayWorldCameraShake(UWorld* InWorld, TSubclassOf<UCameraShakeBase> Shake, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter = false)"
  },
  {
    "label": "CalcRadialShakeScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcRadialShakeScale(class APlayerCameraManager* Cam, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff)"
  },
  {
    "label": "UpdateCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCamera(float DeltaTime)"
  },
  {
    "label": "UpdateCameraPhotographyOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraPhotographyOnly()"
  },
  {
    "label": "RemoveCameraModifier()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveCameraModifier(UCameraModifier* ModifierToRemove)"
  },
  {
    "label": "AddCameraModifierToList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCameraModifierToList(UCameraModifier* NewModifier)"
  },
  {
    "label": "CleanUpAnimCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpAnimCamera(const bool bDestroy)"
  },
  {
    "label": "ApplyCameraModifiers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCameraModifiers(float DeltaTime, FMinimalViewInfo& InOutPOV)"
  },
  {
    "label": "InitializeFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFor(class APlayerController* PC)"
  },
  {
    "label": "SetFOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFOV(float NewFOV)"
  },
  {
    "label": "UnlockFOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockFOV()"
  },
  {
    "label": "SetOrthoWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrthoWidth(float OrthoWidth)"
  },
  {
    "label": "UnlockOrthoWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockOrthoWidth()"
  },
  {
    "label": "SetDesiredColorScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDesiredColorScale(FVector NewColorScale, float InterpTime)"
  },
  {
    "label": "DoUpdateCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoUpdateCamera(float DeltaTime)"
  },
  {
    "label": "UpdatePhotographyCamera()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePhotographyCamera(FMinimalViewInfo& NewPOV)"
  },
  {
    "label": "UpdatePhotographyPostProcessing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePhotographyPostProcessing(FPostProcessSettings& InOutPostProcessing)"
  },
  {
    "label": "ApplyAudioFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAudioFade()"
  },
  {
    "label": "StopAudioFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAudioFade()"
  },
  {
    "label": "BlendViewTargets()",
    "kind": "Method",
    "detail": "Function (FPOV)",
    "insertText": "BlendViewTargets(const FTViewTarget& A, const FTViewTarget& B, float Alpha)"
  },
  {
    "label": "FillCameraCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillCameraCache(const FMinimalViewInfo& NewInfo)"
  },
  {
    "label": "UpdateViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewTarget(FTViewTarget& OutVT, float DeltaTime)"
  },
  {
    "label": "UpdateCameraLensEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraLensEffects( const FTViewTarget& OutVT )"
  },
  {
    "label": "ProcessViewRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessViewRotation(float DeltaTime, FRotator& OutViewRotation, FRotator& OutDeltaRot)"
  },
  {
    "label": "RemoveGenericCameraLensEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGenericCameraLensEffect(TScriptInterface<class ICameraLensEffectInterface> Emitter)"
  },
  {
    "label": "ClearCameraLensEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCameraLensEffects()"
  },
  {
    "label": "RemoveCameraLensEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCameraLensEffect(AEmitterCameraLensEffectBase* Emitter)"
  },
  {
    "label": "StopCameraShake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCameraShake(UCameraShakeBase* ShakeInstance, bool bImmediately = true)"
  },
  {
    "label": "StopAllInstancesOfCameraShake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllInstancesOfCameraShake(TSubclassOf<UCameraShakeBase> Shake, bool bImmediately = true)"
  },
  {
    "label": "StopAllCameraShakes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllCameraShakes(bool bImmediately = true)"
  },
  {
    "label": "StopAllInstancesOfCameraShakeFromSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllInstancesOfCameraShakeFromSource(TSubclassOf<UCameraShakeBase> Shake, UCameraShakeSourceComponent* SourceComponent, bool bImmediately = true)"
  },
  {
    "label": "StopAllCameraShakesFromSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllCameraShakesFromSource(UCameraShakeSourceComponent* SourceComponent, bool bImmediately = true)"
  },
  {
    "label": "StartCameraFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCameraFade(float FromAlpha, float ToAlpha, float Duration, FLinearColor Color, bool bShouldFadeAudio = false, bool bHoldWhenFinished = false)"
  },
  {
    "label": "StopCameraFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCameraFade()"
  },
  {
    "label": "SetManualCameraFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetManualCameraFade(float InFadeAmount, FLinearColor Color, bool bInFadeAudio)"
  },
  {
    "label": "LimitViewPitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LimitViewPitch(FRotator& ViewRotation, float InViewPitchMin, float InViewPitchMax)"
  },
  {
    "label": "LimitViewRoll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LimitViewRoll(FRotator& ViewRotation, float InViewRollMin, float InViewRollMax)"
  },
  {
    "label": "LimitViewYaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LimitViewYaw(FRotator& ViewRotation, float InViewYawMin, float InViewYawMax)"
  },
  {
    "label": "UpdateViewTargetInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewTargetInternal(FTViewTarget& OutVT, float DeltaTime)"
  },
  {
    "label": "SwapPendingViewTargetWhenUsingClientSideCameraUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapPendingViewTargetWhenUsingClientSideCameraUpdates()"
  }
]