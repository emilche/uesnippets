[
  {
    "label": "AEmitterCameraLensEffectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AEmitterCameraLensEffectBase"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "UCameraModifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraModifier"
  },
  {
    "label": "UCameraShakeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeBase"
  },
  {
    "label": "UCameraShakeSourceComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeSourceComponent"
  },
  {
    "label": "ICameraLensEffectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICameraLensEffectInterface"
  },
  {
    "label": "FAddCameraShakeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddCameraShakeParams"
  },
  {
    "label": "EViewTargetBlendFunction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EViewTargetBlendFunction"
  },
  {
    "label": "EViewTargetBlendOrder",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EViewTargetBlendOrder"
  },
  {
    "label": "FCameraCacheEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCameraCacheEntry"
  },
  {
    "label": "FTViewTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTViewTarget"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "FViewTargetTransitionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewTargetTransitionParams"
  },
  {
    "label": "APlayerCameraManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerCameraManager"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "UCameraModifier_CameraShake",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraModifier_CameraShake"
  },
  {
    "label": "FPostProcessSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessSettings"
  },
  {
    "label": "ACameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACameraActor"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # include \" GameFramework / Actor . h \" # include \" Camera / CameraTypes . h \" # include \" UObject / ScriptInterface . h \" # include \" PlayerCameraManager . generated . h \" class AEmitterCameraLensEffectBase ; class APlayerController ; class FDebugDisplayInfo ; class UCameraModifier ; class UCameraShakeBase ; class UCameraShakeSourceComponent ; class ICameraLensEffectInterface ; struct FAddCameraShakeParams ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnAudioFadeChangeSignature, bool, bFadeOut, float, FadeTime)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (VTBlendOrder_Base,VTBlendOrder_Override } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY()"
  },
  {
    "label": "FCameraCacheEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCameraCacheEntry() : TimeStamp(0.f)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=TViewTarget)"
  },
  {
    "label": "GetPlayerState()",
    "kind": "Method",
    "detail": "Function (public : class APlayerState*)",
    "insertText": "GetPlayerState()"
  },
  {
    "label": "GetTargetPawn()",
    "kind": "Method",
    "detail": "Function (class APawn*)",
    "insertText": "GetTargetPawn()"
  },
  {
    "label": "Equal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equal(const FTViewTarget& OtherTarget)"
  },
  {
    "label": "FTViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTViewTarget() : Target(nullptr) , PlayerState(nullptr)"
  },
  {
    "label": "CheckViewTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckViewTarget(APlayerController* OwningController)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=ViewTargetTransitionParams)"
  },
  {
    "label": "FViewTargetTransitionParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewTargetTransitionParams() : BlendTime(0.f) , BlendFunction(VTBlend_Cubic) , BlendExp(2.f) , bLockOutgoing(false)"
  },
  {
    "label": "GetBlendAlpha()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetBlendAlpha(const float& TimePct)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (default : break ; } return 1 . f ; } } ;)",
    "insertText": "UCLASS(notplaceable, transient, BlueprintType, Blueprintable, Config=Engine, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() ENGINE_API virtual ~APlayerCameraManager()"
  },
  {
    "label": "GetLockedFOV()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLockedFOV()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (float BlendTimeToGo ; struct FViewTargetTransitionParams BlendParams ; public :)",
    "insertText": "DECLARE_EVENT(APlayerCameraManager, FOnBlendComplete) FOnBlendComplete& OnBlendComplete()"
  },
  {
    "label": "ForEachCameraModifier()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ForEachCameraModifier(TFunctionRef<bool(UCameraModifier*)> Fn)"
  },
  {
    "label": "SetCameraCachePOV()",
    "kind": "Method",
    "detail": "Function (FVector2D FadeAlpha ; float FadeTime ; float FadeTimeRemaining ; void)",
    "insertText": "SetCameraCachePOV(const FMinimalViewInfo& InPOV)"
  },
  {
    "label": "SetLastFrameCameraCachePOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastFrameCameraCachePOV(const FMinimalViewInfo& InPOV)"
  },
  {
    "label": "GetCameraCacheView()",
    "kind": "Method",
    "detail": "Function (const FMinimalViewInfo&)",
    "insertText": "GetCameraCacheView()"
  },
  {
    "label": "GetLastFrameCameraCacheView()",
    "kind": "Method",
    "detail": "Function (const FMinimalViewInfo&)",
    "insertText": "GetLastFrameCameraCacheView()"
  },
  {
    "label": "GetCameraCacheTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCameraCacheTime()"
  },
  {
    "label": "SetLastFrameCameraCacheTime()",
    "kind": "Method",
    "detail": "Function (CameraCachePrivate . TimeStamp = InTime ; } void)",
    "insertText": "SetLastFrameCameraCacheTime(float InTime)"
  },
  {
    "label": "AddCachedPPBlend()",
    "kind": "Method",
    "detail": "Function (TArray<float> PostProcessBlendCacheWeights ; TArray<EViewTargetBlendOrder> PostProcessBlendCacheOrders ; public : void)",
    "insertText": "AddCachedPPBlend(struct FPostProcessSettings& PPSettings, float BlendWeight, EViewTargetBlendOrder BlendOrder = VTBlendOrder_Base)"
  },
  {
    "label": "GetCachedPostProcessBlends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCachedPostProcessBlends(TArray<struct FPostProcessSettings> const*& OutPPSettings, TArray<float> const*& OutBlendWeights)"
  },
  {
    "label": "GetCachedPostProcessBlends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCachedPostProcessBlends(TArray<struct FPostProcessSettings> const*& OutPPSettings, TArray<float> const*& OutBlendWeights, TArray<EViewTargetBlendOrder> const*& OutBlendOrders)"
  },
  {
    "label": "ClearCachedPPBlends()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ClearCachedPPBlends()"
  },
  {
    "label": "AssignViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignViewTarget(AActor* NewTarget, FTViewTarget& VT, struct FViewTargetTransitionParams TransitionParams=FViewTargetTransitionParams())"
  },
  {
    "label": "GetViewTarget()",
    "kind": "Method",
    "detail": "Function (struct FTViewTarget ; public : AActor*)",
    "insertText": "GetViewTarget()"
  },
  {
    "label": "GetViewTargetPawn()",
    "kind": "Method",
    "detail": "Function (class APawn*)",
    "insertText": "GetViewTargetPawn()"
  },
  {
    "label": "ShouldTickIfViewportsOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTickIfViewportsOnly()"
  },
  {
    "label": "PostInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitializeComponents()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "Destroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroyed()"
  },
  {
    "label": "DisplayDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebug(class UCanvas* Canvas, const FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "PlayWorldCameraShake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayWorldCameraShake(UWorld* InWorld, TSubclassOf<UCameraShakeBase> Shake, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter = false)"
  },
  {
    "label": "CalcRadialShakeScale()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "CalcRadialShakeScale(class APlayerCameraManager* Cam, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff)"
  },
  {
    "label": "UpdateCamera()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UpdateCamera(float DeltaTime)"
  },
  {
    "label": "UpdateCameraPhotographyOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraPhotographyOnly()"
  },
  {
    "label": "AddCameraModifierToList()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "AddCameraModifierToList(UCameraModifier* NewModifier)"
  },
  {
    "label": "CleanUpAnimCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpAnimCamera(const bool bDestroy)"
  },
  {
    "label": "ApplyCameraModifiers()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ApplyCameraModifiers(float DeltaTime, FMinimalViewInfo& InOutPOV)"
  },
  {
    "label": "InitializeFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFor(class APlayerController* PC)"
  },
  {
    "label": "SetFOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFOV(float NewFOV)"
  },
  {
    "label": "UnlockFOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockFOV()"
  },
  {
    "label": "IsOrthographic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOrthographic()"
  },
  {
    "label": "GetOrthoWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOrthoWidth()"
  },
  {
    "label": "SetOrthoWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrthoWidth(float OrthoWidth)"
  },
  {
    "label": "UnlockOrthoWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockOrthoWidth()"
  },
  {
    "label": "GetCameraViewPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCameraViewPoint(FVector& OutCamLoc, FRotator& OutCamRot)"
  },
  {
    "label": "SetDesiredColorScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDesiredColorScale(FVector NewColorScale, float InterpTime)"
  },
  {
    "label": "DoUpdateCamera()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "DoUpdateCamera(float DeltaTime)"
  },
  {
    "label": "UpdatePhotographyCamera()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePhotographyCamera(FMinimalViewInfo& NewPOV)"
  },
  {
    "label": "UpdatePhotographyPostProcessing()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UpdatePhotographyPostProcessing(FPostProcessSettings& InOutPostProcessing)"
  },
  {
    "label": "AllowPhotographyMode()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "AllowPhotographyMode()"
  },
  {
    "label": "ApplyAudioFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAudioFade()"
  },
  {
    "label": "StopAudioFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAudioFade()"
  },
  {
    "label": "BlendViewTargets()",
    "kind": "Method",
    "detail": "Function (FPOV)",
    "insertText": "BlendViewTargets(const FTViewTarget& A, const FTViewTarget& B, float Alpha)"
  },
  {
    "label": "FillCameraCache()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "FillCameraCache(const FMinimalViewInfo& NewInfo)"
  },
  {
    "label": "UpdateViewTarget()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateViewTarget(FTViewTarget& OutVT, float DeltaTime)"
  },
  {
    "label": "UpdateCameraLensEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraLensEffects(const FTViewTarget& OutVT)"
  },
  {
    "label": "SetViewTarget()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetViewTarget(class AActor* NewViewTarget, FViewTargetTransitionParams TransitionParams = FViewTargetTransitionParams())"
  },
  {
    "label": "ProcessViewRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessViewRotation(float DeltaTime, FRotator& OutViewRotation, FRotator& OutDeltaRot)"
  },
  {
    "label": "FindGenericCameraLensEffect()",
    "kind": "Method",
    "detail": "Function (TScriptInterface<class ICameraLensEffectInterface>)",
    "insertText": "FindGenericCameraLensEffect(UPARAM(meta=(MustImplement = \"CameraLensEffectInterface\")) TSubclassOf<AActor> LensEffectEmitterClass)"
  },
  {
    "label": "StartCameraShake()",
    "kind": "Method",
    "detail": "Function (UCameraShakeBase*)",
    "insertText": "StartCameraShake(TSubclassOf<UCameraShakeBase> ShakeClass, const FAddCameraShakeParams& Params)"
  },
  {
    "label": "LimitViewPitch()",
    "kind": "Method",
    "detail": "Function (bGameCameraCutThisFrame = true ; } public : void)",
    "insertText": "LimitViewPitch(FRotator& ViewRotation, float InViewPitchMin, float InViewPitchMax)"
  },
  {
    "label": "LimitViewRoll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LimitViewRoll(FRotator& ViewRotation, float InViewRollMin, float InViewRollMax)"
  },
  {
    "label": "LimitViewYaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LimitViewYaw(FRotator& ViewRotation, float InViewYawMin, float InViewYawMax)"
  },
  {
    "label": "UpdateViewTargetInternal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateViewTargetInternal(FTViewTarget& OutVT, float DeltaTime)"
  },
  {
    "label": "GetActorRotation()",
    "kind": "Method",
    "detail": "Function (FTimerHandle SwapPendingViewTargetWhenUsingClientSideCameraUpdatesTimerHandle ; private : FRotator)",
    "insertText": "GetActorRotation()"
  },
  {
    "label": "GetActorLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetActorLocation()"
  },
  {
    "label": "GetTransformComponent()",
    "kind": "Method",
    "detail": "Function (} public : class USceneComponent*)",
    "insertText": "GetTransformComponent()"
  }
]