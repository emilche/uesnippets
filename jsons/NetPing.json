[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "FNetPingICMP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetPingICMP"
  },
  {
    "label": "FNetPingUDPQoS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetPingUDPQoS"
  },
  {
    "label": "FPingValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPingValues"
  },
  {
    "label": "FNetPing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetPing"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "FAverageStorageBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAverageStorageBase"
  },
  {
    "label": "FNoAverageStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNoAverageStorage"
  },
  {
    "label": "FMovingAverageStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovingAverageStorage"
  },
  {
    "label": "FPlayerStateAvgStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlayerStateAvgStorage"
  },
  {
    "label": "PingTypeToIdx()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Net / Core / Analytics / NetStatsUtils . h \" # include \" GameFramework / PlayerState . h \" # include \" NetPing . generated . h \" enum class EPingType : uint32 ; class FInternetAddr ; namespace UE::Net { namespace Private { int32)",
    "insertText": "PingTypeToIdx(EPingType PingType)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 Value = static_cast<)",
    "insertText": "uint32(PingType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 Pos = 0 ;)",
    "insertText": "if(Value >= 1<<16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 1 6 ; Pos + = 1 6 ; })",
    "insertText": "if(Value >= 1<< 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 8 ; Pos + = 8 ; })",
    "insertText": "if(Value >= 1<< 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 4 ; Pos + = 4 ; })",
    "insertText": "if(Value >= 1<< 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 2 ; Pos + = 2 ; })",
    "insertText": "if(Value >= 1<< 1)"
  },
  {
    "label": "PingTypeToIdxRuntime()",
    "kind": "Method",
    "detail": "Function (Pos + = 1 ; } return Pos ; } int32)",
    "insertText": "PingTypeToIdxRuntime(EPingType PingType)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "UENUM()"
  },
  {
    "label": "PingTypeToIdx()",
    "kind": "Method",
    "detail": "Function (None = 0 x00000000,RoundTrip = 0 x00000001,RoundTripExclFrame = 0 x00000002,ICMP = 0 x00000004,UDPQoS = 0 x00000008,Max = UDPQoS,Count = UE::Net::)",
    "insertText": "PingTypeToIdx(static_cast<EPingType>(EPingType::Max))"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EPingType)"
  },
  {
    "label": "IsValidPingType()",
    "kind": "Method",
    "detail": "Function (None,MovingAverage,PlayerStateAvg } ; enum class ENetPingControlMessage : uint8 { SetPingAddress,PingFailure,Max = PingFailure } ; namespace UE::Net { bool)",
    "insertText": "IsValidPingType(EPingType PingType)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} namespace Private { class FNetPingICMP ; class FNetPingUDPQoS ; } struct FPingValues { double Current = - 1 . 0 ; double Min = - 1 . 0 ; double Max = - 1 . 0 ; } ; class FNetPing { template<T> struct UE::Core::Private::PimplPtr::TPimplHeapObjectImpl ; private : class FAverageStorageBase { public : uint32 PingCount = 0 ; uint32 PingTimeouts = 0 ; } ; class FNoAverageStorage : public FAverageStorageBase { public : TSampleMinMaxAvg<EMinMaxValueMode::PerSample> PingValues ; } ; class FMovingAverageStorage : public FAverageStorageBase { public : TSampleMinMaxAvg<EMinMaxValueMode::PerMeasurement> PingValues ; TBinnedMovingAvg<)",
    "insertText": "decltype(PingValues), TBinParms::NumBins(4)"
  },
  {
    "label": "TimePerBin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimePerBin(1.0)"
  },
  {
    "label": "FMovingAverageStorage()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMovingAverageStorage()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} ; class FPlayerStateAvgStorage : public FAverageStorageBase { private : uint8 CurPingBucket = 0 ; PingAvgData PingBucket [ 4 ] ; double CurPingBucketTimestamp = 0 . 0 ; public : TSampleMinMaxAvg<EMinMaxValueMode::PerMeasurement> PingValues ; public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "UpdatePing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePing(double TimeVal, float InPing)"
  },
  {
    "label": "RecalculateAvgPing()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RecalculateAvgPing()"
  },
  {
    "label": "FNetPing()",
    "kind": "Method",
    "detail": "Function (} ; private :)",
    "insertText": "FNetPing()"
  },
  {
    "label": "FNetPing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetPing(UNetConnection* InOwner)"
  },
  {
    "label": "CreateNetPing()",
    "kind": "Method",
    "detail": "Function (TPimplPtr<FNetPing>)",
    "insertText": "CreateNetPing(UNetConnection* InOwner)"
  },
  {
    "label": "UpdatePing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePing(EPingType PingType, double TimeVal, double PingValue)"
  },
  {
    "label": "UpdatePingTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePingTimeout(EPingType PingType)"
  },
  {
    "label": "GetPingValues()",
    "kind": "Method",
    "detail": "Function (FPingValues)",
    "insertText": "GetPingValues(EPingType PingType)"
  },
  {
    "label": "TickRealtime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickRealtime(double CurTimeSeconds)"
  },
  {
    "label": "HandleNetPingControlMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleNetPingControlMessage(UNetConnection* Connection, ENetPingControlMessage MessageType, FString MessageStr)"
  },
  {
    "label": "GetPingTypes()",
    "kind": "Method",
    "detail": "Function (EPingType)",
    "insertText": "GetPingTypes()"
  },
  {
    "label": "UpdatePingStats()",
    "kind": "Method",
    "detail": "Function (# if STATS void)",
    "insertText": "UpdatePingStats(EPingType PingType, double CurrentValue)"
  },
  {
    "label": "UpdateTimeoutStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTimeoutStats(EPingType PingType, uint32 NumTimeouts, double TimeoutPercent)"
  },
  {
    "label": "GetPingStorageValues()",
    "kind": "Method",
    "detail": "Function (# endif const FSampleMinMaxAvg&)",
    "insertText": "GetPingStorageValues(EPingType PingType)"
  },
  {
    "label": "GetPingStorageBase()",
    "kind": "Method",
    "detail": "Function (FAverageStorageBase&)",
    "insertText": "GetPingStorageBase(EPingType PingType)"
  },
  {
    "label": "ResetPingValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPingValues(EPingType PingType)"
  },
  {
    "label": "GetRemoteAddr()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetRemoteAddr()"
  },
  {
    "label": "GetICMPAddr()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetICMPAddr()"
  },
  {
    "label": "GetUDPQoSAddr()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUDPQoSAddr()"
  },
  {
    "label": "UpdateRemoteAddr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRemoteAddr(double CurTimeSeconds)"
  },
  {
    "label": "PingTimerICMP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PingTimerICMP(double CurTimeSeconds)"
  },
  {
    "label": "PingTimerUDP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PingTimerUDP(double CurTimeSeconds)"
  },
  {
    "label": "ServerSetPingAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerSetPingAddress(EPingType PingType, FString PingAddress)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (private : TObjectPtr<UNetConnection> Owner ; TWeakPtr<const FInternetAddr> WeakRemoteAddr ; FString CachedRemoteAddr =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (EPingAverageType::None } ; uint8 PingAverageStorageIdx [ static_cast<)",
    "insertText": "uint32(EPingType::Count)"
  }
]