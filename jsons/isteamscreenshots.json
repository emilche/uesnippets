[
  {
    "label": "EVRScreenshotType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVRScreenshotType"
  },
  {
    "label": "ISteamScreenshots",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamScreenshots"
  },
  {
    "label": "ScreenshotReady_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScreenshotReady_t"
  },
  {
    "label": "ScreenshotRequested_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScreenshotRequested_t"
  },
  {
    "label": "WriteScreenshot()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMSCREENSHOTS_H # define ISTEAMSCREENSHOTS_H # ifdef _WIN32 # pragma once # endif # include \" steam_api_common . h \" const uint32 k_nScreenshotMaxTaggedUsers = 3 2 ; const uint32 k_nScreenshotMaxTaggedPublishedFiles = 3 2 ; const int k_cubUFSTagTypeMax = 2 5 5 ; const int k_cubUFSTagValueMax = 2 5 5 ; const int k_ScreenshotThumbWidth = 2 0 0 ; typedef uint32 ScreenshotHandle ; # define INVALID_SCREENSHOT_HANDLE 0 enum EVRScreenshotType { k_EVRScreenshotType_None = 0,k_EVRScreenshotType_Mono = 1,k_EVRScreenshotType_Stereo = 2,k_EVRScreenshotType_MonoCubemap = 3,k_EVRScreenshotType_MonoPanorama = 4,k_EVRScreenshotType_StereoPanorama = 5 } ; class ISteamScreenshots { public : ScreenshotHandle)",
    "insertText": "WriteScreenshot(void *pubRGB, uint32 cubRGB, int nWidth, int nHeight)"
  },
  {
    "label": "AddScreenshotToLibrary()",
    "kind": "Method",
    "detail": "Function (ScreenshotHandle)",
    "insertText": "AddScreenshotToLibrary(const char *pchFilename, const char *pchThumbnailFilename, int nWidth, int nHeight)"
  },
  {
    "label": "TriggerScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerScreenshot()"
  },
  {
    "label": "HookScreenshots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HookScreenshots(bool bHook)"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLocation(ScreenshotHandle hScreenshot, const char *pchLocation)"
  },
  {
    "label": "TagUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TagUser(ScreenshotHandle hScreenshot, CSteamID steamID)"
  },
  {
    "label": "TagPublishedFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)"
  },
  {
    "label": "IsScreenshotsHooked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScreenshotsHooked()"
  },
  {
    "label": "AddVRScreenshotToLibrary()",
    "kind": "Method",
    "detail": "Function (ScreenshotHandle)",
    "insertText": "AddVRScreenshotToLibrary(EVRScreenshotType eType, const char *pchFilename, const char *pchVRFilename)"
  },
  {
    "label": "SteamScreenshots()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMSCREENSHOTS_INTERFACE_VERSION \" STEAMSCREENSHOTS_INTERFACE_VERSION003 \" ISteamScreenshots*)",
    "insertText": "SteamScreenshots()"
  },
  {
    "label": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR(ISteamScreenshots *, SteamScreenshots, STEAMSCREENSHOTS_INTERFACE_VERSION)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  }
]