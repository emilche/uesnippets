[
  {
    "label": "MemoryAllocatorDump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryAllocatorDump"
  },
  {
    "label": "ProcessMemoryDump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessMemoryDump"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "LockResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LockResult"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_DISCARDABLE_SHARED_MEMORY_H_ # define BASE_MEMORY_DISCARDABLE_SHARED_MEMORY_H_ # include<stddef . h> # include \" base / base_export . h \" # include \" base / dcheck_is_on . h \" # include \" base / memory / shared_memory_mapping . h \" # include \" base / memory / unsafe_shared_memory_region . h \" # include \" base / threading / thread_collision_warner . h \" # include \" base / time / time . h \" # include \" build / build_config . h \" # if)",
    "insertText": "DCHECK_IS_ON() #include <set> #endif #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID)"
  },
  {
    "label": "DiscardableSharedMemory()",
    "kind": "Method",
    "detail": "Function (namespace trace_event { class MemoryAllocatorDump ; class ProcessMemoryDump ; } class BASE_EXPORT DiscardableSharedMemory { public : enum LockResult { SUCCESS,PURGED,FAILED } ;)",
    "insertText": "DiscardableSharedMemory()"
  },
  {
    "label": "DiscardableSharedMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardableSharedMemory(UnsafeSharedMemoryRegion region)"
  },
  {
    "label": "DiscardableSharedMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardableSharedMemory(const DiscardableSharedMemory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DiscardableSharedMemory&)",
    "insertText": "operator(const DiscardableSharedMemory&)"
  },
  {
    "label": "CreateAndMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAndMap(size_t size)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map(size_t size)"
  },
  {
    "label": "Unmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Unmap()"
  },
  {
    "label": "mapped_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "mapped_size()"
  },
  {
    "label": "mapped_id()",
    "kind": "Method",
    "detail": "Function (} const UnguessableToken&)",
    "insertText": "mapped_id()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} LockResult)",
    "insertText": "Lock(size_t offset, size_t length)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock(size_t offset, size_t length)"
  },
  {
    "label": "memory()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "memory()"
  },
  {
    "label": "last_known_usage()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "last_known_usage()"
  },
  {
    "label": "Purge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Purge(Time current_time)"
  },
  {
    "label": "IsMemoryResident()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMemoryResident()"
  },
  {
    "label": "IsMemoryLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMemoryLocked()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "CreateSharedMemoryOwnershipEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSharedMemoryOwnershipEdge(trace_event::MemoryAllocatorDump* local_segment_dump, trace_event::ProcessMemoryDump* pmd, bool is_owned)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_ANDROID) static bool IsAshmemDeviceSupportedForTesting()"
  },
  {
    "label": "LockPages()",
    "kind": "Method",
    "detail": "Function (# endif private : LockResult)",
    "insertText": "LockPages(const UnsafeSharedMemoryRegion& region, size_t offset, size_t length)"
  },
  {
    "label": "UnlockPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockPages(const UnsafeSharedMemoryRegion& region, size_t offset, size_t length)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "Now()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (UnsafeSharedMemoryRegion shared_memory_region_ ; WritableSharedMemoryMapping shared_memory_mapping_ ; size_t mapped_size_ ; size_t locked_page_count_ ; # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "DFAKE_MUTEX()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DFAKE_MUTEX(thread_collision_warner_)"
  }
]