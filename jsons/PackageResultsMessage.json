[
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FPackageResultsMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageResultsMessage"
  },
  {
    "label": "FPackageRemoteResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageRemoteResult"
  },
  {
    "label": "FPlatformResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformResult"
  },
  {
    "label": "FAsyncMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncMessage"
  },
  {
    "label": "FAsyncSupport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncSupport"
  },
  {
    "label": "GetPlatform()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Future . h \" # include \" CompactBinaryTCP . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Cooker / CookTypes . h \" # include \" Cooker / MPCollector . h \" # include \" HAL / CriticalSection . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" class ITargetPlatform ; namespace UE::Cook { struct FPackageData ; } namespace UE::Cook { struct FPackageResultsMessage ; } namespace UE::Cook { struct FPackageRemoteResult { public : struct FPlatformResult { public : const ITargetPlatform*)",
    "insertText": "GetPlatform()"
  },
  {
    "label": "SetPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatform(const ITargetPlatform* InPlatform)"
  },
  {
    "label": "GetMessages()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<UE::CompactBinaryTCP::FMarshalledMessage>)",
    "insertText": "GetMessages()"
  },
  {
    "label": "ReleaseMessages()",
    "kind": "Method",
    "detail": "Function (TArray<UE::CompactBinaryTCP::FMarshalledMessage>)",
    "insertText": "ReleaseMessages()"
  },
  {
    "label": "GetCookResults()",
    "kind": "Method",
    "detail": "Function (ECookResult)",
    "insertText": "GetCookResults()"
  },
  {
    "label": "SetCookResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCookResults(ECookResult Value)"
  },
  {
    "label": "FPackageRemoteResult()",
    "kind": "Method",
    "detail": "Function (private : TArray<UE::CompactBinaryTCP::FMarshalledMessage> Messages ; const ITargetPlatform* Platform = nullptr ; ECookResult CookResults = ECookResult::NotAttempted ; FPackageRemoteResult ; FPackageResultsMessage ; } ;)",
    "insertText": "FPackageRemoteResult()"
  },
  {
    "label": "FPackageRemoteResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageRemoteResult(FPackageRemoteResult&&)"
  },
  {
    "label": "FPackageRemoteResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageRemoteResult(const FPackageRemoteResult&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPackageRemoteResult&)",
    "insertText": "operator(FPackageRemoteResult&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPackageRemoteResult&)",
    "insertText": "operator(const FPackageRemoteResult&)"
  },
  {
    "label": "GetPackageName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPackageName()"
  },
  {
    "label": "SetPackageName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageName(FName InPackageName)"
  },
  {
    "label": "GetSuppressCookReason()",
    "kind": "Method",
    "detail": "Function (ESuppressCookReason)",
    "insertText": "GetSuppressCookReason()"
  },
  {
    "label": "SetSuppressCookReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuppressCookReason(ESuppressCookReason InSuppressCookReason)"
  },
  {
    "label": "IsReferencedOnlyByEditorOnlyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReferencedOnlyByEditorOnlyData()"
  },
  {
    "label": "SetReferencedOnlyByEditorOnlyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReferencedOnlyByEditorOnlyData(bool bInReferencedOnlyByEditorOnlyData)"
  },
  {
    "label": "AddPackageMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackageMessage(const FGuid& MessageType, FCbObject&& Object)"
  },
  {
    "label": "AddAsyncPackageMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAsyncPackageMessage(const FGuid& MessageType, TFuture<FCbObject>&& ObjectFuture)"
  },
  {
    "label": "AddPlatformMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlatformMessage(const ITargetPlatform* TargetPlatform, const FGuid& MessageType, FCbObject&& Object)"
  },
  {
    "label": "AddAsyncPlatformMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAsyncPlatformMessage(const ITargetPlatform* TargetPlatform, const FGuid& MessageType, TFuture<FCbObject>&& ObjectFuture)"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "GetCompletionFuture()",
    "kind": "Method",
    "detail": "Function (TFuture<int>)",
    "insertText": "GetCompletionFuture()"
  },
  {
    "label": "GetPlatforms()",
    "kind": "Method",
    "detail": "Function (TArray<FPlatformResult,TInlineAllocator<1>>&)",
    "insertText": "GetPlatforms()"
  },
  {
    "label": "SetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatforms(TConstArrayView<ITargetPlatform*> OrderedSessionPlatforms)"
  },
  {
    "label": "SetExternalActorDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExternalActorDependencies(TArray<FName>&& InExternalActorDependencies)"
  },
  {
    "label": "GetExternalActorDependencies()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FName>)",
    "insertText": "GetExternalActorDependencies()"
  },
  {
    "label": "GetUserRefCount()",
    "kind": "Method",
    "detail": "Function (int32&)",
    "insertText": "GetUserRefCount()"
  },
  {
    "label": "FAsyncMessage()",
    "kind": "Method",
    "detail": "Function (private : struct FAsyncMessage {)",
    "insertText": "FAsyncMessage()"
  },
  {
    "label": "FAsyncMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAsyncMessage(FAsyncMessage&&)"
  },
  {
    "label": "FAsyncMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAsyncMessage(const FAsyncMessage&)"
  },
  {
    "label": "FinalizeAsyncMessages()",
    "kind": "Method",
    "detail": "Function (FGuid MessageType ; TFuture<FCbObject> Future ; const ITargetPlatform* TargetPlatform = nullptr ; bool bCompleted = false ; } ; struct FAsyncSupport { TPromise<int> CompletionFuture ; FCriticalSection AsyncWorkLock ; } ; void)",
    "insertText": "FinalizeAsyncMessages()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (private : TArray<FAsyncMessage> AsyncMessages ; TArray<FName> ExternalActorDependencies ; FName PackageName ; ESuppressCookReason SuppressCookReason ; bool bReferencedOnlyByEditorOnlyData = false ; TArray<FPlatformResult,TInlineAllocator<1>> Platforms ; TArray<UE::CompactBinaryTCP::FMarshalledMessage> Messages ; TUniquePtr<FAsyncSupport> AsyncSupport ; int32 NumIncompleteAsyncWork = 0 ; bool bAsyncMessagesFinalized = false ; bool bAsyncMessagesComplete = false ; int32 UserRefCount = 0 ; FPackageResultsMessage ; } ; struct FPackageResultsMessage : public IMPCollectorMessage { public : void)",
    "insertText": "Write(FCbWriter& Writer)"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRead(FCbObjectView Object)"
  },
  {
    "label": "GetMessageType()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetMessageType()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "WriteMessagesArray()",
    "kind": "Method",
    "detail": "Function (} public : TArray<FPackageRemoteResult> Results ; FGuid MessageType ; private : void)",
    "insertText": "WriteMessagesArray(FCbWriter& Writer, TConstArrayView<UE::CompactBinaryTCP::FMarshalledMessage> InMessages)"
  },
  {
    "label": "TryReadMessagesArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryReadMessagesArray(FCbObjectView ObjectWithMessageField, TArray<UE::CompactBinaryTCP::FMarshalledMessage>& InMessages)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ExternalActorDependencies =)",
    "insertText": "MoveTemp(InExternalActorDependencies)"
  }
]