[
  {
    "label": "ERootParameterKeys",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERootParameterKeys"
  },
  {
    "label": "FD3D12RootSignature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RootSignature"
  },
  {
    "label": "FD3D12RootSignatureDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RootSignatureDesc"
  },
  {
    "label": "ShaderStage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ShaderStage"
  },
  {
    "label": "FD3D12RootSignatureManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RootSignatureManager"
  },
  {
    "label": "FD3D12RootSignatureDesc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12RootSignatureDefinitions . h \" # include \" D3D12Util . h \" enum ERootParameterKeys { PS_SRVs,PS_CBVs,PS_RootCBVs,PS_Samplers,VS_SRVs,VS_CBVs,VS_RootCBVs,VS_Samplers,VS_UAVs,GS_SRVs,GS_CBVs,GS_RootCBVs,GS_Samplers,MS_SRVs,MS_CBVs,MS_RootCBVs,MS_Samplers,AS_SRVs,AS_CBVs,AS_RootCBVs,AS_Samplers,ALL_SRVs,ALL_CBVs,ALL_RootCBVs,ALL_Samplers,ALL_UAVs,RPK_RootParameterKeyCount,} ; class FD3D12RootSignature ; class FD3D12RootSignatureDesc { public :)",
    "insertText": "FD3D12RootSignatureDesc(const FD3D12QuantizedBoundShaderState& QBSS, const D3D12_RESOURCE_BINDING_TIER ResourceBindingTier)"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (const D3D12_VERSIONED_ROOT_SIGNATURE_DESC&)",
    "insertText": "GetDesc()"
  },
  {
    "label": "FD3D12RootSignature()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FD3D12RootSignature(FD3D12Adapter* InParent, const FD3D12QuantizedBoundShaderState& InQBSS) : FD3D12AdapterChild(InParent)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(InQBSS)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const FD3D12QuantizedBoundShaderState& InQBSS)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const D3D12_VERSIONED_ROOT_SIGNATURE_DESC& InDesc, uint32 BindingSpace = 0)"
  },
  {
    "label": "InitStaticGraphicsRootSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitStaticGraphicsRootSignature(EShaderBindingLayoutFlags InFlags)"
  },
  {
    "label": "InitStaticComputeRootSignatureDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitStaticComputeRootSignatureDesc(EShaderBindingLayoutFlags InFlags)"
  },
  {
    "label": "InitStaticRayTracingGlobalRootSignatureDesc()",
    "kind": "Method",
    "detail": "Function (# if D3D12_RHI_RAYTRACING void)",
    "insertText": "InitStaticRayTracingGlobalRootSignatureDesc(EShaderBindingLayoutFlags InFlags)"
  },
  {
    "label": "InitStaticRayTracingLocalRootSignatureDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitStaticRayTracingLocalRootSignatureDesc(EShaderBindingLayoutFlags InFlags)"
  },
  {
    "label": "GetRootSignature()",
    "kind": "Method",
    "detail": "Function (# endif ID3D12RootSignature*)",
    "insertText": "GetRootSignature()"
  },
  {
    "label": "GetRootSignatureBlob()",
    "kind": "Method",
    "detail": "Function (} ID3DBlob*)",
    "insertText": "GetRootSignatureBlob()"
  },
  {
    "label": "SamplerRDTBindSlot()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "SamplerRDTBindSlot(EShaderFrequency ShaderStage)"
  },
  {
    "label": "UAVRDTBindSlot()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "UAVRDTBindSlot(EShaderFrequency ShaderStage)"
  },
  {
    "label": "IsValidBindSlot()",
    "kind": "Method",
    "detail": "Function (const uint32 MapSlotIndex = ShaderStage = = SF_Vertex ? VS_UAVs : ALL_UAVs ; return BindSlotMap [ MapSlotIndex ] ; } bool)",
    "insertText": "IsValidBindSlot(uint32 BindSlotMapIndex)"
  },
  {
    "label": "InternalAnalyzeSignature()",
    "kind": "Method",
    "detail": "Function (template<RootSignatureDescType> void)",
    "insertText": "InternalAnalyzeSignature(const RootSignatureDescType& Desc, uint32 BindingSpace)"
  },
  {
    "label": "HasVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVisibility(const D3D12_SHADER_VISIBILITY& ParameterVisibility, const D3D12_SHADER_VISIBILITY& Visibility)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (uint8* pBindSlot = nullptr ;)",
    "insertText": "switch(SF)"
  },
  {
    "label": "SetSRVRDTBindSlot()",
    "kind": "Method",
    "detail": "Function (* pBindSlot = RootParameterIndex ; bHasSamplers = true ; } void)",
    "insertText": "SetSRVRDTBindSlot(EShaderFrequency SF, uint8 RootParameterIndex)"
  },
  {
    "label": "SetCBVRDTBindSlot()",
    "kind": "Method",
    "detail": "Function (* pBindSlot = RootParameterIndex ; bHasSRVs = true ; } void)",
    "insertText": "SetCBVRDTBindSlot(EShaderFrequency SF, uint8 RootParameterIndex)"
  },
  {
    "label": "SetCBVRDBindSlot()",
    "kind": "Method",
    "detail": "Function (* pBindSlot = RootParameterIndex ; bHasCBVs = true ; } void)",
    "insertText": "SetCBVRDBindSlot(EShaderFrequency SF, uint8 RootParameterIndex)"
  },
  {
    "label": "SetUAVRDTBindSlot()",
    "kind": "Method",
    "detail": "Function (* pBindSlot = RootParameterIndex ; bHasRootCBs = true ; } void)",
    "insertText": "SetUAVRDTBindSlot(EShaderFrequency SF, uint8 RootParameterIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const uint32 MapSlotIndex = SF = = SF_Vertex ? VS_UAVs : ALL_UAVs ; uint8* pBindSlot =& BindSlotMap [ MapSlotIndex ] ;)",
    "insertText": "check(*pBindSlot == InvalidBindSlotMapIndex)"
  },
  {
    "label": "SetMaxSamplerCount()",
    "kind": "Method",
    "detail": "Function (* pBindSlot = RootParameterIndex ; bHasUAVs = true ; } void)",
    "insertText": "SetMaxSamplerCount(EShaderFrequency SF, uint8 Count)"
  },
  {
    "label": "SetMaxSRVCount()",
    "kind": "Method",
    "detail": "Function (Stage [ s ] . MaxSamplerCount = Count ; } } else { Stage [ SF ] . MaxSamplerCount = Count ; } } void)",
    "insertText": "SetMaxSRVCount(EShaderFrequency SF, uint8 Count)"
  },
  {
    "label": "UpdateCBVRegisterMaskWithDescriptorRange()",
    "kind": "Method",
    "detail": "Function (Stage [ s ] . MaxSRVCount = Count ; } } else { Stage [ SF ] . MaxSRVCount = Count ; } } template<DescriptorRangeType> void)",
    "insertText": "UpdateCBVRegisterMaskWithDescriptorRange(EShaderFrequency SF, const DescriptorRangeType& Range)"
  },
  {
    "label": "StartStage()",
    "kind": "Method",
    "detail": "Function (const uint32 StartRegister = Range . BaseShaderRegister ; const uint32 EndRegister = StartRegister + Range . NumDescriptors ; const uint32)",
    "insertText": "StartStage(SF == SF_NumFrequencies)"
  },
  {
    "label": "EndStage()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "EndStage(SF == SF_NumFrequencies)"
  },
  {
    "label": "CBVRegisterMask()",
    "kind": "Method",
    "detail": "Function (Stage [ CurrentStage ] .)",
    "insertText": "CBVRegisterMask(1 << Register)"
  },
  {
    "label": "UpdateCBVRegisterMaskWithDescriptor()",
    "kind": "Method",
    "detail": "Function (} } } template<DescriptorType> void)",
    "insertText": "UpdateCBVRegisterMaskWithDescriptor(EShaderFrequency SF, const DescriptorType& Descriptor)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const uint32& Register = Descriptor . ShaderRegister ;)",
    "insertText": "for(uint32 CurrentStage = StartStage; CurrentStage <= EndStage; CurrentStage++)"
  },
  {
    "label": "SetMaxCBVCount()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetMaxCBVCount(EShaderFrequency SF, uint8 Count)"
  },
  {
    "label": "IncrementMaxCBVCount()",
    "kind": "Method",
    "detail": "Function (Stage [ s ] . MaxCBVCount = Count ; } } else { Stage [ SF ] . MaxCBVCount = Count ; } } void)",
    "insertText": "IncrementMaxCBVCount(EShaderFrequency SF, uint8 Count)"
  },
  {
    "label": "SetMaxUAVCount()",
    "kind": "Method",
    "detail": "Function (Stage [ s ] . MaxCBVCount + = Count ; } } else { Stage [ SF ] . MaxCBVCount + = Count ; } } void)",
    "insertText": "SetMaxUAVCount(EShaderFrequency SF, uint8 Count)"
  },
  {
    "label": "FD3D12RootSignatureManager()",
    "kind": "Method",
    "detail": "Function (Stage [ s ] . MaxUAVCount = Count ; } } else { Stage [ SF ] . MaxUAVCount = Count ; } } TRefCountPtr<ID3D12RootSignature> RootSignature ; uint8 BindSlotMap [ RPK_RootParameterKeyCount ] ; uint8 InvalidBindSlotMapIndex = 0 xFF ; ShaderStage Stage [ SF_NumFrequencies ] ; TRefCountPtr<ID3DBlob> RootSignatureBlob ; uint8 BindSlotOffsetsInDWORDs [ FD3D12RootSignatureDesc::MaxRootParameters ] = { } ; uint8 TotalRootSignatureSizeInDWORDs = 0 ; int8 RootConstantsSlot = - 1 ; int8 DiagnosticBufferSlot = - 1 ; int8 StaticShaderBindingSlot = - 1 ; int8 StaticShaderBindingCount = - 1 ; uint8 bHasUAVs : 1 ; uint8 bHasSRVs : 1 ; uint8 bHasCBVs : 1 ; uint8 bHasRootCBs : 1 ; uint8 bHasSamplers : 1 ; uint8 bHasVendorExtensionSpace : 1 ; uint8 bUsesDynamicResources : 1 ; uint8 bUsesDynamicSamplers : 1 ; } ; class FD3D12RootSignatureManager : public FD3D12AdapterChild { public :)",
    "insertText": "FD3D12RootSignatureManager(FD3D12Adapter* InParent) : FD3D12AdapterChild(InParent)"
  },
  {
    "label": "FD3D12RootSignatureManager()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FD3D12RootSignatureManager()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroy()"
  },
  {
    "label": "GetRootSignature()",
    "kind": "Method",
    "detail": "Function (FD3D12RootSignature*)",
    "insertText": "GetRootSignature(const FD3D12QuantizedBoundShaderState& QBSS)"
  },
  {
    "label": "GetQuantizedBoundShaderState()",
    "kind": "Method",
    "detail": "Function (FD3D12QuantizedBoundShaderState)",
    "insertText": "GetQuantizedBoundShaderState(const FD3D12RootSignature* const RootSignature)"
  },
  {
    "label": "CreateRootSignature()",
    "kind": "Method",
    "detail": "Function (private : FCriticalSection CS ; FD3D12RootSignature*)",
    "insertText": "CreateRootSignature(const FD3D12QuantizedBoundShaderState& QBSS)"
  }
]