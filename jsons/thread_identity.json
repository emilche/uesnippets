[
  {
    "label": "SynchLocksHeld",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SynchLocksHeld"
  },
  {
    "label": "SynchWaitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SynchWaitParams"
  },
  {
    "label": "SpinLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpinLock"
  },
  {
    "label": "ThreadIdentity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadIdentity"
  },
  {
    "label": "PerThreadSynch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PerThreadSynch"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "WaiterState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WaiterState"
  },
  {
    "label": "thread_identity()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_INTERNAL_THREAD_IDENTITY_H_ # define ABSL_BASE_INTERNAL_THREAD_IDENTITY_H_ # ifndef _WIN32 # include<pthread . h> # include<unistd . h> # endif # include<atomic> # include<cstdint> # include \" absl / base / config . h \" # include \" absl / base / internal / per_thread_tls . h \" # include \" absl / base / optimization . h \" namespace absl { ABSL_NAMESPACE_BEGIN struct SynchLocksHeld ; struct SynchWaitParams ; namespace base_internal { class SpinLock ; struct ThreadIdentity ; struct PerThreadSynch { int kLowZeroBits = 8 ; int kAlignment = 1<<kLowZeroBits ; ThreadIdentity*)",
    "insertText": "thread_identity()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} PerThreadSynch* next ; PerThreadSynch* skip ; bool may_skip ; bool wake ; bool cond_waiter ; bool maybe_unlocking ; bool suppress_fatal_errors ; int priority ; enum State { kAvailable,kQueued } ; std::atomic<State> state ; SynchWaitParams* waitp ; intptr_t readers ; int64_t next_priority_read_cycles ; SynchLocksHeld* all_locks ; } ; struct ThreadIdentity { PerThreadSynch per_thread_synch ; struct WaiterState {)",
    "insertText": "alignas(void*)"
  },
  {
    "label": "CurrentThreadIdentityIfPresent()",
    "kind": "Method",
    "detail": "Function (} waiter_state ; std::atomic<int>* blocked_count_ptr ; std::atomic<int> ticker ; std::atomic<int> wait_start ; std::atomic<bool> is_idle ; ThreadIdentity* next ; } ; ThreadIdentity*)",
    "insertText": "CurrentThreadIdentityIfPresent()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ThreadIdentityReclaimerFunction =)",
    "insertText": "void(*)(void*)"
  },
  {
    "label": "SetCurrentThreadIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThreadIdentity(ThreadIdentity* identity, ThreadIdentityReclaimerFunction reclaimer)"
  },
  {
    "label": "ClearCurrentThreadIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCurrentThreadIdentity()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_THREAD_IDENTITY_MODE_USE_POSIX_SETSPECIFIC # error ABSL_THREAD_IDENTITY_MODE_USE_POSIX_SETSPECIFIC cannot be directly set # else # define ABSL_THREAD_IDENTITY_MODE_USE_POSIX_SETSPECIFIC 0 # endif # ifdef ABSL_THREAD_IDENTITY_MODE_USE_TLS # error ABSL_THREAD_IDENTITY_MODE_USE_TLS cannot be directly set # else # define ABSL_THREAD_IDENTITY_MODE_USE_TLS 1 # endif # ifdef ABSL_THREAD_IDENTITY_MODE_USE_CPP11 # error ABSL_THREAD_IDENTITY_MODE_USE_CPP11 cannot be directly set # else # define ABSL_THREAD_IDENTITY_MODE_USE_CPP11 2 # endif # ifdef ABSL_THREAD_IDENTITY_MODE # error ABSL_THREAD_IDENTITY_MODE cannot be directly set # elif)",
    "insertText": "defined(ABSL_FORCE_THREAD_IDENTITY_MODE) #define ABSL_THREAD_IDENTITY_MODE ABSL_FORCE_THREAD_IDENTITY_MODE #elif defined(_WIN32) && !defined(__MINGW32__) #define ABSL_THREAD_IDENTITY_MODE ABSL_THREAD_IDENTITY_MODE_USE_CPP11 #elif defined(__APPLE__) && defined(ABSL_HAVE_THREAD_LOCAL) #define ABSL_THREAD_IDENTITY_MODE ABSL_THREAD_IDENTITY_MODE_USE_CPP11 #elif ABSL_PER_THREAD_TLS && defined(__GOOGLE_GRTE_VERSION__) && \\ (__GOOGLE_GRTE_VERSION__ >= 20140228L)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(ABSL_HAVE_THREAD_LOCAL)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# else # error Thread - local storage not detected on this platform # endif # if !)",
    "insertText": "defined(__APPLE__) && !defined(ABSL_BUILD_DLL) && \\ !defined(ABSL_CONSUME_DLL) #define ABSL_INTERNAL_INLINE_CURRENT_THREAD_IDENTITY_IF_PRESENT 1 #endif #ifdef ABSL_INTERNAL_INLINE_CURRENT_THREAD_IDENTITY_IF_PRESENT inline ThreadIdentity* CurrentThreadIdentityIfPresent()"
  }
]