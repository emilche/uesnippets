[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "APInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APInt"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "ArrayRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayRef"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "IntegerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntegerType"
  },
  {
    "label": "LLVMContextImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContextImpl"
  },
  {
    "label": "FunctionType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionType"
  },
  {
    "label": "CompositeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompositeType"
  },
  {
    "label": "StructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructType"
  },
  {
    "label": "SequentialType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequentialType"
  },
  {
    "label": "ArrayType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayType"
  },
  {
    "label": "VectorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VectorType"
  },
  {
    "label": "PointerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerType"
  },
  {
    "label": "IntegerType()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_DERIVEDTYPES_H # define LLVM_IR_DERIVEDTYPES_H # include \" llvm / IR / Type . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / DataTypes . h \" namespace llvm { class Value ; class APInt ; class LLVMContext ; template<T> class ArrayRef ; class StringRef ; class IntegerType : public Type { class LLVMContextImpl ; protected :)",
    "insertText": "IntegerType(LLVMContext &C, unsigned NumBits) : Type(C, IntegerTyID)"
  },
  {
    "label": "setSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSubclassData(NumBits)"
  },
  {
    "label": "MAX_INT_BITS()",
    "kind": "Method",
    "detail": "Function (} public : enum { MIN_INT_BITS = 1,)",
    "insertText": "MAX_INT_BITS(1<<23)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (IntegerType*)",
    "insertText": "get(LLVMContext &C, unsigned NumBits)"
  },
  {
    "label": "getBitWidth()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getBitWidth()"
  },
  {
    "label": "getBitMask()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getBitMask()"
  },
  {
    "label": "getSignBit()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getSignBit()"
  },
  {
    "label": "getMask()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "getMask()"
  },
  {
    "label": "isPowerOf2ByteWidth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isPowerOf2ByteWidth()"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "classof(const Type *T)"
  },
  {
    "label": "FunctionType()",
    "kind": "Method",
    "detail": "Function (} } ; class FunctionType : public Type {)",
    "insertText": "FunctionType(const FunctionType &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const FunctionType&)",
    "insertText": "operator(const FunctionType &)"
  },
  {
    "label": "FunctionType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FunctionType(Type *Result, ArrayRef<Type*> Params, bool IsVarArgs)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (public : FunctionType*)",
    "insertText": "get(Type *Result, ArrayRef<Type*> Params, bool isVarArg)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (FunctionType*)",
    "insertText": "get(Type *Result, bool isVarArg)"
  },
  {
    "label": "isValidReturnType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidReturnType(Type *RetTy)"
  },
  {
    "label": "isValidArgumentType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidArgumentType(Type *ArgTy)"
  },
  {
    "label": "isVarArg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isVarArg()"
  },
  {
    "label": "getReturnType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getReturnType()"
  },
  {
    "label": "getParamType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getParamType(unsigned i)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "static_assert(AlignOf<FunctionType>::Alignment >= AlignOf<Type *>::Alignment, \"Alignment sufficient for objects appended to FunctionType\")"
  },
  {
    "label": "CompositeType()",
    "kind": "Method",
    "detail": "Function (class CompositeType : public Type { protected :)",
    "insertText": "CompositeType(LLVMContext &C, TypeID tid) : Type(C, tid)"
  },
  {
    "label": "getTypeAtIndex()",
    "kind": "Method",
    "detail": "Function (} public : Type*)",
    "insertText": "getTypeAtIndex(const Value *V)"
  },
  {
    "label": "getTypeAtIndex()",
    "kind": "Method",
    "detail": "Function (Type*)",
    "insertText": "getTypeAtIndex(unsigned Idx)"
  },
  {
    "label": "indexValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "indexValid(const Value *V)"
  },
  {
    "label": "indexValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "indexValid(unsigned Idx)"
  },
  {
    "label": "StructType()",
    "kind": "Method",
    "detail": "Function (} } ; class StructType : public CompositeType {)",
    "insertText": "StructType(const StructType &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const StructType&)",
    "insertText": "operator(const StructType &)"
  },
  {
    "label": "StructType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StructType(LLVMContext &C) : CompositeType(C, StructTyID), SymbolTableEntry(nullptr)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} enum { SCDB_HasBody = 1,SCDB_Packed = 2,SCDB_IsLiteral = 4,SCDB_IsSized = 8 } ; void* SymbolTableEntry ; public : StructType*)",
    "insertText": "create(LLVMContext &Context, StringRef Name)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (StructType*)",
    "insertText": "create(LLVMContext &Context)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (StructType*)",
    "insertText": "create(ArrayRef<Type*> Elements, StringRef Name, bool isPacked = false)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (StructType*)",
    "insertText": "create(ArrayRef<Type*> Elements)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (StructType*)",
    "insertText": "create(LLVMContext &Context, ArrayRef<Type*> Elements, StringRef Name, bool isPacked = false)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (StructType*)",
    "insertText": "create(LLVMContext &Context, ArrayRef<Type*> Elements)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (StructType*)",
    "insertText": "create(StringRef Name, Type *elt1, ...)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (StructType*)",
    "insertText": "get(LLVMContext &Context, ArrayRef<Type*> Elements, bool isPacked = false)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (StructType*)",
    "insertText": "get(LLVMContext &Context, bool isPacked = false)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (StructType*)",
    "insertText": "get(Type *elt1, ...)"
  },
  {
    "label": "isPacked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isPacked()"
  },
  {
    "label": "isLiteral()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLiteral()"
  },
  {
    "label": "isOpaque()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOpaque()"
  },
  {
    "label": "isSized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSized(SmallPtrSetImpl<const Type*> *Visited = nullptr)"
  },
  {
    "label": "hasName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasName()"
  },
  {
    "label": "setName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setName(StringRef Name)"
  },
  {
    "label": "setBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBody(ArrayRef<Type*> Elements, bool isPacked = false)"
  },
  {
    "label": "setBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBody(Type *elt1, ...)"
  },
  {
    "label": "isValidElementType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidElementType(Type *ElemTy)"
  },
  {
    "label": "element_begin()",
    "kind": "Method",
    "detail": "Function (typedef Type::subtype_iterator element_iterator ; element_iterator)",
    "insertText": "element_begin()"
  },
  {
    "label": "isLayoutIdentical()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLayoutIdentical(StructType *Other)"
  },
  {
    "label": "getNumElements()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumElements()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N < NumContainedTys && \"Element number out of range!\")"
  },
  {
    "label": "SequentialType()",
    "kind": "Method",
    "detail": "Function (} } ; class SequentialType : public CompositeType { Type* ContainedType ;)",
    "insertText": "SequentialType(const SequentialType &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const SequentialType&)",
    "insertText": "operator(const SequentialType &)"
  },
  {
    "label": "SequentialType()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "SequentialType(TypeID TID, Type *ElType) : CompositeType(ElType->getContext(), TID), ContainedType(ElType)"
  },
  {
    "label": "getElementType()",
    "kind": "Method",
    "detail": "Function (ContainedTys =& ContainedType ; NumContainedTys = 1 ; } public : Type*)",
    "insertText": "getElementType()"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (} } ; class ArrayType : public SequentialType { uint64_t NumElements ;)",
    "insertText": "ArrayType(const ArrayType &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const ArrayType&)",
    "insertText": "operator(const ArrayType &)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayType(Type *ElType, uint64_t NumEl)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (public : ArrayType*)",
    "insertText": "get(Type *ElementType, uint64_t NumElements)"
  },
  {
    "label": "VectorType()",
    "kind": "Method",
    "detail": "Function (} } ; class VectorType : public SequentialType { unsigned NumElements ;)",
    "insertText": "VectorType(const VectorType &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const VectorType&)",
    "insertText": "operator(const VectorType &)"
  },
  {
    "label": "VectorType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorType(Type *ElType, unsigned NumEl)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (public : VectorType*)",
    "insertText": "get(Type *ElementType, unsigned NumElements)"
  },
  {
    "label": "getInteger()",
    "kind": "Method",
    "detail": "Function (VectorType*)",
    "insertText": "getInteger(VectorType *VTy)"
  },
  {
    "label": "getElementType()",
    "kind": "Method",
    "detail": "Function (unsigned EltBits = VTy ->)",
    "insertText": "getElementType()->getPrimitiveSizeInBits()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(EltBits && \"Element size must be of a non-zero size\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Type* EltTy =)",
    "insertText": "get(VTy->getContext(), EltBits)"
  },
  {
    "label": "getExtendedElementVectorType()",
    "kind": "Method",
    "detail": "Function (} VectorType*)",
    "insertText": "getExtendedElementVectorType(VectorType *VTy)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Type* EltTy =)",
    "insertText": "get(VTy->getContext(), EltBits * 2)"
  },
  {
    "label": "getTruncatedElementVectorType()",
    "kind": "Method",
    "detail": "Function (} VectorType*)",
    "insertText": "getTruncatedElementVectorType(VectorType *VTy)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((EltBits & 1) == 0 && \"Cannot truncate vector element with odd bit-width\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Type* EltTy =)",
    "insertText": "get(VTy->getContext(), EltBits / 2)"
  },
  {
    "label": "getHalfElementsVectorType()",
    "kind": "Method",
    "detail": "Function (} VectorType*)",
    "insertText": "getHalfElementsVectorType(VectorType *VTy)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((NumElts & 1) == 0 && \"Cannot halve vector with odd number of elements.\")"
  },
  {
    "label": "getDoubleElementsVectorType()",
    "kind": "Method",
    "detail": "Function (} VectorType*)",
    "insertText": "getDoubleElementsVectorType(VectorType *VTy)"
  },
  {
    "label": "PointerType()",
    "kind": "Method",
    "detail": "Function (} } ; using FixedVectorType = VectorType ; class PointerType : public SequentialType {)",
    "insertText": "PointerType(const PointerType &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const PointerType&)",
    "insertText": "operator(const PointerType &)"
  },
  {
    "label": "PointerType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PointerType(Type *ElType, unsigned AddrSpace)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (public : PointerType*)",
    "insertText": "get(Type *ElementType, unsigned AddressSpace)"
  },
  {
    "label": "getUnqual()",
    "kind": "Method",
    "detail": "Function (PointerType*)",
    "insertText": "getUnqual(Type *ElementType)"
  },
  {
    "label": "isLoadableOrStorableType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLoadableOrStorableType(Type *ElemTy)"
  },
  {
    "label": "getAddressSpace()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getAddressSpace()"
  }
]