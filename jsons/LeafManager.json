[
  {
    "label": "TreeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeTraits"
  },
  {
    "label": "LeafManagerImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeafManagerImpl"
  },
  {
    "label": "LeafManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeafManager"
  },
  {
    "label": "LeafRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeafRange"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "LeafTransformer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeafTransformer"
  },
  {
    "label": "LeafReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeafReducer"
  },
  {
    "label": "PrefixSum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PrefixSum"
  },
  {
    "label": "doSwapLeafBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TREE_LEAFMANAGER_HAS_BEEN_INCLUDED # define OPENVDB_TREE_LEAFMANAGER_HAS_BEEN_INCLUDED # include<openvdb / Types . h> # include<openvdb / tree / RootNode . h> # include<tbb / blocked_range . h> # include<tbb / parallel_for . h> # include<tbb / parallel_reduce . h> # include<deque> # include<functional> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tree { namespace leafmgr { template<TreeT> struct TreeTraits { const bool IsConstTree = false ; using LeafIterType = TreeT::LeafIter ; } ; template<TreeT> struct TreeTraits<const TreeT> { const bool IsConstTree = true ; using LeafIterType = TreeT::LeafCIter ; } ; } template<ManagerT> struct LeafManagerImpl { using RangeT = ManagerT::RangeType ; using LeafT = ManagerT::LeafType ; using BufT = ManagerT::BufferType ; void)",
    "insertText": "doSwapLeafBuffer(const RangeT& r, size_t auxBufferIdx, LeafT** leafs, BufT* bufs, size_t bufsPerLeaf)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (leafs [ n ] ->)",
    "insertText": "swap(bufs[n * N + auxBufferIdx])"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} } } ; template<TreeT> class LeafManager { public : using TreeType = TreeT ; using ValueType = TreeT::ValueType ; using RootNodeType = TreeT::RootNodeType ; using NonConstLeafType = TreeType::LeafNodeType ; using LeafType = CopyConstness<TreeType,NonConstLeafType>::Type ; using LeafNodeType = LeafType ; using LeafIterType = leafmgr::TreeTraits<TreeT>::LeafIterType ; using NonConstBufferType = LeafType::Buffer ; using BufferType = CopyConstness<TreeType,NonConstBufferType>::Type ; using RangeType = tbb::blocked_range<size_t> ; const Index DEPTH = 2 ; const bool IsConstTree = leafmgr::TreeTraits<TreeT>::IsConstTree ; class LeafRange { public : class Iterator { public :)",
    "insertText": "Iterator(const LeafRange& range, size_t pos): mRange(range), mPos(pos)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(this->isValid())"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Iterator(const Iterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator&)",
    "insertText": "operator(const Iterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (} BufferType&)",
    "insertText": "buffer(size_t bufferIdx)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "pos()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Iterator& other)"
  },
  {
    "label": "leafRange()",
    "kind": "Method",
    "detail": "Function (} const LeafRange&)",
    "insertText": "leafRange()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "end()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "is_divisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_divisible()"
  },
  {
    "label": "LeafRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LeafRange(LeafRange& r, tbb::split) : mEnd(r.mEnd) , mBegin(doSplit(r)) , mGrainSize(r.mGrainSize) , mLeafManager(r.mLeafManager)"
  },
  {
    "label": "doSplit()",
    "kind": "Method",
    "detail": "Function (} private : size_t mEnd,mBegin,mGrainSize ; const LeafManager& mLeafManager ; size_t)",
    "insertText": "doSplit(LeafRange& r)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(r.is_divisible())"
  },
  {
    "label": "mBegin()",
    "kind": "Method",
    "detail": "Function (size_t middle = r .)",
    "insertText": "mBegin(r.mEnd - r.mBegin)"
  },
  {
    "label": "LeafManager()",
    "kind": "Method",
    "detail": "Function (r . mEnd = middle ; return middle ; } } ;)",
    "insertText": "LeafManager(TreeType& tree, size_t auxBuffersPerLeaf=0, bool serial=false) : mTree(&tree) , mLeafCount(0) , mAuxBufferCount(0) , mAuxBuffersPerLeaf(auxBuffersPerLeaf)"
  },
  {
    "label": "rebuild()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "rebuild(serial)"
  },
  {
    "label": "LeafManager()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LeafManager(TreeType& tree, LeafType** begin, LeafType** end, size_t auxBuffersPerLeaf=0, bool serial=false) : mTree(&tree) , mLeafCount(end-begin) , mAuxBufferCount(0) , mAuxBuffersPerLeaf(auxBuffersPerLeaf) , mLeafPtrs(new LeafType*[mLeafCount]) , mLeafs(mLeafPtrs.get())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t n = mLeafCount ; LeafType** target = mLeafs,** source = begin ;)",
    "insertText": "while(n--)"
  },
  {
    "label": "LeafManager()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LeafManager(const LeafManager& other) : mTree(other.mTree) , mLeafCount(other.mLeafCount) , mAuxBufferCount(other.mAuxBufferCount) , mAuxBuffersPerLeaf(other.mAuxBuffersPerLeaf) , mLeafs(other.mLeafs) , mAuxBuffers(other.mAuxBuffers) , mTask(other.mTask)"
  },
  {
    "label": "rebuild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rebuild(bool serial=false)"
  },
  {
    "label": "initLeafArray()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "initLeafArray(serial)"
  },
  {
    "label": "initAuxBuffers()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "initAuxBuffers(serial)"
  },
  {
    "label": "rebuild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rebuild(size_t auxBuffersPerLeaf, bool serial=false)"
  },
  {
    "label": "rebuild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rebuild(TreeType& tree, bool serial=false)"
  },
  {
    "label": "rebuild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rebuild(TreeType& tree, size_t auxBuffersPerLeaf, bool serial=false)"
  },
  {
    "label": "rebuildAuxBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rebuildAuxBuffers(size_t auxBuffersPerLeaf, bool serial=false)"
  },
  {
    "label": "removeAuxBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeAuxBuffers()"
  },
  {
    "label": "rebuildAuxBuffers()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "rebuildAuxBuffers(0)"
  },
  {
    "label": "rebuildLeafArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rebuildLeafArray(bool serial = false)"
  },
  {
    "label": "auxBufferCount()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "auxBufferCount()"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (} const TreeType&)",
    "insertText": "tree()"
  },
  {
    "label": "root()",
    "kind": "Method",
    "detail": "Function (} RootNodeType&)",
    "insertText": "root()"
  },
  {
    "label": "isConstTree()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isConstTree()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(leafIdx<mLeafCount)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(leafIdx < mLeafCount)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(bufferIdx == 0 || bufferIdx - 1 < mAuxBuffersPerLeaf)"
  },
  {
    "label": "getRange()",
    "kind": "Method",
    "detail": "Function (} RangeType)",
    "insertText": "getRange(size_t grainsize = 1)"
  },
  {
    "label": "leafRange()",
    "kind": "Method",
    "detail": "Function (} LeafRange)",
    "insertText": "leafRange(size_t grainsize = 1)"
  },
  {
    "label": "swapLeafBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "swapLeafBuffer(size_t bufferIdx, bool serial = false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (namespace ph = std::placeholders ;)",
    "insertText": "if(bufferIdx == 0 || bufferIdx > mAuxBuffersPerLeaf || this->isConstTree())"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&LeafManager::doSwapLeafBuffer, ph::_1, ph::_2, bufferIdx - 1)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(serial ? 0 : 512)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (namespace ph = std::placeholders ; const size_t b1 =)",
    "insertText": "min(bufferIdx1, bufferIdx2)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (const size_t b2 =)",
    "insertText": "max(bufferIdx1, bufferIdx2)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&LeafManager::doSwapLeafBuffer, ph::_1, ph::_2, b2-1)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} else { mTask =)",
    "insertText": "bind(&LeafManager::doSwapAuxBuffer, ph::_1, ph::_2, b1-1, b2-1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (namespace ph = std::placeholders ;)",
    "insertText": "if(bufferIdx == 0 || bufferIdx > mAuxBuffersPerLeaf)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&LeafManager::doSyncAuxBuffer, ph::_1, ph::_2, bufferIdx - 1)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(serial ? 0 : 64)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (namespace ph = std::placeholders ;)",
    "insertText": "switch(mAuxBuffersPerLeaf)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : mTask =)",
    "insertText": "bind(&LeafManager::doSyncAllBuffers2, ph::_1, ph::_2)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (break ; default : mTask =)",
    "insertText": "bind(&LeafManager::doSyncAllBuffersN, ph::_1, ph::_2)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (LeafTransformer<LeafOp>)",
    "insertText": "transform(op)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (transform .)",
    "insertText": "run(this->leafRange(grainSize), threaded)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (} template<LeafOp> void)",
    "insertText": "reduce(LeafOp& op, bool threaded = true, size_t grainSize=1)"
  },
  {
    "label": "OPENVDB_DEPRECATED_MESSAGE()",
    "kind": "Method",
    "detail": "Function (} template<ArrayT>)",
    "insertText": "OPENVDB_DEPRECATED_MESSAGE(\"Use Tree::getNodes()\") void getNodes(ArrayT& array)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using T = ArrayT::value_type ;)",
    "insertText": "static_assert(std::is_pointer<T>::value, \"argument to getNodes() must be a pointer array\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using LeafT = std::conditional<std::is_const<std::remove_pointer<T>::type>::value,const LeafType,LeafType>::type ; OPENVDB_NO_UNREACHABLE_CODE_WARNING_BEGIN)",
    "insertText": "if(std::is_same<T, LeafT*>::value)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (array .)",
    "insertText": "resize(mLeafCount)"
  },
  {
    "label": "getNodes()",
    "kind": "Method",
    "detail": "Function (} else { mTree ->)",
    "insertText": "getNodes(array)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_UNREACHABLE_CODE_WARNING_BEGIN)",
    "insertText": "if(std::is_same<T, const LeafType*>::value)"
  },
  {
    "label": "getPrefixSum()",
    "kind": "Method",
    "detail": "Function (} OPENVDB_NO_UNREACHABLE_CODE_WARNING_END } size_t)",
    "insertText": "getPrefixSum(size_t*& offsets, size_t& size, size_t grainSize=1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (delete [ ] offsets ; offsets = new size_t [ mLeafCount ] ; size = mLeafCount ; } size_t prefix = 0 ;)",
    "insertText": "if(grainSize > 0)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (PrefixSum)",
    "insertText": "tmp(this->leafRange( grainSize ), offsets, prefix)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(size_t i=0; i<mLeafCount; ++i)"
  },
  {
    "label": "onVoxelCount()",
    "kind": "Method",
    "detail": "Function (offsets [ i ] = prefix ; prefix + = mLeafs [ i ] ->)",
    "insertText": "onVoxelCount()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } return prefix ; } void)",
    "insertText": "operator()(const RangeType& r)"
  },
  {
    "label": "initLeafArray()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "initLeafArray(bool serial = false)"
  },
  {
    "label": "getNodes()",
    "kind": "Method",
    "detail": "Function (using NodeChainT = NodeChain<RootNodeType,RootNodeType::LEVEL>::Type ; using NonConstLeafParentT = NodeChainT::template Get<1> ; using LeafParentT = CopyConstness<TreeType,NonConstLeafParentT>::Type ; std::deque<LeafParentT*> leafParents ; mTree ->)",
    "insertText": "getNodes(leafParents)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::vector<Index32> leafCounts ;)",
    "insertText": "if(serial)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (leafCounts .)",
    "insertText": "reserve(leafParents.size())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (leafCounts .)",
    "insertText": "push_back(leafParent->childCount())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} } else { leafCounts .)",
    "insertText": "resize(leafParents.size())"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, leafParents.size(), 64), [&](tbb::blocked_range<size_t>& range) { for (size_t i = range.begin(); i < range.end(); i++) { leafCounts[i] = leafParents[i]->childCount(); } })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(size_t i = 1; i < leafCounts.size(); i++)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (leafCounts [ i ] + = leafCounts [ i - 1 ] ; } const size_t leafCount = leafCounts .)",
    "insertText": "empty() ? 0 : leafCounts.back()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mLeafPtrs .)",
    "insertText": "reset(new LeafType*[leafCount])"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (mLeafs = mLeafPtrs .)",
    "insertText": "get()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} else { mLeafPtrs .)",
    "insertText": "reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mLeafs = nullptr ; } mLeafCount = leafCount ; })",
    "insertText": "if(mLeafCount == 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (LeafType** leafPtr = mLeafs ;)",
    "insertText": "for(LeafParentT* leafParent : leafParents)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (* leafPtr + + =& iter .)",
    "insertText": "getValue()"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, leafParents.size()), [&](tbb::blocked_range<size_t>& range) { size_t i = range.begin(); LeafType** leafPtr = mLeafs; if (i > 0) leafPtr += leafCounts[i-1]; for ( ; i < range.end(); i++) { for (auto iter = leafParents[i]->beginChildOn(); iter; ++iter) { *leafPtr++ = &iter.getValue(); } } })"
  },
  {
    "label": "initAuxBuffers()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "initAuxBuffers(bool serial)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const size_t auxBufferCount = mLeafCount* mAuxBuffersPerLeaf ;)",
    "insertText": "if(auxBufferCount != mAuxBufferCount)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mAuxBufferPtrs .)",
    "insertText": "reset(new NonConstBufferType[auxBufferCount])"
  },
  {
    "label": "syncAllBuffers()",
    "kind": "Method",
    "detail": "Function (mAuxBuffers = nullptr ; } mAuxBufferCount = auxBufferCount ; } this ->)",
    "insertText": "syncAllBuffers(serial)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "cook(size_t grainsize)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(this->getRange(grainsize), *this)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this)(this->getRange())"
  },
  {
    "label": "doSwapLeafBuffer()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "doSwapLeafBuffer(const RangeType& r, size_t auxBufferIdx)"
  },
  {
    "label": "doSwapLeafBuffer()",
    "kind": "Method",
    "detail": "Function (LeafManagerImpl<LeafManager)",
    "insertText": "doSwapLeafBuffer(r, auxBufferIdx, mLeafs, mAuxBuffers, mAuxBuffersPerLeaf)"
  },
  {
    "label": "doSwapAuxBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "doSwapAuxBuffer(const RangeType& r, size_t auxBufferIdx1, size_t auxBufferIdx2)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (mAuxBuffers [ n + auxBufferIdx1 ] .)",
    "insertText": "swap(mAuxBuffers[n + auxBufferIdx2])"
  },
  {
    "label": "doSyncAuxBuffer()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "doSyncAuxBuffer(const RangeType& r, size_t auxBufferIdx)"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (mAuxBuffers [ n* N + auxBufferIdx ] = mLeafs [ n ] ->)",
    "insertText": "buffer()"
  },
  {
    "label": "doSyncAllBuffers1()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "doSyncAllBuffers1(const RangeType& r)"
  },
  {
    "label": "doSyncAllBuffers2()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "doSyncAllBuffers2(const RangeType& r)"
  },
  {
    "label": "doSyncAllBuffersN()",
    "kind": "Method",
    "detail": "Function (mAuxBuffers [ 2* n ] = leafBuffer ; mAuxBuffers [ 2* n + 1 ] = leafBuffer ; } } void)",
    "insertText": "doSyncAllBuffersN(const RangeType& r)"
  },
  {
    "label": "LeafTransformer()",
    "kind": "Method",
    "detail": "Function (} } template<LeafOp> struct LeafTransformer {)",
    "insertText": "LeafTransformer(const LeafOp &leafOp) : mLeafOp(leafOp)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "run(const LeafRange &range, bool threaded)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (threaded ?)",
    "insertText": "parallel_for(range, *this) : (*this)(range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const LeafRange &range)"
  },
  {
    "label": "LeafReducer()",
    "kind": "Method",
    "detail": "Function (} const LeafOp mLeafOp ; } ; template<LeafOp> struct LeafReducer {)",
    "insertText": "LeafReducer(LeafOp &leafOp) : mLeafOp(&leafOp)"
  },
  {
    "label": "LeafReducer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LeafReducer(const LeafReducer &other, tbb::split) : mLeafOpPtr(std::make_unique<LeafOp>(*(other.mLeafOp), tbb::split())) , mLeafOp(mLeafOpPtr.get())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "run(const LeafRange& range, bool threaded)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (threaded ?)",
    "insertText": "parallel_reduce(range, *this) : (*this)(range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const LeafRange& range)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (LeafOp& op =* mLeafOp ;)",
    "insertText": "for(typename LeafRange::Iterator it = range.begin(); it; ++it) op(*it, it.pos())"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "join(const LeafReducer& other)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (mLeafOp ->)",
    "insertText": "join(*(other.mLeafOp))"
  },
  {
    "label": "PrefixSum()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<LeafOp> mLeafOpPtr ; LeafOp* mLeafOp = nullptr ; } ; struct PrefixSum {)",
    "insertText": "PrefixSum(const LeafRange& r, size_t* offsets, size_t& prefix) : mOffsets(offsets)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(r, *this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (size_t tmp = offsets [ i ] ; offsets [ i ] = prefix ; prefix + = tmp ; } } void)",
    "insertText": "operator()(const LeafRange& r)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (mOffsets [ i .)",
    "insertText": "pos()] = i->onVoxelCount()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } size_t* mOffsets ; } ; using FuncType = std::function<)",
    "insertText": "void(LeafManager*, const RangeType&)"
  },
  {
    "label": "doSwapLeafBuffer()",
    "kind": "Method",
    "detail": "Function (TreeType* mTree ; size_t mLeafCount,mAuxBufferCount,mAuxBuffersPerLeaf ; std::unique_ptr<LeafType* [ ]> mLeafPtrs ; LeafType** mLeafs = nullptr ; std::unique_ptr<NonConstBufferType [ ]> mAuxBufferPtrs ; NonConstBufferType* mAuxBuffers = nullptr ; FuncType mTask = nullptr ; } ; template<TreeT> struct LeafManagerImpl<LeafManager<const TreeT>> { using ManagerT = LeafManager<const TreeT> ; using RangeT = ManagerT::RangeType ; using LeafT = ManagerT::LeafType ; using BufT = ManagerT::BufferType ; void)",
    "insertText": "doSwapLeafBuffer(const RangeT&, size_t , LeafT**, BufT*, size_t)"
  }
]