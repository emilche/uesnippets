[
  {
    "label": "sparselu_gemm()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSELU_GEMM_KERNEL_H # define EIGEN_SPARSELU_GEMM_KERNEL_H namespace Eigen { namespace internal { template<Scalar> EIGEN_DONT_INLINE void)",
    "insertText": "sparselu_gemm(Index m, Index n, Index d, const Scalar* A, Index lda, const Scalar* B, Index ldb, Scalar* C, Index ldc)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (using namespace Eigen::internal ; typedef packet_traits<Scalar>::type Packet ; enum { NumberOfRegisters = EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS,PacketSize = packet_traits<Scalar>::size,PM = 8,RN = 2,RK = NumberOfRegisters> = 1 6 ? 4 : 2,BM = 4 0 9 6 /)",
    "insertText": "sizeof(Scalar)"
  },
  {
    "label": "d_end()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "d_end(d/RK)"
  },
  {
    "label": "n_end()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "n_end(n/RN)"
  },
  {
    "label": "first_default_aligned()",
    "kind": "Method",
    "detail": "Function (Index i0 =)",
    "insertText": "first_default_aligned(A,m)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(((lda%PacketSize)==0) && ((ldc%PacketSize)==0) && (i0==internal::first_default_aligned(C,m)))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Scalar c = C [ i + j* ldc ] ;)",
    "insertText": "for(Index k=0; k<d; ++k)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (C [ i + j* ldc ] = c ; } })",
    "insertText": "for(Index ib=i0; ib<m; ib+=BM)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index actual_b = std::min<)",
    "insertText": "Index(BM, m-ib)"
  },
  {
    "label": "actual_b_end1()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "actual_b_end1(actual_b/SM)"
  },
  {
    "label": "actual_b_end2()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "actual_b_end2(actual_b/PacketSize)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (const Scalar* Bc0 =)",
    "insertText": "B(j+0)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (const Scalar* Bc1 =)",
    "insertText": "B(j+1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet b00,b10,b20,b30,b01,b11,b21,b31 ; { b00 = pset1<)",
    "insertText": "Packet(Bc0[0])"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (} { b10 = pset1<)",
    "insertText": "Packet(Bc0[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(RK==4)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (b20 = pset1<)",
    "insertText": "Packet(Bc0[2])"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (b30 = pset1<)",
    "insertText": "Packet(Bc0[3])"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (} { b01 = pset1<)",
    "insertText": "Packet(Bc1[0])"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (} { b11 = pset1<)",
    "insertText": "Packet(Bc1[1])"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (b21 = pset1<)",
    "insertText": "Packet(Bc1[2])"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (b31 = pset1<)",
    "insertText": "Packet(Bc1[3])"
  },
  {
    "label": "ib()",
    "kind": "Method",
    "detail": "Function (} Packet a0,a1,a2,a3,c0,c1,t0,t1 ; const Scalar* A0 = A +)",
    "insertText": "ib(k+0)"
  },
  {
    "label": "ib()",
    "kind": "Method",
    "detail": "Function (const Scalar* A1 = A +)",
    "insertText": "ib(k+1)"
  },
  {
    "label": "ib()",
    "kind": "Method",
    "detail": "Function (const Scalar* A2 = A +)",
    "insertText": "ib(k+2)"
  },
  {
    "label": "ib()",
    "kind": "Method",
    "detail": "Function (const Scalar* A3 = A +)",
    "insertText": "ib(k+3)"
  },
  {
    "label": "ib()",
    "kind": "Method",
    "detail": "Function (Scalar* C0 = C +)",
    "insertText": "ib(j+0)"
  },
  {
    "label": "ib()",
    "kind": "Method",
    "detail": "Function (Scalar* C1 = C +)",
    "insertText": "ib(j+1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (a0 = pload<)",
    "insertText": "Packet(A0)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (a1 = pload<)",
    "insertText": "Packet(A1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (a2 = pload<)",
    "insertText": "Packet(A2)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (a3 = pload<)",
    "insertText": "Packet(A3)"
  },
  {
    "label": "KMADD()",
    "kind": "Method",
    "detail": "Function (} else { a2 = a3 = a0 ; } # define)",
    "insertText": "KMADD(c, a, b, tmp)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (tmp = b ; tmp =)",
    "insertText": "pmul(a,tmp)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (c =)",
    "insertText": "padd(c,tmp)"
  },
  {
    "label": "WORK()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "WORK(I) \\ c0 = pload<Packet>(C0+i+(I)*PacketSize)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (\\ c1 = pload<)",
    "insertText": "Packet(C1+i+(I)*PacketSize)"
  },
  {
    "label": "KMADD()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "KMADD(c0, a0, b00, t0) \\ KMADD(c1, a0, b01, t1) \\ a0 = pload<Packet>(A0+i+(I+1)*PacketSize)"
  },
  {
    "label": "KMADD()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "KMADD(c0, a1, b10, t0) \\ KMADD(c1, a1, b11, t1) \\ a1 = pload<Packet>(A1+i+(I+1)*PacketSize)"
  },
  {
    "label": "KMADD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KMADD(c0, a2, b20, t0) }\\ if(RK==4)"
  },
  {
    "label": "KMADD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KMADD(c1, a2, b21, t1) }\\ if(RK==4)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (a2 = pload<)",
    "insertText": "Packet(A2+i+(I+1)*PacketSize)"
  },
  {
    "label": "KMADD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KMADD(c0, a3, b30, t0) }\\ if(RK==4)"
  },
  {
    "label": "KMADD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KMADD(c1, a3, b31, t1) }\\ if(RK==4)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (a3 = pload<)",
    "insertText": "Packet(A3+i+(I+1)*PacketSize)"
  },
  {
    "label": "pstore()",
    "kind": "Method",
    "detail": "Function (} \\)",
    "insertText": "pstore(C0+i+(I)*PacketSize, c0)"
  },
  {
    "label": "pstore()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "pstore(C1+i+(I)*PacketSize, c1) for(Index i=0; i<actual_b_end1; i+=PacketSize*8)"
  },
  {
    "label": "EIGEN_ASM_COMMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ASM_COMMENT(\"SPARSELU_GEMML_KERNEL1\")"
  },
  {
    "label": "prefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prefetch((A0+i+(5)*PacketSize))"
  },
  {
    "label": "prefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prefetch((A1+i+(5)*PacketSize))"
  },
  {
    "label": "WORK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WORK(0)"
  },
  {
    "label": "WORK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WORK(1)"
  },
  {
    "label": "WORK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WORK(2)"
  },
  {
    "label": "WORK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WORK(3)"
  },
  {
    "label": "WORK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WORK(4)"
  },
  {
    "label": "WORK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WORK(5)"
  },
  {
    "label": "WORK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WORK(6)"
  },
  {
    "label": "WORK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WORK(7)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i=actual_b_end1; i<actual_b_end2; i+=PacketSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} # undef WORK)",
    "insertText": "for(Index i=actual_b_end2; i<actual_b; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (C0 [ i ] + = A0 [ i ]* Bc0 [ 0 ] + A1 [ i ]* Bc0 [ 1 ] + A2 [ i ]* Bc0 [ 2 ] + A3 [ i ]* Bc0 [ 3 ] ; C1 [ i ] + = A0 [ i ]* Bc1 [ 0 ] + A1 [ i ]* Bc1 [ 1 ] + A2 [ i ]* Bc1 [ 2 ] + A3 [ i ]* Bc1 [ 3 ] ; } else { C0 [ i ] + = A0 [ i ]* Bc0 [ 0 ] + A1 [ i ]* Bc0 [ 1 ] ; C1 [ i ] + = A0 [ i ]* Bc1 [ 0 ] + A1 [ i ]* Bc1 [ 1 ] ; } } Bc0 + = RK ; Bc1 + = RK ; } })",
    "insertText": "if((n-n_end)>0)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (const Scalar* Bc0 =)",
    "insertText": "B(n-1)"
  },
  {
    "label": "ib()",
    "kind": "Method",
    "detail": "Function (Scalar* C0 = C +)",
    "insertText": "ib(n_end)"
  },
  {
    "label": "KMADD()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "KMADD(c0, a0, b00, t0) \\ a0 = pload<Packet>(A0+i+(I+1)*PacketSize)"
  },
  {
    "label": "KMADD()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "KMADD(c0, a1, b10, t0) \\ a1 = pload<Packet>(A1+i+(I+1)*PacketSize)"
  },
  {
    "label": "EIGEN_ASM_COMMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ASM_COMMENT(\"SPARSELU_GEMML_KERNEL2\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (enum { Alignment = PacketSize> 1 ? Aligned : 0 } ; typedef Map<Matrix<Scalar,Dynamic,1>,Alignment> MapVector ; typedef Map<const Matrix<Scalar,Dynamic,1>,Alignment> ConstMapVector ;)",
    "insertText": "if(rd==1) MapVector(C+j*ldc+ib,actual_b) += B[0+d_end+j*ldb] * ConstMapVector(A+(d_end+0)*lda+ib, actual_b)"
  }
]