[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "TickClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TickClock"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Receiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Receiver"
  },
  {
    "label": "WallClockTimer()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TIMER_WALL_CLOCK_TIMER_H_ # define BASE_TIMER_WALL_CLOCK_TIMER_H_ # include \" base / base_export . h \" # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / location . h \" # include \" base / memory / raw_ptr . h \" # include \" base / power_monitor / power_observer . h \" # include \" base / time / default_clock . h \" # include \" base / time / time . h \" # include \" base / timer / timer . h \" namespace base { class Clock ; class TickClock ; class BASE_EXPORT WallClockTimer : public PowerSuspendObserver { public :)",
    "insertText": "WallClockTimer()"
  },
  {
    "label": "WallClockTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WallClockTimer(const Clock* clock, const TickClock* tick_clock)"
  },
  {
    "label": "WallClockTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WallClockTimer(const WallClockTimer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WallClockTimer&)",
    "insertText": "operator(const WallClockTimer&)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(const Location& posted_from, Time desired_run_time, OnceClosure user_task)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (template<class Receiver> void)",
    "insertText": "Start(const Location& posted_from, Time desired_run_time, Receiver* receiver, void (Receiver::*method)())"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(posted_from, desired_run_time, BindOnce(method, Unretained(receiver)))"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Stop()"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "OnResume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResume()"
  },
  {
    "label": "desired_run_time()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "desired_run_time()"
  },
  {
    "label": "RemoveObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObserver()"
  },
  {
    "label": "RunUserTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunUserTask()"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "Now()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (bool observer_added_ = false ; Location posted_from_ ; Time desired_run_time_ ; OnceClosure user_task_ ; OneShotTimer timer_ ; const raw_ptr<const Clock> clock_ =)",
    "insertText": "GetInstance()"
  }
]