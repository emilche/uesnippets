[
  {
    "label": "UAnimCompress_RemoveLinearKeys",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCompress_RemoveLinearKeys"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Animation / AnimSequence . h \" # include \" AnimationUtils . h \" # include \" Animation / AnimCompress . h \" # include \" AnimCompress_RemoveLinearKeys . generated . h \")",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, Category=LinearKeyRemoval)"
  },
  {
    "label": "EstimateCompressionMemoryUsage()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA int64)",
    "insertText": "EstimateCompressionMemoryUsage(const UAnimSequence& AnimSequence)"
  },
  {
    "label": "DoReduction()",
    "kind": "Method",
    "detail": "Function (# endif protected : # if WITH_EDITOR bool)",
    "insertText": "DoReduction(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& OutResult)"
  },
  {
    "label": "PopulateDDCKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateDDCKey(const UE::Anim::Compression::FAnimDDCKeyArgs& KeyArgs, FArchive& Ar)"
  },
  {
    "label": "FilterBeforeMainKeyRemoval()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR void*)",
    "insertText": "FilterBeforeMainKeyRemoval(const FCompressibleAnimData& CompressibleAnimData, TArray<FTranslationTrack>& TranslationData, TArray<FRotationTrack>& RotationData, TArray<FScaleTrack>& ScaleData)"
  },
  {
    "label": "CompressUsingUnderlyingCompressor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressUsingUnderlyingCompressor(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& OutCompressedData, const TArray<FTranslationTrack>& TranslationData, const TArray<FRotationTrack>& RotationData, const TArray<FScaleTrack>& ScaleData, const bool bFinalPass)"
  },
  {
    "label": "UpdateWorldBoneTransformRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldBoneTransformRange(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& OutCompressedData, const TArray<FTransform>& RefPose, const TArray<FTranslationTrack>& PositionTracks, const TArray<FRotationTrack>& RotationTracks, const TArray<FScaleTrack>& ScaleTracks, int32 StartingBoneIndex, int32 EndingBoneIndex, bool UseRaw, TArray<FTransform>& OutputWorldBones)"
  },
  {
    "label": "UpdateWorldBoneTransformTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldBoneTransformTable(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& OutCompressedData, const TArray<FTransform>& RefPose, int32 BoneIndex, bool UseRaw, TArray<FTransform>& OutputWorldBones)"
  },
  {
    "label": "UpdateBoneAtomList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBoneAtomList(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& OutCompressedData, int32 BoneIndex, int32 TrackIndex, int32 NumFrames, float TimePerFrame, TArray<FTransform>& BoneAtoms)"
  },
  {
    "label": "ConvertFromRelativeSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertFromRelativeSpace(FCompressibleAnimData& CompressibleAnimData)"
  },
  {
    "label": "ConvertToRelativeSpaceBoth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToRelativeSpaceBoth(FCompressibleAnimData& CompressibleAnimData, TArray<FTranslationTrack>& TranslationData, TArray<FRotationTrack>& RotationData, TArray<FScaleTrack>& ScaleData)"
  },
  {
    "label": "ConvertToRelativeSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToRelativeSpace(FCompressibleAnimData& CompressibleAnimData)"
  },
  {
    "label": "ConvertToRelativeSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToRelativeSpace(const FCompressibleAnimData& CompressibleAnimData, TArray<FTranslationTrack>& TranslationData, TArray<FRotationTrack>& RotationData, TArray<FScaleTrack>& ScaleData)"
  },
  {
    "label": "ProcessAnimationTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAnimationTracks(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& OutCompressedData, TArray<FTranslationTrack>& PositionTracks, TArray<FRotationTrack>& RotationTracks, TArray<FScaleTrack>& ScaleTracks)"
  }
]