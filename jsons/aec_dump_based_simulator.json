[
  {
    "label": "AecDumpBasedSimulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AecDumpBasedSimulator"
  },
  {
    "label": "InterfaceType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "InterfaceType"
  },
  {
    "label": "RTC_PUSH_IGNORING_WUNDEF()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_TEST_AEC_DUMP_BASED_SIMULATOR_H_ # define MODULES_AUDIO_PROCESSING_TEST_AEC_DUMP_BASED_SIMULATOR_H_ # include<fstream> # include<string> # include \" modules / audio_processing / test / audio_processing_simulator . h \" # include \" rtc_base / ignore_wundef . h \")",
    "insertText": "RTC_PUSH_IGNORING_WUNDEF() #ifdef WEBRTC_ANDROID_PLATFORM_BUILD #include \"external/webrtc/webrtc/modules/audio_processing/debug.pb.h\" #else #include \"modules/audio_processing/debug.pb.h\" #endif RTC_POP_IGNORING_WUNDEF()"
  },
  {
    "label": "AecDumpBasedSimulator()",
    "kind": "Method",
    "detail": "Function (namespace test { class AecDumpBasedSimulator final : public AudioProcessingSimulator { public :)",
    "insertText": "AecDumpBasedSimulator(const SimulationSettings& settings, rtc::scoped_refptr<AudioProcessing> audio_processing, std::unique_ptr<AudioProcessingBuilder> ap_builder)"
  },
  {
    "label": "AecDumpBasedSimulator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AecDumpBasedSimulator()"
  },
  {
    "label": "AecDumpBasedSimulator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AecDumpBasedSimulator(const AecDumpBasedSimulator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AecDumpBasedSimulator&)",
    "insertText": "operator(const AecDumpBasedSimulator&)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process()"
  },
  {
    "label": "Analyze()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Analyze()"
  },
  {
    "label": "HandleEvent()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleEvent(const webrtc::audioproc::Event& event_msg, int& num_forward_chunks_processed, int& init_index)"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMessage(const webrtc::audioproc::Init& msg, int init_index)"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMessage(const webrtc::audioproc::Stream& msg)"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMessage(const webrtc::audioproc::ReverseStream& msg)"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMessage(const webrtc::audioproc::Config& msg)"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMessage(const webrtc::audioproc::RuntimeSetting& msg)"
  },
  {
    "label": "PrepareProcessStreamCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareProcessStreamCall(const webrtc::audioproc::Stream& msg)"
  },
  {
    "label": "PrepareReverseProcessStreamCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareReverseProcessStreamCall(const webrtc::audioproc::ReverseStream& msg)"
  },
  {
    "label": "VerifyProcessStreamBitExactness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyProcessStreamBitExactness(const webrtc::audioproc::Stream& msg)"
  },
  {
    "label": "MaybeOpenCallOrderFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeOpenCallOrderFile()"
  }
]