[
  {
    "label": "TestLeaf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestLeaf"
  },
  {
    "label": "TestLeafIO",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestLeafIO"
  },
  {
    "label": "SameLeafConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameLeafConfig"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "LeafNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeafNode"
  },
  {
    "label": "ValueConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueConverter"
  },
  {
    "label": "SameConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameConfiguration"
  },
  {
    "label": "ValueOn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueOn"
  },
  {
    "label": "ValueOff",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueOff"
  },
  {
    "label": "ValueAll",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueAll"
  },
  {
    "label": "ChildOn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChildOn"
  },
  {
    "label": "ChildOff",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChildOff"
  },
  {
    "label": "ChildAll",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChildAll"
  },
  {
    "label": "ValueIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueIter"
  },
  {
    "label": "ChildIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChildIter"
  },
  {
    "label": "DenseIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseIter"
  },
  {
    "label": "LeafNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeafNode"
  },
  {
    "label": "ValueIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueIter"
  },
  {
    "label": "ValueIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueIter"
  },
  {
    "label": "ValueIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueIter"
  },
  {
    "label": "ValueIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueIter"
  },
  {
    "label": "ValueIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueIter"
  },
  {
    "label": "ValueIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueIter"
  },
  {
    "label": "IteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorBase"
  },
  {
    "label": "IteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorBase"
  },
  {
    "label": "IteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorBase"
  },
  {
    "label": "SameLeafConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameLeafConfig"
  },
  {
    "label": "SameLeafConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameLeafConfig"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "LeafNode()",
    "kind": "Method",
    "detail": "Function (constructor)",
    "insertText": "LeafNode()"
  },
  {
    "label": "LeafNode()",
    "kind": "Method",
    "detail": "Function (constructor)",
    "insertText": "LeafNode(const LeafNode&)"
  },
  {
    "label": "LeafNode()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "LeafNode(const LeafNode<OtherValueType, Log2Dim>& other)"
  },
  {
    "label": "LeafNode()",
    "kind": "Method",
    "detail": "Function (OtherValueType>)",
    "insertText": "LeafNode(const LeafNode<OtherValueType, Log2Dim>& other,\n             const ValueType& offValue, const ValueType& onValue, TopologyCopy)"
  },
  {
    "label": "LeafNode()",
    "kind": "Method",
    "detail": "Function (OtherValueType>)",
    "insertText": "LeafNode(const LeafNode<OtherValueType, Log2Dim>& other,\n             const ValueType& background, TopologyCopy)"
  },
  {
    "label": "onVoxelCount()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "onVoxelCount()"
  },
  {
    "label": "offVoxelCount()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "offVoxelCount()"
  },
  {
    "label": "coordToOffset()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "coordToOffset(const Coord& xyz)"
  },
  {
    "label": "offsetToLocalCoord()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "offsetToLocalCoord(Index n)"
  },
  {
    "label": "readTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readTopology(std::istream& is, bool fromHalf = false)"
  },
  {
    "label": "readBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readBuffers(std::istream& is, bool fromHalf = false)"
  },
  {
    "label": "readBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readBuffers(std::istream& is, const CoordBBox& bbox, bool fromHalf = false)"
  },
  {
    "label": "setActiveState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setActiveState(const Coord& xyz, bool on)"
  },
  {
    "label": "setValueOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOnly(const Coord& xyz, const ValueType& val)"
  },
  {
    "label": "setValueOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOnly(Index offset, const ValueType& val)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOff(const Coord& xyz, const ValueType& val)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOff(Index offset, const ValueType& val)"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clip(const CoordBBox&, const ValueType& background)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(const CoordBBox& bbox, const ValueType&, bool active = true)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(const ValueType& value)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(const ValueType& value, bool active)"
  },
  {
    "label": "copyFromDense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFromDense(const CoordBBox& bbox, const DenseT& dense,\n                       const ValueType& background, const ValueType& tolerance)"
  },
  {
    "label": "resetBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetBackground(const ValueType& oldBackground, const ValueType& newBackground)"
  },
  {
    "label": "negate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "negate()"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "merge(const LeafNode&)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "merge(const ValueType& tileValue, bool tileActive)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "merge(const LeafNode& other, const ValueType& /*bg*/, const ValueType& /*otherBG*/)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyUnion(const LeafNode<OtherType, Log2Dim>& other, const bool preserveTiles = false)"
  },
  {
    "label": "topologyIntersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyIntersection(const LeafNode<OtherType, Log2Dim>& other, const ValueType&)"
  },
  {
    "label": "topologyDifference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyDifference(const LeafNode<OtherType, Log2Dim>& other, const ValueType&)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine(const LeafNode& other, CombineOp& op)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine(const ValueType& value, bool valueIsActive, CombineOp& op)"
  },
  {
    "label": "combine2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine2(const LeafNode& other, const OtherType&, bool valueIsActive, CombineOp&)"
  },
  {
    "label": "combine2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine2(const ValueType&, const OtherNodeT& other, bool valueIsActive, CombineOp&)"
  },
  {
    "label": "combine2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine2(const LeafNode& b0, const OtherNodeT& b1, CombineOp&)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit(VisitorOp&)"
  },
  {
    "label": "visit2Node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit2Node(OtherLeafNodeType& other, VisitorOp&)"
  },
  {
    "label": "visit2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit2(IterT& otherIter, VisitorOp&, bool otherIsLHS = false)"
  },
  {
    "label": "addTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTile(Index level, const Coord&, const ValueType&, bool)"
  },
  {
    "label": "addTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTile(Index offset, const ValueType&, bool)"
  },
  {
    "label": "addTileAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTileAndCache(Index, const Coord&, const ValueType&, bool, AccessorT&)"
  },
  {
    "label": "skipCompressedValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "skipCompressedValues(bool seekable, std::istream&, bool fromHalf)"
  },
  {
    "label": "doVisit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doVisit(NodeT&, VisitorOp&)"
  },
  {
    "label": "doVisit2Node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doVisit2Node(NodeT& self, OtherNodeT& other, VisitorOp&)"
  },
  {
    "label": "doVisit2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doVisit2(NodeT& self, OtherChildAllIterT&, VisitorOp&, bool otherIsLHS)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueType(val)"
  }
]