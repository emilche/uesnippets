[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "CharType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharType"
  },
  {
    "label": "TJsonReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TJsonReader"
  },
  {
    "label": "FJsonStringReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonStringReader"
  },
  {
    "label": "TJsonStringViewReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TJsonStringViewReader"
  },
  {
    "label": "TJsonReaderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TJsonReaderFactory"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Serialization / JsonTypes . h \" # include \" Serialization / BufferReader . h \" # include \" Misc / StringBuilder . h \" class Error ; # define JSON_NOTATIONMAP_DEF \\ EJsonNotation TokenToNotationTable [ ] = \\ { \\ EJsonNotation::Error,\\ EJsonNotation::Error,\\ EJsonNotation::ObjectStart,\\ EJsonNotation::ObjectEnd,\\ EJsonNotation::ArrayStart,\\ EJsonNotation::ArrayEnd,\\ EJsonNotation::Error,\\ EJsonNotation::String,\\ EJsonNotation::Number,\\ EJsonNotation::Boolean,\\ EJsonNotation::Boolean,\\ EJsonNotation::Null,\\ } ; # ifndef WITH_JSON_INLINED_NOTATIONMAP # define WITH_JSON_INLINED_NOTATIONMAP 0 # endif # if ! WITH_JSON_INLINED_NOTATIONMAP JSON_NOTATIONMAP_DEF ; # endif template<class CharType = TCHAR> class TJsonReader { public : TSharedRef<TJsonReader<CharType>>)",
    "insertText": "Create(FArchive* const Stream)"
  },
  {
    "label": "TJsonReader()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "TJsonReader()"
  },
  {
    "label": "ReadNext()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReadNext(EJsonNotation& Notation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Notation = EJsonNotation::Error ; return false ; })",
    "insertText": "if(Stream == nullptr)"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (Notation = EJsonNotation::Error ;)",
    "insertText": "SetErrorMessage(TEXT(\"Null Stream\"))"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (Notation = EJsonNotation::Error ;)",
    "insertText": "SetErrorMessage(TEXT(\"Improperly formatted.\"))"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (Notation = EJsonNotation::Error ;)",
    "insertText": "SetErrorMessage(TEXT(\"Unexpected additional input found.\"))"
  },
  {
    "label": "Top()",
    "kind": "Method",
    "detail": "Function (CurrentState = ParseState .)",
    "insertText": "Top()"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "switch(CurrentState)"
  },
  {
    "label": "ReadNextObjectValue()",
    "kind": "Method",
    "detail": "Function (break ; case EJson::Object : ReadWasSuccess =)",
    "insertText": "ReadNextObjectValue(CurrentToken)"
  },
  {
    "label": "ReadStart()",
    "kind": "Method",
    "detail": "Function (break ; default : ReadWasSuccess =)",
    "insertText": "ReadStart(CurrentToken)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "while(ReadWasSuccess && (CurrentToken == EJsonToken::None))"
  },
  {
    "label": "TokenToNotationTable()",
    "kind": "Method",
    "detail": "Function (# if WITH_JSON_INLINED_NOTATIONMAP JSON_NOTATIONMAP_DEF ; # endif Notation =)",
    "insertText": "TokenToNotationTable(int32)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FinishedReadingRootObject = ParseState .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Notation = EJsonNotation::Error ;)",
    "insertText": "if(ErrorMessage.IsEmpty())"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetErrorMessage(TEXT(\"Unknown Error Occurred\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return true ; })",
    "insertText": "if(FinishedReadingRootObject && !Stream->AtEnd())"
  },
  {
    "label": "ParseWhiteSpace()",
    "kind": "Method",
    "detail": "Function (ReadWasSuccess =)",
    "insertText": "ParseWhiteSpace()"
  },
  {
    "label": "SkipObject()",
    "kind": "Method",
    "detail": "Function (} return ReadWasSuccess ; } bool)",
    "insertText": "SkipObject()"
  },
  {
    "label": "SkipArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SkipArray()"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "TJsonReader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TJsonReader(FArchive* InStream) : ParseState() , CurrentToken(EJsonToken::None) , Stream(InStream) , Identifier() , ErrorMessage() , StringValue() , NumberValue(0.0f) , LineNumber(1) , CharacterNumber(0) , BoolValue(false) , FinishedReadingRootObject(false)"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "SetErrorMessage(const FString& Message)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (ErrorMessage = Message +)",
    "insertText": "Printf(TEXT(\" Line: %u Ch: %u\"), LineNumber, CharacterNumber)"
  },
  {
    "label": "ReadUntilMatching()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReadUntilMatching(const EJsonNotation ExpectedNotation)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 ScopeCount = 0 ; EJsonNotation Notation ;)",
    "insertText": "while(ReadNext(Notation))"
  },
  {
    "label": "ReadStart()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReadStart(EJsonToken& Token)"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetErrorMessage(TEXT(\"Open Curly or Square Brace token expected, but not found.\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bCommaPrepend = Token ! = EJsonToken::CurlyOpen ; Token = EJsonToken::None ;)",
    "insertText": "if(NextToken(Token) == false)"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetErrorMessage(TEXT(\"Comma token expected, but not found.\"))"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetErrorMessage(TEXT(\"String token expected, but not found.\"))"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetErrorMessage(TEXT(\"Colon token expected, but not found.\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bCommaPrepend = Token ! = EJsonToken::SquareOpen ; Token = EJsonToken::None ;)",
    "insertText": "if(!NextToken(Token))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CharType Char ;)",
    "insertText": "if(!Serialize(&Char, sizeof(CharType)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "if(IsLineBreak(Char))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + LineNumber ; CharacterNumber = 0 ; })",
    "insertText": "if(!IsWhitespace(Char))"
  },
  {
    "label": "ParseNumberToken()",
    "kind": "Method",
    "detail": "Function (bool bParseNumberSucceed =)",
    "insertText": "ParseNumberToken(Char)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (OutToken = EJsonToken::Number ; return true ; } })",
    "insertText": "switch(Char)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (ParseState .)",
    "insertText": "Push(EJson::Object)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutToken = EJsonToken::CurlyClose ;)",
    "insertText": "if(ParseState.Num())"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (ParseState .)",
    "insertText": "Pop()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (ParseState .)",
    "insertText": "Push(EJson::Array)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FString Test ; Test + = Char ;)",
    "insertText": "while(!Stream->AtEnd())"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (+ + CharacterNumber ; Test + = Char ; } else { Stream ->)",
    "insertText": "Seek(Stream->Tell() - sizeof(CharType))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(Test == TEXT(\"False\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BoolValue = false ; OutToken = EJsonToken::False ; return true ; })",
    "insertText": "if(Test == TEXT(\"True\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BoolValue = true ; OutToken = EJsonToken::True ; return true ; })",
    "insertText": "if(Test == TEXT(\"Null\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutToken = EJsonToken::Null ; return true ; })",
    "insertText": "if(Test.Compare(TEXT(\"NaN\"), ESearchCase::IgnoreCase) == 0)"
  },
  {
    "label": "quiet_NaN()",
    "kind": "Method",
    "detail": "Function (NumberValue = std::numeric_limits<double)",
    "insertText": "quiet_NaN()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutToken = EJsonToken::Number ; return true ; })",
    "insertText": "if(Test.Compare(TEXT(\"-NaN\"), ESearchCase::IgnoreCase) == 0 || Test.Compare(TEXT(\"-NaN(ind)\"), ESearchCase::IgnoreCase) == 0)"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (OutToken = EJsonToken::Number ; return true ; })",
    "insertText": "SetErrorMessage(TEXT(\"Invalid Json Token. Check that your member names have quotes around them!\"))"
  },
  {
    "label": "UTF16CodePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UTF16CodePoints()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer .)",
    "insertText": "Append(UTF16CodePoints)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (UTF16CodePoints .)",
    "insertText": "Reset()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "while(true)"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetErrorMessage(TEXT(\"String Token Abruptly Ended.\"))"
  },
  {
    "label": "ConditionallyAddCodePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyAddCodePoints()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "if(Char == CharType('\\\\'))"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "CharType('f'): StringBuffer.AppendChar(CharType('\\f'))"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "CharType('r'): StringBuffer.AppendChar(CharType('\\r'))"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "CharType('n'): StringBuffer.AppendChar(CharType('\\n'))"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "CharType('b'): StringBuffer.AppendChar(CharType('\\b'))"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "CharType('t'): StringBuffer.AppendChar(CharType('\\t'))"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "CharType('u')"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 HexNum = 0 ;)",
    "insertText": "for(int32 Radix = 3; Radix >= 0; --Radix)"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetErrorMessage(TEXT(\"Invalid Hexadecimal digit parsed.\"))"
  },
  {
    "label": "AppendChar()",
    "kind": "Method",
    "detail": "Function (} UTF16CodePoints .)",
    "insertText": "AppendChar((UTF16CHAR)HexNum)"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (} break ; default :)",
    "insertText": "SetErrorMessage(TEXT(\"Bad Json escaped char.\"))"
  },
  {
    "label": "AppendChar()",
    "kind": "Method",
    "detail": "Function (StringBuffer .)",
    "insertText": "AppendChar(Char)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} } StringValue =)",
    "insertText": "FString(StringBuffer)"
  },
  {
    "label": "InlineCombineSurrogates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InlineCombineSurrogates(StringValue)"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetErrorMessage(TEXT(\"Number Token Abruptly Ended.\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (State = 1 ; } else)",
    "insertText": "if(Char == CharType('0'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (State = 2 ; } else)",
    "insertText": "if(IsNonZeroDigit(Char))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (State = 3 ; } else { StateError = true ; } break ; case 2 :)",
    "insertText": "if(Char == CharType('.'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (State = 4 ; } else)",
    "insertText": "if(Char == CharType('e') || Char == CharType('E'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (State = 5 ; } else { StateError = true ; } break ; case 3 :)",
    "insertText": "if(IsDigit(Char))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (State = 6 ; } else { StateError = true ; } break ; case 5 :)",
    "insertText": "if(Char == CharType('-') ||Char == CharType('+'))"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (State = 8 ; } else { StateError = true ; } break ; default :)",
    "insertText": "SetErrorMessage(TEXT(\"Unknown state reached in Json Number Token.\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - CharacterNumber ; break ; } })",
    "insertText": "if(!StateError && ((State == 2) || (State == 3) || (State == 6) || (State == 8)))"
  },
  {
    "label": "Atod()",
    "kind": "Method",
    "detail": "Function (StringValue = String ; NumberValue =)",
    "insertText": "Atod(*String)"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetErrorMessage(TEXT(\"Poorly formed Json Number Token.\"))"
  },
  {
    "label": "IsLineBreak()",
    "kind": "Method",
    "detail": "Function (- - CharacterNumber ; break ; } } return true ; } bool)",
    "insertText": "IsLineBreak(const CharType& Char)"
  },
  {
    "label": "IsWhitespace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsWhitespace(const CharType& Char)"
  },
  {
    "label": "IsJsonNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsJsonNumber(const CharType& Char)"
  },
  {
    "label": "IsDigit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDigit(const CharType& Char)"
  },
  {
    "label": "IsNonZeroDigit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNonZeroDigit(const CharType& Char)"
  },
  {
    "label": "IsAlphaNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAlphaNumber(const CharType& Char)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Stream ->)",
    "insertText": "Serialize(V, Length)"
  },
  {
    "label": "SetErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetErrorMessage(TEXT(\"Stream I/O Error\"))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FJsonStringReader>)",
    "insertText": "Create(FString&& JsonString)"
  },
  {
    "label": "GetSourceString()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetSourceString()"
  },
  {
    "label": "FJsonStringReader()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FJsonStringReader(const FString& JsonString) : Content(JsonString) , Reader(nullptr)"
  },
  {
    "label": "InitReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitReader()"
  },
  {
    "label": "FJsonStringReader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FJsonStringReader(FString&& JsonString) : Content(MoveTemp(JsonString)) , Reader(nullptr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Stream = Reader .)",
    "insertText": "Get()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} protected : const FString Content ; TUniquePtr<FBufferReader> Reader ; } ; template<class CharType> class TJsonStringViewReader : public TJsonReader<CharType> { public : TSharedRef<TJsonStringViewReader>)",
    "insertText": "Create(TStringView<CharType> JsonString)"
  },
  {
    "label": "TJsonStringViewReader()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "TJsonStringViewReader()"
  },
  {
    "label": "TJsonStringViewReader()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "TJsonStringViewReader(TStringView<CharType> JsonString) : Content(JsonString) , Reader(nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} protected : TStringView<CharType> Content ; TUniquePtr<FBufferReader> Reader ; } ; template<class CharType = TCHAR> class TJsonReaderFactory { public : TSharedRef<TJsonReader<TCHAR>>)",
    "insertText": "Create(const FString& JsonString)"
  },
  {
    "label": "CreateFromView()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<TJsonReader<CharType>>)",
    "insertText": "CreateFromView(TStringView<CharType> JsonString)"
  }
]