[
  {
    "label": "RTC_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_LOCKABLE"
  },
  {
    "label": "RTC_SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_SCOPED_LOCKABLE"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_DEPRECATED_RECURSIVE_CRITICAL_SECTION_H_ # define RTC_BASE_DEPRECATED_RECURSIVE_CRITICAL_SECTION_H_ # include<atomic> # include \" rtc_base / platform_thread_types . h \" # include \" rtc_base / thread_annotations . h \" # if)",
    "insertText": "defined(WEBRTC_WIN) #include <winsock2.h> #include <windows.h> #include <sal.h> #endif #if defined(WEBRTC_POSIX) #include <pthread.h> #endif #define RTC_USE_NATIVE_MUTEX_ON_MAC 1 #if defined(WEBRTC_MAC)"
  },
  {
    "label": "RecursiveCriticalSection()",
    "kind": "Method",
    "detail": "Function (class RTC_LOCKABLE RecursiveCriticalSection { public :)",
    "insertText": "RecursiveCriticalSection()"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter() const RTC_EXCLUSIVE_LOCK_FUNCTION()"
  },
  {
    "label": "TryEnter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryEnter() const RTC_EXCLUSIVE_TRYLOCK_FUNCTION(true)"
  },
  {
    "label": "Leave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Leave() const RTC_UNLOCK_FUNCTION()"
  },
  {
    "label": "CurrentThreadIsOwner()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CurrentThreadIsOwner()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_WIN)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(WEBRTC_POSIX) #if defined(WEBRTC_MAC)"
  },
  {
    "label": "CritScope()",
    "kind": "Method",
    "detail": "Function (int recursion_ ; dispatch_semaphore_t semaphore_ ; PlatformThreadRef owning_thread_ ; # else pthread_mutex_t mutex_ ; # endif PlatformThreadRef thread_ ; int recursion_count_ ; # else # error Unsupported platform . # endif } ; class RTC_SCOPED_LOCKABLE CritScope { public :)",
    "insertText": "CritScope(const RecursiveCriticalSection* cs) RTC_EXCLUSIVE_LOCK_FUNCTION(cs)"
  },
  {
    "label": "CritScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CritScope() RTC_UNLOCK_FUNCTION()"
  },
  {
    "label": "CritScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CritScope(const CritScope&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CritScope&)",
    "insertText": "operator(const CritScope&)"
  }
]