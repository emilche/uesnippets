[
  {
    "label": "HasAddRefAndRelease",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HasAddRefAndRelease"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef API_MAKE_REF_COUNTED_H_ # define API_MAKE_REF_COUNTED_H_ # include<utility> # include \" rtc_base / ref_counted_object . h \" namespace rtc { namespace webrtc_make_ref_counted_internal { template<T> class HasAddRefAndRelease { private : template<C,)",
    "insertText": "decltype(std::declval<C>().AddRef())* = nullptr, decltype(std::declval<C>().Release())* = nullptr> static int Test(int)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (template<> char)",
    "insertText": "Test(...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (public : bool value = std::is_same_v<)",
    "insertText": "decltype(Test<T>(0))"
  },
  {
    "label": "make_ref_counted()",
    "kind": "Method",
    "detail": "Function (} ; } template<T,. . . Args,std::enable_if<std::is_convertible_v<T*,RefCountInterface*>&& std::is_abstract_v<T>,T>::type* = nullptr> scoped_refptr<T>)",
    "insertText": "make_ref_counted(Args&&... args)"
  }
]