[
  {
    "label": "IAttributeBlendOperator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAttributeBlendOperator"
  },
  {
    "label": "Attributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Attributes"
  },
  {
    "label": "FDecompressionTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDecompressionTools"
  },
  {
    "label": "FAttributeKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributeKey"
  },
  {
    "label": "FAttributeCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributeCurve"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Curves / KeyHandle . h \" # include \" Curves / IndexedCurve . h \" # include \" Serialization / Archive . h \" # include \" Animation / WrappedAttribute . h \" # include \" Animation / IAttributeBlendOperator . h \" # include \" AttributeCurve . generated . h \" namespace UE { namespace Anim { class IAttributeBlendOperator ; struct Attributes ; } } namespace UE::AnimNext { class FDecompressionTools ; } typedef UE::Anim::TWrappedAttribute<FDefaultAllocator> FWrappedAttribute ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: FAttributeKey(float InTime = 0.f) : Time(InTime)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (template<AttributeType> const AttributeType&)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetValuePtr()",
    "kind": "Method",
    "detail": "Function (} template<AttributeType> const AttributeType*)",
    "insertText": "GetValuePtr()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FAttributeKey& P)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Ar<<P . Time ; return Ar ; } protected : FWrappedAttribute Value ; struct FAttributeCurve ; } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: FAttributeCurve() : ScriptStruct(nullptr), bShouldInterpolate(false), Operator(nullptr)"
  },
  {
    "label": "FAttributeCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAttributeCurve(UScriptStruct* InScriptStruct) : ScriptStructPath(InScriptStruct), ScriptStruct(InScriptStruct), bShouldInterpolate(false), Operator(nullptr)"
  },
  {
    "label": "FAttributeCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAttributeCurve(const FAttributeCurve& OtherCurve)"
  },
  {
    "label": "FAttributeCurve()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAttributeCurve()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (} FAttributeCurve*)",
    "insertText": "Duplicate()"
  },
  {
    "label": "SetKeyTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeyTime(FKeyHandle KeyHandle, float NewTime)"
  },
  {
    "label": "GetKeyTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetKeyTime(FKeyHandle KeyHandle)"
  },
  {
    "label": "SetScriptStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScriptStruct(UScriptStruct* InScriptStruct)"
  },
  {
    "label": "GetScriptStruct()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct*)",
    "insertText": "GetScriptStruct()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (template<AttributeType> AttributeType)",
    "insertText": "Evaluate(float Time)"
  },
  {
    "label": "EvaluateToPtr()",
    "kind": "Method",
    "detail": "Function (AttributeType EvaluatedValue ;)",
    "insertText": "EvaluateToPtr(AttributeType::StaticStruct(), Time, (uint8*)&EvaluatedValue)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetKeyIterator()",
    "kind": "Method",
    "detail": "Function (TArray<FAttributeKey>::TConstIterator)",
    "insertText": "GetKeyIterator()"
  },
  {
    "label": "AddTypedKey()",
    "kind": "Method",
    "detail": "Function (template<AttributeType> FKeyHandle)",
    "insertText": "AddTypedKey(float InTime, const AttributeType& InValue, FKeyHandle InKeyHandle = FKeyHandle())"
  },
  {
    "label": "DeleteKey()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteKey(FKeyHandle KeyHandle)"
  },
  {
    "label": "UpdateOrAddTypedKey()",
    "kind": "Method",
    "detail": "Function (template<AttributeType> FKeyHandle)",
    "insertText": "UpdateOrAddTypedKey(float InTime, const AttributeType& InValue, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "UpdateOrAddTypedKey()",
    "kind": "Method",
    "detail": "Function (} FKeyHandle)",
    "insertText": "UpdateOrAddTypedKey(float InTime, const void* InValue, const UScriptStruct* ValueType, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (} FAttributeKey&)",
    "insertText": "GetKey(FKeyHandle KeyHandle)"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "FindKey(float KeyTime, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "FindKeyBeforeOrAt()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "FindKeyBeforeOrAt(float KeyTime)"
  },
  {
    "label": "RemoveRedundantKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantKeys()"
  },
  {
    "label": "SetKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeys(TArrayView<const float> InTimes, TArrayView<const void*> InValues)"
  },
  {
    "label": "GetTypedKeys()",
    "kind": "Method",
    "detail": "Function (template<AttributeType> void)",
    "insertText": "GetTypedKeys(TArray<const AttributeType*>& OutKeys)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutKeys .)",
    "insertText": "Add(Key.Value.GetPtr<AttributeType>())"
  },
  {
    "label": "GetCopyOfKeys()",
    "kind": "Method",
    "detail": "Function (} } TArray<FAttributeKey>)",
    "insertText": "GetCopyOfKeys()"
  },
  {
    "label": "GetConstRefOfKeys()",
    "kind": "Method",
    "detail": "Function (const TArray<FAttributeKey>&)",
    "insertText": "GetConstRefOfKeys()"
  },
  {
    "label": "ReadjustTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadjustTimeRange(float NewMinTimeRange, float NewMaxTimeRange, bool bInsert , float OldStartTime, float OldEndTime)"
  },
  {
    "label": "EvaluateToPtr()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "EvaluateToPtr(const UScriptStruct* InScriptStruct, float Time, uint8* InOutDataPtr)"
  },
  {
    "label": "UpdateOrAddKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "UpdateOrAddKey(float InTime, const void* InValue, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "AddKey(float InTime, const void* InValue, FKeyHandle InKeyHandle = FKeyHandle())"
  }
]