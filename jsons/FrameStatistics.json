[
  {
    "label": "FrameStatistics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameStatistics"
  },
  {
    "label": "FrameStatistics()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<swappy / swappy_common . h> # include<atomic> # include<chrono> # include<mutex> # include \" Thread . h \" using namespace std::chrono_literals ; namespace swappy { typedef struct { uint64_t startFrameTime ; uint64_t desiredPresentTime ; uint64_t actualPresentTime ; uint64_t presentMargin ; } FrameTimings ; class FrameStatistics { public : ~)",
    "insertText": "FrameStatistics()"
  },
  {
    "label": "enableStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableStats(bool enabled)"
  },
  {
    "label": "updateFrameStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateFrameStats(FrameTimings currentFrameTimings, uint64_t refreshPeriod)"
  },
  {
    "label": "getStats()",
    "kind": "Method",
    "detail": "Function (SwappyStats)",
    "insertText": "getStats()"
  },
  {
    "label": "clearStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearStats()"
  },
  {
    "label": "invalidateLastFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "invalidateLastFrame()"
  },
  {
    "label": "lastLatencyRecorded()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastLatencyRecorded()"
  },
  {
    "label": "getFrameDelta()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getFrameDelta(int64_t deltaTimeNS, uint64_t refreshPeriod)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::mutex mMutex ; SwappyStats mStats)",
    "insertText": "GUARDED_BY(mMutex)"
  }
]