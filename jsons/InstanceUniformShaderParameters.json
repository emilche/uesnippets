[
  {
    "label": "FInstanceSceneData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceSceneData"
  },
  {
    "label": "FInstanceDynamicData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceDynamicData"
  },
  {
    "label": "FInstanceSceneShaderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceSceneShaderData"
  },
  {
    "label": "ComputeLocalToWorld()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" SceneTypes . h \" # include \" RenderResource . h \" # include \" RenderTransform . h \" # include \" ShaderParameters . h \" # include \" UniformBuffer . h \" # include \" Containers / StaticArray . h \" # include \" SceneDefinitions . h \" # define INVALID_LAST_UPDATE_FRAME 0 xFFFFFFFFu struct FInstanceSceneData { FRenderTransform LocalToPrimitive ; FRenderTransform)",
    "insertText": "ComputeLocalToWorld(const FRenderTransform& PrimitiveToWorld)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRenderTransform LocalToWorld = LocalToPrimitive* PrimitiveToWorld ; # if 0)",
    "insertText": "if(PrimitiveToWorld.IsScaleNonUniform())"
  },
  {
    "label": "Orthogonalize()",
    "kind": "Method",
    "detail": "Function (LocalToWorld .)",
    "insertText": "Orthogonalize()"
  },
  {
    "label": "ComputePrevLocalToWorld()",
    "kind": "Method",
    "detail": "Function (} return LocalToWorld ; } } ; struct FInstanceDynamicData { FRenderTransform PrevLocalToPrimitive ; FRenderTransform)",
    "insertText": "ComputePrevLocalToWorld(const FRenderTransform& PrevPrimitiveToWorld)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRenderTransform PrevLocalToWorld = PrevLocalToPrimitive* PrevPrimitiveToWorld ; # if 0)",
    "insertText": "if(PrevPrimitiveToWorld.IsScaleNonUniform())"
  },
  {
    "label": "SupportsCompressedTransforms()",
    "kind": "Method",
    "detail": "Function (} return PrevLocalToWorld ; } } ; struct FInstanceSceneShaderData { private : uint32 CompressedTransformDataStrideInFloat4s = 3 ; uint32 UnCompressedTransformDataStrideInFloat4s = 4 ; public : bool)",
    "insertText": "SupportsCompressedTransforms()"
  },
  {
    "label": "GetDataStrideInFloat4s()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDataStrideInFloat4s()"
  },
  {
    "label": "GetEffectiveNumBytes()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetEffectiveNumBytes()"
  },
  {
    "label": "FInstanceSceneShaderData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInstanceSceneShaderData() : Data(InPlace, NoInit)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Build(uint32 PrimitiveId, uint32 RelativeId, uint32 InstanceFlags, uint32 LastUpdateFrame, uint32 CustomDataCount, float RandomID, bool bIsVisible = true)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(uint32 PrimitiveId, uint32 RelativeId, uint32 InstanceFlags, uint32 LastUpdateFrame, uint32 CustomDataCount, float RandomID, const FRenderTransform& LocalToPrimitive, const FRenderTransform& PrimitiveToWorld, bool bIsVisible = true)"
  },
  {
    "label": "RotDeterminant()",
    "kind": "Method",
    "detail": "Function (const float RotDeterminant = LocalToWorld .)",
    "insertText": "RotDeterminant()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InstanceFlags | = INSTANCE_SCENE_DATA_FLAG_DETERMINANT_SIGN ; } else { InstanceFlags& = ~ INSTANCE_SCENE_DATA_FLAG_DETERMINANT_SIGN ; })",
    "insertText": "if(!bIsVisible || RotDeterminant == 0.0f)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (InstanceFlags | = INSTANCE_SCENE_DATA_FLAG_HIDDEN ; })",
    "insertText": "checkSlow((PrimitiveId & 0x000FFFFF) == PrimitiveId)"
  },
  {
    "label": "Packed0()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "Packed0(InstanceFlags << 20u)"
  },
  {
    "label": "Packed1()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "Packed1(CustomDataCount << 24u)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (Data [ 0 ] .)",
    "insertText": "X(const float*)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (Data [ 0 ] .)",
    "insertText": "Y(const float*)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (Data [ 0 ] .)",
    "insertText": "Z(const float*)"
  },
  {
    "label": "W()",
    "kind": "Method",
    "detail": "Function (Data [ 0 ] .)",
    "insertText": "W(const float*)"
  },
  {
    "label": "CompressedLocalToWorld()",
    "kind": "Method",
    "detail": "Function (FCompressedTransform)",
    "insertText": "CompressedLocalToWorld(LocalToWorld)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Data(const FVector4f*)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Data(const FVector3f*)"
  },
  {
    "label": "To3x4MatrixTranspose()",
    "kind": "Method",
    "detail": "Function (} else { LocalToWorld .)",
    "insertText": "To3x4MatrixTranspose((float*)&Data[1])"
  }
]