[
  {
    "label": "CIrGeneratorPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CIrGeneratorPass"
  },
  {
    "label": "CIrGeneratorPass()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / CompilerPasses / IIRGeneratorPass . h \" # include \" uLang / SemanticAnalyzer / IRGenerator . h \" namespace uLang { class CIrGeneratorPass : public IIrGeneratorPass { public : ~)",
    "insertText": "CIrGeneratorPass()"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(!_Program, \"Destructor called without clean up.\")"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(!_Program, \"Initialize called without a paired clean up.\")"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (_Program = ProgramContext . _Program ; _Diagnostics = BuildContext . _Diagnostics ; _TargetVM = BuildContext . _Params . _TargetVM ; } void)",
    "insertText": "CleanUp(void)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (_Program .)",
    "insertText": "Reset()"
  },
  {
    "label": "ProcessAst()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessAst()"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(_Program, \"ProcesAst called without initializing.\")"
  },
  {
    "label": "GenerateIr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateIr(_Program.AsRef(), _Diagnostics.AsRef(), _TargetVM)"
  }
]