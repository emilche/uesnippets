[
  {
    "label": "AlphaNumFormatter()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_STR_JOIN_H_ # define ABSL_STRINGS_STR_JOIN_H_ # include<cstdio> # include<cstring> # include<initializer_list> # include<iterator> # include<string> # include<tuple> # include<type_traits> # include<utility> # include \" absl / base / macros . h \" # include \" absl / strings / internal / str_join_internal . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN strings_internal::AlphaNumFormatterImpl)",
    "insertText": "AlphaNumFormatter()"
  },
  {
    "label": "StreamFormatter()",
    "kind": "Method",
    "detail": "Function (} strings_internal::StreamFormatterImpl)",
    "insertText": "StreamFormatter()"
  },
  {
    "label": "PairFormatter()",
    "kind": "Method",
    "detail": "Function (} template<FirstFormatter,SecondFormatter> strings_internal::PairFormatterImpl<FirstFormatter,SecondFormatter>)",
    "insertText": "PairFormatter(FirstFormatter f1, absl::string_view sep, SecondFormatter f2)"
  },
  {
    "label": "PairFormatter()",
    "kind": "Method",
    "detail": "Function (} strings_internal::PairFormatterImpl<strings_internal::AlphaNumFormatterImpl,strings_internal::AlphaNumFormatterImpl>)",
    "insertText": "PairFormatter(absl::string_view sep)"
  },
  {
    "label": "DereferenceFormatter()",
    "kind": "Method",
    "detail": "Function (} template<Formatter> strings_internal::DereferenceFormatterImpl<Formatter>)",
    "insertText": "DereferenceFormatter(Formatter&& f)"
  },
  {
    "label": "DereferenceFormatter()",
    "kind": "Method",
    "detail": "Function (} strings_internal::DereferenceFormatterImpl<strings_internal::AlphaNumFormatterImpl>)",
    "insertText": "DereferenceFormatter()"
  },
  {
    "label": "StrJoin()",
    "kind": "Method",
    "detail": "Function (} template<Iterator,Formatter> std::string)",
    "insertText": "StrJoin(Iterator start, Iterator end, absl::string_view sep, Formatter&& fmt)"
  },
  {
    "label": "StrJoin()",
    "kind": "Method",
    "detail": "Function (} template<Range,Formatter> std::string)",
    "insertText": "StrJoin(const Range& range, absl::string_view separator, Formatter&& fmt)"
  },
  {
    "label": "StrJoin()",
    "kind": "Method",
    "detail": "Function (} template<T,Formatter> std::string)",
    "insertText": "StrJoin(std::initializer_list<T> il, absl::string_view separator, Formatter&& fmt)"
  },
  {
    "label": "StrJoin()",
    "kind": "Method",
    "detail": "Function (} template<. . . T,Formatter> std::string)",
    "insertText": "StrJoin(const std::tuple<T...>& value, absl::string_view separator, Formatter&& fmt)"
  },
  {
    "label": "StrJoin()",
    "kind": "Method",
    "detail": "Function (} template<Iterator> std::string)",
    "insertText": "StrJoin(Iterator start, Iterator end, absl::string_view separator)"
  },
  {
    "label": "StrJoin()",
    "kind": "Method",
    "detail": "Function (} template<Range> std::string)",
    "insertText": "StrJoin(const Range& range, absl::string_view separator)"
  },
  {
    "label": "StrJoin()",
    "kind": "Method",
    "detail": "Function (} template<T> std::string)",
    "insertText": "StrJoin(std::initializer_list<T> il, absl::string_view separator)"
  },
  {
    "label": "StrJoin()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> std::string)",
    "insertText": "StrJoin(const std::tuple<T...>& value, absl::string_view separator)"
  }
]