[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "SetTransactionally()",
    "kind": "Method",
    "detail": "Function (std::enable_if_t<bIsVValue || bIsAux, TResult>)",
    "insertText": "SetTransactionally(FAccessContext Context, VCell* Owner, TValue NewValue)"
  },
  {
    "label": "RunBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBarrier(Context, NewValue)"
  },
  {
    "label": "CurrentTransaction()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "CurrentTransaction()->LogBeforeWrite(Context, Owner, *this)"
  },
  {
    "label": "SetTransactionally()",
    "kind": "Method",
    "detail": "Function (std::enable_if_t<bIsVValue, TResult>)",
    "insertText": "SetTransactionally(FAccessContext Context, UObject* Owner, TValue NewValue)"
  },
  {
    "label": "SetTransactionally()",
    "kind": "Method",
    "detail": "Function (std::enable_if_t<bIsVValue, TResult>)",
    "insertText": "SetTransactionally(FAccessContext Context, TAux<U> Owner, TValue NewValue)"
  },
  {
    "label": "SetTransactionally()",
    "kind": "Method",
    "detail": "Function (Value = NewValue ; } void)",
    "insertText": "SetTransactionally(FAccessContext Context, VCell* Owner, VValue NewValue)"
  },
  {
    "label": "SetTransactionally()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "SetTransactionally(Context, Owner, NewValue)"
  },
  {
    "label": "SetTransactionally()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTransactionally(FAccessContext Context, UObject* Owner, VValue NewValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(FAccessContext Context, VValue NewValue)"
  }
]