[
  {
    "label": "DWARFContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWARFContext"
  },
  {
    "label": "DWARFContextInMemory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWARFContextInMemory"
  },
  {
    "label": "DWARFContext()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_LIB_DEBUGINFO_DWARFCONTEXT_H # define LLVM_LIB_DEBUGINFO_DWARFCONTEXT_H # include \" llvm / ADT / MapVector . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / DebugInfo / DIContext . h \" # include \" llvm / DebugInfo / DWARF / DWARFCompileUnit . h \" # include \" llvm / DebugInfo / DWARF / DWARFDebugAranges . h \" # include \" llvm / DebugInfo / DWARF / DWARFDebugFrame . h \" # include \" llvm / DebugInfo / DWARF / DWARFDebugLine . h \" # include \" llvm / DebugInfo / DWARF / DWARFDebugLoc . h \" # include \" llvm / DebugInfo / DWARF / DWARFDebugRangeList . h \" # include \" llvm / DebugInfo / DWARF / DWARFSection . h \" # include \" llvm / DebugInfo / DWARF / DWARFTypeUnit . h \" # include<vector> namespace llvm { typedef DenseMap<uint64_t,std::pair<uint8_t,int64_t>> RelocAddrMap ; class DWARFContext : public DIContext { DWARFUnitSection<DWARFCompileUnit> CUs ; std::vector<DWARFUnitSection<DWARFTypeUnit>> TUs ; std::unique_ptr<DWARFDebugAbbrev> Abbrev ; std::unique_ptr<DWARFDebugLoc> Loc ; std::unique_ptr<DWARFDebugAranges> Aranges ; std::unique_ptr<DWARFDebugLine> Line ; std::unique_ptr<DWARFDebugFrame> DebugFrame ; DWARFUnitSection<DWARFCompileUnit> DWOCUs ; std::vector<DWARFUnitSection<DWARFTypeUnit>> DWOTUs ; std::unique_ptr<DWARFDebugAbbrev> AbbrevDWO ; std::unique_ptr<DWARFDebugLocDWO> LocDWO ;)",
    "insertText": "DWARFContext(DWARFContext &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DWARFContext&)",
    "insertText": "operator(DWARFContext &)"
  },
  {
    "label": "parseCompileUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseCompileUnits()"
  },
  {
    "label": "parseTypeUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseTypeUnits()"
  },
  {
    "label": "parseDWOCompileUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseDWOCompileUnits()"
  },
  {
    "label": "parseDWOTypeUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseDWOTypeUnits()"
  },
  {
    "label": "DWARFContext()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DWARFContext() : DIContext(CK_DWARF)"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(const DIContext *DICtx)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dump(raw_ostream &OS, DIDumpType DumpType = DIDT_All)"
  },
  {
    "label": "compile_units()",
    "kind": "Method",
    "detail": "Function (typedef DWARFUnitSection<DWARFCompileUnit>::iterator_range cu_iterator_range ; typedef DWARFUnitSection<DWARFTypeUnit>::iterator_range tu_iterator_range ; typedef iterator_range<std::vector<DWARFUnitSection<DWARFTypeUnit>>::iterator> tu_section_iterator_range ; cu_iterator_range)",
    "insertText": "compile_units()"
  },
  {
    "label": "type_unit_sections()",
    "kind": "Method",
    "detail": "Function (} tu_section_iterator_range)",
    "insertText": "type_unit_sections()"
  },
  {
    "label": "dwo_compile_units()",
    "kind": "Method",
    "detail": "Function (} cu_iterator_range)",
    "insertText": "dwo_compile_units()"
  },
  {
    "label": "dwo_type_unit_sections()",
    "kind": "Method",
    "detail": "Function (} tu_section_iterator_range)",
    "insertText": "dwo_type_unit_sections()"
  },
  {
    "label": "getNumCompileUnits()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumCompileUnits()"
  },
  {
    "label": "getNumTypeUnits()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumTypeUnits()"
  },
  {
    "label": "getNumDWOCompileUnits()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumDWOCompileUnits()"
  },
  {
    "label": "getNumDWOTypeUnits()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumDWOTypeUnits()"
  },
  {
    "label": "getCompileUnitAtIndex()",
    "kind": "Method",
    "detail": "Function (} DWARFCompileUnit*)",
    "insertText": "getCompileUnitAtIndex(unsigned index)"
  },
  {
    "label": "getDWOCompileUnitAtIndex()",
    "kind": "Method",
    "detail": "Function (} DWARFCompileUnit*)",
    "insertText": "getDWOCompileUnitAtIndex(unsigned index)"
  },
  {
    "label": "getDebugAbbrev()",
    "kind": "Method",
    "detail": "Function (} const DWARFDebugAbbrev*)",
    "insertText": "getDebugAbbrev()"
  },
  {
    "label": "getDebugLoc()",
    "kind": "Method",
    "detail": "Function (const DWARFDebugLoc*)",
    "insertText": "getDebugLoc()"
  },
  {
    "label": "getDebugAbbrevDWO()",
    "kind": "Method",
    "detail": "Function (const DWARFDebugAbbrev*)",
    "insertText": "getDebugAbbrevDWO()"
  },
  {
    "label": "getDebugLocDWO()",
    "kind": "Method",
    "detail": "Function (const DWARFDebugLocDWO*)",
    "insertText": "getDebugLocDWO()"
  },
  {
    "label": "getDebugAranges()",
    "kind": "Method",
    "detail": "Function (const DWARFDebugAranges*)",
    "insertText": "getDebugAranges()"
  },
  {
    "label": "getDebugFrame()",
    "kind": "Method",
    "detail": "Function (const DWARFDebugFrame*)",
    "insertText": "getDebugFrame()"
  },
  {
    "label": "getLineTableForUnit()",
    "kind": "Method",
    "detail": "Function (const DWARFDebugLine::LineTable*)",
    "insertText": "getLineTableForUnit(DWARFUnit *cu)"
  },
  {
    "label": "getLineInfoForAddress()",
    "kind": "Method",
    "detail": "Function (DILineInfo)",
    "insertText": "getLineInfoForAddress(uint64_t Address, DILineInfoSpecifier Specifier = DILineInfoSpecifier())"
  },
  {
    "label": "getLineInfoForAddressRange()",
    "kind": "Method",
    "detail": "Function (DILineInfoTable)",
    "insertText": "getLineInfoForAddressRange(uint64_t Address, uint64_t Size, DILineInfoSpecifier Specifier = DILineInfoSpecifier())"
  },
  {
    "label": "getInliningInfoForAddress()",
    "kind": "Method",
    "detail": "Function (DIInliningInfo)",
    "insertText": "getInliningInfoForAddress(uint64_t Address, DILineInfoSpecifier Specifier = DILineInfoSpecifier())"
  },
  {
    "label": "isLittleEndian()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLittleEndian()"
  },
  {
    "label": "getAddressSize()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "getAddressSize()"
  },
  {
    "label": "getInfoSection()",
    "kind": "Method",
    "detail": "Function (const DWARFSection&)",
    "insertText": "getInfoSection()"
  },
  {
    "label": "getTypesSections()",
    "kind": "Method",
    "detail": "Function (typedef MapVector<object::SectionRef,DWARFSection,std::map<object::SectionRef,unsigned>> TypeSectionMap ; const TypeSectionMap&)",
    "insertText": "getTypesSections()"
  },
  {
    "label": "getAbbrevSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getAbbrevSection()"
  },
  {
    "label": "getLocSection()",
    "kind": "Method",
    "detail": "Function (const DWARFSection&)",
    "insertText": "getLocSection()"
  },
  {
    "label": "getARangeSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getARangeSection()"
  },
  {
    "label": "getDebugFrameSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getDebugFrameSection()"
  },
  {
    "label": "getLineSection()",
    "kind": "Method",
    "detail": "Function (const DWARFSection&)",
    "insertText": "getLineSection()"
  },
  {
    "label": "getStringSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getStringSection()"
  },
  {
    "label": "getRangeSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getRangeSection()"
  },
  {
    "label": "getPubNamesSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getPubNamesSection()"
  },
  {
    "label": "getPubTypesSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getPubTypesSection()"
  },
  {
    "label": "getGnuPubNamesSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getGnuPubNamesSection()"
  },
  {
    "label": "getGnuPubTypesSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getGnuPubTypesSection()"
  },
  {
    "label": "getInfoDWOSection()",
    "kind": "Method",
    "detail": "Function (const DWARFSection&)",
    "insertText": "getInfoDWOSection()"
  },
  {
    "label": "getTypesDWOSections()",
    "kind": "Method",
    "detail": "Function (const TypeSectionMap&)",
    "insertText": "getTypesDWOSections()"
  },
  {
    "label": "getAbbrevDWOSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getAbbrevDWOSection()"
  },
  {
    "label": "getLineDWOSection()",
    "kind": "Method",
    "detail": "Function (const DWARFSection&)",
    "insertText": "getLineDWOSection()"
  },
  {
    "label": "getLocDWOSection()",
    "kind": "Method",
    "detail": "Function (const DWARFSection&)",
    "insertText": "getLocDWOSection()"
  },
  {
    "label": "getStringDWOSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getStringDWOSection()"
  },
  {
    "label": "getStringOffsetDWOSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getStringOffsetDWOSection()"
  },
  {
    "label": "getRangeDWOSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getRangeDWOSection()"
  },
  {
    "label": "getAddrSection()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getAddrSection()"
  },
  {
    "label": "getAppleNamesSection()",
    "kind": "Method",
    "detail": "Function (const DWARFSection&)",
    "insertText": "getAppleNamesSection()"
  },
  {
    "label": "getAppleTypesSection()",
    "kind": "Method",
    "detail": "Function (const DWARFSection&)",
    "insertText": "getAppleTypesSection()"
  },
  {
    "label": "getAppleNamespacesSection()",
    "kind": "Method",
    "detail": "Function (const DWARFSection&)",
    "insertText": "getAppleNamespacesSection()"
  },
  {
    "label": "getAppleObjCSection()",
    "kind": "Method",
    "detail": "Function (const DWARFSection&)",
    "insertText": "getAppleObjCSection()"
  },
  {
    "label": "isSupportedVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSupportedVersion(unsigned version)"
  },
  {
    "label": "getCompileUnitForAddress()",
    "kind": "Method",
    "detail": "Function (DWARFCompileUnit*)",
    "insertText": "getCompileUnitForAddress(uint64_t Address)"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (} ; class DWARFContextInMemory : public DWARFContext { void)",
    "insertText": "anchor()"
  },
  {
    "label": "DWARFContextInMemory()",
    "kind": "Method",
    "detail": "Function (bool IsLittleEndian ; uint8_t AddressSize ; DWARFSection InfoSection ; TypeSectionMap TypesSections ; StringRef AbbrevSection ; DWARFSection LocSection ; StringRef ARangeSection ; StringRef DebugFrameSection ; DWARFSection LineSection ; StringRef StringSection ; StringRef RangeSection ; StringRef PubNamesSection ; StringRef PubTypesSection ; StringRef GnuPubNamesSection ; StringRef GnuPubTypesSection ; DWARFSection InfoDWOSection ; TypeSectionMap TypesDWOSections ; StringRef AbbrevDWOSection ; DWARFSection LineDWOSection ; DWARFSection LocDWOSection ; StringRef StringDWOSection ; StringRef StringOffsetDWOSection ; StringRef RangeDWOSection ; StringRef AddrSection ; DWARFSection AppleNamesSection ; DWARFSection AppleTypesSection ; DWARFSection AppleNamespacesSection ; DWARFSection AppleObjCSection ; SmallVector<SmallString<3 2>,4> UncompressedSections ; public :)",
    "insertText": "DWARFContextInMemory(const object::ObjectFile &Obj, const LoadedObjectInfo *L = nullptr)"
  }
]