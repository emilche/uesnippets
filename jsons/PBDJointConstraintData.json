[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FJointConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJointConstraint"
  },
  {
    "label": "FPBDRigidsSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsSolver"
  },
  {
    "label": "FOutputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputData"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDJointConstraintTypes . h \" # include \" Chaos / ParticleDirtyFlags . h \" # include \" Chaos / Framework / PhysicsProxyBase . h \" # include \" Chaos / Framework / PhysicsSolverBase . h \" # include \" Chaos / PBDConstraintBaseData . h \" # include \" PhysicsProxy / SingleParticlePhysicsProxyFwd . h \" namespace Chaos { enum class EJointConstraintFlags : uint64_t { JointTransforms = static_cast<)",
    "insertText": "uint64_t(1) << 0, CollisionEnabled = static_cast<uint64_t>(1) << 1, Projection = static_cast<uint64_t>(1) << 2, ParentInvMassScale = static_cast<uint64_t>(1) << 3, LinearBreakForce = static_cast<uint64_t>(1) << 4, AngularBreakTorque = static_cast<uint64_t>(1) << 5, UserData = static_cast<uint64_t>(1) << 6, LinearDrive = static_cast<uint64_t>(1) << 7, AngularDrive = static_cast<uint64_t>(1) << 8, Stiffness = static_cast<uint64_t>(1) << 9, Limits = static_cast<uint64_t>(1) << 10, LinearViolationCallbackThreshold = static_cast<uint64_t>(1) << 11, AngularViolationCallbackThreshold = static_cast<uint64_t>(1)"
  },
  {
    "label": "FJointConstraint()",
    "kind": "Method",
    "detail": "Function (using FJointConstraintDirtyFlags = TDirtyFlags<EJointConstraintFlags> ; class FJointConstraint : public FConstraintBase { public : using Base = FConstraintBase ; class FPBDRigidsSolver ;)",
    "insertText": "FJointConstraint()"
  },
  {
    "label": "GetJointSettings()",
    "kind": "Method",
    "detail": "Function (} const FPBDJointSettings&)",
    "insertText": "GetJointSettings()"
  },
  {
    "label": "SetKinematicEndPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKinematicEndPoint(FSingleParticlePhysicsProxy* InParticle, FPBDRigidsSolver* Solver)"
  },
  {
    "label": "GetKinematicEndPoint()",
    "kind": "Method",
    "detail": "Function (FSingleParticlePhysicsProxy*)",
    "insertText": "GetKinematicEndPoint()"
  },
  {
    "label": "CHAOS_INNER_JOINT_PROPERTY()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CHAOS_INNER_JOINT_PROPERTY(OuterProp, FuncName, Inner, InnerType) CONSTRAINT_JOINT_PROPERPETY_IMPL2(InnerType, FuncName, OuterProp, Inner) #include \"Chaos/JointProperties.inl\" CHAOS_API void SetLinearPositionDriveEnabled(TVector<bool, 3> Enabled)"
  },
  {
    "label": "SetLinearVelocityDriveEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearVelocityDriveEnabled(TVector<bool, 3> Enabled)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (struct FOutputData { bool bIsBreaking = false ; bool bIsBroken = false ; bool bDriveTargetChanged = false ; FVector Force =)",
    "insertText": "FVector(0)"
  },
  {
    "label": "GetOutputData()",
    "kind": "Method",
    "detail": "Function (bool bIsViolating = false ; float LinearViolation = 0 . f ; float AngularViolation = 0 . f ; } ; FOutputData&)",
    "insertText": "GetOutputData()"
  },
  {
    "label": "SyncRemote()",
    "kind": "Method",
    "detail": "Function (JointProxies .)",
    "insertText": "SyncRemote(Manager, DataIdx, RemoteData)"
  },
  {
    "label": "SetParticleProxies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParticleProxies(const FProxyBasePair& InJointParticles)"
  },
  {
    "label": "SetPhysicsBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicsBodies(const FPhysicsObjectPair& InBodies)"
  },
  {
    "label": "GetParticleProxies()",
    "kind": "Method",
    "detail": "Function (const FProxyBasePair&)",
    "insertText": "GetParticleProxies()"
  },
  {
    "label": "GetPhysicsBodies()",
    "kind": "Method",
    "detail": "Function (} const FPhysicsObjectPair&)",
    "insertText": "GetPhysicsBodies()"
  },
  {
    "label": "ReleaseKinematicEndPoint()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "ReleaseKinematicEndPoint(FPBDRigidsSolver* Solver)"
  }
]