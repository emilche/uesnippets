[
  {
    "label": "FRawDataNetBlob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRawDataNetBlob"
  },
  {
    "label": "FRawDataNetBlob()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Iris / ReplicationSystem / NetBlob / NetBlob . h \" # include \" Containers / ArrayView . h \" namespace UE::Net { class FRawDataNetBlob : public FNetBlob { public :)",
    "insertText": "FRawDataNetBlob(const FNetBlobCreationInfo&)"
  },
  {
    "label": "SetRawData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRawData(TArray<uint32>&& RawData, uint32 RawDataBitCount)"
  },
  {
    "label": "SetRawData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRawData(const TArrayView<const uint32> RawData, uint32 RawDataBitCount)"
  },
  {
    "label": "GetRawData()",
    "kind": "Method",
    "detail": "Function (TArrayView<const uint32>)",
    "insertText": "GetRawData()"
  },
  {
    "label": "GetRawDataBitCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetRawDataBitCount()"
  },
  {
    "label": "InternalDeserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDeserialize(FNetSerializationContext& Context)"
  },
  {
    "label": "SerializeWithObject()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SerializeWithObject(FNetSerializationContext& Context, FNetRefHandle RefHandle)"
  },
  {
    "label": "DeserializeWithObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeWithObject(FNetSerializationContext& Context, FNetRefHandle RefHandle)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FNetSerializationContext& Context)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deserialize(FNetSerializationContext& Context)"
  }
]