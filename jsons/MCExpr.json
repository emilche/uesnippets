[
  {
    "label": "MCAsmInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmInfo"
  },
  {
    "label": "MCAsmLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmLayout"
  },
  {
    "label": "MCAssembler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAssembler"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCFixup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCFixup"
  },
  {
    "label": "MCSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSection"
  },
  {
    "label": "MCStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCStreamer"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MCValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCValue"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "ExprKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ExprKind"
  },
  {
    "label": "MCConstantExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCConstantExpr"
  },
  {
    "label": "MCSymbolRefExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbolRefExpr"
  },
  {
    "label": "VariantKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VariantKind"
  },
  {
    "label": "MCUnaryExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCUnaryExpr"
  },
  {
    "label": "Opcode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Opcode"
  },
  {
    "label": "MCBinaryExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCBinaryExpr"
  },
  {
    "label": "Opcode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Opcode"
  },
  {
    "label": "MCTargetExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCTargetExpr"
  },
  {
    "label": "MCSymbolRefExpr()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "MCSymbolRefExpr(const MCSymbol *Symbol, VariantKind Kind,\n                           const MCAsmInfo *MAI)"
  },
  {
    "label": "getVariantKindName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getVariantKindName(VariantKind Kind)"
  },
  {
    "label": "getVariantKindForName()",
    "kind": "Method",
    "detail": "Function (VariantKind)",
    "insertText": "getVariantKindForName(StringRef Name)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(LNot, Expr, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(Minus, Expr, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(Not, Expr, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(Plus, Expr, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(Add, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(And, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(Div, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(EQ, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(GT, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(GTE, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(LAnd, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(LOr, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(LT, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(LTE, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(Mod, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(Mul, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(NE, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(Or, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(Shl, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(AShr, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(LShr, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(Sub, LHS, RHS, Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "create(Xor, LHS, RHS, Ctx)"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "anchor()"
  }
]