[
  {
    "label": "MCAsmInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmInfo"
  },
  {
    "label": "MCAsmLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmLayout"
  },
  {
    "label": "MCAssembler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAssembler"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCFixup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCFixup"
  },
  {
    "label": "MCSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSection"
  },
  {
    "label": "MCStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCStreamer"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MCValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCValue"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "ExprKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ExprKind"
  },
  {
    "label": "MCConstantExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCConstantExpr"
  },
  {
    "label": "MCSymbolRefExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbolRefExpr"
  },
  {
    "label": "VariantKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VariantKind"
  },
  {
    "label": "MCUnaryExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCUnaryExpr"
  },
  {
    "label": "Opcode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Opcode"
  },
  {
    "label": "MCBinaryExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCBinaryExpr"
  },
  {
    "label": "MCTargetExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCTargetExpr"
  },
  {
    "label": "MCExpr()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCEXPR_H # define LLVM_MC_MCEXPR_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / Support / Casting . h \" # include \" llvm / Support / DataTypes . h \" namespace llvm { class MCAsmInfo ; class MCAsmLayout ; class MCAssembler ; class MCContext ; class MCFixup ; class MCSection ; class MCStreamer ; class MCSymbol ; class MCValue ; class raw_ostream ; class StringRef ; typedef DenseMap<const MCSection*,uint64_t> SectionAddrMap ; class MCExpr { public : enum ExprKind { Binary,Constant,SymbolRef,Unary,Target } ; private : ExprKind Kind ;)",
    "insertText": "MCExpr(const MCExpr&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MCExpr&)"
  },
  {
    "label": "evaluateAsAbsolute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "evaluateAsAbsolute(int64_t &Res, const MCAssembler *Asm, const MCAsmLayout *Layout, const SectionAddrMap *Addrs)"
  },
  {
    "label": "evaluateAsAbsolute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "evaluateAsAbsolute(int64_t &Res, const MCAssembler *Asm, const MCAsmLayout *Layout, const SectionAddrMap *Addrs, bool InSet)"
  },
  {
    "label": "MCExpr()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "MCExpr(ExprKind Kind) : Kind(Kind)"
  },
  {
    "label": "evaluateAsRelocatableImpl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "evaluateAsRelocatableImpl(MCValue &Res, const MCAssembler *Asm, const MCAsmLayout *Layout, const MCFixup *Fixup, const SectionAddrMap *Addrs, bool InSet)"
  },
  {
    "label": "getKind()",
    "kind": "Method",
    "detail": "Function (public : ExprKind)",
    "insertText": "getKind()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "evaluateAsAbsolute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "evaluateAsAbsolute(int64_t &Res, const MCAsmLayout &Layout, const SectionAddrMap &Addrs)"
  },
  {
    "label": "evaluateAsAbsolute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "evaluateAsAbsolute(int64_t &Res)"
  },
  {
    "label": "evaluateAsAbsolute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "evaluateAsAbsolute(int64_t &Res, const MCAssembler &Asm)"
  },
  {
    "label": "evaluateAsAbsolute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "evaluateAsAbsolute(int64_t &Res, const MCAsmLayout &Layout)"
  },
  {
    "label": "evaluateKnownAbsolute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "evaluateKnownAbsolute(int64_t &Res, const MCAsmLayout &Layout)"
  },
  {
    "label": "evaluateAsRelocatable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "evaluateAsRelocatable(MCValue &Res, const MCAsmLayout *Layout, const MCFixup *Fixup)"
  },
  {
    "label": "evaluateAsValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "evaluateAsValue(MCValue &Res, const MCAsmLayout &Layout)"
  },
  {
    "label": "findAssociatedSection()",
    "kind": "Method",
    "detail": "Function (MCSection*)",
    "insertText": "findAssociatedSection()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const MCExpr &E)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (E .)",
    "insertText": "print(OS, nullptr)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} public : const MCConstantExpr*)",
    "insertText": "create(int64_t Value, MCContext &Ctx)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "getValue()"
  },
  {
    "label": "MCSymbolRefExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class MCSymbolRefExpr : public MCExpr { public : enum VariantKind : uint16_t { VK_None,VK_Invalid,VK_GOT,VK_GOTOFF,VK_GOTPCREL,VK_GOTTPOFF,VK_INDNTPOFF,VK_NTPOFF,VK_GOTNTPOFF,VK_PLT,VK_TLSGD,VK_TLSLD,VK_TLSLDM,VK_TPOFF,VK_DTPOFF,VK_TLVP,VK_TLVPPAGE,VK_TLVPPAGEOFF,VK_PAGE,VK_PAGEOFF,VK_GOTPAGE,VK_GOTPAGEOFF,VK_SECREL,VK_SIZE,VK_WEAKREF,VK_ARM_NONE,VK_ARM_TARGET1,VK_ARM_TARGET2,VK_ARM_PREL31,VK_ARM_SBREL,VK_ARM_TLSLDO,VK_ARM_TLSCALL,VK_ARM_TLSDESC,VK_ARM_TLSDESCSEQ,VK_PPC_LO,VK_PPC_HI,VK_PPC_HA,VK_PPC_HIGHER,VK_PPC_HIGHERA,VK_PPC_HIGHEST,VK_PPC_HIGHESTA,VK_PPC_GOT_LO,VK_PPC_GOT_HI,VK_PPC_GOT_HA,VK_PPC_TOCBASE,VK_PPC_TOC,VK_PPC_TOC_LO,VK_PPC_TOC_HI,VK_PPC_TOC_HA,VK_PPC_DTPMOD,VK_PPC_TPREL,VK_PPC_TPREL_LO,VK_PPC_TPREL_HI,VK_PPC_TPREL_HA,VK_PPC_TPREL_HIGHER,VK_PPC_TPREL_HIGHERA,VK_PPC_TPREL_HIGHEST,VK_PPC_TPREL_HIGHESTA,VK_PPC_DTPREL,VK_PPC_DTPREL_LO,VK_PPC_DTPREL_HI,VK_PPC_DTPREL_HA,VK_PPC_DTPREL_HIGHER,VK_PPC_DTPREL_HIGHERA,VK_PPC_DTPREL_HIGHEST,VK_PPC_DTPREL_HIGHESTA,VK_PPC_GOT_TPREL,VK_PPC_GOT_TPREL_LO,VK_PPC_GOT_TPREL_HI,VK_PPC_GOT_TPREL_HA,VK_PPC_GOT_DTPREL,VK_PPC_GOT_DTPREL_LO,VK_PPC_GOT_DTPREL_HI,VK_PPC_GOT_DTPREL_HA,VK_PPC_TLS,VK_PPC_GOT_TLSGD,VK_PPC_GOT_TLSGD_LO,VK_PPC_GOT_TLSGD_HI,VK_PPC_GOT_TLSGD_HA,VK_PPC_TLSGD,VK_PPC_GOT_TLSLD,VK_PPC_GOT_TLSLD_LO,VK_PPC_GOT_TLSLD_HI,VK_PPC_GOT_TLSLD_HA,VK_PPC_TLSLD,VK_PPC_LOCAL,VK_Mips_GPREL,VK_Mips_GOT_CALL,VK_Mips_GOT16,VK_Mips_GOT,VK_Mips_ABS_HI,VK_Mips_ABS_LO,VK_Mips_TLSGD,VK_Mips_TLSLDM,VK_Mips_DTPREL_HI,VK_Mips_DTPREL_LO,VK_Mips_GOTTPREL,VK_Mips_TPREL_HI,VK_Mips_TPREL_LO,VK_Mips_GPOFF_HI,VK_Mips_GPOFF_LO,VK_Mips_GOT_DISP,VK_Mips_GOT_PAGE,VK_Mips_GOT_OFST,VK_Mips_HIGHER,VK_Mips_HIGHEST,VK_Mips_GOT_HI16,VK_Mips_GOT_LO16,VK_Mips_CALL_HI16,VK_Mips_CALL_LO16,VK_Mips_PCREL_HI16,VK_Mips_PCREL_LO16,VK_COFF_IMGREL32,VK_Hexagon_PCREL,VK_Hexagon_LO16,VK_Hexagon_HI16,VK_Hexagon_GPREL,VK_Hexagon_GD_GOT,VK_Hexagon_LD_GOT,VK_Hexagon_GD_PLT,VK_Hexagon_LD_PLT,VK_Hexagon_IE,VK_Hexagon_IE_GOT,VK_TPREL,VK_DTPREL } ; private : const VariantKind Kind ; const unsigned UseParensForSymbolVariant : 1 ; const unsigned HasSubsectionsViaSymbols : 1 ; const MCSymbol* Symbol ;)",
    "insertText": "MCSymbolRefExpr(const MCSymbol *Symbol, VariantKind Kind, const MCAsmInfo *MAI)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (public : const MCSymbolRefExpr*)",
    "insertText": "create(const MCSymbol *Symbol, MCContext &Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} const MCSymbolRefExpr*)",
    "insertText": "create(const MCSymbol *Symbol, VariantKind Kind, MCContext &Ctx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (const MCSymbolRefExpr*)",
    "insertText": "create(StringRef Name, VariantKind Kind, MCContext &Ctx)"
  },
  {
    "label": "getSymbol()",
    "kind": "Method",
    "detail": "Function (const MCSymbol&)",
    "insertText": "getSymbol()"
  },
  {
    "label": "hasSubsectionsViaSymbols()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasSubsectionsViaSymbols()"
  },
  {
    "label": "getVariantKindForName()",
    "kind": "Method",
    "detail": "Function (VariantKind)",
    "insertText": "getVariantKindForName(StringRef Name)"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "classof(const MCExpr *E)"
  },
  {
    "label": "MCUnaryExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class MCUnaryExpr : public MCExpr { public : enum Opcode { LNot,Minus,Not,Plus } ; private : Opcode Op ; const MCExpr* Expr ;)",
    "insertText": "MCUnaryExpr(Opcode Op, const MCExpr *Expr) : MCExpr(MCExpr::Unary), Op(Op), Expr(Expr)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} public : const MCUnaryExpr*)",
    "insertText": "create(Opcode Op, const MCExpr *Expr, MCContext &Ctx)"
  },
  {
    "label": "createLNot()",
    "kind": "Method",
    "detail": "Function (const MCUnaryExpr*)",
    "insertText": "createLNot(const MCExpr *Expr, MCContext &Ctx)"
  },
  {
    "label": "createMinus()",
    "kind": "Method",
    "detail": "Function (} const MCUnaryExpr*)",
    "insertText": "createMinus(const MCExpr *Expr, MCContext &Ctx)"
  },
  {
    "label": "createNot()",
    "kind": "Method",
    "detail": "Function (} const MCUnaryExpr*)",
    "insertText": "createNot(const MCExpr *Expr, MCContext &Ctx)"
  },
  {
    "label": "createPlus()",
    "kind": "Method",
    "detail": "Function (} const MCUnaryExpr*)",
    "insertText": "createPlus(const MCExpr *Expr, MCContext &Ctx)"
  },
  {
    "label": "getOpcode()",
    "kind": "Method",
    "detail": "Function (} Opcode)",
    "insertText": "getOpcode()"
  },
  {
    "label": "MCBinaryExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class MCBinaryExpr : public MCExpr { public : enum Opcode { Add,And,Div,EQ,GT,GTE,LAnd,LOr,LT,LTE,Mod,Mul,NE,Or,Shl,AShr,LShr,Sub,Xor } ; private : Opcode Op ; const MCExpr* LHS,* RHS ;)",
    "insertText": "MCBinaryExpr(Opcode Op, const MCExpr *LHS, const MCExpr *RHS) : MCExpr(MCExpr::Binary), Op(Op), LHS(LHS), RHS(RHS)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} public : const MCBinaryExpr*)",
    "insertText": "create(Opcode Op, const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createAdd()",
    "kind": "Method",
    "detail": "Function (const MCBinaryExpr*)",
    "insertText": "createAdd(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createAnd()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createAnd(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createDiv()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createDiv(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createEQ()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createEQ(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createGT()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createGT(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createGTE()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createGTE(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createLAnd()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createLAnd(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createLOr()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createLOr(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createLT()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createLT(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createLTE()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createLTE(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createMod()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createMod(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createMul()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createMul(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createNE()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createNE(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createOr()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createOr(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createShl()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createShl(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createAShr()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createAShr(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createLShr()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createLShr(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createSub()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createSub(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "createXor()",
    "kind": "Method",
    "detail": "Function (} const MCBinaryExpr*)",
    "insertText": "createXor(const MCExpr *LHS, const MCExpr *RHS, MCContext &Ctx)"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (} } ; class MCTargetExpr : public MCExpr { void)",
    "insertText": "anchor()"
  },
  {
    "label": "MCTargetExpr()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "MCTargetExpr() : MCExpr(Target)"
  },
  {
    "label": "MCTargetExpr()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MCTargetExpr()"
  },
  {
    "label": "printImpl()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "printImpl(raw_ostream &OS, const MCAsmInfo *MAI)"
  },
  {
    "label": "evaluateAsRelocatableImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "evaluateAsRelocatableImpl(MCValue &Res, const MCAsmLayout *Layout, const MCFixup *Fixup)"
  },
  {
    "label": "visitUsedExpr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visitUsedExpr(MCStreamer& Streamer)"
  },
  {
    "label": "fixELFSymbolsInTLSFixups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fixELFSymbolsInTLSFixups(MCAssembler &)"
  }
]