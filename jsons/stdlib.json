[
  {
    "label": "atof()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "atof(const char* nptr)"
  },
  {
    "label": "atoi()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "atoi(const char* nptr)"
  },
  {
    "label": "atol()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "atol(const char* nptr)"
  },
  {
    "label": "atoll()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "atoll(const char* nptr)"
  },
  {
    "label": "strtod()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "strtod(const char* restrict nptr, char** restrict endptr)"
  },
  {
    "label": "strtof()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "strtof(const char* restrict nptr, char** restrict endptr)"
  },
  {
    "label": "strtold()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "strtold(const char* restrict nptr, char** restrict endptr)"
  },
  {
    "label": "strtol()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "strtol(const char* restrict nptr, char** restrict endptr, int base)"
  },
  {
    "label": "strtoll()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "strtoll(const char* restrict nptr, char** restrict endptr, int base)"
  },
  {
    "label": "strtoul()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "strtoul(const char* restrict nptr, char** restrict endptr, int base)"
  },
  {
    "label": "strtoull()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "strtoull(const char* restrict nptr, char** restrict endptr, int base)"
  },
  {
    "label": "rand()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "rand(void)"
  },
  {
    "label": "srand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srand(unsigned int seed)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(void* ptr)"
  },
  {
    "label": "abort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "abort(void)"
  },
  {
    "label": "exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exit(int status)"
  },
  {
    "label": "_Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Exit(int status)"
  },
  {
    "label": "system()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "system(const char* string)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "abs(      int j)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "abs(     long j)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "abs(long long j)"
  },
  {
    "label": "labs()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "labs(     long j)"
  },
  {
    "label": "llabs()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "llabs(long long j)"
  },
  {
    "label": "div()",
    "kind": "Method",
    "detail": "Function (div_t)",
    "insertText": "div(      int numer,       int denom)"
  },
  {
    "label": "div()",
    "kind": "Method",
    "detail": "Function (ldiv_t)",
    "insertText": "div(     long numer,      long denom)"
  },
  {
    "label": "div()",
    "kind": "Method",
    "detail": "Function (lldiv_t)",
    "insertText": "div(long long numer, long long denom)"
  },
  {
    "label": "ldiv()",
    "kind": "Method",
    "detail": "Function (ldiv_t)",
    "insertText": "ldiv(     long numer,      long denom)"
  },
  {
    "label": "lldiv()",
    "kind": "Method",
    "detail": "Function (lldiv_t)",
    "insertText": "lldiv(long long numer, long long denom)"
  },
  {
    "label": "mblen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mblen(const char* s, size_t n)"
  },
  {
    "label": "mbtowc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mbtowc(wchar_t* restrict pwc, const char* restrict s, size_t n)"
  },
  {
    "label": "wctomb()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "wctomb(char* s, wchar_t wchar)"
  },
  {
    "label": "mbstowcs()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "mbstowcs(wchar_t* restrict pwcs, const char* restrict s, size_t n)"
  },
  {
    "label": "wcstombs()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "wcstombs(char* restrict s, const wchar_t* restrict pwcs, size_t n)"
  },
  {
    "label": "quick_exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "quick_exit(int status)"
  },
  {
    "label": "__builtin_labs()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_labs(__x)"
  },
  {
    "label": "__builtin_llabs()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_llabs(__x)"
  },
  {
    "label": "__builtin_fabsf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_fabsf(__lcpp_x)"
  },
  {
    "label": "__builtin_fabs()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_fabs(__lcpp_x)"
  },
  {
    "label": "__builtin_fabsl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_fabsl(__lcpp_x)"
  }
]