[
  {
    "label": "SimulationNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimulationNode"
  },
  {
    "label": "NetworkNodeTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkNodeTransport"
  },
  {
    "label": "SimulationNode()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "SimulationNode(NetworkSimulationConfig config,\n                 SimulatedNetwork* behavior,\n                 EmulatedNetworkNode* network_node)"
  },
  {
    "label": "CreateBehavior()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SimulatedNetwork>)",
    "insertText": "CreateBehavior(\n      NetworkSimulationConfig config)"
  },
  {
    "label": "PauseTransmissionUntil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseTransmissionUntil(Timestamp until)"
  },
  {
    "label": "NetworkNodeTransport()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "NetworkNodeTransport(Clock* sender_clock, Call* sender_call)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Connect(EmulatedEndpoint* endpoint,\n               const rtc::SocketAddress& receiver_address,\n               DataSize packet_overhead)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (local_address_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (remote_address_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (current_network_route_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]