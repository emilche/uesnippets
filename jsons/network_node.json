[
  {
    "label": "SimulationNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimulationNode"
  },
  {
    "label": "NetworkNodeTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkNodeTransport"
  },
  {
    "label": "SimulationNode()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_SCENARIO_NETWORK_NODE_H_ # define TEST_SCENARIO_NETWORK_NODE_H_ # include<deque> # include<map> # include<memory> # include<utility> # include<vector> # include \" api / call / transport . h \" # include \" api / units / timestamp . h \" # include \" call / call . h \" # include \" call / simulated_network . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" test / network / network_emulation . h \" # include \" test / scenario / column_printer . h \" # include \" test / scenario / scenario_config . h \" namespace webrtc { namespace test { class SimulationNode { public :)",
    "insertText": "SimulationNode(NetworkSimulationConfig config, SimulatedNetwork* behavior, EmulatedNetworkNode* network_node)"
  },
  {
    "label": "CreateBehavior()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SimulatedNetwork>)",
    "insertText": "CreateBehavior(NetworkSimulationConfig config)"
  },
  {
    "label": "UpdateConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConfig(std::function<void(NetworkSimulationConfig*)> modifier)"
  },
  {
    "label": "PauseTransmissionUntil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseTransmissionUntil(Timestamp until)"
  },
  {
    "label": "ConfigPrinter()",
    "kind": "Method",
    "detail": "Function (ColumnPrinter)",
    "insertText": "ConfigPrinter()"
  },
  {
    "label": "node()",
    "kind": "Method",
    "detail": "Function (EmulatedNetworkNode*)",
    "insertText": "node()"
  },
  {
    "label": "NetworkNodeTransport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkNodeTransport()"
  },
  {
    "label": "SendRtp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtp(const uint8_t* packet, size_t length, const PacketOptions& options)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcp(const uint8_t* packet, size_t length)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Connect(EmulatedEndpoint* endpoint, const rtc::SocketAddress& receiver_address, DataSize packet_overhead)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "packet_overhead()",
    "kind": "Method",
    "detail": "Function (DataSize)",
    "insertText": "packet_overhead()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtc::SocketAddress local_address_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (DataSize packet_overhead_)",
    "insertText": "RTC_GUARDED_BY(mutex_) = DataSize::Zero()"
  }
]