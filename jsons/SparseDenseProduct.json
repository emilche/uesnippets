[
  {
    "label": "product_promote_storage_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_promote_storage_type"
  },
  {
    "label": "sparse_time_dense_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sparse_time_dense_product_impl"
  },
  {
    "label": "generic_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_product_impl"
  },
  {
    "label": "sparse_dense_outer_product_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sparse_dense_outer_product_evaluator"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "product_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_evaluator"
  },
  {
    "label": "LhsStorageOrder()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSEDENSEPRODUCT_H # define EIGEN_SPARSEDENSEPRODUCT_H namespace Eigen { namespace internal { template<> struct product_promote_storage_type<Sparse,Dense,OuterProduct> { typedef Sparse ret ; } ; template<> struct product_promote_storage_type<Dense,Sparse,OuterProduct> { typedef Sparse ret ; } ; template<SparseLhsType,DenseRhsType,DenseResType,AlphaType,int)",
    "insertText": "LhsStorageOrder((SparseLhsType::Flags&RowMajorBit)==RowMajorBit) ? RowMajor : ColMajor, bool ColPerCol = ((DenseRhsType::Flags&RowMajorBit)==0)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<SparseLhsType,DenseRhsType,DenseResType> struct sparse_time_dense_product_impl<SparseLhsType,DenseRhsType,DenseResType,DenseResType::Scalar,RowMajor,true> { typedef internal::remove_all<SparseLhsType>::type Lhs ; typedef internal::remove_all<DenseRhsType>::type Rhs ; typedef internal::remove_all<DenseResType>::type Res ; typedef evaluator<Lhs>::InnerIterator LhsInnerIterator ; typedef evaluator<Lhs> LhsEval ; void)",
    "insertText": "run(const SparseLhsType& lhs, const DenseRhsType& rhs, DenseResType& res, const typename Res::Scalar& alpha)"
  },
  {
    "label": "lhsEval()",
    "kind": "Method",
    "detail": "Function (LhsEval)",
    "insertText": "lhsEval(lhs)"
  },
  {
    "label": "outerSize()",
    "kind": "Method",
    "detail": "Function (Index n = lhs .)",
    "insertText": "outerSize()"
  },
  {
    "label": "initParallel()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_HAS_OPENMP)",
    "insertText": "initParallel()"
  },
  {
    "label": "nbThreads()",
    "kind": "Method",
    "detail": "Function (Index threads =)",
    "insertText": "nbThreads()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "for(Index c=0; c<rhs.cols(); ++c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_HAS_OPENMP)",
    "insertText": "if(threads>1 && lhsEval.nonZerosEstimate() > 20000)"
  },
  {
    "label": "schedule()",
    "kind": "Method",
    "detail": "Function (# pragma omp parallel for)",
    "insertText": "schedule(dynamic,(n+threads*4-1)/(threads*4)) num_threads(threads) for(Index i=0; i<n; ++i) processRow(lhsEval,rhs,res,alpha,i,c)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else # endif {)",
    "insertText": "for(Index i=0; i<n; ++i) processRow(lhsEval,rhs,res,alpha,i,c)"
  },
  {
    "label": "processRow()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "processRow(const LhsEval& lhsEval, const DenseRhsType& rhs, DenseResType& res, const typename Res::Scalar& alpha, Index i, Index col)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (Res::Scalar)",
    "insertText": "tmp(0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "coeffRef(i,col)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<SparseLhsType,DenseRhsType,DenseResType,AlphaType> struct sparse_time_dense_product_impl<SparseLhsType,DenseRhsType,DenseResType,AlphaType,ColMajor,true> { typedef internal::remove_all<SparseLhsType>::type Lhs ; typedef internal::remove_all<DenseRhsType>::type Rhs ; typedef internal::remove_all<DenseResType>::type Res ; typedef evaluator<Lhs> LhsEval ; typedef LhsEval::InnerIterator LhsInnerIterator ; void)",
    "insertText": "run(const SparseLhsType& lhs, const DenseRhsType& rhs, DenseResType& res, const AlphaType& alpha)"
  },
  {
    "label": "rhs_j()",
    "kind": "Method",
    "detail": "Function (ScalarBinaryOpTraits<AlphaType,Rhs::Scalar>::ReturnType)",
    "insertText": "rhs_j(alpha * rhs.coeff(j,c))"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index n = lhs .)",
    "insertText": "rows()"
  },
  {
    "label": "schedule()",
    "kind": "Method",
    "detail": "Function (# pragma omp parallel for)",
    "insertText": "schedule(dynamic,(n+threads*4-1)/(threads*4)) num_threads(threads) for(Index i=0; i<n; ++i) processRow(lhsEval,rhs,res,alpha,i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else # endif {)",
    "insertText": "for(Index i=0; i<n; ++i) processRow(lhsEval, rhs, res, alpha, i)"
  },
  {
    "label": "processRow()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "processRow(const LhsEval& lhsEval, const DenseRhsType& rhs, Res& res, const typename Res::Scalar& alpha, Index i)"
  },
  {
    "label": "res_i()",
    "kind": "Method",
    "detail": "Function (Res::RowXpr)",
    "insertText": "res_i(res.row(i))"
  },
  {
    "label": "rhs_j()",
    "kind": "Method",
    "detail": "Function (Rhs::ConstRowXpr)",
    "insertText": "rhs_j(rhs.row(j))"
  },
  {
    "label": "sparse_time_dense_product()",
    "kind": "Method",
    "detail": "Function (} } } ; template<SparseLhsType,DenseRhsType,DenseResType,AlphaType> void)",
    "insertText": "sparse_time_dense_product(const SparseLhsType& lhs, const DenseRhsType& rhs, DenseResType& res, const AlphaType& alpha)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (sparse_time_dense_product_impl<SparseLhsType,DenseRhsType,DenseResType,AlphaType)",
    "insertText": "run(lhs, rhs, res, alpha)"
  },
  {
    "label": "scaleAndAddTo()",
    "kind": "Method",
    "detail": "Function (} } namespace internal { template<Lhs,Rhs,int ProductType> struct generic_product_impl<Lhs,Rhs,SparseShape,DenseShape,ProductType> : generic_product_impl_base<Lhs,Rhs,generic_product_impl<Lhs,Rhs,SparseShape,DenseShape,ProductType>> { typedef Product<Lhs,Rhs>::Scalar Scalar ; template<Dest> void)",
    "insertText": "scaleAndAddTo(Dest& dst, const Lhs& lhs, const Rhs& rhs, const Scalar& alpha)"
  },
  {
    "label": "Lhs()",
    "kind": "Method",
    "detail": "Function (typedef nested_eval<)",
    "insertText": "Lhs((Rhs::Flags&RowMajorBit)==0)"
  },
  {
    "label": "Rhs()",
    "kind": "Method",
    "detail": "Function (typedef nested_eval<)",
    "insertText": "Rhs((Lhs::Flags&RowMajorBit)==0)"
  },
  {
    "label": "lhsNested()",
    "kind": "Method",
    "detail": "Function (LhsNested)",
    "insertText": "lhsNested(lhs)"
  },
  {
    "label": "rhsNested()",
    "kind": "Method",
    "detail": "Function (RhsNested)",
    "insertText": "rhsNested(rhs)"
  },
  {
    "label": "sparse_time_dense_product()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sparse_time_dense_product(lhsNested, rhsNested, dst, alpha)"
  },
  {
    "label": "scaleAndAddTo()",
    "kind": "Method",
    "detail": "Function (} } ; template<Lhs,Rhs,int ProductType> struct generic_product_impl<Lhs,Rhs,SparseTriangularShape,DenseShape,ProductType> : generic_product_impl<Lhs,Rhs,SparseShape,DenseShape,ProductType> { } ; template<Lhs,Rhs,int ProductType> struct generic_product_impl<Lhs,Rhs,DenseShape,SparseShape,ProductType> : generic_product_impl_base<Lhs,Rhs,generic_product_impl<Lhs,Rhs,DenseShape,SparseShape,ProductType>> { typedef Product<Lhs,Rhs>::Scalar Scalar ; template<Dst> void)",
    "insertText": "scaleAndAddTo(Dst& dst, const Lhs& lhs, const Rhs& rhs, const Scalar& alpha)"
  },
  {
    "label": "Rhs()",
    "kind": "Method",
    "detail": "Function (typedef nested_eval<)",
    "insertText": "Rhs((Lhs::Flags&RowMajorBit)==RowMajorBit)"
  },
  {
    "label": "dstT()",
    "kind": "Method",
    "detail": "Function (Transpose<Dst>)",
    "insertText": "dstT(dst)"
  },
  {
    "label": "sparse_time_dense_product()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sparse_time_dense_product(rhsNested.transpose(), lhsNested.transpose(), dstT, alpha)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<Lhs,Rhs,int ProductType> struct generic_product_impl<Lhs,Rhs,DenseShape,SparseTriangularShape,ProductType> : generic_product_impl<Lhs,Rhs,DenseShape,SparseShape,ProductType> { } ; template<LhsT,RhsT,bool NeedToTranspose> struct sparse_dense_outer_product_evaluator { protected : typedef conditional<NeedToTranspose,RhsT,LhsT>::type Lhs1 ; typedef conditional<NeedToTranspose,LhsT,RhsT>::type ActualRhs ; typedef Product<LhsT,RhsT,DefaultProduct> ProdXprType ; typedef conditional<is_same<internal::traits<Lhs1>::StorageKind,Sparse>::value,Lhs1,SparseView<Lhs1>>::type ActualLhs ; typedef conditional<is_same<internal::traits<Lhs1>::StorageKind,Sparse>::value,Lhs1 const&,SparseView<Lhs1>>::type LhsArg ; typedef evaluator<ActualLhs> LhsEval ; typedef evaluator<ActualRhs> RhsEval ; typedef evaluator<ActualLhs>::InnerIterator LhsIterator ; typedef ProdXprType::Scalar Scalar ; public : enum { Flags = NeedToTranspose ? RowMajorBit : 0,CoeffReadCost = HugeCost } ; class InnerIterator : public LhsIterator { public :)",
    "insertText": "InnerIterator(const sparse_dense_outer_product_evaluator &xprEval, Index outer) : LhsIterator(xprEval.m_lhsXprImpl, 0), m_outer(outer), m_empty(false), m_factor(get(xprEval.m_rhsXprImpl, outer, typename internal::traits<ActualRhs>::StorageKind() ))"
  },
  {
    "label": "outer()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Index)",
    "insertText": "outer()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Index)",
    "insertText": "col()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Scalar)",
    "insertText": "value()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE operator)",
    "insertText": "bool()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} protected : Scalar)",
    "insertText": "get(const RhsEval &rhs, Index outer, Dense = Dense())"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "get(const RhsEval &rhs, Index outer, Sparse = Sparse())"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (RhsEval::InnerIterator)",
    "insertText": "it(rhs, outer)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (m_empty = true ; return)",
    "insertText": "Scalar(0)"
  },
  {
    "label": "sparse_dense_outer_product_evaluator()",
    "kind": "Method",
    "detail": "Function (} Index m_outer ; bool m_empty ; Scalar m_factor ; } ;)",
    "insertText": "sparse_dense_outer_product_evaluator(const Lhs1 &lhs, const ActualRhs &rhs) : m_lhs(lhs), m_lhsXprImpl(m_lhs), m_rhsXprImpl(rhs)"
  },
  {
    "label": "EIGEN_INTERNAL_CHECK_COST_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost)"
  },
  {
    "label": "sparse_dense_outer_product_evaluator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "sparse_dense_outer_product_evaluator(const ActualRhs &rhs, const Lhs1 &lhs) : m_lhs(lhs), m_lhsXprImpl(m_lhs), m_rhsXprImpl(rhs)"
  },
  {
    "label": "product_evaluator()",
    "kind": "Method",
    "detail": "Function (} protected : const LhsArg m_lhs ; evaluator<ActualLhs> m_lhsXprImpl ; evaluator<ActualRhs> m_rhsXprImpl ; } ; template<Lhs,Rhs> struct product_evaluator<Product<Lhs,Rhs,DefaultProduct>,OuterProduct,SparseShape,DenseShape> : sparse_dense_outer_product_evaluator<Lhs,Rhs,Lhs::IsRowMajor> { typedef sparse_dense_outer_product_evaluator<Lhs,Rhs,Lhs::IsRowMajor> Base ; typedef Product<Lhs,Rhs> XprType ; typedef XprType::PlainObject PlainObject ;)",
    "insertText": "product_evaluator(const XprType& xpr) : Base(xpr.lhs(), xpr.rhs())"
  }
]