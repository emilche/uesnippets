[
  {
    "label": "GetStringValueToDisplay()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / CString . h \" # include \" Math / Color . h \" # include \" Math / MathFwd . h \" # include \" Math / Rotator . h \" # include \" Math / Transform . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Vector . h \" # include \" Containers / UnrealString . h \" # include \" Containers / StringFwd . h \" # include \" . . / TestHarness . h \" namespace { FString)",
    "insertText": "GetStringValueToDisplay(FStringView Value)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "TEXT(\"nullptr\")"
  },
  {
    "label": "GetStringValueToDisplay()",
    "kind": "Method",
    "detail": "Function (} } FString)",
    "insertText": "GetStringValueToDisplay(FUtf8StringView Value)"
  },
  {
    "label": "TestTrue()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "TestTrue(const TCHAR* What, bool Value)"
  },
  {
    "label": "FAIL_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIL_CHECK(FString::Printf(TEXT(\"Expected '%s' to be true.\"), What))"
  },
  {
    "label": "TestFalse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestFalse(const TCHAR* What, bool Value)"
  },
  {
    "label": "FAIL_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIL_CHECK(FString::Printf(TEXT(\"Expected '%s' to be false.\"), What))"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const TCHAR* What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "FAIL_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIL_CHECK(FString::Printf(TEXT(\"Expected '%s' to be %d, but it was %d.\"), What, Expected, Actual))"
  },
  {
    "label": "FAIL_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIL_CHECK(FString::Printf(TEXT(\"Expected '%s' to be %\" \"lld\" \", but it was %\" \"lld\" \".\"), What, Expected, Actual))"
  },
  {
    "label": "FAIL_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIL_CHECK(FString::Printf(TEXT(\"Expected '%s' to be %\" \"Iu\" \", but it was %\" \"Iu\" \".\"), What, Expected, Actual))"
  },
  {
    "label": "FAIL_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIL_CHECK(FString::Printf(TEXT(\"Expected '%s' to be %f, but it was %f within tolerance %f.\"), What, Expected, Actual, Tolerance))"
  },
  {
    "label": "FAIL_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIL_CHECK(FString::Printf(TEXT(\"Expected '%s' to be %s, but it was %s within tolerance %f.\"), What, *Expected.ToString(), *Actual.ToString(), Tolerance))"
  },
  {
    "label": "FAIL_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIL_CHECK(FString::Printf(TEXT(\"Expected '%s' to be %s, but it was %s.\"), What, *Expected.ToString(), *Actual.ToString()))"
  },
  {
    "label": "bAreEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bAreEqual(Actual && Expected) ? (FCString::Stricmp(Actual, Expected) == 0) : (Actual == Expected)"
  },
  {
    "label": "FAIL_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIL_CHECK(FString::Printf(TEXT(\"Expected '%s' to be %s, but it was %s.\"), What, *GetStringValueToDisplay(Expected), *GetStringValueToDisplay(Actual)))"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} return bAreEqual ; } bool)",
    "insertText": "TestEqual(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "bAreEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bAreEqual(Actual && Expected) ? (FCString::Strcmp(Actual, Expected) == 0) : (Actual == Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} return bAreEqual ; } bool)",
    "insertText": "TestEqualSensitive(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const FVector Actual, const FVector Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const FTransform Actual, const FTransform Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const FRotator Actual, const FRotator Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const FColor Actual, const FColor Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "TestEqual(const TCHAR* What, const ValueType& Actual, const ValueType& Expected)"
  },
  {
    "label": "FAIL_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIL_CHECK(FString::Printf(TEXT(\"%s: The two values are not equal.\"), What))"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqual(const TCHAR* What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "bAreDifferent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bAreDifferent(Actual && Expected) ? (FCString::Stricmp(Actual, Expected) != 0) : (Actual != Expected)"
  },
  {
    "label": "FAIL_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIL_CHECK(FString::Printf(TEXT(\"Expected '%s' to differ from %s, but it was %s.\"), What, *GetStringValueToDisplay(Expected), *GetStringValueToDisplay(Actual)))"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (} return bAreDifferent ; } bool)",
    "insertText": "TestNotEqual(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "bAreDifferent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bAreDifferent(Actual && Expected) ? (FCString::Strcmp(Actual, Expected) != 0) : (Actual != Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} return bAreDifferent ; } bool)",
    "insertText": "TestNotEqualSensitive(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "FAIL_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIL_CHECK(FString::Printf(TEXT(\"%s: The two values are equal.\"), Description))"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqual(const FString& What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqual(const FString& What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqualSensitive(const FString& What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqualSensitive(const FString& What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqualSensitive(const FString& What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "TestNotEqual(const FString& Description, const ValueType& Actual, const ValueType& Expected)"
  },
  {
    "label": "CHECK_EQUALS()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "CHECK_EQUALS(What, X, Y) TestEqual(What, X, Y)"
  },
  {
    "label": "CHECK_EQUALS_SENSITIVE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CHECK_EQUALS_SENSITIVE(What, X, Y) TestEqualSensitive(What, X, Y)"
  },
  {
    "label": "CHECK_NOT_EQUALS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CHECK_NOT_EQUALS(What, X, Y) TestNotEqual(What, X, Y)"
  },
  {
    "label": "CHECK_NOT_EQUALS_SENSITIVE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CHECK_NOT_EQUALS_SENSITIVE(What, X, Y) TestNotEqualSensitive(What, X, Y)"
  }
]