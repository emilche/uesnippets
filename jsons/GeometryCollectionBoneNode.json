[
  {
    "label": "FGeometryCollectionBoneNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionBoneNode"
  },
  {
    "label": "ENodeFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENodeFlags"
  },
  {
    "label": "FGeometryCollectionBoneNode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Set . h \" # include \" CoreMinimal . h \" struct FGeometryCollectionBoneNode { const int32 InvalidBone = - 1 ; const int32 InvalidLevel = - 1 ; enum ENodeFlags : uint32 { FS_Geometry = 0 x00000001,FS_Clustered = 0 x00000002,FS_RemoveOnFracture = 0 x00000004 } ;)",
    "insertText": "FGeometryCollectionBoneNode(int32 LevelIn, int32 ParentIn, uint32 StatusFlagsIn)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Level = LevelIn ; Parent = ParentIn ; StatusFlags = StatusFlagsIn ; Children .)",
    "insertText": "Reset()"
  },
  {
    "label": "FGeometryCollectionBoneNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGeometryCollectionBoneNode() : Level(InvalidLevel) , Parent(InvalidBone) , StatusFlags(ENodeFlags::FS_Geometry)"
  },
  {
    "label": "FGeometryCollectionBoneNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGeometryCollectionBoneNode(EForceInit) : Level(InvalidLevel), Parent(InvalidBone), StatusFlags(ENodeFlags::FS_Geometry)"
  },
  {
    "label": "FGeometryCollectionBoneNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGeometryCollectionBoneNode(const FGeometryCollectionBoneNode& Other)"
  },
  {
    "label": "IsGeometry()",
    "kind": "Method",
    "detail": "Function (Level = Other . Level ; Parent = Other . Parent ; Children = Other . Children ; StatusFlags = Other . StatusFlags ; } bool)",
    "insertText": "IsGeometry()"
  },
  {
    "label": "IsClustered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsClustered()"
  },
  {
    "label": "IsTransform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTransform()"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFlags(uint32 InFlags)"
  },
  {
    "label": "ClearFlags()",
    "kind": "Method",
    "detail": "Function (StatusFlags | = InFlags ; } void)",
    "insertText": "ClearFlags(uint32 InFlags)"
  },
  {
    "label": "HasFlags()",
    "kind": "Method",
    "detail": "Function (StatusFlags = StatusFlags& ~ InFlags ; } bool)",
    "insertText": "HasFlags(uint32 InFlags)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FGeometryCollectionBoneNode& Node)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<* this ; return true ; } void)",
    "insertText": "operator(const FGeometryCollectionBoneNode& Other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (this -> Level = Other . Level ; this -> Parent = Other . Parent ; this -> Children = Other . Children ; this -> StatusFlags = Other . StatusFlags ; } FString)",
    "insertText": "ToString()"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Result(\"{\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Result + = \" Parent : \" ;)",
    "insertText": "if(Parent==InvalidBone)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Result + = \",Level : \" ;)",
    "insertText": "if(Level == InvalidLevel)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Result + = \",Children [ \" ;)",
    "insertText": "for(auto& Elem : Children)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (Result + =)",
    "insertText": "Printf(TEXT(\"%d, \"), Elem)"
  }
]