[
  {
    "label": "FPlatformMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformMemoryStats"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "FPlatformVirtualMemoryBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlatformVirtualMemoryBlock"
  },
  {
    "label": "AllocatorPtr()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GenericPlatform / GenericPlatformMemory . h \" # include<libkern / OSAtomic . h> # include<Foundation / NSObject . h> # include<mach / mach . h> NS_ASSUME_NONNULL_BEGIN # ifndef USE_MALLOC_BINNED3 # define USE_MALLOC_BINNED3 0 # endif # ifndef USE_MALLOC_BINNED2 # define USE_MALLOC_BINNED2 ! USE_MALLOC_BINNED3 # endif OBJC_EXPORT @ interface FApplePlatformObject : NSObject { @ private OSQueueHead*)",
    "insertText": "AllocatorPtr(nullable OSQueueHead*)"
  },
  {
    "label": "APPLE_PLATFORM_OBJECT_ALLOC_OVERRIDES()",
    "kind": "Method",
    "detail": "Function (@ end # define)",
    "insertText": "APPLE_PLATFORM_OBJECT_ALLOC_OVERRIDES(ClassName) \\ + (nullable OSQueueHead*)"
  },
  {
    "label": "Queue()",
    "kind": "Method",
    "detail": "Function (\\ OSQueueHead Queue = OS_ATOMIC_QUEUE_INIT ; \\ return&)",
    "insertText": "Queue(id)allocWithZone:(NSZone*)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(ClassName*)"
  },
  {
    "label": "FPlatformMemoryStats()",
    "kind": "Method",
    "detail": "Function (\\ } struct FPlatformMemoryStats : public FGenericPlatformMemoryStats {)",
    "insertText": "FPlatformMemoryStats() : FGenericPlatformMemoryStats() , MemoryPressureStatus(EMemoryPressureStatus::Unknown)"
  },
  {
    "label": "GetMemoryPressureStatus()",
    "kind": "Method",
    "detail": "Function (} EMemoryPressureStatus)",
    "insertText": "GetMemoryPressureStatus()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} else { return MemoryPressureStatus ; } } EMemoryPressureStatus MemoryPressureStatus ; } ; struct FApplePlatformMemory : public FGenericPlatformMemory { void)",
    "insertText": "Init()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (FPlatformMemoryStats)",
    "insertText": "GetStats()"
  },
  {
    "label": "GetMemoryUsedFast()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetMemoryUsedFast()"
  },
  {
    "label": "GetConstants()",
    "kind": "Method",
    "detail": "Function (const FPlatformMemoryConstants&)",
    "insertText": "GetConstants()"
  },
  {
    "label": "BaseAllocator()",
    "kind": "Method",
    "detail": "Function (FMalloc*)",
    "insertText": "BaseAllocator()"
  },
  {
    "label": "PageProtect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PageProtect(void* const Ptr, const SIZE_T Size, const bool bCanRead, const bool bCanWrite)"
  },
  {
    "label": "BinnedAllocFromOS()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "BinnedAllocFromOS(SIZE_T Size)"
  },
  {
    "label": "BinnedFreeToOS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BinnedFreeToOS(void* Ptr, SIZE_T Size)"
  },
  {
    "label": "PtrIsOSMalloc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PtrIsOSMalloc(void* Ptr)"
  },
  {
    "label": "PtrIsFromNanoMalloc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PtrIsFromNanoMalloc(void* Ptr)"
  },
  {
    "label": "IsNanoMallocAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNanoMallocAvailable()"
  },
  {
    "label": "NanoMallocInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NanoMallocInit()"
  },
  {
    "label": "SetAllocatorToUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllocatorToUse()"
  },
  {
    "label": "FPlatformVirtualMemoryBlock()",
    "kind": "Method",
    "detail": "Function (class FPlatformVirtualMemoryBlock : public FBasicVirtualMemoryBlock { public :)",
    "insertText": "FPlatformVirtualMemoryBlock()"
  },
  {
    "label": "FPlatformVirtualMemoryBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlatformVirtualMemoryBlock(void *InPtr, uint32 InVMSizeDivVirtualSizeAlignment) : FBasicVirtualMemoryBlock(InPtr, InVMSizeDivVirtualSizeAlignment)"
  },
  {
    "label": "FPlatformVirtualMemoryBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlatformVirtualMemoryBlock(const FPlatformVirtualMemoryBlock& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPlatformVirtualMemoryBlock&)",
    "insertText": "operator(const FPlatformVirtualMemoryBlock& Other)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit(size_t InOffset, size_t InSize)"
  },
  {
    "label": "Decommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decommit(size_t InOffset, size_t InSize)"
  },
  {
    "label": "FreeVirtual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVirtual()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit(size_t(((uint8*)InPtr) - ((uint8*)Ptr)), InSize)"
  },
  {
    "label": "DecommitByPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecommitByPtr(void *InPtr, size_t InSize)"
  },
  {
    "label": "Decommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decommit(size_t(((uint8*)InPtr) - ((uint8*)Ptr)), InSize)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Commit()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit(0, GetActualSize())"
  },
  {
    "label": "Decommit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Decommit()"
  },
  {
    "label": "Decommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decommit(0, GetActualSize())"
  },
  {
    "label": "GetActualSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetActualSize()"
  },
  {
    "label": "AllocateVirtual()",
    "kind": "Method",
    "detail": "Function (} FPlatformVirtualMemoryBlock)",
    "insertText": "AllocateVirtual(size_t Size, size_t InAlignment = FPlatformVirtualMemoryBlock::GetVirtualSizeAlignment())"
  },
  {
    "label": "GetCommitAlignment()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetCommitAlignment()"
  },
  {
    "label": "GetVirtualSizeAlignment()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetVirtualSizeAlignment()"
  },
  {
    "label": "GetLLMAllocFunctions()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "GetLLMAllocFunctions(void* _Nonnull (* _Nonnull &OutAllocFunction)(size_t), void(* _Nonnull &OutFreeFunction)(void*, size_t), int32& OutAlignment)"
  },
  {
    "label": "ConfigureDefaultCFAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureDefaultCFAllocator(void)"
  },
  {
    "label": "CanOverallocateVirtualMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanOverallocateVirtualMemory()"
  }
]