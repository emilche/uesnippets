[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "__libcpp_is_pointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__libcpp_is_pointer"
  },
  {
    "label": "__libcpp_remove_objc_qualifiers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__libcpp_remove_objc_qualifiers"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_POINTER_H # define _LIBCPP___TYPE_TRAITS_IS_POINTER_H # include<__config> # include<__type_traits / integral_constant . h> # include<__type_traits / remove_cv . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if __has_builtin(__is_pointer) template<class _Tp> struct _LIBCPP_TEMPLATE_VIS is_pointer : _BoolConstant<__is_pointer(_Tp)"
  },
  {
    "label": "__is_pointer()",
    "kind": "Method",
    "detail": "Function (} ; # if _LIBCPP_STD_VER> 1 4 template<class _Tp> bool is_pointer_v =)",
    "insertText": "__is_pointer(_Tp)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # else template<class _Tp> struct __libcpp_is_pointer : public false_type { } ; template<class _Tp> struct __libcpp_is_pointer<_Tp*> : public true_type { } ; template<class _Tp> struct __libcpp_remove_objc_qualifiers { typedef _Tp type ; } ; # if)",
    "insertText": "defined(_LIBCPP_HAS_OBJC_ARC)"
  }
]