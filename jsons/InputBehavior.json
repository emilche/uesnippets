[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInputCaptureData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputCaptureData"
  },
  {
    "label": "UInputBehavior",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputBehavior"
  },
  {
    "label": "FInputCaptureRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputCaptureRequest"
  },
  {
    "label": "FInputCaptureUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputCaptureUpdate"
  },
  {
    "label": "FInputCapturePriority",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputCapturePriority"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputState . h \" # include \" Math / NumericLimits . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" InputBehavior . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "FInputCaptureData()",
    "kind": "Method",
    "detail": "Function (None = 0,Left = 1,Right = 2,Both = 3,Any = 9 9 } ; struct FInputCaptureData { EInputCaptureSide WhichSide ; void* CustomData ;)",
    "insertText": "FInputCaptureData()"
  },
  {
    "label": "FInputCaptureRequest()",
    "kind": "Method",
    "detail": "Function (Begin = 1,Ignore = 2 } ; class UInputBehavior ; struct FInputCaptureRequest { UInputBehavior* Source ; EInputCaptureRequestType Type ; EInputCaptureSide Side ; double HitDepth ; void* Owner ;)",
    "insertText": "FInputCaptureRequest(EInputCaptureRequestType type, UInputBehavior* behavior, EInputCaptureSide whichSide, double hitDepth = TNumericLimits<double>::Max())"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (this -> Type = type ; this -> Source = behavior ; this -> Side = whichSide ; this -> Owner = nullptr ; this -> HitDepth = hitDepth ; } FInputCaptureRequest)",
    "insertText": "Begin(UInputBehavior* behavior, EInputCaptureSide whichSide, double hitDepth = TNumericLimits<double>::Max())"
  },
  {
    "label": "Ignore()",
    "kind": "Method",
    "detail": "Function (} FInputCaptureRequest)",
    "insertText": "Ignore()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FInputCaptureRequest& l, const FInputCaptureRequest& r)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (Begin = 1,Continue = 2,End = 3,Ignore = 4 } ; struct FInputCaptureUpdate { EInputCaptureState State ; UInputBehavior* Source ; FInputCaptureData Data ; FInputCaptureUpdate)",
    "insertText": "Begin(UInputBehavior* SourceBehavior, EInputCaptureSide WhichSide, void* CustomData = nullptr)"
  },
  {
    "label": "Continue()",
    "kind": "Method",
    "detail": "Function (} FInputCaptureUpdate)",
    "insertText": "Continue()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (} FInputCaptureUpdate)",
    "insertText": "End()"
  },
  {
    "label": "FInputCaptureUpdate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputCaptureUpdate(EInputCaptureState StateIn, UInputBehavior* SourceBehaviorIn, EInputCaptureSide WhichSideIn, void* CustomData = nullptr)"
  },
  {
    "label": "FInputCapturePriority()",
    "kind": "Method",
    "detail": "Function (State = StateIn ; Source = SourceBehaviorIn ; Data . WhichSide = WhichSideIn ; Data . CustomData = CustomData ; } } ; struct FInputCapturePriority { int DEFAULT_GIZMO_PRIORITY = 5 0 ; int DEFAULT_TOOL_PRIORITY = 1 0 0 ; int Priority ;)",
    "insertText": "FInputCapturePriority(int priority = DEFAULT_TOOL_PRIORITY)"
  },
  {
    "label": "MakeLower()",
    "kind": "Method",
    "detail": "Function (Priority = priority ; } FInputCapturePriority)",
    "insertText": "MakeLower(int DeltaAmount = 1)"
  },
  {
    "label": "MakeHigher()",
    "kind": "Method",
    "detail": "Function (} FInputCapturePriority)",
    "insertText": "MakeHigher(int DeltaAmount = 1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FInputCapturePriority& l, const FInputCapturePriority& r)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: INTERACTIVETOOLSFRAMEWORK_API UInputBehavior()"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (FInputCapturePriority)",
    "insertText": "GetPriority()"
  },
  {
    "label": "SetDefaultPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultPriority(const FInputCapturePriority& Priority)"
  },
  {
    "label": "GetSupportedDevices()",
    "kind": "Method",
    "detail": "Function (EInputDevices)",
    "insertText": "GetSupportedDevices()"
  },
  {
    "label": "WantsCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureRequest)",
    "insertText": "WantsCapture(const FInputDeviceState& InputState)"
  },
  {
    "label": "BeginCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureUpdate)",
    "insertText": "BeginCapture(const FInputDeviceState& InputState, EInputCaptureSide eSide)"
  },
  {
    "label": "UpdateCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureUpdate)",
    "insertText": "UpdateCapture(const FInputDeviceState& InputState, const FInputCaptureData& CaptureData)"
  },
  {
    "label": "ForceEndCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceEndCapture(const FInputCaptureData& CaptureData)"
  },
  {
    "label": "WantsHoverEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantsHoverEvents()"
  },
  {
    "label": "WantsHoverCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureRequest)",
    "insertText": "WantsHoverCapture(const FInputDeviceState& InputState)"
  },
  {
    "label": "BeginHoverCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureUpdate)",
    "insertText": "BeginHoverCapture(const FInputDeviceState& InputState, EInputCaptureSide eSide)"
  },
  {
    "label": "UpdateHoverCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureUpdate)",
    "insertText": "UpdateHoverCapture(const FInputDeviceState& InputState)"
  },
  {
    "label": "EndHoverCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndHoverCapture()"
  }
]