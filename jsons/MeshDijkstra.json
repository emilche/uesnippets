[
  {
    "label": "PointSetType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointSetType"
  },
  {
    "label": "TMeshDijkstra",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshDijkstra"
  },
  {
    "label": "FSeedPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSeedPoint"
  },
  {
    "label": "FGraphNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphNode"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" MatrixTypes . h \" # include \" BoxTypes . h \" # include \" FrameTypes . h \" # include \" Util / IndexPriorityQueue . h \" # include \" Util / DynamicVector . h \" namespace UE { namespace Geometry { template<class PointSetType> class TMeshDijkstra { public : const PointSetType* PointSet ; TUniqueFunction<)",
    "insertText": "FVector3d(int32)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (bool bEnableDistanceWeighting = false ; TUniqueFunction<)",
    "insertText": "double(int32 FromVID, int32 ToVID, int32 SeedVID, double EuclideanDistance)"
  },
  {
    "label": "TMeshDijkstra()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TMeshDijkstra(const PointSetType* PointSetIn)"
  },
  {
    "label": "MaxVertexID()",
    "kind": "Method",
    "detail": "Function (PointSet = PointSetIn ; int32 MaxID = PointSet ->)",
    "insertText": "MaxVertexID()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Queue .)",
    "insertText": "Initialize(MaxID)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (MaxGraphDistance = 0 . 0 ; MaxGraphDistancePointID = - 1 ; GetPositionFunc = [)",
    "insertText": "this(int32 PointID)"
  },
  {
    "label": "GetWeightedDistanceFunc()",
    "kind": "Method",
    "detail": "Function (} ; bEnableDistanceWeighting = false ;)",
    "insertText": "GetWeightedDistanceFunc(int32, int32, int32, double Distance)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (AllocatedNodes .)",
    "insertText": "Clear()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (Queue .)",
    "insertText": "Clear(false)"
  },
  {
    "label": "ComputeToMaxDistance()",
    "kind": "Method",
    "detail": "Function (MaxGraphDistance = 0 . 0 ; MaxGraphDistancePointID = - 1 ; } struct FSeedPoint { int32 ExternalID = - 1 ; int32 PointID = 0 ; double StartDistance = 0 ; } ; void)",
    "insertText": "ComputeToMaxDistance(const TArray<FSeedPoint>& SeedPointsIn, double ComputeToMaxDistanceIn)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NewIndex = SeedPoints .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SeedPoints .)",
    "insertText": "Add(SeedPoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 PointID = SeedPoint . PointID ;)",
    "insertText": "if(ensure(Queue.Contains(PointID) == false))"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (FGraphNode* Node =)",
    "insertText": "GetNodeForPointSetID(PointID, true)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Node -> GraphDistance = SeedPoint . StartDistance ; Node -> bFrozen = true ; Node -> SeedPointID = NewIndex ; Queue .)",
    "insertText": "Insert(PointID, float(Node->GraphDistance))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(Queue.GetCount() > 0)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (int32 NextID = Queue .)",
    "insertText": "Dequeue()"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (FGraphNode* Node =)",
    "insertText": "GetNodeForPointSetID(NextID, false)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxGraphDistance = TMathUtil<double)",
    "insertText": "Max(Node->GraphDistance, MaxGraphDistance)"
  },
  {
    "label": "ComputeToMaxDistance()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ComputeToMaxDistance(const TArray<FVector2d>& SeedPointsIn, double ComputeToMaxDistanceIn)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ConvertedSeedPoints .)",
    "insertText": "SetNum(SeedPointsIn.Num())"
  },
  {
    "label": "FSeedPoint()",
    "kind": "Method",
    "detail": "Function (ConvertedSeedPoints [ k ] =)",
    "insertText": "FSeedPoint(int)"
  },
  {
    "label": "ComputeToMaxDistance()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ComputeToMaxDistance(ConvertedSeedPoints, ComputeToMaxDistanceIn)"
  },
  {
    "label": "ComputeToTargetPoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ComputeToTargetPoint(const TArray<FSeedPoint>& SeedPointsIn, int32 TargetPointID, double ComputeToMaxDistanceIn = TNumericLimits<double>::Max())"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Node -> GraphDistance = SeedPoint . StartDistance ; Node -> bFrozen = true ; Node -> SeedPointID = NewIndex ; Queue .)",
    "insertText": "Insert(PointID, (float)Node->GraphDistance)"
  },
  {
    "label": "GetMaxGraphDistance()",
    "kind": "Method",
    "detail": "Function (} return false ; } double)",
    "insertText": "GetMaxGraphDistance()"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (const FGraphNode* Node =)",
    "insertText": "GetNodeForPointSetID(PointID)"
  },
  {
    "label": "GetDistance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetDistance(int32 PointID)"
  },
  {
    "label": "FindPathToNearestSeed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindPathToNearestSeed(int32 PointID, TArray<int32>& PathToSeedOut, int32 MaxLength = 100000)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PathToSeedOut .)",
    "insertText": "Add(PointID)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 IterCount = 0 ;)",
    "insertText": "while(IterCount++ < MaxLength)"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (CurNode =)",
    "insertText": "GetNodeForPointSetID(CurNode->ParentPointID)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* AllocatedIndex = IDToNodeIndexMap .)",
    "insertText": "Find(PointSetID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllocatedNodes .)",
    "insertText": "Add(NewNode)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (IDToNodeIndexMap .)",
    "insertText": "Add(PointSetID, NewIndex)"
  },
  {
    "label": "UpdateNeighboursSparse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateNeighboursSparse(FGraphNode* Parent)"
  },
  {
    "label": "ParentPos()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "ParentPos(GetPositionFunc(Parent->PointID))"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (FGraphNode* NbrNode =)",
    "insertText": "GetNodeForPointSetID(NbrPointID, true)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (continue ; } double LocalDist =)",
    "insertText": "Distance(ParentPos, GetPositionFunc(NbrPointID))"
  },
  {
    "label": "GetWeightedDistanceFunc()",
    "kind": "Method",
    "detail": "Function (int SeedPointID = SeedPoints [ Parent -> SeedPointID ] . PointID ; LocalDist =)",
    "insertText": "GetWeightedDistanceFunc(Parent->PointID, NbrPointID, SeedPointID, LocalDist)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} double NbrDist = ParentDist + LocalDist ;)",
    "insertText": "if(Queue.Contains(NbrPointID))"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (NbrNode -> ParentPointID = Parent -> PointID ; NbrNode -> GraphDistance = NbrDist ; NbrNode -> SeedPointID = Parent -> SeedPointID ; Queue .)",
    "insertText": "Update(NbrPointID, float(NbrNode->GraphDistance))"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} } else { NbrNode -> ParentPointID = Parent -> PointID ; NbrNode -> GraphDistance = NbrDist ; NbrNode -> SeedPointID = Parent -> SeedPointID ; Queue .)",
    "insertText": "Insert(NbrPointID, float(NbrNode->GraphDistance))"
  }
]