[
  {
    "label": "ABSL_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_LOCKABLE"
  },
  {
    "label": "SpinLockTest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SpinLockTest"
  },
  {
    "label": "ABSL_SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_SCOPED_LOCKABLE"
  },
  {
    "label": "SpinLock()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_INTERNAL_SPINLOCK_H_ # define ABSL_BASE_INTERNAL_SPINLOCK_H_ # include<atomic> # include<cstdint> # include \" absl / base / attributes . h \" # include \" absl / base / const_init . h \" # include \" absl / base / dynamic_annotations . h \" # include \" absl / base / internal / low_level_scheduling . h \" # include \" absl / base / internal / raw_logging . h \" # include \" absl / base / internal / scheduling_mode . h \" # include \" absl / base / internal / tsan_mutex_interface . h \" # include \" absl / base / thread_annotations . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace base_internal { class ABSL_LOCKABLE SpinLock { public :)",
    "insertText": "SpinLock() : lockword_(kSpinLockCooperative)"
  },
  {
    "label": "ABSL_TSAN_MUTEX_CREATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_TSAN_MUTEX_CREATE(this, __tsan_mutex_not_static)"
  },
  {
    "label": "SpinLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SpinLock(base_internal::SchedulingMode mode)"
  },
  {
    "label": "SpinLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpinLock(absl::ConstInitType, base_internal::SchedulingMode mode) : lockword_(IsCooperative(mode) ? kSpinLockCooperative : 0)"
  },
  {
    "label": "SpinLock()",
    "kind": "Method",
    "detail": "Function (} # ifdef ABSL_INTERNAL_HAVE_TSAN_INTERFACE ~)",
    "insertText": "SpinLock()"
  },
  {
    "label": "ABSL_TSAN_MUTEX_DESTROY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_TSAN_MUTEX_DESTROY(this, __tsan_mutex_not_static)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Lock() ABSL_EXCLUSIVE_LOCK_FUNCTION()"
  },
  {
    "label": "ABSL_TSAN_MUTEX_PRE_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_TSAN_MUTEX_PRE_LOCK(this, 0)"
  },
  {
    "label": "SlowLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlowLock()"
  },
  {
    "label": "ABSL_TSAN_MUTEX_POST_LOCK()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ABSL_TSAN_MUTEX_POST_LOCK(this, 0, 0)"
  },
  {
    "label": "TryLock()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryLock() ABSL_EXCLUSIVE_TRYLOCK_FUNCTION(true)"
  },
  {
    "label": "ABSL_TSAN_MUTEX_PRE_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_TSAN_MUTEX_PRE_LOCK(this, __tsan_mutex_try_lock)"
  },
  {
    "label": "TryLockImpl()",
    "kind": "Method",
    "detail": "Function (bool res =)",
    "insertText": "TryLockImpl()"
  },
  {
    "label": "ABSL_TSAN_MUTEX_POST_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_TSAN_MUTEX_POST_LOCK(this, __tsan_mutex_try_lock | (res ? 0 : __tsan_mutex_try_lock_failed), 0)"
  },
  {
    "label": "ABSL_TSAN_MUTEX_PRE_UNLOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_TSAN_MUTEX_PRE_UNLOCK(this, 0)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uint32_t lock_value = lockword_ .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (lock_value = lockword_ .)",
    "insertText": "exchange(lock_value & kSpinLockCooperative, std::memory_order_release)"
  },
  {
    "label": "EnableRescheduling()",
    "kind": "Method",
    "detail": "Function (base_internal::)",
    "insertText": "EnableRescheduling(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((lock_value & kWaitTimeMask) != 0)"
  },
  {
    "label": "SlowUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlowUnlock(lock_value)"
  },
  {
    "label": "ABSL_TSAN_MUTEX_POST_UNLOCK()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ABSL_TSAN_MUTEX_POST_UNLOCK(this, 0)"
  },
  {
    "label": "IsHeld()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHeld()"
  },
  {
    "label": "AssertHeld()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssertHeld() const ABSL_ASSERT_EXCLUSIVE_LOCK()"
  },
  {
    "label": "ABSL_RAW_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_RAW_LOG(FATAL, \"thread should hold the lock on SpinLock\")"
  },
  {
    "label": "EncodeWaitCycles()",
    "kind": "Method",
    "detail": "Function (} } protected : uint32_t)",
    "insertText": "EncodeWaitCycles(int64_t wait_start_time, int64_t wait_end_time)"
  },
  {
    "label": "DecodeWaitCycles()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "DecodeWaitCycles(uint32_t lock_value)"
  },
  {
    "label": "kWaitTimeMask()",
    "kind": "Method",
    "detail": "Function (struct SpinLockTest ; private : uint32_t kSpinLockHeld = 1 ; uint32_t kSpinLockCooperative = 2 ; uint32_t kSpinLockDisabledScheduling = 4 ; uint32_t kSpinLockSleeper = 8 ; uint32_t)",
    "insertText": "kWaitTimeMask(kSpinLockHeld | kSpinLockCooperative | kSpinLockDisabledScheduling)"
  },
  {
    "label": "IsCooperative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCooperative(base_internal::SchedulingMode scheduling_mode)"
  },
  {
    "label": "SlowUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlowUnlock(uint32_t lock_value)"
  },
  {
    "label": "SpinLoop()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "SpinLoop()"
  },
  {
    "label": "SpinLock()",
    "kind": "Method",
    "detail": "Function (} std::atomic<uint32_t> lockword_ ;)",
    "insertText": "SpinLock(const SpinLock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SpinLock&)",
    "insertText": "operator(const SpinLock&)"
  },
  {
    "label": "SpinLockHolder()",
    "kind": "Method",
    "detail": "Function (} ; class ABSL_SCOPED_LOCKABLE SpinLockHolder { public :)",
    "insertText": "SpinLockHolder(SpinLock* l) ABSL_EXCLUSIVE_LOCK_FUNCTION(l) : lock_(l)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (l ->)",
    "insertText": "Lock()"
  },
  {
    "label": "SpinLockHolder()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SpinLockHolder() ABSL_UNLOCK_FUNCTION()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (lock_ ->)",
    "insertText": "Unlock()"
  },
  {
    "label": "SpinLockHolder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SpinLockHolder(const SpinLockHolder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SpinLockHolder&)",
    "insertText": "operator(const SpinLockHolder&)"
  },
  {
    "label": "RegisterSpinLockProfiler()",
    "kind": "Method",
    "detail": "Function (private : SpinLock* lock_ ; } ; void)",
    "insertText": "RegisterSpinLockProfiler(void (*fn)(const void* lock, int64_t wait_cycles))"
  },
  {
    "label": "TryLockInternal()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "TryLockInternal(uint32_t lock_value, uint32_t wait_cycles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (sched_disabled_bit = kSpinLockDisabledScheduling ; } })",
    "insertText": "if(!lockword_.compare_exchange_strong( lock_value, kSpinLockHeld | lock_value | wait_cycles | sched_disabled_bit, std::memory_order_acquire, std::memory_order_relaxed))"
  },
  {
    "label": "EnableRescheduling()",
    "kind": "Method",
    "detail": "Function (base_internal::)",
    "insertText": "EnableRescheduling(sched_disabled_bit != 0)"
  }
]