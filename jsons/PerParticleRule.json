[
  {
    "label": "FPerParticleRule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerParticleRule"
  },
  {
    "label": "T_PARTICLES",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T_PARTICLES"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDParticles . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / ParticleRule . h \" namespace Chaos { class FPerParticleRule : public FParticleRule { public : void)",
    "insertText": "Apply(FParticles& InParticles, const FReal Dt)"
  },
  {
    "label": "ApplyPerParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPerParticle(InParticles, Dt)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FDynamicParticles& InParticles, const FReal Dt)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FPBDParticles& InParticles, const FReal Dt)"
  },
  {
    "label": "ApplyPerParticle()",
    "kind": "Method",
    "detail": "Function (} template<class T_PARTICLES> void)",
    "insertText": "ApplyPerParticle(T_PARTICLES& InParticles, const FReal Dt)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(InParticles.Size(), [&](int32 Index) { Apply(InParticles, Dt, Index); })"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FParticles& InParticles, const FReal Dt, const int Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Apply(FDynamicParticles& InParticles, const FReal Dt, const int Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(static_cast<FParticles&>(InParticles), Dt, Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Apply(FPBDParticles& InParticles, const FReal Dt, const int Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(static_cast<FDynamicParticles&>(InParticles), Dt, Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Apply(TRigidParticles<FReal, 3>& InParticles, const FReal Dt, const int Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Apply(FPBDRigidParticles& InParticles, const FReal Dt, const int Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(static_cast<TRigidParticles<FReal, 3>&>(InParticles), Dt, Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Apply(TPBDRigidParticleHandle<FReal, 3>* Particle, const FReal Dt)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TTransientPBDRigidParticleHandle<FReal, 3>& Particle, const FReal Dt)"
  }
]