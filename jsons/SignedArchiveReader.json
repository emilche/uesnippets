[
  {
    "label": "FChunkBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkBuffer"
  },
  {
    "label": "FChunkRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkRequest"
  },
  {
    "label": "FChunkCacheWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChunkCacheWorker"
  },
  {
    "label": "FSignedArchiveReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSignedArchiveReader"
  },
  {
    "label": "FReadInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadInfo"
  },
  {
    "label": "FChunkBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Containers / LockFreeList . h \" # include \" IPlatformFilePak . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / Runnable . h \" # include \" Math / BigInt . h \" struct FChunkBuffer { uint8* Data ; int32 LockCount ; int32 ChunkIndex ; double LastAccessTime ;)",
    "insertText": "FChunkBuffer() : Data(NULL) , LockCount(0) , ChunkIndex(INDEX_NONE) , LastAccessTime(0.0)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Data(uint8*)FMemory::Malloc(FPakInfo::MaxChunkDataSize)"
  },
  {
    "label": "FChunkBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FChunkBuffer()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Data)"
  },
  {
    "label": "FChunkRequest()",
    "kind": "Method",
    "detail": "Function (Data = NULL ; } } ; struct FChunkRequest { int32 Index ; int64 Offset ; int64 Size ; FChunkBuffer* Buffer ; FThreadSafeCounter IsTrusted ; FThreadSafeCounter RefCount ; FEvent* Event ;)",
    "insertText": "FChunkRequest() : Index(INDEX_NONE) , Offset(0) , Size(0) , Buffer(nullptr) , IsTrusted(0) , RefCount(0) , Event(nullptr)"
  },
  {
    "label": "WaitUntilReady()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WaitUntilReady()"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(0.0f)"
  },
  {
    "label": "IsReady()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsReady()"
  },
  {
    "label": "ProcessQueue()",
    "kind": "Method",
    "detail": "Function (} } ; class FChunkCacheWorker : public FRunnable { enum { MaxCachedChunks = 8 } ; TSharedPtr<const FPakSignatureFile,ESPMode::ThreadSafe> Signatures ; TPakChunkHash OriginalSignatureFileHash ; FRunnableThread* Thread ; TUniquePtr<FArchive> Reader ; FChunkBuffer CachedChunks [ MaxCachedChunks ] ; TArray<FChunkRequest*> RequestQueue ; FCriticalSection QueueLock ; FThreadSafeCounter PendingQueueCounter ; FEvent* QueuedRequestsEvent ; TArray<FChunkRequest*> ActiveRequests ; FThreadSafeCounter StopTaskCounter ; TLockFreePointerListUnordered<FChunkRequest,PLATFORM_CACHE_LINE_SIZE> FreeChunkRequests ; TLockFreePointerListUnordered<FEvent,PLATFORM_CACHE_LINE_SIZE> EventsToRelease ; int32)",
    "insertText": "ProcessQueue()"
  },
  {
    "label": "CheckSignature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckSignature(const FChunkRequest& ChunkInfo)"
  },
  {
    "label": "GetCachedChunkBuffer()",
    "kind": "Method",
    "detail": "Function (FChunkBuffer*)",
    "insertText": "GetCachedChunkBuffer(int32 ChunkIndex)"
  },
  {
    "label": "GetFreeBuffer()",
    "kind": "Method",
    "detail": "Function (FChunkBuffer*)",
    "insertText": "GetFreeBuffer()"
  },
  {
    "label": "ReleaseBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseBuffer(int32 ChunkIndex)"
  },
  {
    "label": "ReleaseNotificationEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseNotificationEvent(FEvent* Event)"
  },
  {
    "label": "FChunkCacheWorker()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FChunkCacheWorker(TUniquePtr<FArchive> InReader, const TCHAR* Filename)"
  },
  {
    "label": "FChunkCacheWorker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FChunkCacheWorker()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "GetSignatures()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FPakSignatureFile,ESPMode::ThreadSafe>)",
    "insertText": "GetSignatures()"
  },
  {
    "label": "ReleaseChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseChunk(FChunkRequest& Chunk)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "CalculateChunkIndex()",
    "kind": "Method",
    "detail": "Function (class FSignedArchiveReader ; } ; class FSignedArchiveReader : public FArchive { struct FReadInfo { FChunkRequest* Request ; FChunkBuffer* PreCachedChunk ; int64 SourceOffset ; int64 DestOffset ; int64 Size ; } ; int64 ChunkCount ; FArchive* PakReader ; int64 SizeOnDisk ; int64 PakSize ; int64 PakOffset ; FChunkCacheWorker* SignatureChecker ; FChunkBuffer LastCachedChunk ; int64)",
    "insertText": "CalculateChunkIndex(int64 ReadOffset)"
  },
  {
    "label": "CalculateChunkOffsetFromIndex()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "CalculateChunkOffsetFromIndex(int64 BufferIndex)"
  },
  {
    "label": "CalculateChunkIndex()",
    "kind": "Method",
    "detail": "Function (const int64 ChunkIndex =)",
    "insertText": "CalculateChunkIndex(ReadOffset)"
  },
  {
    "label": "CalculateChunkOffsetFromIndex()",
    "kind": "Method",
    "detail": "Function (OutDataOffset = ReadOffset ; return)",
    "insertText": "CalculateChunkOffsetFromIndex(ChunkIndex)"
  },
  {
    "label": "CalculateChunkSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "CalculateChunkSize(int64 ChunkIndex)"
  },
  {
    "label": "PrecacheChunks()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "PrecacheChunks(TArray<FReadInfo>& Chunks, int64 Length, FEvent* Event)"
  },
  {
    "label": "FSignedArchiveReader()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSignedArchiveReader(FArchive* InPakReader, FChunkCacheWorker* InSignatureChecker)"
  },
  {
    "label": "FSignedArchiveReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSignedArchiveReader()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(void* Data, int64 Length)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Tell()"
  }
]