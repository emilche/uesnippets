[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FShaderCommonCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCommonCompileJob"
  },
  {
    "label": "FShaderCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileJob"
  },
  {
    "label": "FShaderParametersMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParametersMetadata"
  },
  {
    "label": "FShaderUniformBufferParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderUniformBufferParameter"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerEnvironment"
  },
  {
    "label": "FShaderCacheLoadContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCacheLoadContext"
  },
  {
    "label": "FGlobalShaderMapId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderMapId"
  },
  {
    "label": "FGlobalShaderPermutationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalShaderPermutationParameters"
  },
  {
    "label": "FGlobalShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderType"
  },
  {
    "label": "FGlobalShaderTypeCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderTypeCompiler"
  },
  {
    "label": "FGlobalShaderMapContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderMapContent"
  },
  {
    "label": "FGlobalShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderMap"
  },
  {
    "label": "FGlobalShaderMapSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderMapSection"
  },
  {
    "label": "FGlobalShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShader"
  },
  {
    "label": "FNULLPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNULLPS"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGlobalShaderMapId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Paths . h \" # include \" RHI . h \" # include \" RHIDefinitions . h \" # include \" RHIResources . h \" # include \" Serialization / MemoryImage . h \" # include \" Serialization / MemoryLayout . h \" # include \" Shader . h \" # include \" ShaderParameterUtils . h \" # include \" Templates / Tuple . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class FArchive ; class FShaderCommonCompileJob ; class FShaderCompileJob ; class FShaderParametersMetadata ; class FShaderUniformBufferParameter ; class FVertexFactoryType ; class ITargetPlatform ; struct FShaderCompilerEnvironment ; # if WITH_EDITOR struct FShaderCacheLoadContext ; # endif const int32 GlobalShaderMapId ; class FGlobalShaderMapId { public :)",
    "insertText": "FGlobalShaderMapId(EShaderPlatform Platform, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "AppendKeyString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendKeyString(FString& KeyString, const TArray<FShaderTypeDependency>& Dependencies)"
  },
  {
    "label": "GetShaderFilenameToDependeciesMap()",
    "kind": "Method",
    "detail": "Function (const TMap<FString,TArray<FShaderTypeDependency>>&)",
    "insertText": "GetShaderFilenameToDependeciesMap()"
  },
  {
    "label": "GetShaderPermutationFlags()",
    "kind": "Method",
    "detail": "Function (EShaderPermutationFlags)",
    "insertText": "GetShaderPermutationFlags()"
  },
  {
    "label": "FGlobalShaderPermutationParameters()",
    "kind": "Method",
    "detail": "Function (} private : FPlatformTypeLayoutParameters LayoutParams ; EShaderPlatform ShaderPlatform ; FName IniPlatformName ; TMap<FString,TArray<FShaderTypeDependency>> ShaderFilenameToDependenciesMap ; TArray<FShaderPipelineTypeDependency> ShaderPipelineTypeDependencies ; } ; struct FGlobalShaderPermutationParameters : public FShaderPermutationParameters { const FName GlobalShaderName ;)",
    "insertText": "FGlobalShaderPermutationParameters(FName InGlobalShaderName, EShaderPlatform InShaderPlatform, int32 InPermutationId = 0, EShaderPermutationFlags InFlags = EShaderPermutationFlags::HasEditorOnlyData) : FShaderPermutationParameters(InShaderPlatform, InPermutationId, InFlags) , GlobalShaderName(InGlobalShaderName)"
  },
  {
    "label": "FGlobalShaderType()",
    "kind": "Method",
    "detail": "Function (} } ; class FGlobalShaderType : public FShaderType { class FGlobalShaderTypeCompiler ; public : typedef FShader::CompiledShaderInitializerType CompiledShaderInitializerType ;)",
    "insertText": "FGlobalShaderType(FTypeLayoutDesc& InTypeLayout, const TCHAR* InName, const TCHAR* InSourceFilename, const TCHAR* InFunctionName, uint32 InFrequency, int32 InTotalPermutationCount, ConstructSerializedType InConstructSerializedRef, ConstructCompiledType InConstructCompiledRef, ShouldCompilePermutationType InShouldCompilePermutationRef, ShouldPrecachePermutationType InShouldPrecachePermutationRef, GetRayTracingPayloadTypeType InGetRayTracingPayloadTypeRef, GetShaderBindingLayoutType InGetShaderBindingLayoutTypeRef, #if WITH_EDITOR ModifyCompilationEnvironmentType InModifyCompilationEnvironmentRef, ValidateCompiledResultType InValidateCompiledResultRef, #endif uint32 InTypeSize, const FShaderParametersMetadata* InRootParametersMetadata = nullptr ): FShaderType(EShaderTypeForDynamicCast::Global, InTypeLayout, InName, InSourceFilename, InFunctionName, InFrequency, InTotalPermutationCount, InConstructSerializedRef, InConstructCompiledRef, InShouldCompilePermutationRef, InShouldPrecachePermutationRef, InGetRayTracingPayloadTypeRef, InGetShaderBindingLayoutTypeRef, #if WITH_EDITOR InModifyCompilationEnvironmentRef, InValidateCompiledResultRef, #endif InTypeSize, InRootParametersMetadata)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePermutation(EShaderPlatform Platform, int32 PermutationId, EShaderPermutationFlags Flags)"
  },
  {
    "label": "ShouldPrecachePermutation()",
    "kind": "Method",
    "detail": "Function (} EShaderPermutationPrecacheRequest)",
    "insertText": "ShouldPrecachePermutation(EShaderPlatform Platform, int32 PermutationId, EShaderPermutationFlags Flags)"
  },
  {
    "label": "SetupCompileEnvironment()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "SetupCompileEnvironment(EShaderPlatform Platform, int32 PermutationId, EShaderPermutationFlags Flags, FShaderCompilerEnvironment& Environment)"
  },
  {
    "label": "ShouldCompilePipeline()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ShouldCompilePipeline(const FShaderPipelineType* ShaderPipelineType, EShaderPlatform Platform, EShaderPermutationFlags Flags)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FGlobalShaderMapContent : public FShaderMapContent { using Super = FShaderMapContent ; class FGlobalShaderMap ; class FGlobalShaderMapSection ;)",
    "insertText": "DECLARE_TYPE_LAYOUT(FGlobalShaderMapContent, NonVirtual)"
  },
  {
    "label": "GetHashedSourceFilename()",
    "kind": "Method",
    "detail": "Function (public : const FHashedName&)",
    "insertText": "GetHashedSourceFilename()"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAYOUT_FIELD(FHashedName, HashedSourceFilename)"
  },
  {
    "label": "CreateFromArchive()",
    "kind": "Method",
    "detail": "Function (} ; class FGlobalShaderMapSection : public TShaderMap<FGlobalShaderMapContent,FShaderMapPointerTable> { using Super = TShaderMap<FGlobalShaderMapContent,FShaderMapPointerTable> ; class FGlobalShaderMap ; public : FGlobalShaderMapSection*)",
    "insertText": "CreateFromArchive(FArchive& Ar)"
  },
  {
    "label": "CreateFromCache()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FGlobalShaderMapSection*)",
    "insertText": "CreateFromCache(FShaderCacheLoadContext& Ctx)"
  },
  {
    "label": "GetShaderList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderList(TMap<FHashedName, TShaderRef<FShader>>& OutShaders)"
  },
  {
    "label": "GetShaderPipelineList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderPipelineList(TArray<FShaderPipelineRef>& OutShaderPipelines)"
  },
  {
    "label": "FGlobalShaderMapSection()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FGlobalShaderMapSection()"
  },
  {
    "label": "AssociateWithAsset()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "AssociateWithAsset(NAME_None)"
  },
  {
    "label": "FGlobalShaderMapSection()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "FGlobalShaderMapSection(EShaderPlatform InPlatform, const FHashedName& InHashedSourceFilename)"
  },
  {
    "label": "AssignContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignContent(new FGlobalShaderMapContent(InPlatform, InHashedSourceFilename))"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (} TShaderRef<FShader>)",
    "insertText": "GetShader(FShaderType* ShaderType, int32 PermutationId = 0)"
  },
  {
    "label": "GetShaderPipeline()",
    "kind": "Method",
    "detail": "Function (FShaderPipelineRef)",
    "insertText": "GetShaderPipeline(const FShaderPipelineType* PipelineType)"
  },
  {
    "label": "FGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (} ; class FGlobalShaderMap { public :)",
    "insertText": "FGlobalShaderMap(EShaderPlatform InPlatform)"
  },
  {
    "label": "FGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGlobalShaderMap()"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (template<ShaderType> TShaderRef<ShaderType>)",
    "insertText": "GetShader()"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> TShaderRef<ShaderType>)",
    "insertText": "GetShader(int32 PermutationId)"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (TShaderRef<FShader> Shader =)",
    "insertText": "GetShader(&ShaderType::GetStaticType(), PermutationId)"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> TShaderRef<ShaderType>)",
    "insertText": "GetShader(const typename ShaderType::FPermutationDomain& PermutationVector)"
  },
  {
    "label": "HasShader()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasShader(FShaderType* Type, int32 PermutationId)"
  },
  {
    "label": "HasShaderPipeline()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasShaderPipeline(const FShaderPipelineType* ShaderPipelineType)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplete(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "ReleaseAllSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAllSections()"
  },
  {
    "label": "FindOrAddShader()",
    "kind": "Method",
    "detail": "Function (FShader*)",
    "insertText": "FindOrAddShader(const FShaderType* ShaderType, int32 PermutationId, FShader* Shader)"
  },
  {
    "label": "FindOrAddShaderPipeline()",
    "kind": "Method",
    "detail": "Function (FShaderPipeline*)",
    "insertText": "FindOrAddShaderPipeline(const FShaderPipelineType* ShaderPipelineType, FShaderPipeline* ShaderPipeline)"
  },
  {
    "label": "RemoveShaderTypePermutaion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveShaderTypePermutaion(const FShaderType* Type, int32 PermutationId)"
  },
  {
    "label": "RemoveShaderPipelineType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveShaderPipelineType(const FShaderPipelineType* ShaderPipelineType)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSection(FGlobalShaderMapSection* InSection)"
  },
  {
    "label": "FindSection()",
    "kind": "Method",
    "detail": "Function (FGlobalShaderMapSection*)",
    "insertText": "FindSection(const FHashedName& HashedShaderFilename)"
  },
  {
    "label": "FindOrAddSection()",
    "kind": "Method",
    "detail": "Function (FGlobalShaderMapSection*)",
    "insertText": "FindOrAddSection(const FShaderType* ShaderType)"
  },
  {
    "label": "LoadFromGlobalArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFromGlobalArchive(FArchive& Ar)"
  },
  {
    "label": "SaveToGlobalArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveToGlobalArchive(FArchive& Ar)"
  },
  {
    "label": "BeginCreateAllShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCreateAllShaders()"
  },
  {
    "label": "GetOutdatedTypes()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "GetOutdatedTypes(TArray<const FShaderType*>& OutdatedShaderTypes, TArray<const FShaderPipelineType*>& OutdatedShaderPipelineTypes, TArray<const FVertexFactoryType*>& OutdatedFactoryTypes)"
  },
  {
    "label": "SaveShaderStableKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveShaderStableKeys(EShaderPlatform TargetShaderPlatform)"
  },
  {
    "label": "GetFirstSection()",
    "kind": "Method",
    "detail": "Function (# endif const FGlobalShaderMapSection*)",
    "insertText": "GetFirstSection()"
  },
  {
    "label": "DECLARE_EXPORTED_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } private : TMap<FHashedName,FGlobalShaderMapSection*> SectionMap ; EShaderPlatform Platform ; } ; FGlobalShaderMap* GGlobalShaderMap [ SP_NumPlatforms ] ; class FGlobalShader : public FShader {)",
    "insertText": "DECLARE_EXPORTED_TYPE_LAYOUT(FGlobalShader, RENDERCORE_API, NonVirtual)"
  },
  {
    "label": "FGlobalShader()",
    "kind": "Method",
    "detail": "Function (public : using ShaderMetaType = FGlobalShaderType ; using FPermutationParameters = FGlobalShaderPermutationParameters ;)",
    "insertText": "FGlobalShader()"
  },
  {
    "label": "FGlobalShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGlobalShader(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (template<TViewUniformShaderParameters> void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FRHIUniformBuffer* ViewUniformBuffer)"
  },
  {
    "label": "FShaderUniformBufferParameter()",
    "kind": "Method",
    "detail": "Function (const auto& ViewUniformBufferParameter = static_cast<const)",
    "insertText": "FShaderUniformBufferParameter(GetUniformBufferParameter<TViewUniformShaderParameters>())"
  },
  {
    "label": "SetUniformBufferParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniformBufferParameter(BatchedParameters, ViewUniformBufferParameter, ViewUniformBuffer)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} using FShader::ShouldCompilePermutation ; using FShader::ShouldPrecachePermutation ; void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& Environment)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; } ; class FNULLPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FNULLPS,Global, RENDERCORE_API)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "FNULLPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNULLPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer): FGlobalShader(Initializer)"
  },
  {
    "label": "GetGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (} } ; FGlobalShaderMap*)",
    "insertText": "GetGlobalShaderMap(EShaderPlatform Platform)"
  },
  {
    "label": "GetGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (FGlobalShaderMap*)",
    "insertText": "GetGlobalShaderMap(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DECLARE_GLOBAL_SHADER(ShaderClass) DECLARE_SHADER_TYPE(ShaderClass, Global) #define DECLARE_EXPORTED_GLOBAL_SHADER(ShaderClass, RequiredAPI) DECLARE_EXPORTED_SHADER_TYPE(ShaderClass, Global, RequiredAPI) #define IMPLEMENT_GLOBAL_SHADER(ShaderClass,SourceFilename,FunctionName,Frequency) IMPLEMENT_SHADER_TYPE(,ShaderClass,TEXT(SourceFilename),TEXT(FunctionName),Frequency)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0,Resolve = 1<<0,Clear = 1<<1,Null = 1<<2 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERecursiveShader)"
  },
  {
    "label": "CreateRecursiveShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRecursiveShaders()"
  },
  {
    "label": "ForceInitGlobalShaderType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceInitGlobalShaderType(FShaderType& ShaderType)"
  },
  {
    "label": "ForceInitGlobalShaderType()",
    "kind": "Method",
    "detail": "Function (template<TShaderType> void)",
    "insertText": "ForceInitGlobalShaderType()"
  }
]