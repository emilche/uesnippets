[
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "FKeyDataOptimizationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDataOptimizationParams"
  },
  {
    "label": "FMovieSceneKeyHandleMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneKeyHandleMap"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FMovieSceneChannelData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelData"
  },
  {
    "label": "TMovieSceneChannelData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneChannelData"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneChannel . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreTypes . h \" # include \" Curves / KeyHandle . h \" # include \" Math / Range . h \" # include \" Math / RangeBound . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameTime . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / Class . h \" # include \" UObject / ObjectMacros . h \" # include \" MovieSceneChannelData . generated . h \" struct FFrameRate ; struct FKeyDataOptimizationParams ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FMovieSceneKeyHandleMap()"
  },
  {
    "label": "FMovieSceneKeyHandleMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneKeyHandleMap(const FMovieSceneKeyHandleMap& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneKeyHandleMap&)",
    "insertText": "operator(const FMovieSceneKeyHandleMap& RHS)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "EvaluateTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateTime(TArrayView<const FFrameNumber> InTimes, FFrameTime InTime, int32& OutIndex1, int32& OutIndex2, double& OutInterp)"
  },
  {
    "label": "FindRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindRange(TArrayView<const FFrameNumber> InTimes, FFrameNumber PredicateTime, FFrameNumber InTolerance, int32 MaxNum, int32& OutMin, int32& OutMax)"
  },
  {
    "label": "GetTimes()",
    "kind": "Method",
    "detail": "Function (} } struct FMovieSceneChannelData { TArrayView<const FFrameNumber>)",
    "insertText": "GetTimes()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIndex(FKeyHandle Handle)"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindKey(FFrameNumber InTime, FFrameNumber InTolerance = 0)"
  },
  {
    "label": "FindKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindKeys(FFrameNumber InTime, int32 MaxNum, int32& OutMinIndex, int32& OutMaxIndex, int32 InTolerance)"
  },
  {
    "label": "GetTotalRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetTotalRange()"
  },
  {
    "label": "ChangeFrameResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeFrameResolution(FFrameRate SourceRate, FFrameRate DestinationRate)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeys(const TRange<FFrameNumber>& WithinRange, TArray<FFrameNumber>* OutKeyTimes, TArray<FKeyHandle>* OutKeyHandles)"
  },
  {
    "label": "GetKeyTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyTimes(TArrayView<const FKeyHandle> InHandles, TArrayView<FFrameNumber> OutKeyTimes)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(FFrameNumber DeltaTime)"
  },
  {
    "label": "FMovieSceneChannelData()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FMovieSceneChannelData(FMovieSceneChannel* InChannel, TArray<FFrameNumber>* InTimes, FKeyHandleLookupTable* InKeyHandles)"
  },
  {
    "label": "MoveKeyInternal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MoveKeyInternal(int32 KeyIndex, FFrameNumber InNewTime)"
  },
  {
    "label": "AddKeyInternal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddKeyInternal(FFrameNumber InTime)"
  },
  {
    "label": "TMovieSceneChannelData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMovieSceneChannelData(TArray<FFrameNumber>* InTimes, TArray<ValueType>* InValues, FMovieSceneChannel* InChannel, FKeyHandleLookupTable* InKeyHandles) : FMovieSceneChannelData(InChannel, InTimes, InKeyHandles), Values(InValues)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (} operator TMovieSceneChannelData<const)",
    "insertText": "ValueType()"
  },
  {
    "label": "GetValues()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const ValueType>)",
    "insertText": "GetValues()"
  },
  {
    "label": "AddKeyInternal()",
    "kind": "Method",
    "detail": "Function (int32 KeyIndex =)",
    "insertText": "AddKeyInternal(InTime)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Values ->)",
    "insertText": "Insert(InValue, KeyIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<FKeyAddOrDeleteEventItem> Items ; Items .)",
    "insertText": "Add(FKeyAddOrDeleteEventItem(KeyIndex, InTime))"
  },
  {
    "label": "OnKeyAddedEvent()",
    "kind": "Method",
    "detail": "Function (OwningChannel ->)",
    "insertText": "OnKeyAddedEvent().Broadcast(OwningChannel, Items)"
  },
  {
    "label": "MoveKey()",
    "kind": "Method",
    "detail": "Function (} return KeyIndex ; } int32)",
    "insertText": "MoveKey(int32 KeyIndex, FFrameNumber NewTime)"
  },
  {
    "label": "MoveKeyInternal()",
    "kind": "Method",
    "detail": "Function (int32 NewIndex =)",
    "insertText": "MoveKeyInternal(KeyIndex, NewTime)"
  },
  {
    "label": "OldValue()",
    "kind": "Method",
    "detail": "Function (ValueType)",
    "insertText": "OldValue(*Values)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Values ->)",
    "insertText": "RemoveAt(KeyIndex, EAllowShrinking::No)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Values ->)",
    "insertText": "Insert(OldValue, NewIndex)"
  },
  {
    "label": "SetKeyTime()",
    "kind": "Method",
    "detail": "Function (} return NewIndex ; } int32)",
    "insertText": "SetKeyTime(int32 KeyIndex, FFrameNumber InNewTime)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveKey(int32 KeyIndex)"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (const FFrameNumber)",
    "insertText": "Time(*Times)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<FKeyAddOrDeleteEventItem> Items ; Items .)",
    "insertText": "Add(FKeyAddOrDeleteEventItem(KeyIndex, Time))"
  },
  {
    "label": "OnKeyDeletedEvent()",
    "kind": "Method",
    "detail": "Function (OwningChannel ->)",
    "insertText": "OnKeyDeletedEvent().Broadcast(OwningChannel, Items)"
  },
  {
    "label": "DeallocateHandle()",
    "kind": "Method",
    "detail": "Function (KeyHandles ->)",
    "insertText": "DeallocateHandle(KeyIndex)"
  },
  {
    "label": "UpdateOrAddKey()",
    "kind": "Method",
    "detail": "Function (} } FKeyHandle)",
    "insertText": "UpdateOrAddKey(FFrameNumber InTime, ParamType InValue)"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (int32 ExistingKey =)",
    "insertText": "FindKey(InTime)"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (} else { ExistingKey =)",
    "insertText": "AddKey(InTime, InValue)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetHandle(ExistingKey)"
  },
  {
    "label": "SetKeyTimes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeyTimes(TArrayView<const FKeyHandle> InHandles, TArrayView<const FFrameNumber> InKeyTimes)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (const int32 KeyIndex =)",
    "insertText": "GetIndex(InHandles[Index])"
  },
  {
    "label": "MoveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveKey(KeyIndex, InKeyTimes[Index])"
  },
  {
    "label": "DuplicateKeys()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DuplicateKeys(TArrayView<const FKeyHandle> InHandles, TArrayView<FKeyHandle> OutNewHandles)"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (OutNewHandles [ Index ] =)",
    "insertText": "Invalid()"
  },
  {
    "label": "KeyCopy()",
    "kind": "Method",
    "detail": "Function (} else { auto)",
    "insertText": "KeyCopy(*Values)"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (int32 NewKeyIndex =)",
    "insertText": "AddKey((*Times)[KeyIndex], MoveTemp(KeyCopy))"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (OutNewHandles [ Index ] =)",
    "insertText": "GetHandle(NewKeyIndex)"
  },
  {
    "label": "DeleteKeys()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DeleteKeys(TArrayView<const FKeyHandle> InHandles)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveKey(KeyIndex)"
  },
  {
    "label": "DeleteKeysFrom()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DeleteKeysFrom(FFrameNumber InTime, bool bDeleteKeysBefore)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (TArray<FFrameNumber> OutKeyTimes ; TArray<FKeyHandle> OutKeyHandles ;)",
    "insertText": "GetKeys(TRange<FFrameNumber>::All(), &OutKeyTimes, &OutKeyHandles)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FKeyHandle> KeysToRemove ;)",
    "insertText": "for(int32 Index = 0; Index < OutKeyTimes.Num(); ++Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KeysToRemove .)",
    "insertText": "Add(OutKeyHandles[Index])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(OutKeyTimes[Index] > InTime)"
  },
  {
    "label": "DeleteKeys()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "DeleteKeys(KeysToRemove)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FKeyAddOrDeleteEventItem> Items ;)",
    "insertText": "for(int32 Index = 0; Index < Times->Num(); ++Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Add(FKeyAddOrDeleteEventItem(Index, Time))"
  },
  {
    "label": "TMovieSceneChannelData()",
    "kind": "Method",
    "detail": "Function (} } private : TArray<ValueType>* Values ; } ; template<ValueType> struct TMovieSceneChannelData<const ValueType> { typedef TCallTraits<ValueType>::ParamType ParamType ;)",
    "insertText": "TMovieSceneChannelData(const TArray<FFrameNumber>* InTimes, const TArray<ValueType>* InValues) : Times(InTimes), Values(InValues)"
  },
  {
    "label": "FindRange()",
    "kind": "Method",
    "detail": "Function (int32 MinIndex = 0,MaxIndex = 0 ; UE::)",
    "insertText": "FindRange(*Times, InTime, InTolerance, 1, MinIndex, MaxIndex)"
  },
  {
    "label": "FindRange()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "FindRange(*Times, InTime, InTolerance, MaxNum, OutMinIndex, OutMaxIndex)"
  }
]