[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FSlateAttributeBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateAttributeBase"
  },
  {
    "label": "TSlateAttributeComparePredicate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateAttributeComparePredicate"
  },
  {
    "label": "TSlateAttributeFTextComparePredicate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateAttributeFTextComparePredicate"
  },
  {
    "label": "TSlateAttributeInvalidationReason",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateAttributeInvalidationReason"
  },
  {
    "label": "TSlateDeprecatedTAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateDeprecatedTAttribute"
  },
  {
    "label": "SourceType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SourceType"
  },
  {
    "label": "IsInvalidateWidgetReasonSupported()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Templates / EqualTo . h \" # include \" Widgets / InvalidateWidgetReason . h \" # include<type_traits> # ifndef UE_SLATE_WITH_MEMBER_ATTRIBUTE_DEBUGGING # define UE_SLATE_WITH_MEMBER_ATTRIBUTE_DEBUGGING 0 # endif # ifndef UE_SLATE_WITH_ATTRIBUTE_INITIALIZATION_ON_BIND # define UE_SLATE_WITH_ATTRIBUTE_INITIALIZATION_ON_BIND 0 # endif # ifndef UE_SLATE_WITH_ATTRIBUTE_NAN_DIAGNOSTIC # define UE_SLATE_WITH_ATTRIBUTE_NAN_DIAGNOSTIC DO_ENSURE # endif class SWidget ; struct FSlateAttributeBase { template<T> bool)",
    "insertText": "IsInvalidateWidgetReasonSupported(T Reason)"
  },
  {
    "label": "IdenticalTo()",
    "kind": "Method",
    "detail": "Function (} } ; template<ComparePredicate = TEqualTo<>> struct TSlateAttributeComparePredicate { template<ObjectType> bool)",
    "insertText": "IdenticalTo(const SWidget&, ObjectType&& Lhs, ObjectType&& Rhs)"
  },
  {
    "label": "IdenticalTo()",
    "kind": "Method",
    "detail": "Function (} } ; struct TSlateAttributeFTextComparePredicate { bool)",
    "insertText": "IdenticalTo(const SWidget&, const FText& Lhs, const FText& Rhs)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<EInvalidateWidgetReason InvalidationReason> struct TSlateAttributeInvalidationReason {)",
    "insertText": "static_assert(FSlateAttributeBase::IsInvalidateWidgetReasonSupported(InvalidationReason), \"The invalidation is not supported by the SlateAttribute.\")"
  },
  {
    "label": "GetInvalidationReason()",
    "kind": "Method",
    "detail": "Function (EInvalidateWidgetReason)",
    "insertText": "GetInvalidationReason(const SWidget&)"
  },
  {
    "label": "TSlateDeprecatedTAttribute()",
    "kind": "Method",
    "detail": "Function (using FGetter = TAttribute<ObjectType>::FGetter ; template<OtherType>)",
    "insertText": "TSlateDeprecatedTAttribute(const OtherType& InInitialValue)"
  },
  {
    "label": "TSlateDeprecatedTAttribute()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSlateDeprecatedTAttribute(ObjectType&& InInitialValue)"
  },
  {
    "label": "TSlateDeprecatedTAttribute()",
    "kind": "Method",
    "detail": "Function (} template<class SourceType>)",
    "insertText": "TSlateDeprecatedTAttribute(TSharedRef<SourceType> InUserObject, typename FGetter::template TConstMethodPtr< SourceType > InMethodPtr)"
  },
  {
    "label": "TSlateDeprecatedTAttribute()",
    "kind": "Method",
    "detail": "Function (} template<class SourceType>)",
    "insertText": "TSlateDeprecatedTAttribute(SourceType* InUserObject, typename FGetter::template TConstMethodPtr< SourceType > InMethodPtr)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const ObjectType&)",
    "insertText": "Get(const ObjectType& DefaultValue)"
  },
  {
    "label": "GetBinding()",
    "kind": "Method",
    "detail": "Function (ObjectType Temp ; return Temp ; } FGetter)",
    "insertText": "GetBinding()"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (} template<class SourceType> void)",
    "insertText": "Bind(SourceType* InUserObject, typename FGetter::template TConstMethodPtr< SourceType > InMethodPtr)"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBound()"
  }
]