[
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "UWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidget"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "UMGEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMGEDITOR_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IHasPropertyBindingExtensibility",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHasPropertyBindingExtensibility"
  },
  {
    "label": "CanExtend()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" Input / DragAndDrop . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" class IPropertyHandle ; class UWidget ; class UWidgetBlueprint ; struct FSlateBrush ; class IPropertyBindingExtension { public : enum class EDropResult { HandledContinue,HandledBreak,Unhandled,} ; bool)",
    "insertText": "CanExtend(const UWidgetBlueprint* WidgetBlueprint, const UWidget* Widget, const FProperty* Property)"
  },
  {
    "label": "CreateMenuExtender()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtender>)",
    "insertText": "CreateMenuExtender(const UWidgetBlueprint* WidgetBlueprint, UWidget* Widget, TSharedPtr<IPropertyHandle> WidgetPropertyHandle)"
  },
  {
    "label": "ClearCurrentValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCurrentValue(const UWidgetBlueprint* WidgetBlueprint, const UWidget* Widget, const FProperty* Property)"
  },
  {
    "label": "GetCurrentValue()",
    "kind": "Method",
    "detail": "Function (TOptional<FName>)",
    "insertText": "GetCurrentValue(const UWidgetBlueprint* WidgetBlueprint, const UWidget* Widget, const FProperty* Property)"
  },
  {
    "label": "GetCurrentIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetCurrentIcon(const UWidgetBlueprint* WidgetBlueprint, const UWidget* Widget, const FProperty* Property)"
  },
  {
    "label": "GetCurrentIconColor()",
    "kind": "Method",
    "detail": "Function (TOptional<FLinearColor>)",
    "insertText": "GetCurrentIconColor(const UWidgetBlueprint* WidgetBlueprint, const UWidget* Widget, const FProperty* Property)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (EDropResult)",
    "insertText": "OnDrop(const FGeometry& Geometry, const FDragDropEvent& DragDropEvent, UWidgetBlueprint* WidgetBlueprint, UWidget* Widget, TSharedPtr<IPropertyHandle> WidgetPropertyHandle)"
  },
  {
    "label": "AddExtension()",
    "kind": "Method",
    "detail": "Function (} ; class FPropertyBindingExtensibilityManager { public : void)",
    "insertText": "AddExtension(const TSharedRef<IPropertyBindingExtension>& Extension)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Extensions .)",
    "insertText": "AddUnique(Extension)"
  },
  {
    "label": "RemoveExtension()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveExtension(const TSharedRef<IPropertyBindingExtension>& Extension)"
  },
  {
    "label": "RemoveSingle()",
    "kind": "Method",
    "detail": "Function (Extensions .)",
    "insertText": "RemoveSingle(Extension)"
  },
  {
    "label": "GetExtensions()",
    "kind": "Method",
    "detail": "Function (} const TArray<TSharedPtr<IPropertyBindingExtension>>&)",
    "insertText": "GetExtensions()"
  }
]