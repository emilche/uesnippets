[
  {
    "label": "FCapsuleGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCapsuleGenerator"
  },
  {
    "label": "SphericalToCartesian()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshShapeGenerator . h \" # include \" OrientedBoxTypes . h \" # include \" Util / IndexUtil . h \" namespace UE { namespace Geometry { class FCapsuleGenerator : public FMeshShapeGenerator { public : double Radius = 1 . 0 ; double SegmentLength = 1 . 0 ; int NumHemisphereArcSteps = 5 ; int NumCircleSteps = 3 ; int NumSegmentSteps = 0 ; bool bPolygroupPerQuad = false ; private : FVector3d)",
    "insertText": "SphericalToCartesian(double r, double theta, double phi)"
  },
  {
    "label": "GenerateVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateVertices()"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (auto SetVertex = [)",
    "insertText": "this(int32 VtxIdx, FVector3d Pos, FVector3f Normal)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (Vertices [ VtxIdx ] = Pos ; Normals [ VtxIdx ] = Normal ; NormalParentVertex [ VtxIdx ] = VtxIdx ; } ; { const double Dphi = FMathd::HalfPi /)",
    "insertText": "double(NumHemisphereArcSteps - 1)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double Dtheta = FMathd::TwoPi /)",
    "insertText": "double(NumCircleSteps)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (int32 VtxIdx = 0 ; double Phi,Theta ; int32 p,t ; FVector3d)",
    "insertText": "Offset(0, 0, SegmentLength)"
  },
  {
    "label": "SphericalToCartesian()",
    "kind": "Method",
    "detail": "Function (FVector3d Normal =)",
    "insertText": "SphericalToCartesian(1., Theta, Phi)"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertex(VtxIdx, Normal * Radius + Offset, FVector3f(Normal))"
  },
  {
    "label": "SegStepSize()",
    "kind": "Method",
    "detail": "Function (} } double)",
    "insertText": "SegStepSize(double)(NumSegmentSteps + 1.0)"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "Normal(FMath::Cos(Theta), FMath::Sin(Theta), 0.0)"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertex(VtxIdx, Normal * Radius + Offset * (1 - SegAlong), FVector3f(Normal))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(p = 1, Phi = FMathd::HalfPi; p < NumHemisphereArcSteps; ++p, Phi += Dphi)"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertex(VtxIdx, Normal * Radius, FVector3f(Normal))"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "SetVertex(VtxIdx++, FVector3d::UnitZ() * Radius + Offset, FVector3f::UnitZ())"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertex(VtxIdx++, -FVector3d::UnitZ() * Radius, -FVector3f::UnitZ())"
  },
  {
    "label": "GenerateUVVertices()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GenerateUVVertices()"
  },
  {
    "label": "NumPhi()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumPhi(2 * NumHemisphereArcSteps + NumSegmentSteps)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float DUVtheta = - 1 . 0 f /)",
    "insertText": "float(NumCircleSteps)"
  },
  {
    "label": "DUVtheta()",
    "kind": "Method",
    "detail": "Function (int32 UVIdx = 0 ; auto AddUVSpan = [ this,& UVIdx,)",
    "insertText": "DUVtheta(int32 StepStart, int32 NumSteps, float PhiStart, float PhiStepSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float UVPhi = PhiStart ; int32 PIdx = StepStart ;)",
    "insertText": "for(; PIdx < StepStart + NumSteps; ++PIdx, UVPhi += PhiStepSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float UVTheta = 1 ;)",
    "insertText": "for(int32 t = 0; t < NumCircleSteps; ++t, ++UVIdx, UVTheta += DUVtheta)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (UVs [ UVIdx ] =)",
    "insertText": "FVector2f(UVTheta, UVPhi)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (UVParentVertex [ UVIdx ] = PIdx* NumCircleSteps ; + + UVIdx ; } return PIdx ; } ; const float PhiSpan = static_cast<)",
    "insertText": "float(2 * Radius + SegmentLength)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float HemisphereStepSize = static_cast<)",
    "insertText": "float(Radius) / (PhiSpan * static_cast<float>(NumHemisphereArcSteps - 1))"
  },
  {
    "label": "AddUVSpan()",
    "kind": "Method",
    "detail": "Function (int32 PIdx =)",
    "insertText": "AddUVSpan(1, NumHemisphereArcSteps - 1, HemisphereStepSize, HemisphereStepSize)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float SegmentStepSize = static_cast<)",
    "insertText": "float(SegmentLength) / (PhiSpan * static_cast<float>(NumSegmentSteps + 1))"
  },
  {
    "label": "AddUVSpan()",
    "kind": "Method",
    "detail": "Function (PIdx =)",
    "insertText": "AddUVSpan(PIdx, NumSegmentSteps, static_cast<float>(Radius) / PhiSpan + SegmentStepSize, SegmentStepSize)"
  },
  {
    "label": "AddUVSpan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUVSpan(PIdx, NumHemisphereArcSteps - 1, static_cast<float>(Radius + SegmentLength) / PhiSpan, HemisphereStepSize)"
  },
  {
    "label": "NorthPoleVtxIdx()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NorthPoleVtxIdx(NumPhi - 2 + NumSegmentSteps)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float UVTheta ; int32 t ;)",
    "insertText": "for(t = 0, UVTheta = 1 + DUVtheta; t < NumCircleSteps; ++t, ++UVIdx, UVTheta += DUVtheta)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (UVs [ UVIdx ] =)",
    "insertText": "FVector2f(UVTheta, 0.0)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (UVs [ UVIdx ] =)",
    "insertText": "FVector2f(UVTheta, 1.0)"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (UVParentVertex [ UVIdx ] = SouthPoleVtxIdx ; } } using CornerIndices = FVector3i ; void)",
    "insertText": "OutputTriangle(int TriIdx, int PolyIdx, CornerIndices Corners, CornerIndices UVCorners)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangle(TriIdx, Corners.X, Corners.Y, Corners.Z)"
  },
  {
    "label": "SetTrianglePolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrianglePolygon(TriIdx, PolyIdx)"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVs(TriIdx, UVCorners.X, UVCorners.Y, UVCorners.Z)"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(TriIdx, Corners.X, Corners.Y, Corners.Z)"
  },
  {
    "label": "OutputEquatorialTriangles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OutputEquatorialTriangles()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 TriIdx = 0,PolyIdx = 0 ; int32 Corners [ 4 ] = { 0,1,NumCircleSteps + 1,NumCircleSteps } ; int32 UVCorners [ 4 ] = { 0,1,NumCircleSteps + 2,NumCircleSteps + 1 } ;)",
    "insertText": "for(int32 p = 1; p < NumPhi - 2; ++p)"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputTriangle(TriIdx++, PolyIdx, {Corners[0], Corners[1], Corners[2]}, {UVCorners[0], UVCorners[1], UVCorners[2]})"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputTriangle(TriIdx++, PolyIdx, {Corners[2], Corners[3], Corners[0]}, {UVCorners[2], UVCorners[3], UVCorners[0]})"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (PolyIdx + + ; } })",
    "insertText": "OutputTriangle(TriIdx++, PolyIdx, {Corners[0], Corners[1] - NumCircleSteps, Corners[2] - NumCircleSteps}, {UVCorners[0] , UVCorners[1], UVCorners[2] })"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputTriangle(TriIdx++, PolyIdx, {Corners[2] - NumCircleSteps, Corners[3], Corners[0]}, {UVCorners[2], UVCorners[3], UVCorners[0]})"
  },
  {
    "label": "OutputPolarTriangles()",
    "kind": "Method",
    "detail": "Function (PolyIdx + + ; } } } void)",
    "insertText": "OutputPolarTriangles()"
  },
  {
    "label": "NumEquatorialVtx()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumEquatorialVtx(NumPhi - 2)"
  },
  {
    "label": "NumEquatorialUVVtx()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumEquatorialUVVtx(NumPhi - 2) * (NumCircleSteps + 1)"
  },
  {
    "label": "PolyIdx()",
    "kind": "Method",
    "detail": "Function (const int32 NorthPoleVtxIdx = NumEquatorialVtx ; const int32 SouthPoleVtxIdx = NumEquatorialVtx + 1 ; int32)",
    "insertText": "PolyIdx(NumCircleSteps * (NumPhi - 3))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 TriIdx = PolyIdx* 2 ;)",
    "insertText": "if(bPolygroupPerQuad == false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (PolyIdx = 0 ; })",
    "insertText": "for(int32 t = 0; t < NumCircleSteps; ++t)"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputTriangle(TriIdx++, PolyIdx, {t, NorthPoleVtxIdx, (t + 1) % NumCircleSteps}, {t, NumEquatorialUVVtx + t, t + 1})"
  },
  {
    "label": "NumEquatorialUVVtx()",
    "kind": "Method",
    "detail": "Function (PolyIdx + + ; } } const int32 Offset = NumEquatorialVtx - NumCircleSteps ; const int32 OffsetUV =)",
    "insertText": "NumEquatorialUVVtx(NumCircleSteps + 1)"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputTriangle(TriIdx++, PolyIdx, {t + Offset, ((t + 1) % NumCircleSteps) + Offset, SouthPoleVtxIdx}, {t + OffsetUV, t + 1 + OffsetUV , NumEquatorialUVVtx + NumCircleSteps + t})"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (PolyIdx + + ; } } } public : FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (NumHemisphereArcSteps =)",
    "insertText": "Max(NumHemisphereArcSteps, 2)"
  },
  {
    "label": "NumPhi()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumPhi(2 * NumHemisphereArcSteps)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (NumCircleSteps =)",
    "insertText": "Max(NumCircleSteps, 3)"
  },
  {
    "label": "NumVertices()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumVertices(NumPhi - 2 + NumSegmentSteps)"
  },
  {
    "label": "NumUVs()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumUVs(NumPhi - 2 + NumSegmentSteps) * (NumCircleSteps + 1) + (2 * NumCircleSteps)"
  },
  {
    "label": "NumTris()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumTris(NumPhi - 2 + NumSegmentSteps)"
  },
  {
    "label": "SetBufferSizes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferSizes(NumVertices, NumTris, NumUVs, NumVertices)"
  }
]