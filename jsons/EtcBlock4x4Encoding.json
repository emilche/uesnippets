[
  {
    "label": "Block4x4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4"
  },
  {
    "label": "Block4x4Encoding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4Encoding"
  },
  {
    "label": "Block4x4Encoding()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EtcColorFloatRGBA . h \" # include \" EtcErrorMetric . h \" # include<assert . h> # include<float . h> namespace Etc { class Block4x4 ; class Block4x4Encoding { public : const unsigned int ROWS = 4 ; const unsigned int COLUMNS = 4 ; const unsigned int PIXELS = ROWS* COLUMNS ; const float LUMA_WEIGHT ; const float CHROMA_BLUE_WEIGHT ; typedef enum { MODE_UNKNOWN,MODE_ETC1,MODE_T,MODE_H,MODE_PLANAR,MODE_R11,MODE_RG11,MODES } Mode ;)",
    "insertText": "Block4x4Encoding(void)"
  },
  {
    "label": "InitFromSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitFromSource(Block4x4 *a_pblockParent, ColorFloatRGBA *a_pafrgbaSource, unsigned char *a_paucEncodingBits, ErrorMetric a_errormetric)"
  },
  {
    "label": "InitFromEncodingBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromEncodingBits(Block4x4 *a_pblockParent, unsigned char *a_paucEncodingBits, ColorFloatRGBA *a_pafrgbaSource, ErrorMetric a_errormetric)"
  },
  {
    "label": "PerformIteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformIteration(float a_fEffort)"
  },
  {
    "label": "CalcBlockError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcBlockError(void)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetError(void)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(m_fError >= 0.0f)"
  },
  {
    "label": "GetFlip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFlip(void)"
  },
  {
    "label": "IsDifferential()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDifferential(void)"
  },
  {
    "label": "HasSeverelyBentDifferentialColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSeverelyBentDifferentialColors(void)"
  },
  {
    "label": "GetMode()",
    "kind": "Method",
    "detail": "Function (Mode)",
    "insertText": "GetMode(void)"
  },
  {
    "label": "CalcPixelError()",
    "kind": "Method",
    "detail": "Function (m_boolDone = true ; } } float)",
    "insertText": "CalcPixelError(ColorFloatRGBA a_frgbaDecodedColor, float a_fDecodedAlpha, ColorFloatRGBA a_frgbaSourcePixel)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Init(Block4x4 *a_pblockParent, ColorFloatRGBA *a_pafrgbaSource, ErrorMetric a_errormetric)"
  }
]