[
  {
    "label": "BasicTTIImplBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicTTIImplBase"
  },
  {
    "label": "BasicTTIImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicTTIImpl"
  },
  {
    "label": "getScalarizationOverhead()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_BASICTTIIMPL_H # define LLVM_CODEGEN_BASICTTIIMPL_H # include \" llvm / Analysis / LoopInfo . h \" # include \" llvm / Analysis / TargetTransformInfoImpl . h \" # include \" llvm / Support / CommandLine . h \" # include \" llvm / Target / TargetLowering . h \" # include \" llvm / Target / TargetSubtargetInfo . h \" # include \" llvm / Analysis / TargetLibraryInfo . h \" namespace llvm { cl::opt<unsigned> PartialUnrollingThreshold ; template<T> class BasicTTIImplBase : public TargetTransformInfoImplCRTPBase<T> { private : typedef TargetTransformInfoImplCRTPBase<T> BaseT ; typedef TargetTransformInfo TTI ; unsigned)",
    "insertText": "getScalarizationOverhead(Type *Ty, bool Insert, bool Extract)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Ty->isVectorTy() && \"Can only scalarize vectors\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned Cost = 0 ;)",
    "insertText": "for(int i = 0, e = Ty->getVectorNumElements(); i < e; ++i)"
  },
  {
    "label": "getAltShuffleOverhead()",
    "kind": "Method",
    "detail": "Function (} return Cost ; } unsigned)",
    "insertText": "getAltShuffleOverhead(Type *Ty)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Ty->isVectorTy() && \"Can only shuffle vectors\")"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Cost + = static_cast<)",
    "insertText": "T(this) ->getVectorInstrCost(Instruction::InsertElement, Ty, i)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Cost + = static_cast<)",
    "insertText": "T(this) ->getVectorInstrCost(Instruction::ExtractElement, Ty, i)"
  },
  {
    "label": "getST()",
    "kind": "Method",
    "detail": "Function (} return Cost ; } const TargetSubtargetInfo*)",
    "insertText": "getST()"
  },
  {
    "label": "getTLI()",
    "kind": "Method",
    "detail": "Function (} const TargetLoweringBase*)",
    "insertText": "getTLI()"
  },
  {
    "label": "BasicTTIImplBase()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "BasicTTIImplBase(const TargetMachine *TM, const DataLayout &DL) : BaseT(DL)"
  },
  {
    "label": "BasicTTIImplBase()",
    "kind": "Method",
    "detail": "Function (} using TargetTransformInfoImplBase::DL ; public :)",
    "insertText": "BasicTTIImplBase(const BasicTTIImplBase &Arg) : BaseT(static_cast<const BaseT &>(Arg))"
  },
  {
    "label": "BasicTTIImplBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicTTIImplBase(BasicTTIImplBase &&Arg) : BaseT(std::move(static_cast<BaseT &>(Arg)))"
  },
  {
    "label": "hasBranchDivergence()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasBranchDivergence()"
  },
  {
    "label": "isLegalICmpImmediate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLegalICmpImmediate(int64_t imm)"
  },
  {
    "label": "isLegalAddressingMode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLegalAddressingMode(Type *Ty, GlobalValue *BaseGV, int64_t BaseOffset, bool HasBaseReg, int64_t Scale, unsigned AddrSpace)"
  },
  {
    "label": "getTLI()",
    "kind": "Method",
    "detail": "Function (TargetLoweringBase::AddrMode AM ; AM . BaseGV = BaseGV ; AM . BaseOffs = BaseOffset ; AM . HasBaseReg = HasBaseReg ; AM . Scale = Scale ; return)",
    "insertText": "getTLI()->isLegalAddressingMode(DL, AM, Ty, AddrSpace)"
  },
  {
    "label": "getScalingFactorCost()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getScalingFactorCost(Type *Ty, GlobalValue *BaseGV, int64_t BaseOffset, bool HasBaseReg, int64_t Scale, unsigned AddrSpace)"
  },
  {
    "label": "getTLI()",
    "kind": "Method",
    "detail": "Function (TargetLoweringBase::AddrMode AM ; AM . BaseGV = BaseGV ; AM . BaseOffs = BaseOffset ; AM . HasBaseReg = HasBaseReg ; AM . Scale = Scale ; return)",
    "insertText": "getTLI()->getScalingFactorCost(DL, AM, Ty, AddrSpace)"
  },
  {
    "label": "isTruncateFree()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isTruncateFree(Type *Ty1, Type *Ty2)"
  },
  {
    "label": "isProfitableToHoist()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isProfitableToHoist(Instruction *I)"
  },
  {
    "label": "isTypeLegal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isTypeLegal(Type *Ty)"
  },
  {
    "label": "getTLI()",
    "kind": "Method",
    "detail": "Function (EVT VT =)",
    "insertText": "getTLI()->getValueType(DL, Ty)"
  },
  {
    "label": "getIntrinsicCost()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getIntrinsicCost(Intrinsic::ID IID, Type *RetTy, ArrayRef<const Value *> Arguments)"
  },
  {
    "label": "getIntrinsicCost()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getIntrinsicCost(Intrinsic::ID IID, Type *RetTy, ArrayRef<Type *> ParamTys)"
  },
  {
    "label": "getJumpBufAlignment()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getJumpBufAlignment()"
  },
  {
    "label": "getJumpBufSize()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getJumpBufSize()"
  },
  {
    "label": "shouldBuildLookupTables()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "shouldBuildLookupTables()"
  },
  {
    "label": "haveFastSqrt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "haveFastSqrt(Type *Ty)"
  },
  {
    "label": "getValueType()",
    "kind": "Method",
    "detail": "Function (EVT VT = TLI ->)",
    "insertText": "getValueType(DL, Ty)"
  },
  {
    "label": "getFPOpCost()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getFPOpCost(Type *Ty)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (default : break ; case Instruction::Trunc : {)",
    "insertText": "if(TLI->isTruncateFree(OpTy, Ty))"
  },
  {
    "label": "getUnrollingPreferences()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getUnrollingPreferences(Loop *L, TTI::UnrollingPreferences &UP)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (BasicBlock* BB =* I ;)",
    "insertText": "for(BasicBlock::iterator J = BB->begin(), JE = BB->end(); J != JE; ++J) if (isa<CallInst>(J) || isa<InvokeInst>(J))"
  },
  {
    "label": "CS()",
    "kind": "Method",
    "detail": "Function (ImmutableCallSite)",
    "insertText": "CS(J)"
  },
  {
    "label": "getNumberOfRegisters()",
    "kind": "Method",
    "detail": "Function (} return ; } } UP . Partial = UP . Runtime = true ; UP . PartialThreshold = UP . PartialOptSizeThreshold = MaxOps ; } unsigned)",
    "insertText": "getNumberOfRegisters(bool Vector)"
  },
  {
    "label": "InstructionOpcodeToISD()",
    "kind": "Method",
    "detail": "Function (int ISD = TLI ->)",
    "insertText": "InstructionOpcodeToISD(Opcode)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ISD && \"Invalid opcode\")"
  },
  {
    "label": "getTypeLegalizationCost()",
    "kind": "Method",
    "detail": "Function (std::pair<unsigned,MVT> LT = TLI ->)",
    "insertText": "getTypeLegalizationCost(DL, Ty)"
  },
  {
    "label": "getScalarType()",
    "kind": "Method",
    "detail": "Function (bool IsFloat = Ty ->)",
    "insertText": "getScalarType()->isFloatingPointTy()"
  },
  {
    "label": "OpCost()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "OpCost(IsFloat ? 2 : 1)"
  },
  {
    "label": "getVectorNumElements()",
    "kind": "Method",
    "detail": "Function (unsigned Num = Ty ->)",
    "insertText": "getVectorNumElements()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (unsigned Cost = static_cast<)",
    "insertText": "T(this) ->getArithmeticInstrCost(Opcode, Ty->getScalarType())"
  },
  {
    "label": "getShuffleCost()",
    "kind": "Method",
    "detail": "Function (} return OpCost ; } unsigned)",
    "insertText": "getShuffleCost(TTI::ShuffleKind Kind, Type *Tp, int Index, Type *SubTp)"
  },
  {
    "label": "getCastInstrCost()",
    "kind": "Method",
    "detail": "Function (} return 1 ; } unsigned)",
    "insertText": "getCastInstrCost(unsigned Opcode, Type *Dst, Type *Src)"
  },
  {
    "label": "getTypeLegalizationCost()",
    "kind": "Method",
    "detail": "Function (std::pair<unsigned,MVT> SrcLT = TLI ->)",
    "insertText": "getTypeLegalizationCost(DL, Src)"
  },
  {
    "label": "getTypeLegalizationCost()",
    "kind": "Method",
    "detail": "Function (std::pair<unsigned,MVT> DstLT = TLI ->)",
    "insertText": "getTypeLegalizationCost(DL, Dst)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Opcode == Instruction::Trunc && TLI->isTruncateFree(SrcLT.second, DstLT.second))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (unsigned Cost = static_cast<)",
    "insertText": "T(this)->getCastInstrCost( Opcode, Dst->getScalarType(), Src->getScalarType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Opcode == Instruction::BitCast) return (Src->isVectorTy() ? getScalarizationOverhead(Src, false, true) : 0) + (Dst->isVectorTy() ? getScalarizationOverhead(Dst, true, false) : 0)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "llvm_unreachable(\"Unhandled cast\")"
  },
  {
    "label": "getCFInstrCost()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getCFInstrCost(unsigned Opcode)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(CondTy && \"CondTy must exist\")"
  },
  {
    "label": "getTypeLegalizationCost()",
    "kind": "Method",
    "detail": "Function (} std::pair<unsigned,MVT> LT = TLI ->)",
    "insertText": "getTypeLegalizationCost(DL, ValTy)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (unsigned Cost = static_cast<)",
    "insertText": "T(this)->getCmpSelInstrCost( Opcode, ValTy->getScalarType(), CondTy)"
  },
  {
    "label": "getVectorInstrCost()",
    "kind": "Method",
    "detail": "Function (} return 1 ; } unsigned)",
    "insertText": "getVectorInstrCost(unsigned Opcode, Type *Val, unsigned Index)"
  },
  {
    "label": "getTLI()",
    "kind": "Method",
    "detail": "Function (std::pair<unsigned,MVT> LT =)",
    "insertText": "getTLI()->getTypeLegalizationCost(DL, Val->getScalarType())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Src->isVoidTy() && \"Invalid type\")"
  },
  {
    "label": "getTLI()",
    "kind": "Method",
    "detail": "Function (std::pair<unsigned,MVT> LT =)",
    "insertText": "getTLI()->getTypeLegalizationCost(DL, Src)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned Cost = LT . first ;)",
    "insertText": "if(Src->isVectorTy() && Src->getPrimitiveSizeInBits() < LT.second.getSizeInBits())"
  },
  {
    "label": "getTLI()",
    "kind": "Method",
    "detail": "Function (TargetLowering::LegalizeAction LA = TargetLowering::Expand ; EVT MemVT =)",
    "insertText": "getTLI()->getValueType(DL, Src, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(LA != TargetLowering::Legal && LA != TargetLowering::Custom)"
  },
  {
    "label": "getScalarizationOverhead()",
    "kind": "Method",
    "detail": "Function (Cost + =)",
    "insertText": "getScalarizationOverhead(Src, Opcode != Instruction::Store, Opcode == Instruction::Store)"
  },
  {
    "label": "getInterleavedMemoryOpCost()",
    "kind": "Method",
    "detail": "Function (} } return Cost ; } unsigned)",
    "insertText": "getInterleavedMemoryOpCost(unsigned Opcode, Type *VecTy, unsigned Factor, ArrayRef<unsigned> Indices, unsigned Alignment, unsigned AddressSpace)"
  },
  {
    "label": "VectorType()",
    "kind": "Method",
    "detail": "Function (VectorType* VT = dyn_cast<)",
    "insertText": "VectorType(VecTy)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(VT && \"Expect a vector type for interleaved memory op\")"
  },
  {
    "label": "getNumElements()",
    "kind": "Method",
    "detail": "Function (unsigned NumElts = VT ->)",
    "insertText": "getNumElements()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Factor > 1 && NumElts % Factor == 0 && \"Invalid interleave factor\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (unsigned NumSubElts = NumElts / Factor ; VectorType* SubVT =)",
    "insertText": "get(VT->getElementType(), NumSubElts)"
  },
  {
    "label": "getMemoryOpCost()",
    "kind": "Method",
    "detail": "Function (unsigned Cost =)",
    "insertText": "getMemoryOpCost(Opcode, VecTy, Alignment, AddressSpace)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Indices.size() <= Factor && \"Interleaved memory op has too many members\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Index < Factor && \"Invalid index for interleaved memory op\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} unsigned InsSubCost = 0 ;)",
    "insertText": "for(unsigned i = 0; i < NumSubElts; i++) InsSubCost += getVectorInstrCost(Instruction::InsertElement, SubVT, i)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (Cost + = Indices .)",
    "insertText": "size()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { unsigned ExtSubCost = 0 ;)",
    "insertText": "for(unsigned i = 0; i < NumSubElts; i++) ExtSubCost += getVectorInstrCost(Instruction::ExtractElement, SubVT, i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Cost + = Factor* ExtSubCost ;)",
    "insertText": "for(unsigned i = 0; i < NumElts; i++) Cost += getVectorInstrCost(Instruction::InsertElement, VT, i)"
  },
  {
    "label": "getIntrinsicInstrCost()",
    "kind": "Method",
    "detail": "Function (} return Cost ; } unsigned)",
    "insertText": "getIntrinsicInstrCost(Intrinsic::ID IID, Type *RetTy, ArrayRef<Type *> Tys)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (unsigned ISD = 0 ;)",
    "insertText": "switch(IID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (default : { unsigned ScalarizationCost = 0 ; unsigned ScalarCalls = 1 ; Type* ScalarRetTy = RetTy ;)",
    "insertText": "if(RetTy->isVectorTy())"
  },
  {
    "label": "getScalarizationOverhead()",
    "kind": "Method",
    "detail": "Function (ScalarizationCost =)",
    "insertText": "getScalarizationOverhead(RetTy, true, false)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (ScalarCalls =)",
    "insertText": "max(ScalarCalls, RetTy->getVectorNumElements())"
  },
  {
    "label": "getScalarType()",
    "kind": "Method",
    "detail": "Function (ScalarRetTy = RetTy ->)",
    "insertText": "getScalarType()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} SmallVector<Type*,4> ScalarTys ;)",
    "insertText": "for(unsigned i = 0, ie = Tys.size(); i != ie; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Type* Ty = Tys [ i ] ;)",
    "insertText": "if(Ty->isVectorTy())"
  },
  {
    "label": "getScalarizationOverhead()",
    "kind": "Method",
    "detail": "Function (ScalarizationCost + =)",
    "insertText": "getScalarizationOverhead(Ty, false, true)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (ScalarCalls =)",
    "insertText": "max(ScalarCalls, Ty->getVectorNumElements())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} ScalarTys .)",
    "insertText": "push_back(Ty)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ScalarCalls == 1)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (unsigned ScalarCost = static_cast<)",
    "insertText": "T(this)->getIntrinsicInstrCost( IID, ScalarRetTy, ScalarTys)"
  },
  {
    "label": "getTypeLegalizationCost()",
    "kind": "Method",
    "detail": "Function (std::pair<unsigned,MVT> LT = TLI ->)",
    "insertText": "getTypeLegalizationCost(DL, RetTy)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Type* Ty = Tys [ i ] ;)",
    "insertText": "if(Ty->isVectorTy()) Ty = Ty->getScalarType()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} unsigned ScalarCost = static_cast<)",
    "insertText": "T(this)->getIntrinsicInstrCost( IID, RetTy->getScalarType(), ScalarTys)"
  },
  {
    "label": "getScalarizationOverhead()",
    "kind": "Method",
    "detail": "Function (ScalarizationCost + =)",
    "insertText": "getScalarizationOverhead(Tys[i], false, true)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (ScalarCalls =)",
    "insertText": "max(ScalarCalls, Tys[i]->getVectorNumElements())"
  },
  {
    "label": "getCallInstrCost()",
    "kind": "Method",
    "detail": "Function (} } return ScalarCalls* ScalarCost + ScalarizationCost ; } return 1 0 ; } unsigned)",
    "insertText": "getCallInstrCost(Function *F, Type *RetTy, ArrayRef<Type *> Tys)"
  },
  {
    "label": "getTLI()",
    "kind": "Method",
    "detail": "Function (std::pair<unsigned,MVT> LT =)",
    "insertText": "getTLI()->getTypeLegalizationCost(DL, Tp)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Ty->isVectorTy() && \"Expect a vector type\")"
  },
  {
    "label": "Log2_32()",
    "kind": "Method",
    "detail": "Function (unsigned NumReduxLevels =)",
    "insertText": "Log2_32(NumVecElts)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (unsigned ArithCost = NumReduxLevels* static_cast<)",
    "insertText": "T(this)->getArithmeticInstrCost(Opcode, Ty)"
  },
  {
    "label": "NumReduxLevels()",
    "kind": "Method",
    "detail": "Function (unsigned ShuffleCost =)",
    "insertText": "NumReduxLevels(IsPairwise + 1) * static_cast<T *>(this) ->getShuffleCost(TTI::SK_ExtractSubvector, Ty, NumVecElts / 2, Ty)"
  },
  {
    "label": "BasicTTIImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BasicTTIImpl(const BasicTTIImpl &Arg) : BaseT(static_cast<const BaseT &>(Arg)), ST(Arg.ST), TLI(Arg.TLI)"
  },
  {
    "label": "BasicTTIImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicTTIImpl(BasicTTIImpl &&Arg) : BaseT(std::move(static_cast<BaseT &>(Arg))), ST(std::move(Arg.ST)), TLI(std::move(Arg.TLI))"
  }
]