[
  {
    "label": "FManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManager"
  },
  {
    "label": "FRetryDomains",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRetryDomains"
  },
  {
    "label": "FExponentialBackoffCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExponentialBackoffCurve"
  },
  {
    "label": "FRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequest"
  },
  {
    "label": "FRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequest"
  },
  {
    "label": "EStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EStatus"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManager"
  },
  {
    "label": "FManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManager"
  },
  {
    "label": "FHttpRetrySystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpRetrySystem"
  },
  {
    "label": "FRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequest"
  },
  {
    "label": "FHttpRetryRequestEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpRetryRequestEntry"
  },
  {
    "label": "FHttpLogVerbosityTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpLogVerbosityTracker"
  },
  {
    "label": "TZero()",
    "kind": "Method",
    "detail": "Function (IntrinsicType)",
    "insertText": "TZero()"
  },
  {
    "label": "RetryLimitCount()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RetryLimitCount(0)"
  },
  {
    "label": "RetryTimeoutRelativeSeconds()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RetryTimeoutRelativeSeconds(0.0)"
  },
  {
    "label": "ReadThrottledTimeFromResponseInSeconds()",
    "kind": "Method",
    "detail": "Function (HTTP_API)",
    "insertText": "ReadThrottledTimeFromResponseInSeconds(FHttpResponsePtr Response)"
  },
  {
    "label": "HttpOnRequestProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpOnRequestProgress(FHttpRequestPtr InHttpRequest, uint64 BytesSent, uint64 BytesRcv)"
  },
  {
    "label": "HttpOnProcessRequestComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpOnProcessRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpOnStatusCodeReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpOnStatusCodeReceived(FHttpRequestPtr Request, int32 StatusCode)"
  },
  {
    "label": "HttpOnHeaderReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpOnHeaderReceived(FHttpRequestPtr Request, const FString& HeaderName, const FString& NewHeaderValue)"
  },
  {
    "label": "SetUrlFromRetryDomains()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUrlFromRetryDomains()"
  },
  {
    "label": "MoveToNextRetryDomain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveToNextRetryDomain()"
  },
  {
    "label": "BindAdaptorDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindAdaptorDelegates()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update(uint32* FileCount = NULL, uint32* FailingCount = NULL, uint32* FailedCount = NULL, uint32* CompletedCount = NULL)"
  },
  {
    "label": "BlockUntilFlushed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockUntilFlushed(float TimeoutSec)"
  },
  {
    "label": "FHttpLogVerbosityTracker()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FHttpLogVerbosityTracker()"
  },
  {
    "label": "IncrementRetriedRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementRetriedRequests()"
  },
  {
    "label": "DecrementRetriedRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementRetriedRequests()"
  },
  {
    "label": "UpdateSettingsFromConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSettingsFromConfig()"
  },
  {
    "label": "OnConfigSectionsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConfigSectionsChanged(const FString& IniFilename, const TSet<FString>& SectionName)"
  },
  {
    "label": "ProcessRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessRequest(TSharedRef<FRequest, ESPMode::ThreadSafe>& HttpRequest)"
  },
  {
    "label": "CancelRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRequest(TSharedRef<FRequest, ESPMode::ThreadSafe>& HttpRequest)"
  },
  {
    "label": "ShouldRetry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRetry(const FHttpRetryRequestEntry& HttpRetryRequestEntry)"
  },
  {
    "label": "CanRetry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRetry(const FHttpRetryRequestEntry& HttpRetryRequestEntry)"
  },
  {
    "label": "HasTimedOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTimedOut(const FHttpRetryRequestEntry& HttpRetryRequestEntry, const double NowAbsoluteSeconds)"
  },
  {
    "label": "RetryHttpRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetryHttpRequest(FHttpRetryRequestEntry& RequestEntry)"
  },
  {
    "label": "RetryHttpRequestWithDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetryHttpRequestWithDelay(FManager::FHttpRetryRequestEntry& RequestEntry, float InDelay, bool bWasSucceeded)"
  },
  {
    "label": "HttpRequestTimeoutAfterDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpRequestTimeoutAfterDelay(FManager::FHttpRetryRequestEntry& RequestEntry, bool bWasSucceeded, float Delay)"
  },
  {
    "label": "GetLockoutPeriodSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLockoutPeriodSeconds(const FHttpRetryRequestEntry& HttpRetryRequestEntry)"
  },
  {
    "label": "RetryLimitForConnectionErrorIsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RetryLimitForConnectionErrorIsSet(const FHttpRetryRequestEntry& HttpRetryRequestEntry)"
  },
  {
    "label": "CanRetryForConnectionError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRetryForConnectionError(const FHttpRetryRequestEntry& HttpRetryRequestEntry)"
  },
  {
    "label": "CanRetryInGeneral()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRetryInGeneral(const FHttpRetryRequestEntry& HttpRetryRequestEntry)"
  }
]