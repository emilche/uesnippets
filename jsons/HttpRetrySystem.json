[
  {
    "label": "FManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManager"
  },
  {
    "label": "FRetryDomains",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRetryDomains"
  },
  {
    "label": "FExponentialBackoffCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExponentialBackoffCurve"
  },
  {
    "label": "FRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequest"
  },
  {
    "label": "EStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EStatus"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FHttpRetrySystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpRetrySystem"
  },
  {
    "label": "FHttpRetryRequestEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpRetryRequestEntry"
  },
  {
    "label": "FHttpLogVerbosityTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpLogVerbosityTracker"
  },
  {
    "label": "RetryLimitCount()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformMath . h \" # include \" HttpRequestAdapter . h \" # include \" Interfaces / IHttpRequest . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / Optional . h \" # include \" Templates / Atomic . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" namespace FHttpRetrySystem { class FManager ; typedef uint32 RetryLimitCountType ; typedef double RetryTimeoutRelativeSecondsType ; RetryLimitCountType)",
    "insertText": "RetryLimitCount(uint32 Value)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (template<> float TZero<)",
    "insertText": "float()"
  },
  {
    "label": "RetryTimeoutRelativeSecondsType()",
    "kind": "Method",
    "detail": "Function (} template<> RetryTimeoutRelativeSecondsType TZero<)",
    "insertText": "RetryTimeoutRelativeSecondsType()"
  },
  {
    "label": "FRetryDomains()",
    "kind": "Method",
    "detail": "Function (} typedef TOptional<float> FRandomFailureRateSetting ; typedef TOptional<RetryLimitCountType> FRetryLimitCountSetting ; typedef TOptional<RetryTimeoutRelativeSecondsType> FRetryTimeoutRelativeSecondsSetting ; typedef TSet<int32> FRetryResponseCodes ; typedef TSet<FName> FRetryVerbs ; struct FRetryDomains {)",
    "insertText": "FRetryDomains(TArray<FString>&& InDomains) : Domains(MoveTemp(InDomains)) , ActiveIndex(0)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} const TArray<FString> Domains ; TAtomic<int32> ActiveIndex ; } ; typedef TSharedPtr<FRetryDomains,ESPMode::ThreadSafe> FRetryDomainsPtr ; struct FExponentialBackoffCurve { float Base = 2 . 0 f ; float ExponentBias = 1 . 0 f ; float MinCoefficient = 0 . 5 f ; float MaxCoefficient = 1 . 0 f ; float MaxBackoffSeconds = 6 0 . 0 f ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Compute(uint32 RetryNumber)"
  },
  {
    "label": "ReadThrottledTimeFromResponseInSeconds()",
    "kind": "Method",
    "detail": "Function (} ; TOptional<double>)",
    "insertText": "ReadThrottledTimeFromResponseInSeconds(FHttpResponsePtr Response)"
  },
  {
    "label": "ProcessRequest()",
    "kind": "Method",
    "detail": "Function (} ; namespace FHttpRetrySystem { class FRequest : public FHttpRequestAdapterBase { public : struct EStatus { enum Type { NotStarted = 0,Processing,ProcessingLockout,Cancelled,FailedRetry,FailedTimeout,Succeeded } ; } ; public : bool)",
    "insertText": "ProcessRequest()"
  },
  {
    "label": "CancelRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRequest()"
  },
  {
    "label": "GetRetryStatus()",
    "kind": "Method",
    "detail": "Function (EStatus::Type)",
    "insertText": "GetRetryStatus()"
  },
  {
    "label": "HttpOnRequestProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpOnRequestProgress(FHttpRequestPtr InHttpRequest, uint64 BytesSent, uint64 BytesRcv)"
  },
  {
    "label": "HttpOnProcessRequestComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpOnProcessRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpOnStatusCodeReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpOnStatusCodeReceived(FHttpRequestPtr Request, int32 StatusCode)"
  },
  {
    "label": "HttpOnHeaderReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpOnHeaderReceived(FHttpRequestPtr Request, const FString& HeaderName, const FString& NewHeaderValue)"
  },
  {
    "label": "SetUrlFromRetryDomains()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUrlFromRetryDomains()"
  },
  {
    "label": "MoveToNextRetryDomain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveToNextRetryDomain()"
  },
  {
    "label": "BindAdaptorDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindAdaptorDelegates()"
  },
  {
    "label": "FManager()",
    "kind": "Method",
    "detail": "Function (EStatus::Type RetryStatus ; FRetryLimitCountSetting RetryLimitCountOverride ; FRetryLimitCountSetting RetryLimitCountForConnectionErrorOverride ; FRetryTimeoutRelativeSecondsSetting RetryTimeoutRelativeSecondsOverride ; FRetryResponseCodes RetryResponseCodes ; FRetryVerbs RetryVerbs ; FRetryDomainsPtr RetryDomains ; int32 RetryDomainsIndex = 0 ; FString OriginalUrl ; TWeakPtr<FManager> RetryManager ; FHttpResponsePtr LastResponse ; bool bLastSucceeded = false ; FExponentialBackoffCurve RetryExponentialBackoffCurve ; bool bBoundAdaptorDelegates = false ; } ; } namespace FHttpRetrySystem { class FManager : public TSharedFromThis<FManager> { public :)",
    "insertText": "FManager(const FRetryLimitCountSetting& InRetryLimitCountDefault, const FRetryTimeoutRelativeSecondsSetting& InRetryTimeoutRelativeSecondsDefault, const FRetryLimitCountSetting& InRetryLimitCountForConnectionErrorDefault = FRetryLimitCountSetting())"
  },
  {
    "label": "CreateRequest()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class FHttpRetrySystem::FRequest,ESPMode::ThreadSafe>)",
    "insertText": "CreateRequest(const FRetryLimitCountSetting& InRetryLimitCountOverride = FRetryLimitCountSetting(), const FRetryTimeoutRelativeSecondsSetting& InRetryTimeoutRelativeSecondsOverride = FRetryTimeoutRelativeSecondsSetting(), const FRetryResponseCodes& InRetryResponseCodes = FRetryResponseCodes(), const FRetryVerbs& InRetryVerbs = FRetryVerbs(), const FRetryDomainsPtr& InRetryDomains = FRetryDomainsPtr(), const FRetryLimitCountSetting& InRetryLimitCountForConnectionErrorOverride = FRetryLimitCountSetting(), const FExponentialBackoffCurve & InExponentialBackoffCurve = FExponentialBackoffCurve())"
  },
  {
    "label": "FManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FManager()"
  },
  {
    "label": "SetRandomFailureRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRandomFailureRate(float Value)"
  },
  {
    "label": "FRandomFailureRateSetting()",
    "kind": "Method",
    "detail": "Function (RandomFailureRate =)",
    "insertText": "FRandomFailureRateSetting(Value)"
  },
  {
    "label": "SetDefaultRetryLimit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDefaultRetryLimit(uint32 Value)"
  },
  {
    "label": "FRetryLimitCountSetting()",
    "kind": "Method",
    "detail": "Function (RetryLimitCountDefault =)",
    "insertText": "FRetryLimitCountSetting(Value)"
  },
  {
    "label": "BlockUntilFlushed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlockUntilFlushed(float TimeoutSec)"
  },
  {
    "label": "FHttpRetryRequestEntry()",
    "kind": "Method",
    "detail": "Function (protected : class FRequest ; struct FHttpRetryRequestEntry {)",
    "insertText": "FHttpRetryRequestEntry(TSharedRef<FRequest, ESPMode::ThreadSafe>& InRequest)"
  },
  {
    "label": "FHttpLogVerbosityTracker()",
    "kind": "Method",
    "detail": "Function (bool bShouldCancel ; uint32 CurrentRetryCount ; uint32 CurrentRetryCountForConnectionError ; double RequestStartTimeAbsoluteSeconds ; double LockoutEndTimeAbsoluteSeconds ; TSharedRef<FRequest,ESPMode::ThreadSafe> Request ; } ; class FHttpLogVerbosityTracker { public :)",
    "insertText": "FHttpLogVerbosityTracker()"
  },
  {
    "label": "IncrementRetriedRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementRetriedRequests()"
  },
  {
    "label": "DecrementRetriedRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementRetriedRequests()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FHttpLogVerbosityTracker&)",
    "insertText": "Get()"
  },
  {
    "label": "UpdateSettingsFromConfig()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateSettingsFromConfig()"
  },
  {
    "label": "OnConfigSectionsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConfigSectionsChanged(const FString& IniFilename, const TSet<FString>& SectionName)"
  },
  {
    "label": "ProcessRequest()",
    "kind": "Method",
    "detail": "Function (int32 NumRetriedRequests = 0 ; FCriticalSection NumRetriedRequestsLock ; ELogVerbosity::Type OriginalVerbosity = ELogVerbosity::Error ; ELogVerbosity::Type TargetVerbosity = ELogVerbosity::NoLogging ; } ; bool)",
    "insertText": "ProcessRequest(TSharedRef<FRequest, ESPMode::ThreadSafe>& HttpRequest)"
  },
  {
    "label": "CancelRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRequest(TSharedRef<FRequest, ESPMode::ThreadSafe>& HttpRequest)"
  },
  {
    "label": "ShouldRetry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRetry(const FHttpRetryRequestEntry& HttpRetryRequestEntry)"
  },
  {
    "label": "CanRetry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRetry(const FHttpRetryRequestEntry& HttpRetryRequestEntry)"
  },
  {
    "label": "HasTimedOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTimedOut(const FHttpRetryRequestEntry& HttpRetryRequestEntry, const double NowAbsoluteSeconds)"
  },
  {
    "label": "RetryHttpRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetryHttpRequest(FHttpRetryRequestEntry& RequestEntry)"
  },
  {
    "label": "RetryHttpRequestWithDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetryHttpRequestWithDelay(FManager::FHttpRetryRequestEntry& RequestEntry, float InDelay, bool bWasSucceeded)"
  },
  {
    "label": "HttpRequestTimeoutAfterDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpRequestTimeoutAfterDelay(FManager::FHttpRetryRequestEntry& RequestEntry, bool bWasSucceeded, float Delay)"
  },
  {
    "label": "GetLockoutPeriodSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLockoutPeriodSeconds(const FHttpRetryRequestEntry& HttpRetryRequestEntry)"
  },
  {
    "label": "RetryLimitForConnectionErrorIsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RetryLimitForConnectionErrorIsSet(const FHttpRetryRequestEntry& HttpRetryRequestEntry)"
  },
  {
    "label": "CanRetryForConnectionError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRetryForConnectionError(const FHttpRetryRequestEntry& HttpRetryRequestEntry)"
  },
  {
    "label": "CanRetryInGeneral()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRetryInGeneral(const FHttpRetryRequestEntry& HttpRetryRequestEntry)"
  }
]