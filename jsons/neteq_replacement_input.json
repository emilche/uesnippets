[
  {
    "label": "NetEqReplacementInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqReplacementInput"
  },
  {
    "label": "NetEqReplacementInput()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_REPLACEMENT_INPUT_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_REPLACEMENT_INPUT_H_ # include<memory> # include<set> # include \" modules / audio_coding / neteq / tools / neteq_input . h \" namespace webrtc { namespace test { class NetEqReplacementInput : public NetEqInput { public :)",
    "insertText": "NetEqReplacementInput(std::unique_ptr<NetEqInput> source, uint8_t replacement_payload_type, const std::set<uint8_t>& comfort_noise_types, const std::set<uint8_t>& forbidden_types)"
  },
  {
    "label": "NextPacketTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "NextPacketTime()"
  },
  {
    "label": "NextOutputEventTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "NextOutputEventTime()"
  },
  {
    "label": "PopPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<PacketData>)",
    "insertText": "PopPacket()"
  },
  {
    "label": "AdvanceOutputEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceOutputEvent()"
  },
  {
    "label": "ended()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ended()"
  },
  {
    "label": "NextHeader()",
    "kind": "Method",
    "detail": "Function (absl::optional<RTPHeader>)",
    "insertText": "NextHeader()"
  },
  {
    "label": "ReplacePacket()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ReplacePacket()"
  }
]