[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "IDragOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDragOperation"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / ViewModelTypeID . h \" class FText ; namespace UE { namespace Sequencer { class IDragOperation ; class IDroppableExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(IDroppableExtension) virtual ~IDroppableExtension()"
  },
  {
    "label": "CanAcceptDrag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanAcceptDrag(IDragOperation& DragOperation, FText* OutInfo)"
  },
  {
    "label": "OnHover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHover(IDragOperation& DragOperation)"
  },
  {
    "label": "ProcessDragOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDragOperation(IDragOperation& DragOperation)"
  },
  {
    "label": "OnUnhover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnhover(IDragOperation& DragOperation)"
  }
]