[
  {
    "label": "hash_compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hash_compare"
  },
  {
    "label": "tbb_hash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb_hash"
  },
  {
    "label": "tbb_hash_compare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tbb_hash_compare"
  },
  {
    "label": "hash_compare()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_tbb_hash_compare_impl_H # define __TBB_tbb_hash_compare_impl_H # include<string> namespace tbb { namespace interface5 { namespace internal { template<Key,Hasher,Key_equality> class hash_compare { public : typedef Hasher hasher ; typedef Key_equality key_equal ;)",
    "insertText": "hash_compare()"
  },
  {
    "label": "hash_compare()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "hash_compare(Hasher a_hasher) : my_hash_object(a_hasher)"
  },
  {
    "label": "hash_compare()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "hash_compare(Hasher a_hasher, Key_equality a_keyeq) : my_hash_object(a_hasher), my_key_compare_object(a_keyeq)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "operator()(const Key& key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const Key& key1, const Key& key2)"
  },
  {
    "label": "tbb_hasher()",
    "kind": "Method",
    "detail": "Function (} Hasher my_hash_object ; Key_equality my_key_compare_object ; } ; const size_t hash_multiplier = tbb::internal::select_size_t_constant<2 6 5 4 4 3 5 7 6 9 U,1 1 4 0 0 7 1 4 8 1 9 3 2 3 1 9 8 4 8 5 ULL>::value ; } template<T> size_t)",
    "insertText": "tbb_hasher(const T& t)"
  },
  {
    "label": "tbb_hasher()",
    "kind": "Method",
    "detail": "Function (} template<P> size_t)",
    "insertText": "tbb_hasher(P* ptr)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (size_t const h = reinterpret_cast<)",
    "insertText": "size_t(ptr)"
  },
  {
    "label": "tbb_hasher()",
    "kind": "Method",
    "detail": "Function (} template<E,S,A> size_t)",
    "insertText": "tbb_hasher(const std::basic_string<E,S,A>& s)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t h = 0 ;)",
    "insertText": "for(const E* c = s.c_str(); *c; ++c ) h = static_cast<size_t>(*c) ^ (h * internal::hash_multiplier)"
  },
  {
    "label": "tbb_hash()",
    "kind": "Method",
    "detail": "Function (} } using interface5::tbb_hasher ; template<Key> class tbb_hash { public :)",
    "insertText": "tbb_hash()"
  },
  {
    "label": "hash()",
    "kind": "Method",
    "detail": "Function (} } ; template<Key> struct tbb_hash_compare { size_t)",
    "insertText": "hash(const Key& a)"
  },
  {
    "label": "equal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "equal(const Key& a, const Key& b)"
  }
]