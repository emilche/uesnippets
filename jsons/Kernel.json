[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "kernel_retval_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kernel_retval_base"
  },
  {
    "label": "kernel_retval_base()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_MISC_KERNEL_H # define EIGEN_MISC_KERNEL_H namespace Eigen { namespace internal { template<DecompositionType> struct traits<kernel_retval_base<DecompositionType>> { typedef DecompositionType::MatrixType MatrixType ; typedef Matrix<MatrixType::Scalar,MatrixType::ColsAtCompileTime,Dynamic,MatrixType::Options,MatrixType::MaxColsAtCompileTime,MatrixType::MaxColsAtCompileTime> ReturnType ; } ; template<_DecompositionType> struct kernel_retval_base : public ReturnByValue<kernel_retval_base<_DecompositionType>> { typedef _DecompositionType DecompositionType ; typedef ReturnByValue<kernel_retval_base> Base ;)",
    "insertText": "kernel_retval_base(const DecompositionType& dec) : m_dec(dec), m_rank(dec.rank()), m_cols(m_rank==dec.cols() ? 1 : dec.cols() - m_rank)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "DecompositionType()",
    "kind": "Method",
    "detail": "Function (static_cast<const kernel_retval<)",
    "insertText": "DecompositionType(this)->evalTo(dst)"
  },
  {
    "label": "EIGEN_MAKE_KERNEL_HELPERS()",
    "kind": "Method",
    "detail": "Function (} protected : const DecompositionType& m_dec ; Index m_rank,m_cols ; } ; } # define)",
    "insertText": "EIGEN_MAKE_KERNEL_HELPERS(DecompositionType)"
  },
  {
    "label": "kernel_retval()",
    "kind": "Method",
    "detail": "Function (\\ typedef MatrixType::Scalar Scalar ; \\ typedef MatrixType::RealScalar RealScalar ; \\ typedef Eigen::internal::kernel_retval_base<DecompositionType> Base ; \\ using Base::dec ; \\ using Base::rank ; \\ using Base::rows ; \\ using Base::cols ; \\)",
    "insertText": "kernel_retval(const DecompositionType& dec) : Base(dec)"
  }
]