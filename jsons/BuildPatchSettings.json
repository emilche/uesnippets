[
  {
    "label": "FVariant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVariant"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBuildPatchServicesInitSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildPatchServicesInitSettings"
  },
  {
    "label": "FInstallerAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallerAction"
  },
  {
    "label": "FInstallerConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallerConfiguration"
  },
  {
    "label": "FBuildInstallerConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildInstallerConfiguration"
  },
  {
    "label": "FBuildInstallStreamerConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildInstallStreamerConfiguration"
  },
  {
    "label": "FBuildInstallStreamerStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildInstallStreamerStats"
  },
  {
    "label": "FChunkBuildConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkBuildConfiguration"
  },
  {
    "label": "FChunkDeltaOptimiserConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkDeltaOptimiserConfiguration"
  },
  {
    "label": "FPatchDataEnumerationConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPatchDataEnumerationConfiguration"
  },
  {
    "label": "FDiffManifestsConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffManifestsConfiguration"
  },
  {
    "label": "FCompactifyConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactifyConfiguration"
  },
  {
    "label": "FPackageChunksConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageChunksConfiguration"
  },
  {
    "label": "FBuildPatchServicesInitSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BuildPatchDelta . h \" # include \" BuildPatchFeatureLevel . h \" # include \" BuildPatchInstall . h \" # include \" BuildPatchVerify . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Interfaces / IBuildManifest . h \" # include \" Interfaces / IBuildInstallerSharedContext . h \" # include \" Misc / Variant . h \" # include \" Templates / UnrealTemplate . h \" class FVariant ; namespace BuildPatchServices { enum class EInstallActionIntent : int32 ; struct FBuildPatchServicesInitSettings { public :)",
    "insertText": "FBuildPatchServicesInitSettings()"
  },
  {
    "label": "MakeInstall()",
    "kind": "Method",
    "detail": "Function (public : FString ApplicationSettingsDir ; FString ProjectName ; FString LocalMachineConfigFileName ; } ; struct FInstallerAction { public : FInstallerAction)",
    "insertText": "MakeInstall(const IBuildManifestRef& Manifest, TSet<FString> InstallTags = TSet<FString>(), FString InstallSubdirectory = FString(), FString CloudSubdirectory = FString())"
  },
  {
    "label": "MakeUpdate()",
    "kind": "Method",
    "detail": "Function (FInstallerAction)",
    "insertText": "MakeUpdate(const IBuildManifestRef& CurrentManifest, const IBuildManifestRef& InstallManifest, TSet<FString> InstallTags = TSet<FString>(), FString InstallSubdirectory = FString(), FString CloudSubdirectory = FString())"
  },
  {
    "label": "MakeRepair()",
    "kind": "Method",
    "detail": "Function (FInstallerAction)",
    "insertText": "MakeRepair(const IBuildManifestRef& Manifest, TSet<FString> InstallTags = TSet<FString>(), FString InstallSubdirectory = FString(), FString CloudSubdirectory = FString())"
  },
  {
    "label": "MakeUninstall()",
    "kind": "Method",
    "detail": "Function (FInstallerAction)",
    "insertText": "MakeUninstall(const IBuildManifestRef& Manifest, FString InstallSubdirectory = FString(), FString CloudSubdirectory = FString())"
  },
  {
    "label": "MakeInstallOrUpdate()",
    "kind": "Method",
    "detail": "Function (FInstallerAction)",
    "insertText": "MakeInstallOrUpdate(const IBuildManifestPtr& CurrentManifest, const IBuildManifestRef& InstallManifest, TSet<FString> InstallTags = TSet<FString>(), FString InstallSubdirectory = FString(), FString CloudSubdirectory = FString())"
  },
  {
    "label": "MakeUpdate()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "MakeUpdate(CurrentManifest.ToSharedRef(), InstallManifest, MoveTemp(InstallTags), MoveTemp(InstallSubdirectory), MoveTemp(CloudSubdirectory))"
  },
  {
    "label": "FInstallerAction()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FInstallerAction(const FInstallerAction& CopyFrom)"
  },
  {
    "label": "FInstallerAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstallerAction(FInstallerAction&& MoveFrom)"
  },
  {
    "label": "IsInstall()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsInstall()"
  },
  {
    "label": "IsUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUpdate()"
  },
  {
    "label": "IsRepair()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRepair()"
  },
  {
    "label": "IsUninstall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUninstall()"
  },
  {
    "label": "GetInstallTags()",
    "kind": "Method",
    "detail": "Function (const TSet<FString>&)",
    "insertText": "GetInstallTags()"
  },
  {
    "label": "GetInstallSubdirectory()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetInstallSubdirectory()"
  },
  {
    "label": "GetCloudSubdirectory()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetCloudSubdirectory()"
  },
  {
    "label": "GetCurrentManifest()",
    "kind": "Method",
    "detail": "Function (IBuildManifestRef)",
    "insertText": "GetCurrentManifest()"
  },
  {
    "label": "GetInstallManifest()",
    "kind": "Method",
    "detail": "Function (IBuildManifestRef)",
    "insertText": "GetInstallManifest()"
  },
  {
    "label": "TryGetCurrentManifest()",
    "kind": "Method",
    "detail": "Function (public : IBuildManifestPtr)",
    "insertText": "TryGetCurrentManifest()"
  },
  {
    "label": "TryGetInstallManifest()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } IBuildManifestPtr)",
    "insertText": "TryGetInstallManifest()"
  },
  {
    "label": "GetCurrentOrInstallManifest()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } IBuildManifestRef)",
    "insertText": "GetCurrentOrInstallManifest()"
  },
  {
    "label": "GetInstallOrCurrentManifest()",
    "kind": "Method",
    "detail": "Function (} IBuildManifestRef)",
    "insertText": "GetInstallOrCurrentManifest()"
  },
  {
    "label": "FInstallerAction()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FInstallerAction()"
  },
  {
    "label": "FInstallerConfiguration()",
    "kind": "Method",
    "detail": "Function (IBuildManifestPtr CurrentManifest ; IBuildManifestPtr InstallManifest ; TSet<FString> InstallTags ; FString InstallSubdirectory ; FString CloudSubdirectory ; EInstallActionIntent ActionIntent ; } ; struct FInstallerConfiguration {)",
    "insertText": "FInstallerConfiguration(const IBuildManifestRef& InInstallManifest)"
  },
  {
    "label": "FInstallerConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstallerConfiguration(const FInstallerConfiguration& CopyFrom)"
  },
  {
    "label": "FInstallerConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstallerConfiguration(FInstallerConfiguration&& MoveFrom)"
  },
  {
    "label": "FBuildInstallerConfiguration()",
    "kind": "Method",
    "detail": "Function (public : IBuildManifestPtr CurrentManifest ; IBuildManifestRef InstallManifest ; FString InstallDirectory ; FString StagingDirectory ; FString BackupDirectory ; TArray<FString> ChunkDatabaseFiles ; TArray<FString> CloudDirectories ; TSet<FString> InstallTags ; EInstallMode InstallMode ; EVerifyMode VerifyMode ; EDeltaPolicy DeltaPolicy ; bool bIsRepair ; bool bRunRequiredPrereqs ; bool bAllowConcurrentExecution ; } ; struct FBuildInstallerConfiguration {)",
    "insertText": "FBuildInstallerConfiguration(TArray<FInstallerAction> InstallerActions)"
  },
  {
    "label": "FChunkBuildConfiguration()",
    "kind": "Method",
    "detail": "Function (public : TArray<FInstallerAction> InstallerActions ; IBuildInstallerSharedContextPtr SharedContext ; FString InstallDirectory ; FString StagingDirectory ; FString BackupDirectory ; TArray<FString> ChunkDatabaseFiles ; bool bDeleteChunkDbFilesAfterUse = false ; bool bCalculateDeleteChunkDbMaxDiskSpaceAndExit = false ; TArray<FString> CloudDirectories ; EInstallMode InstallMode ; EVerifyMode VerifyMode ; EDeltaPolicy DeltaPolicy ; bool bRunRequiredPrereqs ; bool bAllowConcurrentExecution ; bool bTrackFileOperations ; } ; struct FBuildInstallStreamerConfiguration { public : IBuildManifestPtr Manifest ; TArray<FString> ChunkDatabaseFiles ; TArray<FString> CloudDirectories ; bool bShouldBatch = true ; bool bMainThreadDelegates = true ; } ; struct FBuildInstallStreamerStats { uint64 FileRequestsCompleted ; uint64 FileRequestsMade ; uint64 FileRequestsCancelled ; uint64 BundleRequestsCancelled ; uint64 BundleRequestsCompleted ; uint64 BundleRequestsMade ; float TotalMegaBytesDownloaded ; double MaxRequestTime ; double AverageRequestTime ; float VFCCachedTotalSize ; float VFCCachedUsedSize ; float VFCRequestedFileWrite ; float VFCActualFileWrite ; } ; struct FChunkBuildConfiguration { public :)",
    "insertText": "FChunkBuildConfiguration()"
  },
  {
    "label": "FChunkDeltaOptimiserConfiguration()",
    "kind": "Method",
    "detail": "Function (public : EFeatureLevel FeatureLevel ; FString RootDirectory ; uint32 AppId ; FString AppName ; FString BuildVersion ; FString LaunchExe ; FString LaunchCommand ; FString InputListFile ; FString IgnoreListFile ; FString AttributeListFile ; TSet<FString> PrereqIds ; FString PrereqName ; FString PrereqPath ; FString PrereqArgs ; float DataAgeThreshold ; bool bShouldHonorReuseThreshold ; uint32 OutputChunkWindowSize ; bool bShouldMatchAnyWindowSize ; TMap<FString,FVariant> CustomFields ; FString CloudDirectory ; FString OutputFilename ; bool bAllowEmptyBuild ; } ; typedef FChunkBuildConfiguration FGenerationConfiguration ; struct FChunkDeltaOptimiserConfiguration { public :)",
    "insertText": "FChunkDeltaOptimiserConfiguration()"
  },
  {
    "label": "FPatchDataEnumerationConfiguration()",
    "kind": "Method",
    "detail": "Function (public : FString ManifestAUri ; FString ManifestBUri ; FString CloudDirectory ; uint32 ScanWindowSize ; uint32 OutputChunkSize ; uint64 DiffAbortThreshold ; } ; struct FPatchDataEnumerationConfiguration { public :)",
    "insertText": "FPatchDataEnumerationConfiguration()"
  },
  {
    "label": "FDiffManifestsConfiguration()",
    "kind": "Method",
    "detail": "Function (public : FString InputFile ; FString OutputFile ; bool bIncludeSizes ; } ; struct FDiffManifestsConfiguration { public :)",
    "insertText": "FDiffManifestsConfiguration()"
  },
  {
    "label": "FCompactifyConfiguration()",
    "kind": "Method",
    "detail": "Function (public : FString ManifestAUri ; FString ManifestBUri ; TSet<FString> TagSetA ; TSet<FString> TagSetB ; TArray<TSet<FString>> CompareTagSets ; FString OutputFilePath ; } ; struct FCompactifyConfiguration { public :)",
    "insertText": "FCompactifyConfiguration()"
  },
  {
    "label": "FPackageChunksConfiguration()",
    "kind": "Method",
    "detail": "Function (public : FString CloudDirectory ; float DataAgeThreshold ; FString DeletedChunkLogFile ; bool bRunPreview ; } ; struct FPackageChunksConfiguration { public :)",
    "insertText": "FPackageChunksConfiguration()"
  }
]