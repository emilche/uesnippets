[
  {
    "label": "TQuartzCommandQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TQuartzCommandQueue"
  },
  {
    "label": "ConsumerBaseType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConsumerBaseType"
  },
  {
    "label": "TargetInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInterface"
  },
  {
    "label": "TQuartzCommandQueue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<type_traits> # include \" Containers / ConsumeAllMpmcQueue . h \" # include \" Templates / UniquePtr . h \" # include \" QuartzCompileTimeVisitor . h \" namespace Audio::Quartz::PrivateDefs { template<. . . Ts> class TQuartzCommandQueue : public TVisitorPatternBase<Ts . . .> { private : template<class ConsumerBaseType> using TCommand = TVisitorPatternBase<Ts . . .>::template TVisitWithLambda<ConsumerBaseType> ; using ICommandBase = TVisitorPatternBase<Ts . . .>::IVisitorBase ; public : using IConsumerBase = TVisitorPatternBase<Ts . . .>::IListenerBase ; template<. . . ConsumerInterfaces> using TConsumerBase = TVisitorPatternBase<Ts . . .>::template TElementBase<ConsumerInterfaces . . .> ; public :)",
    "insertText": "TQuartzCommandQueue()"
  },
  {
    "label": "PushLambda()",
    "kind": "Method",
    "detail": "Function (template<class TargetInterface> void)",
    "insertText": "PushLambda(TFunction<void(TargetInterface&)> InLambda)"
  },
  {
    "label": "ProduceItem()",
    "kind": "Method",
    "detail": "Function (Queue .)",
    "insertText": "ProduceItem(MakeUnique<TCommand<TargetInterface>>(MoveTempIfPossible(InLambda)))"
  },
  {
    "label": "PumpCommandQueue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PumpCommandQueue(IConsumerBase& InListener)"
  },
  {
    "label": "ConsumeAllFifo()",
    "kind": "Method",
    "detail": "Function (Queue .)",
    "insertText": "ConsumeAllFifo([&InListener](TUniquePtr<ICommandBase> InCommand) { InListener.Accept(*InCommand); })"
  }
]