[
  {
    "label": "Candidate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Candidate"
  },
  {
    "label": "SessionDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SessionDescription"
  },
  {
    "label": "SdpParseError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SdpParseError"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "IceCandidateCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceCandidateCollection"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IceCandidateInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef API_JSEP_H_ # define API_JSEP_H_ # include<stddef . h> # include<memory> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / rtc_error . h \" # include \" rtc_base / ref_count . h \" # include \" rtc_base / system / rtc_export . h \" namespace cricket { class Candidate ; class SessionDescription ; } namespace webrtc { struct SdpParseError { public : std::string line ; std::string description ; } ; class RTC_EXPORT IceCandidateInterface { public : ~)",
    "insertText": "IceCandidateInterface()"
  },
  {
    "label": "sdp_mid()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "sdp_mid()"
  },
  {
    "label": "sdp_mline_index()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "sdp_mline_index()"
  },
  {
    "label": "candidate()",
    "kind": "Method",
    "detail": "Function (const cricket::Candidate&)",
    "insertText": "candidate()"
  },
  {
    "label": "server_url()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "server_url()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToString(std::string* out)"
  },
  {
    "label": "CreateIceCandidate()",
    "kind": "Method",
    "detail": "Function (} ; RTC_EXPORT IceCandidateInterface*)",
    "insertText": "CreateIceCandidate(const std::string& sdp_mid, int sdp_mline_index, const std::string& sdp, SdpParseError* error)"
  },
  {
    "label": "CreateIceCandidate()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT std::unique_ptr<IceCandidateInterface>)",
    "insertText": "CreateIceCandidate(const std::string& sdp_mid, int sdp_mline_index, const cricket::Candidate& candidate)"
  },
  {
    "label": "IceCandidateCollection()",
    "kind": "Method",
    "detail": "Function (class IceCandidateCollection { public : ~)",
    "insertText": "IceCandidateCollection()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "count()"
  },
  {
    "label": "HasCandidate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCandidate(const IceCandidateInterface* candidate)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (const IceCandidateInterface*)",
    "insertText": "at(size_t index)"
  },
  {
    "label": "SdpTypeToString()",
    "kind": "Method",
    "detail": "Function (} ; enum class SdpType { kOffer,kPrAnswer,kAnswer,kRollback } ; RTC_EXPORT const char*)",
    "insertText": "SdpTypeToString(SdpType type)"
  },
  {
    "label": "SdpTypeFromString()",
    "kind": "Method",
    "detail": "Function (absl::optional<SdpType>)",
    "insertText": "SdpTypeFromString(const std::string& type_str)"
  },
  {
    "label": "SessionDescriptionInterface()",
    "kind": "Method",
    "detail": "Function (class RTC_EXPORT SessionDescriptionInterface { public : const char kOffer [ ] ; const char kPrAnswer [ ] ; const char kAnswer [ ] ; const char kRollback [ ] ; ~)",
    "insertText": "SessionDescriptionInterface()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "Clone()"
  },
  {
    "label": "description()",
    "kind": "Method",
    "detail": "Function (const cricket::SessionDescription*)",
    "insertText": "description()"
  },
  {
    "label": "session_id()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "session_id()"
  },
  {
    "label": "session_version()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "session_version()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (SdpType)",
    "insertText": "GetType()"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "type()"
  },
  {
    "label": "AddCandidate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCandidate(const IceCandidateInterface* candidate)"
  },
  {
    "label": "RemoveCandidates()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "RemoveCandidates(const std::vector<cricket::Candidate>& candidates)"
  },
  {
    "label": "number_of_mediasections()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "number_of_mediasections()"
  },
  {
    "label": "candidates()",
    "kind": "Method",
    "detail": "Function (const IceCandidateCollection*)",
    "insertText": "candidates(size_t mediasection_index)"
  },
  {
    "label": "CreateSessionDescription()",
    "kind": "Method",
    "detail": "Function (} ; RTC_EXPORT SessionDescriptionInterface*)",
    "insertText": "CreateSessionDescription(const std::string& type, const std::string& sdp, SdpParseError* error)"
  },
  {
    "label": "CreateSessionDescription()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateSessionDescription(SdpType type, const std::string& sdp)"
  },
  {
    "label": "CreateSessionDescription()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateSessionDescription(SdpType type, const std::string& sdp, SdpParseError* error_out)"
  },
  {
    "label": "CreateSessionDescription()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateSessionDescription(SdpType type, const std::string& session_id, const std::string& session_version, std::unique_ptr<cricket::SessionDescription> description)"
  },
  {
    "label": "OnSuccess()",
    "kind": "Method",
    "detail": "Function (class RTC_EXPORT CreateSessionDescriptionObserver : public rtc::RefCountInterface { public : void)",
    "insertText": "OnSuccess(SessionDescriptionInterface* desc)"
  },
  {
    "label": "OnFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFailure(RTCError error)"
  },
  {
    "label": "CreateSessionDescriptionObserver()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "CreateSessionDescriptionObserver()"
  },
  {
    "label": "OnSuccess()",
    "kind": "Method",
    "detail": "Function (} ; class RTC_EXPORT SetSessionDescriptionObserver : public rtc::RefCountInterface { public : void)",
    "insertText": "OnSuccess()"
  },
  {
    "label": "SetSessionDescriptionObserver()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "SetSessionDescriptionObserver()"
  }
]