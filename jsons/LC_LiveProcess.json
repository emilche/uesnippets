[
  {
    "label": "DuplexPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DuplexPipe"
  },
  {
    "label": "CodeCave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CodeCave"
  },
  {
    "label": "LiveProcess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveProcess"
  },
  {
    "label": "LazyLoadedModule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LazyLoadedModule"
  },
  {
    "label": "RestartState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RestartState"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "LiveProcess()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" LC_ProcessTypes . h \" # include \" LC_ThreadTypes . h \" # include \" LC_Executable . h \" # include \" LC_MemoryBlock . h \" # include \" LC_VirtualMemoryRange . h \" # include \" LC_Types . h \" # include \" VisualStudioDTE . h \" class DuplexPipe ; class CodeCave ; class LiveProcess { public :)",
    "insertText": "LiveProcess(Process::Handle processHandle, Process::Id processId, Thread::Id commandThreadId, const void* jumpToSelf, const DuplexPipe* pipe, const wchar_t* imagePath, const wchar_t* commandLine, const wchar_t* workingDirectory, const void* environment, size_t environmentSize)"
  },
  {
    "label": "ReadHeartBeatDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadHeartBeatDelta(const wchar_t* const processGroupName)"
  },
  {
    "label": "MadeProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MadeProgress(void)"
  },
  {
    "label": "HandleDebuggingPreCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDebuggingPreCompile(void)"
  },
  {
    "label": "HandleDebuggingPostCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDebuggingPostCompile(void)"
  },
  {
    "label": "InstallCodeCave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstallCodeCave(void)"
  },
  {
    "label": "UninstallCodeCave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninstallCodeCave(void)"
  },
  {
    "label": "AddLoadedImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLoadedImage(const executable::Header& imageHeader)"
  },
  {
    "label": "RemoveLoadedImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLoadedImage(const executable::Header& imageHeader)"
  },
  {
    "label": "TriedToLoadImage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TriedToLoadImage(const executable::Header& imageHeader)"
  },
  {
    "label": "PrepareForRestart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareForRestart(void)"
  },
  {
    "label": "WaitForExitBeforeRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForExitBeforeRestart(void)"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restart(void* restartJob)"
  },
  {
    "label": "WasSuccessfulRestart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasSuccessfulRestart(void)"
  },
  {
    "label": "ReserveVirtualMemoryPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveVirtualMemoryPages(void* moduleBase)"
  },
  {
    "label": "FreeVirtualMemoryPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVirtualMemoryPages(void* moduleBase)"
  },
  {
    "label": "GetProcessHandle()",
    "kind": "Method",
    "detail": "Function (Process::Handle)",
    "insertText": "GetProcessHandle(void)"
  },
  {
    "label": "GetBuildArguments()",
    "kind": "Method",
    "detail": "Function (m_buildArguments = buildArguments ; } const wchar_t*)",
    "insertText": "GetBuildArguments()"
  },
  {
    "label": "AddLazyLoadedModule()",
    "kind": "Method",
    "detail": "Function (} struct LazyLoadedModule { Windows::HMODULE m_moduleBase ; bool m_loaded ; } ; void)",
    "insertText": "AddLazyLoadedModule(const std::wstring moduleName, Windows::HMODULE moduleBase)"
  },
  {
    "label": "SetLazyLoadedModuleAsLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLazyLoadedModuleAsLoaded(const std::wstring moduleName)"
  },
  {
    "label": "IsPendingLazyLoadedModule()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPendingLazyLoadedModule(const std::wstring& moduleName)"
  },
  {
    "label": "GetLazyLoadedModules()",
    "kind": "Method",
    "detail": "Function (const types::unordered_map<std::wstring,LazyLoadedModule>&)",
    "insertText": "GetLazyLoadedModules()"
  },
  {
    "label": "SetReinstancingFlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReinstancingFlow(bool enable)"
  },
  {
    "label": "IsReinstancingFlowEnabled()",
    "kind": "Method",
    "detail": "Function (m_reinstancingFlow = enable ; } bool)",
    "insertText": "IsReinstancingFlowEnabled()"
  },
  {
    "label": "IsDisableCompileFinishNotification()",
    "kind": "Method",
    "detail": "Function (m_disableCompileFinishNotification = true ; } bool)",
    "insertText": "IsDisableCompileFinishNotification()"
  },
  {
    "label": "AddPage()",
    "kind": "Method",
    "detail": "Function (m_virtualMemoryRange .)",
    "insertText": "AddPage(page)"
  },
  {
    "label": "LC_DISABLE_COPY()",
    "kind": "Method",
    "detail": "Function (} private : Process::Handle m_processHandle ; Process::Id m_processId ; Thread::Id m_commandThreadId ; const void* m_jumpToSelf ; const DuplexPipe* m_pipe ; std::wstring m_imagePath ; std::wstring m_commandLine ; std::wstring m_workingDirectory ; MemoryBlock m_environment ; std::wstring m_buildArguments ; types::unordered_map<std::wstring,LazyLoadedModule> m_lazyLoadedModules ; bool m_reinstancingFlow = false ; bool m_disableCompileFinishNotification = false ; types::unordered_set<executable::Header> m_imagesTriedToLoad ; uint64_t m_heartBeatDelta ; # if WITH_VISUALSTUDIO_DTE EnvDTE::DebuggerPtr m_vsDebugger ; types::vector<EnvDTE::ThreadPtr> m_vsDebuggerThreads ; # endif CodeCave* m_codeCave ; struct RestartState { enum Enum { DEFAULT,FAILED_PREPARE,SUCCESSFUL_PREPARE,SUCCESSFUL_EXIT,SUCCESSFUL_RESTART } ; } ; RestartState::Enum m_restartState ; VirtualMemoryRange m_virtualMemoryRange ;)",
    "insertText": "LC_DISABLE_COPY(LiveProcess)"
  },
  {
    "label": "LC_DISABLE_MOVE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LC_DISABLE_MOVE(LiveProcess)"
  },
  {
    "label": "LC_DISABLE_ASSIGNMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LC_DISABLE_ASSIGNMENT(LiveProcess)"
  },
  {
    "label": "LC_DISABLE_MOVE_ASSIGNMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LC_DISABLE_MOVE_ASSIGNMENT(LiveProcess)"
  }
]