[
  {
    "label": "DuplexPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DuplexPipe"
  },
  {
    "label": "CodeCave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CodeCave"
  },
  {
    "label": "LiveProcess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveProcess"
  },
  {
    "label": "LazyLoadedModule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LazyLoadedModule"
  },
  {
    "label": "RestartState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RestartState"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "LiveProcess()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "LiveProcess(Process::Handle processHandle, Process::Id processId, Thread::Id commandThreadId, const void* jumpToSelf, const DuplexPipe* pipe,\n\t\tconst wchar_t* imagePath, const wchar_t* commandLine, const wchar_t* workingDirectory, const void* environment, size_t environmentSize)"
  },
  {
    "label": "ReadHeartBeatDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadHeartBeatDelta(const wchar_t* const processGroupName)"
  },
  {
    "label": "HandleDebuggingPreCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDebuggingPreCompile(void)"
  },
  {
    "label": "HandleDebuggingPostCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDebuggingPostCompile(void)"
  },
  {
    "label": "InstallCodeCave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstallCodeCave(void)"
  },
  {
    "label": "UninstallCodeCave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninstallCodeCave(void)"
  },
  {
    "label": "AddLoadedImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLoadedImage(const executable::Header& imageHeader)"
  },
  {
    "label": "RemoveLoadedImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLoadedImage(const executable::Header& imageHeader)"
  },
  {
    "label": "PrepareForRestart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareForRestart(void)"
  },
  {
    "label": "WaitForExitBeforeRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForExitBeforeRestart(void)"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restart(void* restartJob)"
  },
  {
    "label": "ReserveVirtualMemoryPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveVirtualMemoryPages(void* moduleBase)"
  },
  {
    "label": "FreeVirtualMemoryPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVirtualMemoryPages(void* moduleBase)"
  },
  {
    "label": "AddLazyLoadedModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLazyLoadedModule(const std::wstring moduleName, Windows::HMODULE moduleBase)"
  },
  {
    "label": "SetLazyLoadedModuleAsLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLazyLoadedModuleAsLoaded(const std::wstring moduleName)"
  }
]