[
  {
    "label": "ModelInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModelInterface"
  },
  {
    "label": "FModelInstanceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelInstanceBase"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FModelInstanceBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" NNE . h \" # include \" NNETypes . h \" namespace UE::NNE::Internal { template<class ModelInterface> class FModelInstanceBase : public ModelInterface { public : ~)",
    "insertText": "FModelInstanceBase()"
  },
  {
    "label": "GetInputTensorDescs()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<NNE::FTensorDesc>)",
    "insertText": "GetInputTensorDescs()"
  },
  {
    "label": "GetOutputTensorDescs()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<NNE::FTensorDesc>)",
    "insertText": "GetOutputTensorDescs()"
  },
  {
    "label": "GetInputTensorShapes()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<NNE::FTensorShape>)",
    "insertText": "GetInputTensorShapes()"
  },
  {
    "label": "GetOutputTensorShapes()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<NNE::FTensorShape>)",
    "insertText": "GetOutputTensorShapes()"
  },
  {
    "label": "SetInputTensorShapes()",
    "kind": "Method",
    "detail": "Function (ModelInterface::ESetInputTensorShapesStatus)",
    "insertText": "SetInputTensorShapes(TConstArrayView<NNE::FTensorShape> InInputShapes)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (InputTensorShapes .)",
    "insertText": "Reset(InInputShapes.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FTensorDesc SymbolicDesc = InputSymbolicTensors [ i ] ;)",
    "insertText": "if(!InInputShapes[i].IsCompatibleWith(SymbolicDesc.GetShape()))"
  }
]