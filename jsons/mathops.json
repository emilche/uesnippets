[
  {
    "label": "FRAC_MUL16()",
    "kind": "Method",
    "detail": "Function (# ifndef MATHOPS_H # define MATHOPS_H # include \" arch . h \" # include \" entcode . h \" # include \" os_support . h \" # define PI 3 . 1 4 1 5 9 2 6 5 3 f # define)",
    "insertText": "FRAC_MUL16(a,b) ((16384+((opus_int32)(opus_int16)(a)*(opus_int16)(b)))>>15) unsigned isqrt32(opus_uint32 _val)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(FIXED_POINT) || defined(ANALYSIS_C) #define cA 0.43157974f #define cB 0.67848403f #define cC 0.08595542f #define cE ((float)PI/2) static OPUS_INLINE float fast_atan2f(float y, float x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float x2,y2 ; x2 = x* x ; y2 = y* y ;)",
    "insertText": "if(x2 + y2 < 1e-18f)"
  },
  {
    "label": "den()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "den(y2 + cB*x2) * (y2 + cC*x2)"
  },
  {
    "label": "den()",
    "kind": "Method",
    "detail": "Function (} else { float)",
    "insertText": "den(x2 + cB*y2) * (x2 + cC*y2)"
  },
  {
    "label": "celt_maxabs16()",
    "kind": "Method",
    "detail": "Function (} } # undef cA # undef cB # undef cC # undef cE # endif # ifndef OVERRIDE_CELT_MAXABS16 OPUS_INLINE opus_val32)",
    "insertText": "celt_maxabs16(const opus_val16 *x, int len)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ; opus_val16 maxval = 0 ; opus_val16 minval = 0 ;)",
    "insertText": "for(i=0;i<len;i++)"
  },
  {
    "label": "MAX16()",
    "kind": "Method",
    "detail": "Function (maxval =)",
    "insertText": "MAX16(maxval, x[i])"
  },
  {
    "label": "MIN16()",
    "kind": "Method",
    "detail": "Function (minval =)",
    "insertText": "MIN16(minval, x[i])"
  },
  {
    "label": "MAX32()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "MAX32(EXTEND32(maxval),-EXTEND32(minval))"
  },
  {
    "label": "celt_maxabs32()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef OVERRIDE_CELT_MAXABS32 # ifdef FIXED_POINT OPUS_INLINE opus_val32)",
    "insertText": "celt_maxabs32(const opus_val32 *x, int len)"
  },
  {
    "label": "MAX32()",
    "kind": "Method",
    "detail": "Function (maxval =)",
    "insertText": "MAX32(maxval, x[i])"
  },
  {
    "label": "MIN32()",
    "kind": "Method",
    "detail": "Function (minval =)",
    "insertText": "MIN32(minval, x[i])"
  },
  {
    "label": "MAX32()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "MAX32(maxval, -minval)"
  },
  {
    "label": "celt_maxabs32()",
    "kind": "Method",
    "detail": "Function (} # else # define)",
    "insertText": "celt_maxabs32(x,len) celt_maxabs16(x,len) #endif #endif #ifndef FIXED_POINT #define celt_sqrt(x) ((float)sqrt(x)) #define celt_rsqrt(x) (1.f/celt_sqrt(x)) #define celt_rsqrt_norm(x) (celt_rsqrt(x)) #define celt_cos_norm(x) ((float)cos((.5f*PI)*(x))) #define celt_rcp(x) (1.f/(x)) #define celt_div(a,b) ((a)/(b)) #define frac_div32(a,b) ((float)(a)/(b)) #ifdef FLOAT_APPROX static OPUS_INLINE float celt_log2(float x)"
  },
  {
    "label": "integer()",
    "kind": "Method",
    "detail": "Function (int integer ; float frac ; union { float f ; opus_uint32 i ; } in ; in . f = x ;)",
    "insertText": "integer(in.i>>23)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (in .)",
    "insertText": "i(opus_uint32)"
  },
  {
    "label": "frac()",
    "kind": "Method",
    "detail": "Function (frac = in . f - 1 . 5 f ; frac = - 0 . 4 1 4 4 5 4 1 8 f +)",
    "insertText": "frac(0.95909232f + frac*(-0.33951290f + frac*0.16541097f))"
  },
  {
    "label": "integer()",
    "kind": "Method",
    "detail": "Function (int integer ; float frac ; union { float f ; opus_uint32 i ; } res ;)",
    "insertText": "integer(int)floor(x)"
  },
  {
    "label": "frac()",
    "kind": "Method",
    "detail": "Function (frac = x - integer ; res . f = 0 . 9 9 9 9 2 5 2 2 f +)",
    "insertText": "frac(0.69583354f + frac * (0.22606716f + 0.078024523f*frac))"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "i(res.i + ((opus_uint32)integer<<23))"
  },
  {
    "label": "celt_sig_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "celt_sig_assert(x>0)"
  },
  {
    "label": "celt_zlog2()",
    "kind": "Method",
    "detail": "Function (} # endif OPUS_INLINE opus_int16)",
    "insertText": "celt_zlog2(opus_val32 x)"
  },
  {
    "label": "celt_rsqrt_norm()",
    "kind": "Method",
    "detail": "Function (} opus_val16)",
    "insertText": "celt_rsqrt_norm(opus_val32 x)"
  },
  {
    "label": "celt_sqrt()",
    "kind": "Method",
    "detail": "Function (opus_val32)",
    "insertText": "celt_sqrt(opus_val32 x)"
  },
  {
    "label": "celt_cos_norm()",
    "kind": "Method",
    "detail": "Function (opus_val16)",
    "insertText": "celt_cos_norm(opus_val32 x)"
  },
  {
    "label": "celt_log2()",
    "kind": "Method",
    "detail": "Function (OPUS_INLINE opus_val16)",
    "insertText": "celt_log2(opus_val32 x)"
  },
  {
    "label": "C()",
    "kind": "Method",
    "detail": "Function (int i ; opus_val16 n,frac ; const opus_val16)",
    "insertText": "C(1<<(13-DB_SHIFT))"
  },
  {
    "label": "celt_ilog2()",
    "kind": "Method",
    "detail": "Function (i =)",
    "insertText": "celt_ilog2(x)"
  },
  {
    "label": "VSHR32()",
    "kind": "Method",
    "detail": "Function (n =)",
    "insertText": "VSHR32(x,i-15)"
  },
  {
    "label": "ADD16()",
    "kind": "Method",
    "detail": "Function (frac =)",
    "insertText": "ADD16(C[0], MULT16_16_Q15(n, ADD16(C[1], MULT16_16_Q15(n, ADD16(C[2], MULT16_16_Q15(n, ADD16(C[3], MULT16_16_Q15(n, C[4]))))))))"
  },
  {
    "label": "celt_exp2_frac()",
    "kind": "Method",
    "detail": "Function (} # define D0 1 6 3 8 3 # define D1 2 2 8 0 4 # define D2 1 4 8 1 9 # define D3 1 0 2 0 4 OPUS_INLINE opus_val32)",
    "insertText": "celt_exp2_frac(opus_val16 x)"
  },
  {
    "label": "SHL16()",
    "kind": "Method",
    "detail": "Function (opus_val16 frac ; frac =)",
    "insertText": "SHL16(x, 4)"
  },
  {
    "label": "celt_exp2()",
    "kind": "Method",
    "detail": "Function (} OPUS_INLINE opus_val32)",
    "insertText": "celt_exp2(opus_val16 x)"
  },
  {
    "label": "SHR16()",
    "kind": "Method",
    "detail": "Function (int integer ; opus_val16 frac ; integer =)",
    "insertText": "SHR16(x,10)"
  },
  {
    "label": "celt_exp2_frac()",
    "kind": "Method",
    "detail": "Function (frac =)",
    "insertText": "celt_exp2_frac(x-SHL16(integer,10))"
  },
  {
    "label": "celt_rcp()",
    "kind": "Method",
    "detail": "Function (} opus_val32)",
    "insertText": "celt_rcp(opus_val32 x)"
  },
  {
    "label": "celt_div()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "celt_div(a,b) MULT32_32_Q31((opus_val32)(a),celt_rcp(b)) opus_val32 frac_div32(opus_val32 a, opus_val32 b)"
  },
  {
    "label": "celt_atan01()",
    "kind": "Method",
    "detail": "Function (# define M1 3 2 7 6 7 # define M2 - 2 1 # define M3 - 1 1 9 4 3 # define M4 4 9 3 6 OPUS_INLINE opus_val16)",
    "insertText": "celt_atan01(opus_val16 x)"
  },
  {
    "label": "celt_atan2p()",
    "kind": "Method",
    "detail": "Function (} # undef M1 # undef M2 # undef M3 # undef M4 OPUS_INLINE opus_val16)",
    "insertText": "celt_atan2p(opus_val16 y, opus_val16 x)"
  },
  {
    "label": "celt_div()",
    "kind": "Method",
    "detail": "Function (opus_val32 arg ; arg =)",
    "insertText": "celt_div(SHL32(EXTEND32(y),15),x)"
  },
  {
    "label": "celt_div()",
    "kind": "Method",
    "detail": "Function (} else { opus_val32 arg ; arg =)",
    "insertText": "celt_div(SHL32(EXTEND32(x),15),y)"
  }
]