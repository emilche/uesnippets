[
  {
    "label": "FSingleParticlePhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleParticlePhysicsProxy"
  },
  {
    "label": "FPBDRigidDirtyParticlesBufferOut",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPBDRigidDirtyParticlesBufferOut"
  },
  {
    "label": "FPBDRigidDirtyParticlesBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidDirtyParticlesBuffer"
  },
  {
    "label": "FPBDRigidDirtyParticlesBufferAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidDirtyParticlesBufferAccessor"
  },
  {
    "label": "FPBDRigidDirtyParticlesBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Framework / MultiBufferResource . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / PBDRigidsEvolutionFwd . h \" namespace Chaos { class FSingleParticlePhysicsProxy ; struct FPBDRigidDirtyParticlesBufferOut { TArray<FSingleParticlePhysicsProxy*> DirtyGameThreadParticles ; TSet<IPhysicsProxyBase*> PhysicsParticleProxies ; } ; class FPBDRigidDirtyParticlesBuffer { class FPBDRigidDirtyParticlesBufferAccessor ; public :)",
    "insertText": "FPBDRigidDirtyParticlesBuffer(const Chaos::EMultiBufferMode& InBufferMode, bool bInSingleThreaded)"
  },
  {
    "label": "CaptureSolverData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureSolverData(FPBDRigidsSolver* Solver)"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadLock()"
  },
  {
    "label": "ReadUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadUnlock()"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLock()"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteUnlock()"
  },
  {
    "label": "GetSolverOutData()",
    "kind": "Method",
    "detail": "Function (private : const FPBDRigidDirtyParticlesBufferOut*)",
    "insertText": "GetSolverOutData()"
  },
  {
    "label": "BufferPhysicsResults()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BufferPhysicsResults(FPBDRigidsSolver* Solver)"
  },
  {
    "label": "FlipDataOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipDataOut()"
  },
  {
    "label": "FlipProducer()",
    "kind": "Method",
    "detail": "Function (SolverDataOut ->)",
    "insertText": "FlipProducer()"
  },
  {
    "label": "FPBDRigidDirtyParticlesBufferAccessor()",
    "kind": "Method",
    "detail": "Function (} Chaos::EMultiBufferMode BufferMode ; FRWLock ResourceOutLock ; bool bUseLock ; TUniquePtr<IBufferResource<FPBDRigidDirtyParticlesBufferOut>> SolverDataOut ; } ; class FPBDRigidDirtyParticlesBufferAccessor { public :)",
    "insertText": "FPBDRigidDirtyParticlesBufferAccessor(FPBDRigidDirtyParticlesBuffer* InManager) : Manager(InManager)"
  },
  {
    "label": "FPBDRigidDirtyParticlesBufferAccessor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDRigidDirtyParticlesBufferAccessor()"
  }
]