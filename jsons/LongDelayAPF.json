[
  {
    "label": "FLongDelayAPF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLongDelayAPF"
  },
  {
    "label": "FLongDelayAPF()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / BufferVectorOperations . h \" # include \" DSP / AlignedBlockBuffer . h \" namespace Audio { class FLongDelayAPF { public :)",
    "insertText": "FLongDelayAPF(float InG, int32 InNumDelaySamples, int32 InMaxNumInternalBufferSamples)"
  },
  {
    "label": "FLongDelayAPF()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLongDelayAPF()"
  },
  {
    "label": "SetG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetG(float InG)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (G = InG ; } void)",
    "insertText": "ProcessAudio(const FAlignedFloatBuffer& InSamples, FAlignedFloatBuffer& OutSamples)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(FAlignedFloatBuffer& Samples)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const FAlignedFloatBuffer& InSamples, FAlignedFloatBuffer& OutSamples, FAlignedFloatBuffer& OutDelaySamples)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ProcessAudioBlock()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ProcessAudioBlock(const float* InSamples, const float* InDelaySamples, const int32 InNum, float* OutSamples, float* OutDelaySamples)"
  },
  {
    "label": "GetNumInternalBufferSamples()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumInternalBufferSamples()"
  }
]