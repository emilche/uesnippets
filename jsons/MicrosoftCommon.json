[
  {
    "label": "GetComErrorDescription()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" VideoCommon . h \" # if PLATFORM_MICROSOFT namespace AVEncoder { const FString)",
    "insertText": "GetComErrorDescription(HRESULT Res)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32 BufSize = 4 0 9 6 ; WIDECHAR buffer [ 4 0 9 6 ] ;)",
    "insertText": "if(::FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM, nullptr, Res, MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), buffer, sizeof(buffer) / sizeof(*buffer), nullptr))"
  },
  {
    "label": "CHECK_HR()",
    "kind": "Method",
    "detail": "Function (} } # include \" Microsoft / AllowMicrosoftPlatformTypes . h \" # define)",
    "insertText": "CHECK_HR(COM_call)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ HRESULT Res = COM_call ; \\)",
    "insertText": "if(FAILED(Res))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_LOG(LogAVEncoder, Error, TEXT(\"`\" #COM_call \"` failed: 0x%X - %s\"), Res, *GetComErrorDescription(Res))"
  },
  {
    "label": "CHECK_HR_DEFAULT()",
    "kind": "Method",
    "detail": "Function (\\ return false ; \\ } \\ } # define)",
    "insertText": "CHECK_HR_DEFAULT(COM_call)"
  },
  {
    "label": "CHECK_HR_COM()",
    "kind": "Method",
    "detail": "Function (\\ return { } ; \\ } \\ } # define)",
    "insertText": "CHECK_HR_COM(COM_call)"
  },
  {
    "label": "CHECK_HR_VOID()",
    "kind": "Method",
    "detail": "Function (\\ return Res ; \\ } \\ } # define)",
    "insertText": "CHECK_HR_VOID(COM_call)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ return ; \\ } \\ } # include \" Microsoft / HideMicrosoftPlatformTypes . h \" const GUID CLSID_AACMFTEncoder = { 0 x93AF0C51,0 x2275,0 x45d2,{ 0 xA3,0 x5B,0 xF2,0 xBA,0 x21,0 xCA,0 xED,0 x00 } } ; const GUID CLSID_MP3ACMCodecWrapper = { 0 x11103421,0 x354c,0 x4cca,{ 0 xa7,0 xa3,0 x1a,0 xff,0 x9a,0 x5b,0 x67,0 x01 } } ; const GUID CLSID_CMSH264EncoderMFT = { 0 x6ca50344,0 x051a,0 x4ded,{ 0 x97,0 x79,0 xa4,0 x33,0 x05,0 x16,0 x5e,0 x35 } } ; const GUID CLSID_VideoProcessorMFT = { 0 x88753b26,0 x5b24,0 x49bd,{ 0 xb2,0 xe7,0 xc,0 x44,0 x5c,0 x78,0 xc9,0 x82 } } ; #)",
    "insertText": "if(WINVER < _WIN32_WINNT_WIN8)"
  }
]