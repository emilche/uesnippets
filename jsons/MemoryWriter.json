[
  {
    "label": "TMemoryWriterBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMemoryWriterBase"
  },
  {
    "label": "FMemoryWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryWriter"
  },
  {
    "label": "FMemoryWriter64",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryWriter64"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / NumericLimits . h \" # include \" Containers / UnrealString . h \" # include \" UObject / NameTypes . h \" # include \" Logging / LogMacros . h \" # include \" CoreGlobals . h \" # include \" Serialization / MemoryArchive . h \" template<ArrayAllocatorType> class TMemoryWriterBase : public FMemoryArchive { using IndexSizeType = ArrayAllocatorType::SizeType ; int32 IndexSize =)",
    "insertText": "sizeof(IndexSizeType)"
  },
  {
    "label": "TMemoryWriterBase()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TMemoryWriterBase(TArray<uint8, ArrayAllocatorType>& InBytes, bool bIsPersistent = false, bool bSetOffset = false, const FName InArchiveName = NAME_None ) : FMemoryArchive() , Bytes(InBytes) , ArchiveName(InArchiveName)"
  },
  {
    "label": "SetIsSaving()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetIsSaving(true)"
  },
  {
    "label": "SetIsPersistent()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetIsPersistent(bIsPersistent)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Offset = InBytes .)",
    "insertText": "Num()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Serialize(void* Data, int64 Num)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (IndexSizeType MaxValue = TNumericLimits<IndexSizeType)",
    "insertText": "Max()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (} } Bytes .)",
    "insertText": "AddUninitialized((IndexSizeType)NumBytesToAdd)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check((Offset + Num) <= Bytes.Num())"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&Bytes[(IndexSizeType)Offset], Data, Num)"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (Offset + = Num ; } } FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Printf(TEXT(\"FMemoryWriter%d\"), IndexSize)"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TotalSize()"
  }
]