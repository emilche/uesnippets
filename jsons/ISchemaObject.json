[
  {
    "label": "SCHEMA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCHEMA"
  },
  {
    "label": "ISchemaObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISchemaObject"
  },
  {
    "label": "getSchemaObjTitle()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_ISchemaObject_h # define Alembic_Abc_ISchemaObject_h # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / IObject . h> # include<Alembic / Abc / ISchema . h> # include<Alembic / Abc / Argument . h> # include<Alembic / Abc / Base . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { template<class SCHEMA> class ISchemaObject : public IObject { public : typedef SCHEMA schema_type ; typedef ISchemaObject<SCHEMA> this_type ; std::string)",
    "insertText": "getSchemaObjTitle()"
  },
  {
    "label": "getSchemaTitle()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getSchemaTitle()"
  },
  {
    "label": "matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "matches(const AbcA::MetaData &iMetaData, SchemaInterpMatching iMatching = kStrictMatching)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(iMatching == kSchemaTitleMatching)"
  },
  {
    "label": "matches()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "matches(const AbcA::ObjectHeader &iHeader, SchemaInterpMatching iMatching = kStrictMatching)"
  },
  {
    "label": "ISchemaObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ISchemaObject()"
  },
  {
    "label": "ISchemaObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ISchemaObject(const IObject & iParent, const std::string &iName, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument() ) : IObject( iParent, iName, GetErrorHandlerPolicyFromArgs( iArg0, iArg1 ))"
  },
  {
    "label": "setInto()",
    "kind": "Method",
    "detail": "Function (Arguments args ; iArg0 .)",
    "insertText": "setInto(args)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"ISchemaObject::ISchemaObject( IObject )\")"
  },
  {
    "label": "getHeader()",
    "kind": "Method",
    "detail": "Function (const AbcA::ObjectHeader& oheader = this ->)",
    "insertText": "getHeader()"
  },
  {
    "label": "ABCA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABCA_ASSERT(matches( oheader, args.getSchemaInterpMatching() ), \"Incorrect match of schema: \" << oheader.getMetaData().get( \"schema\" ) << \" to expected: \" << getSchemaTitle())"
  },
  {
    "label": "ABCA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABCA_ASSERT(m_object, \"Bad child: \" << iName)"
  },
  {
    "label": "SCHEMA()",
    "kind": "Method",
    "detail": "Function (m_schema =)",
    "insertText": "SCHEMA(m_object->getProperties(), SCHEMA::getDefaultSchemaName(), this->getErrorHandlerPolicy(), args.getSchemaInterpMatching())"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_END_RESET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_END_RESET()"
  },
  {
    "label": "ISchemaObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ISchemaObject(const IObject & iObject, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument() ) : IObject( iObject)"
  },
  {
    "label": "getErrorHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getErrorHandler().setPolicy( GetErrorHandlerPolicy( iObject, iArg0, iArg1 ))"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"ISchemaObject::ISchemaObject( wrap )\")"
  },
  {
    "label": "ABCA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABCA_ASSERT(matches( oheader.getMetaData(), GetSchemaInterpMatching( iArg0, iArg1 ) ), \"Incorrect match of schema: \" << oheader.getMetaData().get( \"schemaObjTitle\" ) << \" to expected: \" << getSchemaObjTitle())"
  },
  {
    "label": "SCHEMA()",
    "kind": "Method",
    "detail": "Function (m_schema =)",
    "insertText": "SCHEMA(this->getProperties(), SCHEMA::getDefaultSchemaName(), this->getErrorHandlerPolicy(), GetSchemaInterpMatching( iArg0, iArg1 ))"
  },
  {
    "label": "ISchemaObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ISchemaObject(const IObject & iObject, WrapExistingFlag iFlag, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument() ) : IObject( iObject)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"ISchemaObject::ISchemaObject( wrapflag )\")"
  },
  {
    "label": "getSchema()",
    "kind": "Method",
    "detail": "Function (} SCHEMA&)",
    "insertText": "getSchema()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (m_schema .)",
    "insertText": "reset()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(this_type::valid())"
  },
  {
    "label": "GetErrorHandlerPolicy()",
    "kind": "Method",
    "detail": "Function (protected : SCHEMA m_schema ; } ; ErrorHandler::Policy)",
    "insertText": "GetErrorHandlerPolicy(const Argument &iArg0, const Argument &iArg1)"
  }
]