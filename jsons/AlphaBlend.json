[
  {
    "label": "UCurveFloat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveFloat"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAlphaBlendArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlphaBlendArgs"
  },
  {
    "label": "FAlphaBlend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlphaBlend"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" AlphaBlend . generated . h \" class UCurveFloat ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Linear = 0)",
    "insertText": "UMETA(Grouping = Linear, DisplayName = \"Linear\", ToolTip = \"Linear interpolation\"), Cubic UMETA(Grouping = Cubic, DisplayName = \"Cubic In\", ToolTip = \"Cubic-in interpolation\"), HermiteCubic UMETA(Grouping = Cubic, DisplayName = \"Hermite-Cubic InOut\", ToolTip = \"Hermite-Cubic\"), Sinusoidal UMETA(Grouping = Sinusoidal, DisplayName = \"Sinusoidal\", ToolTip = \"Sinusoidal interpolation\"), QuadraticInOut UMETA(Grouping = Quadratic, DisplayName = \"Quadratic InOut\", ToolTip = \"Quadratic in-out interpolation\"), CubicInOut UMETA(Grouping = Cubic, DisplayName = \"Cubic InOut\", ToolTip = \"Cubic in-out interpolation\"), QuarticInOut UMETA(Grouping = Quartic, DisplayName = \"Quartic InOut\", ToolTip = \"Quartic in-out interpolation\"), QuinticInOut UMETA(Grouping = Quintic, DisplayName = \"Quintic InOut\", ToolTip = \"Quintic in-out interpolation\"), CircularIn UMETA(Grouping = Circular, DisplayName = \"Circular In\", ToolTip = \"Circular-in interpolation\"), CircularOut UMETA(Grouping = Circular, DisplayName = \"Circular Out\", ToolTip = \"Circular-out interpolation\"), CircularInOut UMETA(Grouping = Circular, DisplayName = \"Circular InOut\", ToolTip = \"Circular in-out interpolation\"), ExpIn UMETA(Grouping = Exponential, DisplayName = \"Exponential In\", ToolTip = \"Exponential-in interpolation\"), ExpOut UMETA(Grouping = Exponential, DisplayName = \"Exponential Out\", ToolTip = \"Exponential-Out interpolation\"), ExpInOut UMETA(Grouping = Exponential, DisplayName = \"Exponential InOut\", ToolTip = \"Exponential in-out interpolation\"), Custom UMETA(Grouping = Custom, DisplayName = \"Custom\", ToolTip = \"Custom interpolation, will use custom curve inside an FAlphaBlend or linear if none has been set\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() ENGINE_API FAlphaBlendArgs()"
  },
  {
    "label": "FAlphaBlendArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAlphaBlendArgs(float InBlendTime)"
  },
  {
    "label": "FAlphaBlendArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAlphaBlendArgs(const struct FAlphaBlend& InAlphaBlend)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() private: UPROPERTY(EditAnywhere, Category = \"Blend\", meta=(DisplayAfter=\"BlendOption\"))"
  },
  {
    "label": "FAlphaBlend()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAlphaBlend(float NewBlendTime = 0.2f)"
  },
  {
    "label": "FAlphaBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAlphaBlend(const FAlphaBlend& Other, float NewBlendTime)"
  },
  {
    "label": "FAlphaBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAlphaBlend(const FAlphaBlendArgs& InArgs)"
  },
  {
    "label": "SetBlendOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendOption(EAlphaBlendOption InBlendOption)"
  },
  {
    "label": "SetCustomCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomCurve(UCurveFloat* InCustomCurve)"
  },
  {
    "label": "SetBlendTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendTime(float InBlendTime)"
  },
  {
    "label": "SetValueRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValueRange(float Begin, float Desired)"
  },
  {
    "label": "SetDesiredValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDesiredValue(float InDesired)"
  },
  {
    "label": "SetAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlpha(float InAlpha)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Update(float InDeltaTime)"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "GetAlpha()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAlpha()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (float AlphaLerp ; float AlphaBlend ; float BlendTimeRemaining ; float BlendedValue ; float BeginValue ; float DesiredValue ; public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "ResetAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAlpha()"
  },
  {
    "label": "ResetBlendTime()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ResetBlendTime()"
  },
  {
    "label": "AlphaToBlendOption()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "AlphaToBlendOption()"
  }
]