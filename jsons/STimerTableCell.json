[
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "FTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTable"
  },
  {
    "label": "FTableColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableColumn"
  },
  {
    "label": "STimerTableCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimerTableCell"
  },
  {
    "label": "IToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolTip"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Insights / TimingProfiler / ViewModels / TimerNode . h \" class ITableRow ; namespace UE::Insights { class FTable ; class FTableColumn ; } namespace UE::Insights::TimingProfiler {)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FSetHoveredTimerTableCell, TSharedPtr<FTable> , TSharedPtr<FTableColumn> , FTimerNodePtr)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class STimerTableCell : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STimerTableCell)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FSetHoveredTimerTableCell, OnSetHoveredCell) SLATE_ATTRIBUTE(FText, HighlightText) SLATE_ARGUMENT(TSharedPtr<FTable>, TablePtr) SLATE_ARGUMENT(TSharedPtr<FTableColumn>, ColumnPtr) SLATE_ARGUMENT(FTimerNodePtr, TimerNodePtr) SLATE_ARGUMENT(bool, IsNameColumn) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<ITableRow>& TableRow)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FArguments& InArgs, const TSharedRef<ITableRow>& TableRow)"
  },
  {
    "label": "GenerateWidgetForNameColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForNameColumn(const FArguments& InArgs, const TSharedRef<ITableRow>& TableRow)"
  },
  {
    "label": "GenerateWidgetForStatsColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForStatsColumn(const FArguments& InArgs, const TSharedRef<ITableRow>& TableRow)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(MyGeometry, MouseEvent)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (SetHoveredCellDelegate .)",
    "insertText": "ExecuteIfBound(TablePtr, ColumnPtr, TimerNodePtr)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(MouseEvent)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (SetHoveredCellDelegate .)",
    "insertText": "ExecuteIfBound(nullptr, nullptr, nullptr)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(MyGeometry, DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(DragDropEvent)"
  },
  {
    "label": "GetHotPathIconVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetHotPathIconVisibility()"
  },
  {
    "label": "GetBoxVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetBoxVisibility()"
  },
  {
    "label": "GetHintIconVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetHintIconVisibility()"
  },
  {
    "label": "GetRowToolTip()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<class IToolTip>)",
    "insertText": "GetRowToolTip(const TSharedRef<ITableRow>& TableRow)"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetExtraDisplayName()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetExtraDisplayName()"
  },
  {
    "label": "HasExtraDisplayName()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "HasExtraDisplayName()"
  },
  {
    "label": "GetValueAsText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetValueAsText()"
  },
  {
    "label": "GetColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetColorAndOpacity()"
  },
  {
    "label": "IsFiltered()",
    "kind": "Method",
    "detail": "Function (const FLinearColor TextColor = TimerNodePtr ->)",
    "insertText": "IsFiltered() ? FLinearColor(1.0f, 1.0f, 1.0f, 0.5f) : FLinearColor(1.0f, 1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "IsFiltered()",
    "kind": "Method",
    "detail": "Function (const FLinearColor TextColor = TimerNodePtr ->)",
    "insertText": "IsFiltered() ? FLinearColor(0.5f, 0.5f, 0.5f, 0.5f) : FLinearColor(0.5f, 0.5f, 0.5f, 1.0f)"
  },
  {
    "label": "IsFiltered()",
    "kind": "Method",
    "detail": "Function (const FLinearColor TextColor = TimerNodePtr ->)",
    "insertText": "IsFiltered() ? FLinearColor(1.0f, 1.0f, 1.0f, 0.5f) : TimerNodePtr->GetAggregatedStats().InstanceCount == 0 ? FLinearColor(1.0f, 1.0f, 1.0f, 0.6f) : FLinearColor(1.0f, 1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "GetShadowColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetShadowColorAndOpacity()"
  },
  {
    "label": "IsFiltered()",
    "kind": "Method",
    "detail": "Function (const FLinearColor ShadowColor = TimerNodePtr ->)",
    "insertText": "IsFiltered() ? FLinearColor(0.f, 0.f, 0.f, 0.25f) : FLinearColor(0.0f, 0.0f, 0.0f, 0.5f)"
  }
]