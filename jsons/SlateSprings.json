[
  {
    "label": "TSpring1D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSpring1D"
  },
  {
    "label": "FSpringConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpringConfig"
  },
  {
    "label": "FSpringConfig()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" template<FloatType> class TSpring1D { public : class FSpringConfig { public : FloatType SpringConstant ; FloatType SpringLength ; FloatType DampConstant ; FloatType SnappingEpsilon ; bool bSkipAnimationOnHitches ;)",
    "insertText": "FSpringConfig() : SpringConstant( FloatType( 20.0 ) ), SpringLength( FloatType( 0.0 ) ), DampConstant( FloatType( 0.5 ) ), SnappingEpsilon( FloatType( 0.01 ) ), bSkipAnimationOnHitches( true)"
  },
  {
    "label": "TSpring1D()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "TSpring1D() : Position( 0.0 ), Target( 0.0 ), PreviousTarget( 0.0)"
  },
  {
    "label": "TSpring1D()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSpring1D(FloatType InPosition ) : Position( InPosition ), Target( InPosition ), PreviousTarget( InPosition)"
  },
  {
    "label": "SetConfig()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConfig(const FSpringConfig& InConfig)"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (Config = InConfig ; } void)",
    "insertText": "SetPosition(FloatType InPosition)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (Position = InPosition ; Target = InPosition ; PreviousTarget = InPosition ; } FloatType)",
    "insertText": "GetPosition()"
  },
  {
    "label": "GetTarget()",
    "kind": "Method",
    "detail": "Function (Target = InTarget ; } FloatType)",
    "insertText": "GetTarget()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float MaxQuantum = 1 . 0 f / 8 . 0 f ;)",
    "insertText": "if(InQuantum > MaxQuantum)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Position = PreviousTarget = Target ; } else { InQuantum = MaxQuantum ; } } const FloatType Disp = Target - Position ; const FloatType DispLength =)",
    "insertText": "Abs(Disp)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const FloatType ForceDirection = Disp> = 0 . 0 f ? 1 . 0 f : - 1 . 0 f ; const FloatType TargetDisp = Target - PreviousTarget ; const FloatType VelocityOfTarget = TargetDisp* InQuantum ; const FloatType DistBetweenDisplacements =)",
    "insertText": "Abs(Disp - VelocityOfTarget)"
  },
  {
    "label": "FloatType()",
    "kind": "Method",
    "detail": "Function (const FloatType ForceAmount = Config . SpringConstant* FMath::Max<)",
    "insertText": "FloatType(0.0, DispLength - Config.SpringLength)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Position + = ForceDirection*)",
    "insertText": "Min(DispLength, ForceAmount * InQuantum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FMath::Abs( Position - Target ) < Config.SnappingEpsilon)"
  }
]