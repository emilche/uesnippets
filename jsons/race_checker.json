[
  {
    "label": "RaceCheckerScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RaceCheckerScope"
  },
  {
    "label": "RTC_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_LOCKABLE"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "RTC_SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_SCOPED_LOCKABLE"
  },
  {
    "label": "RaceChecker()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_RACE_CHECKER_H_ # define RTC_BASE_RACE_CHECKER_H_ # include \" rtc_base / checks . h \" # include \" rtc_base / platform_thread_types . h \" # include \" rtc_base / thread_annotations . h \" namespace rtc { namespace internal { class RaceCheckerScope ; } class RTC_LOCKABLE RaceChecker { public : class internal::RaceCheckerScope ;)",
    "insertText": "RaceChecker()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Acquire() const RTC_EXCLUSIVE_LOCK_FUNCTION()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release() const RTC_UNLOCK_FUNCTION()"
  },
  {
    "label": "RaceCheckerScope()",
    "kind": "Method",
    "detail": "Function (volatile int access_count_ = 0 ; volatile PlatformThreadRef accessing_thread_ ; } ; namespace internal { class RTC_SCOPED_LOCKABLE RaceCheckerScope { public :)",
    "insertText": "RaceCheckerScope(const RaceChecker* race_checker) RTC_EXCLUSIVE_LOCK_FUNCTION(race_checker)"
  },
  {
    "label": "RaceDetected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RaceDetected()"
  },
  {
    "label": "RaceCheckerScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RaceCheckerScope() RTC_UNLOCK_FUNCTION()"
  },
  {
    "label": "RaceCheckerScopeDoNothing()",
    "kind": "Method",
    "detail": "Function (private : const RaceChecker* const race_checker_ ; const bool race_check_ok_ ; } ; class RTC_SCOPED_LOCKABLE RaceCheckerScopeDoNothing { public :)",
    "insertText": "RaceCheckerScopeDoNothing(const RaceChecker* race_checker) RTC_EXCLUSIVE_LOCK_FUNCTION(race_checker)"
  },
  {
    "label": "RaceCheckerScopeDoNothing()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RaceCheckerScopeDoNothing() RTC_UNLOCK_FUNCTION()"
  },
  {
    "label": "RTC_CHECK_RUNS_SERIALIZED()",
    "kind": "Method",
    "detail": "Function (} } ; } } # define)",
    "insertText": "RTC_CHECK_RUNS_SERIALIZED(x) \\ rtc::internal::RaceCheckerScope race_checker(x)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RTC_CHECK(!race_checker.RaceDetected()) #if RTC_DCHECK_IS_ON #define RTC_DCHECK_RUNS_SERIALIZED(x) \\ rtc::internal::RaceCheckerScope race_checker(x)"
  }
]