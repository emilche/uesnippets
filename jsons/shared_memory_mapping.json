[
  {
    "label": "PlatformSharedMemoryRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PlatformSharedMemoryRegion"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SharedMemoryTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedMemoryTracker"
  },
  {
    "label": "ReadOnlySharedMemoryRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReadOnlySharedMemoryRegion"
  },
  {
    "label": "WritableSharedMemoryRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WritableSharedMemoryRegion"
  },
  {
    "label": "UnsafeSharedMemoryRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnsafeSharedMemoryRegion"
  },
  {
    "label": "SharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_SHARED_MEMORY_MAPPING_H_ # define BASE_MEMORY_SHARED_MEMORY_MAPPING_H_ # include<cstddef> # include<type_traits> # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / containers / span . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / shared_memory_mapper . h \" # include \" base / unguessable_token . h \" namespace base { namespace subtle { class PlatformSharedMemoryRegion ; } class BASE_EXPORT SharedMemoryMapping { public :)",
    "insertText": "SharedMemoryMapping()"
  },
  {
    "label": "SharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SharedMemoryMapping(SharedMemoryMapping&& mapping)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SharedMemoryMapping&)",
    "insertText": "operator(SharedMemoryMapping&& mapping)"
  },
  {
    "label": "SharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SharedMemoryMapping(const SharedMemoryMapping&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SharedMemoryMapping&)",
    "insertText": "operator(const SharedMemoryMapping&)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(IsValid())"
  },
  {
    "label": "guid()",
    "kind": "Method",
    "detail": "Function (} const UnguessableToken&)",
    "insertText": "guid()"
  },
  {
    "label": "raw_memory_ptr()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "raw_memory_ptr()"
  },
  {
    "label": "Unmap()",
    "kind": "Method",
    "detail": "Function (} private : class SharedMemoryTracker ; void)",
    "insertText": "Unmap()"
  },
  {
    "label": "ReadOnlySharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (span<uint8_t> mapped_span_ ; size_t size_ = 0 ; UnguessableToken guid_ ; raw_ptr<SharedMemoryMapper> mapper_ = nullptr ; } ; class BASE_EXPORT ReadOnlySharedMemoryMapping : public SharedMemoryMapping { public :)",
    "insertText": "ReadOnlySharedMemoryMapping()"
  },
  {
    "label": "ReadOnlySharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadOnlySharedMemoryMapping(const ReadOnlySharedMemoryMapping&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ReadOnlySharedMemoryMapping&)",
    "insertText": "operator(const ReadOnlySharedMemoryMapping&)"
  },
  {
    "label": "ReadOnlySharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadOnlySharedMemoryMapping(ReadOnlySharedMemoryMapping&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ReadOnlySharedMemoryMapping&)",
    "insertText": "operator(ReadOnlySharedMemoryMapping&&)"
  },
  {
    "label": "memory()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "memory()"
  },
  {
    "label": "GetMemoryAs()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "GetMemoryAs()"
  },
  {
    "label": "GetMemoryAsSpan()",
    "kind": "Method",
    "detail": "Function (} template<T> span<const T>)",
    "insertText": "GetMemoryAsSpan()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t count =)",
    "insertText": "size() / sizeof(T)"
  },
  {
    "label": "GetMemoryAsSpan()",
    "kind": "Method",
    "detail": "Function (} template<T> span<const T>)",
    "insertText": "GetMemoryAsSpan(size_t count)"
  },
  {
    "label": "ReadOnlySharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (} private : class ReadOnlySharedMemoryRegion ;)",
    "insertText": "ReadOnlySharedMemoryMapping(span<uint8_t> mapped_span, size_t size, const UnguessableToken& guid, SharedMemoryMapper* mapper)"
  },
  {
    "label": "WritableSharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT WritableSharedMemoryMapping : public SharedMemoryMapping { public :)",
    "insertText": "WritableSharedMemoryMapping()"
  },
  {
    "label": "WritableSharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritableSharedMemoryMapping(const WritableSharedMemoryMapping&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WritableSharedMemoryMapping&)",
    "insertText": "operator(const WritableSharedMemoryMapping&)"
  },
  {
    "label": "WritableSharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritableSharedMemoryMapping(WritableSharedMemoryMapping&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WritableSharedMemoryMapping&)",
    "insertText": "operator(WritableSharedMemoryMapping&&)"
  },
  {
    "label": "MapAtForTesting()",
    "kind": "Method",
    "detail": "Function (} private : WritableSharedMemoryMapping)",
    "insertText": "MapAtForTesting(subtle::PlatformSharedMemoryRegion* region, uint64_t offset, size_t size)"
  },
  {
    "label": "WritableSharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (class ReadOnlySharedMemoryRegion ; class WritableSharedMemoryRegion ; class UnsafeSharedMemoryRegion ;)",
    "insertText": "WritableSharedMemoryMapping(span<uint8_t> mapped_span, size_t size, const UnguessableToken& guid, SharedMemoryMapper* mapper)"
  }
]