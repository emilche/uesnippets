[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FSHAHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHAHash"
  },
  {
    "label": "TFilePackageStoreEntryCArrayView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFilePackageStoreEntryCArrayView"
  },
  {
    "label": "FFilePackageStoreEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilePackageStoreEntry"
  },
  {
    "label": "FIoContainerHeaderPackageRedirect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoContainerHeaderPackageRedirect"
  },
  {
    "label": "FIoContainerHeaderLocalizedPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoContainerHeaderLocalizedPackage"
  },
  {
    "label": "FFilePackageStoreEntrySoftReferences",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilePackageStoreEntrySoftReferences"
  },
  {
    "label": "FIoContainerHeaderSoftPackageReferences",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoContainerHeaderSoftPackageReferences"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIoContainerHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoContainerHeader"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" IO / IoContainerId . h \" # include \" IO / PackageId . h \" # include \" Serialization / MappedName . h \" # include \" UObject / NameBatchSerialization . h \" class FArchive ; class FSHAHash ; template<T> class TFilePackageStoreEntryCArrayView { const uint32 ArrayNum = 0 ; const uint32 OffsetToDataFromThis = 0 ; public : uint32)",
    "insertText": "Num()"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "Data()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "end()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "operator(uint32 Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FFilePackageStoreEntry { TFilePackageStoreEntryCArrayView<FPackageId> ImportedPackages ; TFilePackageStoreEntryCArrayView<FSHAHash> ShaderMapHashes ; } ; struct FIoContainerHeaderPackageRedirect { FPackageId SourcePackageId ; FPackageId TargetPackageId ; FMappedName SourcePackageName ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FIoContainerHeaderPackageRedirect& PackageRedirect)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FIoContainerHeaderLocalizedPackage { FPackageId SourcePackageId ; FMappedName SourcePackageName ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FIoContainerHeaderLocalizedPackage& LocalizedPackage)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} ; struct FFilePackageStoreEntrySoftReferences { TFilePackageStoreEntryCArrayView<uint32> Indices ; } ; struct FIoContainerHeaderSoftPackageReferences { void)",
    "insertText": "Empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TArray<FPackageId> PackageIds ; TArray<uint8> PackageIndices ; bool bContainsSoftPackageReferences = false ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FIoContainerHeaderSoftPackageReferences& SoftPackageReferences)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; enum class EIoContainerHeaderVersion : uint32 { Initial = 0,LocalizedPackages = 1,OptionalSegmentPackages = 2,NoExportInfo = 3,SoftPackageReferences = 4,LatestPlusOne,Latest = LatestPlusOne - 1 } ; struct FIoContainerHeader { enum { Signature = 0 x496f436e } ; FIoContainerId ContainerId ; TArray<FPackageId> PackageIds ; TArray<uint8> StoreEntries ; TArray<FPackageId> OptionalSegmentPackageIds ; TArray<uint8> OptionalSegmentStoreEntries ; TArray<FDisplayNameEntryId> RedirectsNameMap ; TArray<FIoContainerHeaderLocalizedPackage> LocalizedPackages ; TArray<FIoContainerHeaderPackageRedirect> PackageRedirects ; FIoContainerHeaderSoftPackageReferences SoftPackageReferences ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FIoContainerHeader& ContainerHeader)"
  }
]