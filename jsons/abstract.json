[
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_CPYTHON_ABSTRACTOBJECT_H # error \" this header file must not be included directly \" # endif # ifdef PY_SSIZE_T_CLEAN # define _PyObject_CallMethodId _PyObject_CallMethodId_SizeT # endif)",
    "insertText": "PyAPI_FUNC(PyObject *) _PyStack_AsDict( PyObject *const *values, PyObject *kwnames)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# define _PY_FASTCALL_SMALL_STACK 5)",
    "insertText": "PyAPI_FUNC(PyObject *) _Py_CheckFunctionResult( PyThreadState *tstate, PyObject *callable, PyObject *result, const char *where)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) _PyObject_MakeTpCall( PyThreadState *tstate, PyObject *callable, PyObject *const *args, Py_ssize_t nargs, PyObject *keywords)"
  },
  {
    "label": "PY_VECTORCALL_ARGUMENTS_OFFSET()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "PY_VECTORCALL_ARGUMENTS_OFFSET(_Py_STATIC_CAST(size_t, 1) << (8 * sizeof(size_t) - 1)) static inline Py_ssize_t PyVectorcall_NARGS(size_t n)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) PyObject_Vectorcall( PyObject *callable, PyObject *const *args, size_t nargsf, PyObject *kwnames)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# define _PyObject_Vectorcall PyObject_Vectorcall # define _PyObject_VectorcallMethod PyObject_VectorcallMethod # define _PyObject_FastCallDict PyObject_VectorcallDict # define _PyVectorcall_Function PyVectorcall_Function # define _PyObject_CallOneArg PyObject_CallOneArg # define _PyObject_CallMethodNoArgs PyObject_CallMethodNoArgs # define _PyObject_CallMethodOneArg PyObject_CallMethodOneArg)",
    "insertText": "PyAPI_FUNC(PyObject *) PyObject_VectorcallDict( PyObject *callable, PyObject *const *args, size_t nargsf, PyObject *kwargs)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) PyVectorcall_Call(PyObject *callable, PyObject *tuple, PyObject *dict)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) _PyObject_FastCall( PyObject *func, PyObject *const *args, Py_ssize_t nargs)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) PyObject_CallOneArg(PyObject *func, PyObject *arg)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) PyObject_VectorcallMethod( PyObject *name, PyObject *const *args, size_t nargsf, PyObject *kwnames)"
  },
  {
    "label": "PyObject_CallMethodNoArgs()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "PyObject_CallMethodNoArgs(PyObject *self, PyObject *name)"
  },
  {
    "label": "PyObject_VectorcallMethod()",
    "kind": "Method",
    "detail": "Function (size_t nargsf = 1 | PY_VECTORCALL_ARGUMENTS_OFFSET ; return)",
    "insertText": "PyObject_VectorcallMethod(name, &self, nargsf, _Py_NULL)"
  },
  {
    "label": "PyObject_CallMethodOneArg()",
    "kind": "Method",
    "detail": "Function (} PyObject*)",
    "insertText": "PyObject_CallMethodOneArg(PyObject *self, PyObject *name, PyObject *arg)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (PyObject* args [ 2 ] = { self,arg } ; size_t nargsf = 2 | PY_VECTORCALL_ARGUMENTS_OFFSET ;)",
    "insertText": "assert(arg != NULL)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PyAPI_FUNC(PyObject *) _PyObject_CallMethod(PyObject *obj, PyObject *name, const char *format, ...)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) _PyObject_CallMethodId(PyObject *obj, _Py_Identifier *name, const char *format, ...)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) _PyObject_CallMethodId_SizeT(PyObject *obj, _Py_Identifier *name, const char *format, ...)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) _PyObject_CallMethodIdObjArgs( PyObject *obj, _Py_Identifier *name, ...)"
  },
  {
    "label": "_PyObject_VectorcallMethodId()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyObject_VectorcallMethodId(_Py_Identifier *name, PyObject *const *args, size_t nargsf, PyObject *kwnames)"
  },
  {
    "label": "_PyUnicode_FromId()",
    "kind": "Method",
    "detail": "Function (PyObject* oname =)",
    "insertText": "_PyUnicode_FromId(name)"
  },
  {
    "label": "_PyObject_CallMethodIdNoArgs()",
    "kind": "Method",
    "detail": "Function (} PyObject*)",
    "insertText": "_PyObject_CallMethodIdNoArgs(PyObject *self, _Py_Identifier *name)"
  },
  {
    "label": "_PyObject_VectorcallMethodId()",
    "kind": "Method",
    "detail": "Function (size_t nargsf = 1 | PY_VECTORCALL_ARGUMENTS_OFFSET ; return)",
    "insertText": "_PyObject_VectorcallMethodId(name, &self, nargsf, _Py_NULL)"
  },
  {
    "label": "_PyObject_CallMethodIdOneArg()",
    "kind": "Method",
    "detail": "Function (} PyObject*)",
    "insertText": "_PyObject_CallMethodIdOneArg(PyObject *self, _Py_Identifier *name, PyObject *arg)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PyAPI_FUNC(int) _PyObject_HasLen(PyObject *o)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(Py_ssize_t) PyObject_LengthHint(PyObject *o, Py_ssize_t)"
  },
  {
    "label": "PySequence_ITEM()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "PySequence_ITEM(o, i)\\ ( Py_TYPE(o)->tp_as_sequence->sq_item(o, i) ) #define PY_ITERSEARCH_COUNT 1 #define PY_ITERSEARCH_INDEX 2 #define PY_ITERSEARCH_CONTAINS 3 PyAPI_FUNC(Py_ssize_t) _PySequence_IterSearch(PyObject *seq, PyObject *obj, int operation)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _PyObject_RealIsInstance(PyObject *inst, PyObject *cls)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _PyObject_RealIsSubclass(PyObject *derived, PyObject *cls)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(char *const *) _PySequence_BytesToCharpArray(PyObject* self)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _Py_FreeCharPArray(char *const array[])"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _Py_add_one_to_index_F(int nd, Py_ssize_t *index, const Py_ssize_t *shape)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _Py_add_one_to_index_C(int nd, Py_ssize_t *index, const Py_ssize_t *shape)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_convert_optional_to_ssize_t(PyObject *, void *)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) _PyNumber_Index(PyObject *o)"
  }
]