[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedObjCClassSwizzler()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MAC_SCOPED_OBJC_CLASS_SWIZZLER_H_ # define BASE_MAC_SCOPED_OBJC_CLASS_SWIZZLER_H_ # import<objc / runtime . h> # include \" base / base_export . h \" namespace base::mac { class BASE_EXPORT ScopedObjCClassSwizzler { public :)",
    "insertText": "ScopedObjCClassSwizzler(Class target, Class source, SEL selector)"
  },
  {
    "label": "ScopedObjCClassSwizzler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedObjCClassSwizzler(Class target, SEL original, SEL alternate)"
  },
  {
    "label": "ScopedObjCClassSwizzler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedObjCClassSwizzler(const ScopedObjCClassSwizzler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedObjCClassSwizzler&)",
    "insertText": "operator(const ScopedObjCClassSwizzler&)"
  },
  {
    "label": "ScopedObjCClassSwizzler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedObjCClassSwizzler()"
  },
  {
    "label": "GetOriginalImplementation()",
    "kind": "Method",
    "detail": "Function (IMP)",
    "insertText": "GetOriginalImplementation()"
  },
  {
    "label": "InvokeOriginal()",
    "kind": "Method",
    "detail": "Function (template<Ret,. . . Args> Ret)",
    "insertText": "InvokeOriginal(id receiver, SEL selector, Args... args)"
  },
  {
    "label": "Ret()",
    "kind": "Method",
    "detail": "Function (auto func = reinterpret_cast<)",
    "insertText": "Ret(*)(id, SEL, Args...)>( GetOriginalImplementation())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Init(Class target, Class source, SEL original, SEL alternate)"
  }
]