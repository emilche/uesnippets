[
  {
    "label": "IPlatformChunkInstall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformChunkInstall"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FNamedChunkCompleteCallbackParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNamedChunkCompleteCallbackParam"
  },
  {
    "label": "IPlatformChunkInstallModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformChunkInstallModule"
  },
  {
    "label": "IPlatformChunkInstallManifest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformChunkInstallManifest"
  },
  {
    "label": "FCustomChunkMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomChunkMapping"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FChunkInstallationStatusDetail",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkInstallationStatusDetail"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformCrt . h \" # include \" Logging / LogMacros . h \" # include \" Modules / ModuleInterface . h \" # include \" UObject / NameTypes . h \" class IPlatformChunkInstall ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogChunkInstaller, Log, All)"
  },
  {
    "label": "ENABLE_PLATFORM_CHUNK_INSTALL()",
    "kind": "Method",
    "detail": "Function (# ifndef ENABLE_PLATFORM_CHUNK_INSTALL # define)",
    "insertText": "ENABLE_PLATFORM_CHUNK_INSTALL(1)"
  },
  {
    "label": "GetPlatformChunkInstall()",
    "kind": "Method",
    "detail": "Function (enum Type { DoesNotExist,NotAvailable,LocalSlow,LocalFast,BestLocation = LocalFast } ; } namespace EChunkInstallSpeed { enum Type { Paused,Slow,Fast } ; } namespace EChunkPriority { enum Type { Immediate,High,Low,} ; } namespace EChunkProgressReportingType { enum Type { ETA,PercentageComplete } ; } struct FNamedChunkCompleteCallbackParam { FName NamedChunk ; EChunkLocation::Type Location ; bool bIsInstalled ; bool bHasSucceeded ; } ; class IPlatformChunkInstallModule : public IModuleInterface { public : IPlatformChunkInstall*)",
    "insertText": "GetPlatformChunkInstall()"
  },
  {
    "label": "HasManifest()",
    "kind": "Method",
    "detail": "Function (} ; class IPlatformChunkInstallManifest { public : bool)",
    "insertText": "HasManifest()"
  },
  {
    "label": "GetChunkIDFromPakchunkIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChunkIDFromPakchunkIndex(int32 PakchunkIndex)"
  },
  {
    "label": "GetPakFilesInChunk()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetPakFilesInChunk(int32 ChunkID)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FPlatformChunkInstallDelegate, uint32, bool)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FPlatformChunkInstallMultiDelegate, uint32, bool)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FPlatformNamedChunkInstallDelegate, FName, bool)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FPlatformNamedChunkInstallMultiDelegate, FName, bool)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FPlatformNamedChunkCompleteDelegate, const FNamedChunkCompleteCallbackParam&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FPlatformNamedChunkCompleteMultiDelegate, const FNamedChunkCompleteCallbackParam&)"
  },
  {
    "label": "FCustomChunkMapping()",
    "kind": "Method",
    "detail": "Function (struct FCustomChunkMapping { enum class CustomChunkMappingType : uint8 { Main,Optional } ; FString Pattern ; uint32 ChunkID ; CustomChunkMappingType MappingType ;)",
    "insertText": "FCustomChunkMapping(FString InPattern, uint32 InChunkID, CustomChunkMappingType InMappingType) : Pattern(InPattern), ChunkID(InChunkID), MappingType(InMappingType)"
  },
  {
    "label": "IPlatformChunkInstall()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ENamedChunkType : uint8 { Invalid,OnDemand,Language,} ; struct FChunkInstallationStatusDetail { uint64 CurrentInstallSize ; uint64 FullInstallSize ; bool bIsInstalled ; } ; class IPlatformChunkInstall { public : ~)",
    "insertText": "IPlatformChunkInstall()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "GetPakchunkLocation()",
    "kind": "Method",
    "detail": "Function (EChunkLocation::Type)",
    "insertText": "GetPakchunkLocation(int32 PakchunkIndex)"
  },
  {
    "label": "GetProgressReportingTypeSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetProgressReportingTypeSupported(EChunkProgressReportingType::Type ReportType)"
  },
  {
    "label": "GetChunkProgress()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetChunkProgress(uint32 ChunkID, EChunkProgressReportingType::Type ReportType)"
  },
  {
    "label": "GetInstallSpeed()",
    "kind": "Method",
    "detail": "Function (EChunkInstallSpeed::Type)",
    "insertText": "GetInstallSpeed()"
  },
  {
    "label": "SetInstallSpeed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetInstallSpeed(EChunkInstallSpeed::Type InstallSpeed)"
  },
  {
    "label": "PrioritizePakchunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrioritizePakchunk(int32 PakchunkIndex, EChunkPriority::Type Priority)"
  },
  {
    "label": "DebugStartNextChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DebugStartNextChunk()"
  },
  {
    "label": "ExternalNotifyChunkAvailable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExternalNotifyChunkAvailable(uint32 InChunkID)"
  },
  {
    "label": "AddChunkInstallDelegate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddChunkInstallDelegate(FPlatformChunkInstallDelegate Delegate)"
  },
  {
    "label": "RemoveChunkInstallDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChunkInstallDelegate(FDelegateHandle Delegate)"
  },
  {
    "label": "SupportsNamedChunkInstall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsNamedChunkInstall()"
  },
  {
    "label": "IsNamedChunkInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNamedChunkInProgress(const FName NamedChunk)"
  },
  {
    "label": "InstallNamedChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InstallNamedChunk(const FName NamedChunk)"
  },
  {
    "label": "UninstallNamedChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UninstallNamedChunk(const FName NamedChunk)"
  },
  {
    "label": "InstallNamedChunks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InstallNamedChunks(const TArrayView<const FName>& NamedChunks)"
  },
  {
    "label": "UninstallNamedChunks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UninstallNamedChunks(const TArrayView<const FName>& NamedChunks)"
  },
  {
    "label": "GetNamedChunkLocation()",
    "kind": "Method",
    "detail": "Function (EChunkLocation::Type)",
    "insertText": "GetNamedChunkLocation(const FName NamedChunk)"
  },
  {
    "label": "GetNamedChunkProgress()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNamedChunkProgress(const FName NamedChunk, EChunkProgressReportingType::Type ReportType)"
  },
  {
    "label": "PrioritizeNamedChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrioritizeNamedChunk(const FName NamedChunk, EChunkPriority::Type Priority)"
  },
  {
    "label": "GetNamedChunkType()",
    "kind": "Method",
    "detail": "Function (ENamedChunkType)",
    "insertText": "GetNamedChunkType(const FName NamedChunk)"
  },
  {
    "label": "GetNamedChunksByType()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetNamedChunksByType(ENamedChunkType NamedChunkType)"
  },
  {
    "label": "AddNamedChunkCompleteDelegate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddNamedChunkCompleteDelegate(FPlatformNamedChunkCompleteDelegate Delegate)"
  },
  {
    "label": "RemoveNamedChunkCompleteDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNamedChunkCompleteDelegate(FDelegateHandle Delegate)"
  },
  {
    "label": "SupportsBundleSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsBundleSource()"
  },
  {
    "label": "SetAutoPakMountingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAutoPakMountingEnabled(bool bEnabled)"
  },
  {
    "label": "GetPakFilesInNamedChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPakFilesInNamedChunk(const FName NamedChunk, TArray<FString>& OutFilesInChunk)"
  },
  {
    "label": "GetNamedChunkInstallationStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNamedChunkInstallationStatus(const FName NamedChunk, FChunkInstallationStatusDetail& OutChunkStatusDetail)"
  },
  {
    "label": "IsNamedChunkForCurrentLocale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNamedChunkForCurrentLocale(const FName NamedChunk)"
  },
  {
    "label": "GetChunkLocation()",
    "kind": "Method",
    "detail": "Function (protected : EChunkLocation::Type)",
    "insertText": "GetChunkLocation(uint32 ChunkID)"
  },
  {
    "label": "PrioritizeChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrioritizeChunk(uint32 ChunkID, EChunkPriority::Type Priority)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (InstallDelegate .)",
    "insertText": "Broadcast(InChunkID, true)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (InstallDelegate .)",
    "insertText": "Remove(Delegate)"
  },
  {
    "label": "AddNamedChunkInstallDelegate()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "AddNamedChunkInstallDelegate(FPlatformNamedChunkInstallDelegate Delegate)"
  },
  {
    "label": "RemoveNamedChunkInstallDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveNamedChunkInstallDelegate(FDelegateHandle Delegate)"
  },
  {
    "label": "DoNamedChunkCompleteCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoNamedChunkCompleteCallbacks(const TArrayView<const FName>& NamedChunks, EChunkLocation::Type Location, bool bHasSucceeded)"
  }
]