[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FWebJSScripting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWebJSScripting"
  },
  {
    "label": "ObjectBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ObjectBinding"
  },
  {
    "label": "FWebJSScripting()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" WebJSFunction . h \" # include \" UObject / GCObject . h \" class Error ; class FWebJSScripting : public FGCObject { public :)",
    "insertText": "FWebJSScripting(bool bInJSBindingToLoweringEnabled) : BaseGuid(FGuid::NewGuid()) , bJSBindingToLoweringEnabled(bInJSBindingToLoweringEnabled)"
  },
  {
    "label": "BindUObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindUObject(const FString& Name, UObject* Object, bool bIsPermanent = true)"
  },
  {
    "label": "UnbindUObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindUObject(const FString& Name, UObject* Object = nullptr, bool bIsPermanent = true)"
  },
  {
    "label": "InvokeJSFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeJSFunction(FGuid FunctionId, int32 ArgCount, FWebJSParam Arguments[], bool bIsError=false)"
  },
  {
    "label": "InvokeJSErrorResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeJSErrorResult(FGuid FunctionId, const FString& Error)"
  },
  {
    "label": "GetBindingName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBindingName(const FString& Name, UObject* Object)"
  },
  {
    "label": "GetBindingName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetBindingName(const FFieldVariant& Property)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(Binding.Key)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (} } FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "PtrToGuid()",
    "kind": "Method",
    "detail": "Function (} protected : FGuid)",
    "insertText": "PtrToGuid(UObject* Ptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FGuid Guid = BaseGuid ;)",
    "insertText": "if(Ptr == nullptr)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (Guid .)",
    "insertText": "Invalidate()"
  },
  {
    "label": "UPTRINT()",
    "kind": "Method",
    "detail": "Function (} else { UPTRINT IntPtr = reinterpret_cast<)",
    "insertText": "UPTRINT(Ptr)"
  },
  {
    "label": "Guid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Guid(static_cast<uint64>(IntPtr) >> 32)"
  },
  {
    "label": "GuidToPtr()",
    "kind": "Method",
    "detail": "Function (} Guid [ 1 ] ^ = IntPtr& 0 xFFFFFFFF ; } return Guid ; } UObject*)",
    "insertText": "GuidToPtr(const FGuid& Guid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UPTRINT IntPtr = 0 ;)",
    "insertText": "if(sizeof(UPTRINT) > 4)"
  },
  {
    "label": "UPTRINT()",
    "kind": "Method",
    "detail": "Function (IntPtr = static_cast<)",
    "insertText": "UPTRINT(static_cast<uint64>(Guid[0] ^ BaseGuid[0]) << 32)"
  },
  {
    "label": "IntPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IntPtr(Guid[1] ^ BaseGuid[1])"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (UObject* Result = reinterpret_cast<)",
    "insertText": "UObject(IntPtr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BoundObjects [ Object ] . Refcount + + ; } } else { BoundObjects .)",
    "insertText": "Add(Object, {false, 1})"
  },
  {
    "label": "ReleaseBinding()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReleaseBinding(UObject* Object)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ObjectBinding& Binding = BoundObjects [ Object ] ;)",
    "insertText": "if(!Binding.bIsPermanent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Binding . Refcount - - ;)",
    "insertText": "if(Binding.Refcount <= 0)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (BoundObjects .)",
    "insertText": "Remove(Object)"
  }
]