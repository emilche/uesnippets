[
  {
    "label": "memory_order",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "memory_order"
  },
  {
    "label": "machine_load_store",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store"
  },
  {
    "label": "machine_load_store_relaxed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store_relaxed"
  },
  {
    "label": "machine_load_store_seq_cst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store_seq_cst"
  },
  {
    "label": "memory_order_map",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "memory_order_map"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__TBB_machine_H) || defined(__TBB_machine_icc_generic_H)"
  },
  {
    "label": "Intel()",
    "kind": "Method",
    "detail": "Function (use public TBB headers instead . # endif # if ! __TBB_ICC_BUILTIN_ATOMICS_PRESENT # error \")",
    "insertText": "Intel(R) C++ Compiler of at least 12.0 version is needed to use ICC intrinsics port\" #endif #define __TBB_machine_icc_generic_H #if _MSC_VER #include \"msvc_ia32_common.h\" #else #include \"gcc_ia32_common.h\" #endif #if __TBB_x86_32 #define __TBB_WORDSIZE 4 #else #define __TBB_WORDSIZE 8 #endif #define __TBB_ENDIANNESS __TBB_ENDIAN_LITTLE #ifndef __TBB_compiler_fence #if _MSC_VER #pragma intrinsic(_ReadWriteBarrier) #define __TBB_compiler_fence() _ReadWriteBarrier() #else #define __TBB_compiler_fence() __asm__ __volatile__(\"\": : :\"memory\") #endif #endif #ifndef __TBB_full_memory_fence #if _MSC_VER #pragma intrinsic(_mm_mfence) #define __TBB_full_memory_fence() _mm_mfence() #else #define __TBB_full_memory_fence() __asm__ __volatile__(\"mfence\": : :\"memory\") #endif #endif #ifndef __TBB_control_consistency_helper #define __TBB_control_consistency_helper() __TBB_compiler_fence()"
  },
  {
    "label": "convert_argument()",
    "kind": "Method",
    "detail": "Function (namespace internal { typedef enum memory_order { memory_order_relaxed,memory_order_consume,memory_order_acquire,memory_order_release,memory_order_acq_rel,memory_order_seq_cst } memory_order ; namespace icc_intrinsics_port { template<T> T)",
    "insertText": "convert_argument(T value)"
  },
  {
    "label": "load_with_acquire()",
    "kind": "Method",
    "detail": "Function (} } template<T,size_t S> struct machine_load_store { T)",
    "insertText": "load_with_acquire(const volatile T& location)"
  },
  {
    "label": "store_with_release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store_with_release(volatile T &location, T value)"
  },
  {
    "label": "__atomic_store_explicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_store_explicit(&location, icc_intrinsics_port::convert_argument(value), memory_order_release)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,size_t S> struct machine_load_store_relaxed { T)",
    "insertText": "load(const T& location)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store(T& location, T value)"
  },
  {
    "label": "__atomic_store_explicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_store_explicit(&location, icc_intrinsics_port::convert_argument(value), memory_order_relaxed)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,size_t S> struct machine_load_store_seq_cst { T)",
    "insertText": "load(const volatile T& location)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store(volatile T &location, T value)"
  },
  {
    "label": "__atomic_store_explicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_store_explicit(&location, value, memory_order_seq_cst)"
  },
  {
    "label": "__TBB_MACHINE_DEFINE_ATOMICS()",
    "kind": "Method",
    "detail": "Function (} } ; } } namespace tbb { namespace internal { namespace icc_intrinsics_port { typedef enum memory_order_map { relaxed = memory_order_relaxed,acquire = memory_order_acquire,release = memory_order_release,full_fence = memory_order_seq_cst } memory_order_map ; } } } # define)",
    "insertText": "__TBB_MACHINE_DEFINE_ATOMICS(S,T,M) \\ inline T __TBB_machine_cmpswp##S##M( volatile void *ptr, T value, T comparand)"
  },
  {
    "label": "__atomic_compare_exchange_strong_explicit()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__atomic_compare_exchange_strong_explicit(\\ (T*)ptr \\ ,&comparand \\ ,value \\ , tbb::internal::icc_intrinsics_port::M \\ , tbb::internal::icc_intrinsics_port::M)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (\\ return comparand ; \\ } \\ \\ T __TBB_machine_fetchstore # # S # #)",
    "insertText": "M(volatile void *ptr, T value)"
  },
  {
    "label": "__atomic_exchange_explicit()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "__atomic_exchange_explicit((T*)ptr, value, tbb::internal::icc_intrinsics_port::M)"
  },
  {
    "label": "__atomic_fetch_add_explicit()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "__atomic_fetch_add_explicit((T*)ptr, value, tbb::internal::icc_intrinsics_port::M)"
  },
  {
    "label": "__TBB_MACHINE_DEFINE_ATOMICS()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "__TBB_MACHINE_DEFINE_ATOMICS(1,tbb::internal::int8_t, full_fence) __TBB_MACHINE_DEFINE_ATOMICS(1,tbb::internal::int8_t, acquire) __TBB_MACHINE_DEFINE_ATOMICS(1,tbb::internal::int8_t, release) __TBB_MACHINE_DEFINE_ATOMICS(1,tbb::internal::int8_t, relaxed) __TBB_MACHINE_DEFINE_ATOMICS(2,tbb::internal::int16_t, full_fence) __TBB_MACHINE_DEFINE_ATOMICS(2,tbb::internal::int16_t, acquire) __TBB_MACHINE_DEFINE_ATOMICS(2,tbb::internal::int16_t, release) __TBB_MACHINE_DEFINE_ATOMICS(2,tbb::internal::int16_t, relaxed) __TBB_MACHINE_DEFINE_ATOMICS(4,tbb::internal::int32_t, full_fence) __TBB_MACHINE_DEFINE_ATOMICS(4,tbb::internal::int32_t, acquire) __TBB_MACHINE_DEFINE_ATOMICS(4,tbb::internal::int32_t, release) __TBB_MACHINE_DEFINE_ATOMICS(4,tbb::internal::int32_t, relaxed) __TBB_MACHINE_DEFINE_ATOMICS(8,tbb::internal::int64_t, full_fence) __TBB_MACHINE_DEFINE_ATOMICS(8,tbb::internal::int64_t, acquire) __TBB_MACHINE_DEFINE_ATOMICS(8,tbb::internal::int64_t, release) __TBB_MACHINE_DEFINE_ATOMICS(8,tbb::internal::int64_t, relaxed)"
  },
  {
    "label": "__TBB_MACHINE_DEFINE_LOAD8_GENERIC_FENCED()",
    "kind": "Method",
    "detail": "Function (namespace internal { # if __TBB_FORCE_64BIT_ALIGNMENT_BROKEN)",
    "insertText": "__TBB_MACHINE_DEFINE_LOAD8_GENERIC_FENCED(full_fence) __TBB_MACHINE_DEFINE_STORE8_GENERIC_FENCED(full_fence) __TBB_MACHINE_DEFINE_LOAD8_GENERIC_FENCED(acquire) __TBB_MACHINE_DEFINE_STORE8_GENERIC_FENCED(release) __TBB_MACHINE_DEFINE_LOAD8_GENERIC_FENCED(relaxed) __TBB_MACHINE_DEFINE_STORE8_GENERIC_FENCED(relaxed)"
  },
  {
    "label": "__TBB_machine_generic_load8acquire()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "__TBB_machine_generic_load8acquire(&location)"
  },
  {
    "label": "__TBB_machine_generic_store8release()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "__TBB_machine_generic_store8release(&location,value)"
  },
  {
    "label": "__TBB_machine_generic_load8relaxed()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "__TBB_machine_generic_load8relaxed(&location)"
  },
  {
    "label": "__TBB_machine_generic_store8relaxed()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "__TBB_machine_generic_store8relaxed(&location,value)"
  },
  {
    "label": "__TBB_machine_generic_load8full_fence()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "__TBB_machine_generic_load8full_fence(&location)"
  },
  {
    "label": "__TBB_machine_generic_store8full_fence()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "__TBB_machine_generic_store8full_fence(&location,value)"
  },
  {
    "label": "__TBB_machine_OR()",
    "kind": "Method",
    "detail": "Function (} } } ; # endif } } template<T> void)",
    "insertText": "__TBB_machine_OR(T *operand, T addend)"
  },
  {
    "label": "__atomic_fetch_or_explicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_fetch_or_explicit(operand, addend, tbb::internal::memory_order_seq_cst)"
  },
  {
    "label": "__TBB_machine_AND()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "__TBB_machine_AND(T *operand, T addend)"
  },
  {
    "label": "__atomic_fetch_and_explicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_fetch_and_explicit(operand, addend, tbb::internal::memory_order_seq_cst)"
  }
]