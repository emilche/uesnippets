[
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef POSH_USE_LIMITS_H # include<limits . h> # endif # if defined __ECC | | defined __ICC | | defined __INTEL_COMPILER # define POSH_COMPILER_STRING \" Intel C / C + + \" # define POSH_COMPILER_INTEL 1 # endif #)",
    "insertText": "if(defined __host_mips || defined __sgi ) && !defined __GNUC__ # define POSH_COMPILER_STRING \"MIPSpro C/C++\" # define POSH_COMPILER_MIPSPRO 1 #endif #if defined __hpux && !defined __GNUC__ # define POSH_COMPILER_STRING \"HP-UX CC\" # define POSH_COMPILER_HPCC 1 #endif #if defined __GNUC__ # define POSH_COMPILER_STRING \"Gnu GCC\" # define POSH_COMPILER_GCC 1 #endif #if defined __APPLE_CC__ # define POSH_COMPILER_APPLECC 1 #endif #if defined __IBMC__ || defined __IBMCPP__ # define POSH_COMPILER_STRING \"IBM C/C++\" # define POSH_COMPILER_IBM 1 #endif #if defined _MSC_VER # define POSH_COMPILER_STRING \"Microsoft Visual C++\" # define POSH_COMPILER_MSVC 1 #endif #if defined __SUNPRO_C # define POSH_COMPILER_STRING \"Sun Pro\" # define POSH_COMPILER_SUN 1 #endif #if defined __BORLANDC__ # define POSH_COMPILER_STRING \"Borland C/C++\" # define POSH_COMPILER_BORLAND 1 #endif #if defined __MWERKS__ # define POSH_COMPILER_STRING \"MetroWerks CodeWarrior\" # define POSH_COMPILER_METROWERKS 1 #endif #if defined __DECC || defined __DECCXX # define POSH_COMPILER_STRING \"Compaq/DEC C/C++\" # define POSH_COMPILER_DEC 1 #endif #if defined __WATCOMC__ # define POSH_COMPILER_STRING \"Watcom C/C++\" # define POSH_COMPILER_WATCOM 1 #endif #if !defined POSH_COMPILER_STRING # define POSH_COMPILER_STRING \"Unknown compiler\" #endif #if defined linux || defined __linux__ # define POSH_OS_LINUX 1 # define POSH_OS_STRING \"Linux\" #endif #if defined __CYGWIN32__ # define POSH_OS_CYGWIN32 1 # define POSH_OS_STRING \"Cygwin\" #endif #if defined GEKKO # define POSH_OS_GAMECUBE # define __powerpc__ # define POSH_OS_STRING \"GameCube\" #endif #if defined __MINGW32__ # define POSH_OS_MINGW 1 # define POSH_OS_STRING \"MinGW\" #endif #if defined GO32 && defined DJGPP && defined __MSDOS__ # define POSH_OS_GO32 1 # define POSH_OS_STRING \"GO32/MS-DOS\" #endif #if defined __WATCOMC__ && defined __386__ && defined __DOS__ # define POSH_OS_DOS32 1 # define POSH_OS_STRING \"DOS/32-bit\" #endif #if defined _UNICOS # define POSH_OS_UNICOS 1 # define POSH_OS_STRING \"UNICOS\" #endif #if ( defined __MWERKS__ && defined __powerc && !defined macintosh ) || defined __APPLE_CC__ || defined macosx # define POSH_OS_OSX 1 # define POSH_OS_STRING \"MacOS X\" #endif #if defined __sun__ || defined sun || defined __sun || defined __solaris__ # if defined __SVR4 || defined __svr4__ || defined __solaris__ # define POSH_OS_STRING \"Solaris\" # define POSH_OS_SOLARIS 1 # endif # if !defined POSH_OS_STRING # define POSH_OS_STRING \"SunOS\" # define POSH_OS_SUNOS 1 # endif #endif #if defined __sgi__ || defined sgi || defined __sgi # define POSH_OS_IRIX 1 # define POSH_OS_STRING \"Irix\" #endif #if defined __hpux__ || defined __hpux # define POSH_OS_HPUX 1 # define POSH_OS_STRING \"HP-UX\" #endif #if defined _AIX # define POSH_OS_AIX 1 # define POSH_OS_STRING \"AIX\" #endif #if ( defined __alpha && defined __osf__ ) # define POSH_OS_TRU64 1 # define POSH_OS_STRING \"Tru64\" #endif #if defined __BEOS__ || defined __beos__ # define POSH_OS_BEOS 1 # define POSH_OS_STRING \"BeOS\" #endif #if defined amiga || defined amigados || defined AMIGA || defined _AMIGA # define POSH_OS_AMIGA 1 # define POSH_OS_STRING \"Amiga\" #endif #if defined __unix__ # define POSH_OS_UNIX 1 # if !defined POSH_OS_STRING # define POSH_OS_STRING \"Unix-like(generic)\" # endif #endif #if defined _WIN32_WCE # define POSH_OS_WINCE 1 # define POSH_OS_STRING \"Windows CE\" #endif #if defined _XBOX # define POSH_OS_XBOX 1 # define POSH_OS_STRING \"XBOX\" #endif #if defined _WIN32 || defined WIN32 || defined __NT__ || defined __WIN32__ # define POSH_OS_WIN32 1 # if !defined POSH_OS_XBOX # if defined _WIN64 # define POSH_OS_WIN64 1 # define POSH_OS_STRING \"Win64\" # else # if !defined POSH_OS_STRING # define POSH_OS_STRING \"Win32\" # endif # endif # endif #endif #if defined __palmos__ # define POSH_OS_PALM 1 # define POSH_OS_STRING \"PalmOS\" #endif #if defined THINK_C || defined macintosh # define POSH_OS_MACOS 1 # define POSH_OS_STRING \"MacOS\" #endif #if defined GEKKO # define POSH_CPU_PPC750 1 # define POSH_CPU_STRING \"IBM PowerPC 750 (NGC)\" #endif #if defined mc68000 || defined m68k || defined __MC68K__ || defined m68000 # define POSH_CPU_68K 1 # define POSH_CPU_STRING \"MC68000\" #endif #if defined __PPC__ || defined __POWERPC__ || defined powerpc || defined _POWER || defined __ppc__ || defined __powerpc__ # define POSH_CPU_PPC 1 # if !defined POSH_CPU_STRING # if defined __powerpc64__ # define POSH_CPU_STRING \"PowerPC64\" # else # define POSH_CPU_STRING \"PowerPC\" # endif # endif #endif #if defined _CRAYT3E || defined _CRAYMPP # define POSH_CPU_CRAYT3E 1 # define POSH_CPU_STRING \"Cray T3E (Alpha 21164)\" #endif #if defined CRAY || defined _CRAY && !defined _CRAYT3E # error Non-AXP Cray systems not supported #endif #if defined _SH3 # define POSH_CPU_SH3 1 # define POSH_CPU_STRING \"Hitachi SH-3\" #endif #if defined __sh4__ || defined __SH4__ # define POSH_CPU_SH3 1 # define POSH_CPU_SH4 1 # define POSH_CPU_STRING \"Hitachi SH-4\" #endif #if defined __sparc__ || defined __sparc # if defined __arch64__ || defined __sparcv9 || defined __sparc_v9__ # define POSH_CPU_SPARC64 1 # define POSH_CPU_STRING \"Sparc/64\" # else # define POSH_CPU_STRING \"Sparc/32\" # endif # define POSH_CPU_SPARC 1 #endif #if defined ARM || defined __arm__ || defined _ARM # define POSH_CPU_STRONGARM 1 # define POSH_CPU_STRING \"ARM\" #endif #if defined AARCH64 || defined __aarch64__ || defined _AARCH64 # define POSH_CPU_STRONGARM 1 # define POSH_CPU_STRING \"AARCH64\" #endif #if defined mips || defined __mips__ || defined __MIPS__ || defined _MIPS # define POSH_CPU_MIPS 1 # if defined _R5900 # define POSH_CPU_STRING \"MIPS R5900 (PS2)\" # else # define POSH_CPU_STRING \"MIPS\" # endif #endif #if defined __ia64 || defined _M_IA64 || defined __ia64__ # define POSH_CPU_IA64 1 # define POSH_CPU_STRING \"IA64\" #endif #if defined __X86__ || defined __i386__ || defined i386 || defined _M_IX86 || defined __386__ || defined __x86_64__ || defined _M_X64 # define POSH_CPU_X86 1 # if defined __x86_64__ || defined _M_X64 # define POSH_CPU_X86_64 1 # endif # if defined POSH_CPU_X86_64 # define POSH_CPU_STRING \"AMD x86-64\" # else # define POSH_CPU_STRING \"Intel 386+\" # endif #endif #if defined __alpha || defined alpha || defined _M_ALPHA || defined __alpha__ # define POSH_CPU_AXP 1 # define POSH_CPU_STRING \"AXP\" #endif #if defined __hppa || defined hppa # define POSH_CPU_HPPA 1 # define POSH_CPU_STRING \"PA-RISC\" #endif #if !defined POSH_CPU_STRING # error POSH cannot determine target CPU # define POSH_CPU_STRING \"Unknown\" #endif #if !defined POSH_OS_STRING # if !defined FORCE_DOXYGEN # define POSH_OS_EMBEDDED 1 # endif # if defined _R5900 # define POSH_OS_STRING \"Sony PS2(embedded)\" # else # define POSH_OS_STRING \"Embedded/Unknown\" # endif #endif #if defined POSH_CPU_X86 && !defined POSH_CPU_X86_64 # if defined __GNUC__ # define POSH_CDECL __attribute__((cdecl)) # define POSH_STDCALL __attribute__((stdcall)) # define POSH_FASTCALL __attribute__((fastcall)) # elif ( defined _MSC_VER || defined __WATCOMC__ || defined __BORLANDC__ || defined __MWERKS__ ) # define POSH_CDECL __cdecl # define POSH_STDCALL __stdcall # define POSH_FASTCALL __fastcall # endif #else # define POSH_CDECL # define POSH_STDCALL # define POSH_FASTCALL #endif #if defined POSH_IMPORTEXPORT # undef POSH_IMPORTEXPORT #endif #if defined POSH_DLL # if defined POSH_OS_WIN32 # if defined _MSC_VER # if ( _MSC_VER >= 800 ) # if defined POSH_BUILDING_LIB # define POSH_IMPORTEXPORT __declspec( dllexport ) # else # define POSH_IMPORTEXPORT __declspec( dllimport ) # endif # else # if defined POSH_BUILDING_LIB # define POSH_IMPORTEXPORT __export # else # define POSH_IMPORTEXPORT # endif # endif # endif # if defined __BORLANDC__ # if ( __BORLANDC__ >= 0x500 ) # if defined POSH_BUILDING_LIB # define POSH_IMPORTEXPORT __declspec( dllexport ) # else # define POSH_IMPORTEXPORT __declspec( dllimport ) # endif # else # if defined POSH_BUILDING_LIB # define POSH_IMPORTEXPORT __export # else # define POSH_IMPORTEXPORT # endif # endif # endif # if defined __GNUC__ || defined __WATCOMC__ || defined __MWERKS__ # if defined POSH_BUILDING_LIB # define POSH_IMPORTEXPORT __declspec( dllexport ) # else # define POSH_IMPORTEXPORT __declspec( dllimport ) # endif # endif # if !defined POSH_IMPORTEXPORT # error Building DLLs not supported on this compiler (poshlib@poshlib.org if you know how) # endif # endif #endif #if !defined POSH_IMPORTEXPORT # define POSH_IMPORTEXPORT #endif #if defined FORCE_DOXYGEN # define POSH_DLL # define POSH_BUILDING_LIB # undef POSH_DLL # undef POSH_BUILDING_LIB #endif #ifdef POSH_PUBLIC_API # undef POSH_PUBLIC_API #endif #if ( ( defined _MSC_VER ) && ( _MSC_VER < 800 ) ) || ( defined __BORLANDC__ && ( __BORLANDC__ < 0x500 ) ) # define POSH_PUBLIC_API(rtype) extern rtype POSH_IMPORTEXPORT #else # define POSH_PUBLIC_API(rtype) extern POSH_IMPORTEXPORT rtype #endif #if defined POSH_CPU_X86 || defined POSH_CPU_AXP || defined POSH_CPU_STRONGARM || defined POSH_OS_WIN32 || defined POSH_OS_WINCE || defined __MIPSEL__ # define POSH_ENDIAN_STRING \"little\" # define POSH_LITTLE_ENDIAN 1 #else # define POSH_ENDIAN_STRING \"big\" # define POSH_BIG_ENDIAN 1 #endif #if defined FORCE_DOXYGEN # define POSH_LITTLE_ENDIAN #endif #define POSH_COMPILE_TIME_ASSERT(name, x) typedef int _POSH_dummy_ ## name[(x) ? 1 : -1 ] #if defined ( __LP64__ ) || defined ( __powerpc64__)"
  },
  {
    "label": "POSH_I64()",
    "kind": "Method",
    "detail": "Function (typedef unsigned long posh_u64_t ; # define)",
    "insertText": "POSH_I64(x ) ((posh_i64_t)x) # define POSH_U64( x ) ((posh_u64_t)x) # define POSH_I64_PRINTF_PREFIX \"l\" #elif defined _MSC_VER || defined __BORLANDC__ || defined __WATCOMC__ || ( defined __alpha && defined __DECC)"
  },
  {
    "label": "POSH_I64()",
    "kind": "Method",
    "detail": "Function (typedef unsigned __int64 posh_u64_t ; # define)",
    "insertText": "POSH_I64(x ) ((posh_i64_t)x) # define POSH_U64( x ) ((posh_u64_t)x)"
  },
  {
    "label": "POSH_U64()",
    "kind": "Method",
    "detail": "Function (typedef unsigned long long posh_u64_t ; # define)",
    "insertText": "POSH_U64(x ) ((posh_u64_t)(x##LL)) # define POSH_I64( x ) ((posh_i64_t)(x##LL))"
  },
  {
    "label": "POSH_I64()",
    "kind": "Method",
    "detail": "Function (typedef unsigned long posh_u64_t ; # define POSH_64BIT_INTEGER # define POSH_I64_PRINTF_PREFIX # define)",
    "insertText": "POSH_I64(x) # define POSH_U64(x) #endif #define POSH_I64_MIN POSH_I64(0x8000000000000000) #define POSH_I64_MAX POSH_I64(0x7FFFFFFFFFFFFFFF) #define POSH_U64_MIN POSH_U64(0) #define POSH_U64_MAX POSH_U64(0xFFFFFFFFFFFFFFFF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef unsigned char posh_byte_t ; typedef unsigned char posh_u8_t ; typedef signed char posh_i8_t ; # if defined POSH_USE_LIMITS_H # if CHAR_BITS> 8 # error This machine uses 9 - bit characters . This is a warning,you can comment this out now . # endif #)",
    "insertText": "if(USHRT_MAX == 65535)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef short posh_i16_t ; # else # error No 1 6 - bit type found # endif #)",
    "insertText": "if(INT_MAX == 2147483647)"
  },
  {
    "label": "elif()",
    "kind": "Method",
    "detail": "Function (typedef int posh_i32_t ; #)",
    "insertText": "elif(LONG_MAX == 2147483647)"
  },
  {
    "label": "POSH_I16_MIN()",
    "kind": "Method",
    "detail": "Function (typedef long posh_i32_t ; # else error No 3 2 - bit type found # endif # else typedef unsigned short posh_u16_t ; typedef short posh_i16_t ; # if ! defined POSH_OS_PALM typedef unsigned posh_u32_t ; typedef int posh_i32_t ; # else typedef unsigned long posh_u32_t ; typedef long posh_i32_t ; # endif # endif # define POSH_BYTE_MIN 0 # define POSH_BYTE_MAX 2 5 5 # define)",
    "insertText": "POSH_I16_MIN(( posh_i16_t ) 0x8000 ) #define POSH_I16_MAX ( ( posh_i16_t ) 0x7FFF ) #define POSH_U16_MIN 0 #define POSH_U16_MAX ( ( posh_u16_t ) 0xFFFF ) #define POSH_I32_MIN ( ( posh_i32_t ) 0x80000000 ) #define POSH_I32_MAX ( ( posh_i32_t ) 0x7FFFFFFF ) #define POSH_U32_MIN 0 #define POSH_U32_MAX ( ( posh_u32_t ) 0xFFFFFFFF ) #if !defined FORCE_DOXYGEN POSH_COMPILE_TIME_ASSERT(posh_byte_t, sizeof(posh_byte_t) == 1)"
  },
  {
    "label": "POSH_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "POSH_COMPILE_TIME_ASSERT(posh_u8_t, sizeof(posh_u8_t) == 1)"
  },
  {
    "label": "POSH_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "POSH_COMPILE_TIME_ASSERT(posh_i8_t, sizeof(posh_i8_t) == 1)"
  },
  {
    "label": "POSH_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "POSH_COMPILE_TIME_ASSERT(posh_u16_t, sizeof(posh_u16_t) == 2)"
  },
  {
    "label": "POSH_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "POSH_COMPILE_TIME_ASSERT(posh_i16_t, sizeof(posh_i16_t) == 2)"
  },
  {
    "label": "POSH_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "POSH_COMPILE_TIME_ASSERT(posh_u32_t, sizeof(posh_u32_t) == 4)"
  },
  {
    "label": "POSH_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "POSH_COMPILE_TIME_ASSERT(posh_i32_t, sizeof(posh_i32_t) == 4)"
  },
  {
    "label": "POSH_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (# if ! defined POSH_NO_FLOAT)",
    "insertText": "POSH_COMPILE_TIME_ASSERT(posh_testfloat_t, sizeof(float)==4)"
  },
  {
    "label": "POSH_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "POSH_COMPILE_TIME_ASSERT(posh_testdouble_t, sizeof(double)==8)"
  },
  {
    "label": "POSH_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (# endif # if defined POSH_64BIT_INTEGER)",
    "insertText": "POSH_COMPILE_TIME_ASSERT(posh_u64_t, sizeof(posh_u64_t) == 8)"
  },
  {
    "label": "POSH_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "POSH_COMPILE_TIME_ASSERT(posh_i64_t, sizeof(posh_i64_t) == 8)"
  },
  {
    "label": "POSH_CPU_AXP()",
    "kind": "Method",
    "detail": "Function (# endif # endif # if defined)",
    "insertText": "POSH_CPU_AXP(defined POSH_OS_TRU64 || defined POSH_OS_LINUX ) # define POSH_64BIT_POINTER 1 #endif #if defined POSH_CPU_X86_64 && defined POSH_OS_LINUX # define POSH_64BIT_POINTER 1 #endif #if defined POSH_CPU_SPARC64 || defined POSH_OS_WIN64 || defined __64BIT__ || defined __LP64 || defined _LP64 || defined __LP64__ || defined _ADDR64 || defined _CRAYC # define POSH_64BIT_POINTER 1 #endif #if defined POSH_64BIT_POINTER POSH_COMPILE_TIME_ASSERT( posh_64bit_pointer, sizeof( void * ) == 8)"
  },
  {
    "label": "POSH_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (# elif ! defined FORCE_DOXYGEN)",
    "insertText": "POSH_COMPILE_TIME_ASSERT(posh_32bit_pointer, sizeof( void * ) == 4)"
  },
  {
    "label": "POSH_GetArchString()",
    "kind": "Method",
    "detail": "Function (# endif # if defined FORCE_DOXYGEN # define POSH_64BIT_POINTER # endif # ifdef __cplusplus \" C \" { # endif const char*)",
    "insertText": "POSH_GetArchString(void)"
  },
  {
    "label": "POSH_LittleFloatBits()",
    "kind": "Method",
    "detail": "Function (# if ! defined POSH_NO_FLOAT posh_u32_t)",
    "insertText": "POSH_LittleFloatBits(float f)"
  },
  {
    "label": "POSH_BigFloatBits()",
    "kind": "Method",
    "detail": "Function (posh_u32_t)",
    "insertText": "POSH_BigFloatBits(float f)"
  },
  {
    "label": "POSH_FloatFromLittleBits()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "POSH_FloatFromLittleBits(posh_u32_t bits)"
  },
  {
    "label": "POSH_FloatFromBigBits()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "POSH_FloatFromBigBits(posh_u32_t bits)"
  },
  {
    "label": "POSH_DoubleBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "POSH_DoubleBits(double d, posh_byte_t dst[ 8 ])"
  },
  {
    "label": "POSH_SwapU16()",
    "kind": "Method",
    "detail": "Function (# endif # if defined FORCE_DOXYGEN # define POSH_NO_FLOAT # undef POSH_NO_FLOAT # endif posh_u16_t)",
    "insertText": "POSH_SwapU16(posh_u16_t u)"
  },
  {
    "label": "POSH_SwapI16()",
    "kind": "Method",
    "detail": "Function (posh_i16_t)",
    "insertText": "POSH_SwapI16(posh_i16_t u)"
  },
  {
    "label": "POSH_SwapU32()",
    "kind": "Method",
    "detail": "Function (posh_u32_t)",
    "insertText": "POSH_SwapU32(posh_u32_t u)"
  },
  {
    "label": "POSH_SwapI32()",
    "kind": "Method",
    "detail": "Function (posh_i32_t)",
    "insertText": "POSH_SwapI32(posh_i32_t u)"
  },
  {
    "label": "POSH_SwapU64()",
    "kind": "Method",
    "detail": "Function (# if defined POSH_64BIT_INTEGER posh_u64_t)",
    "insertText": "POSH_SwapU64(posh_u64_t u)"
  },
  {
    "label": "POSH_SwapI64()",
    "kind": "Method",
    "detail": "Function (posh_i64_t)",
    "insertText": "POSH_SwapI64(posh_i64_t u)"
  },
  {
    "label": "POSH_WriteU16ToLittle()",
    "kind": "Method",
    "detail": "Function (# endif posh_u16_t*)",
    "insertText": "POSH_WriteU16ToLittle(void *dst, posh_u16_t value)"
  },
  {
    "label": "POSH_WriteI16ToLittle()",
    "kind": "Method",
    "detail": "Function (posh_i16_t*)",
    "insertText": "POSH_WriteI16ToLittle(void *dst, posh_i16_t value)"
  },
  {
    "label": "POSH_WriteU32ToLittle()",
    "kind": "Method",
    "detail": "Function (posh_u32_t*)",
    "insertText": "POSH_WriteU32ToLittle(void *dst, posh_u32_t value)"
  },
  {
    "label": "POSH_WriteI32ToLittle()",
    "kind": "Method",
    "detail": "Function (posh_i32_t*)",
    "insertText": "POSH_WriteI32ToLittle(void *dst, posh_i32_t value)"
  },
  {
    "label": "POSH_WriteU16ToBig()",
    "kind": "Method",
    "detail": "Function (posh_u16_t*)",
    "insertText": "POSH_WriteU16ToBig(void *dst, posh_u16_t value)"
  },
  {
    "label": "POSH_WriteI16ToBig()",
    "kind": "Method",
    "detail": "Function (posh_i16_t*)",
    "insertText": "POSH_WriteI16ToBig(void *dst, posh_i16_t value)"
  },
  {
    "label": "POSH_WriteU32ToBig()",
    "kind": "Method",
    "detail": "Function (posh_u32_t*)",
    "insertText": "POSH_WriteU32ToBig(void *dst, posh_u32_t value)"
  },
  {
    "label": "POSH_WriteI32ToBig()",
    "kind": "Method",
    "detail": "Function (posh_i32_t*)",
    "insertText": "POSH_WriteI32ToBig(void *dst, posh_i32_t value)"
  },
  {
    "label": "POSH_ReadU16FromLittle()",
    "kind": "Method",
    "detail": "Function (posh_u16_t)",
    "insertText": "POSH_ReadU16FromLittle(const void *src)"
  },
  {
    "label": "POSH_ReadI16FromLittle()",
    "kind": "Method",
    "detail": "Function (posh_i16_t)",
    "insertText": "POSH_ReadI16FromLittle(const void *src)"
  },
  {
    "label": "POSH_ReadU32FromLittle()",
    "kind": "Method",
    "detail": "Function (posh_u32_t)",
    "insertText": "POSH_ReadU32FromLittle(const void *src)"
  },
  {
    "label": "POSH_ReadI32FromLittle()",
    "kind": "Method",
    "detail": "Function (posh_i32_t)",
    "insertText": "POSH_ReadI32FromLittle(const void *src)"
  },
  {
    "label": "POSH_ReadU16FromBig()",
    "kind": "Method",
    "detail": "Function (posh_u16_t)",
    "insertText": "POSH_ReadU16FromBig(const void *src)"
  },
  {
    "label": "POSH_ReadI16FromBig()",
    "kind": "Method",
    "detail": "Function (posh_i16_t)",
    "insertText": "POSH_ReadI16FromBig(const void *src)"
  },
  {
    "label": "POSH_ReadU32FromBig()",
    "kind": "Method",
    "detail": "Function (posh_u32_t)",
    "insertText": "POSH_ReadU32FromBig(const void *src)"
  },
  {
    "label": "POSH_ReadI32FromBig()",
    "kind": "Method",
    "detail": "Function (posh_i32_t)",
    "insertText": "POSH_ReadI32FromBig(const void *src)"
  },
  {
    "label": "POSH_WriteU64ToLittle()",
    "kind": "Method",
    "detail": "Function (# if defined POSH_64BIT_INTEGER posh_u64_t*)",
    "insertText": "POSH_WriteU64ToLittle(void *dst, posh_u64_t value)"
  },
  {
    "label": "POSH_WriteI64ToLittle()",
    "kind": "Method",
    "detail": "Function (posh_i64_t*)",
    "insertText": "POSH_WriteI64ToLittle(void *dst, posh_i64_t value)"
  },
  {
    "label": "POSH_WriteU64ToBig()",
    "kind": "Method",
    "detail": "Function (posh_u64_t*)",
    "insertText": "POSH_WriteU64ToBig(void *dst, posh_u64_t value)"
  },
  {
    "label": "POSH_WriteI64ToBig()",
    "kind": "Method",
    "detail": "Function (posh_i64_t*)",
    "insertText": "POSH_WriteI64ToBig(void *dst, posh_i64_t value)"
  },
  {
    "label": "POSH_ReadU64FromLittle()",
    "kind": "Method",
    "detail": "Function (posh_u64_t)",
    "insertText": "POSH_ReadU64FromLittle(const void *src)"
  },
  {
    "label": "POSH_ReadI64FromLittle()",
    "kind": "Method",
    "detail": "Function (posh_i64_t)",
    "insertText": "POSH_ReadI64FromLittle(const void *src)"
  },
  {
    "label": "POSH_ReadU64FromBig()",
    "kind": "Method",
    "detail": "Function (posh_u64_t)",
    "insertText": "POSH_ReadU64FromBig(const void *src)"
  },
  {
    "label": "POSH_ReadI64FromBig()",
    "kind": "Method",
    "detail": "Function (posh_i64_t)",
    "insertText": "POSH_ReadI64FromBig(const void *src)"
  }
]