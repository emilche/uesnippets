[
  {
    "label": "FChildSubObjectsInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChildSubObjectsInfo"
  },
  {
    "label": "FDependentObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDependentObjectInfo"
  },
  {
    "label": "FNetDependencyData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetDependencyData"
  },
  {
    "label": "EArrayType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EArrayType"
  },
  {
    "label": "FDependencyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDependencyInfo"
  },
  {
    "label": "FNetDependencyData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / SparseArray . h \" # include \" Iris / ReplicationSystem / ReplicationSystemTypes . h \" namespace UE::Net::Private { typedef uint32 FInternalNetRefIndex ; typedef int8 FLifeTimeConditionStorage ; } namespace UE::Net::Private { struct FChildSubObjectsInfo { const FInternalNetRefIndex* ChildSubObjects = nullptr ; const FLifeTimeConditionStorage* SubObjectLifeTimeConditions = nullptr ; uint32 NumSubObjects = 0 U ; } ; struct FDependentObjectInfo { FInternalNetRefIndex NetRefIndex = 0 U ; EDependentObjectSchedulingHint SchedulingHint = EDependentObjectSchedulingHint::Default ; } ; class FNetDependencyData { public :)",
    "insertText": "FNetDependencyData()"
  },
  {
    "label": "GetOrCreateInternalIndexArray()",
    "kind": "Method",
    "detail": "Function (typedef TArray<FInternalNetRefIndex,TInlineAllocator<8>> FInternalNetRefIndexArray ; typedef TArray<FLifeTimeConditionStorage,TInlineAllocator<8>> FSubObjectConditionalsArray ; typedef TArray<FDependentObjectInfo,TInlineAllocator<8>> FDependentObjectInfoArray ; enum EArrayType { SubObjects = 0 U,ChildSubObjects,DependentParentObjects,Count } ; template<EArrayType TypeIndex> FInternalNetRefIndexArray&)",
    "insertText": "GetOrCreateInternalIndexArray(FInternalNetRefIndex InternalIndex)"
  },
  {
    "label": "GetOrCreateDependentObjectInfoArray()",
    "kind": "Method",
    "detail": "Function (} ; FDependentObjectInfoArray&)",
    "insertText": "GetOrCreateDependentObjectInfoArray(FInternalNetRefIndex InternalIndex)"
  },
  {
    "label": "GetDependentObjectInfoArray()",
    "kind": "Method",
    "detail": "Function (FDependentObjectInfoArray*)",
    "insertText": "GetDependentObjectInfoArray(FInternalNetRefIndex InternalIndex)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FDependencyInfo* Entry = DependencyInfos .)",
    "insertText": "Find(InternalIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32 ArrayIndex = Entry ? Entry -> DependentObjectsInfoArrayIndex : FDependencyInfo::InvalidCacheIndex ;)",
    "insertText": "if(ArrayIndex != FDependencyInfo::InvalidCacheIndex)"
  },
  {
    "label": "FDependentObjectInfo()",
    "kind": "Method",
    "detail": "Function (} return MakeArrayView<const)",
    "insertText": "FDependentObjectInfo(nullptr, 0)"
  },
  {
    "label": "GetOrCreateSubObjectConditionalsArray()",
    "kind": "Method",
    "detail": "Function (} FSubObjectConditionalsArray&)",
    "insertText": "GetOrCreateSubObjectConditionalsArray(FInternalNetRefIndex InternalIndex)"
  },
  {
    "label": "GetOrCreateInternalChildSubObjectsArray()",
    "kind": "Method",
    "detail": "Function (FInternalNetRefIndexArray&)",
    "insertText": "GetOrCreateInternalChildSubObjectsArray(FInternalNetRefIndex InternalIndex, FSubObjectConditionalsArray*& OutSubObjectConditionals)"
  },
  {
    "label": "GetInternalChildSubObjectAndConditionalArrays()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInternalChildSubObjectAndConditionalArrays(FInternalNetRefIndex InternalIndex, FInternalNetRefIndexArray*& OutChildSubObjectsArray, FSubObjectConditionalsArray*& OutSubObjectConditionals)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32 ArrayIndex = Entry ? Entry -> ArrayIndices [ ChildSubObjects ] : FDependencyInfo::InvalidCacheIndex ;)",
    "insertText": "if(ArrayIndex == FDependencyInfo::InvalidCacheIndex)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (OutInfo . SubObjectLifeTimeConditions = Entry -> SubObjectConditionalArrayIndex ! = FDependencyInfo::InvalidCacheIndex ? SubObjectConditionalsStorage [ Entry -> SubObjectConditionalArrayIndex ] .)",
    "insertText": "GetData()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (OutInfo . NumSubObjects = DependentObjectsStorage [ ArrayIndex ] .)",
    "insertText": "Num()"
  },
  {
    "label": "FInternalNetRefIndex()",
    "kind": "Method",
    "detail": "Function (} return MakeArrayView<const)",
    "insertText": "FInternalNetRefIndex(nullptr, 0)"
  },
  {
    "label": "FreeStoredDependencyDataForObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FreeStoredDependencyDataForObject(FInternalNetRefIndex InternalIndex)"
  },
  {
    "label": "InvalidCacheIndex()",
    "kind": "Method",
    "detail": "Function (private : struct FDependencyInfo { uint32)",
    "insertText": "InvalidCacheIndex(0U)"
  },
  {
    "label": "GetOrCreateInternalIndexArray()",
    "kind": "Method",
    "detail": "Function (uint32 ArrayIndices [ EArrayType::Count ] = { InvalidCacheIndex,InvalidCacheIndex,InvalidCacheIndex } ; uint32 SubObjectConditionalArrayIndex = InvalidCacheIndex ; uint32 DependentObjectsInfoArrayIndex = InvalidCacheIndex ; } ; private : FInternalNetRefIndexArray&)",
    "insertText": "GetOrCreateInternalIndexArray(FInternalNetRefIndex InternalIndex, EArrayType Type)"
  },
  {
    "label": "GetOrCreateCacheEntry()",
    "kind": "Method",
    "detail": "Function (FDependencyInfo&)",
    "insertText": "GetOrCreateCacheEntry(FInternalNetRefIndex InternalIndex)"
  }
]