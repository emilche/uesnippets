[
  {
    "label": "SDL_SetError()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_error_h_ # define SDL_error_h_ # include \" SDL_stdinc . h \" # include \" begin_code . h \" # ifdef __cplusplus \" C \" { # endif DECLSPEC int SDLCALL)",
    "insertText": "SDL_SetError(SDL_PRINTF_FORMAT_STRING const char *fmt, ...) SDL_PRINTF_VARARG_FUNC(1)"
  },
  {
    "label": "SDL_GetError()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GetError(void)"
  },
  {
    "label": "SDL_GetErrorMsg()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_GetErrorMsg(char *errstr, int maxlen)"
  },
  {
    "label": "SDL_ClearError()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_ClearError(void)"
  },
  {
    "label": "SDL_OutOfMemory()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_OutOfMemory() SDL_Error(SDL_ENOMEM) #define SDL_Unsupported() SDL_Error(SDL_UNSUPPORTED) #define SDL_InvalidParamError(param) SDL_SetError(\"Parameter '%s' is invalid\", (param))"
  },
  {
    "label": "SDL_Error()",
    "kind": "Method",
    "detail": "Function (SDL_ENOMEM,SDL_EFREAD,SDL_EFWRITE,SDL_EFSEEK,SDL_UNSUPPORTED,SDL_LASTERROR } SDL_errorcode ; DECLSPEC int SDLCALL)",
    "insertText": "SDL_Error(SDL_errorcode code)"
  }
]