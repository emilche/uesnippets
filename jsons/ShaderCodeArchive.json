[
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FShaderMapEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderMapEntry"
  },
  {
    "label": "FShaderCodeEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeEntry"
  },
  {
    "label": "FSerializedShaderArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSerializedShaderArchive"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDebugStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugStats"
  },
  {
    "label": "FExtendedDebugStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExtendedDebugStats"
  },
  {
    "label": "FShaderUsageVisualizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderUsageVisualizer"
  },
  {
    "label": "FShaderCodeArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCodeArchive"
  },
  {
    "label": "FShaderPreloadEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderPreloadEntry"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "with"
  },
  {
    "label": "describes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "describes"
  },
  {
    "label": "FIoStoreShaderMapEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreShaderMapEntry"
  },
  {
    "label": "FIoStoreShaderCodeEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreShaderCodeEntry"
  },
  {
    "label": "FIoStoreShaderGroupEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreShaderGroupEntry"
  },
  {
    "label": "FIoStoreShaderCodeArchiveHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreShaderCodeArchiveHeader"
  },
  {
    "label": "FIoStoreShaderCodeArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoStoreShaderCodeArchive"
  },
  {
    "label": "FShaderGroupPreloadEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderGroupPreloadEntry"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "with"
  },
  {
    "label": "FindOrAddShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindOrAddShader(const FSHAHash& Hash, int32& OutIndex)"
  },
  {
    "label": "FindOrAddShaderMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindOrAddShaderMap(const FSHAHash& Hash, int32& OutIndex, const FShaderMapAssetPaths* AssociatedAssets)"
  },
  {
    "label": "RemoveLastAddedShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLastAddedShader()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "SaveAssetInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveAssetInfo(FArchive& Ar)"
  },
  {
    "label": "LoadAssetInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadAssetInfo(const FString& Filename)"
  },
  {
    "label": "LoadAssetInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadAssetInfo(FArchive* Ar)"
  },
  {
    "label": "CreateAsChunkFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAsChunkFrom(const FSerializedShaderArchive& Parent, const TSet<FName>& PackagesInChunk, TArray<int32>& OutShaderCodeEntriesNeeded)"
  },
  {
    "label": "CollectStatsAndDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectStatsAndDebugInfo(FDebugStats& OutDebugStats, FExtendedDebugStats* OutExtendedDebugStats)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FSerializedShaderArchive& OutArchive)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const int32 InNumShaders)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&VisualizeLock)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&VisualizeLock)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&VisualizeLock)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&VisualizeLock)"
  },
  {
    "label": "SaveShaderUsageBitmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveShaderUsageBitmap(const FString& Name, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "OnShaderPreloadFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShaderPreloadFinished(int32 ShaderIndex, const IMemoryReadStreamRef& PreloadData)"
  },
  {
    "label": "FShaderCodeArchive()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "FShaderCodeArchive(EShaderPlatform InPlatform, const FString& InLibraryDir, const FString& InLibraryName)"
  },
  {
    "label": "WaitForPreload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForPreload(FShaderPreloadEntry& ShaderPreloadEntry)"
  },
  {
    "label": "DecompressShaderWithOodle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecompressShaderWithOodle(uint8* OutDecompressedShader, int64 UncompressedSize, const uint8* CompressedShaderCode, int64 CompressedSize)"
  },
  {
    "label": "CompressShaderWithOodle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompressShaderWithOodle(uint8* OutCompressedShader, int64& OutCompressedSize, const uint8* InUncompressedShaderCode, int64 InUncompressedSize, FOodleDataCompression::ECompressor InOodleCompressor, FOodleDataCompression::ECompressionLevel InOodleLevel)"
  },
  {
    "label": "GetShaderCodeArchiveChunkId()",
    "kind": "Method",
    "detail": "Function (FIoChunkId)",
    "insertText": "GetShaderCodeArchiveChunkId(const FString& LibraryName, FName FormatName)"
  },
  {
    "label": "GetShaderCodeChunkId()",
    "kind": "Method",
    "detail": "Function (FIoChunkId)",
    "insertText": "GetShaderCodeChunkId(const FSHAHash& ShaderHash)"
  },
  {
    "label": "CreateIoStoreShaderCodeArchiveHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateIoStoreShaderCodeArchiveHeader(const FName& Format, const FSerializedShaderArchive& SerializedShaders, FIoStoreShaderCodeArchiveHeader& OutHeader)"
  },
  {
    "label": "SaveIoStoreShaderCodeArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveIoStoreShaderCodeArchive(const FIoStoreShaderCodeArchiveHeader& Header, FArchive& OutLibraryAr)"
  },
  {
    "label": "PreloadShaderGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreloadShaderGroup(int32 ShaderGroupIndex, FGraphEventArray& OutCompletionEvents, \n#if UE_SCA_DEBUG_PRELOADING\n\t\tconst FString& CallsiteInfo,\n#endif\n\t\tFCoreDelegates::FAttachShaderReadRequestFunc* AttachShaderReadRequestFuncPtr = nullptr)"
  },
  {
    "label": "SetupPreloadEntryForLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPreloadEntryForLoading(int32 ShaderGroupIndex, FShaderGroupPreloadEntry& PreloadEntry)"
  },
  {
    "label": "MarkPreloadEntrySkipped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPreloadEntrySkipped(int32 ShaderGroupIndex\n#if UE_SCA_DEBUG_PRELOADING\n\t\t, const FString& CallsiteInfo\n#endif\n\t)"
  },
  {
    "label": "ReleasePreloadEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePreloadEntry(int32 ShaderGroupIndex\n#if UE_SCA_DEBUG_PRELOADING\n\t\t, const FString& CallsiteInfo\n#endif\n\t)"
  },
  {
    "label": "GroupOnlyContainsRaytracingShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GroupOnlyContainsRaytracingShaders(int32 ShaderGroupIndex)"
  }
]