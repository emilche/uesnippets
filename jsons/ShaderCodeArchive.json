[
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FShaderMapEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderMapEntry"
  },
  {
    "label": "FShaderCodeEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeEntry"
  },
  {
    "label": "FSerializedShaderArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSerializedShaderArchive"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDebugStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugStats"
  },
  {
    "label": "FExtendedDebugStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExtendedDebugStats"
  },
  {
    "label": "FShaderUsageVisualizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderUsageVisualizer"
  },
  {
    "label": "FShaderCodeArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCodeArchive"
  },
  {
    "label": "FShaderPreloadEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderPreloadEntry"
  },
  {
    "label": "FIoStoreShaderMapEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreShaderMapEntry"
  },
  {
    "label": "FIoStoreShaderCodeEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreShaderCodeEntry"
  },
  {
    "label": "FIoStoreShaderGroupEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreShaderGroupEntry"
  },
  {
    "label": "FIoStoreShaderCodeArchiveHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreShaderCodeArchiveHeader"
  },
  {
    "label": "FIoStoreShaderCodeArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoStoreShaderCodeArchive"
  },
  {
    "label": "FShaderGroupPreloadEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderGroupPreloadEntry"
  },
  {
    "label": "UE_SCA_VISUALIZE_SHADER_USAGE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / Array . h \" # include \" Containers / HashTable . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" FileCache / FileCache . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" IO / IoDispatcher . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CoreDelegates . h \" # include \" Misc / MemoryReadStream . h \" # include \" Misc / SecureHash . h \" # include \" RHI . h \" # include \" RHIDefinitions . h \" # include \" Serialization / Archive . h \" # include \" Shader . h \" # include \" ShaderCodeLibrary . h \" # include \" Templates / RefCounting . h \" # include \" UObject / NameTypes . h \" # if WITH_EDITOR class FCbFieldView ; class FCbWriter ; # endif # ifndef USE_MMAPPED_SHADERARCHIVE # define USE_MMAPPED_SHADERARCHIVE 0 # endif # define)",
    "insertText": "UE_SCA_VISUALIZE_SHADER_USAGE(!WITH_EDITOR && UE_BUILD_DEVELOPMENT && PLATFORM_DESKTOP) #define UE_SCA_DEBUG_PRELOADING (0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint32 ShaderIndicesOffset = 0 u ; uint32 NumShaders = 0 u ; uint32 FirstPreloadIndex = 0 u ; uint32 NumPreloadEntries = 0 u ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderMapEntry& Ref)"
  },
  {
    "label": "GetFrequency()",
    "kind": "Method",
    "detail": "Function (uint64 Offset = 0 ; uint32 Size = 0 ; uint32 UncompressedSize = 0 ; uint8 Frequency ; EShaderFrequency)",
    "insertText": "GetFrequency()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderCodeEntry& Ref)"
  },
  {
    "label": "GetShaderIndices()",
    "kind": "Method",
    "detail": "Function (public : # if USE_MMAPPED_SHADERARCHIVE template<T> using TArrayType = TArrayView<T> ; private : # else template<T> using TArrayType = TArray<T> ; # endif TArrayType<FSHAHash> ShaderMapHashes ; TArrayType<FSHAHash> ShaderHashes ; TArrayType<FShaderMapEntry> ShaderMapEntries ; TArrayType<FShaderCodeEntry> ShaderEntries ; TArrayType<FFileCachePreloadEntry> PreloadEntries ; TArrayType<uint32> ShaderIndices ; public : const TArrayView<const uint32>)",
    "insertText": "GetShaderIndices()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (# if USE_MMAPPED_SHADERARCHIVE return ShaderHashes .)",
    "insertText": "Num() * ShaderHashes.GetTypeSize() + ShaderEntries.Num() * ShaderEntries.GetTypeSize() + ShaderMapHashes.Num() * ShaderMapHashes.GetTypeSize() + ShaderMapEntries.Num() * ShaderMapEntries.GetTypeSize() + PreloadEntries.Num() * PreloadEntries.GetTypeSize() + ShaderIndices.Num() * ShaderIndices.GetTypeSize() #else return ShaderHashes.GetAllocatedSize() + ShaderEntries.GetAllocatedSize() + ShaderMapHashes.GetAllocatedSize() + ShaderMapEntries.GetAllocatedSize() + PreloadEntries.GetAllocatedSize() + ShaderIndices.GetAllocatedSize() #endif #if WITH_EDITOR + ShaderCodeToAssets.GetAllocatedSize()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "EmptyShaderMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyShaderMaps()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (# endif ShaderHashTable .)",
    "insertText": "Clear()"
  },
  {
    "label": "GetNumShaderMaps()",
    "kind": "Method",
    "detail": "Function (# endif } int32)",
    "insertText": "GetNumShaderMaps()"
  },
  {
    "label": "GetNumShaders()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumShaders()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "FindShaderMapWithKey()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindShaderMapWithKey(const FSHAHash& Hash, uint32 Key)"
  },
  {
    "label": "FindShaderMap()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindShaderMap(const FSHAHash& Hash)"
  },
  {
    "label": "FindShaderWithKey()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindShaderWithKey(const FSHAHash& Hash, uint32 Key)"
  },
  {
    "label": "FindShader()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindShader(const FSHAHash& Hash)"
  },
  {
    "label": "FindOrAddShader()",
    "kind": "Method",
    "detail": "Function (# if ! USE_MMAPPED_SHADERARCHIVE bool)",
    "insertText": "FindOrAddShader(const FSHAHash& Hash, int32& OutIndex)"
  },
  {
    "label": "FindOrAddShaderMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindOrAddShaderMap(const FSHAHash& Hash, int32& OutIndex, const FShaderMapAssetPaths* AssociatedAssets)"
  },
  {
    "label": "RemoveLastAddedShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLastAddedShader()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "DecompressShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecompressShader(int32 Index, const TArray<FSharedBuffer>& ShaderCode, TArray<uint8>& OutDecompressedShader)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "SaveAssetInfo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SaveAssetInfo(FArchive& Ar)"
  },
  {
    "label": "LoadAssetInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadAssetInfo(const FString& Filename)"
  },
  {
    "label": "LoadAssetInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadAssetInfo(FArchive* Ar)"
  },
  {
    "label": "CreateAsChunkFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAsChunkFrom(const FSerializedShaderArchive& Parent, const TSet<FName>& PackagesInChunk, TArray<int32>& OutShaderCodeEntriesNeeded)"
  },
  {
    "label": "CollectStatsAndDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectStatsAndDebugInfo(FDebugStats& OutDebugStats, FExtendedDebugStats* OutExtendedDebugStats)"
  },
  {
    "label": "DumpContentsInPlaintext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpContentsInPlaintext(FString& OutText)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FSerializedShaderArchive& Archive)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FSerializedShaderArchive& OutArchive)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif FArchive&)",
    "insertText": "operator(FArchive& Ar, FSerializedShaderArchive& Ref)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ref .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "MarkExplicitlyPreloadedForVisualization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkExplicitlyPreloadedForVisualization(int32 ShaderIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 GShaderCodeLibraryVisualizeShaderUsage ;)",
    "insertText": "if(LIKELY(GShaderCodeLibraryVisualizeShaderUsage))"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&VisualizeLock)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ExplicitlyPreloadedShaders .)",
    "insertText": "Add(ShaderIndex)"
  },
  {
    "label": "MarkPreloadedForVisualization()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MarkPreloadedForVisualization(int32 ShaderIndex)"
  },
  {
    "label": "MarkDecompressedForVisualization()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MarkDecompressedForVisualization(int32 ShaderIndex)"
  },
  {
    "label": "MarkCreatedForVisualization()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MarkCreatedForVisualization(int32 ShaderIndex)"
  },
  {
    "label": "SaveShaderUsageBitmap()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SaveShaderUsageBitmap(const FString& Name, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# else void)",
    "insertText": "Initialize(const int32 InNumShaders)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} # endif } ; class FShaderCodeArchive : public FRHIShaderLibrary { public : FShaderCodeArchive*)",
    "insertText": "Create(EShaderPlatform InPlatform, FArchive& Ar, const FString& InDestFilePath, const FString& InLibraryDir, const FString& InLibraryName)"
  },
  {
    "label": "FShaderCodeArchive()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FShaderCodeArchive()"
  },
  {
    "label": "IsNativeLibrary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNativeLibrary()"
  },
  {
    "label": "GetNumShadersForShaderMap()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumShadersForShaderMap(int32 ShaderMapIndex)"
  },
  {
    "label": "GetShaderIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetShaderIndex(int32 ShaderMapIndex, int32 i)"
  },
  {
    "label": "GetShaderMapEntries()",
    "kind": "Method",
    "detail": "Function (const FShaderMapEntry& ShaderMapEntry = SerializedShaders .)",
    "insertText": "GetShaderMapEntries()"
  },
  {
    "label": "GetAllShaderIndices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllShaderIndices(int32 ShaderMapIndex, TArray<int32>& ShaderIndices)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (ShaderIndices .)",
    "insertText": "AddUnique(ShaderIndices[ShaderMapEntry.ShaderIndicesOffset + i])"
  },
  {
    "label": "FindShaderMapIndex()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "FindShaderMapIndex(const FSHAHash& Hash)"
  },
  {
    "label": "FindShaderIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindShaderIndex(const FSHAHash& Hash)"
  },
  {
    "label": "GetShaderHash()",
    "kind": "Method",
    "detail": "Function (} FSHAHash)",
    "insertText": "GetShaderHash(int32 ShaderMapIndex, int32 ShaderIndex)"
  },
  {
    "label": "PreloadShader()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "PreloadShader(int32 ShaderIndex, FGraphEventArray& OutCompletionEvents)"
  },
  {
    "label": "PreloadShaderMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreloadShaderMap(int32 ShaderMapIndex, FGraphEventArray& OutCompletionEvents)"
  },
  {
    "label": "ReleasePreloadedShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePreloadedShader(int32 ShaderIndex)"
  },
  {
    "label": "CreateShader()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FRHIShader>)",
    "insertText": "CreateShader(int32 Index, bool bRequired = true)"
  },
  {
    "label": "Teardown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Teardown()"
  },
  {
    "label": "OnShaderPreloadFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShaderPreloadFinished(int32 ShaderIndex, const IMemoryReadStreamRef& PreloadData)"
  },
  {
    "label": "FShaderCodeArchive()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FShaderCodeArchive(EShaderPlatform InPlatform, const FString& InLibraryDir, const FString& InLibraryName)"
  },
  {
    "label": "FShaderPreloadEntry()",
    "kind": "Method",
    "detail": "Function (} struct FShaderPreloadEntry { FGraphEventRef PreloadEvent ; void* Code = nullptr ; uint32 FramePreloadStarted = ~ 0 u ; uint32 NumRefs : 3 1 ; uint32 bNeverToBePreloaded : 1 ;)",
    "insertText": "FShaderPreloadEntry() : NumRefs(0) , bNeverToBePreloaded(0)"
  },
  {
    "label": "WaitForPreload()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "WaitForPreload(FShaderPreloadEntry& ShaderPreloadEntry)"
  },
  {
    "label": "DecompressShaderWithOodle()",
    "kind": "Method",
    "detail": "Function (FString LibraryDir ; int64 LibraryCodeOffset ; IFileCacheHandle* FileCacheHandle ; FSerializedShaderArchive SerializedShaders ; TArray<FShaderPreloadEntry> ShaderPreloads ; FRWLock ShaderPreloadLock ; FShaderUsageVisualizer DebugVisualizer ; } ; namespace ShaderCodeArchive { void)",
    "insertText": "DecompressShaderWithOodle(uint8* OutDecompressedShader, int64 UncompressedSize, const uint8* CompressedShaderCode, int64 CompressedSize)"
  },
  {
    "label": "CompressShaderWithOodle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompressShaderWithOodle(uint8* OutCompressedShader, int64& OutCompressedSize, const uint8* InUncompressedShaderCode, int64 InUncompressedSize, FOodleDataCompression::ECompressor InOodleCompressor, FOodleDataCompression::ECompressionLevel InOodleLevel)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} struct FIoStoreShaderMapEntry { uint32 ShaderIndicesOffset = 0 u ; uint32 NumShaders = 0 u ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FIoStoreShaderMapEntry& Ref)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FIoStoreShaderCodeEntry& Ref)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FIoStoreShaderGroupEntry { uint32 ShaderIndicesOffset = 0 u ; uint32 NumShaders = 0 u ; uint32 UncompressedSize = 0 ; uint32 CompressedSize = 0 ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FIoStoreShaderGroupEntry& Ref)"
  },
  {
    "label": "GetShaderUncompressedSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetShaderUncompressedSize(int ShaderIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const FIoStoreShaderCodeEntry& ThisShaderEntry = ShaderEntries [ ShaderIndex ] ; const FIoStoreShaderGroupEntry& GroupEntry = ShaderGroupEntries [ ThisShaderEntry . ShaderGroupIndex ] ;)",
    "insertText": "for(uint32 ShaderIdxIdx = GroupEntry.ShaderIndicesOffset, StopBeforeIdxIdx = GroupEntry.ShaderIndicesOffset + GroupEntry.NumShaders; ShaderIdxIdx < StopBeforeIdxIdx; ++ShaderIdxIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 GroupMemberShaderIndex = ShaderIndices [ ShaderIdxIdx ] ;)",
    "insertText": "if(ShaderIndex == GroupMemberShaderIndex)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (const FIoStoreShaderCodeEntry& NextShaderEntry = ShaderEntries [ ShaderIndices [ ShaderIdxIdx + 1 ] ] ; return NextShaderEntry . UncompressedOffsetInGroup - ThisShaderEntry . UncompressedOffsetInGroup ; } else { return GroupEntry . UncompressedSize - ThisShaderEntry . UncompressedOffsetInGroup ; } } })",
    "insertText": "checkf(false, TEXT(\"Could not find shader index %d in its own group %d - library is corrupted.\"), ShaderIndex, ThisShaderEntry.ShaderGroupIndex)"
  },
  {
    "label": "GetShaderCodeArchiveChunkId()",
    "kind": "Method",
    "detail": "Function (} } ; class FIoStoreShaderCodeArchive : public FRHIShaderLibrary { public : FIoChunkId)",
    "insertText": "GetShaderCodeArchiveChunkId(const FString& LibraryName, FName FormatName)"
  },
  {
    "label": "GetShaderCodeChunkId()",
    "kind": "Method",
    "detail": "Function (FIoChunkId)",
    "insertText": "GetShaderCodeChunkId(const FSHAHash& ShaderHash)"
  },
  {
    "label": "CreateIoStoreShaderCodeArchiveHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateIoStoreShaderCodeArchiveHeader(const FName& Format, const FSerializedShaderArchive& SerializedShaders, FIoStoreShaderCodeArchiveHeader& OutHeader)"
  },
  {
    "label": "SaveIoStoreShaderCodeArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveIoStoreShaderCodeArchive(const FIoStoreShaderCodeArchiveHeader& Header, FArchive& OutLibraryAr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FIoStoreShaderCodeArchive*)",
    "insertText": "Create(EShaderPlatform InPlatform, const FString& InLibraryName, FIoDispatcher& InIoDispatcher)"
  },
  {
    "label": "FIoStoreShaderCodeArchive()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FIoStoreShaderCodeArchive()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const FIoStoreShaderMapEntry& ShaderMapEntry = Header . ShaderMapEntries [ ShaderMapIndex ] ;)",
    "insertText": "for(uint32 i = 0u; i < ShaderMapEntry.NumShaders; ++i)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (ShaderIndices .)",
    "insertText": "AddUnique(Header.ShaderIndices[ShaderMapEntry.ShaderIndicesOffset + i])"
  },
  {
    "label": "IsPreloading()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPreloading(int32 ShaderIndex, FGraphEventArray& OutCompletionEvents)"
  },
  {
    "label": "AddRefPreloadedShaderGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRefPreloadedShaderGroup(int32 ShaderGroupIndex)"
  },
  {
    "label": "ReleasePreloadedShaderGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePreloadedShaderGroup(int32 ShaderGroupIndex)"
  },
  {
    "label": "GetGroupIndexForShader()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGroupIndexForShader(int32 ShaderIndex)"
  },
  {
    "label": "PreloadShaderMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreloadShaderMap(int32 ShaderMapIndex, FCoreDelegates::FAttachShaderReadRequestFunc AttachShaderReadRequestFunc)"
  },
  {
    "label": "FShaderGroupPreloadEntry()",
    "kind": "Method",
    "detail": "Function (private : uint32 CurrentVersion = 1 ; struct FShaderGroupPreloadEntry { FGraphEventRef PreloadEvent ; FIoRequest IoRequest ; uint32 FramePreloadStarted = ~ 0 u ; uint32 NumRefs : 3 1 ; uint32 bNeverToBePreloaded : 1 ; # if UE_SCA_DEBUG_PRELOADING FString DebugInfo ; # endif)",
    "insertText": "FShaderGroupPreloadEntry() : NumRefs(0) , bNeverToBePreloaded(0)"
  },
  {
    "label": "FShaderGroupPreloadEntry()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FShaderGroupPreloadEntry()"
  },
  {
    "label": "FIoStoreShaderCodeArchive()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FIoStoreShaderCodeArchive(EShaderPlatform InPlatform, const FString& InLibraryName, FIoDispatcher& InIoDispatcher)"
  },
  {
    "label": "PreloadShaderGroup()",
    "kind": "Method",
    "detail": "Function (FIoDispatcher& IoDispatcher ; bool)",
    "insertText": "PreloadShaderGroup(int32 ShaderGroupIndex, FGraphEventArray& OutCompletionEvents, #if UE_SCA_DEBUG_PRELOADING const FString& CallsiteInfo, #endif FCoreDelegates::FAttachShaderReadRequestFunc* AttachShaderReadRequestFuncPtr = nullptr)"
  },
  {
    "label": "SetupPreloadEntryForLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPreloadEntryForLoading(int32 ShaderGroupIndex, FShaderGroupPreloadEntry& PreloadEntry)"
  },
  {
    "label": "MarkPreloadEntrySkipped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPreloadEntrySkipped(int32 ShaderGroupIndex #if UE_SCA_DEBUG_PRELOADING , const FString& CallsiteInfo #endif)"
  },
  {
    "label": "ReleasePreloadEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePreloadEntry(int32 ShaderGroupIndex #if UE_SCA_DEBUG_PRELOADING , const FString& CallsiteInfo #endif)"
  },
  {
    "label": "FindOrAddPreloadEntry()",
    "kind": "Method",
    "detail": "Function (FShaderGroupPreloadEntry*)",
    "insertText": "FindOrAddPreloadEntry(int32 ShaderGroupIndex)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FShaderGroupPreloadEntry*& Ptr = PreloadedShaderGroups .)",
    "insertText": "FindOrAdd(ShaderGroupIndex)"
  },
  {
    "label": "FindExistingPreloadEntry()",
    "kind": "Method",
    "detail": "Function (Ptr = new FShaderGroupPreloadEntry ; } return Ptr ; } FShaderGroupPreloadEntry*)",
    "insertText": "FindExistingPreloadEntry(int32 ShaderGroupIndex)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FShaderGroupPreloadEntry** PtrPtr = PreloadedShaderGroups .)",
    "insertText": "Find(ShaderGroupIndex)"
  }
]