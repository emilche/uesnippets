[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "KISMETWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMETWIDGETS_API"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" class SWidget ; class UEdGraphNode ; class UEdGraphPin ; class SKismetLinearExpression : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SKismetLinearExpression ) : _IsEditable(true)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(bool, IsEditable ) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, UEdGraphPin* InitialInputPin)"
  },
  {
    "label": "SetExpressionRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpressionRoot(UEdGraphPin* InputPin)"
  },
  {
    "label": "MakeNodeWidget()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "MakeNodeWidget(const UEdGraphNode* Node, const UEdGraphPin* FromPin)"
  },
  {
    "label": "MakePinWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePinWidget(const UEdGraphPin* Pin)"
  }
]