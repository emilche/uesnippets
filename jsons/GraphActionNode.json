[
  {
    "label": "STreeView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STreeView"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "FGraphActionNodeImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphActionNodeImpl"
  },
  {
    "label": "FGraphActionNode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" EdGraph / EdGraphSchema . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" SGraphActionMenu . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" template<ItemType> class STreeView ; struct FGraphActionNode : TSharedFromThis<FGraphActionNode> { public : PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FGraphActionNode(const FGraphActionNode& Node)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGraphActionNode&)",
    "insertText": "operator(const FGraphActionNode& Node)"
  },
  {
    "label": "FGraphActionNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGraphActionNode(FGraphActionNode&& Node)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGraphActionNode&)",
    "insertText": "operator(FGraphActionNode&& Node)"
  },
  {
    "label": "FGraphActionNode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGraphActionNode()"
  },
  {
    "label": "NewRootNode()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FGraphActionNode>> Children ; TMap<FString,TSharedPtr<FGraphActionNode>> CategoryNodes ; public : TSharedPtr<FGraphActionNode>)",
    "insertText": "NewRootNode()"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGraphActionNode>)",
    "insertText": "AddChild(const TSharedPtr<FEdGraphSchemaAction>& Action)"
  },
  {
    "label": "AddChildAlphabetical()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS TSharedPtr<FGraphActionNode>)",
    "insertText": "AddChildAlphabetical(const TSharedPtr<FEdGraphSchemaAction>& Action)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS TSharedPtr<FGraphActionNode>)",
    "insertText": "AddSection(int32 Grouping, int32 InSectionID)"
  },
  {
    "label": "SortChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortChildren(bool bAlphabetically = true, bool bRecursive = true)"
  },
  {
    "label": "GetParentNode()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FGraphActionNode>)",
    "insertText": "GetParentNode()"
  },
  {
    "label": "GetAllActionNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllActionNodes(TArray<TSharedPtr<FGraphActionNode>>& OutNodeArray)"
  },
  {
    "label": "GetLeafNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLeafNodes(TArray< TSharedPtr<FGraphActionNode> >& OutLeafArray)"
  },
  {
    "label": "GetTotalLeafNodes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTotalLeafNodes()"
  },
  {
    "label": "ExpandAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandAllChildren(TSharedPtr< STreeView< TSharedPtr<FGraphActionNode> > > TreeView, bool bRecursive = true)"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "IsRootNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRootNode()"
  },
  {
    "label": "IsSectionHeadingNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSectionHeadingNode()"
  },
  {
    "label": "IsCategoryNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCategoryNode()"
  },
  {
    "label": "IsActionNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActionNode()"
  },
  {
    "label": "IsGroupDividerNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGroupDividerNode()"
  },
  {
    "label": "IsSeparator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSeparator()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText const&)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetCategoryPath()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCategoryPath()"
  },
  {
    "label": "HasValidAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidAction()"
  },
  {
    "label": "GetPrimaryAction()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FEdGraphSchemaAction>)",
    "insertText": "GetPrimaryAction()"
  },
  {
    "label": "OnRenameRequest()",
    "kind": "Method",
    "detail": "Function (FOnRenameRequestActionNode&)",
    "insertText": "OnRenameRequest()"
  },
  {
    "label": "IsRenameRequestPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenameRequestPending()"
  },
  {
    "label": "GetLinearizedIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLinearizedIndex(TSharedPtr<FGraphActionNode> Node)"
  },
  {
    "label": "FGraphActionNode()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FGraphActionNode(int32 Grouping, int32 SectionID)"
  },
  {
    "label": "FGraphActionNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGraphActionNode(const TSharedPtr<FEdGraphSchemaAction>& InAction, int32 InGrouping, int32 InSectionID)"
  },
  {
    "label": "NewSectionHeadingNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGraphActionNode>)",
    "insertText": "NewSectionHeadingNode(TWeakPtr<FGraphActionNode> Parent, int32 Grouping, int32 SectionID)"
  },
  {
    "label": "NewCategoryNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGraphActionNode>)",
    "insertText": "NewCategoryNode(FString const& Category, int32 Grouping, int32 SectionID)"
  },
  {
    "label": "NewActionNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGraphActionNode>)",
    "insertText": "NewActionNode(TSharedPtr<FEdGraphSchemaAction> const& ActionNode)"
  },
  {
    "label": "NewGroupDividerNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGraphActionNode>)",
    "insertText": "NewGroupDividerNode(TWeakPtr<FGraphActionNode> Parent, int32 Grouping)"
  },
  {
    "label": "AddChildRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildRecursively(const TArray<FString>& CategoryStack, int32 Idx, TSharedPtr<FGraphActionNode> NodeToAdd)"
  },
  {
    "label": "FindMatchingParent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGraphActionNode>)",
    "insertText": "FindMatchingParent(FString const& ParentName, TSharedPtr<FGraphActionNode> NodeToAdd)"
  },
  {
    "label": "InsertChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertChild(TSharedPtr<FGraphActionNode> NodeToAdd)"
  },
  {
    "label": "AddChildGrouping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildGrouping(TSharedPtr<FGraphActionNode> ActionNode, TWeakPtr<FGraphActionNode> Parent, bool bInsertAlphabetically)"
  },
  {
    "label": "InsertChildAlphabetical()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertChildAlphabetical(TSharedPtr<FGraphActionNode> NodeToAdd)"
  },
  {
    "label": "GetLinearizedIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLinearizedIndex(TSharedPtr<FGraphActionNode> Node, int32& Iter)"
  }
]