[
  {
    "label": "RtpPacketizerH264",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketizerH264"
  },
  {
    "label": "PacketUnit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketUnit"
  },
  {
    "label": "RtpPacketizerH264()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_H264_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_H264_H_ # include<stddef . h> # include<stdint . h> # include<deque> # include<memory> # include<queue> # include \" api / array_view . h \" # include \" modules / rtp_rtcp / source / rtp_format . h \" # include \" modules / rtp_rtcp / source / rtp_packet_to_send . h \" # include \" modules / video_coding / codecs / h264 / include / h264_globals . h \" # include \" rtc_base / buffer . h \" namespace webrtc { uint8_t kH264FBit = 0 x80 ; uint8_t kH264NriMask = 0 x60 ; uint8_t kH264TypeMask = 0 x1F ; uint8_t kH264SBit = 0 x80 ; uint8_t kH264EBit = 0 x40 ; uint8_t kH264RBit = 0 x20 ; class RtpPacketizerH264 : public RtpPacketizer { public :)",
    "insertText": "RtpPacketizerH264(rtc::ArrayView<const uint8_t> payload, PayloadSizeLimits limits, H264PacketizationMode packetization_mode)"
  },
  {
    "label": "RtpPacketizerH264()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpPacketizerH264()"
  },
  {
    "label": "RtpPacketizerH264()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketizerH264(const RtpPacketizerH264&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacketizerH264&)",
    "insertText": "operator(const RtpPacketizerH264&)"
  },
  {
    "label": "NumPackets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumPackets()"
  },
  {
    "label": "NextPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextPacket(RtpPacketToSend* rtp_packet)"
  },
  {
    "label": "PacketUnit()",
    "kind": "Method",
    "detail": "Function (private : struct PacketUnit {)",
    "insertText": "PacketUnit(rtc::ArrayView<const uint8_t> source_fragment, bool first_fragment, bool last_fragment, bool aggregated, uint8_t header) : source_fragment(source_fragment), first_fragment(first_fragment), last_fragment(last_fragment), aggregated(aggregated), header(header)"
  },
  {
    "label": "GeneratePackets()",
    "kind": "Method",
    "detail": "Function (} rtc::ArrayView<const uint8_t> source_fragment ; bool first_fragment ; bool last_fragment ; bool aggregated ; uint8_t header ; } ; bool)",
    "insertText": "GeneratePackets(H264PacketizationMode packetization_mode)"
  },
  {
    "label": "PacketizeFuA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PacketizeFuA(size_t fragment_index)"
  },
  {
    "label": "PacketizeStapA()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "PacketizeStapA(size_t fragment_index)"
  },
  {
    "label": "PacketizeSingleNalu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PacketizeSingleNalu(size_t fragment_index)"
  },
  {
    "label": "NextAggregatePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NextAggregatePacket(RtpPacketToSend* rtp_packet)"
  },
  {
    "label": "NextFragmentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NextFragmentPacket(RtpPacketToSend* rtp_packet)"
  }
]