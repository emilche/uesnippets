[
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "GlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalVariable"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "BitSetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BitSetInfo"
  },
  {
    "label": "BitSetBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BitSetBuilder"
  },
  {
    "label": "GlobalLayoutBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GlobalLayoutBuilder"
  },
  {
    "label": "ByteArrayBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ByteArrayBuilder"
  },
  {
    "label": "isSingleOffset()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TRANSFORMS_IPO_LOWERBITSETS_H # define LLVM_TRANSFORMS_IPO_LOWERBITSETS_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallVector . h \" # include<stdint . h> # include<limits> # include<set> # include<vector> namespace llvm { class DataLayout ; class GlobalVariable ; class Value ; struct BitSetInfo { std::set<uint64_t> Bits ; uint64_t ByteOffset ; uint64_t BitSize ; unsigned AlignLog2 ; bool)",
    "insertText": "isSingleOffset()"
  },
  {
    "label": "isAllOnes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAllOnes()"
  },
  {
    "label": "containsGlobalOffset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "containsGlobalOffset(uint64_t Offset)"
  },
  {
    "label": "containsValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "containsValue(const DataLayout &DL, const DenseMap<GlobalVariable *, uint64_t> &GlobalLayout, Value *V, uint64_t COffset = 0)"
  },
  {
    "label": "BitSetBuilder()",
    "kind": "Method",
    "detail": "Function (} ; struct BitSetBuilder { SmallVector<uint64_t,1 6> Offsets ; uint64_t Min,Max ;)",
    "insertText": "BitSetBuilder() : Min(std::numeric_limits<uint64_t>::max()), Max(0)"
  },
  {
    "label": "addOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addOffset(uint64_t Offset)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Offsets .)",
    "insertText": "push_back(Offset)"
  },
  {
    "label": "build()",
    "kind": "Method",
    "detail": "Function (} BitSetInfo)",
    "insertText": "build()"
  },
  {
    "label": "GlobalLayoutBuilder()",
    "kind": "Method",
    "detail": "Function (} ; struct GlobalLayoutBuilder { std::vector<std::vector<uint64_t>> Fragments ; std::vector<uint64_t> FragmentMap ;)",
    "insertText": "GlobalLayoutBuilder(uint64_t NumObjects) : Fragments(1), FragmentMap(NumObjects)"
  },
  {
    "label": "addFragment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addFragment(const std::set<uint64_t> &F)"
  },
  {
    "label": "ByteArrayBuilder()",
    "kind": "Method",
    "detail": "Function (} ; struct ByteArrayBuilder { std::vector<uint8_t> Bytes ; enum { BitsPerByte = 8 } ; uint64_t BitAllocs [ BitsPerByte ] ;)",
    "insertText": "ByteArrayBuilder()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(BitAllocs, 0, sizeof(BitAllocs))"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "allocate(const std::set<uint64_t> &Bits, uint64_t BitSize, uint64_t &AllocByteOffset, uint8_t &AllocMask)"
  }
]