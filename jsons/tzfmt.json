[
  {
    "label": "UTimeZoneFormatStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UTimeZoneFormatStyle"
  },
  {
    "label": "UTimeZoneFormatGMTOffsetPatternType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UTimeZoneFormatGMTOffsetPatternType"
  },
  {
    "label": "UTimeZoneFormatTimeType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UTimeZoneFormatTimeType"
  },
  {
    "label": "UTimeZoneFormatParseOption",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UTimeZoneFormatParseOption"
  },
  {
    "label": "TimeZoneGenericNames",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeZoneGenericNames"
  },
  {
    "label": "TZDBTimeZoneNames",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TZDBTimeZoneNames"
  },
  {
    "label": "UVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVector"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "OffsetFields",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OffsetFields"
  },
  {
    "label": "TimeZoneFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef __TZFMT_H # define __TZFMT_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / format . h \" # include \" unicode / timezone . h \" # include \" unicode / tznames . h \" U_CDECL_BEGIN typedef enum UTimeZoneFormatStyle { UTZFMT_STYLE_GENERIC_LOCATION,UTZFMT_STYLE_GENERIC_LONG,UTZFMT_STYLE_GENERIC_SHORT,UTZFMT_STYLE_SPECIFIC_LONG,UTZFMT_STYLE_SPECIFIC_SHORT,UTZFMT_STYLE_LOCALIZED_GMT,UTZFMT_STYLE_LOCALIZED_GMT_SHORT,UTZFMT_STYLE_ISO_BASIC_SHORT,UTZFMT_STYLE_ISO_BASIC_LOCAL_SHORT,UTZFMT_STYLE_ISO_BASIC_FIXED,UTZFMT_STYLE_ISO_BASIC_LOCAL_FIXED,UTZFMT_STYLE_ISO_BASIC_FULL,UTZFMT_STYLE_ISO_BASIC_LOCAL_FULL,UTZFMT_STYLE_ISO_EXTENDED_FIXED,UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FIXED,UTZFMT_STYLE_ISO_EXTENDED_FULL,UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FULL,UTZFMT_STYLE_ZONE_ID,UTZFMT_STYLE_ZONE_ID_SHORT,UTZFMT_STYLE_EXEMPLAR_LOCATION } UTimeZoneFormatStyle ; typedef enum UTimeZoneFormatGMTOffsetPatternType { UTZFMT_PAT_POSITIVE_HM,UTZFMT_PAT_POSITIVE_HMS,UTZFMT_PAT_NEGATIVE_HM,UTZFMT_PAT_NEGATIVE_HMS,UTZFMT_PAT_POSITIVE_H,UTZFMT_PAT_NEGATIVE_H,UTZFMT_PAT_COUNT = 6 } UTimeZoneFormatGMTOffsetPatternType ; typedef enum UTimeZoneFormatTimeType { UTZFMT_TIME_TYPE_UNKNOWN,UTZFMT_TIME_TYPE_STANDARD,UTZFMT_TIME_TYPE_DAYLIGHT } UTimeZoneFormatTimeType ; typedef enum UTimeZoneFormatParseOption { UTZFMT_PARSE_OPTION_NONE = 0 x00,UTZFMT_PARSE_OPTION_ALL_STYLES = 0 x01,UTZFMT_PARSE_OPTION_TZ_DATABASE_ABBREVIATIONS = 0 x02 } UTimeZoneFormatParseOption ; U_CDECL_END U_NAMESPACE_BEGIN class TimeZoneGenericNames ; class TZDBTimeZoneNames ; class UVector ; class U_I18N_API TimeZoneFormat : public Format { public :)",
    "insertText": "TimeZoneFormat(const TimeZoneFormat& other)"
  },
  {
    "label": "TimeZoneFormat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TimeZoneFormat()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TimeZoneFormat&)",
    "insertText": "operator(const TimeZoneFormat& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Format& other)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Format*)",
    "insertText": "clone()"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (TimeZoneFormat* U_EXPORT2)",
    "insertText": "createInstance(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "getTimeZoneNames()",
    "kind": "Method",
    "detail": "Function (const TimeZoneNames*)",
    "insertText": "getTimeZoneNames()"
  },
  {
    "label": "adoptTimeZoneNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptTimeZoneNames(TimeZoneNames *tznames)"
  },
  {
    "label": "setTimeZoneNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeZoneNames(const TimeZoneNames &tznames)"
  },
  {
    "label": "getGMTPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getGMTPattern(UnicodeString& pattern)"
  },
  {
    "label": "setGMTPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGMTPattern(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "getGMTOffsetPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getGMTOffsetPattern(UTimeZoneFormatGMTOffsetPatternType type, UnicodeString& pattern)"
  },
  {
    "label": "setGMTOffsetPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGMTOffsetPattern(UTimeZoneFormatGMTOffsetPatternType type, const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "getGMTOffsetDigits()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getGMTOffsetDigits(UnicodeString& digits)"
  },
  {
    "label": "setGMTOffsetDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGMTOffsetDigits(const UnicodeString& digits, UErrorCode& status)"
  },
  {
    "label": "getGMTZeroFormat()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getGMTZeroFormat(UnicodeString& gmtZeroFormat)"
  },
  {
    "label": "setGMTZeroFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGMTZeroFormat(const UnicodeString& gmtZeroFormat, UErrorCode& status)"
  },
  {
    "label": "getDefaultParseOptions()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getDefaultParseOptions(void)"
  },
  {
    "label": "setDefaultParseOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDefaultParseOptions(uint32_t flags)"
  },
  {
    "label": "formatOffsetISO8601Basic()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatOffsetISO8601Basic(int32_t offset, UBool useUtcIndicator, UBool isShort, UBool ignoreSeconds, UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "formatOffsetISO8601Extended()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatOffsetISO8601Extended(int32_t offset, UBool useUtcIndicator, UBool isShort, UBool ignoreSeconds, UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "formatOffsetLocalizedGMT()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatOffsetLocalizedGMT(int32_t offset, UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "formatOffsetShortLocalizedGMT()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatOffsetShortLocalizedGMT(int32_t offset, UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (using Format::format ; UnicodeString&)",
    "insertText": "format(UTimeZoneFormatStyle style, const TimeZone& tz, UDate date, UnicodeString& name, UTimeZoneFormatTimeType* timeType = NULL)"
  },
  {
    "label": "parseOffsetISO8601()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseOffsetISO8601(const UnicodeString& text, ParsePosition& pos)"
  },
  {
    "label": "parseOffsetLocalizedGMT()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseOffsetLocalizedGMT(const UnicodeString& text, ParsePosition& pos)"
  },
  {
    "label": "parseOffsetShortLocalizedGMT()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseOffsetShortLocalizedGMT(const UnicodeString& text, ParsePosition& pos)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (TimeZone*)",
    "insertText": "parse(UTimeZoneFormatStyle style, const UnicodeString& text, ParsePosition& pos, int32_t parseOptions, UTimeZoneFormatTimeType* timeType = NULL)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (TimeZone*)",
    "insertText": "parse(UTimeZoneFormatStyle style, const UnicodeString& text, ParsePosition& pos, UTimeZoneFormatTimeType* timeType = NULL)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const Formattable& obj, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "parseObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseObject(const UnicodeString& source, Formattable& result, ParsePosition& parse_pos)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "TimeZoneFormat()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "TimeZoneFormat(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "formatSpecific()",
    "kind": "Method",
    "detail": "Function (private : Locale fLocale ; char fTargetRegion [ ULOC_COUNTRY_CAPACITY ] ; TimeZoneNames* fTimeZoneNames ; TimeZoneGenericNames* fTimeZoneGenericNames ; UnicodeString fGMTPattern ; UnicodeString fGMTOffsetPatterns [ UTZFMT_PAT_COUNT ] ; UChar32 fGMTOffsetDigits [ 1 0 ] ; UnicodeString fGMTZeroFormat ; uint32_t fDefParseOptionFlags ; UnicodeString fGMTPatternPrefix ; UnicodeString fGMTPatternSuffix ; UVector* fGMTOffsetPatternItems [ UTZFMT_PAT_COUNT ] ; UBool fAbuttingOffsetHoursAndMinutes ; TZDBTimeZoneNames* fTZDBTimeZoneNames ; UnicodeString&)",
    "insertText": "formatSpecific(const TimeZone& tz, UTimeZoneNameType stdType, UTimeZoneNameType dstType, UDate date, UnicodeString& name, UTimeZoneFormatTimeType *timeType)"
  },
  {
    "label": "formatGeneric()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatGeneric(const TimeZone& tz, int32_t genType, UDate date, UnicodeString& name)"
  },
  {
    "label": "getTimeZoneGenericNames()",
    "kind": "Method",
    "detail": "Function (const TimeZoneGenericNames*)",
    "insertText": "getTimeZoneGenericNames(UErrorCode& status)"
  },
  {
    "label": "getTZDBTimeZoneNames()",
    "kind": "Method",
    "detail": "Function (const TZDBTimeZoneNames*)",
    "insertText": "getTZDBTimeZoneNames(UErrorCode& status)"
  },
  {
    "label": "formatExemplarLocation()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatExemplarLocation(const TimeZone& tz, UnicodeString& name)"
  },
  {
    "label": "initGMTPattern()",
    "kind": "Method",
    "detail": "Function (enum OffsetFields { FIELDS_H,FIELDS_HM,FIELDS_HMS } ; void)",
    "insertText": "initGMTPattern(const UnicodeString& gmtPattern, UErrorCode& status)"
  },
  {
    "label": "parseOffsetPattern()",
    "kind": "Method",
    "detail": "Function (UVector*)",
    "insertText": "parseOffsetPattern(const UnicodeString& pattern, OffsetFields required, UErrorCode& status)"
  },
  {
    "label": "expandOffsetPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "expandOffsetPattern(const UnicodeString& offsetHM, UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "truncateOffsetPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "truncateOffsetPattern(const UnicodeString& offsetHM, UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "toCodePoints()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "toCodePoints(const UnicodeString& str, UChar32* codeArray, int32_t capacity)"
  },
  {
    "label": "formatOffsetISO8601()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatOffsetISO8601(int32_t offset, UBool isBasic, UBool useUtcIndicator, UBool isShort, UBool ignoreSeconds, UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "formatOffsetLocalizedGMT()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatOffsetLocalizedGMT(int32_t offset, UBool isShort, UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "parseOffsetISO8601()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseOffsetISO8601(const UnicodeString& text, ParsePosition& pos, UBool extendedOnly, UBool* hasDigitOffset = NULL)"
  },
  {
    "label": "appendOffsetDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "appendOffsetDigits(UnicodeString& buf, int32_t n, uint8_t minDigits)"
  },
  {
    "label": "parseOffsetLocalizedGMT()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseOffsetLocalizedGMT(const UnicodeString& text, ParsePosition& pos, UBool isShort, UBool* hasDigitOffset)"
  },
  {
    "label": "parseOffsetLocalizedGMTPattern()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseOffsetLocalizedGMTPattern(const UnicodeString& text, int32_t start, UBool isShort, int32_t& parsedLen)"
  },
  {
    "label": "parseOffsetFields()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseOffsetFields(const UnicodeString& text, int32_t start, UBool isShort, int32_t& parsedLen)"
  },
  {
    "label": "parseOffsetFieldsWithPattern()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseOffsetFieldsWithPattern(const UnicodeString& text, int32_t start, UVector* patternItems, UBool forceSingleHourDigit, int32_t& hour, int32_t& min, int32_t& sec)"
  },
  {
    "label": "parseAbuttingOffsetFields()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseAbuttingOffsetFields(const UnicodeString& text, int32_t start, int32_t& parsedLen)"
  },
  {
    "label": "parseOffsetDefaultLocalizedGMT()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseOffsetDefaultLocalizedGMT(const UnicodeString& text, int start, int32_t& parsedLen)"
  },
  {
    "label": "parseDefaultOffsetFields()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseDefaultOffsetFields(const UnicodeString& text, int32_t start, char16_t separator, int32_t& parsedLen)"
  },
  {
    "label": "parseOffsetFieldWithLocalizedDigits()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseOffsetFieldWithLocalizedDigits(const UnicodeString& text, int32_t start, uint8_t minDigits, uint8_t maxDigits, uint16_t minVal, uint16_t maxVal, int32_t& parsedLen)"
  },
  {
    "label": "parseSingleLocalizedDigit()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseSingleLocalizedDigit(const UnicodeString& text, int32_t start, int32_t& len)"
  },
  {
    "label": "formatOffsetWithAsciiDigits()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatOffsetWithAsciiDigits(int32_t offset, char16_t sep, OffsetFields minFields, OffsetFields maxFields, UnicodeString& result)"
  },
  {
    "label": "parseAbuttingAsciiOffsetFields()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseAbuttingAsciiOffsetFields(const UnicodeString& text, ParsePosition& pos, OffsetFields minFields, OffsetFields maxFields, UBool fixedHourWidth)"
  },
  {
    "label": "parseAsciiOffsetFields()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseAsciiOffsetFields(const UnicodeString& text, ParsePosition& pos, char16_t sep, OffsetFields minFields, OffsetFields maxFields)"
  },
  {
    "label": "unquote()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "unquote(const UnicodeString& pattern, UnicodeString& result)"
  },
  {
    "label": "initGMTOffsetPatterns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initGMTOffsetPatterns(UErrorCode& status)"
  },
  {
    "label": "checkAbuttingHoursAndMinutes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "checkAbuttingHoursAndMinutes()"
  },
  {
    "label": "createTimeZoneForOffset()",
    "kind": "Method",
    "detail": "Function (TimeZone*)",
    "insertText": "createTimeZoneForOffset(int32_t offset)"
  },
  {
    "label": "getTimeType()",
    "kind": "Method",
    "detail": "Function (UTimeZoneFormatTimeType)",
    "insertText": "getTimeType(UTimeZoneNameType nameType)"
  },
  {
    "label": "getTimeZoneID()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getTimeZoneID(const TimeZoneNames::MatchInfoCollection* matches, int32_t idx, UnicodeString& tzID)"
  },
  {
    "label": "parseZoneID()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "parseZoneID(const UnicodeString& text, ParsePosition& pos, UnicodeString& tzID)"
  },
  {
    "label": "parseShortZoneID()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "parseShortZoneID(const UnicodeString& text, ParsePosition& pos, UnicodeString& tzID)"
  },
  {
    "label": "parseExemplarLocation()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "parseExemplarLocation(const UnicodeString& text, ParsePosition& pos, UnicodeString& tzID)"
  }
]