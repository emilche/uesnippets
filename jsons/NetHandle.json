[
  {
    "label": "FNetHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetHandle"
  },
  {
    "label": "FNetHandleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetHandleManager"
  },
  {
    "label": "FNetPushObjectHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetPushObjectHandle"
  },
  {
    "label": "FInternalValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInternalValue"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringFwd . h \" # include \" Templates / TypeCompatibleBytes . h \" # include \" Templates / TypeHash . h \" # include \" UObject / ObjectKey . h \" namespace UE::Net { class FNetHandle ; class FNetHandleManager ; namespace Private { class FNetPushObjectHandle ; } } FAnsiStringBuilderBase&)",
    "insertText": "operator(FAnsiStringBuilderBase& Builder, const UE::Net::FNetHandle& NetHandle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FUtf8StringBuilderBase&)",
    "insertText": "operator(FUtf8StringBuilderBase& Builder, const UE::Net::FNetHandle& NetHandle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWideStringBuilderBase&)",
    "insertText": "operator(FWideStringBuilderBase& Builder, const UE::Net::FNetHandle& NetHandle)"
  },
  {
    "label": "FNetHandle()",
    "kind": "Method",
    "detail": "Function (namespace UE::Net { class FNetHandle { public :)",
    "insertText": "FNetHandle()"
  },
  {
    "label": "FNetHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetHandle(const FNetHandle& Other)"
  },
  {
    "label": "FNetHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetHandle(FNetHandle&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetHandle&)",
    "insertText": "operator(const FNetHandle& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetHandle&)",
    "insertText": "operator(FNetHandle&& Other)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetId()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsCompleteHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompleteHandle()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FNetHandle Other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (private : FNetHandleManager ; Private::FNetPushObjectHandle ; uint32)",
    "insertText": "GetTypeHash(FNetHandle Handle)"
  },
  {
    "label": "FNetHandle()",
    "kind": "Method",
    "detail": "Function (struct FInternalValue { uint32 Id ; uint32 Epoch ; } ;)",
    "insertText": "FNetHandle(FObjectKey ObjectKey)"
  },
  {
    "label": "FNetHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetHandle(FInternalValue InInternalValue)"
  },
  {
    "label": "FNetHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetHandle(uint64 InInternalValue)"
  },
  {
    "label": "GetInternalValue()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetInternalValue()"
  },
  {
    "label": "FNetHandle()",
    "kind": "Method",
    "detail": "Function (union { FObjectKey Value ; FInternalValue InternalValue ; } ; } ;)",
    "insertText": "FNetHandle() : Value()"
  },
  {
    "label": "FNetHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetHandle(const FNetHandle& Other) : Value(Other.Value)"
  },
  {
    "label": "FNetHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetHandle(FNetHandle&& Other) : Value(Other.Value)"
  },
  {
    "label": "FNetHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetHandle(FObjectKey ObjectKey) : Value(ObjectKey)"
  },
  {
    "label": "FNetHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetHandle(FInternalValue InInternalValue) : Value(BitCast<FObjectKey>(InInternalValue))"
  },
  {
    "label": "FNetHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetHandle(uint64 InInternalValue) : Value(BitCast<FObjectKey>(InInternalValue))"
  }
]