[
  {
    "label": "FDCT4x4_2D()",
    "kind": "Method",
    "detail": "Function (# include<emmintrin . h> # include \" . / vpx_dsp_rtcd . h \" # include \" vpx_dsp / txfm_common . h \" # include \" vpx_dsp / x86 / fwd_txfm_sse2 . h \" # include \" vpx_dsp / x86 / txfm_common_sse2 . h \" # include \" vpx_ports / mem . h \" # if DCT_HIGH_BIT_DEPTH # define ADD_EPI16 _mm_adds_epi16 # define SUB_EPI16 _mm_subs_epi16 # else # define ADD_EPI16 _mm_add_epi16 # define SUB_EPI16 _mm_sub_epi16 # endif void)",
    "insertText": "FDCT4x4_2D(const int16_t *input, tran_low_t *output, int stride)"
  },
  {
    "label": "octa_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_A =)",
    "insertText": "octa_set_epi16(cospi_16_64, cospi_16_64, cospi_16_64, cospi_16_64, cospi_16_64, -cospi_16_64, cospi_16_64, -cospi_16_64)"
  },
  {
    "label": "octa_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_B =)",
    "insertText": "octa_set_epi16(cospi_16_64, -cospi_16_64, cospi_16_64, -cospi_16_64, cospi_16_64, cospi_16_64, cospi_16_64, cospi_16_64)"
  },
  {
    "label": "octa_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_C =)",
    "insertText": "octa_set_epi16(cospi_8_64, cospi_24_64, cospi_8_64, cospi_24_64, cospi_24_64, -cospi_8_64, cospi_24_64, -cospi_8_64)"
  },
  {
    "label": "octa_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_D =)",
    "insertText": "octa_set_epi16(cospi_24_64, -cospi_8_64, cospi_24_64, -cospi_8_64, cospi_8_64, cospi_24_64, cospi_8_64, cospi_24_64)"
  },
  {
    "label": "octa_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_E =)",
    "insertText": "octa_set_epi16(cospi_16_64, cospi_16_64, cospi_16_64, cospi_16_64, cospi_16_64, cospi_16_64, cospi_16_64, cospi_16_64)"
  },
  {
    "label": "octa_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_F =)",
    "insertText": "octa_set_epi16(cospi_16_64, -cospi_16_64, cospi_16_64, -cospi_16_64, cospi_16_64, -cospi_16_64, cospi_16_64, -cospi_16_64)"
  },
  {
    "label": "octa_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_G =)",
    "insertText": "octa_set_epi16(cospi_8_64, cospi_24_64, cospi_8_64, cospi_24_64, -cospi_8_64, -cospi_24_64, -cospi_8_64, -cospi_24_64)"
  },
  {
    "label": "octa_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_H =)",
    "insertText": "octa_set_epi16(cospi_24_64, -cospi_8_64, cospi_24_64, -cospi_8_64, -cospi_24_64, cospi_8_64, -cospi_24_64, cospi_8_64)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i k__DCT_CONST_ROUNDING =)",
    "insertText": "_mm_set1_epi32(DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i k__DCT_CONST_ROUNDING2 =)",
    "insertText": "_mm_set1_epi32(DCT_CONST_ROUNDING + (DCT_CONST_ROUNDING << 1))"
  },
  {
    "label": "_mm_setr_epi16()",
    "kind": "Method",
    "detail": "Function (const int DCT_CONST_BITS2 = DCT_CONST_BITS + 2 ; const __m128i k__nonzero_bias_a =)",
    "insertText": "_mm_setr_epi16(0, 1, 1, 1, 1, 1, 1, 1)"
  },
  {
    "label": "_mm_setr_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__nonzero_bias_b =)",
    "insertText": "_mm_setr_epi16(1, 0, 0, 0, 0, 0, 0, 0)"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i in0,in1 ; # if DCT_HIGH_BIT_DEPTH __m128i cmp0,cmp1 ; int test,overflow ; # endif in0 =)",
    "insertText": "_mm_loadl_epi64((const __m128i *)(input + 0 * stride))"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (in1 =)",
    "insertText": "_mm_loadl_epi64((const __m128i *)(input + 1 * stride))"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (in1 =)",
    "insertText": "_mm_unpacklo_epi64(in1, _mm_loadl_epi64((const __m128i *)(input + 2 * stride)))"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (in0 =)",
    "insertText": "_mm_unpacklo_epi64(in0, _mm_loadl_epi64((const __m128i *)(input + 3 * stride)))"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH cmp0 =)",
    "insertText": "_mm_xor_si128(_mm_cmpgt_epi16(in0, _mm_set1_epi16(0x3ff)), _mm_cmplt_epi16(in0, _mm_set1_epi16((int16_t)0xfc00)))"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (cmp1 =)",
    "insertText": "_mm_xor_si128(_mm_cmpgt_epi16(in1, _mm_set1_epi16(0x3ff)), _mm_cmplt_epi16(in1, _mm_set1_epi16((int16_t)0xfc00)))"
  },
  {
    "label": "_mm_movemask_epi8()",
    "kind": "Method",
    "detail": "Function (test =)",
    "insertText": "_mm_movemask_epi8(_mm_or_si128(cmp0, cmp1))"
  },
  {
    "label": "vpx_highbd_fdct4x4_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_highbd_fdct4x4_c(input, output, stride)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in1 =)",
    "insertText": "_mm_slli_epi16(in1, 4)"
  },
  {
    "label": "_mm_cmpeq_epi16()",
    "kind": "Method",
    "detail": "Function ({ __m128i mask =)",
    "insertText": "_mm_cmpeq_epi16(in0, k__nonzero_bias_a)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in0 =)",
    "insertText": "_mm_add_epi16(in0, mask)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in0 =)",
    "insertText": "_mm_add_epi16(in0, k__nonzero_bias_b)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (} { const __m128i r0 =)",
    "insertText": "_mm_unpacklo_epi16(in0, in1)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i r1 =)",
    "insertText": "_mm_unpackhi_epi16(in0, in1)"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i r2 =)",
    "insertText": "_mm_shuffle_epi32(r0, 0xB4)"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i r3 =)",
    "insertText": "_mm_shuffle_epi32(r1, 0xB4)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t0 =)",
    "insertText": "_mm_add_epi16(r2, r3)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t1 =)",
    "insertText": "_mm_sub_epi16(r2, r3)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u0 =)",
    "insertText": "_mm_madd_epi16(t0, k__cospi_A)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u2 =)",
    "insertText": "_mm_madd_epi16(t0, k__cospi_B)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u1 =)",
    "insertText": "_mm_madd_epi16(t1, k__cospi_C)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u3 =)",
    "insertText": "_mm_madd_epi16(t1, k__cospi_D)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v0 =)",
    "insertText": "_mm_add_epi32(u0, k__DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v1 =)",
    "insertText": "_mm_add_epi32(u1, k__DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v2 =)",
    "insertText": "_mm_add_epi32(u2, k__DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v3 =)",
    "insertText": "_mm_add_epi32(u3, k__DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w0 =)",
    "insertText": "_mm_srai_epi32(v0, DCT_CONST_BITS)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w1 =)",
    "insertText": "_mm_srai_epi32(v1, DCT_CONST_BITS)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w2 =)",
    "insertText": "_mm_srai_epi32(v2, DCT_CONST_BITS)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w3 =)",
    "insertText": "_mm_srai_epi32(v3, DCT_CONST_BITS)"
  },
  {
    "label": "_mm_packs_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i x0 =)",
    "insertText": "_mm_packs_epi32(w0, w1)"
  },
  {
    "label": "_mm_packs_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i x1 =)",
    "insertText": "_mm_packs_epi32(w2, w3)"
  },
  {
    "label": "check_epi16_overflow_x2()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x2(&x0, &x1)"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (in1 =)",
    "insertText": "_mm_shuffle_epi32(x1, 0x8D)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (} { const __m128i t0 =)",
    "insertText": "ADD_EPI16(in0, in1)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i t1 =)",
    "insertText": "SUB_EPI16(in0, in1)"
  },
  {
    "label": "check_epi16_overflow_x2()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x2(&t0, &t1)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u1 =)",
    "insertText": "_mm_madd_epi16(t0, k__cospi_F)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u2 =)",
    "insertText": "_mm_madd_epi16(t1, k__cospi_G)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u3 =)",
    "insertText": "_mm_madd_epi16(t1, k__cospi_H)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v0 =)",
    "insertText": "_mm_add_epi32(u0, k__DCT_CONST_ROUNDING2)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v1 =)",
    "insertText": "_mm_add_epi32(u1, k__DCT_CONST_ROUNDING2)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v2 =)",
    "insertText": "_mm_add_epi32(u2, k__DCT_CONST_ROUNDING2)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v3 =)",
    "insertText": "_mm_add_epi32(u3, k__DCT_CONST_ROUNDING2)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w0 =)",
    "insertText": "_mm_srai_epi32(v0, DCT_CONST_BITS2)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w1 =)",
    "insertText": "_mm_srai_epi32(v1, DCT_CONST_BITS2)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w2 =)",
    "insertText": "_mm_srai_epi32(v2, DCT_CONST_BITS2)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w3 =)",
    "insertText": "_mm_srai_epi32(v3, DCT_CONST_BITS2)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i y1 =)",
    "insertText": "_mm_unpackhi_epi16(x0, x1)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (in0 =)",
    "insertText": "_mm_unpacklo_epi32(y0, y1)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (in1 =)",
    "insertText": "_mm_unpackhi_epi32(y0, y1)"
  },
  {
    "label": "storeu_output()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "storeu_output(&in0, output + 0 * 4)"
  },
  {
    "label": "storeu_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storeu_output(&in1, output + 2 * 4)"
  },
  {
    "label": "FDCT8x8_2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FDCT8x8_2D(const int16_t *input, tran_low_t *output, int stride)"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (int pass ; const __m128i k__cospi_p16_p16 =)",
    "insertText": "_mm_set1_epi16(cospi_16_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_p16_m16 =)",
    "insertText": "pair_set_epi16(cospi_16_64, -cospi_16_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_p24_p08 =)",
    "insertText": "pair_set_epi16(cospi_24_64, cospi_8_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_m08_p24 =)",
    "insertText": "pair_set_epi16(-cospi_8_64, cospi_24_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_p28_p04 =)",
    "insertText": "pair_set_epi16(cospi_28_64, cospi_4_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_m04_p28 =)",
    "insertText": "pair_set_epi16(-cospi_4_64, cospi_28_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_p12_p20 =)",
    "insertText": "pair_set_epi16(cospi_12_64, cospi_20_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_m20_p12 =)",
    "insertText": "pair_set_epi16(-cospi_20_64, cospi_12_64)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH int overflow ; # endif __m128i in0 =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 0 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (__m128i in1 =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 1 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (__m128i in2 =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 2 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (__m128i in3 =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 3 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (__m128i in4 =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 4 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (__m128i in5 =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 5 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (__m128i in6 =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 6 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (__m128i in7 =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 7 * stride))"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in0 =)",
    "insertText": "_mm_slli_epi16(in0, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in1 =)",
    "insertText": "_mm_slli_epi16(in1, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in2 =)",
    "insertText": "_mm_slli_epi16(in2, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in3 =)",
    "insertText": "_mm_slli_epi16(in3, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in4 =)",
    "insertText": "_mm_slli_epi16(in4, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in5 =)",
    "insertText": "_mm_slli_epi16(in5, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in6 =)",
    "insertText": "_mm_slli_epi16(in6, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in7 =)",
    "insertText": "_mm_slli_epi16(in7, 2)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (__m128i res0,res1,res2,res3,res4,res5,res6,res7 ; const __m128i q0 =)",
    "insertText": "ADD_EPI16(in0, in7)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q1 =)",
    "insertText": "ADD_EPI16(in1, in6)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q2 =)",
    "insertText": "ADD_EPI16(in2, in5)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q3 =)",
    "insertText": "ADD_EPI16(in3, in4)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q4 =)",
    "insertText": "SUB_EPI16(in3, in4)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q5 =)",
    "insertText": "SUB_EPI16(in2, in5)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q6 =)",
    "insertText": "SUB_EPI16(in1, in6)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q7 =)",
    "insertText": "SUB_EPI16(in0, in7)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH)",
    "insertText": "if(pass == 1)"
  },
  {
    "label": "check_epi16_overflow_x8()",
    "kind": "Method",
    "detail": "Function (overflow =)",
    "insertText": "check_epi16_overflow_x8(&q0, &q1, &q2, &q3, &q4, &q5, &q6, &q7)"
  },
  {
    "label": "vpx_highbd_fdct8x8_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_highbd_fdct8x8_c(input, output, stride)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i r1 =)",
    "insertText": "ADD_EPI16(q1, q2)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i r2 =)",
    "insertText": "SUB_EPI16(q1, q2)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i r3 =)",
    "insertText": "SUB_EPI16(q0, q3)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x4(&r0, &r1, &r2, &r3)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t1 =)",
    "insertText": "_mm_unpackhi_epi16(r0, r1)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t2 =)",
    "insertText": "_mm_unpacklo_epi16(r2, r3)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t3 =)",
    "insertText": "_mm_unpackhi_epi16(r2, r3)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u0 =)",
    "insertText": "_mm_madd_epi16(t0, k__cospi_p16_p16)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u1 =)",
    "insertText": "_mm_madd_epi16(t1, k__cospi_p16_p16)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u2 =)",
    "insertText": "_mm_madd_epi16(t0, k__cospi_p16_m16)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u3 =)",
    "insertText": "_mm_madd_epi16(t1, k__cospi_p16_m16)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u4 =)",
    "insertText": "_mm_madd_epi16(t2, k__cospi_p24_p08)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u5 =)",
    "insertText": "_mm_madd_epi16(t3, k__cospi_p24_p08)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u6 =)",
    "insertText": "_mm_madd_epi16(t2, k__cospi_m08_p24)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u7 =)",
    "insertText": "_mm_madd_epi16(t3, k__cospi_m08_p24)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v4 =)",
    "insertText": "_mm_add_epi32(u4, k__DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v5 =)",
    "insertText": "_mm_add_epi32(u5, k__DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v6 =)",
    "insertText": "_mm_add_epi32(u6, k__DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v7 =)",
    "insertText": "_mm_add_epi32(u7, k__DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w4 =)",
    "insertText": "_mm_srai_epi32(v4, DCT_CONST_BITS)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w5 =)",
    "insertText": "_mm_srai_epi32(v5, DCT_CONST_BITS)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w6 =)",
    "insertText": "_mm_srai_epi32(v6, DCT_CONST_BITS)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w7 =)",
    "insertText": "_mm_srai_epi32(v7, DCT_CONST_BITS)"
  },
  {
    "label": "_mm_packs_epi32()",
    "kind": "Method",
    "detail": "Function (res2 =)",
    "insertText": "_mm_packs_epi32(w4, w5)"
  },
  {
    "label": "_mm_packs_epi32()",
    "kind": "Method",
    "detail": "Function (res6 =)",
    "insertText": "_mm_packs_epi32(w6, w7)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x4(&res0, &res4, &res2, &res6)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i d1 =)",
    "insertText": "_mm_unpackhi_epi16(q6, q5)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i e0 =)",
    "insertText": "_mm_madd_epi16(d0, k__cospi_p16_m16)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i e1 =)",
    "insertText": "_mm_madd_epi16(d1, k__cospi_p16_m16)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i e2 =)",
    "insertText": "_mm_madd_epi16(d0, k__cospi_p16_p16)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i e3 =)",
    "insertText": "_mm_madd_epi16(d1, k__cospi_p16_p16)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i f0 =)",
    "insertText": "_mm_add_epi32(e0, k__DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i f1 =)",
    "insertText": "_mm_add_epi32(e1, k__DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i f2 =)",
    "insertText": "_mm_add_epi32(e2, k__DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i f3 =)",
    "insertText": "_mm_add_epi32(e3, k__DCT_CONST_ROUNDING)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i s0 =)",
    "insertText": "_mm_srai_epi32(f0, DCT_CONST_BITS)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i s1 =)",
    "insertText": "_mm_srai_epi32(f1, DCT_CONST_BITS)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i s2 =)",
    "insertText": "_mm_srai_epi32(f2, DCT_CONST_BITS)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i s3 =)",
    "insertText": "_mm_srai_epi32(f3, DCT_CONST_BITS)"
  },
  {
    "label": "_mm_packs_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i r0 =)",
    "insertText": "_mm_packs_epi32(s0, s1)"
  },
  {
    "label": "_mm_packs_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i r1 =)",
    "insertText": "_mm_packs_epi32(s2, s3)"
  },
  {
    "label": "check_epi16_overflow_x2()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x2(&r0, &r1)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i x1 =)",
    "insertText": "SUB_EPI16(q4, r0)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i x2 =)",
    "insertText": "SUB_EPI16(q7, r1)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i x3 =)",
    "insertText": "ADD_EPI16(q7, r1)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x4(&x0, &x1, &x2, &x3)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t1 =)",
    "insertText": "_mm_unpackhi_epi16(x0, x3)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t2 =)",
    "insertText": "_mm_unpacklo_epi16(x1, x2)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t3 =)",
    "insertText": "_mm_unpackhi_epi16(x1, x2)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u0 =)",
    "insertText": "_mm_madd_epi16(t0, k__cospi_p28_p04)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u1 =)",
    "insertText": "_mm_madd_epi16(t1, k__cospi_p28_p04)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u2 =)",
    "insertText": "_mm_madd_epi16(t0, k__cospi_m04_p28)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u3 =)",
    "insertText": "_mm_madd_epi16(t1, k__cospi_m04_p28)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u4 =)",
    "insertText": "_mm_madd_epi16(t2, k__cospi_p12_p20)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u5 =)",
    "insertText": "_mm_madd_epi16(t3, k__cospi_p12_p20)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u6 =)",
    "insertText": "_mm_madd_epi16(t2, k__cospi_m20_p12)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u7 =)",
    "insertText": "_mm_madd_epi16(t3, k__cospi_m20_p12)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x4(&res1, &res7, &res5, &res3)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_1 =)",
    "insertText": "_mm_unpacklo_epi16(res2, res3)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_2 =)",
    "insertText": "_mm_unpackhi_epi16(res0, res1)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_3 =)",
    "insertText": "_mm_unpackhi_epi16(res2, res3)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_4 =)",
    "insertText": "_mm_unpacklo_epi16(res4, res5)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_5 =)",
    "insertText": "_mm_unpacklo_epi16(res6, res7)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_6 =)",
    "insertText": "_mm_unpackhi_epi16(res4, res5)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_7 =)",
    "insertText": "_mm_unpackhi_epi16(res6, res7)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_0 =)",
    "insertText": "_mm_unpacklo_epi32(tr0_0, tr0_1)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_1 =)",
    "insertText": "_mm_unpacklo_epi32(tr0_2, tr0_3)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_2 =)",
    "insertText": "_mm_unpackhi_epi32(tr0_0, tr0_1)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_3 =)",
    "insertText": "_mm_unpackhi_epi32(tr0_2, tr0_3)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_4 =)",
    "insertText": "_mm_unpacklo_epi32(tr0_4, tr0_5)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_5 =)",
    "insertText": "_mm_unpacklo_epi32(tr0_6, tr0_7)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_6 =)",
    "insertText": "_mm_unpackhi_epi32(tr0_4, tr0_5)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_7 =)",
    "insertText": "_mm_unpackhi_epi32(tr0_6, tr0_7)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (in0 =)",
    "insertText": "_mm_unpacklo_epi64(tr1_0, tr1_4)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (in1 =)",
    "insertText": "_mm_unpackhi_epi64(tr1_0, tr1_4)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (in2 =)",
    "insertText": "_mm_unpacklo_epi64(tr1_2, tr1_6)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (in3 =)",
    "insertText": "_mm_unpackhi_epi64(tr1_2, tr1_6)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (in4 =)",
    "insertText": "_mm_unpacklo_epi64(tr1_1, tr1_5)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (in5 =)",
    "insertText": "_mm_unpackhi_epi64(tr1_1, tr1_5)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (in6 =)",
    "insertText": "_mm_unpacklo_epi64(tr1_3, tr1_7)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (in7 =)",
    "insertText": "_mm_unpackhi_epi64(tr1_3, tr1_7)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (} } { const __m128i sign_in0 =)",
    "insertText": "_mm_srai_epi16(in0, 15)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i sign_in1 =)",
    "insertText": "_mm_srai_epi16(in1, 15)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i sign_in2 =)",
    "insertText": "_mm_srai_epi16(in2, 15)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i sign_in3 =)",
    "insertText": "_mm_srai_epi16(in3, 15)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i sign_in4 =)",
    "insertText": "_mm_srai_epi16(in4, 15)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i sign_in5 =)",
    "insertText": "_mm_srai_epi16(in5, 15)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i sign_in6 =)",
    "insertText": "_mm_srai_epi16(in6, 15)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i sign_in7 =)",
    "insertText": "_mm_srai_epi16(in7, 15)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (in0 =)",
    "insertText": "_mm_sub_epi16(in0, sign_in0)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (in1 =)",
    "insertText": "_mm_sub_epi16(in1, sign_in1)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (in2 =)",
    "insertText": "_mm_sub_epi16(in2, sign_in2)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (in3 =)",
    "insertText": "_mm_sub_epi16(in3, sign_in3)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (in4 =)",
    "insertText": "_mm_sub_epi16(in4, sign_in4)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (in5 =)",
    "insertText": "_mm_sub_epi16(in5, sign_in5)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (in6 =)",
    "insertText": "_mm_sub_epi16(in6, sign_in6)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (in7 =)",
    "insertText": "_mm_sub_epi16(in7, sign_in7)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in0 =)",
    "insertText": "_mm_srai_epi16(in0, 1)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in1 =)",
    "insertText": "_mm_srai_epi16(in1, 1)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in2 =)",
    "insertText": "_mm_srai_epi16(in2, 1)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in3 =)",
    "insertText": "_mm_srai_epi16(in3, 1)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in4 =)",
    "insertText": "_mm_srai_epi16(in4, 1)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in5 =)",
    "insertText": "_mm_srai_epi16(in5, 1)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in6 =)",
    "insertText": "_mm_srai_epi16(in6, 1)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in7 =)",
    "insertText": "_mm_srai_epi16(in7, 1)"
  },
  {
    "label": "store_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store_output(&in0, (output + 0 * 8))"
  },
  {
    "label": "store_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store_output(&in1, (output + 1 * 8))"
  },
  {
    "label": "store_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store_output(&in2, (output + 2 * 8))"
  },
  {
    "label": "store_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store_output(&in3, (output + 3 * 8))"
  },
  {
    "label": "store_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store_output(&in4, (output + 4 * 8))"
  },
  {
    "label": "store_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store_output(&in5, (output + 5 * 8))"
  },
  {
    "label": "store_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store_output(&in6, (output + 6 * 8))"
  },
  {
    "label": "store_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store_output(&in7, (output + 7 * 8))"
  },
  {
    "label": "FDCT16x16_2D()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FDCT16x16_2D(const int16_t *input, tran_low_t *output, int stride)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (int pass ;)",
    "insertText": "DECLARE_ALIGNED(16, int16_t, intermediate[256])"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_p08_m24 =)",
    "insertText": "pair_set_epi16(cospi_8_64, -cospi_24_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_p30_p02 =)",
    "insertText": "pair_set_epi16(cospi_30_64, cospi_2_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_p14_p18 =)",
    "insertText": "pair_set_epi16(cospi_14_64, cospi_18_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_m02_p30 =)",
    "insertText": "pair_set_epi16(-cospi_2_64, cospi_30_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_m18_p14 =)",
    "insertText": "pair_set_epi16(-cospi_18_64, cospi_14_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_p22_p10 =)",
    "insertText": "pair_set_epi16(cospi_22_64, cospi_10_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_p06_p26 =)",
    "insertText": "pair_set_epi16(cospi_6_64, cospi_26_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_m10_p22 =)",
    "insertText": "pair_set_epi16(-cospi_10_64, cospi_22_64)"
  },
  {
    "label": "pair_set_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k__cospi_m26_p06 =)",
    "insertText": "pair_set_epi16(-cospi_26_64, cospi_6_64)"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i kOne =)",
    "insertText": "_mm_set1_epi16(1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int column_start ; # if DCT_HIGH_BIT_DEPTH int overflow ; # endif)",
    "insertText": "for(column_start = 0; column_start < 16; column_start += 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__m128i in00,in01,in02,in03,in04,in05,in06,in07 ; __m128i in08,in09,in10,in11,in12,in13,in14,in15 ; __m128i input0,input1,input2,input3,input4,input5,input6,input7 ; __m128i step1_0,step1_1,step1_2,step1_3 ; __m128i step1_4,step1_5,step1_6,step1_7 ; __m128i step2_1,step2_2,step2_3,step2_4,step2_5,step2_6 ; __m128i step3_0,step3_1,step3_2,step3_3 ; __m128i step3_4,step3_5,step3_6,step3_7 ; __m128i res00,res01,res02,res03,res04,res05,res06,res07 ; __m128i res08,res09,res10,res11,res12,res13,res14,res15 ;)",
    "insertText": "if(0 == pass)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in00 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 0 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in01 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 1 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in02 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 2 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in03 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 3 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in04 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 4 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in05 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 5 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in06 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 6 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in07 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 7 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in08 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 8 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in09 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 9 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in10 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 10 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in11 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 11 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in12 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 12 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in13 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 13 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in14 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 14 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in15 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 15 * stride))"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in00 =)",
    "insertText": "_mm_slli_epi16(in00, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in01 =)",
    "insertText": "_mm_slli_epi16(in01, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in02 =)",
    "insertText": "_mm_slli_epi16(in02, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in03 =)",
    "insertText": "_mm_slli_epi16(in03, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in04 =)",
    "insertText": "_mm_slli_epi16(in04, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in05 =)",
    "insertText": "_mm_slli_epi16(in05, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in06 =)",
    "insertText": "_mm_slli_epi16(in06, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in07 =)",
    "insertText": "_mm_slli_epi16(in07, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in08 =)",
    "insertText": "_mm_slli_epi16(in08, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in09 =)",
    "insertText": "_mm_slli_epi16(in09, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in10 =)",
    "insertText": "_mm_slli_epi16(in10, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in11 =)",
    "insertText": "_mm_slli_epi16(in11, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in12 =)",
    "insertText": "_mm_slli_epi16(in12, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in13 =)",
    "insertText": "_mm_slli_epi16(in13, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in14 =)",
    "insertText": "_mm_slli_epi16(in14, 2)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (in15 =)",
    "insertText": "_mm_slli_epi16(in15, 2)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (} else { in00 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 0 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in01 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 1 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in02 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 2 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in03 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 3 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in04 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 4 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in05 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 5 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in06 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 6 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in07 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 7 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in08 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 8 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in09 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 9 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in10 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 10 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in11 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 11 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in12 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 12 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in13 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 13 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in14 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 14 * 16))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in15 =)",
    "insertText": "_mm_load_si128((const __m128i *)(in + 15 * 16))"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in00 =)",
    "insertText": "_mm_add_epi16(in00, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in01 =)",
    "insertText": "_mm_add_epi16(in01, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in02 =)",
    "insertText": "_mm_add_epi16(in02, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in03 =)",
    "insertText": "_mm_add_epi16(in03, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in04 =)",
    "insertText": "_mm_add_epi16(in04, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in05 =)",
    "insertText": "_mm_add_epi16(in05, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in06 =)",
    "insertText": "_mm_add_epi16(in06, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in07 =)",
    "insertText": "_mm_add_epi16(in07, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in08 =)",
    "insertText": "_mm_add_epi16(in08, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in09 =)",
    "insertText": "_mm_add_epi16(in09, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in10 =)",
    "insertText": "_mm_add_epi16(in10, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in11 =)",
    "insertText": "_mm_add_epi16(in11, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in12 =)",
    "insertText": "_mm_add_epi16(in12, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in13 =)",
    "insertText": "_mm_add_epi16(in13, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in14 =)",
    "insertText": "_mm_add_epi16(in14, kOne)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (in15 =)",
    "insertText": "_mm_add_epi16(in15, kOne)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in00 =)",
    "insertText": "_mm_srai_epi16(in00, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in01 =)",
    "insertText": "_mm_srai_epi16(in01, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in02 =)",
    "insertText": "_mm_srai_epi16(in02, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in03 =)",
    "insertText": "_mm_srai_epi16(in03, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in04 =)",
    "insertText": "_mm_srai_epi16(in04, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in05 =)",
    "insertText": "_mm_srai_epi16(in05, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in06 =)",
    "insertText": "_mm_srai_epi16(in06, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in07 =)",
    "insertText": "_mm_srai_epi16(in07, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in08 =)",
    "insertText": "_mm_srai_epi16(in08, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in09 =)",
    "insertText": "_mm_srai_epi16(in09, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in10 =)",
    "insertText": "_mm_srai_epi16(in10, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in11 =)",
    "insertText": "_mm_srai_epi16(in11, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in12 =)",
    "insertText": "_mm_srai_epi16(in12, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in13 =)",
    "insertText": "_mm_srai_epi16(in13, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in14 =)",
    "insertText": "_mm_srai_epi16(in14, 2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (in15 =)",
    "insertText": "_mm_srai_epi16(in15, 2)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (} in + = 8 ; { input0 =)",
    "insertText": "ADD_EPI16(in00, in15)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (input1 =)",
    "insertText": "ADD_EPI16(in01, in14)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (input2 =)",
    "insertText": "ADD_EPI16(in02, in13)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (input3 =)",
    "insertText": "ADD_EPI16(in03, in12)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (input4 =)",
    "insertText": "ADD_EPI16(in04, in11)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (input5 =)",
    "insertText": "ADD_EPI16(in05, in10)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (input6 =)",
    "insertText": "ADD_EPI16(in06, in09)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (input7 =)",
    "insertText": "ADD_EPI16(in07, in08)"
  },
  {
    "label": "check_epi16_overflow_x8()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x8(&input0, &input1, &input2, &input3, &input4, &input5, &input6, &input7)"
  },
  {
    "label": "vpx_highbd_fdct16x16_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_highbd_fdct16x16_c(input, output, stride)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_1 =)",
    "insertText": "SUB_EPI16(in06, in09)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_2 =)",
    "insertText": "SUB_EPI16(in05, in10)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_3 =)",
    "insertText": "SUB_EPI16(in04, in11)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_4 =)",
    "insertText": "SUB_EPI16(in03, in12)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_5 =)",
    "insertText": "SUB_EPI16(in02, in13)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_6 =)",
    "insertText": "SUB_EPI16(in01, in14)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_7 =)",
    "insertText": "SUB_EPI16(in00, in15)"
  },
  {
    "label": "check_epi16_overflow_x8()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x8(&step1_0, &step1_1, &step1_2, &step1_3, &step1_4, &step1_5, &step1_6, &step1_7)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q1 =)",
    "insertText": "ADD_EPI16(input1, input6)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q2 =)",
    "insertText": "ADD_EPI16(input2, input5)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q3 =)",
    "insertText": "ADD_EPI16(input3, input4)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q4 =)",
    "insertText": "SUB_EPI16(input3, input4)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q5 =)",
    "insertText": "SUB_EPI16(input2, input5)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q6 =)",
    "insertText": "SUB_EPI16(input1, input6)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (const __m128i q7 =)",
    "insertText": "SUB_EPI16(input0, input7)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res00 =)",
    "insertText": "mult_round_shift(&t0, &t1, &k__cospi_p16_p16, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res08 =)",
    "insertText": "mult_round_shift(&t0, &t1, &k__cospi_p16_m16, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res04 =)",
    "insertText": "mult_round_shift(&t2, &t3, &k__cospi_p24_p08, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res12 =)",
    "insertText": "mult_round_shift(&t2, &t3, &k__cospi_m08_p24, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x4(&res00, &res08, &res04, &res12)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (const __m128i r0 =)",
    "insertText": "mult_round_shift(&d0, &d1, &k__cospi_p16_m16, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (const __m128i r1 =)",
    "insertText": "mult_round_shift(&d0, &d1, &k__cospi_p16_p16, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res02 =)",
    "insertText": "mult_round_shift(&t0, &t1, &k__cospi_p28_p04, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res14 =)",
    "insertText": "mult_round_shift(&t0, &t1, &k__cospi_m04_p28, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res10 =)",
    "insertText": "mult_round_shift(&t2, &t3, &k__cospi_p12_p20, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res06 =)",
    "insertText": "mult_round_shift(&t2, &t3, &k__cospi_m20_p12, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x4(&res02, &res14, &res10, &res06)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t1 =)",
    "insertText": "_mm_unpackhi_epi16(step1_5, step1_2)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t2 =)",
    "insertText": "_mm_unpacklo_epi16(step1_4, step1_3)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t3 =)",
    "insertText": "_mm_unpackhi_epi16(step1_4, step1_3)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (step2_3 =)",
    "insertText": "mult_round_shift(&t2, &t3, &k__cospi_p16_m16, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (step2_4 =)",
    "insertText": "mult_round_shift(&t2, &t3, &k__cospi_p16_p16, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x4(&step2_2, &step2_3, &step2_5, &step2_4)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (step3_1 =)",
    "insertText": "ADD_EPI16(step1_1, step2_2)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step3_2 =)",
    "insertText": "SUB_EPI16(step1_1, step2_2)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step3_3 =)",
    "insertText": "SUB_EPI16(step1_0, step2_3)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step3_4 =)",
    "insertText": "SUB_EPI16(step1_7, step2_4)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step3_5 =)",
    "insertText": "SUB_EPI16(step1_6, step2_5)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (step3_6 =)",
    "insertText": "ADD_EPI16(step1_6, step2_5)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (step3_7 =)",
    "insertText": "ADD_EPI16(step1_7, step2_4)"
  },
  {
    "label": "check_epi16_overflow_x8()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x8(&step3_0, &step3_1, &step3_2, &step3_3, &step3_4, &step3_5, &step3_6, &step3_7)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t1 =)",
    "insertText": "_mm_unpackhi_epi16(step3_1, step3_6)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t2 =)",
    "insertText": "_mm_unpacklo_epi16(step3_2, step3_5)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t3 =)",
    "insertText": "_mm_unpackhi_epi16(step3_2, step3_5)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (step2_1 =)",
    "insertText": "mult_round_shift(&t0, &t1, &k__cospi_m08_p24, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (step2_6 =)",
    "insertText": "mult_round_shift(&t0, &t1, &k__cospi_p24_p08, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (step2_5 =)",
    "insertText": "mult_round_shift(&t2, &t3, &k__cospi_p08_m24, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x4(&step2_1, &step2_2, &step2_6, &step2_5)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_1 =)",
    "insertText": "SUB_EPI16(step3_0, step2_1)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_2 =)",
    "insertText": "ADD_EPI16(step3_3, step2_2)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_3 =)",
    "insertText": "SUB_EPI16(step3_3, step2_2)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_4 =)",
    "insertText": "SUB_EPI16(step3_4, step2_5)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_5 =)",
    "insertText": "ADD_EPI16(step3_4, step2_5)"
  },
  {
    "label": "SUB_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_6 =)",
    "insertText": "SUB_EPI16(step3_7, step2_6)"
  },
  {
    "label": "ADD_EPI16()",
    "kind": "Method",
    "detail": "Function (step1_7 =)",
    "insertText": "ADD_EPI16(step3_7, step2_6)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t1 =)",
    "insertText": "_mm_unpackhi_epi16(step1_0, step1_7)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t2 =)",
    "insertText": "_mm_unpacklo_epi16(step1_1, step1_6)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t3 =)",
    "insertText": "_mm_unpackhi_epi16(step1_1, step1_6)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res01 =)",
    "insertText": "mult_round_shift(&t0, &t1, &k__cospi_p30_p02, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res09 =)",
    "insertText": "mult_round_shift(&t2, &t3, &k__cospi_p14_p18, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res15 =)",
    "insertText": "mult_round_shift(&t0, &t1, &k__cospi_m02_p30, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res07 =)",
    "insertText": "mult_round_shift(&t2, &t3, &k__cospi_m18_p14, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x4(&res01, &res09, &res15, &res07)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t1 =)",
    "insertText": "_mm_unpackhi_epi16(step1_2, step1_5)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t2 =)",
    "insertText": "_mm_unpacklo_epi16(step1_3, step1_4)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i t3 =)",
    "insertText": "_mm_unpackhi_epi16(step1_3, step1_4)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res05 =)",
    "insertText": "mult_round_shift(&t0, &t1, &k__cospi_p22_p10, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res13 =)",
    "insertText": "mult_round_shift(&t2, &t3, &k__cospi_p06_p26, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res11 =)",
    "insertText": "mult_round_shift(&t0, &t1, &k__cospi_m10_p22, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (res03 =)",
    "insertText": "mult_round_shift(&t2, &t3, &k__cospi_m26_p06, &k__DCT_CONST_ROUNDING, DCT_CONST_BITS)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (# if DCT_HIGH_BIT_DEPTH overflow =)",
    "insertText": "check_epi16_overflow_x4(&res05, &res13, &res11, &res03)"
  },
  {
    "label": "transpose_and_output8x8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transpose_and_output8x8(&res08, &res09, &res10, &res11, &res12, &res13, &res14, &res15, pass, out0 + 8, out1 + 8)"
  }
]