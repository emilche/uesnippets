[
  {
    "label": "SDL_AudioSpec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_AudioSpec"
  },
  {
    "label": "SDL_AudioCVT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_AudioCVT"
  },
  {
    "label": "_SDL_AudioStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_SDL_AudioStream"
  },
  {
    "label": "SDL_AUDIO_MASK_BITSIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_audio_h_ # define SDL_audio_h_ # include \" SDL_stdinc . h \" # include \" SDL_error . h \" # include \" SDL_endian . h \" # include \" SDL_mutex . h \" # include \" SDL_thread . h \" # include \" SDL_rwops . h \" # include \" begin_code . h \" # ifdef __cplusplus \" C \" { # endif typedef Uint16 SDL_AudioFormat ; # define)",
    "insertText": "SDL_AUDIO_MASK_BITSIZE(0xFF) #define SDL_AUDIO_MASK_DATATYPE (1<<8) #define SDL_AUDIO_MASK_ENDIAN (1<<12) #define SDL_AUDIO_MASK_SIGNED (1<<15) #define SDL_AUDIO_BITSIZE(x) (x & SDL_AUDIO_MASK_BITSIZE) #define SDL_AUDIO_ISFLOAT(x) (x & SDL_AUDIO_MASK_DATATYPE) #define SDL_AUDIO_ISBIGENDIAN(x) (x & SDL_AUDIO_MASK_ENDIAN) #define SDL_AUDIO_ISSIGNED(x) (x & SDL_AUDIO_MASK_SIGNED) #define SDL_AUDIO_ISINT(x) (!SDL_AUDIO_ISFLOAT(x)) #define SDL_AUDIO_ISLITTLEENDIAN(x) (!SDL_AUDIO_ISBIGENDIAN(x)) #define SDL_AUDIO_ISUNSIGNED(x) (!SDL_AUDIO_ISSIGNED(x)) #define AUDIO_U8 0x0008 #define AUDIO_S8 0x8008 #define AUDIO_U16LSB 0x0010 #define AUDIO_S16LSB 0x8010 #define AUDIO_U16MSB 0x1010 #define AUDIO_S16MSB 0x9010 #define AUDIO_U16 AUDIO_U16LSB #define AUDIO_S16 AUDIO_S16LSB #define AUDIO_S32LSB 0x8020 #define AUDIO_S32MSB 0x9020 #define AUDIO_S32 AUDIO_S32LSB #define AUDIO_F32LSB 0x8120 #define AUDIO_F32MSB 0x9120 #define AUDIO_F32 AUDIO_F32LSB #if SDL_BYTEORDER == SDL_LIL_ENDIAN #define AUDIO_U16SYS AUDIO_U16LSB #define AUDIO_S16SYS AUDIO_S16LSB #define AUDIO_S32SYS AUDIO_S32LSB #define AUDIO_F32SYS AUDIO_F32LSB #else #define AUDIO_U16SYS AUDIO_U16MSB #define AUDIO_S16SYS AUDIO_S16MSB #define AUDIO_S32SYS AUDIO_S32MSB #define AUDIO_F32SYS AUDIO_F32MSB #endif #define SDL_AUDIO_ALLOW_FREQUENCY_CHANGE 0x00000001 #define SDL_AUDIO_ALLOW_FORMAT_CHANGE 0x00000002 #define SDL_AUDIO_ALLOW_CHANNELS_CHANGE 0x00000004 #define SDL_AUDIO_ALLOW_SAMPLES_CHANGE 0x00000008 #define SDL_AUDIO_ALLOW_ANY_CHANGE (SDL_AUDIO_ALLOW_FREQUENCY_CHANGE|SDL_AUDIO_ALLOW_FORMAT_CHANGE|SDL_AUDIO_ALLOW_CHANNELS_CHANGE|SDL_AUDIO_ALLOW_SAMPLES_CHANGE) typedef void (SDLCALL * SDL_AudioCallback) (void *userdata, Uint8 * stream, int len)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef struct SDL_AudioSpec { int freq ; SDL_AudioFormat format ; Uint8 channels ; Uint8 silence ; Uint16 samples ; Uint16 padding ; Uint32 size ; SDL_AudioCallback callback ; void* userdata ; } SDL_AudioSpec ; struct SDL_AudioCVT ; typedef)",
    "insertText": "void(SDLCALL * SDL_AudioFilter) (struct SDL_AudioCVT * cvt, SDL_AudioFormat format)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# define SDL_AUDIOCVT_MAX_FILTERS 9 # if)",
    "insertText": "defined(__GNUC__) && !defined(__CHERI_PURE_CAPABILITY__) #define SDL_AUDIOCVT_PACKED __attribute__((packed))"
  },
  {
    "label": "SDL_GetNumAudioDrivers()",
    "kind": "Method",
    "detail": "Function (int needed ; SDL_AudioFormat src_format ; SDL_AudioFormat dst_format ; double rate_incr ; Uint8* buf ; int len ; int len_cvt ; int len_mult ; double len_ratio ; SDL_AudioFilter filters [ SDL_AUDIOCVT_MAX_FILTERS + 1 ] ; int filter_index ; } SDL_AUDIOCVT_PACKED SDL_AudioCVT ; DECLSPEC int SDLCALL)",
    "insertText": "SDL_GetNumAudioDrivers(void)"
  },
  {
    "label": "SDL_GetAudioDriver()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GetAudioDriver(int index)"
  },
  {
    "label": "SDL_AudioInit()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_AudioInit(const char *driver_name)"
  },
  {
    "label": "SDL_AudioQuit()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_AudioQuit(void)"
  },
  {
    "label": "SDL_GetCurrentAudioDriver()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GetCurrentAudioDriver(void)"
  },
  {
    "label": "SDL_OpenAudio()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_OpenAudio(SDL_AudioSpec * desired, SDL_AudioSpec * obtained)"
  },
  {
    "label": "SDL_GetNumAudioDevices()",
    "kind": "Method",
    "detail": "Function (typedef Uint32 SDL_AudioDeviceID ; DECLSPEC int SDLCALL)",
    "insertText": "SDL_GetNumAudioDevices(int iscapture)"
  },
  {
    "label": "SDL_GetAudioDeviceName()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GetAudioDeviceName(int index, int iscapture)"
  },
  {
    "label": "SDL_GetAudioDeviceSpec()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GetAudioDeviceSpec(int index, int iscapture, SDL_AudioSpec *spec)"
  },
  {
    "label": "SDL_GetDefaultAudioInfo()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GetDefaultAudioInfo(char **name, SDL_AudioSpec *spec, int iscapture)"
  },
  {
    "label": "SDL_OpenAudioDevice()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_AudioDeviceID SDLCALL)",
    "insertText": "SDL_OpenAudioDevice(const char *device, int iscapture, const SDL_AudioSpec *desired, SDL_AudioSpec *obtained, int allowed_changes)"
  },
  {
    "label": "SDL_GetAudioStatus()",
    "kind": "Method",
    "detail": "Function (typedef enum { SDL_AUDIO_STOPPED = 0,SDL_AUDIO_PLAYING,SDL_AUDIO_PAUSED } SDL_AudioStatus ; DECLSPEC SDL_AudioStatus SDLCALL)",
    "insertText": "SDL_GetAudioStatus(void)"
  },
  {
    "label": "SDL_GetAudioDeviceStatus()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_AudioStatus SDLCALL)",
    "insertText": "SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev)"
  },
  {
    "label": "SDL_PauseAudio()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_PauseAudio(int pause_on)"
  },
  {
    "label": "SDL_PauseAudioDevice()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_PauseAudioDevice(SDL_AudioDeviceID dev, int pause_on)"
  },
  {
    "label": "SDL_LoadWAV_RW()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_AudioSpec* SDLCALL)",
    "insertText": "SDL_LoadWAV_RW(SDL_RWops * src, int freesrc, SDL_AudioSpec * spec, Uint8 ** audio_buf, Uint32 * audio_len)"
  },
  {
    "label": "SDL_LoadWAV()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_LoadWAV(file, spec, audio_buf, audio_len) \\ SDL_LoadWAV_RW(SDL_RWFromFile(file, \"rb\"),1, spec,audio_buf,audio_len) extern DECLSPEC void SDLCALL SDL_FreeWAV(Uint8 * audio_buf)"
  },
  {
    "label": "SDL_BuildAudioCVT()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_BuildAudioCVT(SDL_AudioCVT * cvt, SDL_AudioFormat src_format, Uint8 src_channels, int src_rate, SDL_AudioFormat dst_format, Uint8 dst_channels, int dst_rate)"
  },
  {
    "label": "SDL_ConvertAudio()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_ConvertAudio(SDL_AudioCVT * cvt)"
  },
  {
    "label": "SDL_NewAudioStream()",
    "kind": "Method",
    "detail": "Function (struct _SDL_AudioStream ; typedef struct _SDL_AudioStream SDL_AudioStream ; DECLSPEC SDL_AudioStream* SDLCALL)",
    "insertText": "SDL_NewAudioStream(const SDL_AudioFormat src_format, const Uint8 src_channels, const int src_rate, const SDL_AudioFormat dst_format, const Uint8 dst_channels, const int dst_rate)"
  },
  {
    "label": "SDL_AudioStreamPut()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_AudioStreamPut(SDL_AudioStream *stream, const void *buf, int len)"
  },
  {
    "label": "SDL_AudioStreamGet()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_AudioStreamGet(SDL_AudioStream *stream, void *buf, int len)"
  },
  {
    "label": "SDL_AudioStreamAvailable()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_AudioStreamAvailable(SDL_AudioStream *stream)"
  },
  {
    "label": "SDL_AudioStreamFlush()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_AudioStreamFlush(SDL_AudioStream *stream)"
  },
  {
    "label": "SDL_AudioStreamClear()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_AudioStreamClear(SDL_AudioStream *stream)"
  },
  {
    "label": "SDL_FreeAudioStream()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_FreeAudioStream(SDL_AudioStream *stream)"
  },
  {
    "label": "SDL_MixAudio()",
    "kind": "Method",
    "detail": "Function (# define SDL_MIX_MAXVOLUME 1 2 8 DECLSPEC void SDLCALL)",
    "insertText": "SDL_MixAudio(Uint8 * dst, const Uint8 * src, Uint32 len, int volume)"
  },
  {
    "label": "SDL_MixAudioFormat()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_MixAudioFormat(Uint8 * dst, const Uint8 * src, SDL_AudioFormat format, Uint32 len, int volume)"
  },
  {
    "label": "SDL_QueueAudio()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_QueueAudio(SDL_AudioDeviceID dev, const void *data, Uint32 len)"
  },
  {
    "label": "SDL_DequeueAudio()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Uint32 SDLCALL)",
    "insertText": "SDL_DequeueAudio(SDL_AudioDeviceID dev, void *data, Uint32 len)"
  },
  {
    "label": "SDL_GetQueuedAudioSize()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Uint32 SDLCALL)",
    "insertText": "SDL_GetQueuedAudioSize(SDL_AudioDeviceID dev)"
  },
  {
    "label": "SDL_ClearQueuedAudio()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_ClearQueuedAudio(SDL_AudioDeviceID dev)"
  },
  {
    "label": "SDL_LockAudio()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_LockAudio(void)"
  },
  {
    "label": "SDL_LockAudioDevice()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_LockAudioDevice(SDL_AudioDeviceID dev)"
  },
  {
    "label": "SDL_UnlockAudio()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_UnlockAudio(void)"
  },
  {
    "label": "SDL_UnlockAudioDevice()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_UnlockAudioDevice(SDL_AudioDeviceID dev)"
  },
  {
    "label": "SDL_CloseAudio()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_CloseAudio(void)"
  },
  {
    "label": "SDL_CloseAudioDevice()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_CloseAudioDevice(SDL_AudioDeviceID dev)"
  }
]