[
  {
    "label": "FDataTableCategoryCustomizationLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataTableCategoryCustomizationLayout"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" IPropertyTypeCustomization . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Input / SComboBox . h \" # include \" IDetailChildrenBuilder . h \" # include \" Engine / DataTable . h \" # include \" DetailWidgetRow . h \" # include \" PropertyCustomizationHelpers . h \" # define LOCTEXT_NAMESPACE \" FDataTableCategoryCustomizationLayout \" class FDataTableCategoryCustomizationLayout : public IPropertyTypeCustomization { public : TSharedRef<IPropertyTypeCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "CustomizeHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeHeader(TSharedRef<class IPropertyHandle> InStructPropertyHandle, class FDetailWidgetRow& HeaderRow, IPropertyTypeCustomizationUtils& StructCustomizationUtils)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> StructPropertyHandle = InStructPropertyHandle ;)",
    "insertText": "if(StructPropertyHandle->HasMetaData(TEXT(\"RowType\")))"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (const FString& RowType = StructPropertyHandle ->)",
    "insertText": "GetMetaData(TEXT(\"RowType\"))"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (RowTypeFilter =)",
    "insertText": "FName(*RowType)"
  },
  {
    "label": "UScriptStruct()",
    "kind": "Method",
    "detail": "Function (RowFilterStruct = UClass::TryFindTypeSlow<)",
    "insertText": "UScriptStruct(RowType)"
  },
  {
    "label": "NameContent()",
    "kind": "Method",
    "detail": "Function (} HeaderRow .)",
    "insertText": "NameContent() [ InStructPropertyHandle->CreatePropertyNameWidget()"
  },
  {
    "label": "CustomizeChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeChildren(TSharedRef<class IPropertyHandle> InStructPropertyHandle, class IDetailChildrenBuilder& StructBuilder, IPropertyTypeCustomizationUtils& StructCustomizationUtils)"
  },
  {
    "label": "GetChildHandle()",
    "kind": "Method",
    "detail": "Function (DataTablePropertyHandle = InStructPropertyHandle ->)",
    "insertText": "GetChildHandle(\"DataTable\")"
  },
  {
    "label": "GetChildHandle()",
    "kind": "Method",
    "detail": "Function (ColumnNamePropertyHandle = InStructPropertyHandle ->)",
    "insertText": "GetChildHandle(\"ColumnName\")"
  },
  {
    "label": "GetChildHandle()",
    "kind": "Method",
    "detail": "Function (RowContentsPropertyHandle = InStructPropertyHandle ->)",
    "insertText": "GetChildHandle(\"RowContents\")"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (StructBuilder .)",
    "insertText": "AddCustomRow(LOCTEXT(\"DataTable_TableName\", \"Data Table\")) .NameContent() [ SNew(STextBlock) .Text(LOCTEXT(\"DataTable_TableName\", \"Data Table\")) .Font(StructCustomizationUtils.GetRegularFont()) ] .ValueContent() .MaxDesiredWidth(0.0f) [ SNew(SObjectPropertyEntryBox) .PropertyHandle(DataTablePropertyHandle) .AllowedClass(UDataTable::StaticClass()) .OnShouldFilterAsset(this, &FDataTableCategoryCustomizationLayout::ShouldFilterAsset)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (FSimpleDelegate OnDataTableChangedDelegate =)",
    "insertText": "CreateSP(this, &FDataTableCategoryCustomizationLayout::OnDataTableChanged)"
  },
  {
    "label": "SetOnPropertyValueChanged()",
    "kind": "Method",
    "detail": "Function (DataTablePropertyHandle ->)",
    "insertText": "SetOnPropertyValueChanged(OnDataTableChangedDelegate)"
  },
  {
    "label": "InitColumnWidgetContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString> InitialColumnValue =)",
    "insertText": "InitColumnWidgetContent()"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (StructBuilder .)",
    "insertText": "AddCustomRow(LOCTEXT(\"DataTable_ColumnName\", \"Column Name\")) .NameContent() [ SNew(STextBlock) .Text(LOCTEXT(\"DataTable_ColumnName\", \"Column Name\")) .Font(StructCustomizationUtils.GetRegularFont()) ] .ValueContent() [ SAssignNew(ColumnNameComboBox, SComboBox<TSharedPtr<FString> >) .OptionsSource(&ColumnNames) .OnGenerateWidget(this, &FDataTableCategoryCustomizationLayout::HandleColumnNameComboBoxGenarateWidget) .OnSelectionChanged(this, &FDataTableCategoryCustomizationLayout::OnColumnSelectionChanged) .InitiallySelectedItem(InitialColumnValue) [ SNew(STextBlock) .Text(this, &FDataTableCategoryCustomizationLayout::GetColumnNameComboBoxContentText)"
  },
  {
    "label": "InitRowWidgetContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString> InitialRowValue =)",
    "insertText": "InitRowWidgetContent()"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (StructBuilder .)",
    "insertText": "AddCustomRow(LOCTEXT(\"DataTable_RowContains\", \"Row Contains\")) .NameContent() [ SNew(STextBlock) .Text(LOCTEXT(\"DataTable_RowContains\", \"Row Contains\")) .Font(StructCustomizationUtils.GetRegularFont()) ] .ValueContent() [ SAssignNew(RowContentsComboBox, SComboBox<TSharedPtr<FString> >) .OptionsSource(&RowContents) .OnGenerateWidget(this, &FDataTableCategoryCustomizationLayout::HandleRowContentsComboBoxGenarateWidget) .OnSelectionChanged(this, &FDataTableCategoryCustomizationLayout::OnRowSelectionChanged) .InitiallySelectedItem(InitialRowValue) [ SNew(STextBlock) .Text(this, &FDataTableCategoryCustomizationLayout::GetRowContentsComboBoxContentText)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString> InitialValue =)",
    "insertText": "MakeShareable(new FString(LOCTEXT(\"DataTable_None\", \"None\").ToString()))"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FName RowContains ; const FPropertyAccess::Result RowResult = RowContentsPropertyHandle ->)",
    "insertText": "GetValue(RowContains)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (RowContents .)",
    "insertText": "Empty()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (UDataTable* DataTable = NULL ; DataTablePropertyHandle ->)",
    "insertText": "GetValue((UObject*&)DataTable)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FName ColumnName = NAME_None ; ColumnNamePropertyHandle ->)",
    "insertText": "GetValue(ColumnName)"
  },
  {
    "label": "GetTableData()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<FString>> RowData = DataTable ->)",
    "insertText": "GetTableData()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FString>& ColumnTitles = RowData [ 0 ] ; int Column ;)",
    "insertText": "for(Column = 0; Column < ColumnTitles.Num(); ++Column)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; } } TSet<FString> Strings ;)",
    "insertText": "for(int Row = 1; Row < RowData.Num(); ++Row)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FString> RowContentsItem =)",
    "insertText": "MakeShareable(new FString(RowData[Row][Column]))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RowContents .)",
    "insertText": "Add(RowContentsItem)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Strings .)",
    "insertText": "Add(*RowContentsItem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(RowData[Row][Column] == RowContains.ToString())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InitialValue = RowContentsItem ; } } } })",
    "insertText": "if(RowResult != FPropertyAccess::MultipleValues)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName NewValue =)",
    "insertText": "FName(**InitialValue)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (RowContentsPropertyHandle ->)",
    "insertText": "SetValue(NewValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FString>& ColumnTitles = RowData [ 0 ] ;)",
    "insertText": "for(int Column = 0; Column < ColumnTitles.Num(); ++Column)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FString> ColumnNameItem =)",
    "insertText": "MakeShareable(new FString(ColumnTitles[Column]))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ColumnNames .)",
    "insertText": "Add(ColumnNameItem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InitialValue = ColumnNameItem ; } } } })",
    "insertText": "if(ColumnResult != FPropertyAccess::MultipleValues)"
  },
  {
    "label": "HandleColumnNameComboBoxGenarateWidget()",
    "kind": "Method",
    "detail": "Function (} return InitialValue ; } TSharedRef<SWidget>)",
    "insertText": "HandleColumnNameComboBoxGenarateWidget(TSharedPtr<FString> Item)"
  },
  {
    "label": "HandleRowContentsComboBoxGenarateWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "HandleRowContentsComboBoxGenarateWidget(TSharedPtr<FString> Item)"
  },
  {
    "label": "GetColumnNameComboBoxContentText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetColumnNameComboBoxContentText()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FString ColumnNameValue ; const FPropertyAccess::Result ColumnResult = ColumnNamePropertyHandle ->)",
    "insertText": "GetValue(ColumnNameValue)"
  },
  {
    "label": "GetSelectedItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString> SelectedColumnName = ColumnNameComboBox ->)",
    "insertText": "GetSelectedItem()"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "LOCTEXT(\"DataTable_None\", \"None\")"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "LOCTEXT(\"MultipleValues\", \"Multiple Values\")"
  },
  {
    "label": "GetRowContentsComboBoxContentText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetRowContentsComboBoxContentText()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FString RowContainsValue ; const FPropertyAccess::Result RowResult = RowContentsPropertyHandle ->)",
    "insertText": "GetValue(RowContainsValue)"
  },
  {
    "label": "OnDataTableChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDataTableChanged()"
  },
  {
    "label": "SetSelectedItem()",
    "kind": "Method",
    "detail": "Function (ColumnNameComboBox ->)",
    "insertText": "SetSelectedItem(InitialColumnValue)"
  },
  {
    "label": "RefreshOptions()",
    "kind": "Method",
    "detail": "Function (ColumnNameComboBox ->)",
    "insertText": "RefreshOptions()"
  },
  {
    "label": "SetSelectedItem()",
    "kind": "Method",
    "detail": "Function (RowContentsComboBox ->)",
    "insertText": "SetSelectedItem(InitialRowValue)"
  },
  {
    "label": "OnColumnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnColumnSelectionChanged(TSharedPtr<FString> SelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName NewValue =)",
    "insertText": "FName(**SelectedItem)"
  },
  {
    "label": "OnRowSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRowSelectionChanged(TSharedPtr<FString> SelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "ShouldFilterAsset()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "ShouldFilterAsset(const FAssetData& AssetData)"
  },
  {
    "label": "RowStructureTagName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "RowStructureTagName(\"RowStructure\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString RowStructure ;)",
    "insertText": "if(AssetData.GetTagValue<FString>(RowStructureTagName, RowStructure))"
  }
]