[
  {
    "label": "_WidgetRec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_WidgetRec"
  },
  {
    "label": "WindowWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WindowWrapper"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_WINDOWWRAPPER_H # define MATERIALX_WINDOWWRAPPER_H # if)",
    "insertText": "defined(_WIN32) #define WIN32_LEAN_AND_MEAN #undef APIENTRY #include <windows.h> #elif defined(__linux__) || defined(__FreeBSD__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # include<memory> # include<MaterialXCore / Library . h> MATERIALX_NAMESPACE_BEGIN # if)",
    "insertText": "defined(_WIN32)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (using InternalWindowHandle = HDC ; using DisplayHandle = void* ; # elif)",
    "insertText": "defined(__linux__) || defined(__FreeBSD__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (using InternalWindowHandle = Window ; using DisplayHandle = Display* ; using Widget = struct _WidgetRec* ; # elif)",
    "insertText": "defined(__APPLE__)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (using InternalWindowHandle = void* ; using DisplayHandle = void* ; # else using Widget = void* ; using ExternalWindowHandle = void* ; using InternalWindowHandle = void* ; using DisplayHandle = void* ; # endif using WindowWrapperPtr = std::shared_ptr<class WindowWrapper> ; class WindowWrapper { public : WindowWrapperPtr)",
    "insertText": "create(ExternalWindowHandle externalHandle = {}, InternalWindowHandle internalHandle = {}, DisplayHandle display = {})"
  },
  {
    "label": "WindowWrapper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WindowWrapper()"
  },
  {
    "label": "externalHandle()",
    "kind": "Method",
    "detail": "Function (ExternalWindowHandle)",
    "insertText": "externalHandle()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__linux__) || defined(__FreeBSD__) Display* getXDisplay()"
  }
]