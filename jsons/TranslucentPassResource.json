[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FTranslucencyPassResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslucencyPassResources"
  },
  {
    "label": "FTranslucencyPassResourcesMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslucencyPassResourcesMap"
  },
  {
    "label": "FTranslucencyViewResourcesMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslucencyViewResourcesMap"
  },
  {
    "label": "FIntRect()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" # include \" SystemTextures . h \" namespace ETranslucencyPass { enum Type : int { TPT_TranslucencyStandard,TPT_TranslucencyStandardModulate,TPT_TranslucencyAfterDOF,TPT_TranslucencyAfterDOFModulate,TPT_TranslucencyAfterMotionBlur,TPT_TranslucencyHoldout,TPT_AllTranslucency,TPT_MAX } ; } ; struct FTranslucencyPassResources { ETranslucencyPass::Type Pass = ETranslucencyPass::TPT_MAX ; FIntRect ViewRect =)",
    "insertText": "FIntRect(0, 0, 0, 0)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (FRDGTextureMSAA ColorTexture ; FRDGTextureMSAA ColorModulateTexture ; FRDGTextureMSAA DepthTexture ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetColorForRead()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureRef)",
    "insertText": "GetColorForRead(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetColorModulateForRead()",
    "kind": "Method",
    "detail": "Function (} return ColorTexture . Resolve ; } FRDGTextureRef)",
    "insertText": "GetColorModulateForRead(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetDepthForRead()",
    "kind": "Method",
    "detail": "Function (} return ColorModulateTexture . Resolve ; } FRDGTextureRef)",
    "insertText": "GetDepthForRead(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetTextureViewport()",
    "kind": "Method",
    "detail": "Function (} return DepthTexture . Resolve ; } FScreenPassTextureViewport)",
    "insertText": "GetTextureViewport()"
  },
  {
    "label": "FTranslucencyPassResourcesMap()",
    "kind": "Method",
    "detail": "Function (} } ; struct FTranslucencyPassResourcesMap {)",
    "insertText": "FTranslucencyPassResourcesMap(int32 NumViews)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FTranslucencyPassResources&)",
    "insertText": "Get(int32 ViewIndex, ETranslucencyPass::Type Translucency)"
  },
  {
    "label": "FTranslucencyViewResourcesMap()",
    "kind": "Method",
    "detail": "Function (} ; private : TArray<TStaticArray<FTranslucencyPassResources,ETranslucencyPass::TPT_MAX>,TInlineAllocator<4>> Array ; } ; struct FTranslucencyViewResourcesMap {)",
    "insertText": "FTranslucencyViewResourcesMap()"
  },
  {
    "label": "FTranslucencyViewResourcesMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTranslucencyViewResourcesMap(const FTranslucencyPassResourcesMap& InTranslucencyPassResourcesMap, int32 InViewIndex) : TranslucencyPassResourcesMap(&InTranslucencyPassResourcesMap) , ViewIndex(InViewIndex)"
  }
]