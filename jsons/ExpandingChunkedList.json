[
  {
    "label": "TExpandingChunkedList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TExpandingChunkedList"
  },
  {
    "label": "FChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunk"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include<atomic> # include \" Misc / SpinLock . h \" template<T,int32 NumElementsPerChunk = 6 4> class TExpandingChunkedList { struct FChunk { FChunk* Next = nullptr ; int32 NumItems = 0 ; T Items [ NumElementsPerChunk ] ; } ;)",
    "insertText": "alignas(PLATFORM_CACHE_LINE_SIZE)"
  },
  {
    "label": "DeleteChunks()",
    "kind": "Method",
    "detail": "Function (FChunk* Head = nullptr ; void)",
    "insertText": "DeleteChunks(FChunk* Head)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (FChunk* NextChunk = Chunk -> Next ;)",
    "insertText": "Free(Chunk)"
  },
  {
    "label": "TExpandingChunkedList()",
    "kind": "Method",
    "detail": "Function (Chunk = NextChunk ; } } public : ~)",
    "insertText": "TExpandingChunkedList()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Push(T Item)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "Lock()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FChunk* OldHead = Head ;)",
    "insertText": "if(Head != nullptr && Head->NumItems < NumElementsPerChunk)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (Head -> Items [ Head -> NumItems + + ] = Item ; Lock .)",
    "insertText": "Unlock()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (FChunk* NewChunk =)",
    "insertText": "new(FMemory::Malloc(sizeof(FChunk), PLATFORM_CACHE_LINE_SIZE)) FChunk()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(NewChunk)"
  },
  {
    "label": "DeleteChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteChunks(Current)"
  },
  {
    "label": "PopAllAndEmpty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopAllAndEmpty(TArray<T>& OutArray)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Append(Chunk->Items, Chunk->NumItems)"
  }
]