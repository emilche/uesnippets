[
  {
    "label": "lmqrsolv()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_LMQRSOLV_H # define EIGEN_LMQRSOLV_H namespace Eigen { namespace internal { template<Scalar,int Rows,int Cols,PermIndex> void)",
    "insertText": "lmqrsolv(Matrix<Scalar,Rows,Cols> &s, const PermutationMatrix<Dynamic,Dynamic,PermIndex> &iPerm, const Matrix<Scalar,Dynamic,1> &diag, const Matrix<Scalar,Dynamic,1> &qtb, Matrix<Scalar,Dynamic,1> &x, Matrix<Scalar,Dynamic,1> &sdiag)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index i,j,k ; Scalar temp ; Index n = s .)",
    "insertText": "cols()"
  },
  {
    "label": "wa()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1>)",
    "insertText": "wa(n)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (JacobiRotation<Scalar> givens ; x = s .)",
    "insertText": "diagonal()"
  },
  {
    "label": "topLeftCorner()",
    "kind": "Method",
    "detail": "Function (wa = qtb ; s .)",
    "insertText": "topLeftCorner(n,n).template triangularView<StrictlyLower>() = s.topLeftCorner(n,n).transpose()"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (const PermIndex l = iPerm .)",
    "insertText": "indices()(j)"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (sdiag .)",
    "insertText": "tail(n-j).setZero()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (sdiag [ j ] = diag [ l ] ; Scalar qtbpj = 0 . ;)",
    "insertText": "for(k = j; k < n; ++k)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (givens .)",
    "insertText": "makeGivens(-s(k,k), sdiag[k])"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s(k,k) = givens.c() * s(k,k) + givens.s()"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (temp = givens .)",
    "insertText": "c() * wa[k] + givens.s()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (qtbpj = - givens .)",
    "insertText": "s() * wa[k] + givens.c()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (wa [ k ] = temp ;)",
    "insertText": "for(i = k+1; i<n; ++i)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (temp = givens .)",
    "insertText": "c() * s(i,k) + givens.s()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (sdiag [ i ] = - givens .)",
    "insertText": "s() * s(i,k) + givens.c()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s(i,k)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } Index nsing ;)",
    "insertText": "for(nsing=0; nsing<n && sdiag[nsing]!=0; nsing++)"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (} wa .)",
    "insertText": "tail(n-nsing).setZero()"
  },
  {
    "label": "topLeftCorner()",
    "kind": "Method",
    "detail": "Function (s .)",
    "insertText": "topLeftCorner(nsing, nsing).transpose().template triangularView<Upper>().solveInPlace(wa.head(nsing))"
  },
  {
    "label": "lmqrsolv()",
    "kind": "Method",
    "detail": "Function (x = iPerm* wa ; } template<Scalar,int _Options,Index> void)",
    "insertText": "lmqrsolv(SparseMatrix<Scalar,_Options,Index> &s, const PermutationMatrix<Dynamic,Dynamic> &iPerm, const Matrix<Scalar,Dynamic,1> &diag, const Matrix<Scalar,Dynamic,1> &qtb, Matrix<Scalar,Dynamic,1> &x, Matrix<Scalar,Dynamic,1> &sdiag)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (JacobiRotation<Scalar> givens ; wa = qtb ; FactorType)",
    "insertText": "R(s)"
  },
  {
    "label": "itk()",
    "kind": "Method",
    "detail": "Function (FactorType::InnerIterator)",
    "insertText": "itk(R,k)"
  },
  {
    "label": "valueRef()",
    "kind": "Method",
    "detail": "Function (itk .)",
    "insertText": "valueRef() = givens.c() * itk.value() + givens.s() * sdiag(k)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (temp = givens .)",
    "insertText": "c() * wa(k) + givens.s()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (qtbpj = - givens .)",
    "insertText": "s() * wa(k) + givens.c()"
  },
  {
    "label": "wa()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wa(k)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (i = itk .)",
    "insertText": "index()"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (temp = givens .)",
    "insertText": "c() * itk.value() + givens.s() * sdiag(i)"
  },
  {
    "label": "sdiag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sdiag(i) = -givens.s() * itk.value() + givens.c() * sdiag(i)"
  },
  {
    "label": "valueRef()",
    "kind": "Method",
    "detail": "Function (itk .)",
    "insertText": "valueRef()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } Index nsing ;)",
    "insertText": "for(nsing = 0; nsing<n && sdiag(nsing) !=0; nsing++)"
  },
  {
    "label": "head()",
    "kind": "Method",
    "detail": "Function (wa .)",
    "insertText": "head(nsing) = R.topLeftCorner(nsing,nsing).template triangularView<Upper>().solve (wa.head(nsing))"
  }
]