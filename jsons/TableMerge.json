[
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTableDiffCallbackParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTableDiffCallbackParams"
  },
  {
    "label": "FTableMergeService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableMergeService"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" TraceServices / Containers / Tables . h \" class FTokenizedMessage ; namespace TraceServices { enum class ETableDiffResult : uint32 { ESuccess = 0,EFail = 1,} ; struct FTableDiffCallbackParams { ETableDiffResult Result ; TSharedPtr<IUntypedTable> Table ; TArray<TSharedRef<FTokenizedMessage>> Messages ; } ; class FTableMergeService { public : typedef TFunction<)",
    "insertText": "void(TSharedPtr<FTableDiffCallbackParams>)"
  },
  {
    "label": "MergeTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeTables(const TSharedPtr<IUntypedTable>& TableA, const TSharedPtr<IUntypedTable>& TableB, TableDiffCallback InCallback)"
  }
]