[
  {
    "label": "EIGEN_POWER_PREFETCH()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_POWER_USE_PREFETCH # define)",
    "insertText": "EIGEN_POWER_PREFETCH(p) prefetch(p) #else #define EIGEN_POWER_PREFETCH(p)"
  },
  {
    "label": "gemm_extra_col()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<Scalar,Packet,DataMapper,Index,const Index accRows> EIGEN_STRONG_INLINE void)",
    "insertText": "gemm_extra_col(const DataMapper& res, const Scalar* lhs_base, const Scalar* rhs_base, Index depth, Index strideA, Index offsetA, Index row, Index col, Index remaining_rows, Index remaining_cols, const Packet& pAlpha)"
  },
  {
    "label": "gemm_extra_row()",
    "kind": "Method",
    "detail": "Function (template<Scalar,Packet,DataMapper,Index,const Index accRows,const Index accCols> EIGEN_STRONG_INLINE void)",
    "insertText": "gemm_extra_row(const DataMapper& res, const Scalar* lhs_base, const Scalar* rhs_base, Index depth, Index strideA, Index offsetA, Index row, Index col, Index rows, Index cols, Index remaining_rows, const Packet& pAlpha, const Packet& pMask)"
  },
  {
    "label": "gemm_unrolled_col()",
    "kind": "Method",
    "detail": "Function (template<Scalar,Packet,DataMapper,Index,const Index accCols> EIGEN_STRONG_INLINE void)",
    "insertText": "gemm_unrolled_col(const DataMapper& res, const Scalar* lhs_base, const Scalar* rhs_base, Index depth, Index strideA, Index offsetA, Index& row, Index rows, Index col, Index remaining_cols, const Packet& pAlpha)"
  },
  {
    "label": "bmask()",
    "kind": "Method",
    "detail": "Function (template<Packet> EIGEN_ALWAYS_INLINE Packet)",
    "insertText": "bmask(const int remaining_rows)"
  },
  {
    "label": "gemm_complex_extra_col()",
    "kind": "Method",
    "detail": "Function (template<Scalar,Packet,Packetc,DataMapper,Index,const Index accRows,const Index accCols,bool ConjugateLhs,bool ConjugateRhs,bool LhsIsReal,bool RhsIsReal> EIGEN_STRONG_INLINE void)",
    "insertText": "gemm_complex_extra_col(const DataMapper& res, const Scalar* lhs_base, const Scalar* rhs_base, Index depth, Index strideA, Index offsetA, Index strideB, Index row, Index col, Index remaining_rows, Index remaining_cols, const Packet& pAlphaReal, const Packet& pAlphaImag)"
  },
  {
    "label": "gemm_complex_extra_row()",
    "kind": "Method",
    "detail": "Function (template<Scalar,Packet,Packetc,DataMapper,Index,const Index accRows,const Index accCols,bool ConjugateLhs,bool ConjugateRhs,bool LhsIsReal,bool RhsIsReal> EIGEN_STRONG_INLINE void)",
    "insertText": "gemm_complex_extra_row(const DataMapper& res, const Scalar* lhs_base, const Scalar* rhs_base, Index depth, Index strideA, Index offsetA, Index strideB, Index row, Index col, Index rows, Index cols, Index remaining_rows, const Packet& pAlphaReal, const Packet& pAlphaImag, const Packet& pMask)"
  },
  {
    "label": "gemm_complex_unrolled_col()",
    "kind": "Method",
    "detail": "Function (template<Scalar,Packet,Packetc,DataMapper,Index,const Index accCols,bool ConjugateLhs,bool ConjugateRhs,bool LhsIsReal,bool RhsIsReal> EIGEN_STRONG_INLINE void)",
    "insertText": "gemm_complex_unrolled_col(const DataMapper& res, const Scalar* lhs_base, const Scalar* rhs_base, Index depth, Index strideA, Index offsetA, Index strideB, Index& row, Index rows, Index col, Index remaining_cols, const Packet& pAlphaReal, const Packet& pAlphaImag)"
  },
  {
    "label": "ploadLhs()",
    "kind": "Method",
    "detail": "Function (template<Scalar,Packet> EIGEN_ALWAYS_INLINE Packet)",
    "insertText": "ploadLhs(const Scalar* lhs)"
  },
  {
    "label": "bload()",
    "kind": "Method",
    "detail": "Function (template<DataMapper,Packet,Index,const Index accCols,int N,int StorageOrder> EIGEN_ALWAYS_INLINE void)",
    "insertText": "bload(PacketBlock<Packet,4>& acc, const DataMapper& res, Index row, Index col)"
  },
  {
    "label": "bload()",
    "kind": "Method",
    "detail": "Function (template<DataMapper,Packet,Index,const Index accCols,int N,int StorageOrder> EIGEN_ALWAYS_INLINE void)",
    "insertText": "bload(PacketBlock<Packet,8>& acc, const DataMapper& res, Index row, Index col)"
  },
  {
    "label": "bscale()",
    "kind": "Method",
    "detail": "Function (template<Packet> EIGEN_ALWAYS_INLINE void)",
    "insertText": "bscale(PacketBlock<Packet,4>& acc, PacketBlock<Packet,4>& accZ, const Packet& pAlpha)"
  },
  {
    "label": "bscalec()",
    "kind": "Method",
    "detail": "Function (template<Packet,int N> EIGEN_ALWAYS_INLINE void)",
    "insertText": "bscalec(PacketBlock<Packet,N>& aReal, PacketBlock<Packet,N>& aImag, const Packet& bReal, const Packet& bImag, PacketBlock<Packet,N>& cReal, PacketBlock<Packet,N>& cImag)"
  },
  {
    "label": "bcouple_common()",
    "kind": "Method",
    "detail": "Function (const Packet16uc p16uc_SETCOMPLEX32_FIRST = { 0,1,2,3,1 6,1 7,1 8,1 9,4,5,6,7,2 0,2 1,2 2,2 3 } ; const Packet16uc p16uc_SETCOMPLEX32_SECOND = { 8,9,1 0,1 1,2 4,2 5,2 6,2 7,1 2,1 3,1 4,1 5,2 8,2 9,3 0,3 1 } ; const Packet16uc p16uc_SETCOMPLEX64_FIRST = { 0,1,2,3,4,5,6,7,1 6,1 7,1 8,1 9,2 0,2 1,2 2,2 3 } ; const Packet16uc p16uc_SETCOMPLEX64_SECOND = { 8,9,1 0,1 1,1 2,1 3,1 4,1 5,2 4,2 5,2 6,2 7,2 8,2 9,3 0,3 1 } ; template<Packet,Packetc> EIGEN_ALWAYS_INLINE void)",
    "insertText": "bcouple_common(PacketBlock<Packet,4>& taccReal, PacketBlock<Packet,4>& taccImag, PacketBlock<Packetc, 4>& acc1, PacketBlock<Packetc, 4>& acc2)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc1 . packet [ 0 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[0], taccImag.packet[0], p16uc_SETCOMPLEX32_FIRST)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc1 . packet [ 1 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[1], taccImag.packet[1], p16uc_SETCOMPLEX32_FIRST)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc1 . packet [ 2 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[2], taccImag.packet[2], p16uc_SETCOMPLEX32_FIRST)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc1 . packet [ 3 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[3], taccImag.packet[3], p16uc_SETCOMPLEX32_FIRST)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 0 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[0], taccImag.packet[0], p16uc_SETCOMPLEX32_SECOND)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 1 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[1], taccImag.packet[1], p16uc_SETCOMPLEX32_SECOND)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 2 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[2], taccImag.packet[2], p16uc_SETCOMPLEX32_SECOND)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 3 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[3], taccImag.packet[3], p16uc_SETCOMPLEX32_SECOND)"
  },
  {
    "label": "bcouple()",
    "kind": "Method",
    "detail": "Function (} template<Packet,Packetc> EIGEN_ALWAYS_INLINE void)",
    "insertText": "bcouple(PacketBlock<Packet,4>& taccReal, PacketBlock<Packet,4>& taccImag, PacketBlock<Packetc,8>& tRes, PacketBlock<Packetc, 4>& acc1, PacketBlock<Packetc, 4>& acc2)"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (bcouple_common<Packet,)",
    "insertText": "Packetc(taccReal, taccImag, acc1, acc2)"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (acc1 . packet [ 0 ] = padd<)",
    "insertText": "Packetc(tRes.packet[0], acc1.packet[0])"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (acc1 . packet [ 1 ] = padd<)",
    "insertText": "Packetc(tRes.packet[1], acc1.packet[1])"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (acc1 . packet [ 2 ] = padd<)",
    "insertText": "Packetc(tRes.packet[2], acc1.packet[2])"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (acc1 . packet [ 3 ] = padd<)",
    "insertText": "Packetc(tRes.packet[3], acc1.packet[3])"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 0 ] = padd<)",
    "insertText": "Packetc(tRes.packet[4], acc2.packet[0])"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 1 ] = padd<)",
    "insertText": "Packetc(tRes.packet[5], acc2.packet[1])"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 2 ] = padd<)",
    "insertText": "Packetc(tRes.packet[6], acc2.packet[2])"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 3 ] = padd<)",
    "insertText": "Packetc(tRes.packet[7], acc2.packet[3])"
  },
  {
    "label": "bcouple_common()",
    "kind": "Method",
    "detail": "Function (} template<Packet,Packetc> EIGEN_ALWAYS_INLINE void)",
    "insertText": "bcouple_common(PacketBlock<Packet,1>& taccReal, PacketBlock<Packet,1>& taccImag, PacketBlock<Packetc, 1>& acc1, PacketBlock<Packetc, 1>& acc2)"
  },
  {
    "label": "bcouple()",
    "kind": "Method",
    "detail": "Function (} template<Packet,Packetc> EIGEN_ALWAYS_INLINE void)",
    "insertText": "bcouple(PacketBlock<Packet,1>& taccReal, PacketBlock<Packet,1>& taccImag, PacketBlock<Packetc,2>& tRes, PacketBlock<Packetc, 1>& acc1, PacketBlock<Packetc, 1>& acc2)"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 0 ] = padd<)",
    "insertText": "Packetc(tRes.packet[1], acc2.packet[0])"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_ALWAYS_INLINE void bcouple_common<Packet2d,)",
    "insertText": "Packet1cd(PacketBlock<Packet2d,4>& taccReal, PacketBlock<Packet2d,4>& taccImag, PacketBlock<Packet1cd, 4>& acc1, PacketBlock<Packet1cd, 4>& acc2)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc1 . packet [ 0 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[0], taccImag.packet[0], p16uc_SETCOMPLEX64_FIRST)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc1 . packet [ 1 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[1], taccImag.packet[1], p16uc_SETCOMPLEX64_FIRST)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc1 . packet [ 2 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[2], taccImag.packet[2], p16uc_SETCOMPLEX64_FIRST)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc1 . packet [ 3 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[3], taccImag.packet[3], p16uc_SETCOMPLEX64_FIRST)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 0 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[0], taccImag.packet[0], p16uc_SETCOMPLEX64_SECOND)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 1 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[1], taccImag.packet[1], p16uc_SETCOMPLEX64_SECOND)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 2 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[2], taccImag.packet[2], p16uc_SETCOMPLEX64_SECOND)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (acc2 . packet [ 3 ] . v =)",
    "insertText": "vec_perm(taccReal.packet[3], taccImag.packet[3], p16uc_SETCOMPLEX64_SECOND)"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_ALWAYS_INLINE void bcouple_common<Packet2d,)",
    "insertText": "Packet1cd(PacketBlock<Packet2d,1>& taccReal, PacketBlock<Packet2d,1>& taccImag, PacketBlock<Packet1cd, 1>& acc1, PacketBlock<Packet1cd, 1>& acc2)"
  },
  {
    "label": "ploadRhs()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,Packet> EIGEN_ALWAYS_INLINE Packet)",
    "insertText": "ploadRhs(const Scalar* rhs)"
  }
]