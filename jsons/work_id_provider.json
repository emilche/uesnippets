[
  {
    "label": "ThreadControllerWithMessagePumpImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadControllerWithMessagePumpImpl"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "sequence_manager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "sequence_manager"
  },
  {
    "label": "GetForCurrentThread()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MESSAGE_LOOP_WORK_ID_PROVIDER_H_ # define BASE_MESSAGE_LOOP_WORK_ID_PROVIDER_H_ # include<atomic> # include \" base / base_export . h \" # include \" base / threading / thread_checker . h \" namespace base { namespace sequence_manager { namespace internal { class ThreadControllerWithMessagePumpImpl ; } } class BASE_EXPORT WorkIdProvider { public : WorkIdProvider*)",
    "insertText": "GetForCurrentThread()"
  },
  {
    "label": "GetWorkId()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "GetWorkId()"
  },
  {
    "label": "WorkIdProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WorkIdProvider()"
  },
  {
    "label": "SetCurrentWorkIdForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWorkIdForTesting(unsigned int id)"
  },
  {
    "label": "IncrementWorkIdForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementWorkIdForTesting()"
  },
  {
    "label": "WorkIdProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorkIdProvider(const WorkIdProvider&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WorkIdProvider&)",
    "insertText": "operator(const WorkIdProvider&)"
  },
  {
    "label": "IncrementWorkId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementWorkId()"
  },
  {
    "label": "THREAD_CHECKER()",
    "kind": "Method",
    "detail": "Function (std::atomic_uint work_id_ ;)",
    "insertText": "THREAD_CHECKER(thread_checker_)"
  }
]