[
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_RandomAccessIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_SEED_SEQ_H # define _LIBCPP___RANDOM_SEED_SEQ_H # include<__algorithm / copy . h> # include<__algorithm / fill . h> # include<__algorithm / max . h> # include<__config> # include<initializer_list> # include<vector> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "seed_seq()",
    "kind": "Method",
    "detail": "Function (public : typedef uint32_t result_type ; _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "seed_seq()"
  },
  {
    "label": "seed_seq()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_CXX03_LANG template<class _Tp,__enable_if_t<is_integral<_Tp>::value>* = nullptr> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "seed_seq(initializer_list<_Tp> __il)"
  },
  {
    "label": "__init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__init(__il.begin(), __il.end())"
  },
  {
    "label": "seed_seq()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _InputIterator> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "seed_seq(_InputIterator __first, _InputIterator __last)"
  },
  {
    "label": "__init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__init(__first, __last)"
  },
  {
    "label": "generate()",
    "kind": "Method",
    "detail": "Function (} template<class _RandomAccessIterator> void)",
    "insertText": "generate(_RandomAccessIterator __first, _RandomAccessIterator __last)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY size_t)",
    "insertText": "size()"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} template<class _OutputIterator> _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "param(_OutputIterator __dest)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(__v_.begin(), __v_.end(), __dest)"
  },
  {
    "label": "seed_seq()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "seed_seq(const seed_seq&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const seed_seq&)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "_Tp(result_type __x)"
  },
  {
    "label": "__init()",
    "kind": "Method",
    "detail": "Function (} private : template<class _InputIterator> void)",
    "insertText": "__init(_InputIterator __first, _InputIterator __last)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(__first, __last, 0x8b8b8b8b)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t __n = static_cast<)",
    "insertText": "size_t(__last - __first)"
  },
  {
    "label": "__t()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "__t(__n >= 623) ? 11 : (__n >= 68) ? 7 : (__n >= 39) ? 5 : (__n >= 7) ? 3 : (__n - 1)"
  },
  {
    "label": "__p()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "__p(__n - __t)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (const size_t __q = __p + __t ; const size_t __m =)",
    "insertText": "max(__s + 1, __n)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function ({ result_type __r = 1 6 6 4 5 2 5*)",
    "insertText": "_Tp(__first[0] ^ __first[__p] ^ __first[__n - 1])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (__first [ __p ] + = __r ; __r + = __s ; __first [ __q ] + = __r ; __first [ 0 ] = __r ; } size_t __kmodn = 0 ; size_t __k1modn = __n - 1 ; size_t __kpmodn = __p % __n ; size_t __kqmodn = __q % __n ;)",
    "insertText": "for(size_t __k = 1; __k <= __s; ++__k)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (result_type __r = 1 6 6 4 5 2 5*)",
    "insertText": "_Tp(__first[__kmodn] ^ __first[__kpmodn] ^ __first[__k1modn])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (__first [ __kpmodn ] + = __r ; __r + = __kmodn + __v_ [ __k - 1 ] ; __first [ __kqmodn ] + = __r ; __first [ __kmodn ] = __r ; })",
    "insertText": "for(size_t __k = __s + 1; __k < __m; ++__k)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (__first [ __kpmodn ] + = __r ; __r + = __kmodn ; __first [ __kqmodn ] + = __r ; __first [ __kmodn ] = __r ; })",
    "insertText": "for(size_t __k = __m; __k < __m + __n; ++__k)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (result_type __r = 1 5 6 6 0 8 3 9 4 1*)",
    "insertText": "_Tp(__first[__kmodn] + __first[__kpmodn] + __first[__k1modn])"
  }
]