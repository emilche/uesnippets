[
  {
    "label": "ReadUTF8FromVMOAsUTF16()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FUCHSIA_MEM_BUFFER_UTIL_H_ # define BASE_FUCHSIA_MEM_BUFFER_UTIL_H_ # include<fuchsia / mem / cpp / fidl . h> # include<string> # include \" base / base_export . h \" # include \" base / files / file . h \" # include \" base / strings / string_piece_forward . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { BASE_EXPORT absl::optional<std::u16string>)",
    "insertText": "ReadUTF8FromVMOAsUTF16(const fuchsia::mem::Buffer& buffer)"
  },
  {
    "label": "VmoFromString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT zx::vmo)",
    "insertText": "VmoFromString(StringPiece data, StringPiece name)"
  },
  {
    "label": "MemBufferFromString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT fuchsia::mem::Buffer)",
    "insertText": "MemBufferFromString(StringPiece data, StringPiece name)"
  },
  {
    "label": "MemBufferFromString16()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT fuchsia::mem::Buffer)",
    "insertText": "MemBufferFromString16(StringPiece16 data, StringPiece name)"
  },
  {
    "label": "StringFromVmo()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT absl::optional<std::string>)",
    "insertText": "StringFromVmo(const zx::vmo& vmo)"
  },
  {
    "label": "StringFromMemBuffer()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT absl::optional<std::string>)",
    "insertText": "StringFromMemBuffer(const fuchsia::mem::Buffer& buffer)"
  },
  {
    "label": "StringFromMemData()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT absl::optional<std::string>)",
    "insertText": "StringFromMemData(const fuchsia::mem::Data& data)"
  },
  {
    "label": "MemBufferFromFile()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT fuchsia::mem::Buffer)",
    "insertText": "MemBufferFromFile(File file)"
  },
  {
    "label": "CloneBuffer()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT fuchsia::mem::Buffer)",
    "insertText": "CloneBuffer(const fuchsia::mem::Buffer& buffer, StringPiece name)"
  }
]