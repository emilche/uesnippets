[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FSlateAccessibleMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAccessibleMessageHandler"
  },
  {
    "label": "FSlateApplicationBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateApplicationBase"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "IToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolTip"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SImage"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttribute"
  },
  {
    "label": "FWindowTitleBarArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowTitleBarArgs"
  },
  {
    "label": "IWindowTitleBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWindowTitleBar"
  },
  {
    "label": "FSlateApplicationBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateApplicationBase"
  },
  {
    "label": "FHitTesting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHitTesting"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "currently",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "currently"
  },
  {
    "label": "FSlateApplicationBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateApplicationBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FHitTesting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHitTesting"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GenericApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericApplication"
  },
  {
    "label": "GenericApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericApplication"
  },
  {
    "label": "FSlateApplicationBase()",
    "kind": "Method",
    "detail": "Function (SLATECORE_API)",
    "insertText": "FSlateApplicationBase()"
  },
  {
    "label": "GetDisplayMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDisplayMetrics(FDisplayMetrics& OutDisplayMetrics)"
  },
  {
    "label": "GetSafeZoneSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSafeZoneSize(FMargin& SafeZone, const UE::Slate::FDeprecateVector2DParameter& OverrideSize)"
  },
  {
    "label": "GetSafeZoneRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSafeZoneRatio(FMargin& SafeZoneRatio)"
  },
  {
    "label": "ToggleGlobalInvalidation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleGlobalInvalidation(bool bIsGlobalInvalidationEnabled)"
  },
  {
    "label": "RegisterActiveTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActiveTimer( const TSharedRef<FActiveTimerHandle>& ActiveTimerHandle )"
  },
  {
    "label": "UnRegisterActiveTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterActiveTimer( const TSharedRef<FActiveTimerHandle>& ActiveTimerHandle )"
  },
  {
    "label": "UpdateAnyActiveTimersArePending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnyActiveTimersArePending()"
  },
  {
    "label": "UpdateCustomSafeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomSafeZone(const FMargin& NewSafeZoneRatio, bool bShouldRecacheMetrics)"
  },
  {
    "label": "SwapSafeZoneTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapSafeZoneTypes()"
  },
  {
    "label": "IsSlateAsleep()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSlateAsleep()"
  },
  {
    "label": "ResetCustomSafeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCustomSafeZone()"
  },
  {
    "label": "SetCustomSafeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomSafeZone(const FMargin& InSafeZone)"
  }
]