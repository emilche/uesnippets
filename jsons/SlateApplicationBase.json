[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FSlateAccessibleMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAccessibleMessageHandler"
  },
  {
    "label": "FSlateApplicationBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateApplicationBase"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "IToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolTip"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SImage"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttribute"
  },
  {
    "label": "FWindowTitleBarArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowTitleBarArgs"
  },
  {
    "label": "IWindowTitleBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWindowTitleBar"
  },
  {
    "label": "FHitTesting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHitTesting"
  },
  {
    "label": "GenericApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericApplication"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / SlateColor . h \" # include \" GenericPlatform / GenericApplication . h \" # include \" Layout / Visibility . h \" # include \" Layout / SlateRect . h \" # include \" Rendering / SlateRenderer . h \" # include \" Misc / CoreDelegates . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" Types / SlateVector2 . h \")",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnDebugSafeZoneChanged, const FMargin&, bool)"
  },
  {
    "label": "FWindowTitleBarArgs()",
    "kind": "Method",
    "detail": "Function (class FActiveTimerHandle ; # if WITH_ACCESSIBILITY class FSlateAccessibleMessageHandler ; # endif class FSlateApplicationBase ; class FWidgetPath ; class IToolTip ; class SWidget ; class SWindow ; class SImage ; enum class EInvalidateWidgetReason : uint8 ; template<ObjectType> class TAttribute ; struct FWindowTitleBarArgs {)",
    "insertText": "FWindowTitleBarArgs(const TSharedRef<SWindow>& InWindow) : Window(InWindow) , CenterContentAlignment(HAlign_Fill)"
  },
  {
    "label": "Flash()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWindow> Window ; TSharedPtr<SWidget> CenterContent ; EHorizontalAlignment CenterContentAlignment ; TAttribute<FText> CloseButtonToolTipText ; } ; class IWindowTitleBar { public : void)",
    "insertText": "Flash()"
  },
  {
    "label": "UpdateWindowMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWindowMenu(TSharedPtr<SWidget> MenuContent)"
  },
  {
    "label": "UpdateBackgroundContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBackgroundContent(TSharedPtr<SWidget> BackgroundContent)"
  },
  {
    "label": "SetAllowMenuBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowMenuBar(bool bInAllowMenuBar)"
  },
  {
    "label": "FHitTesting()",
    "kind": "Method",
    "detail": "Function (} ; class FSlateApplicationBase ; class FHitTesting { public :)",
    "insertText": "FHitTesting(FSlateApplicationBase* InSlateApplication) : SlateApp(InSlateApplication)"
  },
  {
    "label": "LocateWidgetInWindow()",
    "kind": "Method",
    "detail": "Function (} private : class SWindow ; private : FSlateApplicationBase* SlateApp ; FWidgetPath)",
    "insertText": "LocateWidgetInWindow(FVector2f ScreenspaceMouseCoordinate, const TSharedRef<SWindow>& Window, bool bIgnoreEnabledStatus, int32 UserIndex)"
  },
  {
    "label": "FSlateApplicationBase()",
    "kind": "Method",
    "detail": "Function (} ; namespace SlateApplicationDefs { const int32 MaxHardwareUsers = 8 ; } class FSlateApplicationBase { class SWidget ; public :)",
    "insertText": "FSlateApplicationBase()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "AddWindow()",
    "kind": "Method",
    "detail": "Function (} public : TSharedRef<SWindow>)",
    "insertText": "AddWindow(TSharedRef<SWindow> InSlateWindow, const bool bShowImmediately = true)"
  },
  {
    "label": "ArrangeWindowToFrontVirtual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrangeWindowToFrontVirtual(TArray<TSharedRef<SWindow>>& Windows, const TSharedRef<SWindow>& WindowToBringToFront)"
  },
  {
    "label": "FindPathToWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPathToWidget(TSharedRef<const SWidget> InWidget, FWidgetPath& OutWidgetPath, EVisibility VisibilityFilter = EVisibility::Visible)"
  },
  {
    "label": "FindWidgetWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "FindWidgetWindow(TSharedRef<const SWidget> InWidget)"
  },
  {
    "label": "GetActiveTopLevelWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetActiveTopLevelWindow()"
  },
  {
    "label": "GetActiveTopLevelRegularWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetActiveTopLevelRegularWindow()"
  },
  {
    "label": "GetTopLevelWindows()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<SWindow>>)",
    "insertText": "GetTopLevelWindows()"
  },
  {
    "label": "GetAppIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetAppIcon()"
  },
  {
    "label": "GetAppIconSmall()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetAppIconSmall()"
  },
  {
    "label": "GetApplicationScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetApplicationScale()"
  },
  {
    "label": "GetCurrentTime()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "GetCurrentTime()"
  },
  {
    "label": "GetCursorPos()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetCursorPos()"
  },
  {
    "label": "GetLastCursorPos()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetLastCursorPos()"
  },
  {
    "label": "GetCursorSize()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetCursorSize()"
  },
  {
    "label": "GetSoftwareCursorAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoftwareCursorAvailable()"
  },
  {
    "label": "GetSoftwareCursorVis()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetSoftwareCursorVis()"
  },
  {
    "label": "GetDisplayMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDisplayMetrics(FDisplayMetrics& OutDisplayMetrics)"
  },
  {
    "label": "GetCachedDisplayMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCachedDisplayMetrics(FDisplayMetrics& OutDisplayMetrics)"
  },
  {
    "label": "GetSafeZoneSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSafeZoneSize(FMargin& SafeZone, const UE::Slate::FDeprecateVector2DParameter& OverrideSize)"
  },
  {
    "label": "GetWindowTransparencySupport()",
    "kind": "Method",
    "detail": "Function (EWindowTransparency)",
    "insertText": "GetWindowTransparencySupport()"
  },
  {
    "label": "GetKeyboardFocusedWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetKeyboardFocusedWidget()"
  },
  {
    "label": "GetNavigationDirectionFromKey()",
    "kind": "Method",
    "detail": "Function (EUINavigation)",
    "insertText": "GetNavigationDirectionFromKey(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetNavigationDirectionFromAnalog()",
    "kind": "Method",
    "detail": "Function (EUINavigation)",
    "insertText": "GetNavigationDirectionFromAnalog(const FAnalogInputEvent& InAnalogEvent)"
  },
  {
    "label": "GetNavigationActionFromKey()",
    "kind": "Method",
    "detail": "Function (EUINavigationAction)",
    "insertText": "GetNavigationActionFromKey(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetNavigationActionForKey()",
    "kind": "Method",
    "detail": "Function (EUINavigationAction)",
    "insertText": "GetNavigationActionForKey(const FKey& InKey)"
  },
  {
    "label": "AnyMenusVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyMenusVisible()"
  },
  {
    "label": "GetAccessibleMessageHandler()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY TSharedRef<FSlateAccessibleMessageHandler>)",
    "insertText": "GetAccessibleMessageHandler()"
  },
  {
    "label": "GetSafeZoneRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSafeZoneRatio(FMargin& SafeZoneRatio)"
  },
  {
    "label": "HasAnyMouseCaptor()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HasAnyMouseCaptor()"
  },
  {
    "label": "HasUserMouseCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUserMouseCapture(int32 UserIndex)"
  },
  {
    "label": "GetPlatformApplication()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<GenericApplication>)",
    "insertText": "GetPlatformApplication()"
  },
  {
    "label": "HasUserFocusedDescendants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUserFocusedDescendants(const TSharedRef< const SWidget >& Widget, int32 UserIndex)"
  },
  {
    "label": "HasFocusedDescendants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFocusedDescendants(const TSharedRef< const SWidget >& Widget)"
  },
  {
    "label": "IsExternalUIOpened()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalUIOpened()"
  },
  {
    "label": "GetHitTesting()",
    "kind": "Method",
    "detail": "Function (class FHitTesting ; const FHitTesting&)",
    "insertText": "GetHitTesting()"
  },
  {
    "label": "LocateWindowUnderMouse()",
    "kind": "Method",
    "detail": "Function (FWidgetPath)",
    "insertText": "LocateWindowUnderMouse(UE::Slate::FDeprecateVector2DParameter ScreenspaceMouseCoordinate, const TArray< TSharedRef<SWindow > >& Windows, bool bIgnoreEnabledStatus = false, int32 UserIndex = INDEX_NONE)"
  },
  {
    "label": "CalculateTooltipWindowPosition()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "CalculateTooltipWindowPosition(const FSlateRect& InAnchorRect, const UE::Slate::FDeprecateVector2DParameter& InSize, bool bAutoAdjustForDPIScale)"
  },
  {
    "label": "IsWindowHousingInteractiveTooltip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowHousingInteractiveTooltip(const TSharedRef<const SWindow>& WindowToTest)"
  },
  {
    "label": "MakeImage()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SImage>)",
    "insertText": "MakeImage(const TAttribute<const FSlateBrush*>& Image, const TAttribute<FSlateColor>& Color, const TAttribute<EVisibility>& Visibility)"
  },
  {
    "label": "MakeToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IToolTip>)",
    "insertText": "MakeToolTip(const TAttribute<FText>& ToolTipText)"
  },
  {
    "label": "MakeToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IToolTip>)",
    "insertText": "MakeToolTip(const FText& ToolTipText)"
  },
  {
    "label": "MakeWindowTitleBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeWindowTitleBar(const FWindowTitleBarArgs& InArgs, TSharedPtr<IWindowTitleBar>& OutTitleBar)"
  },
  {
    "label": "RequestDestroyWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestDestroyWindow(TSharedRef<SWindow> WindowToDestroy)"
  },
  {
    "label": "SetKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetKeyboardFocus(const FWidgetPath& InFocusPath, const EFocusCause InCause)"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetUserFocus(const uint32 InUserIndex, const FWidgetPath& InFocusPath, const EFocusCause InCause)"
  },
  {
    "label": "SetAllUserFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllUserFocus(const FWidgetPath& InFocusPath, const EFocusCause InCause)"
  },
  {
    "label": "SetAllUserFocusAllowingDescendantFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllUserFocusAllowingDescendantFocus(const FWidgetPath& InFocusPath, const EFocusCause InCause)"
  },
  {
    "label": "GetUserFocusedWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetUserFocusedWidget(uint32 UserIndex)"
  },
  {
    "label": "GetCurrentDebugContextWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetCurrentDebugContextWidget()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FSlateApplicationBase, FOnInvalidateAllWidgets, bool)"
  },
  {
    "label": "OnInvalidateAllWidgets()",
    "kind": "Method",
    "detail": "Function (FOnInvalidateAllWidgets&)",
    "insertText": "OnInvalidateAllWidgets()"
  },
  {
    "label": "OnGlobalInvalidationToggled()",
    "kind": "Method",
    "detail": "Function (FOnGlobalInvalidationToggled&)",
    "insertText": "OnGlobalInvalidationToggled()"
  },
  {
    "label": "InvalidateAllWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAllWidgets(bool bClearResourcesImmediately)"
  },
  {
    "label": "RegisterActiveTimer()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegisterActiveTimer(const TSharedRef<FActiveTimerHandle>& ActiveTimerHandle)"
  },
  {
    "label": "UnRegisterActiveTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterActiveTimer(const TSharedRef<FActiveTimerHandle>& ActiveTimerHandle)"
  },
  {
    "label": "UpdateAnyActiveTimersArePending()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakPtr<FActiveTimerHandle>> ActiveTimerHandles ; protected : enum class ECustomSafeZoneState : uint8 { Unset,Set,Debug } ; void)",
    "insertText": "UpdateAnyActiveTimersArePending()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : const uint32 CursorPointerIndex ; const uint32 CursorUserIndex ; const FPlatformUserId SlateAppPrimaryPlatformUser ; FSlateApplicationBase&)",
    "insertText": "Get()"
  },
  {
    "label": "DoesWidgetHaveMouseCapture()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "DoesWidgetHaveMouseCapture(const TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "DoesWidgetHaveMouseCaptureByUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesWidgetHaveMouseCaptureByUser(const TSharedPtr<const SWidget> Widget, int32 UserIndex, TOptional<int32> PointerIndex)"
  },
  {
    "label": "HasUserFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<EFocusCause>)",
    "insertText": "HasUserFocus(const TSharedPtr<const SWidget> Widget, int32 UserIndex)"
  },
  {
    "label": "HasAnyUserFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<EFocusCause>)",
    "insertText": "HasAnyUserFocus(const TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "IsWidgetDirectlyHovered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWidgetDirectlyHovered(const TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "ShowUserFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowUserFocus(const TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "LocateWidgetInWindow()",
    "kind": "Method",
    "detail": "Function (FWidgetPath)",
    "insertText": "LocateWidgetInWindow(UE::Slate::FDeprecateVector2DParameter ScreenspaceMouseCoordinate, const TSharedRef<SWindow>& Window, bool bIgnoreEnabledStatus, int32 UserIndex)"
  },
  {
    "label": "UpdateCustomSafeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomSafeZone(const FMargin& NewSafeZoneRatio, bool bShouldRecacheMetrics)"
  },
  {
    "label": "SwapSafeZoneTypes()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SwapSafeZoneTypes()"
  },
  {
    "label": "IsSlateAsleep()",
    "kind": "Method",
    "detail": "Function (# endif protected : TSharedPtr<FSlateRenderer> Renderer ; FHitTesting HitTesting ; protected : TSharedPtr<FSlateApplicationBase> CurrentBaseApplication ; TSharedPtr<class GenericApplication> PlatformApplication ; FDisplayMetrics CachedDisplayMetrics ; float CachedDebugTitleSafeRatio ; public : bool)",
    "insertText": "IsSlateAsleep()"
  },
  {
    "label": "GetPlatformCursor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ICursor>)",
    "insertText": "GetPlatformCursor()"
  },
  {
    "label": "IsCustomSafeZoneSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCustomSafeZoneSet()"
  },
  {
    "label": "SetCustomSafeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomSafeZone(const FMargin& InSafeZone)"
  },
  {
    "label": "GetCustomSafeZone()",
    "kind": "Method",
    "detail": "Function (const FMargin&)",
    "insertText": "GetCustomSafeZone()"
  }
]