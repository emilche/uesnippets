[
  {
    "label": "FMTDInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMTDInfo"
  },
  {
    "label": "OverlapQuery()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Box . h \" # include \" Chaos / Capsule . h \" # include \" Chaos / CastingUtilities . h \" # include \" Chaos / Convex . h \" # include \" Chaos / GJK . h \" # include \" Chaos / HeightField . h \" # include \" Chaos / ImplicitObject . h \" # include \" Chaos / ImplicitObjectScaled . h \" # include \" Chaos / ImplicitObjectUnion . h \" # include \" Chaos / Levelset . h \" # include \" Chaos / Plane . h \" # include \" Chaos / Sphere . h \" # include \" Chaos / Transform . h \" # include \" Chaos / TriangleMeshImplicitObject . h \" # include \" ChaosArchive . h \" # include<algorithm> # include<utility> namespace Chaos { struct FMTDInfo { FVec3 Normal ; FVec3 Position ; FReal Penetration ; } ; template<QueryGeometry> bool)",
    "insertText": "OverlapQuery(const FImplicitObject& A, const FRigidTransform3& ATM, const QueryGeometry& B, const FRigidTransform3& BTM, const FReal Thickness = 0, FMTDInfo* OutMTD=nullptr)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (const EImplicitObjectType AType = A .)",
    "insertText": "GetType()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (EImplicitObjectType BType =)",
    "insertText": "StaticType()"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const TImplicitObjectTransformed<FReal,3>& TransformedA = static_cast<const TImplicitObjectTransformed<)",
    "insertText": "FReal(A)"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (const FRigidTransform3 NewATM = TransformedA .)",
    "insertText": "GetTransform()"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (} const FRigidTransform3 BToATM = BTM .)",
    "insertText": "GetRelativeTransform(ATM)"
  },
  {
    "label": "GetLocation()",
    "kind": "Method",
    "detail": "Function (const FVec3 Offset = ATM .)",
    "insertText": "GetLocation() - BTM.GetLocation()"
  },
  {
    "label": "CastHelper()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "CastHelper(A, BToATM, [&](const auto& AConcrete, const auto& BToAFullTM) { return GJKIntersection<FReal>(AConcrete, B, BToAFullTM, Thickness, Offset.SizeSquared() < 1e-4 ? FVec3(1, 0, 0) : Offset); })"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} } else { bool bOverlap = false ;)",
    "insertText": "switch(AType)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bOverlap = AHeightField .)",
    "insertText": "OverlapGeom(B, BToATM, Thickness, OutMTD)"
  },
  {
    "label": "FTriangleMeshImplicitObject()",
    "kind": "Method",
    "detail": "Function (break ; } case ImplicitObjectType::TriangleMesh : { const FTriangleMeshImplicitObject& ATriangleMesh = static_cast<const)",
    "insertText": "FTriangleMeshImplicitObject(A)"
  },
  {
    "label": "FLevelSet()",
    "kind": "Method",
    "detail": "Function (break ; } case ImplicitObjectType::LevelSet : { const FLevelSet& ALevelSet = static_cast<const)",
    "insertText": "FLevelSet(A)"
  },
  {
    "label": "FImplicitObjectUnion()",
    "kind": "Method",
    "detail": "Function (break ; } case ImplicitObjectType::Union : case ImplicitObjectType::UnionClustered : { const FImplicitObjectUnion& AUnion = static_cast<const)",
    "insertText": "FImplicitObjectUnion(A)"
  },
  {
    "label": "ForEachObject()",
    "kind": "Method",
    "detail": "Function (bool bHit = false ; AUnion .)",
    "insertText": "ForEachObject([&bHit, &ATM, &B, &BTM, Thickness, &OutMTD](const FImplicitObject& SubObject, const FRigidTransform3& SubTransform) { const FRigidTransform3 NewATM = SubTransform * ATM; if (OverlapQuery(SubObject, NewATM, B, BTM, Thickness, OutMTD)) { bHit = true; return true; } return false; })"
  },
  {
    "label": "AsScaledChecked()",
    "kind": "Method",
    "detail": "Function (const auto& AScaled = TImplicitObjectScaled<FTriangleMeshImplicitObject)",
    "insertText": "AsScaledChecked(A)"
  },
  {
    "label": "LowLevelOverlapGeom()",
    "kind": "Method",
    "detail": "Function (bOverlap = AScaled .)",
    "insertText": "LowLevelOverlapGeom(B, BToATM, Thickness, OutMTD)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(IsInstanced(AType))"
  },
  {
    "label": "AsInstancedChecked()",
    "kind": "Method",
    "detail": "Function (const auto& AInstanced = TImplicitObjectInstanced<FTriangleMeshImplicitObject)",
    "insertText": "AsInstancedChecked(A)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(OutMTD && bOverlap)"
  },
  {
    "label": "TransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (OutMTD -> Normal = ATM .)",
    "insertText": "TransformVectorNoScale(OutMTD->Normal)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (OutMTD -> Position = ATM .)",
    "insertText": "TransformPosition(OutMTD->Position)"
  },
  {
    "label": "SweepQuery()",
    "kind": "Method",
    "detail": "Function (} return bOverlap ; } } template<SweptGeometry> bool)",
    "insertText": "SweepQuery(const FImplicitObject& A, const FRigidTransform3& ATM, const SweptGeometry& B, const FRigidTransform3& BTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FReal Thickness, const bool bComputeMTD)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bResult = false ;)",
    "insertText": "if(AType == ImplicitObjectType::Transformed)"
  },
  {
    "label": "LocalPosition()",
    "kind": "Method",
    "detail": "Function (} OutFaceIndex = INDEX_NONE ; FVec3)",
    "insertText": "LocalPosition(-TNumericLimits<FReal>::Max())"
  },
  {
    "label": "LocalNormal()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "LocalNormal(0)"
  },
  {
    "label": "InverseTransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 LocalDir = ATM .)",
    "insertText": "InverseTransformVectorNoScale(Dir)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bSweepAsRaycast = BType = = ImplicitObjectType::Sphere&& ! bComputeMTD ;)",
    "insertText": "if(bSweepAsRaycast && IsScaled(AType))"
  },
  {
    "label": "GetScale()",
    "kind": "Method",
    "detail": "Function (const FVec3& Scale = Scaled .)",
    "insertText": "GetScale()"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bSweepAsRaycast =)",
    "insertText": "IsNearlyEqual(Scale[0], Scale[1]) && FMath::IsNearlyEqual(Scale[0], Scale[2])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bSweepAsRaycast)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FImplicitObject& BBase = B ; const TSphere<FReal,3>& BSphere = BBase . GetObjectChecked<TSphere<)",
    "insertText": "FReal()"
  },
  {
    "label": "TransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 Start = BToATM .)",
    "insertText": "TransformPositionNoScale(BSphere.GetCenter())"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (bResult = A .)",
    "insertText": "Raycast(Start, LocalDir, Length, Thickness + BSphere.GetRadius(), OutTime, LocalPosition, LocalNormal, OutFaceIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(A.IsConvex())"
  },
  {
    "label": "IsValidConvex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidConvex(const FImplicitObject& InObject)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return true ; } ;)",
    "insertText": "if(!ensureMsgf(IsValidConvex(A), TEXT(\"GJKRaycast - Convex A has no particles\")) || !ensureMsgf(IsValidConvex(B), TEXT(\"GJKRaycast - Convex B has no particles\")))"
  },
  {
    "label": "CastHelperNoUnwrap()",
    "kind": "Method",
    "detail": "Function (bResult =)",
    "insertText": "CastHelperNoUnwrap(A, BToATM, [&](const auto& ADowncast, const auto& BToAFullTM) { return GJKRaycast2(ADowncast, B, BToAFullTM, LocalDir, Length, OutTime, LocalPosition, LocalNormal, Thickness, bComputeMTD, Offset, Thickness); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(AType == ImplicitObjectType::DEPRECATED_Scaled)"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bResult = AHeightField .)",
    "insertText": "SweepGeom(B, BToATM, LocalDir, Length, OutTime, LocalPosition, LocalNormal, OutFaceIndex, OutFaceNormal, Thickness, bComputeMTD)"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bResult = ALevelSet .)",
    "insertText": "SweepGeom(B, BToATM, LocalDir, Length, OutTime, LocalPosition, LocalNormal, OutFaceIndex, Thickness, bComputeMTD)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (bool bHit = false ; OutTime = TNumericLimits<FReal)",
    "insertText": "Max()"
  },
  {
    "label": "ForEachObject()",
    "kind": "Method",
    "detail": "Function (AUnion .)",
    "insertText": "ForEachObject([&bHit, &ATM, &B, &BTM, &Dir, Length, &OutTime, &OutPosition, &OutNormal, &OutFaceIndex, &OutFaceNormal, Thickness, bComputeMTD](const FImplicitObject& SubObject, const FRigidTransform3& SubTransform) { const FRigidTransform3 NewATM = SubTransform * ATM; FReal ObjectTime = 0.0; FVec3 ObjectPosition; FVec3 ObjectNormal; int32 ObjectFaceIndex; FVec3 ObjectFaceNormal; if (SweepQuery(SubObject, NewATM, B, BTM, Dir, Length, ObjectTime, ObjectPosition, ObjectNormal, ObjectFaceIndex, ObjectFaceNormal, Thickness, bComputeMTD)) { bHit = true; if (ObjectTime < OutTime) { OutTime = ObjectTime; OutPosition = ObjectPosition; OutNormal = ObjectNormal; OutFaceIndex = ObjectFaceIndex; OutFaceNormal = ObjectFaceNormal; } } return false; })"
  },
  {
    "label": "LowLevelSweepGeom()",
    "kind": "Method",
    "detail": "Function (bResult = AScaled .)",
    "insertText": "LowLevelSweepGeom(B, BToATM, LocalDir, Length, OutTime, LocalPosition, LocalNormal, OutFaceIndex, OutFaceNormal, Thickness, bComputeMTD)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (break ; } else {)",
    "insertText": "ensureMsgf(false, TEXT(\"Unsupported query type: %u\"), (uint8)AType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(bResult && (OutTime > 0 || bComputeMTD))"
  },
  {
    "label": "TransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (OutNormal = ATM .)",
    "insertText": "TransformVectorNoScale(LocalNormal).GetSafeNormal(UE_KINDA_SMALL_NUMBER, FVec3::AxisVector(0))"
  },
  {
    "label": "TransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (OutPosition = ATM .)",
    "insertText": "TransformPositionNoScale(LocalPosition)"
  },
  {
    "label": "TransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (OutFaceNormal = ATM .)",
    "insertText": "TransformVectorNoScale(A.FindGeometryOpposingNormal(LocalDir, OutFaceIndex, OutNormal))"
  },
  {
    "label": "SweepQuery()",
    "kind": "Method",
    "detail": "Function (} return bResult ; } bool)",
    "insertText": "SweepQuery(const FImplicitObject& A, const FRigidTransform3& ATM, const FImplicitObject& B, const FRigidTransform3& BTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FReal Thickness, const bool bComputeMTD)"
  }
]