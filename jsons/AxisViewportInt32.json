[
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "TRACEINSIGHTS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTS_API"
  },
  {
    "label": "FAxisViewportInt32()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class SScrollBar ; class FAxisViewportInt32 { private : float SLATE_UNITS_TOLERANCE = 0 . 1 f ; public :)",
    "insertText": "FAxisViewportInt32()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ToDebugString()",
    "kind": "Method",
    "detail": "Function (Size = 0 . 0 f ; MinValue = 0 ; MaxValue = 0 ; MinPosition = 0 . 0 f ; MaxPosition = 0 . 0 f ; Position = 0 . 0 f ; MinScale = 0 . 0 0 0 1 f ; MaxScale = 1 6 . 0 f ; Scale = MaxScale ; } FString)",
    "insertText": "ToDebugString(const TCHAR* Sufix, const TCHAR* Unit)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Printf(TEXT(\"Scale%s: %.3f (%d %ss/pixel), Pos%s: %.2f\"), Sufix, Scale, FMath::RoundToInt(1.0f / Scale), Unit, Sufix, Position)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetMinValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMinValue()"
  },
  {
    "label": "GetNumSamplesPerPixel()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumSamplesPerPixel()"
  },
  {
    "label": "SetMinMaxInterval()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinMaxInterval(const int32 InMinValue, const int32 InMaxValue)"
  },
  {
    "label": "UpdateMinMax()",
    "kind": "Method",
    "detail": "Function (MinValue = InMinValue ; MaxValue = InMaxValue ;)",
    "insertText": "UpdateMinMax()"
  },
  {
    "label": "GetValueAtPos()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetValueAtPos(const float Pos)"
  },
  {
    "label": "GetValueAtOffset()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetValueAtOffset(const float Offset)"
  },
  {
    "label": "GetPosForValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetPosForValue(const int32 Value)"
  },
  {
    "label": "GetOffsetForValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetOffsetForValue(const int32 Value)"
  },
  {
    "label": "GetRoundedOffsetForValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetRoundedOffsetForValue(const int32 Value)"
  },
  {
    "label": "ScrollAtPos()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ScrollAtPos(const float Pos)"
  },
  {
    "label": "OnPositionChanged()",
    "kind": "Method",
    "detail": "Function (Position = Pos ;)",
    "insertText": "OnPositionChanged()"
  },
  {
    "label": "CenterOnValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CenterOnValue(const int32 Value)"
  },
  {
    "label": "CenterOnValueInterval()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CenterOnValueInterval(const int32 IntervalStartValue, const int32 IntervalEndValue)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float IntervalSize = Scale* static_cast<)",
    "insertText": "float(IntervalEndValue - IntervalStartValue)"
  },
  {
    "label": "ScrollAtPos()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "ScrollAtPos(static_cast<float>(IntervalStartValue) * Scale - (Size - IntervalSize) / 2.0f)"
  },
  {
    "label": "SetScaleLimits()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetScaleLimits(const float InMinScale, const float InMaxScale)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (MinScale = InMinScale ; MaxScale = InMaxScale ; } bool)",
    "insertText": "SetScale(const float NewScale)"
  },
  {
    "label": "ZoomWithFixedOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ZoomWithFixedOffset(const float NewScale, const float Offset)"
  },
  {
    "label": "RelativeZoomWithFixedOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RelativeZoomWithFixedOffset(const float Delta, const float Offset)"
  },
  {
    "label": "GetScrollLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetScrollLimits(float& OutMinPos, float& OutMaxPos)"
  },
  {
    "label": "EnforceScrollLimits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnforceScrollLimits(const float InMinPos, const float InMaxPos, const float InterpolationFactor)"
  },
  {
    "label": "UpdatePosWithinLimits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePosWithinLimits()"
  },
  {
    "label": "OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUserScrolled(TSharedPtr<SScrollBar> ScrollBar, float ScrollOffset)"
  },
  {
    "label": "UpdateScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScrollBar(TSharedPtr<SScrollBar> ScrollBar)"
  },
  {
    "label": "OnSizeChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnSizeChanged()"
  },
  {
    "label": "OnScaleChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnScaleChanged()"
  },
  {
    "label": "GetPosForValue()",
    "kind": "Method",
    "detail": "Function (MinPosition =)",
    "insertText": "GetPosForValue(MinValue)"
  },
  {
    "label": "GetPosForValue()",
    "kind": "Method",
    "detail": "Function (MaxPosition =)",
    "insertText": "GetPosForValue(MaxValue)"
  }
]