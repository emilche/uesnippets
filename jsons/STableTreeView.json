[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FFilterConfigurator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilterConfigurator"
  },
  {
    "label": "FTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTable"
  },
  {
    "label": "FTableColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableColumn"
  },
  {
    "label": "FTreeNodeGrouping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTreeNodeGrouping"
  },
  {
    "label": "ITableCellValueSorter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableCellValueSorter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "FTableTreeViewNodeFilteringAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableTreeViewNodeFilteringAsyncTask"
  },
  {
    "label": "FTableTreeViewSortingAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableTreeViewSortingAsyncTask"
  },
  {
    "label": "FTableTreeViewGroupingAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableTreeViewGroupingAsyncTask"
  },
  {
    "label": "FTableTreeViewHierarchyFilteringAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableTreeViewHierarchyFilteringAsyncTask"
  },
  {
    "label": "FTableTreeViewAsyncCompleteTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableTreeViewAsyncCompleteTask"
  },
  {
    "label": "FSearchForItemToSelectTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSearchForItemToSelectTask"
  },
  {
    "label": "FSelectNodeByTableRowIndexTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectNodeByTableRowIndexTask"
  },
  {
    "label": "SAsyncOperationStatus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAsyncOperationStatus"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedPtr<FTable> InTablePtr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "RebuildColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildColumns()"
  },
  {
    "label": "RebuildTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTree(bool bResync)"
  },
  {
    "label": "SelectNodeByTableRowIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNodeByTableRowIndex(int32 RowIndex)"
  },
  {
    "label": "OnClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClose()"
  },
  {
    "label": "SetCurrentGroupings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentGroupings(TArray<TSharedPtr<FTreeNodeGrouping>>& InCurrentGroupings)"
  },
  {
    "label": "InitCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCommandList()"
  },
  {
    "label": "ConstructWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructWidget(TSharedPtr<FTable> InTablePtr)"
  },
  {
    "label": "ConstructHierarchyBreadcrumbTrail()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructHierarchyBreadcrumbTrail()"
  },
  {
    "label": "ConstructHeaderArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructHeaderArea(TSharedRef<SVerticalBox> InWidgetContent)"
  },
  {
    "label": "ConstructFooterArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructFooterArea(TSharedRef<SVerticalBox> InWidgetContent)"
  },
  {
    "label": "UpdateTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTree()"
  },
  {
    "label": "TreeView_GetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "TreeView_GetMenuContent()"
  },
  {
    "label": "TreeView_BuildSortByMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildSortByMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "TreeView_BuildViewColumnMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildViewColumnMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "TreeView_BuildExportMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildExportMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ContextMenu_CopySelectedToClipboard_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CopySelectedToClipboard_Execute()"
  },
  {
    "label": "ContextMenu_CopyColumnToClipboard_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CopyColumnToClipboard_Execute()"
  },
  {
    "label": "ContextMenu_CopyColumnTooltipToClipboard_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CopyColumnTooltipToClipboard_Execute()"
  },
  {
    "label": "ContextMenu_ExpandSubtree_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExpandSubtree_Execute()"
  },
  {
    "label": "ContextMenu_ExpandCriticalPath_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExpandCriticalPath_Execute()"
  },
  {
    "label": "ContextMenu_CollapseSubtree_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CollapseSubtree_Execute()"
  },
  {
    "label": "ContextMenu_ExportToFile_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExportToFile_Execute(bool bInExportCollapsed, bool InExportLeafs)"
  },
  {
    "label": "InitializeAndShowHeaderColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAndShowHeaderColumns()"
  },
  {
    "label": "TreeViewHeaderRow_GenerateColumnMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "TreeViewHeaderRow_GenerateColumnMenu(const FTableColumn& Column)"
  },
  {
    "label": "TreeView_Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_Refresh()"
  },
  {
    "label": "TreeView_OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnGetChildren(FTableTreeNodePtr InParent, TArray<FTableTreeNodePtr>& OutChildren)"
  },
  {
    "label": "TreeView_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnSelectionChanged(FTableTreeNodePtr SelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "TreeView_OnExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnExpansionChanged(FTableTreeNodePtr TreeNode, bool bShouldBeExpanded)"
  },
  {
    "label": "TreeView_OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnMouseButtonDoubleClick(FTableTreeNodePtr TreeNode)"
  },
  {
    "label": "TreeView_OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "TreeView_OnGenerateRow(FTableTreeNodePtr TreeNode, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "TableRow_SetHoveredCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TableRow_SetHoveredCell(TSharedPtr<FTable> TablePtr, TSharedPtr<FTableColumn> ColumnPtr, FTableTreeNodePtr NodePtr)"
  },
  {
    "label": "InitNodeFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitNodeFiltering()"
  },
  {
    "label": "OnNodeFilteringChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeFilteringChanged()"
  },
  {
    "label": "ScheduleNodeFilteringAsyncOperationIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScheduleNodeFilteringAsyncOperationIfNeeded()"
  },
  {
    "label": "ScheduleNodeFilteringAsyncOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleNodeFilteringAsyncOperation()"
  },
  {
    "label": "StartNodeFilteringTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "StartNodeFilteringTask(FGraphEventRef Prerequisite = nullptr)"
  },
  {
    "label": "ApplyNodeFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyNodeFiltering()"
  },
  {
    "label": "InitFilterConfigurator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFilterConfigurator(FFilterConfigurator& InOutFilterConfigurator)"
  },
  {
    "label": "ConstructFilterConfiguratorButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructFilterConfiguratorButton()"
  },
  {
    "label": "FilterConfigurator_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "FilterConfigurator_OnClicked()"
  },
  {
    "label": "InitHierarchyFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHierarchyFiltering()"
  },
  {
    "label": "HandleItemToStringArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemToStringArray(const FTableTreeNodePtr& GroupOrStatNodePtr, TArray<FString>& OutSearchStrings)"
  },
  {
    "label": "OnHierarchyFilteringChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHierarchyFilteringChanged()"
  },
  {
    "label": "ScheduleHierarchyFilteringAsyncOperationIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScheduleHierarchyFilteringAsyncOperationIfNeeded()"
  },
  {
    "label": "ScheduleHierarchyFilteringAsyncOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleHierarchyFilteringAsyncOperation()"
  },
  {
    "label": "StartHierarchyFilteringTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "StartHierarchyFilteringTask(FGraphEventRef Prerequisite = nullptr)"
  },
  {
    "label": "ApplyHierarchyFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHierarchyFiltering()"
  },
  {
    "label": "ApplyEmptyHierarchyFilteringRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyEmptyHierarchyFilteringRec(FTableTreeNodePtr NodePtr)"
  },
  {
    "label": "ApplyHierarchyFilteringRec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyHierarchyFilteringRec(FTableTreeNodePtr NodePtr)"
  },
  {
    "label": "MakeSubtreeVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeSubtreeVisible(FTableTreeNodePtr NodePtr, bool bFilterIsEmpty)"
  },
  {
    "label": "ConstructSearchBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructSearchBox()"
  },
  {
    "label": "SearchBox_OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchBox_OnTextChanged(const FText& InFilterText)"
  },
  {
    "label": "CreateGroupings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGroupings()"
  },
  {
    "label": "InternalCreateGroupings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalCreateGroupings()"
  },
  {
    "label": "OnGroupingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGroupingChanged()"
  },
  {
    "label": "ScheduleGroupingAsyncOperationIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScheduleGroupingAsyncOperationIfNeeded()"
  },
  {
    "label": "ScheduleGroupingAsyncOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleGroupingAsyncOperation()"
  },
  {
    "label": "StartGroupingTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "StartGroupingTask(FGraphEventRef Prerequisite = nullptr)"
  },
  {
    "label": "ApplyGrouping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyGrouping()"
  },
  {
    "label": "CreateGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGroups(const TArray<TSharedPtr<FTreeNodeGrouping>>& Groupings)"
  },
  {
    "label": "GroupNodesRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupNodesRec(const TArray<FTableTreeNodePtr>& Nodes, FTableTreeNode& ParentGroup, int32 GroupingDepth, const TArray<TSharedPtr<FTreeNodeGrouping>>& Groupings)"
  },
  {
    "label": "RebuildGroupingCrumbs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildGroupingCrumbs()"
  },
  {
    "label": "OnGroupingCrumbClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGroupingCrumbClicked(const TSharedPtr<FTreeNodeGrouping>& InEntry)"
  },
  {
    "label": "BuildGroupingSubMenu_Change()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildGroupingSubMenu_Change(FMenuBuilder& MenuBuilder, const TSharedPtr<FTreeNodeGrouping> CrumbGrouping)"
  },
  {
    "label": "BuildGroupingSubMenu_Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildGroupingSubMenu_Add(FMenuBuilder& MenuBuilder, const TSharedPtr<FTreeNodeGrouping> CrumbGrouping)"
  },
  {
    "label": "GetGroupingCrumbMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetGroupingCrumbMenuContent(const TSharedPtr<FTreeNodeGrouping>& CrumbGrouping)"
  },
  {
    "label": "PreChangeGroupings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreChangeGroupings()"
  },
  {
    "label": "PostChangeGroupings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostChangeGroupings()"
  },
  {
    "label": "GroupingCrumbMenu_Reset_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupingCrumbMenu_Reset_Execute()"
  },
  {
    "label": "GroupingCrumbMenu_Remove_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupingCrumbMenu_Remove_Execute(const TSharedPtr<FTreeNodeGrouping> Grouping)"
  },
  {
    "label": "GroupingCrumbMenu_MoveLeft_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupingCrumbMenu_MoveLeft_Execute(const TSharedPtr<FTreeNodeGrouping> Grouping)"
  },
  {
    "label": "GroupingCrumbMenu_MoveRight_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupingCrumbMenu_MoveRight_Execute(const TSharedPtr<FTreeNodeGrouping> Grouping)"
  },
  {
    "label": "GroupingCrumbMenu_Change_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupingCrumbMenu_Change_Execute(const TSharedPtr<FTreeNodeGrouping> OldGrouping, const TSharedPtr<FTreeNodeGrouping> NewGrouping)"
  },
  {
    "label": "GroupingCrumbMenu_Add_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupingCrumbMenu_Add_Execute(const TSharedPtr<FTreeNodeGrouping> Grouping, const TSharedPtr<FTreeNodeGrouping> AfterGrouping)"
  },
  {
    "label": "UpdateCStringSameValueAggregationSingleNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCStringSameValueAggregationSingleNode(const FTableColumn& InColumn, FTableTreeNode& GroupNode)"
  },
  {
    "label": "UpdateCStringSameValueAggregationRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCStringSameValueAggregationRec(const FTableColumn& InColumn, FTableTreeNode& GroupNode)"
  },
  {
    "label": "UpdateAggregatedValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAggregatedValues(TSharedPtr<FTable> InTable, FTableTreeNode& InOutGroupNode)"
  },
  {
    "label": "UpdateAggregatedValuesSingleNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAggregatedValuesSingleNode(FTableTreeNode& GroupNode)"
  },
  {
    "label": "UpdateAggregatedValuesRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAggregatedValuesRec(FTableTreeNode& GroupNode)"
  },
  {
    "label": "GetDefaultColumnSortMode()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetDefaultColumnSortMode()"
  },
  {
    "label": "GetDefaultColumnBeingSorted()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetDefaultColumnBeingSorted()"
  },
  {
    "label": "CreateSortings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSortings()"
  },
  {
    "label": "UpdateCurrentSortingByColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentSortingByColumn()"
  },
  {
    "label": "OnSortingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortingChanged()"
  },
  {
    "label": "ScheduleSortingAsyncOperationIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScheduleSortingAsyncOperationIfNeeded()"
  },
  {
    "label": "ScheduleSortingAsyncOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleSortingAsyncOperation()"
  },
  {
    "label": "StartSortingTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "StartSortingTask(FGraphEventRef Prerequisite = nullptr)"
  },
  {
    "label": "ApplySorting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySorting()"
  },
  {
    "label": "SortTreeNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTreeNodes(ITableCellValueSorter* InSorter, EColumnSortMode::Type InColumnSortMode)"
  },
  {
    "label": "SortTreeNodesRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTreeNodesRec(FTableTreeNode& GroupNode, const ITableCellValueSorter& Sorter, EColumnSortMode::Type InColumnSortMode)"
  },
  {
    "label": "SetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSortModeForColumn(const FName& ColumnId, EColumnSortMode::Type SortMode)"
  },
  {
    "label": "OnSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortModeChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnId, const EColumnSortMode::Type SortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeaderMenu_SortMode_IsChecked(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeaderMenu_SortMode_Execute(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortMode_IsChecked(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SortMode_Execute(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortByColumn_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortByColumn_IsChecked(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_SortByColumn_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SortByColumn_Execute(const FName ColumnId)"
  },
  {
    "label": "ShowColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowColumn(const FName ColumnId)"
  },
  {
    "label": "ShowColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowColumn(FTableColumn& Column)"
  },
  {
    "label": "HideColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideColumn(const FName ColumnId)"
  },
  {
    "label": "HideColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideColumn(FTableColumn& Column)"
  },
  {
    "label": "IsColumnVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsColumnVisible(const FName ColumnId)"
  },
  {
    "label": "ToggleColumnVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleColumnVisibility(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_ShowAllColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ShowAllColumns_Execute()"
  },
  {
    "label": "ContextMenu_ResetColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ResetColumns_Execute()"
  },
  {
    "label": "ContextMenu_HideAllColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_HideAllColumns_Execute()"
  },
  {
    "label": "OnPreAsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreAsyncUpdate()"
  },
  {
    "label": "OnPostAsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostAsyncUpdate()"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "EnumHasAnyFlags(InProgressAsyncOperations, InType)"
  },
  {
    "label": "StartPendingAsyncOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPendingAsyncOperations()"
  },
  {
    "label": "CancelCurrentAsyncOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCurrentAsyncOp()"
  },
  {
    "label": "SetExpandValueForChildGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpandValueForChildGroups(FBaseTreeNode* InRoot, int32 InMaxExpandedNodes, int32 MaxDepthToExpand, bool InValue)"
  },
  {
    "label": "SetExpandValueForChildGroupsRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpandValueForChildGroupsRec(FBaseTreeNode* InRoot, int32 InDepth, int32 InMaxDepth, bool InValue)"
  },
  {
    "label": "ExportToFileRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportToFileRec(const FBaseTreeNodePtr& InGroupNode, TArray<FBaseTreeNodePtr>& InNodes, bool bInExportCollapsed, bool InExportLeafs, WriteToFileCallback Callback)"
  },
  {
    "label": "UpdateBannerText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBannerText()"
  },
  {
    "label": "OnApplyViewPreset()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnApplyViewPreset(const ITableTreeViewPreset* InPreset)"
  },
  {
    "label": "ApplyViewPreset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyViewPreset(const ITableTreeViewPreset& InPreset)"
  },
  {
    "label": "ApplyColumnConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyColumnConfig(const TArrayView<FTableColumnConfig>& InTableConfig)"
  },
  {
    "label": "ViewPreset_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ViewPreset_OnSelectionChanged(TSharedPtr<ITableTreeViewPreset> InPreset, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "ViewPreset_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ViewPreset_OnGenerateWidget(TSharedRef<ITableTreeViewPreset> InPreset)"
  },
  {
    "label": "StopAllTableDataTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllTableDataTasks(bool bWait = true)"
  }
]