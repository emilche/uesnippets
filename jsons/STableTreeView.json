[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FFilterConfigurator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilterConfigurator"
  },
  {
    "label": "FTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTable"
  },
  {
    "label": "FTableColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableColumn"
  },
  {
    "label": "FTreeNodeGrouping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTreeNodeGrouping"
  },
  {
    "label": "ITableCellValueSorter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableCellValueSorter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "FTableTreeViewNodeFilteringAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableTreeViewNodeFilteringAsyncTask"
  },
  {
    "label": "FTableTreeViewSortingAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableTreeViewSortingAsyncTask"
  },
  {
    "label": "FTableTreeViewGroupingAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableTreeViewGroupingAsyncTask"
  },
  {
    "label": "FTableTreeViewHierarchyFilteringAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableTreeViewHierarchyFilteringAsyncTask"
  },
  {
    "label": "FTableTreeViewAsyncCompleteTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableTreeViewAsyncCompleteTask"
  },
  {
    "label": "FSearchForItemToSelectTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSearchForItemToSelectTask"
  },
  {
    "label": "FSelectNodeByTableRowIndexTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectNodeByTableRowIndexTask"
  },
  {
    "label": "SAsyncOperationStatus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAsyncOperationStatus"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / FilterCollection . h \" # include \" Misc / TextFilter . h \" # include \" SlateFwd . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Widgets / Navigation / SBreadcrumbTrail . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" # include \" InsightsCore / Common / AsyncOperationProgress . h \" # include \" InsightsCore / Common / IAsyncOperationStatusProvider . h \" # include \" InsightsCore / Common / Stopwatch . h \" # include \" InsightsCore / Filter / ViewModels / Filters . h \" # include \" InsightsCore / Table / ViewModels / TableTreeNode . h \" # include<atomic> class FMenuBuilder ; class FUICommandList ; namespace UE::Insights { class FFilterConfigurator ; class FTable ; class FTableColumn ; class FTreeNodeGrouping ; class ITableCellValueSorter ; typedef TFilterCollection<const FTableTreeNodePtr&> FTableTreeNodeFilterCollection ; typedef TTextFilter<const FTableTreeNodePtr&> FTableTreeNodeTextFilter ; enum class EAsyncOperationType : uint32 { NodeFiltering = 1<<0,Grouping = 1<<1,Aggregation = 1<<2,Sorting = 1<<3,HierarchyFiltering = 1<<4,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EAsyncOperationType)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (struct FTableColumnConfig { FName ColumnId ; bool bIsVisible ; float Width ; } ; class ITableTreeViewPreset { public : FText)",
    "insertText": "GetName()"
  },
  {
    "label": "GetToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTip()"
  },
  {
    "label": "GetSortColumn()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSortColumn()"
  },
  {
    "label": "GetSortMode()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetSortMode()"
  },
  {
    "label": "SetCurrentGroupings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentGroupings(const TArray<TSharedPtr<FTreeNodeGrouping>>& InAvailableGroupings, TArray<TSharedPtr<FTreeNodeGrouping>>& InOutCurrentGroupings)"
  },
  {
    "label": "GetColumnConfigSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetColumnConfigSet(TArray<FTableColumnConfig>& InOutConfigSet)"
  },
  {
    "label": "FTableTaskCancellationToken()",
    "kind": "Method",
    "detail": "Function (} ; class FTableTaskCancellationToken { public :)",
    "insertText": "FTableTaskCancellationToken() : bCancel(false)"
  },
  {
    "label": "ShouldCancel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCancel()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Cancel()"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (bCancel .)",
    "insertText": "store(true)"
  },
  {
    "label": "STableTreeView()",
    "kind": "Method",
    "detail": "Function (} private : std::atomic<bool> bCancel ; } ; struct FTableTaskInfo { FGraphEventRef Event ; TSharedPtr<FTableTaskCancellationToken> CancellationToken ; } ; class STableTreeView : public SCompoundWidget,public IAsyncOperationStatusProvider { class FTableTreeViewNodeFilteringAsyncTask ; class FTableTreeViewSortingAsyncTask ; class FTableTreeViewGroupingAsyncTask ; class FTableTreeViewHierarchyFilteringAsyncTask ; class FTableTreeViewAsyncCompleteTask ; class FSearchForItemToSelectTask ; class FSelectNodeByTableRowIndexTask ; public :)",
    "insertText": "STableTreeView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(STableTreeView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedPtr<FTable> InTablePtr)"
  },
  {
    "label": "GetInnerTreeView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STreeView<FTableTreeNodePtr>>)",
    "insertText": "GetInnerTreeView()"
  },
  {
    "label": "RebuildColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildColumns()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "RebuildTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTree(bool bResync)"
  },
  {
    "label": "GetNodeByTableRowIndex()",
    "kind": "Method",
    "detail": "Function (FTableTreeNodePtr)",
    "insertText": "GetNodeByTableRowIndex(int32 RowIndex)"
  },
  {
    "label": "SelectNodeByTableRowIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNodeByTableRowIndex(int32 RowIndex)"
  },
  {
    "label": "IsRunningAsyncUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningAsyncUpdate()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "GetCurrentOperationDuration()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetCurrentOperationDuration()"
  },
  {
    "label": "SetLogListingName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLogListingName(const FName& InLogListingName)"
  },
  {
    "label": "GetLogListingName()",
    "kind": "Method",
    "detail": "Function (LogListingName = InLogListingName ; } const FName&)",
    "insertText": "GetLogListingName()"
  },
  {
    "label": "InitCommandList()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitCommandList()"
  },
  {
    "label": "ConstructWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructWidget(TSharedPtr<FTable> InTablePtr)"
  },
  {
    "label": "ConstructHierarchyBreadcrumbTrail()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructHierarchyBreadcrumbTrail()"
  },
  {
    "label": "ConstructToolbar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "ConstructToolbar()"
  },
  {
    "label": "ConstructFooterArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructFooterArea(TSharedRef<SVerticalBox> InWidgetContent)"
  },
  {
    "label": "UpdateTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTree()"
  },
  {
    "label": "TreeView_GetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "TreeView_GetMenuContent()"
  },
  {
    "label": "TreeView_BuildSortByMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildSortByMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "TreeView_BuildViewColumnMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildViewColumnMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "TreeView_BuildExportMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildExportMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ContextMenu_CopySelectedToClipboard_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_CopySelectedToClipboard_CanExecute()"
  },
  {
    "label": "ContextMenu_CopySelectedToClipboard_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CopySelectedToClipboard_Execute()"
  },
  {
    "label": "ContextMenu_CopyColumnToClipboard_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_CopyColumnToClipboard_CanExecute()"
  },
  {
    "label": "ContextMenu_CopyColumnToClipboard_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CopyColumnToClipboard_Execute()"
  },
  {
    "label": "ContextMenu_CopyColumnTooltipToClipboard_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_CopyColumnTooltipToClipboard_CanExecute()"
  },
  {
    "label": "ContextMenu_CopyColumnTooltipToClipboard_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CopyColumnTooltipToClipboard_Execute()"
  },
  {
    "label": "ContextMenu_ExpandSubtree_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ExpandSubtree_CanExecute()"
  },
  {
    "label": "ContextMenu_ExpandSubtree_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExpandSubtree_Execute()"
  },
  {
    "label": "ContextMenu_ExpandCriticalPath_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ExpandCriticalPath_CanExecute()"
  },
  {
    "label": "ContextMenu_ExpandCriticalPath_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExpandCriticalPath_Execute()"
  },
  {
    "label": "ContextMenu_CollapseSubtree_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_CollapseSubtree_CanExecute()"
  },
  {
    "label": "ContextMenu_CollapseSubtree_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CollapseSubtree_Execute()"
  },
  {
    "label": "ContextMenu_ExportToFile_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ExportToFile_CanExecute()"
  },
  {
    "label": "ContextMenu_ExportToFile_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExportToFile_Execute(bool bInExportCollapsed, bool InExportLeafs)"
  },
  {
    "label": "InitializeAndShowHeaderColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAndShowHeaderColumns()"
  },
  {
    "label": "GetColumnHeaderText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetColumnHeaderText(const FName ColumnId)"
  },
  {
    "label": "TreeViewHeaderRow_GenerateColumnMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "TreeViewHeaderRow_GenerateColumnMenu(const FTableColumn& Column)"
  },
  {
    "label": "TreeView_Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_Refresh()"
  },
  {
    "label": "TreeView_OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnGetChildren(FTableTreeNodePtr InParent, TArray<FTableTreeNodePtr>& OutChildren)"
  },
  {
    "label": "TreeView_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnSelectionChanged(FTableTreeNodePtr SelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "TreeView_OnExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnExpansionChanged(FTableTreeNodePtr TreeNode, bool bShouldBeExpanded)"
  },
  {
    "label": "TreeView_OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnMouseButtonDoubleClick(FTableTreeNodePtr TreeNode)"
  },
  {
    "label": "TreeView_OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "TreeView_OnGenerateRow(FTableTreeNodePtr TreeNode, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "TableRow_ShouldBeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TableRow_ShouldBeEnabled(FTableTreeNodePtr NodePtr)"
  },
  {
    "label": "TableRow_SetHoveredCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TableRow_SetHoveredCell(TSharedPtr<FTable> TablePtr, TSharedPtr<FTableColumn> ColumnPtr, FTableTreeNodePtr NodePtr)"
  },
  {
    "label": "TableRow_GetColumnOutlineHAlignment()",
    "kind": "Method",
    "detail": "Function (EHorizontalAlignment)",
    "insertText": "TableRow_GetColumnOutlineHAlignment(const FName ColumnId)"
  },
  {
    "label": "TableRow_GetHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TableRow_GetHighlightText()"
  },
  {
    "label": "TableRow_GetHighlightedNodeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "TableRow_GetHighlightedNodeName()"
  },
  {
    "label": "InitNodeFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitNodeFiltering()"
  },
  {
    "label": "OnNodeFilteringChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeFilteringChanged()"
  },
  {
    "label": "ScheduleNodeFilteringAsyncOperationIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScheduleNodeFilteringAsyncOperationIfNeeded()"
  },
  {
    "label": "ScheduleNodeFilteringAsyncOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleNodeFilteringAsyncOperation()"
  },
  {
    "label": "StartNodeFilteringTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "StartNodeFilteringTask(FGraphEventRef Prerequisite = nullptr)"
  },
  {
    "label": "ApplyNodeFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyNodeFiltering()"
  },
  {
    "label": "FilterNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterNode(const FFilterConfigurator& InFilterConfigurator, const FTableTreeNode& InNode)"
  },
  {
    "label": "InitFilterConfigurator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFilterConfigurator(FFilterConfigurator& InOutFilterConfigurator)"
  },
  {
    "label": "UpdateFilterContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFilterContext(const FFilterConfigurator& InFilterConfigurator, const FTableTreeNode& InNode)"
  },
  {
    "label": "ConstructFilterConfiguratorButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructFilterConfiguratorButton()"
  },
  {
    "label": "FilterConfigurator_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "FilterConfigurator_OnClicked()"
  },
  {
    "label": "InitHierarchyFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHierarchyFiltering()"
  },
  {
    "label": "HandleItemToStringArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemToStringArray(const FTableTreeNodePtr& GroupOrStatNodePtr, TArray<FString>& OutSearchStrings)"
  },
  {
    "label": "OnHierarchyFilteringChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHierarchyFilteringChanged()"
  },
  {
    "label": "ScheduleHierarchyFilteringAsyncOperationIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScheduleHierarchyFilteringAsyncOperationIfNeeded()"
  },
  {
    "label": "ScheduleHierarchyFilteringAsyncOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleHierarchyFilteringAsyncOperation()"
  },
  {
    "label": "StartHierarchyFilteringTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "StartHierarchyFilteringTask(FGraphEventRef Prerequisite = nullptr)"
  },
  {
    "label": "ApplyHierarchyFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHierarchyFiltering()"
  },
  {
    "label": "ApplyEmptyHierarchyFilteringRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyEmptyHierarchyFilteringRec(FTableTreeNodePtr NodePtr)"
  },
  {
    "label": "ApplyHierarchyFilteringRec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyHierarchyFilteringRec(FTableTreeNodePtr NodePtr)"
  },
  {
    "label": "MakeSubtreeVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeSubtreeVisible(FTableTreeNodePtr NodePtr, bool bFilterIsEmpty)"
  },
  {
    "label": "ConstructSearchBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructSearchBox()"
  },
  {
    "label": "SearchBox_OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchBox_OnTextChanged(const FText& InFilterText)"
  },
  {
    "label": "CreateGroupings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGroupings()"
  },
  {
    "label": "InternalCreateGroupings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalCreateGroupings()"
  },
  {
    "label": "OnGroupingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGroupingChanged()"
  },
  {
    "label": "ScheduleGroupingAsyncOperationIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScheduleGroupingAsyncOperationIfNeeded()"
  },
  {
    "label": "ScheduleGroupingAsyncOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleGroupingAsyncOperation()"
  },
  {
    "label": "StartGroupingTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "StartGroupingTask(FGraphEventRef Prerequisite = nullptr)"
  },
  {
    "label": "ApplyGrouping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyGrouping()"
  },
  {
    "label": "CreateGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGroups(const TArray<TSharedPtr<FTreeNodeGrouping>>& Groupings)"
  },
  {
    "label": "GroupNodesRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupNodesRec(const TArray<FTableTreeNodePtr>& Nodes, FTableTreeNode& ParentGroup, int32 GroupingDepth, const TArray<TSharedPtr<FTreeNodeGrouping>>& Groupings)"
  },
  {
    "label": "RebuildGroupingCrumbs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildGroupingCrumbs()"
  },
  {
    "label": "OnGroupingCrumbClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGroupingCrumbClicked(const TSharedPtr<FTreeNodeGrouping>& InEntry)"
  },
  {
    "label": "BuildGroupingSubMenu_Change()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildGroupingSubMenu_Change(FMenuBuilder& MenuBuilder, const TSharedPtr<FTreeNodeGrouping> CrumbGrouping)"
  },
  {
    "label": "BuildGroupingSubMenu_Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildGroupingSubMenu_Add(FMenuBuilder& MenuBuilder, const TSharedPtr<FTreeNodeGrouping> CrumbGrouping)"
  },
  {
    "label": "GetGroupingCrumbMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetGroupingCrumbMenuContent(const TSharedPtr<FTreeNodeGrouping>& CrumbGrouping)"
  },
  {
    "label": "PreChangeGroupings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreChangeGroupings()"
  },
  {
    "label": "PostChangeGroupings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostChangeGroupings()"
  },
  {
    "label": "GetGroupingDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGroupingDepth(const TSharedPtr<FTreeNodeGrouping>& Grouping)"
  },
  {
    "label": "GroupingCrumbMenu_Reset_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupingCrumbMenu_Reset_Execute()"
  },
  {
    "label": "GroupingCrumbMenu_Remove_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupingCrumbMenu_Remove_Execute(const TSharedPtr<FTreeNodeGrouping> Grouping)"
  },
  {
    "label": "GroupingCrumbMenu_MoveLeft_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupingCrumbMenu_MoveLeft_Execute(const TSharedPtr<FTreeNodeGrouping> Grouping)"
  },
  {
    "label": "GroupingCrumbMenu_MoveRight_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupingCrumbMenu_MoveRight_Execute(const TSharedPtr<FTreeNodeGrouping> Grouping)"
  },
  {
    "label": "GroupingCrumbMenu_Change_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupingCrumbMenu_Change_Execute(const TSharedPtr<FTreeNodeGrouping> OldGrouping, const TSharedPtr<FTreeNodeGrouping> NewGrouping)"
  },
  {
    "label": "GroupingCrumbMenu_Change_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GroupingCrumbMenu_Change_CanExecute(const TSharedPtr<FTreeNodeGrouping> OldGrouping, const TSharedPtr<FTreeNodeGrouping> NewGrouping)"
  },
  {
    "label": "GroupingCrumbMenu_Add_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupingCrumbMenu_Add_Execute(const TSharedPtr<FTreeNodeGrouping> Grouping, const TSharedPtr<FTreeNodeGrouping> AfterGrouping)"
  },
  {
    "label": "GroupingCrumbMenu_Add_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GroupingCrumbMenu_Add_CanExecute(const TSharedPtr<FTreeNodeGrouping> Grouping, const TSharedPtr<FTreeNodeGrouping> AfterGrouping)"
  },
  {
    "label": "UpdateCStringSameValueAggregationSingleNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCStringSameValueAggregationSingleNode(const FTableColumn& InColumn, FTableTreeNode& GroupNode)"
  },
  {
    "label": "UpdateCStringSameValueAggregationRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCStringSameValueAggregationRec(const FTableColumn& InColumn, FTableTreeNode& GroupNode)"
  },
  {
    "label": "UpdateAggregation()",
    "kind": "Method",
    "detail": "Function (template<T,bool bSetInitialValue,bool bIsRercursive> void)",
    "insertText": "UpdateAggregation(const FTableColumn& InColumn, FTableTreeNode& InOutGroupNode, const T InitialAggregatedValue, TFunctionRef<T(T, const FTableCellValue&)> ValueGetterFunc)"
  },
  {
    "label": "UpdateAggregatedValues()",
    "kind": "Method",
    "detail": "Function (template<bool bIsRercursive> void)",
    "insertText": "UpdateAggregatedValues(TSharedPtr<FTable> InTable, FTableTreeNode& InOutGroupNode)"
  },
  {
    "label": "UpdateAggregatedValuesSingleNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAggregatedValuesSingleNode(FTableTreeNode& GroupNode)"
  },
  {
    "label": "UpdateAggregatedValuesRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAggregatedValuesRec(FTableTreeNode& GroupNode)"
  },
  {
    "label": "GetDefaultColumnSortMode()",
    "kind": "Method",
    "detail": "Function (const EColumnSortMode::Type)",
    "insertText": "GetDefaultColumnSortMode()"
  },
  {
    "label": "GetDefaultColumnBeingSorted()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetDefaultColumnBeingSorted()"
  },
  {
    "label": "CreateSortings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSortings()"
  },
  {
    "label": "UpdateCurrentSortingByColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentSortingByColumn()"
  },
  {
    "label": "OnSortingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortingChanged()"
  },
  {
    "label": "ScheduleSortingAsyncOperationIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScheduleSortingAsyncOperationIfNeeded()"
  },
  {
    "label": "ScheduleSortingAsyncOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleSortingAsyncOperation()"
  },
  {
    "label": "StartSortingTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "StartSortingTask(FGraphEventRef Prerequisite = nullptr)"
  },
  {
    "label": "ApplySorting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySorting()"
  },
  {
    "label": "SortTreeNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTreeNodes(ITableCellValueSorter* InSorter, EColumnSortMode::Type InColumnSortMode)"
  },
  {
    "label": "SortTreeNodesRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTreeNodesRec(FTableTreeNode& GroupNode, const ITableCellValueSorter& Sorter, EColumnSortMode::Type InColumnSortMode)"
  },
  {
    "label": "GetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetSortModeForColumn(const FName ColumnId)"
  },
  {
    "label": "SetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSortModeForColumn(const FName& ColumnId, EColumnSortMode::Type SortMode)"
  },
  {
    "label": "OnSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortModeChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnId, const EColumnSortMode::Type SortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeaderMenu_SortMode_IsChecked(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeaderMenu_SortMode_CanExecute(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeaderMenu_SortMode_Execute(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortMode_IsChecked(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortMode_CanExecute(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SortMode_Execute(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortByColumn_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortByColumn_IsChecked(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_SortByColumn_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortByColumn_CanExecute(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_SortByColumn_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SortByColumn_Execute(const FName ColumnId)"
  },
  {
    "label": "CanShowColumn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanShowColumn(const FName ColumnId)"
  },
  {
    "label": "ShowColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowColumn(const FName ColumnId)"
  },
  {
    "label": "ShowColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowColumn(FTableColumn& Column)"
  },
  {
    "label": "CanHideColumn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHideColumn(const FName ColumnId)"
  },
  {
    "label": "HideColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideColumn(const FName ColumnId)"
  },
  {
    "label": "HideColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideColumn(FTableColumn& Column)"
  },
  {
    "label": "IsColumnVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsColumnVisible(const FName ColumnId)"
  },
  {
    "label": "CanToggleColumnVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanToggleColumnVisibility(const FName ColumnId)"
  },
  {
    "label": "ToggleColumnVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleColumnVisibility(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_ShowAllColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowAllColumns_CanExecute()"
  },
  {
    "label": "ContextMenu_ShowAllColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ShowAllColumns_Execute()"
  },
  {
    "label": "ContextMenu_ResetColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ResetColumns_CanExecute()"
  },
  {
    "label": "ContextMenu_ResetColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ResetColumns_Execute()"
  },
  {
    "label": "ContextMenu_HideAllColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_HideAllColumns_CanExecute()"
  },
  {
    "label": "ContextMenu_HideAllColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_HideAllColumns_Execute()"
  },
  {
    "label": "OnPreAsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreAsyncUpdate()"
  },
  {
    "label": "OnPostAsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostAsyncUpdate()"
  },
  {
    "label": "AddInProgressAsyncOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInProgressAsyncOperation(EAsyncOperationType InType)"
  },
  {
    "label": "EnumAddFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumAddFlags(InProgressAsyncOperations, InType)"
  },
  {
    "label": "HasInProgressAsyncOperation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasInProgressAsyncOperation(EAsyncOperationType InType)"
  },
  {
    "label": "ClearInProgressAsyncOperations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearInProgressAsyncOperations()"
  },
  {
    "label": "EAsyncOperationType()",
    "kind": "Method",
    "detail": "Function (InProgressAsyncOperations = static_cast<)",
    "insertText": "EAsyncOperationType(0)"
  },
  {
    "label": "StartPendingAsyncOperations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartPendingAsyncOperations()"
  },
  {
    "label": "CancelCurrentAsyncOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCurrentAsyncOp()"
  },
  {
    "label": "CountNumNodesPerDepthRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountNumNodesPerDepthRec(FBaseTreeNode* InRoot, TArray<int32>& InOutNumNodesPerDepth, int32 InDepth, int32 InMaxDepth, int32 InMaxNodes)"
  },
  {
    "label": "SetExpandValueForChildGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpandValueForChildGroups(FBaseTreeNode* InRoot, int32 InMaxExpandedNodes, int32 MaxDepthToExpand, bool InValue)"
  },
  {
    "label": "SetExpandValueForChildGroupsRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpandValueForChildGroupsRec(FBaseTreeNode* InRoot, int32 InDepth, int32 InMaxDepth, bool InValue)"
  },
  {
    "label": "ExtendMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendMenu(TSharedRef<FExtender> Extender)"
  },
  {
    "label": "ExtendMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtendMenu(FMenuBuilder& Menu)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} typedef TFunctionRef<)",
    "insertText": "void(TArray<FBaseTreeNodePtr>& InNodes)"
  },
  {
    "label": "ExportToFileRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportToFileRec(const FBaseTreeNodePtr& InGroupNode, TArray<FBaseTreeNodePtr>& InNodes, bool bInExportCollapsed, bool InExportLeafs, WriteToFileCallback Callback)"
  },
  {
    "label": "GetTreeViewBannerText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTreeViewBannerText()"
  },
  {
    "label": "InitAvailableViewPresets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAvailableViewPresets()"
  },
  {
    "label": "GetAvailableViewPresets()",
    "kind": "Method",
    "detail": "Function (} ; const TArray<TSharedRef<ITableTreeViewPreset>>*)",
    "insertText": "GetAvailableViewPresets()"
  },
  {
    "label": "ApplyViewPreset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyViewPreset(const ITableTreeViewPreset& InPreset)"
  },
  {
    "label": "ApplyColumnConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyColumnConfig(const TArrayView<FTableColumnConfig>& InTableConfig)"
  },
  {
    "label": "ViewPreset_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ViewPreset_OnSelectionChanged(TSharedPtr<ITableTreeViewPreset> InPreset, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "ViewPreset_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ViewPreset_OnGenerateWidget(TSharedRef<ITableTreeViewPreset> InPreset)"
  },
  {
    "label": "ViewPreset_GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ViewPreset_GetSelectedText()"
  },
  {
    "label": "ViewPreset_GetSelectedToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ViewPreset_GetSelectedToolTipText()"
  },
  {
    "label": "SearchForItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchForItem(TSharedPtr<FTableTaskCancellationToken> CancellationToken)"
  },
  {
    "label": "StartTableDataTask()",
    "kind": "Method",
    "detail": "Function (} ; template<T,. . . TArgs> TSharedPtr<FTableTaskInfo>)",
    "insertText": "StartTableDataTask(TArgs&&... Args)"
  },
  {
    "label": "FTableTaskInfo()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTableTaskInfo> Info = MakeShared<)",
    "insertText": "FTableTaskInfo()"
  },
  {
    "label": "FTableTaskCancellationToken()",
    "kind": "Method",
    "detail": "Function (Info -> CancellationToken = MakeShared<)",
    "insertText": "FTableTaskCancellationToken()"
  },
  {
    "label": "CreateTask()",
    "kind": "Method",
    "detail": "Function (Info -> Event = TGraphTask<T)",
    "insertText": "CreateTask().ConstructAndDispatchWhenReady(Info->CancellationToken, Forward<TArgs>(Args)...)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DataTaskInfos .)",
    "insertText": "Add(Info)"
  },
  {
    "label": "FTableTreeViewNodeFilteringAsyncTask()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SAsyncOperationStatus> AsyncOperationStatus ; FStopwatch AsyncUpdateStopwatch ; FAsyncOperationProgress AsyncOperationProgress ; FGraphEventRef DispatchEvent ; TArray<TSharedPtr<FTableTaskInfo>> DataTaskInfos ; TArray<FTableTreeNodePtr> NodesToExpand ; FText TreeViewBannerText ; TArray<TSharedRef<ITableTreeViewPreset>> AvailableViewPresets ; TSharedPtr<ITableTreeViewPreset> SelectedViewPreset ; TSharedPtr<SComboBox<TSharedRef<ITableTreeViewPreset>>> PresetComboBox ; FName LogListingName ; } ; class FTableTreeViewNodeFilteringAsyncTask { public :)",
    "insertText": "FTableTreeViewNodeFilteringAsyncTask(STableTreeView* InPtr) : TableTreeViewPtr(InPtr)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "GetDesiredThread()",
    "kind": "Method",
    "detail": "Function (} ENamedThreads::Type)",
    "insertText": "GetDesiredThread()"
  },
  {
    "label": "FTableTreeViewHierarchyFilteringAsyncTask()",
    "kind": "Method",
    "detail": "Function (} } private : STableTreeView* TableTreeViewPtr = nullptr ; } ; class FTableTreeViewHierarchyFilteringAsyncTask { public :)",
    "insertText": "FTableTreeViewHierarchyFilteringAsyncTask(STableTreeView* InPtr) : TableTreeViewPtr(InPtr)"
  },
  {
    "label": "FTableTreeViewSortingAsyncTask()",
    "kind": "Method",
    "detail": "Function (} } private : STableTreeView* TableTreeViewPtr = nullptr ; } ; class FTableTreeViewSortingAsyncTask { public :)",
    "insertText": "FTableTreeViewSortingAsyncTask(STableTreeView* InPtr, ITableCellValueSorter* InSorter, EColumnSortMode::Type InColumnSortMode) : TableTreeViewPtr(InPtr) , Sorter(InSorter) , ColumnSortMode(InColumnSortMode)"
  },
  {
    "label": "SortTreeNodes()",
    "kind": "Method",
    "detail": "Function (TableTreeViewPtr ->)",
    "insertText": "SortTreeNodes(Sorter, ColumnSortMode)"
  },
  {
    "label": "FTableTreeViewGroupingAsyncTask()",
    "kind": "Method",
    "detail": "Function (} } private : STableTreeView* TableTreeViewPtr = nullptr ; ITableCellValueSorter* Sorter = nullptr ; EColumnSortMode::Type ColumnSortMode = EColumnSortMode::Type::None ; } ; class FTableTreeViewGroupingAsyncTask { public :)",
    "insertText": "FTableTreeViewGroupingAsyncTask(STableTreeView* InPtr, TArray<TSharedPtr<FTreeNodeGrouping>>* InGroupings) : TableTreeViewPtr(InPtr) , Groupings(InGroupings)"
  },
  {
    "label": "CreateGroups()",
    "kind": "Method",
    "detail": "Function (TableTreeViewPtr ->)",
    "insertText": "CreateGroups(*Groupings)"
  },
  {
    "label": "FSearchForItemToSelectTask()",
    "kind": "Method",
    "detail": "Function (} } private : STableTreeView* TableTreeViewPtr = nullptr ; TArray<TSharedPtr<FTreeNodeGrouping>>* Groupings = nullptr ; } ; class FSearchForItemToSelectTask { public :)",
    "insertText": "FSearchForItemToSelectTask(TSharedPtr<FTableTaskCancellationToken> InToken, TSharedPtr<STableTreeView> InPtr) : CancellationToken(InToken) , TableTreeViewPtr(InPtr)"
  },
  {
    "label": "SearchForItem()",
    "kind": "Method",
    "detail": "Function (TableTreeViewPtr ->)",
    "insertText": "SearchForItem(CancellationToken)"
  },
  {
    "label": "FSelectNodeByTableRowIndexTask()",
    "kind": "Method",
    "detail": "Function (} } } private : TSharedPtr<FTableTaskCancellationToken> CancellationToken ; TSharedPtr<STableTreeView> TableTreeViewPtr ; } ; class FSelectNodeByTableRowIndexTask { public :)",
    "insertText": "FSelectNodeByTableRowIndexTask(TSharedPtr<FTableTaskCancellationToken> InToken, TSharedPtr<STableTreeView> InPtr, uint32 InRowIndex) : CancellationToken(InToken) , TableTreeViewPtr(InPtr) , RowIndex(InRowIndex)"
  },
  {
    "label": "SelectNodeByTableRowIndex()",
    "kind": "Method",
    "detail": "Function (TableTreeViewPtr ->)",
    "insertText": "SelectNodeByTableRowIndex(RowIndex)"
  }
]