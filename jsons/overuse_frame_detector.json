[
  {
    "label": "VideoFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoFrame"
  },
  {
    "label": "CpuOveruseOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CpuOveruseOptions"
  },
  {
    "label": "OveruseFrameDetectorObserverInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OveruseFrameDetectorObserverInterface"
  },
  {
    "label": "OveruseFrameDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OveruseFrameDetector"
  },
  {
    "label": "ProcessingUsage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessingUsage"
  },
  {
    "label": "CpuOveruseOptions()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_ADAPTATION_OVERUSE_FRAME_DETECTOR_H_ # define VIDEO_ADAPTATION_OVERUSE_FRAME_DETECTOR_H_ # include<list> # include<memory> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_base . h \" # include \" rtc_base / experiments / field_trial_parser . h \" # include \" rtc_base / numerics / exp_filter . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" rtc_base / thread_annotations . h \" # include \" video / video_stream_encoder_observer . h \" namespace webrtc { class VideoFrame ; struct CpuOveruseOptions {)",
    "insertText": "CpuOveruseOptions(const FieldTrialsView& field_trials)"
  },
  {
    "label": "AdaptUp()",
    "kind": "Method",
    "detail": "Function (int low_encode_usage_threshold_percent ; int high_encode_usage_threshold_percent ; int frame_timeout_interval_ms ; int min_frame_samples ; int min_process_count ; int high_threshold_consecutive_count ; int filter_time_ms ; } ; class OveruseFrameDetectorObserverInterface { public : void)",
    "insertText": "AdaptUp()"
  },
  {
    "label": "AdaptDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdaptDown()"
  },
  {
    "label": "OveruseFrameDetectorObserverInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "OveruseFrameDetectorObserverInterface()"
  },
  {
    "label": "OveruseFrameDetector()",
    "kind": "Method",
    "detail": "Function (} } ; class OveruseFrameDetector { public :)",
    "insertText": "OveruseFrameDetector(CpuOveruseMetricsObserver* metrics_observer, const FieldTrialsView& field_trials)"
  },
  {
    "label": "OveruseFrameDetector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "OveruseFrameDetector()"
  },
  {
    "label": "OveruseFrameDetector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OveruseFrameDetector(const OveruseFrameDetector&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OveruseFrameDetector&)",
    "insertText": "operator(const OveruseFrameDetector&)"
  },
  {
    "label": "StartCheckForOveruse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCheckForOveruse(TaskQueueBase* task_queue_base, const CpuOveruseOptions& options, OveruseFrameDetectorObserverInterface* overuse_observer)"
  },
  {
    "label": "StopCheckForOveruse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCheckForOveruse()"
  },
  {
    "label": "OnTargetFramerateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetFramerateUpdated(int framerate_fps)"
  },
  {
    "label": "FrameCaptured()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameCaptured(const VideoFrame& frame, int64_t time_when_first_seen_us)"
  },
  {
    "label": "FrameSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameSent(uint32_t timestamp, int64_t time_sent_in_us, int64_t capture_time_us, absl::optional<int> encode_duration_us)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (class ProcessingUsage { public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetMaxSampleDiffMs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxSampleDiffMs(float diff_ms)"
  },
  {
    "label": "FrameCaptured()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameCaptured(const VideoFrame& frame, int64_t time_when_first_seen_us, int64_t last_capture_time_us)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Value()"
  },
  {
    "label": "ProcessingUsage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ProcessingUsage()"
  },
  {
    "label": "CheckForOveruse()",
    "kind": "Method",
    "detail": "Function (} ; protected : void)",
    "insertText": "CheckForOveruse(OveruseFrameDetectorObserverInterface* overuse_observer)"
  },
  {
    "label": "SetOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOptions(const CpuOveruseOptions& options)"
  },
  {
    "label": "EncodedFrameTimeMeasured()",
    "kind": "Method",
    "detail": "Function (CpuOveruseOptions options_ ; private : void)",
    "insertText": "EncodedFrameTimeMeasured(int encode_duration_ms)"
  },
  {
    "label": "IsOverusing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOverusing(int encode_usage_percent)"
  },
  {
    "label": "IsUnderusing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnderusing(int encode_usage_percent, int64_t time_now)"
  },
  {
    "label": "FrameTimeoutDetected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrameTimeoutDetected(int64_t now)"
  },
  {
    "label": "FrameSizeChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrameSizeChanged(int num_pixels)"
  },
  {
    "label": "ResetAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAll(int num_pixels)"
  },
  {
    "label": "CreateProcessingUsage()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ProcessingUsage>)",
    "insertText": "CreateProcessingUsage(const CpuOveruseOptions& options)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker task_checker_ ; RepeatingTaskHandle check_overuse_task_)",
    "insertText": "RTC_GUARDED_BY(task_checker_)"
  },
  {
    "label": "RTC_PT_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ProcessingUsage> usage_)",
    "insertText": "RTC_PT_GUARDED_BY(task_checker_)"
  }
]