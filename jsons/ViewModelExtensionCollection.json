[
  {
    "label": "TArrayView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayView"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "TViewModelExtensionCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TViewModelExtensionCollection"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "FViewModelExtensionCollection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Delegates / IDelegateInstance . h \" # include \" HAL / Platform . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" template<,> class TArrayView ; namespace UE { namespace Sequencer { class FViewModel ; template<T> struct TViewModelExtensionCollection ; struct FViewModelExtensionCollection : FNoncopyable { private :)",
    "insertText": "FViewModelExtensionCollection(FViewModelTypeID InExtensionType)"
  },
  {
    "label": "FViewModelExtensionCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewModelExtensionCollection(FViewModelTypeID InExtensionType, TWeakPtr<FViewModel> InWeakModel, int32 InDesiredRecursionDepth = -1)"
  },
  {
    "label": "FViewModelExtensionCollection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FViewModelExtensionCollection()"
  },
  {
    "label": "OnExtensionsDirtied()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnExtensionsDirtied()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Reinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reinitialize(TWeakPtr<FViewModel> InWeakModel, int32 InDesiredRecursionDepth = -1)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "GetObservedModel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel>)",
    "insertText": "GetObservedModel()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Update()"
  },
  {
    "label": "OnHierarchyUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHierarchyUpdated()"
  },
  {
    "label": "ConditionalUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalUpdate()"
  },
  {
    "label": "DestroyImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyImpl()"
  },
  {
    "label": "GetExtensions()",
    "kind": "Method",
    "detail": "Function (template<T> TArrayView<T* const>)",
    "insertText": "GetExtensions()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (void* const* BaseExtensions = ExtensionContainer .)",
    "insertText": "GetData()"
  },
  {
    "label": "const()",
    "kind": "Method",
    "detail": "Function (T* const* Data = reinterpret_cast<T*)",
    "insertText": "const(BaseExtensions)"
  },
  {
    "label": "TViewModelExtensionCollection()",
    "kind": "Method",
    "detail": "Function (} private : template<T> struct TViewModelExtensionCollection ; TArray<void*> ExtensionContainer ; TWeakPtr<FViewModel> WeakModel ; FDelegateHandle OnHierarchyUpdatedHandle ; FViewModelTypeID ExtensionType ; int32 DesiredRecursionDepth ; bool bNeedsUpdate ; } ; template<T> struct TViewModelExtensionCollection : FViewModelExtensionCollection {)",
    "insertText": "TViewModelExtensionCollection() : FViewModelExtensionCollection(T::ID)"
  },
  {
    "label": "TViewModelExtensionCollection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TViewModelExtensionCollection(TWeakPtr<FViewModel> InWeakModel) : FViewModelExtensionCollection(T::ID, InWeakModel)"
  },
  {
    "label": "TViewModelExtensionCollection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TViewModelExtensionCollection(TWeakPtr<FViewModel> InWeakModel, int32 InDesiredRecursionDepth) : FViewModelExtensionCollection(T::ID, InWeakModel, InDesiredRecursionDepth)"
  },
  {
    "label": "FilterExtensions()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> void)",
    "insertText": "FilterExtensions(Predicate&& InPredicate)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (ExtensionContainer .)",
    "insertText": "RemoveAt(Index, EAllowShrinking::No)"
  }
]