[
  {
    "label": "SentPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SentPacket"
  },
  {
    "label": "NetworkRoute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkRoute"
  },
  {
    "label": "TaskQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskQueue"
  },
  {
    "label": "FrameEncryptorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameEncryptorInterface"
  },
  {
    "label": "MaybeWorkerThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MaybeWorkerThread"
  },
  {
    "label": "TargetTransferRateObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetTransferRateObserver"
  },
  {
    "label": "Transport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Transport"
  },
  {
    "label": "PacketRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketRouter"
  },
  {
    "label": "RtpVideoSenderInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpVideoSenderInterface"
  },
  {
    "label": "RtcpBandwidthObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcpBandwidthObserver"
  },
  {
    "label": "RtpPacketSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketSender"
  },
  {
    "label": "RtpSenderObservers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpSenderObservers"
  },
  {
    "label": "RtpSenderFrameEncryptionConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpSenderFrameEncryptionConfig"
  },
  {
    "label": "RtpTransportControllerSendInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpTransportControllerSendInterface"
  },
  {
    "label": "RtpTransportControllerSendInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_RTP_TRANSPORT_CONTROLLER_SEND_INTERFACE_H_ # define CALL_RTP_TRANSPORT_CONTROLLER_SEND_INTERFACE_H_ # include<stddef . h> # include<stdint . h> # include<map> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / crypto / crypto_options . h \" # include \" api / fec_controller . h \" # include \" api / frame_transformer_interface . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / transport / bitrate_settings . h \" # include \" api / units / timestamp . h \" # include \" call / rtp_config . h \" # include \" common_video / frame_counts . h \" # include \" modules / rtp_rtcp / include / report_block_data . h \" # include \" modules / rtp_rtcp / include / rtcp_statistics . h \" # include \" modules / rtp_rtcp / include / rtp_packet_sender . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / rtp_packet_received . h \" namespace rtc { struct SentPacket ; struct NetworkRoute ; class TaskQueue ; } namespace webrtc { class FrameEncryptorInterface ; class MaybeWorkerThread ; class TargetTransferRateObserver ; class Transport ; class PacketRouter ; class RtpVideoSenderInterface ; class RtcpBandwidthObserver ; class RtpPacketSender ; struct RtpSenderObservers { RtcpRttStats* rtcp_rtt_stats ; RtcpIntraFrameObserver* intra_frame_callback ; RtcpLossNotificationObserver* rtcp_loss_notification_observer ; ReportBlockDataObserver* report_block_data_observer ; StreamDataCountersCallback* rtp_stats ; BitrateStatisticsObserver* bitrate_observer ; FrameCountObserver* frame_count_observer ; RtcpPacketTypeCounterObserver* rtcp_type_observer ; SendSideDelayObserver* send_delay_observer ; SendPacketObserver* send_packet_observer ; } ; struct RtpSenderFrameEncryptionConfig { FrameEncryptorInterface* frame_encryptor = nullptr ; CryptoOptions crypto_options ; } ; class RtpTransportControllerSendInterface { public : ~)",
    "insertText": "RtpTransportControllerSendInterface()"
  },
  {
    "label": "GetWorkerQueue()",
    "kind": "Method",
    "detail": "Function (} MaybeWorkerThread*)",
    "insertText": "GetWorkerQueue()"
  },
  {
    "label": "packet_router()",
    "kind": "Method",
    "detail": "Function (PacketRouter*)",
    "insertText": "packet_router()"
  },
  {
    "label": "CreateRtpVideoSender()",
    "kind": "Method",
    "detail": "Function (RtpVideoSenderInterface*)",
    "insertText": "CreateRtpVideoSender(const std::map<uint32_t, RtpState>& suspended_ssrcs, const std::map<uint32_t, RtpPayloadState>& states, const RtpConfig& rtp_config, int rtcp_report_interval_ms, Transport* send_transport, const RtpSenderObservers& observers, RtcEventLog* event_log, std::unique_ptr<FecController> fec_controller, const RtpSenderFrameEncryptionConfig& frame_encryption_config, rtc::scoped_refptr<FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "DestroyRtpVideoSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRtpVideoSender(RtpVideoSenderInterface* rtp_video_sender)"
  },
  {
    "label": "network_state_estimate_observer()",
    "kind": "Method",
    "detail": "Function (NetworkStateEstimateObserver*)",
    "insertText": "network_state_estimate_observer()"
  },
  {
    "label": "transport_feedback_observer()",
    "kind": "Method",
    "detail": "Function (TransportFeedbackObserver*)",
    "insertText": "transport_feedback_observer()"
  },
  {
    "label": "packet_sender()",
    "kind": "Method",
    "detail": "Function (RtpPacketSender*)",
    "insertText": "packet_sender()"
  },
  {
    "label": "SetAllocatedSendBitrateLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllocatedSendBitrateLimits(BitrateAllocationLimits limits)"
  },
  {
    "label": "SetPacingFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPacingFactor(float pacing_factor)"
  },
  {
    "label": "SetQueueTimeLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQueueTimeLimit(int limit_ms)"
  },
  {
    "label": "GetStreamFeedbackProvider()",
    "kind": "Method",
    "detail": "Function (StreamFeedbackProvider*)",
    "insertText": "GetStreamFeedbackProvider()"
  },
  {
    "label": "RegisterTargetTransferRateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTargetTransferRateObserver(TargetTransferRateObserver* observer)"
  },
  {
    "label": "OnNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkRouteChanged(absl::string_view transport_name, const rtc::NetworkRoute& network_route)"
  },
  {
    "label": "OnNetworkAvailability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkAvailability(bool network_available)"
  },
  {
    "label": "GetBandwidthObserver()",
    "kind": "Method",
    "detail": "Function (RtcpBandwidthObserver*)",
    "insertText": "GetBandwidthObserver()"
  },
  {
    "label": "GetPacerQueuingDelayMs()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetPacerQueuingDelayMs()"
  },
  {
    "label": "GetFirstPacketTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<Timestamp>)",
    "insertText": "GetFirstPacketTime()"
  },
  {
    "label": "EnablePeriodicAlrProbing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePeriodicAlrProbing(bool enable)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnReceivedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedPacket(const ReceivedPacket& received_packet)"
  },
  {
    "label": "SetSdpBitrateParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSdpBitrateParameters(const BitrateConstraints& constraints)"
  },
  {
    "label": "SetClientBitratePreferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClientBitratePreferences(const BitrateSettings& preferences)"
  },
  {
    "label": "OnTransportOverheadChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportOverheadChanged(size_t transport_overhead_per_packet)"
  },
  {
    "label": "AccountForAudioPacketsInPacedSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccountForAudioPacketsInPacedSender(bool account_for_audio)"
  },
  {
    "label": "IncludeOverheadInPacedSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncludeOverheadInPacedSender()"
  },
  {
    "label": "EnsureStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureStarted()"
  }
]