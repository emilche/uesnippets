[
  {
    "label": "__has_feature()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_COMPILER_H # define LLVM_SUPPORT_COMPILER_H # include \" llvm / Config / llvm - config . h \" # ifndef __has_feature # define)",
    "insertText": "__has_feature(x) 0 #endif #ifndef __has_extension # define __has_extension(x) 0 #endif #ifndef __has_attribute # define __has_attribute(x) 0 #endif #ifndef __has_builtin # define __has_builtin(x) 0 #endif #ifndef LLVM_GNUC_PREREQ # if defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__) # define LLVM_GNUC_PREREQ(maj, min, patch) \\ ((__GNUC__ << 20) + (__GNUC_MINOR__ << 10) + __GNUC_PATCHLEVEL__ >= \\ ((maj) << 20) + ((min) << 10) + (patch)) # elif defined(__GNUC__) && defined(__GNUC_MINOR__) # define LLVM_GNUC_PREREQ(maj, min, patch) \\ ((__GNUC__ << 20) + (__GNUC_MINOR__ << 10) >= ((maj) << 20) + ((min) << 10)) # else # define LLVM_GNUC_PREREQ(maj, min, patch) 0 # endif #endif #ifdef _MSC_VER #define LLVM_MSC_PREREQ(version) (_MSC_VER >= (version)) #if !LLVM_MSC_PREREQ(1800) #error LLVM requires at least MSVC 2013. #endif #else #define LLVM_MSC_PREREQ(version) 0 #endif #if !defined(_MSC_VER) || defined(__clang__) || LLVM_MSC_PREREQ(1900) #define LLVM_NOEXCEPT noexcept #else #define LLVM_NOEXCEPT #endif #if __has_feature(cxx_rvalue_references) || LLVM_GNUC_PREREQ(4, 8, 1) #define LLVM_HAS_RVALUE_REFERENCE_THIS 1 #else #define LLVM_HAS_RVALUE_REFERENCE_THIS 0 #endif #if LLVM_HAS_RVALUE_REFERENCE_THIS #define LLVM_LVALUE_FUNCTION & #else #define LLVM_LVALUE_FUNCTION #endif #if __has_feature(cxx_constexpr) || defined(__GXX_EXPERIMENTAL_CXX0X__) # define LLVM_CONSTEXPR constexpr #else # define LLVM_CONSTEXPR #endif #if (__has_attribute(visibility) || LLVM_GNUC_PREREQ(4, 0, 0)) && \\ !defined(__MINGW32__) && !defined(__CYGWIN__) && !defined(LLVM_ON_WIN32) #define LLVM_LIBRARY_VISIBILITY __attribute__ ((visibility(\"hidden\"))) #else #define LLVM_LIBRARY_VISIBILITY #endif #if __has_attribute(sentinel) || LLVM_GNUC_PREREQ(3, 0, 0) #define LLVM_END_WITH_NULL __attribute__((sentinel)) #else #define LLVM_END_WITH_NULL #endif #if __has_attribute(used) || LLVM_GNUC_PREREQ(3, 1, 0) #define LLVM_ATTRIBUTE_USED __attribute__((__used__)) #else #define LLVM_ATTRIBUTE_USED #endif #if __has_attribute(warn_unused_result) || LLVM_GNUC_PREREQ(3, 4, 0) #define LLVM_ATTRIBUTE_UNUSED_RESULT __attribute__((__warn_unused_result__)) #else #define LLVM_ATTRIBUTE_UNUSED_RESULT #endif #if __has_attribute(unused) || LLVM_GNUC_PREREQ(3, 1, 0) #define LLVM_ATTRIBUTE_UNUSED __attribute__((__unused__)) #else #define LLVM_ATTRIBUTE_UNUSED #endif #if (__has_attribute(weak) || LLVM_GNUC_PREREQ(4, 0, 0)) && \\ (!defined(__MINGW32__) && !defined(__CYGWIN__) && !defined(LLVM_ON_WIN32)) #define LLVM_ATTRIBUTE_WEAK __attribute__((__weak__)) #else #define LLVM_ATTRIBUTE_WEAK #endif #if defined(__clang__) || defined(__GNUC__) #define LLVM_READNONE __attribute__((__const__)) #else #define LLVM_READNONE #endif #if __has_attribute(pure) || defined(__GNUC__) #define LLVM_READONLY __attribute__((__pure__)) #else #define LLVM_READONLY #endif #if __has_builtin(__builtin_expect) || LLVM_GNUC_PREREQ(4, 0, 0) #define LLVM_LIKELY(EXPR) __builtin_expect((bool)(EXPR), true) #define LLVM_UNLIKELY(EXPR) __builtin_expect((bool)(EXPR), false) #else #define LLVM_LIKELY(EXPR) (EXPR) #define LLVM_UNLIKELY(EXPR) (EXPR) #endif #if __has_attribute(noinline) || LLVM_GNUC_PREREQ(3, 4, 0) #define LLVM_ATTRIBUTE_NOINLINE __attribute__((noinline)) #elif defined(_MSC_VER) #define LLVM_ATTRIBUTE_NOINLINE __declspec(noinline) #else #define LLVM_ATTRIBUTE_NOINLINE #endif #if __has_attribute(always_inline) || LLVM_GNUC_PREREQ(4, 0, 0) #define LLVM_ATTRIBUTE_ALWAYS_INLINE inline __attribute__((always_inline)) #elif defined(_MSC_VER) #define LLVM_ATTRIBUTE_ALWAYS_INLINE __forceinline #else #define LLVM_ATTRIBUTE_ALWAYS_INLINE #endif #ifdef __GNUC__ #define LLVM_ATTRIBUTE_NORETURN __attribute__((noreturn)) #elif defined(_MSC_VER) #define LLVM_ATTRIBUTE_NORETURN __declspec(noreturn) #else #define LLVM_ATTRIBUTE_NORETURN #endif #if __has_attribute(returns_nonnull) || LLVM_GNUC_PREREQ(4, 9, 0) #define LLVM_ATTRIBUTE_RETURNS_NONNULL __attribute__((returns_nonnull)) #else #define LLVM_ATTRIBUTE_RETURNS_NONNULL #endif #ifdef __GNUC__ #define LLVM_ATTRIBUTE_RETURNS_NOALIAS __attribute__((__malloc__)) #elif defined(_MSC_VER) #define LLVM_ATTRIBUTE_RETURNS_NOALIAS __declspec(restrict) #else #define LLVM_ATTRIBUTE_RETURNS_NOALIAS #endif #if __cplusplus > 201402L #define LLVM_FALLTHROUGH [[fallthrough]] #elif defined(__clang__) #define LLVM_FALLTHROUGH [[clang::fallthrough]] #elif defined(_MSC_VER) #define LLVM_FALLTHROUGH __fallthrough #else #define LLVM_FALLTHROUGH [[gnu::fallthrough]] #endif #if defined(_MSC_VER) #if __cplusplus > 201402L #define LLVM_C_FALLTHROUGH [[fallthrough]] #elif __has_attribute(fallthrough) #define LLVM_C_FALLTHROUGH __attribute__((fallthrough)) #else #define LLVM_C_FALLTHROUGH #endif #else #define LLVM_C_FALLTHROUGH __attribute__((fallthrough))"
  }
]