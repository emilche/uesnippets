[
  {
    "label": "FScreenPassTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenPassTexture"
  },
  {
    "label": "FScreenPassTextureSlice",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenPassTextureSlice"
  },
  {
    "label": "FScreenPassVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenPassVS"
  },
  {
    "label": "FScreenPassRenderTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenPassRenderTarget"
  },
  {
    "label": "FScreenPassTextureViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenPassTextureViewport"
  },
  {
    "label": "FScreenTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenTransform"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScreenPassPipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenPassPipelineState"
  },
  {
    "label": "FScreenPassViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenPassViewInfo"
  },
  {
    "label": "IsHMDHiddenAreaMaskActive()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CanvasTypes . h \" # include \" CommonRenderResources . h \" # include \" GlobalShader . h \" # include \" PipelineStateCache . h \" # include \" RenderGraphBuilder . h \" # include \" RenderGraphUtils . h \" # include \" RHIStaticStates . h \" # include \" SceneView . h \" struct FScreenPassTexture ; struct FScreenPassTextureSlice ; bool)",
    "insertText": "IsHMDHiddenAreaMaskActive()"
  },
  {
    "label": "GetMiniFontTexture()",
    "kind": "Method",
    "detail": "Function (FRHITexture*)",
    "insertText": "GetMiniFontTexture()"
  },
  {
    "label": "TryCreateViewFamilyTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "TryCreateViewFamilyTexture(FRDGBuilder& GraphBuilder, const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "TryCreateViewFamilyDepthTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "TryCreateViewFamilyDepthTexture(FRDGBuilder& GraphBuilder, const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FScreenPassVS : public FGlobalShader { public :)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FScreenPassVS, RENDERER_API)"
  },
  {
    "label": "FScreenPassVS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScreenPassVS()"
  },
  {
    "label": "FScreenPassVS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScreenPassVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "FScreenPassTexture()",
    "kind": "Method",
    "detail": "Function (} } ; struct FScreenPassTexture {)",
    "insertText": "FScreenPassTexture()"
  },
  {
    "label": "FScreenPassTexture()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPassTexture(FRDGTextureRef InTexture)"
  },
  {
    "label": "FScreenPassTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScreenPassTexture(const FScreenPassTextureSlice& ScreenTexture)"
  },
  {
    "label": "FScreenPassTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScreenPassTexture(FRDGTextureRef InTexture, FIntRect InViewRect)"
  },
  {
    "label": "CopyFromSlice()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "CopyFromSlice(FRDGBuilder& GraphBuilder, const FScreenPassTextureSlice& ScreenTextureSlice, FScreenPassTexture OverrideOutput = FScreenPassTexture())"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FScreenPassTexture Other)"
  },
  {
    "label": "UpdateVisualizeTextureExtent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVisualizeTextureExtent()"
  },
  {
    "label": "FScreenPassTextureSlice()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef Texture = nullptr ; FIntRect ViewRect ; } ; struct FScreenPassTextureSlice {)",
    "insertText": "FScreenPassTextureSlice()"
  },
  {
    "label": "FScreenPassTextureSlice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScreenPassTextureSlice(FRDGTextureSRVRef InTextureSRV, FIntRect InViewRect)"
  },
  {
    "label": "CreateFromScreenPassTexture()",
    "kind": "Method",
    "detail": "Function (FScreenPassTextureSlice)",
    "insertText": "CreateFromScreenPassTexture(FRDGBuilder& GraphBuilder, const FScreenPassTexture& ScreenTexture)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FScreenPassTextureSlice Other)"
  },
  {
    "label": "CreateFromInput()",
    "kind": "Method",
    "detail": "Function (FRDGTextureSRVRef TextureSRV = nullptr ; FIntRect ViewRect ; } ; struct FScreenPassRenderTarget : public FScreenPassTexture { FScreenPassRenderTarget)",
    "insertText": "CreateFromInput(FRDGBuilder& GraphBuilder, FScreenPassTexture Input, ERenderTargetLoadAction OutputLoadAction, const TCHAR* OutputName)"
  },
  {
    "label": "CreateFromInput()",
    "kind": "Method",
    "detail": "Function (FScreenPassRenderTarget)",
    "insertText": "CreateFromInput(FRDGBuilder& GraphBuilder, FRDGTexture* InputTexture, FIntPoint Extent, ERenderTargetLoadAction OutputLoadAction, const TCHAR* OutputName)"
  },
  {
    "label": "CreateViewFamilyOutput()",
    "kind": "Method",
    "detail": "Function (FScreenPassRenderTarget)",
    "insertText": "CreateViewFamilyOutput(FRDGTextureRef ViewFamilyTexture, const FViewInfo& View)"
  },
  {
    "label": "FScreenPassRenderTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScreenPassRenderTarget()"
  },
  {
    "label": "FScreenPassRenderTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScreenPassRenderTarget(FScreenPassTexture InTexture) : FScreenPassTexture(InTexture)"
  },
  {
    "label": "FScreenPassRenderTarget()",
    "kind": "Method",
    "detail": "Function (LoadAction = ERenderTargetLoadAction::ELoad ; } })",
    "insertText": "FScreenPassRenderTarget(FScreenPassTexture InTexture, ERenderTargetLoadAction InLoadAction) : FScreenPassTexture(InTexture) , LoadAction(InLoadAction)"
  },
  {
    "label": "FScreenPassRenderTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPassRenderTarget(FRDGTextureRef InTexture, ERenderTargetLoadAction InLoadAction) : FScreenPassTexture(InTexture) , LoadAction(InLoadAction)"
  },
  {
    "label": "FScreenPassRenderTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPassRenderTarget(FRDGTextureRef InTexture, FIntRect InViewRect, ERenderTargetLoadAction InLoadAction) : FScreenPassTexture(InTexture, InViewRect) , LoadAction(InLoadAction)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FScreenPassRenderTarget Other)"
  },
  {
    "label": "GetRenderTargetBinding()",
    "kind": "Method",
    "detail": "Function (FRenderTargetBinding)",
    "insertText": "GetRenderTargetBinding()"
  },
  {
    "label": "FScreenPassTextureViewport()",
    "kind": "Method",
    "detail": "Function (ERenderTargetLoadAction LoadAction = ERenderTargetLoadAction::ENoAction ; } ; class FScreenPassTextureViewport { public :)",
    "insertText": "FScreenPassTextureViewport()"
  },
  {
    "label": "FScreenPassTextureViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScreenPassTextureViewport(FIntRect InRect) : Extent(InRect.Max) , Rect(InRect)"
  },
  {
    "label": "FScreenPassTextureViewport()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPassTextureViewport(FScreenPassTexture InTexture)"
  },
  {
    "label": "FScreenPassTextureViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScreenPassTextureViewport(FScreenPassTextureSlice InTexture)"
  },
  {
    "label": "FScreenPassTextureViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScreenPassTextureViewport(FRDGTextureRef InTexture) : FScreenPassTextureViewport(FScreenPassTexture(InTexture))"
  },
  {
    "label": "FScreenPassTextureViewport()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPassTextureViewport(FIntPoint InExtent) : Extent(InExtent) , Rect(FIntPoint::ZeroValue, InExtent)"
  },
  {
    "label": "FScreenPassTextureViewport()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPassTextureViewport(FIntPoint InExtent, FIntRect InRect) : Extent(InExtent) , Rect(InRect)"
  },
  {
    "label": "FScreenPassTextureViewport()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPassTextureViewport(FRDGTextureRef InTexture, FIntRect InRect) : FScreenPassTextureViewport(FScreenPassTexture(InTexture, InRect))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FScreenPassTextureViewport& Other)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsFullscreen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullscreen()"
  },
  {
    "label": "GetRectToExtentRatio()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetRectToExtentRatio()"
  },
  {
    "label": "GetDownscaledExtent()",
    "kind": "Method",
    "detail": "Function (FIntPoint Extent = FIntPoint::ZeroValue ; FIntRect Rect ; } ; FIntPoint)",
    "insertText": "GetDownscaledExtent(FIntPoint Extent, FIntPoint Divisor)"
  },
  {
    "label": "GetScaledExtent()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetScaledExtent(FIntPoint Extent, FVector2D Multiplier)"
  },
  {
    "label": "GetScaledExtent()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetScaledExtent(FIntPoint Extent, float Multiplier)"
  },
  {
    "label": "GetDownscaledRect()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "GetDownscaledRect(FIntRect Rect, FIntPoint Divisor)"
  },
  {
    "label": "GetScaledRect()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "GetScaledRect(FIntRect Rect, FVector2D Multiplier)"
  },
  {
    "label": "GetScaledRect()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "GetScaledRect(FIntRect Rect, float Multiplier)"
  },
  {
    "label": "GetDownscaledViewport()",
    "kind": "Method",
    "detail": "Function (FScreenPassTextureViewport)",
    "insertText": "GetDownscaledViewport(FScreenPassTextureViewport Viewport, FIntPoint Divisor)"
  },
  {
    "label": "GetScaledViewport()",
    "kind": "Method",
    "detail": "Function (FScreenPassTextureViewport)",
    "insertText": "GetScaledViewport(FScreenPassTextureViewport Viewport, FVector2D Multiplier)"
  },
  {
    "label": "GetRectFromExtent()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "GetRectFromExtent(FIntPoint Extent)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FScreenPassTextureViewportParameters, ) SHADER_PARAMETER(FVector2f, Extent) SHADER_PARAMETER(FVector2f, ExtentInverse) SHADER_PARAMETER(FVector2f, ScreenPosToViewportScale) SHADER_PARAMETER(FVector2f, ScreenPosToViewportBias) SHADER_PARAMETER(FIntPoint, ViewportMin) SHADER_PARAMETER(FIntPoint, ViewportMax) SHADER_PARAMETER(FVector2f, ViewportSize) SHADER_PARAMETER(FVector2f, ViewportSizeInverse) SHADER_PARAMETER(FVector2f, UVViewportMin) SHADER_PARAMETER(FVector2f, UVViewportMax) SHADER_PARAMETER(FVector2f, UVViewportSize) SHADER_PARAMETER(FVector2f, UVViewportSizeInverse) SHADER_PARAMETER(FVector2f, UVViewportBilinearMin) SHADER_PARAMETER(FVector2f, UVViewportBilinearMax) END_SHADER_PARAMETER_STRUCT() FScreenPassTextureViewportParameters RENDERER_API GetScreenPassTextureViewportParameters(const FScreenPassTextureViewport& InViewport)"
  },
  {
    "label": "FScreenTransform()",
    "kind": "Method",
    "detail": "Function (struct FScreenTransform { FVector2f Scale ; FVector2f Bias ;)",
    "insertText": "FScreenTransform()"
  },
  {
    "label": "FScreenTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenTransform(const FVector2f& InScale, const FVector2f& InBias) : Scale(InScale) , Bias(InBias)"
  },
  {
    "label": "Invert()",
    "kind": "Method",
    "detail": "Function (} const FScreenTransform Identity ; const FScreenTransform ScreenPosToViewportUV ; const FScreenTransform ViewportUVToScreenPos ; FScreenTransform)",
    "insertText": "Invert(const FScreenTransform& AToB)"
  },
  {
    "label": "ChangeRectFromTo()",
    "kind": "Method",
    "detail": "Function (FScreenTransform)",
    "insertText": "ChangeRectFromTo(FVector2f SourceOffset, FVector2f SourceExtent, FVector2f DestinationOffset, FVector2f DestinationExtent)"
  },
  {
    "label": "ChangeRectFromTo()",
    "kind": "Method",
    "detail": "Function (FScreenTransform)",
    "insertText": "ChangeRectFromTo(const FIntRect& SrcViewport, const FIntRect& DestViewport)"
  },
  {
    "label": "ChangeTextureBasisFromTo()",
    "kind": "Method",
    "detail": "Function (enum class ETextureBasis { ScreenPosition,ViewportUV,TexelPosition,TextureUV,} ; FScreenTransform)",
    "insertText": "ChangeTextureBasisFromTo(const FIntPoint& TextureExtent, const FIntRect& TextureViewport, ETextureBasis SrcBasis, ETextureBasis DestBasis)"
  },
  {
    "label": "ChangeTextureBasisFromTo()",
    "kind": "Method",
    "detail": "Function (FScreenTransform)",
    "insertText": "ChangeTextureBasisFromTo(const FScreenPassTextureViewport& TextureViewport, ETextureBasis SrcBasis, ETextureBasis DestBasis)"
  },
  {
    "label": "ChangeTextureBasisFromTo()",
    "kind": "Method",
    "detail": "Function (} FScreenTransform)",
    "insertText": "ChangeTextureBasisFromTo(const FScreenPassTexture& Texture, ETextureBasis SrcBasis, ETextureBasis DestBasis)"
  },
  {
    "label": "ChangeTextureUVCoordinateFromTo()",
    "kind": "Method",
    "detail": "Function (} FScreenTransform)",
    "insertText": "ChangeTextureUVCoordinateFromTo(const FScreenPassTextureViewport& SrcViewport, const FScreenPassTextureViewport& DestViewport)"
  },
  {
    "label": "SvPositionToViewportUV()",
    "kind": "Method",
    "detail": "Function (FScreenTransform)",
    "insertText": "SvPositionToViewportUV(const FIntRect& SrcViewport)"
  },
  {
    "label": "DispatchThreadIdToViewportUV()",
    "kind": "Method",
    "detail": "Function (FScreenTransform)",
    "insertText": "DispatchThreadIdToViewportUV(const FIntRect& SrcViewport)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FScreenPassTextureInput, ) SHADER_PARAMETER_STRUCT_INCLUDE(FScreenPassTextureViewportParameters, Viewport) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, Texture) SHADER_PARAMETER_SAMPLER(SamplerState, Sampler) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FScreenPassTextureSliceInput, ) SHADER_PARAMETER_STRUCT_INCLUDE(FScreenPassTextureViewportParameters, Viewport) SHADER_PARAMETER_RDG_TEXTURE_SRV(Texture2D, Texture) SHADER_PARAMETER_SAMPLER(SamplerState, Sampler) END_SHADER_PARAMETER_STRUCT() FScreenPassTextureInput GetScreenPassTextureInput(FScreenPassTexture Input, FRHISamplerState* Sampler)"
  },
  {
    "label": "GetScreenPassTextureInput()",
    "kind": "Method",
    "detail": "Function (FScreenPassTextureSliceInput)",
    "insertText": "GetScreenPassTextureInput(FScreenPassTextureSlice Input, FRHISamplerState* Sampler)"
  },
  {
    "label": "FScreenPassPipelineState()",
    "kind": "Method",
    "detail": "Function (struct FScreenPassPipelineState { using FDefaultBlendState = TStaticBlendState<> ; using FDefaultDepthStencilState = TStaticDepthStencilState<false,CF_Always> ;)",
    "insertText": "FScreenPassPipelineState()"
  },
  {
    "label": "FScreenPassPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScreenPassPipelineState(const TShaderRef<FShader>& InVertexShader, const TShaderRef<FShader>& InPixelShader, FRHIBlendState* InBlendState = FDefaultBlendState::GetRHI(), FRHIDepthStencilState* InDepthStencilState = FDefaultDepthStencilState::GetRHI(), uint8 InStencilRef = 0, FRHIVertexDeclaration* InVertexDeclaration = GFilterVertexDeclaration.VertexDeclarationRHI) : VertexShader(InVertexShader) , PixelShader(InPixelShader) , BlendState(InBlendState) , DepthStencilState(InDepthStencilState) , VertexDeclaration(InVertexDeclaration) , StencilRef(InStencilRef)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Validate()"
  },
  {
    "label": "SetScreenPassPipelineState()",
    "kind": "Method",
    "detail": "Function (} TShaderRef<FShader> VertexShader ; TShaderRef<FShader> PixelShader ; FRHIBlendState* BlendState = nullptr ; FRHIDepthStencilState* DepthStencilState = nullptr ; FRHIVertexDeclaration* VertexDeclaration = nullptr ; uint8 StencilRef { } ; } ; void)",
    "insertText": "SetScreenPassPipelineState(FRHICommandList& RHICmdList, const FScreenPassPipelineState& ScreenPassDraw)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EScreenPassDrawFlags : uint8 { None,AllowHMDHiddenAreaMask = 0 x2 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EScreenPassDrawFlags)"
  },
  {
    "label": "FScreenPassViewInfo()",
    "kind": "Method",
    "detail": "Function (struct FScreenPassViewInfo { const ERHIFeatureLevel::Type FeatureLevel ; const int32 StereoViewIndex ; const int32 InstanceCount ; const bool bHMDHiddenAreaMaskActive ;)",
    "insertText": "FScreenPassViewInfo() : FScreenPassViewInfo(GMaxRHIFeatureLevel)"
  },
  {
    "label": "FScreenPassViewInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPassViewInfo(ERHIFeatureLevel::Type InFeatureLevel) : FeatureLevel(InFeatureLevel) , StereoViewIndex(INDEX_NONE) , InstanceCount(1) , bHMDHiddenAreaMaskActive(IsHMDHiddenAreaMaskActive())"
  },
  {
    "label": "FScreenPassViewInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPassViewInfo(const FSceneView& View) : FeatureLevel(View.FeatureLevel) , StereoViewIndex(View.StereoViewIndex) , InstanceCount(View.GetStereoPassInstanceFactor()) , bHMDHiddenAreaMaskActive(View.bHMDHiddenAreaMaskActive)"
  },
  {
    "label": "DrawScreenPass_PostSetup()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "DrawScreenPass_PostSetup(FRHICommandList& RHICmdList, const FScreenPassViewInfo& ViewInfo, const FScreenPassTextureViewport& OutputViewport, const FScreenPassTextureViewport& InputViewport, const FScreenPassPipelineState& PipelineState, EScreenPassDrawFlags Flags)"
  },
  {
    "label": "DrawScreenPass()",
    "kind": "Method",
    "detail": "Function (template<TSetupFunction> void)",
    "insertText": "DrawScreenPass(FRHICommandList& RHICmdList, FScreenPassViewInfo ViewInfo, const FScreenPassTextureViewport& OutputViewport, const FScreenPassTextureViewport& InputViewport, const FScreenPassPipelineState& PipelineState, EScreenPassDrawFlags Flags, TSetupFunction SetupFunction)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (const FIntRect OutputRect = OutputViewport . Rect ; RHICmdList .)",
    "insertText": "SetViewport(OutputRect.Min.X, OutputRect.Min.Y, 0.0f, OutputRect.Max.X, OutputRect.Max.Y, 1.0f)"
  },
  {
    "label": "SetScreenPassPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScreenPassPipelineState(RHICmdList, PipelineState)"
  },
  {
    "label": "SetupFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupFunction(RHICmdList)"
  },
  {
    "label": "DrawScreenPass_PostSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawScreenPass_PostSetup(RHICmdList, ViewInfo, OutputViewport, InputViewport, PipelineState, Flags)"
  },
  {
    "label": "AddDrawScreenPass()",
    "kind": "Method",
    "detail": "Function (} template<PixelShaderType> void)",
    "insertText": "AddDrawScreenPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, FScreenPassViewInfo ViewInfo, const FScreenPassTextureViewport& OutputViewport, const FScreenPassTextureViewport& InputViewport, const TShaderRef<FShader>& VertexShader, const TShaderRef<PixelShaderType>& PixelShader, FRHIBlendState* BlendState, FRHIDepthStencilState* DepthStencilState, typename PixelShaderType::FParameters* PixelShaderParameters, EScreenPassDrawFlags Flags = EScreenPassDrawFlags::None)"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnusedGraphResources(PixelShader, PixelShaderParameters)"
  },
  {
    "label": "PipelineState()",
    "kind": "Method",
    "detail": "Function (const FScreenPassPipelineState)",
    "insertText": "PipelineState(VertexShader, PixelShader, BlendState, DepthStencilState)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "AddPass(Forward<FRDGEventName&&>(PassName), PixelShaderParameters, ERDGPassFlags::Raster, [ViewInfo, OutputViewport, InputViewport, PipelineState, PixelShader, PixelShaderParameters, Flags](FRDGAsyncTask, FRHICommandList& RHICmdList) { DrawScreenPass(RHICmdList, ViewInfo, OutputViewport, InputViewport, PipelineState, Flags, [&](FRHICommandList&) { SetShaderParameters(RHICmdList, PixelShader, PixelShader.GetPixelShader(), *PixelShaderParameters); }); })"
  },
  {
    "label": "AddDrawScreenPass()",
    "kind": "Method",
    "detail": "Function (} template<PixelShaderType> void)",
    "insertText": "AddDrawScreenPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, FScreenPassViewInfo ViewInfo, const FScreenPassTextureViewport& OutputViewport, const FScreenPassTextureViewport& InputViewport, const TShaderRef<FShader>& VertexShader, const TShaderRef<PixelShaderType>& PixelShader, typename PixelShaderType::FParameters* PixelShaderParameters, EScreenPassDrawFlags Flags = EScreenPassDrawFlags::None)"
  },
  {
    "label": "GetRHI()",
    "kind": "Method",
    "detail": "Function (FRHIBlendState* BlendState = FScreenPassPipelineState::)",
    "insertText": "GetRHI()"
  },
  {
    "label": "AddDrawScreenPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDrawScreenPass(GraphBuilder, Forward<FRDGEventName&&>(PassName), ViewInfo, OutputViewport, InputViewport, VertexShader, PixelShader, BlendState, DepthStencilState, PixelShaderParameters, Flags)"
  },
  {
    "label": "AddDrawScreenPass()",
    "kind": "Method",
    "detail": "Function (} template<PixelShaderType> void)",
    "insertText": "AddDrawScreenPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, FScreenPassViewInfo ViewInfo, const FScreenPassTextureViewport& OutputViewport, const FScreenPassTextureViewport& InputViewport, const TShaderRef<FShader>& VertexShader, const TShaderRef<PixelShaderType>& PixelShader, FRHIBlendState* BlendState, typename PixelShaderType::FParameters* PixelShaderParameters, EScreenPassDrawFlags Flags = EScreenPassDrawFlags::None)"
  },
  {
    "label": "AddDrawScreenPass()",
    "kind": "Method",
    "detail": "Function (} template<PixelShaderType> void)",
    "insertText": "AddDrawScreenPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, FScreenPassViewInfo ViewInfo, const FScreenPassTextureViewport& OutputViewport, const FScreenPassTextureViewport& InputViewport, const TShaderRef<FShader>& VertexShader, const TShaderRef<PixelShaderType>& PixelShader, FRHIDepthStencilState* DepthStencilState, typename PixelShaderType::FParameters* PixelShaderParameters, EScreenPassDrawFlags Flags = EScreenPassDrawFlags::None)"
  },
  {
    "label": "AddDrawScreenPass()",
    "kind": "Method",
    "detail": "Function (} template<PixelShaderType> void)",
    "insertText": "AddDrawScreenPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, FScreenPassViewInfo ViewInfo, const FScreenPassTextureViewport& OutputViewport, const FScreenPassTextureViewport& InputViewport, const TShaderRef<PixelShaderType>& PixelShader, typename PixelShaderType::FParameters* PixelShaderParameters, EScreenPassDrawFlags Flags = EScreenPassDrawFlags::None)"
  },
  {
    "label": "GetGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (FGlobalShaderMap* ShaderMap =)",
    "insertText": "GetGlobalShaderMap(ViewInfo.FeatureLevel)"
  },
  {
    "label": "VertexShader()",
    "kind": "Method",
    "detail": "Function (TShaderMapRef<FScreenPassVS>)",
    "insertText": "VertexShader(ShaderMap)"
  },
  {
    "label": "AddDrawScreenPass()",
    "kind": "Method",
    "detail": "Function (} template<TSetupFunction,TPassParameterStruct> void)",
    "insertText": "AddDrawScreenPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, FScreenPassViewInfo ViewInfo, const FScreenPassTextureViewport& OutputViewport, const FScreenPassTextureViewport& InputViewport, const FScreenPassPipelineState& PipelineState, TPassParameterStruct* PassParameterStruct, EScreenPassDrawFlags Flags, TSetupFunction SetupFunction)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "AddPass(Forward<FRDGEventName&&>(PassName), PassParameterStruct, ERDGPassFlags::Raster, [ViewInfo, OutputViewport, InputViewport, PipelineState, SetupFunction, Flags] (FRDGAsyncTask, FRHICommandList& RHICmdList) { DrawScreenPass(RHICmdList, ViewInfo, OutputViewport, InputViewport, PipelineState, Flags, SetupFunction); })"
  },
  {
    "label": "AddDrawScreenPass()",
    "kind": "Method",
    "detail": "Function (} template<TSetupFunction,TPassParameterStruct> void)",
    "insertText": "AddDrawScreenPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, FScreenPassViewInfo ViewInfo, const FScreenPassTextureViewport& OutputViewport, const FScreenPassTextureViewport& InputViewport, const FScreenPassPipelineState& PipelineState, TPassParameterStruct* PassParameterStruct, TSetupFunction SetupFunction)"
  },
  {
    "label": "AddDrawScreenPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDrawScreenPass(GraphBuilder, Forward<FRDGEventName&&>(PassName), ViewInfo, OutputViewport, InputViewport, PipelineState, PassParameterStruct, EScreenPassDrawFlags::None, SetupFunction)"
  },
  {
    "label": "AddDrawTexturePass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDrawTexturePass(FRDGBuilder& GraphBuilder, FScreenPassViewInfo ViewInfo, FRDGTextureRef InputTexture, FRDGTextureRef OutputTexture, FIntPoint InputPosition = FIntPoint::ZeroValue, FIntPoint OutputPosition = FIntPoint::ZeroValue, FIntPoint Size = FIntPoint::ZeroValue)"
  },
  {
    "label": "AddDrawTexturePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDrawTexturePass(FRDGBuilder& GraphBuilder, FScreenPassViewInfo ViewInfo, FRDGTextureRef InputTexture, FRDGTextureRef OutputTexture, FIntPoint InputPosition, FIntPoint InputSize, FIntPoint OutputPosition, FIntPoint OutputSize)"
  },
  {
    "label": "AddDrawTexturePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDrawTexturePass(GraphBuilder, ViewInfo, InputTexture, OutputTexture, ViewportRect.Min, ViewportRect.Min, ViewportRect.Size())"
  },
  {
    "label": "AddDrawTexturePass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDrawTexturePass(FRDGBuilder& GraphBuilder, FScreenPassViewInfo ViewInfo, FScreenPassTexture Input, FScreenPassRenderTarget Output, uint32 RTMultiviewCount = 1)"
  },
  {
    "label": "AddDrawTexturePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDrawTexturePass(FRDGBuilder& GraphBuilder, FScreenPassViewInfo ViewInfo, FScreenPassTexture Input, FScreenPassTexture Output)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ERenderTargetLoadAction LoadAction = ERenderTargetLoadAction::ELoad ;)",
    "insertText": "if(Input.Texture->Desc.Extent == Output.Texture->Desc.Extent && Input.ViewRect == Output.ViewRect)"
  },
  {
    "label": "AddDrawTexturePass()",
    "kind": "Method",
    "detail": "Function (LoadAction = ERenderTargetLoadAction::ENoAction ; })",
    "insertText": "AddDrawTexturePass(GraphBuilder, ViewInfo, Input, FScreenPassRenderTarget(Output, LoadAction))"
  },
  {
    "label": "AddDrawTexturePass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDrawTexturePass(FRDGBuilder& GraphBuilder, FScreenPassViewInfo ViewInfo, FScreenPassTextureSlice Input, FScreenPassRenderTarget Output)"
  },
  {
    "label": "AddRenderTargetPass()",
    "kind": "Method",
    "detail": "Function (template<TFunction> void)",
    "insertText": "AddRenderTargetPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, FScreenPassRenderTarget Output, TFunction&& Function)"
  },
  {
    "label": "FRenderTargetParameters()",
    "kind": "Method",
    "detail": "Function (FRenderTargetParameters* PassParameters = GraphBuilder . AllocParameters<)",
    "insertText": "FRenderTargetParameters()"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "AddPass(MoveTemp(PassName), PassParameters, ERDGPassFlags::Raster, MoveTemp(Function))"
  },
  {
    "label": "AddDrawCanvasPass()",
    "kind": "Method",
    "detail": "Function (} template<TFunction> void)",
    "insertText": "AddDrawCanvasPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, const FSceneView& View, FScreenPassRenderTarget Output, TFunction Function)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (const FSceneViewFamily& ViewFamily =* View . Family ; FCanvas& Canvas =*)",
    "insertText": "Create(GraphBuilder, Output.Texture, nullptr, ViewFamily.Time, View.GetFeatureLevel(), ViewFamily.DebugDPIScale)"
  },
  {
    "label": "SetRenderTargetRect()",
    "kind": "Method",
    "detail": "Function (Canvas .)",
    "insertText": "SetRenderTargetRect(Output.ViewRect)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(Canvas)"
  },
  {
    "label": "Flush_RenderThread()",
    "kind": "Method",
    "detail": "Function (const bool bFlush = false ; Canvas .)",
    "insertText": "Flush_RenderThread(GraphBuilder, bFlush)"
  },
  {
    "label": "AddDownsampleDepthPass()",
    "kind": "Method",
    "detail": "Function (} enum class EDownsampleDepthFilter { Point,Max,Checkerboard,MinAndMaxDepth } ; void)",
    "insertText": "AddDownsampleDepthPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, FScreenPassTexture Input, FScreenPassRenderTarget Output, EDownsampleDepthFilter DownsampleDepthFilter)"
  }
]