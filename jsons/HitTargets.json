[
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UGizmoLambdaHitTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoLambdaHitTarget"
  },
  {
    "label": "UGizmoComponentHitTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoComponentHitTarget"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BaseGizmos / GizmoInterfaces . h \" # include \" HitTargets . generated . h \" class UPrimitiveComponent ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: TUniqueFunction<FInputRayHit(const FInputDeviceRay&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(bool)"
  },
  {
    "label": "IsHit()",
    "kind": "Method",
    "detail": "Function (public : FInputRayHit)",
    "insertText": "IsHit(const FInputDeviceRay& ClickPos)"
  },
  {
    "label": "UpdateHoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoverState(bool bHovering)"
  },
  {
    "label": "UpdateInteractingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInteractingState(bool bHovering)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "bool(const FInputDeviceRay&)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (public : UGizmoComponentHitTarget*)",
    "insertText": "Construct(UPrimitiveComponent* Component, UObject* Outer = (UObject*)GetTransientPackage())"
  }
]