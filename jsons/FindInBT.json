[
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UBehaviorTreeGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTreeGraphNode"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFindInBTResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFindInBTResult"
  },
  {
    "label": "FBehaviorTreeEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBehaviorTreeEditor"
  },
  {
    "label": "SFindInBT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFindInBT"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "FFindInBTResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" class ITableRow ; class SWidget ; class UBehaviorTreeGraphNode ; class UEdGraphNode ; enum class EFindInBTSearchType : uint8 { Node,BlackboardKey,GameplayTag } ; class FFindInBTResult { public :)",
    "insertText": "FFindInBTResult(const FString& InValue)"
  },
  {
    "label": "FFindInBTResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFindInBTResult(const FString& InValue, TSharedPtr<FFindInBTResult>& InParent, UEdGraphNode* InNode)"
  },
  {
    "label": "OnClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClick(TWeakPtr<class FBehaviorTreeEditor> BehaviorTreeEditor, TSharedPtr<FFindInBTResult> Root)"
  },
  {
    "label": "CreateIcon()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateIcon()"
  },
  {
    "label": "GetCommentText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCommentText()"
  },
  {
    "label": "GetNodeTypeText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNodeTypeText()"
  },
  {
    "label": "SetNodeHighlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeHighlight(bool bHighlight)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FFindInBTResult>> Children ; FString Value ; TWeakObjectPtr<UEdGraphNode> GraphNode ; TWeakPtr<FFindInBTResult> Parent ; FString ExactFieldValueFound ; } ; class SFindInBT : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SFindInBT)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedPtr<class FBehaviorTreeEditor> InBehaviorTreeEditor)"
  },
  {
    "label": "FocusForUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusForUse()"
  },
  {
    "label": "OnSearchTextChanged()",
    "kind": "Method",
    "detail": "Function (private : typedef TSharedPtr<FFindInBTResult> FSearchResult ; typedef STreeView<FSearchResult> STreeViewType ; void)",
    "insertText": "OnSearchTextChanged(const FText& Text)"
  },
  {
    "label": "OnSearchTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSearchTextCommitted(const FText& Text, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildren(FSearchResult InItem, TArray<FSearchResult>& OutChildren)"
  },
  {
    "label": "OnTreeSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTreeSelectionChanged(FSearchResult Item, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRow(FSearchResult InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "InitiateSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitiateSearch()"
  },
  {
    "label": "MatchTokens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatchTokens(const TArray<FString>& Tokens)"
  },
  {
    "label": "MatchTokensInChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatchTokensInChild(const TArray<FString>& Tokens, UBehaviorTreeGraphNode* Child, FSearchResult ParentNode)"
  },
  {
    "label": "StringMatchesSearchTokens()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StringMatchesSearchTokens(const TArray<FString>& Tokens, const FString& ComparisonString)"
  },
  {
    "label": "NodePropertyMatchesSearchTokens()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NodePropertyMatchesSearchTokens(const TArray<FString>& Tokens, UBehaviorTreeGraphNode* Node, FString& OutExactFieldValueFound)"
  },
  {
    "label": "FieldPropertyMatchesSearchTokens()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FieldPropertyMatchesSearchTokens(const TArray<FString>& Tokens, const FProperty* Property, void* Data, FString& OutExactFieldValueFound)"
  },
  {
    "label": "OnSearchTypeSelectedItemChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSearchTypeSelectedItemChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type SelectInfo)"
  }
]