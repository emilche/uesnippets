[
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "NodeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeID"
  },
  {
    "label": "SVDispatchGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SVDispatchGrid"
  },
  {
    "label": "NodeRecordType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeRecordType"
  },
  {
    "label": "NodeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeInfo"
  },
  {
    "label": "NodeProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeProps"
  },
  {
    "label": "NodeInputRecordProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeInputRecordProps"
  },
  {
    "label": "NodeFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeFlags"
  },
  {
    "label": "NodeIOProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeIOProperties"
  },
  {
    "label": "NodeInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DxilConstants . h \" # include<string> namespace llvm { class StringRef ; } namespace hlsl { struct NodeID { std::string Name ; unsigned Index ; } ; struct SVDispatchGrid { unsigned ByteOffset ; DXIL::ComponentType ComponentType ; unsigned NumComponents ; } ; struct NodeRecordType { unsigned size ; unsigned alignment ; SVDispatchGrid SV_DispatchGrid ; } ; struct NodeInfo {)",
    "insertText": "NodeInfo() : NodeInfo(DXIL::NodeIOFlags::None)"
  },
  {
    "label": "NodeInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeInfo(DXIL::NodeIOFlags flags, unsigned recordSize = 0) : IOFlags((unsigned)flags), RecordSize(recordSize)"
  },
  {
    "label": "NodeInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeInfo(DXIL::NodeIOKind kind, unsigned recordSize = 0) : NodeInfo((DXIL::NodeIOFlags)kind, recordSize)"
  },
  {
    "label": "NodeFlags()",
    "kind": "Method",
    "detail": "Function (} unsigned IOFlags ; unsigned RecordSize ; } ; typedef NodeInfo NodeRecordInfo ; struct NodeProps { unsigned MetadataIdx ; NodeInfo Info ; } ; struct NodeInputRecordProps { unsigned MetadataIdx ; NodeRecordInfo RecordInfo ; } ; struct NodeFlags { public :)",
    "insertText": "NodeFlags()"
  },
  {
    "label": "NodeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeFlags(DXIL::NodeIOFlags flags)"
  },
  {
    "label": "NodeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeFlags(DXIL::NodeIOKind kind)"
  },
  {
    "label": "NodeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeFlags(uint32_t F)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const NodeFlags &o)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "uint32_t()"
  },
  {
    "label": "GetNodeIOKind()",
    "kind": "Method",
    "detail": "Function (DXIL::NodeIOKind)",
    "insertText": "GetNodeIOKind()"
  },
  {
    "label": "GetNodeIOFlags()",
    "kind": "Method",
    "detail": "Function (DXIL::NodeIOFlags)",
    "insertText": "GetNodeIOFlags()"
  },
  {
    "label": "IsInputRecord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInputRecord()"
  },
  {
    "label": "IsRecord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecord()"
  },
  {
    "label": "IsOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutput()"
  },
  {
    "label": "IsOutputNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutputNode()"
  },
  {
    "label": "IsOutputRecord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutputRecord()"
  },
  {
    "label": "IsReadWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadWrite()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsEmptyInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmptyInput()"
  },
  {
    "label": "IsValidNodeKind()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidNodeKind()"
  },
  {
    "label": "RecordTypeMatchesLaunchType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecordTypeMatchesLaunchType(DXIL::NodeLaunchType launchType)"
  },
  {
    "label": "SetTrackRWInputSharing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrackRWInputSharing()"
  },
  {
    "label": "GetTrackRWInputSharing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTrackRWInputSharing()"
  },
  {
    "label": "SetGloballyCoherent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGloballyCoherent()"
  },
  {
    "label": "GetGloballyCoherent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGloballyCoherent()"
  },
  {
    "label": "NodeIOProperties()",
    "kind": "Method",
    "detail": "Function (NodeRecordType RecordType = { } ; NodeID OutputID = { } ; unsigned MaxRecords = 0 ; int MaxRecordsSharedWith = - 1 ; unsigned OutputArraySize = 0 ; bool AllowSparseNodes = false ; public :)",
    "insertText": "NodeIOProperties()"
  },
  {
    "label": "NodeIOProperties()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeIOProperties(NodeFlags flags) : Flags(flags)"
  },
  {
    "label": "GetNodeInfo()",
    "kind": "Method",
    "detail": "Function (} NodeInfo)",
    "insertText": "GetNodeInfo()"
  },
  {
    "label": "GetNodeRecordInfo()",
    "kind": "Method",
    "detail": "Function (NodeRecordInfo)",
    "insertText": "GetNodeRecordInfo()"
  }
]