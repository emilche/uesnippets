[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "FPatchOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPatchOutput"
  },
  {
    "label": "FPatchInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchInput"
  },
  {
    "label": "FPatchMixer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchMixer"
  },
  {
    "label": "FPatchSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchSplitter"
  },
  {
    "label": "FPatchInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchInput"
  },
  {
    "label": "FPatchMixer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchMixer"
  },
  {
    "label": "FPatchSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchSplitter"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPatchMixer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchMixer"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPatchSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchSplitter"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPatchMixerSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchMixerSplitter"
  },
  {
    "label": "NewInput()",
    "kind": "Method",
    "detail": "Function (FPatchInput)",
    "insertText": "NewInput(NewOutput)"
  },
  {
    "label": "FPatchOutput()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FPatchOutput(int32 InMaxCapacity, float InGain = 1.0f)"
  },
  {
    "label": "FPatchOutput()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FPatchOutput()"
  },
  {
    "label": "PopAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PopAudio(float* OutBuffer, int32 NumSamples, bool bUseLatestAudio)"
  },
  {
    "label": "MixInAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MixInAudio(float* OutBuffer, int32 NumSamples, bool bUseLatestAudio)"
  },
  {
    "label": "WaitUntilNumSamplesAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitUntilNumSamplesAvailable(int32 NumSamples, uint32 TimeOutMilliseconds = MAX_uint32)"
  },
  {
    "label": "PushAudioToInternalBuffer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PushAudioToInternalBuffer(const float* InBuffer, int32 NumSamples)"
  },
  {
    "label": "FPatchInput()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FPatchInput(const FPatchOutputStrongPtr& InOutput)"
  },
  {
    "label": "FPatchInput()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FPatchInput(const FPatchInput& Other)"
  },
  {
    "label": "FPatchInput()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FPatchInput(FPatchInput&& Other)"
  },
  {
    "label": "PushAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PushAudio(const float* InBuffer, int32 NumSamples)"
  },
  {
    "label": "SetGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGain(float InGain)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddNewInput()",
    "kind": "Method",
    "detail": "Function (FPatchInput)",
    "insertText": "AddNewInput(int32 MaxLatencyInSamples, float InGain)"
  },
  {
    "label": "AddNewInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewInput(const FPatchInput& InPatchInput)"
  },
  {
    "label": "RemovePatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePatch(const FPatchInput& InPatchInput)"
  },
  {
    "label": "PopAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PopAudio(float* OutBuffer, int32 OutNumSamples, bool bUseLatestAudio)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "MaxNumberOfSamplesThatCanBePopped()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxNumberOfSamplesThatCanBePopped()"
  },
  {
    "label": "WaitUntilNumSamplesAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitUntilNumSamplesAvailable(int32 NumSamples, uint32 TimeOutMilliseconds = MAX_uint32)"
  },
  {
    "label": "DisconnectAllInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectAllInputs()"
  },
  {
    "label": "ConnectNewPatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectNewPatches()"
  },
  {
    "label": "CleanUpDisconnectedPatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpDisconnectedPatches()"
  },
  {
    "label": "AddNewPatch()",
    "kind": "Method",
    "detail": "Function (FPatchOutputStrongPtr)",
    "insertText": "AddNewPatch(int32 MaxLatencyInSamples, float InGain)"
  },
  {
    "label": "AddNewPatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewPatch(FPatchOutputStrongPtr&& InPatchOutputStrongPtr)"
  },
  {
    "label": "AddNewPatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewPatch(const FPatchOutputStrongPtr& InPatchOutputStrongPtr)"
  },
  {
    "label": "PushAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PushAudio(const float* InBuffer, int32 InNumSamples)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "MaxNumberOfSamplesThatCanBePushed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxNumberOfSamplesThatCanBePushed()"
  },
  {
    "label": "AddPendingPatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingPatches()"
  },
  {
    "label": "AddNewOutput()",
    "kind": "Method",
    "detail": "Function (FPatchOutputStrongPtr)",
    "insertText": "AddNewOutput(int32 MaxLatencyInSamples, float InGain)"
  },
  {
    "label": "AddNewOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewOutput(const FPatchOutputStrongPtr& InPatchOutputStrongPtr)"
  },
  {
    "label": "AddNewInput()",
    "kind": "Method",
    "detail": "Function (FPatchInput)",
    "insertText": "AddNewInput(int32 MaxLatencyInSamples, float InGain)"
  },
  {
    "label": "AddNewInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewInput(FPatchInput& InInput)"
  },
  {
    "label": "RemovePatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePatch(const FPatchInput& InInput)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio()"
  }
]