[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "FPatchOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPatchOutput"
  },
  {
    "label": "FPatchInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchInput"
  },
  {
    "label": "FPatchMixer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchMixer"
  },
  {
    "label": "FPatchSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchSplitter"
  },
  {
    "label": "FPatchMixerSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchMixerSplitter"
  },
  {
    "label": "FPatchOutput()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / BufferVectorOperations . h \" # include \" DSP / Dsp . h \" class FEvent ; namespace Audio { struct FPatchOutput { public :)",
    "insertText": "FPatchOutput(int32 InMaxCapacity, float InGain = 1.0f)"
  },
  {
    "label": "FPatchOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPatchOutput()"
  },
  {
    "label": "PopAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PopAudio(float* OutBuffer, int32 NumSamples, bool bUseLatestAudio)"
  },
  {
    "label": "MixInAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MixInAudio(float* OutBuffer, int32 NumSamples, bool bUseLatestAudio)"
  },
  {
    "label": "GetNumSamplesAvailable()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSamplesAvailable()"
  },
  {
    "label": "WaitUntilNumSamplesAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitUntilNumSamplesAvailable(int32 NumSamples, uint32 TimeOutMilliseconds = MAX_uint32)"
  },
  {
    "label": "IsInputStale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInputStale()"
  },
  {
    "label": "PushAudioToInternalBuffer()",
    "kind": "Method",
    "detail": "Function (class FPatchInput ; class FPatchMixer ; class FPatchSplitter ; private : int32)",
    "insertText": "PushAudioToInternalBuffer(const float* InBuffer, int32 NumSamples)"
  },
  {
    "label": "FPatchInput()",
    "kind": "Method",
    "detail": "Function (TCircularAudioBuffer<float> InternalBuffer ; FAlignedFloatBuffer MixingBuffer ; TAtomic<float> TargetGain ; float PreviousGain ; int32 PatchID ; std::atomic<int32> NumAliveInputs ; std::atomic<FEvent*> SamplesPushedEvent ; TAtomic<int32> PatchIDCounter ; } ; typedef TSharedPtr<FPatchOutput,ESPMode::ThreadSafe> FPatchOutputStrongPtr ; typedef TWeakPtr<FPatchOutput,ESPMode::ThreadSafe> FPatchOutputWeakPtr ; class FPatchInput { public :)",
    "insertText": "FPatchInput(const FPatchOutputStrongPtr& InOutput)"
  },
  {
    "label": "FPatchInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPatchInput(const FPatchInput& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPatchInput&)",
    "insertText": "operator(const FPatchInput& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPatchInput&)",
    "insertText": "operator(FPatchInput&& Other)"
  },
  {
    "label": "FPatchInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPatchInput(FPatchInput&& Other)"
  },
  {
    "label": "FPatchInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPatchInput()"
  },
  {
    "label": "PushAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PushAudio(const float* InBuffer, int32 NumSamples)"
  },
  {
    "label": "SetGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGain(float InGain)"
  },
  {
    "label": "IsOutputStillActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutputStillActive()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddNewInput()",
    "kind": "Method",
    "detail": "Function (class FPatchMixer ; class FPatchSplitter ; private : FPatchOutputStrongPtr OutputHandle ; int32 PushCallsCounter = 0 ; } ; class FPatchMixer { public : FPatchInput)",
    "insertText": "AddNewInput(int32 MaxLatencyInSamples, float InGain)"
  },
  {
    "label": "AddNewInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewInput(const FPatchInput& InPatchInput)"
  },
  {
    "label": "RemovePatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePatch(const FPatchInput& InPatchInput)"
  },
  {
    "label": "PopAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PopAudio(float* OutBuffer, int32 OutNumSamples, bool bUseLatestAudio)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "MaxNumberOfSamplesThatCanBePopped()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxNumberOfSamplesThatCanBePopped()"
  },
  {
    "label": "DisconnectAllInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectAllInputs()"
  },
  {
    "label": "ConnectNewPatches()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ConnectNewPatches()"
  },
  {
    "label": "CleanUpDisconnectedPatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpDisconnectedPatches()"
  },
  {
    "label": "AddNewPatch()",
    "kind": "Method",
    "detail": "Function (TArray<FPatchOutputStrongPtr> PendingNewInputs ; FCriticalSection PendingNewInputsCriticalSection ; TArray<int32> DisconnectedInputs ; FCriticalSection InputDeletionCriticalSection ; TArray<FPatchOutputStrongPtr> CurrentInputs ; FCriticalSection CurrentPatchesCriticalSection ; } ; class FPatchSplitter { public : FPatchOutputStrongPtr)",
    "insertText": "AddNewPatch(int32 MaxLatencyInSamples, float InGain)"
  },
  {
    "label": "AddNewPatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewPatch(FPatchOutputStrongPtr&& InPatchOutputStrongPtr)"
  },
  {
    "label": "AddNewPatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewPatch(const FPatchOutputStrongPtr& InPatchOutputStrongPtr)"
  },
  {
    "label": "PushAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PushAudio(const float* InBuffer, int32 InNumSamples)"
  },
  {
    "label": "MaxNumberOfSamplesThatCanBePushed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxNumberOfSamplesThatCanBePushed()"
  },
  {
    "label": "AddPendingPatches()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddPendingPatches()"
  },
  {
    "label": "AddNewOutput()",
    "kind": "Method",
    "detail": "Function (TArray<FPatchInput> PendingOutputs ; FCriticalSection PendingOutputsCriticalSection ; TArray<FPatchInput> ConnectedOutputs ; FCriticalSection ConnectedOutputsCriticalSection ; } ; class FPatchMixerSplitter { public : FPatchOutputStrongPtr)",
    "insertText": "AddNewOutput(int32 MaxLatencyInSamples, float InGain)"
  },
  {
    "label": "AddNewOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewOutput(const FPatchOutputStrongPtr& InPatchOutputStrongPtr)"
  },
  {
    "label": "AddNewInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewInput(FPatchInput& InInput)"
  },
  {
    "label": "RemovePatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePatch(const FPatchInput& InInput)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio()"
  }
]