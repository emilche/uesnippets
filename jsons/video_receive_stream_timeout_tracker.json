[
  {
    "label": "VideoReceiveStreamTimeoutTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoReceiveStreamTimeoutTracker"
  },
  {
    "label": "Timeouts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Timeouts"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_VIDEO_RECEIVE_STREAM_TIMEOUT_TRACKER_H_ # define VIDEO_VIDEO_RECEIVE_STREAM_TIMEOUT_TRACKER_H_ # include<functional> # include \" api / task_queue / task_queue_base . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class VideoReceiveStreamTimeoutTracker { public : struct Timeouts { TimeDelta max_wait_for_keyframe ; TimeDelta max_wait_for_frame ; } ; using TimeoutCallback = std::function<)",
    "insertText": "void(TimeDelta wait)"
  },
  {
    "label": "VideoReceiveStreamTimeoutTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoReceiveStreamTimeoutTracker(Clock* clock, TaskQueueBase* const bookkeeping_queue, const Timeouts& timeouts, TimeoutCallback callback)"
  },
  {
    "label": "VideoReceiveStreamTimeoutTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoReceiveStreamTimeoutTracker()"
  },
  {
    "label": "VideoReceiveStreamTimeoutTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoReceiveStreamTimeoutTracker(const VideoReceiveStreamTimeoutTracker&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VideoReceiveStreamTimeoutTracker&)",
    "insertText": "operator(const VideoReceiveStreamTimeoutTracker&)"
  },
  {
    "label": "Running()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Running()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(bool waiting_for_keyframe)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "SetWaitingForKeyframe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWaitingForKeyframe()"
  },
  {
    "label": "OnEncodedFrameReleased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodedFrameReleased()"
  },
  {
    "label": "TimeUntilTimeout()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "TimeUntilTimeout()"
  },
  {
    "label": "SetTimeouts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeouts(Timeouts timeouts)"
  },
  {
    "label": "TimeoutForNextFrame()",
    "kind": "Method",
    "detail": "Function (private : TimeDelta)",
    "insertText": "TimeoutForNextFrame() const RTC_RUN_ON(bookkeeping_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; TaskQueueBase* const bookkeeping_queue_ ; Timeouts timeouts_)",
    "insertText": "RTC_GUARDED_BY(bookkeeping_queue_)"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (const TimeoutCallback timeout_cb_ ; RepeatingTaskHandle timeout_task_ ; Timestamp last_frame_ =)",
    "insertText": "MinusInfinity()"
  }
]