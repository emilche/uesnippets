[
  {
    "label": "TPerspectiveMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPerspectiveMatrix"
  },
  {
    "label": "TReversedZPerspectiveMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReversedZPerspectiveMatrix"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TPerspectiveMatrix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Plane . h \" # include \" Math / Matrix . h \" namespace UE { namespace Math { template<T> struct TPerspectiveMatrix : public TMatrix<T> { public : # define Z_PRECISION 0 . 0 f)",
    "insertText": "TPerspectiveMatrix(T HalfFOVX, T HalfFOVY, T MultFOVX, T MultFOVY, T MinZ, T MaxZ)"
  },
  {
    "label": "TPerspectiveMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPerspectiveMatrix(T HalfFOV, T Width, T Height, T MinZ, T MaxZ)"
  },
  {
    "label": "TPerspectiveMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPerspectiveMatrix(T HalfFOV, T Width, T Height, T MinZ)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TPerspectiveMatrix(const TPerspectiveMatrix<FArg>& From) : TMatrix<T>(From)"
  },
  {
    "label": "TReversedZPerspectiveMatrix()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TReversedZPerspectiveMatrix : public TMatrix<T> { public :)",
    "insertText": "TReversedZPerspectiveMatrix(T HalfFOVX, T HalfFOVY, T MultFOVX, T MultFOVY, T MinZ, T MaxZ)"
  },
  {
    "label": "TReversedZPerspectiveMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TReversedZPerspectiveMatrix(T HalfFOV, T Width, T Height, T MinZ, T MaxZ)"
  },
  {
    "label": "TReversedZPerspectiveMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TReversedZPerspectiveMatrix(T HalfFOV, T Width, T Height, T MinZ)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TReversedZPerspectiveMatrix(const TReversedZPerspectiveMatrix<FArg>& From) : TMatrix<T>(From)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (} } ; # ifdef _MSC_VER # pragma)",
    "insertText": "warning(push) #pragma warning (disable : 4723) #endif template<typename T> FORCEINLINE TPerspectiveMatrix<T>::TPerspectiveMatrix(T HalfFOVX, T HalfFOVY, T MultFOVX, T MultFOVY, T MinZ, T MaxZ) : TMatrix<T>( TPlane<T>(MultFOVX / FMath::Tan(HalfFOVX), 0.0f, 0.0f, 0.0f), TPlane<T>(0.0f, MultFOVY / FMath::Tan(HalfFOVY), 0.0f, 0.0f), TPlane<T>(0.0f, 0.0f, ((MinZ == MaxZ) ? (1.0f - Z_PRECISION) : MaxZ / (MaxZ - MinZ)), 1.0f), TPlane<T>(0.0f, 0.0f, -MinZ * ((MinZ == MaxZ) ? (1.0f - Z_PRECISION) : MaxZ / (MaxZ - MinZ)), 0.0f))"
  },
  {
    "label": "TPerspectiveMatrix()",
    "kind": "Method",
    "detail": "Function (} template<T> TPerspectiveMatrix<T)",
    "insertText": "TPerspectiveMatrix(T HalfFOV, T Width, T Height, T MinZ, T MaxZ) : TMatrix<T>( TPlane<T>(1.0f / FMath::Tan(HalfFOV), 0.0f, 0.0f, 0.0f), TPlane<T>(0.0f, Width / FMath::Tan(HalfFOV) / Height, 0.0f, 0.0f), TPlane<T>(0.0f, 0.0f, ((MinZ == MaxZ) ? (1.0f - Z_PRECISION) : MaxZ / (MaxZ - MinZ)), 1.0f), TPlane<T>(0.0f, 0.0f, -MinZ * ((MinZ == MaxZ) ? (1.0f - Z_PRECISION) : MaxZ / (MaxZ - MinZ)), 0.0f))"
  },
  {
    "label": "TPerspectiveMatrix()",
    "kind": "Method",
    "detail": "Function (} template<T> TPerspectiveMatrix<T)",
    "insertText": "TPerspectiveMatrix(T HalfFOV, T Width, T Height, T MinZ) : TMatrix<T>( TPlane<T>(1.0f / FMath::Tan(HalfFOV), 0.0f, 0.0f, 0.0f), TPlane<T>(0.0f, Width / FMath::Tan(HalfFOV) / Height, 0.0f, 0.0f), TPlane<T>(0.0f, 0.0f, (1.0f - Z_PRECISION), 1.0f), TPlane<T>(0.0f, 0.0f, -MinZ * (1.0f - Z_PRECISION), 0.0f))"
  },
  {
    "label": "TReversedZPerspectiveMatrix()",
    "kind": "Method",
    "detail": "Function (} template<T> TReversedZPerspectiveMatrix<T)",
    "insertText": "TReversedZPerspectiveMatrix(T HalfFOVX, T HalfFOVY, T MultFOVX, T MultFOVY, T MinZ, T MaxZ) : TMatrix<T>( TPlane<T>(MultFOVX / FMath::Tan(HalfFOVX), 0.0f, 0.0f, 0.0f), TPlane<T>(0.0f, MultFOVY / FMath::Tan(HalfFOVY), 0.0f, 0.0f), TPlane<T>(0.0f, 0.0f, ((MinZ == MaxZ) ? 0.0f : MinZ / (MinZ - MaxZ)), 1.0f), TPlane<T>(0.0f, 0.0f, ((MinZ == MaxZ) ? MinZ : -MaxZ * MinZ / (MinZ - MaxZ)), 0.0f))"
  },
  {
    "label": "TReversedZPerspectiveMatrix()",
    "kind": "Method",
    "detail": "Function (} template<T> TReversedZPerspectiveMatrix<T)",
    "insertText": "TReversedZPerspectiveMatrix(T HalfFOV, T Width, T Height, T MinZ, T MaxZ) : TMatrix<T>( TPlane<T>(1.0f / FMath::Tan(HalfFOV), 0.0f, 0.0f, 0.0f), TPlane<T>(0.0f, Width / FMath::Tan(HalfFOV) / Height, 0.0f, 0.0f), TPlane<T>(0.0f, 0.0f, ((MinZ == MaxZ) ? 0.0f : MinZ / (MinZ - MaxZ)), 1.0f), TPlane<T>(0.0f, 0.0f, ((MinZ == MaxZ) ? MinZ : -MaxZ * MinZ / (MinZ - MaxZ)), 0.0f))"
  },
  {
    "label": "TReversedZPerspectiveMatrix()",
    "kind": "Method",
    "detail": "Function (} template<T> TReversedZPerspectiveMatrix<T)",
    "insertText": "TReversedZPerspectiveMatrix(T HalfFOV, T Width, T Height, T MinZ) : TMatrix<T>( TPlane<T>(1.0f / FMath::Tan(HalfFOV), 0.0f, 0.0f, 0.0f), TPlane<T>(0.0f, Width / FMath::Tan(HalfFOV) / Height, 0.0f, 0.0f), TPlane<T>(0.0f, 0.0f, 0.0f, 1.0f), TPlane<T>(0.0f, 0.0f, MinZ, 0.0f))"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (} # ifdef _MSC_VER # pragma)",
    "insertText": "warning(pop) #endif } } UE_DECLARE_LWC_TYPE(PerspectiveMatrix, 44)"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_LWC_TYPE(ReversedZPerspectiveMatrix, 44)"
  }
]