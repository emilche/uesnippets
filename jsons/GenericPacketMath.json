[
  {
    "label": "default_packet_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "default_packet_traits"
  },
  {
    "label": "packet_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "packet_traits"
  },
  {
    "label": "unpacket_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unpacket_traits"
  },
  {
    "label": "type_casting_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "type_casting_traits"
  },
  {
    "label": "eigen_packet_wrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eigen_packet_wrapper"
  },
  {
    "label": "is_scalar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_scalar"
  },
  {
    "label": "ptrue_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ptrue_impl"
  },
  {
    "label": "pzero_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pzero_impl"
  },
  {
    "label": "bit_and",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bit_and"
  },
  {
    "label": "bit_or",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bit_or"
  },
  {
    "label": "bit_xor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bit_xor"
  },
  {
    "label": "bit_not",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bit_not"
  },
  {
    "label": "operator_bitwise_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "operator_bitwise_helper"
  },
  {
    "label": "bytewise_bitwise_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bytewise_bitwise_helper"
  },
  {
    "label": "bitwise_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bitwise_helper"
  },
  {
    "label": "pselect_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pselect_impl"
  },
  {
    "label": "pminmax_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pminmax_impl"
  },
  {
    "label": "PacketBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketBlock"
  },
  {
    "label": "Selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Selector"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GENERIC_PACKET_MATH_H # define EIGEN_GENERIC_PACKET_MATH_H namespace Eigen { namespace internal { # ifndef EIGEN_DEBUG_ALIGNED_LOAD # define EIGEN_DEBUG_ALIGNED_LOAD # endif # ifndef EIGEN_DEBUG_UNALIGNED_LOAD # define EIGEN_DEBUG_UNALIGNED_LOAD # endif # ifndef EIGEN_DEBUG_ALIGNED_STORE # define EIGEN_DEBUG_ALIGNED_STORE # endif # ifndef EIGEN_DEBUG_UNALIGNED_STORE # define EIGEN_DEBUG_UNALIGNED_STORE # endif struct default_packet_traits { enum { HasHalfPacket = 0,HasAdd = 1,HasSub = 1,HasShift = 1,HasMul = 1,HasNegate = 1,HasAbs = 1,HasArg = 0,HasAbs2 = 1,HasAbsDiff = 0,HasMin = 1,HasMax = 1,HasConj = 1,HasSetLinear = 1,HasBlend = 0,HasCmp = 0,HasDiv = 0,HasSqrt = 0,HasRsqrt = 0,HasExp = 0,HasExpm1 = 0,HasLog = 0,HasLog1p = 0,HasLog10 = 0,HasPow = 0,HasSin = 0,HasCos = 0,HasTan = 0,HasASin = 0,HasACos = 0,HasATan = 0,HasSinh = 0,HasCosh = 0,HasTanh = 0,HasLGamma = 0,HasDiGamma = 0,HasZeta = 0,HasPolygamma = 0,HasErf = 0,HasErfc = 0,HasNdtri = 0,HasBessel = 0,HasIGamma = 0,HasIGammaDerA = 0,HasGammaSampleDerAlpha = 0,HasIGammac = 0,HasBetaInc = 0,HasRound = 0,HasRint = 0,HasFloor = 0,HasCeil = 0,HasSign = 0 } ; } ; template<T> struct packet_traits : default_packet_traits { typedef T type ; typedef T half ; enum { Vectorizable = 0,size = 1,AlignedOnScalar = 0,HasHalfPacket = 0 } ; enum { HasAdd = 0,HasSub = 0,HasMul = 0,HasNegate = 0,HasAbs = 0,HasAbs2 = 0,HasMin = 0,HasMax = 0,HasConj = 0,HasSetLinear = 0 } ; } ; template<T> struct packet_traits<const T> : packet_traits<T> { } ; template<T> struct unpacket_traits { typedef T type ; typedef T half ; enum { size = 1,alignment = 1,vectorizable = false,masked_load_available = false,masked_store_available = false } ; } ; template<T> struct unpacket_traits<const T> : unpacket_traits<T> { } ; template<Src,Tgt> struct type_casting_traits { enum { VectorizedCast = 0,SrcCoeffRatio = 1,TgtCoeffRatio = 1 } ; } ; template<T,int unique_id = 0> struct eigen_packet_wrapper { EIGEN_ALWAYS_INLINE operator)",
    "insertText": "T()"
  },
  {
    "label": "eigen_packet_wrapper()",
    "kind": "Method",
    "detail": "Function (} EIGEN_ALWAYS_INLINE)",
    "insertText": "eigen_packet_wrapper(const T &v) : m_val(v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_ALWAYS_INLINE eigen_packet_wrapper&)",
    "insertText": "operator(const T &v)"
  },
  {
    "label": "pcast()",
    "kind": "Method",
    "detail": "Function (m_val = v ; return* this ; } T m_val ; } ; template<Packet> struct is_scalar { typedef unpacket_traits<Packet>::type Scalar ; enum { value = internal::is_same<Packet,Scalar>::value } ; } ; template<SrcPacket,TgtPacket> EIGEN_DEVICE_FUNC TgtPacket)",
    "insertText": "pcast(const SrcPacket& a)"
  },
  {
    "label": "pcast()",
    "kind": "Method",
    "detail": "Function (} template<SrcPacket,TgtPacket> EIGEN_DEVICE_FUNC TgtPacket)",
    "insertText": "pcast(const SrcPacket& a, const SrcPacket&)"
  },
  {
    "label": "pcast()",
    "kind": "Method",
    "detail": "Function (} template<SrcPacket,TgtPacket> EIGEN_DEVICE_FUNC TgtPacket)",
    "insertText": "pcast(const SrcPacket& a, const SrcPacket& , const SrcPacket& , const SrcPacket&)"
  },
  {
    "label": "pcast()",
    "kind": "Method",
    "detail": "Function (} template<SrcPacket,TgtPacket> EIGEN_DEVICE_FUNC TgtPacket)",
    "insertText": "pcast(const SrcPacket& a, const SrcPacket& , const SrcPacket& , const SrcPacket& , const SrcPacket& , const SrcPacket& , const SrcPacket& , const SrcPacket&)"
  },
  {
    "label": "preinterpret()",
    "kind": "Method",
    "detail": "Function (} template<Target,Packet> EIGEN_DEVICE_FUNC Target)",
    "insertText": "preinterpret(const Packet& a)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "padd(const Packet& a, const Packet& b)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pmul(const Packet& a, const Packet& b)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (Packet b ;)",
    "insertText": "memset(static_cast<void*>(&b), 0xff, sizeof(Packet))"
  },
  {
    "label": "ptrue()",
    "kind": "Method",
    "detail": "Function (} } ; template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "ptrue(const Packet& a)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<Packet,EnableIf = void> struct pzero_impl { EIGEN_DEVICE_FUNC Packet)",
    "insertText": "run(const Packet&)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (Packet b ;)",
    "insertText": "memset(static_cast<void*>(&b), 0x00, sizeof(Packet))"
  },
  {
    "label": "pzero()",
    "kind": "Method",
    "detail": "Function (} } ; template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pzero(const Packet& a)"
  },
  {
    "label": "pcmp_le()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pcmp_le(const Packet& a, const Packet& b)"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pcmp_lt(const Packet& a, const Packet& b)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pcmp_eq(const Packet& a, const Packet& b)"
  },
  {
    "label": "pcmp_lt_or_nan()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pcmp_lt_or_nan(const Packet& a, const Packet& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> struct bit_and { EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR EIGEN_ALWAYS_INLINE T)",
    "insertText": "operator()(const T& a, const T& b)"
  },
  {
    "label": "bitwise_or()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC T)",
    "insertText": "bitwise_or(const T& a, const T& b)"
  },
  {
    "label": "bitwise_xor()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC T)",
    "insertText": "bitwise_xor(const T& a, const T& b)"
  },
  {
    "label": "bitwise_not()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC T)",
    "insertText": "bitwise_not(const T& a)"
  },
  {
    "label": "bitwise_and()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct bytewise_bitwise_helper { EIGEN_DEVICE_FUNC T)",
    "insertText": "bitwise_and(const T& a, const T& b)"
  },
  {
    "label": "unary()",
    "kind": "Method",
    "detail": "Function (} private : template<Op> EIGEN_DEVICE_FUNC T)",
    "insertText": "unary(const T& a, Op op)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const unsigned char* a_ptr = reinterpret_cast<const unsigned)",
    "insertText": "char(&a)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (T c ; unsigned char* c_ptr = reinterpret_cast<unsigned)",
    "insertText": "char(&c)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (* c_ptr + + =)",
    "insertText": "op(*a_ptr++)"
  },
  {
    "label": "binary()",
    "kind": "Method",
    "detail": "Function (} return c ; } template<Op> EIGEN_DEVICE_FUNC T)",
    "insertText": "binary(const T& a, const T& b, Op op)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const unsigned char* b_ptr = reinterpret_cast<const unsigned)",
    "insertText": "char(&b)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (* c_ptr + + =)",
    "insertText": "op(*a_ptr++, *b_ptr++)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} return c ; } } ; template<T,EnableIf = void> struct bitwise_helper : public bytewise_bitwise_helper<T> { } ; template<T> struct bitwise_helper<T,internal::enable_if<is_scalar<T)",
    "insertText": "value(NumTraits<T>::IsInteger || NumTraits<T>::RequireInitialization)"
  },
  {
    "label": "pand()",
    "kind": "Method",
    "detail": "Function (} ; template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pand(const Packet& a, const Packet& b)"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "por(const Packet& a, const Packet& b)"
  },
  {
    "label": "pxor()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pxor(const Packet& a, const Packet& b)"
  },
  {
    "label": "pnot()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pnot(const Packet& a)"
  },
  {
    "label": "pandnot()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pandnot(const Packet& a, const Packet& b)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<Packet,EnableIf = void> struct pselect_impl { EIGEN_DEVICE_FUNC Packet)",
    "insertText": "run(const Packet& mask, const Packet& a, const Packet& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} } ; template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pselect(const Packet& mask, const Packet& a, const Packet& b)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC bool pselect<)",
    "insertText": "bool(const bool& cond, const bool& a, const bool& b)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct pminmax_impl<PropagateNaN> { template<Packet,Op> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "run(const Packet& a, const Packet& b, Op op)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (Packet not_nan_mask_a =)",
    "insertText": "pcmp_eq(a, a)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (Packet not_nan_mask_b =)",
    "insertText": "pcmp_eq(b, b)"
  },
  {
    "label": "EIGEN_BINARY_OP_NAN_PROPAGATION()",
    "kind": "Method",
    "detail": "Function (} } ; # ifndef SYCL_DEVICE_ONLY # define)",
    "insertText": "EIGEN_BINARY_OP_NAN_PROPAGATION(Type, Func) Func #else #define EIGEN_BINARY_OP_NAN_PROPAGATION(Type, Func) \\ [](const Type& a, const Type& b)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "Func(a, b)"
  },
  {
    "label": "pmin()",
    "kind": "Method",
    "detail": "Function (} # endif template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pmin(const Packet& a, const Packet& b)"
  },
  {
    "label": "pmax()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pmax(const Packet& a, const Packet& b)"
  },
  {
    "label": "pabs()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pabs(const Packet& a)"
  },
  {
    "label": "pabs()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC unsigned int)",
    "insertText": "pabs(const unsigned int& a)"
  },
  {
    "label": "parg()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "parg(const Packet& a)"
  },
  {
    "label": "arg()",
    "kind": "Method",
    "detail": "Function (using numext::arg ; return)",
    "insertText": "arg(a)"
  },
  {
    "label": "parithmetic_shift_right()",
    "kind": "Method",
    "detail": "Function (} template<int N> EIGEN_DEVICE_FUNC int)",
    "insertText": "parithmetic_shift_right(const int& a)"
  },
  {
    "label": "plogical_shift_right()",
    "kind": "Method",
    "detail": "Function (} template<int N> EIGEN_DEVICE_FUNC long int)",
    "insertText": "plogical_shift_right(const long int& a)"
  },
  {
    "label": "plogical_shift_left()",
    "kind": "Method",
    "detail": "Function (} template<int N> EIGEN_DEVICE_FUNC int)",
    "insertText": "plogical_shift_left(const int& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (int exp ;)",
    "insertText": "EIGEN_USING_STD(frexp)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet result = static_cast<)",
    "insertText": "Packet(frexp(a, &exp))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (exponent = static_cast<)",
    "insertText": "Packet(exp)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(ldexp) return static_cast<Packet>(ldexp(a, static_cast<int>(exponent)))"
  },
  {
    "label": "pabsdiff()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pabsdiff(const Packet& a, const Packet& b)"
  },
  {
    "label": "pload()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pload(const typename unpacket_traits<Packet>::type* from)"
  },
  {
    "label": "pset1()",
    "kind": "Method",
    "detail": "Function (template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pset1(const typename unpacket_traits<Packet>::type& a)"
  },
  {
    "label": "pload1()",
    "kind": "Method",
    "detail": "Function (template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pload1(const typename unpacket_traits<Packet>::type *a)"
  },
  {
    "label": "ploaddup()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "ploaddup(const typename unpacket_traits<Packet>::type* from)"
  },
  {
    "label": "pbroadcast4()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC void)",
    "insertText": "pbroadcast4(const typename unpacket_traits<Packet>::type *a, Packet& a0, Packet& a1, Packet& a2, Packet& a3)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (a0 = pload1<)",
    "insertText": "Packet(a+0)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (a1 = pload1<)",
    "insertText": "Packet(a+1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (a2 = pload1<)",
    "insertText": "Packet(a+2)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (a3 = pload1<)",
    "insertText": "Packet(a+3)"
  },
  {
    "label": "pbroadcast2()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC void)",
    "insertText": "pbroadcast2(const typename unpacket_traits<Packet>::type *a, Packet& a0, Packet& a1)"
  },
  {
    "label": "plset()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "plset(const typename unpacket_traits<Packet>::type& a)"
  },
  {
    "label": "EIGEN_ALIGN_TO_BOUNDARY()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; const size_t n = unpacket_traits<Packet>::size ;)",
    "insertText": "EIGEN_ALIGN_TO_BOUNDARY(sizeof(Packet))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(elements+i, ((i & 1) == 0 ? 0xff : 0), sizeof(Scalar))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (} return ploadu<)",
    "insertText": "Packet(elements)"
  },
  {
    "label": "pstore()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,Packet> EIGEN_DEVICE_FUNC void)",
    "insertText": "pstore(Scalar* to, const Packet& from)"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,Packet> EIGEN_DEVICE_FUNC void)",
    "insertText": "pstoreu(Scalar* to, const Packet& from)"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,Packet> EIGEN_DEVICE_FUNC enable_if<unpacket_traits<Packet>::masked_store_available,void>::type)",
    "insertText": "pstoreu(Scalar* to, const Packet& from, typename unpacket_traits<Packet>::mask_t umask)"
  },
  {
    "label": "pgather()",
    "kind": "Method",
    "detail": "Function (template<Scalar,Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pgather(const Scalar* from, Index)"
  },
  {
    "label": "pscatter()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,Packet> EIGEN_DEVICE_FUNC void)",
    "insertText": "pscatter(Scalar* to, const Packet& from, Index)"
  },
  {
    "label": "pstore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstore(to, from)"
  },
  {
    "label": "prefetch()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> EIGEN_DEVICE_FUNC void)",
    "insertText": "prefetch(const Scalar* addr)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_HIP_DEVICE_COMPILE) #elif defined(EIGEN_CUDA_ARCH) #if defined(__LP64__) || EIGEN_OS_WIN64 asm(\" prefetch.L1 [ %1 ];\" : \"=l\"(addr) : \"l\"(addr))"
  },
  {
    "label": "asm()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "asm(\" prefetch.L1 [ %1 ];\" : \"=r\"(addr) : \"r\"(addr))"
  },
  {
    "label": "elif()",
    "kind": "Method",
    "detail": "Function (# endif #)",
    "insertText": "elif(!EIGEN_COMP_MSVC) && (EIGEN_COMP_GNUC || EIGEN_COMP_CLANG || EIGEN_COMP_ICC) __builtin_prefetch(addr)"
  },
  {
    "label": "preverse()",
    "kind": "Method",
    "detail": "Function (# endif } template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "preverse(const Packet& a)"
  },
  {
    "label": "psin()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "psin(const Packet& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(sin)"
  },
  {
    "label": "pcos()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "pcos(const Packet& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(cos)"
  },
  {
    "label": "ptan()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "ptan(const Packet& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(tan)"
  },
  {
    "label": "pasin()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "pasin(const Packet& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(asin)"
  },
  {
    "label": "pacos()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "pacos(const Packet& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(acos)"
  },
  {
    "label": "patan()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "patan(const Packet& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(atan)"
  },
  {
    "label": "psinh()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "psinh(const Packet& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(sinh)"
  },
  {
    "label": "pcosh()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "pcosh(const Packet& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(cosh)"
  },
  {
    "label": "ptanh()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "ptanh(const Packet& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(tanh)"
  },
  {
    "label": "pexp()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "pexp(const Packet& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(exp)"
  },
  {
    "label": "pexpm1()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "pexpm1(const Packet& a)"
  },
  {
    "label": "plog()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "plog(const Packet& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(log)"
  },
  {
    "label": "plog1p()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "plog1p(const Packet& a)"
  },
  {
    "label": "plog10()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "plog10(const Packet& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(log10)"
  },
  {
    "label": "plog2()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "plog2(const Packet& a)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (typedef internal::unpacket_traits<Packet>::type Scalar ; return)",
    "insertText": "pmul(pset1<Packet>(Scalar(EIGEN_LOG2E)), plog(a))"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "psqrt(const Packet& a)"
  },
  {
    "label": "prsqrt()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "prsqrt(const Packet& a)"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (typedef internal::unpacket_traits<Packet>::type Scalar ; return)",
    "insertText": "pdiv(pset1<Packet>(Scalar(1)), psqrt(a))"
  },
  {
    "label": "pround()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "pround(const Packet& a)"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (using numext::round ; return)",
    "insertText": "round(a)"
  },
  {
    "label": "pfloor()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "pfloor(const Packet& a)"
  },
  {
    "label": "floor()",
    "kind": "Method",
    "detail": "Function (using numext::floor ; return)",
    "insertText": "floor(a)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "print(const Packet& a)"
  },
  {
    "label": "rint()",
    "kind": "Method",
    "detail": "Function (using numext::rint ; return)",
    "insertText": "rint(a)"
  },
  {
    "label": "pceil()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "pceil(const Packet& a)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (using numext::ceil ; return)",
    "insertText": "ceil(a)"
  },
  {
    "label": "pfirst()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC unpacket_traits<Packet>::type)",
    "insertText": "pfirst(const Packet& a)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (pstoreu<)",
    "insertText": "Scalar(elements, a)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (elements [ i ] =)",
    "insertText": "op(elements[i], elements[i + k])"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (} } return elements [ 0 ] ; } template<Packet> EIGEN_DEVICE_FUNC unpacket_traits<Packet>::type)",
    "insertText": "predux(const Packet& a)"
  },
  {
    "label": "predux_helper()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; return)",
    "insertText": "predux_helper(a, EIGEN_BINARY_OP_NAN_PROPAGATION(Scalar, (pmul<Scalar>)))"
  },
  {
    "label": "predux_min()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC unpacket_traits<Packet>::type)",
    "insertText": "predux_min(const Packet &a)"
  },
  {
    "label": "predux_helper()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; return)",
    "insertText": "predux_helper(a, EIGEN_BINARY_OP_NAN_PROPAGATION(Scalar, (pmin<PropagateFast, Scalar>)))"
  },
  {
    "label": "predux_min()",
    "kind": "Method",
    "detail": "Function (} template<int NaNPropagation,Packet> EIGEN_DEVICE_FUNC unpacket_traits<Packet>::type)",
    "insertText": "predux_min(const Packet& a)"
  },
  {
    "label": "predux_helper()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; return)",
    "insertText": "predux_helper(a, EIGEN_BINARY_OP_NAN_PROPAGATION(Scalar, (pmin<NaNPropagation, Scalar>)))"
  },
  {
    "label": "predux_max()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC unpacket_traits<Packet>::type)",
    "insertText": "predux_max(const Packet &a)"
  },
  {
    "label": "predux_helper()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; return)",
    "insertText": "predux_helper(a, EIGEN_BINARY_OP_NAN_PROPAGATION(Scalar, (pmax<PropagateFast, Scalar>)))"
  },
  {
    "label": "predux_max()",
    "kind": "Method",
    "detail": "Function (} template<int NaNPropagation,Packet> EIGEN_DEVICE_FUNC unpacket_traits<Packet>::type)",
    "insertText": "predux_max(const Packet& a)"
  },
  {
    "label": "predux_helper()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; return)",
    "insertText": "predux_helper(a, EIGEN_BINARY_OP_NAN_PROPAGATION(Scalar, (pmax<NaNPropagation, Scalar>)))"
  },
  {
    "label": "predux_any()",
    "kind": "Method",
    "detail": "Function (} # undef EIGEN_BINARY_OP_NAN_PROPAGATION template<Packet> EIGEN_DEVICE_FUNC bool)",
    "insertText": "predux_any(const Packet& a)"
  },
  {
    "label": "not_equal_strict()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; return)",
    "insertText": "not_equal_strict(predux(a), Scalar(0))"
  },
  {
    "label": "pstore1()",
    "kind": "Method",
    "detail": "Function (} template<Packet> void)",
    "insertText": "pstore1(typename unpacket_traits<Packet>::type* to, const typename unpacket_traits<Packet>::type& a)"
  },
  {
    "label": "pstore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstore(to, pset1<Packet>(a))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pmadd(const Packet& a, const Packet& b, const Packet& c)"
  },
  {
    "label": "ploadt()",
    "kind": "Method",
    "detail": "Function (} template<Packet,int Alignment> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Packet)",
    "insertText": "ploadt(const typename unpacket_traits<Packet>::type* from)"
  },
  {
    "label": "pstoret()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,Packet,int Alignment> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "pstoret(Scalar* to, const Packet& from)"
  },
  {
    "label": "ploadt_ro()",
    "kind": "Method",
    "detail": "Function (} template<Packet,int LoadMode> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Packet)",
    "insertText": "ploadt_ro(const typename unpacket_traits<Packet>::type* from)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(EIGEN_GPUCC) template<> inline std::complex<float> pmul(const std::complex<float>& a, const std::complex<float>& b)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (} template<> std::complex<double>)",
    "insertText": "pmul(const std::complex<double>& a, const std::complex<double>& b)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} # endif template<Packet,int N = unpacket_traits<Packet>::size> struct PacketBlock { Packet packet [ N ] ; } ; template<Packet> EIGEN_DEVICE_FUNC void)",
    "insertText": "ptranspose(PacketBlock<Packet,1>&)"
  },
  {
    "label": "pblend()",
    "kind": "Method",
    "detail": "Function (} template<size_t N> struct Selector { bool select [ N ] ; } ; template<Packet> EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pblend(const Selector<unpacket_traits<Packet>::size>& ifPacket, const Packet& thenPacket, const Packet& elsePacket)"
  }
]