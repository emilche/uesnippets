[
  {
    "label": "Node",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Node"
  },
  {
    "label": "CAstNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAstNode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "fields",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fields"
  },
  {
    "label": "exists",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "exists"
  },
  {
    "label": "scope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scope"
  },
  {
    "label": "inherits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "inherits"
  },
  {
    "label": "inherits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "inherits"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "must",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "must"
  },
  {
    "label": "must",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "must"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SDiagnosticInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDiagnosticInfo"
  },
  {
    "label": "SGlitchResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SGlitchResult"
  },
  {
    "label": "SGlitchLocus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SGlitchLocus"
  },
  {
    "label": "SGlitch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SGlitch"
  },
  {
    "label": "GetDiagnosticFromReferenceCode()",
    "kind": "Method",
    "detail": "Function (EDiagnostic)",
    "insertText": "GetDiagnosticFromReferenceCode(uint16_t ReferenceCode)"
  },
  {
    "label": "SGlitchResult()",
    "kind": "Method",
    "detail": "Function (VERSECOMPILER_API)",
    "insertText": "SGlitchResult(EDiagnostic ResultId)"
  },
  {
    "label": "GetDiagnosticInfo()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetDiagnosticInfo(_Id)"
  },
  {
    "label": "SGlitchLocus()",
    "kind": "Method",
    "detail": "Function (VERSECOMPILER_API)",
    "insertText": "SGlitchLocus(const Verse::Vst::Node* VstNode)"
  },
  {
    "label": "SGlitchLocus()",
    "kind": "Method",
    "detail": "Function (VERSECOMPILER_API)",
    "insertText": "SGlitchLocus(const CAstNode* AstNode)"
  },
  {
    "label": "FormattedString()",
    "kind": "Method",
    "detail": "Function (CUTF8String)",
    "insertText": "FormattedString(const char* Message, const char* Path, const STextRange& Range, EDiagnosticSeverity Severity = EDiagnosticSeverity::Error, EDiagnostic Diagnostic = EDiagnostic::Ok)"
  },
  {
    "label": "ScanToRowCol()",
    "kind": "Method",
    "detail": "Function (TOptional<int32_t>)",
    "insertText": "ScanToRowCol(CUTF8StringView const& Source, const STextPosition& Position)"
  },
  {
    "label": "TextRangeToStringView()",
    "kind": "Method",
    "detail": "Function (CUTF8StringView)",
    "insertText": "TextRangeToStringView(CUTF8StringView const& Source, STextRange const& Range)"
  }
]