[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "EncoderContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncoderContext"
  },
  {
    "label": "StreamContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamContext"
  },
  {
    "label": "SimulcastEncoderAdapter()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_ENGINE_SIMULCAST_ENCODER_ADAPTER_H_ # define MEDIA_ENGINE_SIMULCAST_ENCODER_ADAPTER_H_ # include<atomic> # include<list> # include<memory> # include<stack> # include<string> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / fec_controller_override . h \" # include \" api / sequence_checker . h \" # include \" api / video_codecs / sdp_video_format . h \" # include \" api / video_codecs / video_encoder . h \" # include \" api / video_codecs / video_encoder_factory . h \" # include \" common_video / framerate_controller . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" rtc_base / experiments / encoder_info_settings . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class RTC_EXPORT SimulcastEncoderAdapter : public VideoEncoder { public :)",
    "insertText": "SimulcastEncoderAdapter(VideoEncoderFactory* primarty_factory, const SdpVideoFormat& format)"
  },
  {
    "label": "SimulcastEncoderAdapter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulcastEncoderAdapter(VideoEncoderFactory* primary_factory, VideoEncoderFactory* fallback_factory, const SdpVideoFormat& format)"
  },
  {
    "label": "SimulcastEncoderAdapter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimulcastEncoderAdapter()"
  },
  {
    "label": "SetFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecControllerOverride(FecControllerOverride* fec_controller_override)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Release()"
  },
  {
    "label": "InitEncode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitEncode(const VideoCodec* codec_settings, const VideoEncoder::Settings& settings)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Encode(const VideoFrame& input_image, const std::vector<VideoFrameType>* frame_types)"
  },
  {
    "label": "RegisterEncodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RegisterEncodeCompleteCallback(EncodedImageCallback* callback)"
  },
  {
    "label": "SetRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRates(const RateControlParameters& parameters)"
  },
  {
    "label": "OnPacketLossRateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketLossRateUpdate(float packet_loss_rate)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(int64_t rtt_ms)"
  },
  {
    "label": "OnLossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLossNotification(const LossNotification& loss_notification)"
  },
  {
    "label": "GetEncoderInfo()",
    "kind": "Method",
    "detail": "Function (EncoderInfo)",
    "insertText": "GetEncoderInfo()"
  },
  {
    "label": "EncoderContext()",
    "kind": "Method",
    "detail": "Function (private : class EncoderContext { public :)",
    "insertText": "EncoderContext(std::unique_ptr<VideoEncoder> encoder, bool prefer_temporal_support, VideoEncoder::EncoderInfo primary_info, VideoEncoder::EncoderInfo fallback_info)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EncoderContext&)",
    "insertText": "operator(EncoderContext&&)"
  },
  {
    "label": "encoder()",
    "kind": "Method",
    "detail": "Function (VideoEncoder&)",
    "insertText": "encoder()"
  },
  {
    "label": "PrimaryInfo()",
    "kind": "Method",
    "detail": "Function (const VideoEncoder::EncoderInfo&)",
    "insertText": "PrimaryInfo()"
  },
  {
    "label": "StreamContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamContext(StreamContext&& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StreamContext&)",
    "insertText": "operator(StreamContext&&)"
  },
  {
    "label": "StreamContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StreamContext()"
  },
  {
    "label": "OnEncodedImage()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "OnEncodedImage(const EncodedImage& encoded_image, const CodecSpecificInfo* codec_specific_info)"
  },
  {
    "label": "OnDroppedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDroppedFrame(DropReason reason)"
  },
  {
    "label": "stream_idx()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "stream_idx()"
  },
  {
    "label": "is_paused()",
    "kind": "Method",
    "detail": "Function (is_keyframe_needed_ = true ; } bool)",
    "insertText": "is_paused()"
  },
  {
    "label": "target_fps()",
    "kind": "Method",
    "detail": "Function (is_paused_ = is_paused ; } absl::optional<double>)",
    "insertText": "target_fps()"
  },
  {
    "label": "ReleaseEncoderContext()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<EncoderContext>)",
    "insertText": "ReleaseEncoderContext()"
  },
  {
    "label": "OnKeyframe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeyframe(Timestamp timestamp)"
  },
  {
    "label": "ShouldDropFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDropFrame(Timestamp timestamp)"
  },
  {
    "label": "Initialized()",
    "kind": "Method",
    "detail": "Function (private : SimulcastEncoderAdapter* const parent_ ; std::unique_ptr<EncoderContext> encoder_context_ ; std::unique_ptr<FramerateController> framerate_controller_ ; const int stream_idx_ ; const uint16_t width_ ; const uint16_t height_ ; bool is_keyframe_needed_ ; bool is_paused_ ; } ; bool)",
    "insertText": "Initialized()"
  },
  {
    "label": "DestroyStoredEncoders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyStoredEncoders()"
  },
  {
    "label": "FetchOrCreateEncoderContext()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<EncoderContext>)",
    "insertText": "FetchOrCreateEncoderContext(bool is_lowest_quality_stream)"
  },
  {
    "label": "MakeStreamCodec()",
    "kind": "Method",
    "detail": "Function (webrtc::VideoCodec)",
    "insertText": "MakeStreamCodec(const webrtc::VideoCodec& codec, int stream_idx, uint32_t start_bitrate_kbps, bool is_lowest_quality_stream, bool is_highest_quality_stream)"
  },
  {
    "label": "OnEncodedImage()",
    "kind": "Method",
    "detail": "Function (EncodedImageCallback::Result)",
    "insertText": "OnEncodedImage(size_t stream_idx, const EncodedImage& encoded_image, const CodecSpecificInfo* codec_specific_info)"
  },
  {
    "label": "OnDroppedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDroppedFrame(size_t stream_idx)"
  },
  {
    "label": "OverrideFromFieldTrial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideFromFieldTrial(VideoEncoder::EncoderInfo* info)"
  }
]