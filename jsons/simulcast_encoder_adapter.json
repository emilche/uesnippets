[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "EncoderContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncoderContext"
  },
  {
    "label": "StreamContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamContext"
  },
  {
    "label": "EncoderContext()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "EncoderContext(std::unique_ptr<VideoEncoder> encoder,\n                   bool prefer_temporal_support,\n                   VideoEncoder::EncoderInfo primary_info,\n                   VideoEncoder::EncoderInfo fallback_info)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "StreamContext()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "StreamContext(SimulcastEncoderAdapter* parent,\n                  std::unique_ptr<EncoderContext> encoder_context,\n                  std::unique_ptr<FramerateController> framerate_controller,\n                  int stream_idx,\n                  uint16_t width,\n                  uint16_t height,\n                  bool send_stream)"
  },
  {
    "label": "OnKeyframe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeyframe(Timestamp timestamp)"
  },
  {
    "label": "ShouldDropFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDropFrame(Timestamp timestamp)"
  },
  {
    "label": "DestroyStoredEncoders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyStoredEncoders()"
  },
  {
    "label": "MakeStreamCodec()",
    "kind": "Method",
    "detail": "Function (webrtc::VideoCodec)",
    "insertText": "MakeStreamCodec(const webrtc::VideoCodec& codec,\n                                     int stream_idx,\n                                     uint32_t start_bitrate_kbps,\n                                     bool is_lowest_quality_stream,\n                                     bool is_highest_quality_stream)"
  },
  {
    "label": "OnEncodedImage()",
    "kind": "Method",
    "detail": "Function (EncodedImageCallback::Result)",
    "insertText": "OnEncodedImage(\n      size_t stream_idx,\n      const EncodedImage& encoded_image,\n      const CodecSpecificInfo* codec_specific_info)"
  },
  {
    "label": "OnDroppedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDroppedFrame(size_t stream_idx)"
  }
]