[
  {
    "label": "FSoundQualityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundQualityInfo"
  },
  {
    "label": "IAudioFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioFormat"
  },
  {
    "label": "FSeekTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSeekTable"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Algo / IndexOf . h \" # include \" Features / IModularFeatures . h \" # include \" Features / IModularFeature . h \" struct FSoundQualityInfo { int32 Quality ; uint32 NumChannels ; uint32 SampleRate ; uint32 SampleDataSize ; float Duration ; bool bStreaming ; FString DebugName ; } ; class IAudioFormat : public IModularFeature { public : FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "Name(TEXT(\"IAudioFormat\"))"
  },
  {
    "label": "CookSurround()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CookSurround(FName Format, const TArray<TArray<uint8> >& SrcBuffers, FSoundQualityInfo& QualityInfo, TArray<uint8>& OutBuffer)"
  },
  {
    "label": "GetSupportedFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSupportedFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetVersion()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetVersion(FName Format)"
  },
  {
    "label": "Recompress()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Recompress(FName Format, const TArray<uint8>& SrcBuffer, FSoundQualityInfo& QualityInfo, TArray<uint8>& OutBuffer)"
  },
  {
    "label": "GetMinimumSizeForInitialChunk()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMinimumSizeForInitialChunk(FName Format, const TArray<uint8>& SrcBuffer)"
  },
  {
    "label": "GetSupportedSampleRates()",
    "kind": "Method",
    "detail": "Function (const TConstArrayView<int32> SupportedRates =)",
    "insertText": "GetSupportedSampleRates()"
  },
  {
    "label": "IsChannelCountSupported()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "IsChannelCountSupported(const int32 InChannelCount)"
  },
  {
    "label": "GetSupportedChannelCounts()",
    "kind": "Method",
    "detail": "Function (const TConstArrayView<int32> SupportedCounts =)",
    "insertText": "GetSupportedChannelCounts()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().RegisterModularFeature(GetModularFeatureName(), this)"
  },
  {
    "label": "IAudioFormat()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IAudioFormat()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().UnregisterModularFeature(GetModularFeatureName(), this)"
  }
]