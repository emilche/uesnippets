[
  {
    "label": "FTimespan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimespan"
  },
  {
    "label": "FLiveLinkLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLiveLinkLog"
  },
  {
    "label": "ENABLE_LIVELINK_LOGGING()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" LiveLinkTypes . h \" # include \" Logging / TokenizedMessage . h \" # include \" Templates / IsArrayOrRefOfTypeByPredicate . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" struct FTimespan ; # define)",
    "insertText": "ENABLE_LIVELINK_LOGGING(!NO_LOGGING && !UE_BUILD_TEST)"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (public : template<FormatType,. . . ArgsType> void)",
    "insertText": "Error(const FormatType& Format, ArgsType... Args)"
  },
  {
    "label": "Log_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log_Internal(EMessageSeverity::Error, NAME_None, FLiveLinkSubjectKey(), Format, Args...)"
  },
  {
    "label": "ErrorOnce()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . ArgsType> void)",
    "insertText": "ErrorOnce(FName MessageID, const FLiveLinkSubjectKey& SubjectKey, const FormatType& Format, ArgsType... Args)"
  },
  {
    "label": "Log_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log_Internal(EMessageSeverity::Error, MessageID, SubjectKey, Format, Args...)"
  },
  {
    "label": "Warning()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . ArgsType> void)",
    "insertText": "Warning(const FormatType& Format, ArgsType... Args)"
  },
  {
    "label": "Log_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log_Internal(EMessageSeverity::Warning, NAME_None, FLiveLinkSubjectKey(), Format, Args...)"
  },
  {
    "label": "WarningOnce()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . ArgsType> void)",
    "insertText": "WarningOnce(FName MessageID, const FLiveLinkSubjectKey& SubjectKey, const FormatType& Format, ArgsType... Args)"
  },
  {
    "label": "Log_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log_Internal(EMessageSeverity::Warning, MessageID, SubjectKey, Format, Args...)"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . ArgsType> void)",
    "insertText": "Info(const FormatType& Format, ArgsType... Args)"
  },
  {
    "label": "Log_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log_Internal(EMessageSeverity::Info, NAME_None, FLiveLinkSubjectKey(), Format, Args...)"
  },
  {
    "label": "InfoOnce()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . ArgsType> void)",
    "insertText": "InfoOnce(FName MessageID, const FLiveLinkSubjectKey& SubjectKey, const FormatType& Format, ArgsType... Args)"
  },
  {
    "label": "Log_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log_Internal(EMessageSeverity::Info, MessageID, SubjectKey, Format, Args...)"
  },
  {
    "label": "TokenizedMessage()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . ArgsType> TSharedPtr<FTokenizedMessage>)",
    "insertText": "TokenizedMessage(EMessageSeverity::Type Severity, const FormatType& Format, ArgsType... Args)"
  },
  {
    "label": "TokenizedMessageOnce()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . ArgsType> TSharedPtr<FTokenizedMessage>)",
    "insertText": "TokenizedMessageOnce(EMessageSeverity::Type Severity, FName MessageID, const FLiveLinkSubjectKey& SubjectKey, const FormatType& Format, ArgsType... Args)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (} FLiveLinkLog*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "FLiveLinkLog()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "FLiveLinkLog()"
  },
  {
    "label": "GetOccurrence()",
    "kind": "Method",
    "detail": "Function (TPair<int32,FTimespan>)",
    "insertText": "GetOccurrence(FName MessageID, FLiveLinkSubjectKey SubjectKey)"
  },
  {
    "label": "GetSelectedOccurrence()",
    "kind": "Method",
    "detail": "Function (TPair<int32,FTimespan>)",
    "insertText": "GetSelectedOccurrence()"
  },
  {
    "label": "GetLogCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLogCount(int32& OutErrorCount, int32& OutWarningCount, int32& OutInfoCount)"
  },
  {
    "label": "Log_Internal()",
    "kind": "Method",
    "detail": "Function (private : template<FormatType,. . . ArgsType> void)",
    "insertText": "Log_Internal(EMessageSeverity::Type Severity, FName MessageID, const FLiveLinkSubjectKey& SubjectKey, const FormatType& Format, ArgsType... Args)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_LIVELINK_LOGGING)",
    "insertText": "if(Instance)"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (Instance ->)",
    "insertText": "LogMessage(Severity, MessageID, SubjectKey, FString::Printf(Format, Args...))"
  },
  {
    "label": "CreateTokenizedMessage_Internal()",
    "kind": "Method",
    "detail": "Function (} # endif } template<FormatType,. . . ArgsType> TSharedPtr<FTokenizedMessage>)",
    "insertText": "CreateTokenizedMessage_Internal(EMessageSeverity::Type Severity, FName MessageID, const FLiveLinkSubjectKey& SubjectKey, const FormatType& Format, ArgsType... Args)"
  },
  {
    "label": "FTokenizedMessage()",
    "kind": "Method",
    "detail": "Function (} # endif return TSharedPtr<)",
    "insertText": "FTokenizedMessage()"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "LogMessage(EMessageSeverity::Type Severity, FName MessageID, const FLiveLinkSubjectKey& SubjectKey, FString&& Message)"
  },
  {
    "label": "CreateTokenizedMessage()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTokenizedMessage>)",
    "insertText": "CreateTokenizedMessage(EMessageSeverity::Type Severity, FName MessageID, const FLiveLinkSubjectKey& SubjectKey, FString&& Message)"
  }
]