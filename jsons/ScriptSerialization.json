[
  {
    "label": "SerializeExpr()",
    "kind": "Method",
    "detail": "Function (# include \" HAL / Platform . h \" # ifdef VISUAL_ASSIST_HACK EExprToken)",
    "insertText": "SerializeExpr(int32&, FArchive&)"
  },
  {
    "label": "Expr()",
    "kind": "Method",
    "detail": "Function (int32 iCode = 0 ; FNullArchive Ar ; TArray<uint8> Script ; EExprToken)",
    "insertText": "Expr(EExprToken)"
  },
  {
    "label": "XFER()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef XFER # define)",
    "insertText": "XFER(T)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ T Temp ; \\)",
    "insertText": "if(!Ar.IsLoading())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (\\ Temp = FPlatformMemory::ReadUnaligned<)",
    "insertText": "T(&Script[iCode])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ Ar<<Temp ; \\)",
    "insertText": "if(!Ar.IsSaving())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (\\ FPlatformMemory::WriteUnaligned<)",
    "insertText": "T(&Script[iCode], Temp)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (\\ } \\ iCode + =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "XFERNAME()",
    "kind": "Method",
    "detail": "Function (\\ } # endif # ifndef XFERNAME # define)",
    "insertText": "XFERNAME()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Memcpy(&ScriptName, &Script[iCode], sizeof(FScriptName))"
  },
  {
    "label": "ScriptNameToName()",
    "kind": "Method",
    "detail": "Function (\\ Name =)",
    "insertText": "ScriptNameToName(ScriptName)"
  },
  {
    "label": "NameToScriptName()",
    "kind": "Method",
    "detail": "Function (\\ ScriptName =)",
    "insertText": "NameToScriptName(Name)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Memcpy(&Script[iCode], &ScriptName, sizeof(FScriptName))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (\\ } \\ iCode + =)",
    "insertText": "sizeof(FScriptName)"
  },
  {
    "label": "XFERSTRING()",
    "kind": "Method",
    "detail": "Function (\\ } # endif # ifndef XFERSTRING # define)",
    "insertText": "XFERSTRING()"
  },
  {
    "label": "XFER()",
    "kind": "Method",
    "detail": "Function (\\ do)",
    "insertText": "XFER(uint8) while( Script[iCode-1])"
  },
  {
    "label": "XFERUNICODESTRING()",
    "kind": "Method",
    "detail": "Function (\\ } # endif # ifndef XFERUNICODESTRING # define)",
    "insertText": "XFERUNICODESTRING()"
  },
  {
    "label": "XFER()",
    "kind": "Method",
    "detail": "Function (\\ do)",
    "insertText": "XFER(uint16) while( Script[iCode-1] || Script[iCode-2])"
  },
  {
    "label": "XFERTEXT()",
    "kind": "Method",
    "detail": "Function (\\ } # endif # ifndef XFERTEXT # define)",
    "insertText": "XFERTEXT()"
  },
  {
    "label": "XFER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "XFER(uint8)"
  },
  {
    "label": "TextLiteralType()",
    "kind": "Method",
    "detail": "Function (\\ const EBlueprintTextLiteralType)",
    "insertText": "TextLiteralType(EBlueprintTextLiteralType)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "switch(TextLiteralType)"
  },
  {
    "label": "SerializeExpr()",
    "kind": "Method",
    "detail": "Function (\\ case EBlueprintTextLiteralType::Empty : \\ break ; \\ case EBlueprintTextLiteralType::LocalizedText : \\)",
    "insertText": "SerializeExpr(iCode, Ar)"
  },
  {
    "label": "XFER_OBJECT_POINTER()",
    "kind": "Method",
    "detail": "Function (\\ break ; \\ case EBlueprintTextLiteralType::StringTableEntry : \\)",
    "insertText": "XFER_OBJECT_POINTER(UObject*)"
  },
  {
    "label": "FIXUP_EXPR_OBJECT_POINTER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "FIXUP_EXPR_OBJECT_POINTER(UObject*)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (\\ break ; \\ default : \\)",
    "insertText": "checkf(false, TEXT(\"Unknown EBlueprintTextLiteralType! Please update XFERTEXT to handle this type of text.\"))"
  },
  {
    "label": "XFERPTR()",
    "kind": "Method",
    "detail": "Function (\\ break ; \\ } \\ } # endif # ifndef XFERPTR # define)",
    "insertText": "XFERPTR(T)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Memcpy(&TempCode, &Script[iCode], sizeof(ScriptPointerType))"
  },
  {
    "label": "AlignedPtr()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AlignedPtr(T)(TempCode)"
  },
  {
    "label": "TempCode()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TempCode(ScriptPointerType)(AlignedPtr)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Memcpy(&Script[iCode], &TempCode, sizeof(ScriptPointerType))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (\\ } \\ iCode + =)",
    "insertText": "sizeof(ScriptPointerType)"
  },
  {
    "label": "XFERTOBJPTR()",
    "kind": "Method",
    "detail": "Function (\\ } # endif # ifndef XFERTOBJPTR # define)",
    "insertText": "XFERTOBJPTR()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Memcpy(&AlignedPtr, &Script[iCode], sizeof(ScriptPointerType))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Memcpy(&Script[iCode], &AlignedPtr, sizeof(ScriptPointerType))"
  },
  {
    "label": "XFERPTR()",
    "kind": "Method",
    "detail": "Function (\\ } # endif # ifndef XFER_FUNC_POINTER # define XFER_FUNC_POINTER)",
    "insertText": "XFERPTR(UStruct*) #endif #ifndef XFER_FUNC_NAME #define XFER_FUNC_NAME XFERNAME() #endif #ifndef XFER_PROP_POINTER #define XFER_PROP_POINTER XFERPTR(FProperty*) #endif #ifndef XFER_OBJECT_POINTER #define XFER_OBJECT_POINTER(Type) XFERPTR(Type) #endif #ifndef XFER_TOBJECT_PTR #define XFER_TOBJECT_PTR XFERTOBJPTR #endif #ifndef FIXUP_EXPR_OBJECT_POINTER #define FIXUP_EXPR_OBJECT_POINTER(Type) #endif #ifdef SERIALIZEEXPR_INC EExprToken Expr=(EExprToken)"
  },
  {
    "label": "XFER_OBJECT_POINTER()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_ObjToInterfaceCast : case EX_CrossInterfaceCast : case EX_InterfaceToObjCast : {)",
    "insertText": "XFER_OBJECT_POINTER(UClass*)"
  },
  {
    "label": "FIXUP_EXPR_OBJECT_POINTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIXUP_EXPR_OBJECT_POINTER(UClass*)"
  },
  {
    "label": "XFERPTR()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_StructMemberContext : {)",
    "insertText": "XFERPTR(FProperty*)"
  },
  {
    "label": "XFER()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_Jump : {)",
    "insertText": "XFER(CodeSkipSizeType)"
  },
  {
    "label": "SerializeExpr()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_LocalVariable : case EX_InstanceVariable : case EX_DefaultVariable : case EX_LocalOutVariable : case EX_ClassSparseDataVariable : case EX_PropertyConst : { XFER_PROP_POINTER ; break ; } case EX_InterfaceContext : {)",
    "insertText": "SerializeExpr(iCode,Ar)"
  },
  {
    "label": "XFER()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_NothingInt32 : {)",
    "insertText": "XFER(int32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_Nothing : case EX_EndOfScript : case EX_EndFunctionParms : case EX_EndStructConst : case EX_EndArray : case EX_EndArrayConst : case EX_EndSet : case EX_EndMap : case EX_EndSetConst : case EX_EndMapConst : case EX_IntZero : case EX_IntOne : case EX_True : case EX_False : case EX_NoObject : case EX_NoInterface : case EX_Self : case EX_EndParmValue : case EX_PopExecutionFlow : case EX_DeprecatedOp4A : { break ; } case EX_WireTracepoint : case EX_Tracepoint : { break ; } case EX_Breakpoint : {)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Script [ iCode - 1 ] = EX_Tracepoint ; } break ; } case EX_InstrumentationEvent : {)",
    "insertText": "if(Script[iCode] == EScriptInstrumentation::InlineEvent)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} iCode + =)",
    "insertText": "sizeof(uint8)"
  },
  {
    "label": "FIXUP_EXPR_OBJECT_POINTER()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_CallMath : case EX_LocalFinalFunction : case EX_FinalFunction : { XFER_FUNC_POINTER ;)",
    "insertText": "FIXUP_EXPR_OBJECT_POINTER(UStruct*)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_LocalVirtualFunction : case EX_VirtualFunction : { XFER_FUNC_NAME ;)",
    "insertText": "while(SerializeExpr( iCode, Ar ) != EX_EndFunctionParms)"
  },
  {
    "label": "XFERPTR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XFERPTR(FField*)"
  },
  {
    "label": "XFER()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_Int64Const : {)",
    "insertText": "XFER(int64)"
  },
  {
    "label": "XFER()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_UInt64Const : {)",
    "insertText": "XFER(uint64)"
  },
  {
    "label": "XFER()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_FloatConst : {)",
    "insertText": "XFER(float)"
  },
  {
    "label": "XFER()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_DoubleConst : {)",
    "insertText": "XFER(double)"
  },
  {
    "label": "XFER_TOBJECT_PTR()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_ObjectConst : {)",
    "insertText": "XFER_TOBJECT_PTR()"
  },
  {
    "label": "FIXUP_EXPR_OBJECT_POINTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIXUP_EXPR_OBJECT_POINTER(TObjectPtr<UObject>)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_SoftObjectConst : {)",
    "insertText": "if(Ar.IsSaving() && Ar.IsObjectReferenceCollector())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString LongPath ;)",
    "insertText": "if(Expr == EX_StringConst)"
  },
  {
    "label": "LongPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LongPath(ANSICHAR*)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} else { LongPath =)",
    "insertText": "FString((UCS2CHAR*)&Script[iCode])"
  },
  {
    "label": "InlineCombineSurrogates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InlineCombineSurrogates(LongPath)"
  },
  {
    "label": "Path()",
    "kind": "Method",
    "detail": "Function (} FSoftObjectPath)",
    "insertText": "Path(LongPath)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_RotationConst : {)",
    "insertText": "if(Ar.UEVer() >= EUnrealEngineObjectUE5Version::LARGE_WORLD_COORDINATES)"
  },
  {
    "label": "XFERPTR()",
    "kind": "Method",
    "detail": "Function (} break ; } case EX_StructConst : {)",
    "insertText": "XFERPTR(UScriptStruct*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_SetArray : {)",
    "insertText": "if((!GetLinker()) || !Ar.IsLoading() || (Ar.UEVer() >= VER_UE4_CHANGE_SETARRAY_BYTECODE))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(SerializeExpr( iCode, Ar) != EX_EndArray)"
  },
  {
    "label": "XFER()",
    "kind": "Method",
    "detail": "Function (break ; } case EX_Assert : {)",
    "insertText": "XFER(uint16)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (const uint16 NumCases = FPlatformMemory::ReadUnaligned<)",
    "insertText": "uint16(&Script[iCode - sizeof(uint16)])"
  },
  {
    "label": "XFER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XFER(int8)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (break ; } default : {)",
    "insertText": "UE_LOG(LogScriptSerialization, Warning, TEXT(\"Error: Unknown bytecode 0x%02X; ignoring it\"), (uint8)Expr)"
  }
]