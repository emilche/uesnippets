[
  {
    "label": "AudioDecoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDecoder"
  },
  {
    "label": "SpeechType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SpeechType"
  },
  {
    "label": "EncodedAudioFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncodedAudioFrame"
  },
  {
    "label": "DecodeResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DecodeResult"
  },
  {
    "label": "ParseResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParseResult"
  },
  {
    "label": "AudioDecoder()",
    "kind": "Method",
    "detail": "Function (# ifndef API_AUDIO_CODECS_AUDIO_DECODER_H_ # define API_AUDIO_CODECS_AUDIO_DECODER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" rtc_base / buffer . h \" namespace webrtc { class AudioDecoder { public : enum SpeechType { kSpeech = 1,kComfortNoise = 2,} ; enum { kNotImplemented = - 2 } ;)",
    "insertText": "AudioDecoder()"
  },
  {
    "label": "AudioDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioDecoder(const AudioDecoder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioDecoder&)",
    "insertText": "operator(const AudioDecoder&)"
  },
  {
    "label": "EncodedAudioFrame()",
    "kind": "Method",
    "detail": "Function (class EncodedAudioFrame { public : struct DecodeResult { size_t num_decoded_samples ; SpeechType speech_type ; } ; ~)",
    "insertText": "EncodedAudioFrame()"
  },
  {
    "label": "Duration()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Duration()"
  },
  {
    "label": "IsDtxPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDtxPacket()"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (absl::optional<DecodeResult>)",
    "insertText": "Decode(rtc::ArrayView<int16_t> decoded)"
  },
  {
    "label": "ParseResult()",
    "kind": "Method",
    "detail": "Function (} ; struct ParseResult {)",
    "insertText": "ParseResult()"
  },
  {
    "label": "ParseResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseResult(uint32_t timestamp, int priority, std::unique_ptr<EncodedAudioFrame> frame)"
  },
  {
    "label": "ParseResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseResult(ParseResult&& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ParseResult&)",
    "insertText": "operator(ParseResult&& b)"
  },
  {
    "label": "ParsePayload()",
    "kind": "Method",
    "detail": "Function (uint32_t timestamp ; int priority ; std::unique_ptr<EncodedAudioFrame> frame ; } ; std::vector<ParseResult>)",
    "insertText": "ParsePayload(rtc::Buffer&& payload, uint32_t timestamp)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Decode(const uint8_t* encoded, size_t encoded_len, int sample_rate_hz, size_t max_decoded_bytes, int16_t* decoded, SpeechType* speech_type)"
  },
  {
    "label": "DecodeRedundant()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DecodeRedundant(const uint8_t* encoded, size_t encoded_len, int sample_rate_hz, size_t max_decoded_bytes, int16_t* decoded, SpeechType* speech_type)"
  },
  {
    "label": "HasDecodePlc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDecodePlc()"
  },
  {
    "label": "DecodePlc()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "DecodePlc(size_t num_frames, int16_t* decoded)"
  },
  {
    "label": "GeneratePlc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePlc(size_t requested_samples_per_channel, rtc::BufferT<int16_t>* concealment_audio)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ErrorCode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ErrorCode()"
  },
  {
    "label": "PacketDuration()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PacketDuration(const uint8_t* encoded, size_t encoded_len)"
  },
  {
    "label": "PacketDurationRedundant()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PacketDurationRedundant(const uint8_t* encoded, size_t encoded_len)"
  },
  {
    "label": "PacketHasFec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PacketHasFec(const uint8_t* encoded, size_t encoded_len)"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "Channels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Channels()"
  },
  {
    "label": "ConvertSpeechType()",
    "kind": "Method",
    "detail": "Function (int kMaxNumberOfChannels = 2 4 ; protected : SpeechType)",
    "insertText": "ConvertSpeechType(int16_t type)"
  },
  {
    "label": "DecodeInternal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DecodeInternal(const uint8_t* encoded, size_t encoded_len, int sample_rate_hz, int16_t* decoded, SpeechType* speech_type)"
  },
  {
    "label": "DecodeRedundantInternal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DecodeRedundantInternal(const uint8_t* encoded, size_t encoded_len, int sample_rate_hz, int16_t* decoded, SpeechType* speech_type)"
  }
]