[
  {
    "label": "FakeNetworkInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeNetworkInterface"
  },
  {
    "label": "FakeNetworkInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_BASE_FAKE_NETWORK_INTERFACE_H_ # define MEDIA_BASE_FAKE_NETWORK_INTERFACE_H_ # include<map> # include<set> # include<utility> # include<vector> # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" media / base / media_channel . h \" # include \" media / base / rtp_utils . h \" # include \" modules / rtp_rtcp / source / rtp_util . h \" # include \" rtc_base / byte_order . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / dscp . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread . h \" namespace cricket { class FakeNetworkInterface : public MediaChannel::NetworkInterface { public :)",
    "insertText": "FakeNetworkInterface() : thread_(rtc::Thread::Current()), dest_(NULL), conf_(false), sendbuf_size_(-1), recvbuf_size_(-1), dscp_(rtc::DSCP_NO_CHANGE)"
  },
  {
    "label": "SetDestination()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDestination(MediaChannel* dest)"
  },
  {
    "label": "SetConferenceMode()",
    "kind": "Method",
    "detail": "Function (dest_ = dest ; } void)",
    "insertText": "SetConferenceMode(bool conf, const std::vector<uint32_t>& ssrcs) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (webrtc::MutexLock)",
    "insertText": "lock(&mutex_)"
  },
  {
    "label": "NumRtpBytes()",
    "kind": "Method",
    "detail": "Function (conf_ = conf ; conf_sent_ssrcs_ = ssrcs ; } int)",
    "insertText": "NumRtpBytes() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int bytes = 0 ;)",
    "insertText": "for(size_t i = 0; i < rtp_packets_.size(); ++i)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (bytes + = static_cast<)",
    "insertText": "int(rtp_packets_[i].size())"
  },
  {
    "label": "NumRtpBytes()",
    "kind": "Method",
    "detail": "Function (} return bytes ; } int)",
    "insertText": "NumRtpBytes(uint32_t ssrc) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetNumRtpBytesAndPackets()",
    "kind": "Method",
    "detail": "Function (int bytes = 0 ;)",
    "insertText": "GetNumRtpBytesAndPackets(ssrc, &bytes, NULL)"
  },
  {
    "label": "NumRtpPackets()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NumRtpPackets(uint32_t ssrc) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetNumRtpBytesAndPackets()",
    "kind": "Method",
    "detail": "Function (int packets = 0 ;)",
    "insertText": "GetNumRtpBytesAndPackets(ssrc, NULL, &packets)"
  },
  {
    "label": "GetRtpPacket()",
    "kind": "Method",
    "detail": "Function (} rtc::CopyOnWriteBuffer)",
    "insertText": "GetRtpPacket(int index) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetRtcpPacket()",
    "kind": "Method",
    "detail": "Function (} const rtc::CopyOnWriteBuffer*)",
    "insertText": "GetRtcpPacket(int index) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "sendbuf_size()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "sendbuf_size()"
  },
  {
    "label": "ParseRtpSsrc()",
    "kind": "Method",
    "detail": "Function (sent_ssrcs_ [)",
    "insertText": "ParseRtpSsrc(*packet)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (options_ = options ; rtp_packets_ .)",
    "insertText": "push_back(*packet)"
  },
  {
    "label": "SetRtpSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtpSsrc(conf_sent_ssrcs_[i], *packet)"
  },
  {
    "label": "PostPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostPacket(*packet)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "SendRtcp(rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (options_ = options ;)",
    "insertText": "if(!conf_)"
  },
  {
    "label": "RTC_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_LOG(LS_VERBOSE)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (} return true ; } int)",
    "insertText": "SetOption(SocketType type, rtc::Socket::Option opt, int option)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (sendbuf_size_ = option ; } else)",
    "insertText": "if(opt == rtc::Socket::OPT_RCVBUF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (recvbuf_size_ = option ; } else)",
    "insertText": "if(opt == rtc::Socket::OPT_DSCP)"
  },
  {
    "label": "DiffServCodePoint()",
    "kind": "Method",
    "detail": "Function (dscp_ = static_cast<)",
    "insertText": "DiffServCodePoint(option)"
  },
  {
    "label": "PostPacket()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } void)",
    "insertText": "PostPacket(rtc::CopyOnWriteBuffer packet)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (thread_ ->)",
    "insertText": "PostTask(SafeTask(safety_.flag(), [this, packet = std::move(packet)]() mutable { if (dest_) { dest_->OnPacketReceived(std::move(packet), rtc::TimeMicros()); } }))"
  },
  {
    "label": "SetRtpSsrc()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "SetRtpSsrc(uint32_t ssrc, rtc::CopyOnWriteBuffer& buffer)"
  },
  {
    "label": "RTC_CHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_GE(buffer.size(), 12)"
  },
  {
    "label": "SetBE32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBE32(buffer.MutableData() + 8, ssrc)"
  },
  {
    "label": "GetNumRtpBytesAndPackets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetNumRtpBytesAndPackets(uint32_t ssrc, int* bytes, int* packets)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* bytes = 0 ; })",
    "insertText": "if(packets)"
  }
]