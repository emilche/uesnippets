[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "SSessionConsoleLogTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSessionConsoleLogTableRow"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Views / STableRow . h \" # include \" SessionLogMessage . h \" # include \" SlateOptMacros . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Images / SImage . h \" class Error ; class SSessionConsoleLogTableRow : public SMultiColumnTableRow<TSharedPtr<FSessionLogMessage>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSessionConsoleLogTableRow)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, HighlightText) SLATE_ARGUMENT(TSharedPtr<FSessionLogMessage>, LogMessage) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (HighlightText = InArgs . _HighlightText ; LogMessage = InArgs . _LogMessage ; SMultiColumnTableRow<TSharedPtr<FSessionLogMessage>)",
    "insertText": "Construct(FSuperRowType::FArguments(), InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} public : BEGIN_SLATE_FUNCTION_BUILD_OPTIMIZATION TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == \"Message\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == \"TimeSeconds\")"
  },
  {
    "label": "FNumberFormattingOptions()",
    "kind": "Method",
    "detail": "Function (const FNumberFormattingOptions FormatOptions =)",
    "insertText": "FNumberFormattingOptions() .SetMinimumFractionalDigits(3) .SetMaximumFractionalDigits(3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == \"Verbosity\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush* Icon ;)",
    "insertText": "if((LogMessage->Verbosity == ELogVerbosity::Error) || (LogMessage->Verbosity == ELogVerbosity::Fatal))"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Icon =)",
    "insertText": "GetBrush(\"Icons.Error\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(LogMessage->Verbosity == ELogVerbosity::Warning)"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Icon =)",
    "insertText": "GetBrush(\"Icons.Warning\")"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (} else { Icon =)",
    "insertText": "GetBrush(\"Icons.Info\")"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "SNew(SBox) .HAlign(HAlign_Center) .VAlign(VAlign_Center) [ SNew(SImage) .Image(Icon)"
  },
  {
    "label": "HandleGetBorderColor()",
    "kind": "Method",
    "detail": "Function (} return SNullWidget::NullWidget ; } END_SLATE_FUNCTION_BUILD_OPTIMIZATION private : FSlateColor)",
    "insertText": "HandleGetBorderColor()"
  },
  {
    "label": "HandleGetTextColor()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "HandleGetTextColor()"
  }
]