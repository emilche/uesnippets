[
  {
    "label": "TInlineMemoryWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInlineMemoryWriter"
  },
  {
    "label": "FPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPayload"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TPayloadBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPayloadBuilder"
  },
  {
    "label": "FResponse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResponse"
  },
  {
    "label": "TInlineMemoryWriter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Asio / Asio . h \" # include \" CborReader . h \" # include \" CborWriter . h \" # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / StringView . h \" # include \" Serialization / MemoryArchive . h \" # include \" Serialization / MemoryReader . h \" namespace UE { namespace Trace { template<int BufferSize> struct TInlineMemoryWriter : public FMemoryArchive { typedef TArray<uint8,TInlineAllocator<BufferSize>> BufferType ;)",
    "insertText": "TInlineMemoryWriter()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(void* Data, int64 Num)"
  },
  {
    "label": "SetIsSaving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsSaving(true)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "Append((const uint8*)Data, IntCastChecked<int32>(Num))"
  },
  {
    "label": "TPayloadBuilder()",
    "kind": "Method",
    "detail": "Function (} struct FPayload { const uint8* Data ; uint32 Size ; } ; enum class EStatusCode { Unknown = 0,Success = 2 0 0,BadRequest = 4 0 0,NotFound = 4 0 4,InternalError = 5 0 0,} ; template<int Size = 1 2 8> class TPayloadBuilder { public :)",
    "insertText": "TPayloadBuilder(EStatusCode StatusCode)"
  },
  {
    "label": "TPayloadBuilder()",
    "kind": "Method",
    "detail": "Function (template<int N>)",
    "insertText": "TPayloadBuilder(const char (&Path)[N])"
  },
  {
    "label": "AddInteger()",
    "kind": "Method",
    "detail": "Function (template<int N> void)",
    "insertText": "AddInteger(const char (&Name)[N], int64 Value)"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (template<int N> void)",
    "insertText": "AddString(const char (&Name)[N], const char* Value, int32 Length=-1)"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (template<int N> void)",
    "insertText": "AddString(const char (&Name)[N], const FStringView& String)"
  },
  {
    "label": "AddStringArray()",
    "kind": "Method",
    "detail": "Function (template<int N> void)",
    "insertText": "AddStringArray(const char(&Name)[N], const TArray<FString>& Values)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (template<int N,T> void)",
    "insertText": "AddArray(const char(&Name)[N], const TArrayView<T>& Values)"
  },
  {
    "label": "Done()",
    "kind": "Method",
    "detail": "Function (FPayload)",
    "insertText": "Done()"
  },
  {
    "label": "WriteContainerStart()",
    "kind": "Method",
    "detail": "Function (CborWriter .)",
    "insertText": "WriteContainerStart(ECborCode::Map, -1)"
  },
  {
    "label": "AddInteger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInteger(\"$status\", int32(StatusCode))"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddString(\"$request\", \"GET\")"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddString(\"$path\", Path, N - 1)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (CborWriter .)",
    "insertText": "WriteValue(Name, N - 1)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (CborWriter .)",
    "insertText": "WriteValue(Value)"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (} template<int Size> template<int N> void TPayloadBuilder<Size)",
    "insertText": "AddString(const char (&Name)[N], const char* Value, int Length)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Length(Length < 0) ? int32(strlen(Value))"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (CborWriter .)",
    "insertText": "WriteValue(Value, Length)"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (} template<int Size> template<int N> void TPayloadBuilder<Size)",
    "insertText": "AddString(const char(& Name)[N], const FStringView& String)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (CborWriter .)",
    "insertText": "WriteValue(String)"
  },
  {
    "label": "WriteContainerStart()",
    "kind": "Method",
    "detail": "Function (CborWriter .)",
    "insertText": "WriteContainerStart(ECborCode::Array, Values.Num())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (CborWriter .)",
    "insertText": "WriteValue(Elem)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (} } template<int Size> template<int N,T> void TPayloadBuilder<Size)",
    "insertText": "AddArray(const char(& Name)[N], const TArrayView<T>& Values)"
  },
  {
    "label": "WriteContainerEnd()",
    "kind": "Method",
    "detail": "Function (CborWriter .)",
    "insertText": "WriteContainerEnd()"
  },
  {
    "label": "GetStatusCode()",
    "kind": "Method",
    "detail": "Function (} class FResponse { public : EStatusCode)",
    "insertText": "GetStatusCode()"
  },
  {
    "label": "GetInt64Checked()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetInt64Checked(const char* Key, int64 Default)"
  },
  {
    "label": "GetUint64Checked()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetUint64Checked(const char* Key, uint64 Default)"
  },
  {
    "label": "GetInt32Checked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInt32Checked(const char* Key, int32 Default)"
  },
  {
    "label": "GetUint32Checked()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetUint32Checked(const char* Key, uint32 Default)"
  },
  {
    "label": "GetInteger()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetInteger(const char* Key, int64 Default)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (} template<int N> FUtf8StringView)",
    "insertText": "GetString(const char* Key, const char (&Default)[N])"
  },
  {
    "label": "GetStringArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStringArray(const char* Key, TArray<FString>& OutArray)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "GetData()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSize()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "Reserve(uint32 Size)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (private : template<Type,LambdaType> Type)",
    "insertText": "GetValue(const char* Key, Type Default, LambdaType&& Lambda)"
  },
  {
    "label": "GetInt32Checked()",
    "kind": "Method",
    "detail": "Function (int32 Code =)",
    "insertText": "GetInt32Checked(\"$status\", 0)"
  },
  {
    "label": "MemoryReader()",
    "kind": "Method",
    "detail": "Function (FMemoryReader)",
    "insertText": "MemoryReader(Buffer)"
  },
  {
    "label": "CborReader()",
    "kind": "Method",
    "detail": "Function (FCborReader)",
    "insertText": "CborReader(&MemoryReader, ECborEndianness::StandardCompliant)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FCborContext Context ;)",
    "insertText": "while(CborReader.ReadNext(Context))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 Length =)",
    "insertText": "uint32(Context.AsLength())"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 Offset =)",
    "insertText": "uint32(MemoryReader.Tell())"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (auto*)",
    "insertText": "String(const char*)(Buffer.GetData() + Offset - Length)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Emplace(Context.AsString())"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "SetNumUninitialized(Size, EAllowShrinking::No)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCborContext Context ;)",
    "insertText": "if(!CborReader.ReadNext(Context) || Context.MajorType() != ECborCode::Map)"
  },
  {
    "label": "bIsTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bIsTarget(FCStringAnsi::Strncmp(Key, String, Length) == 0)"
  },
  {
    "label": "DefaultView()",
    "kind": "Method",
    "detail": "Function (FUtf8StringView)",
    "insertText": "DefaultView(Default, N - 1)"
  }
]