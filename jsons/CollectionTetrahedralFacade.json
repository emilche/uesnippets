[
  {
    "label": "TetrahedralParticleEmbedding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TetrahedralParticleEmbedding"
  },
  {
    "label": "FTetrahedralFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTetrahedralFacade"
  },
  {
    "label": "TetrahedralParticleEmbedding()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Containers / UnrealString . h \" # include \" Containers / Array . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" # include \" GeometryCollection / ManagedArrayAccessor . h \" # include \" GeometryCollection / Facades / CollectionPositionTargetFacade . h \" namespace GeometryCollection::Facades { struct TetrahedralParticleEmbedding {)",
    "insertText": "TetrahedralParticleEmbedding(int32 InParticleIndex = INDEX_NONE, int32 InGeometryIndex = INDEX_NONE, int32 InTetrahedronIndex = INDEX_NONE, TArray<float> InBarycentricWeights = TArray<float>() ) : ParticleIndex(InParticleIndex) , GeometryIndex(InGeometryIndex) , TetrahedronIndex(InTetrahedronIndex) , BarycentricWeights(InBarycentricWeights)"
  },
  {
    "label": "FTetrahedralFacade()",
    "kind": "Method",
    "detail": "Function (} int32 ParticleIndex ; int32 GeometryIndex ; int32 TetrahedronIndex ; TArray<float> BarycentricWeights ; } ; class FTetrahedralFacade { const FManagedArrayCollection& ConstCollection ; FManagedArrayCollection* Collection = nullptr ; public :)",
    "insertText": "FTetrahedralFacade(FManagedArrayCollection& InSelf)"
  },
  {
    "label": "FTetrahedralFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTetrahedralFacade(const FManagedArrayCollection& InSelf)"
  },
  {
    "label": "FTetrahedralFacade()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTetrahedralFacade()"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "IsConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConst()"
  },
  {
    "label": "Intersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Intersection(const TConstArrayView<Chaos::Softs::FSolverVec3>& SamplePositions, const TConstArrayView<Chaos::Softs::FSolverVec3>& TetarhedronPositions, TArray<TetrahedralParticleEmbedding>& OutIntersections)"
  }
]