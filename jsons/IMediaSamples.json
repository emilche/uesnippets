[
  {
    "label": "IMediaAudioSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaAudioSample"
  },
  {
    "label": "IMediaBinarySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaBinarySample"
  },
  {
    "label": "IMediaOverlaySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaOverlaySample"
  },
  {
    "label": "IMediaTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTextureSample"
  },
  {
    "label": "IMediaSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaSamples"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FetchAudio()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Math / Range . h \" # include \" Misc / Timespan . h \" # include \" Templates / SharedPointer . h \" # include \" IMediaTimeSource . h \" class IMediaAudioSample ; class IMediaBinarySample ; class IMediaOverlaySample ; class IMediaTextureSample ; class IMediaSamples { public : bool)",
    "insertText": "FetchAudio(TRange<FTimespan> TimeRange, TSharedPtr<IMediaAudioSample, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "SetSampleBufferSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSampleBufferSize(int32 BufferSize)"
  },
  {
    "label": "FetchBestVideoSampleForTimeRange()",
    "kind": "Method",
    "detail": "Function (} ; enum class EFetchBestSampleResult { Ok = 0,NoSample,PurgedToEmpty,NotSupported,} ; EFetchBestSampleResult)",
    "insertText": "FetchBestVideoSampleForTimeRange(const TRange<FMediaTimeStamp>& TimeRange, TSharedPtr<IMediaTextureSample, ESPMode::ThreadSafe>& OutSample, bool bReverse, bool bConsistentResult)"
  },
  {
    "label": "PeekVideoSampleTimeRanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PeekVideoSampleTimeRanges(TArray<TRange<FMediaTimeStamp>>& TimeRange)"
  }
]