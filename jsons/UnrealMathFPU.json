[
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "VectorRegister4Int",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VectorRegister4Int"
  },
  {
    "label": "VectorRegister2Double",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VectorRegister2Double"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "VectorLoadAligned(const float* Ptr)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double)",
    "insertText": "VectorLoadAligned(const double* Ptr)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Float& Vec, float* Ptr)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Double& Vec, double* Dst)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLoadAligned(V)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLoadAligned(V)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(X, Y, Z, W)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(X, Y, Z, W)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(X, Y, Z, W)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorRegister4Double(XY, ZW)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(X, Y, Z, W)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(X, Y, Z, W)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorRegister4Double(From)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(Ptr[0], Ptr[1], Ptr[2], Ptr[3])"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(Ptr[0], Ptr[1], Ptr[2], Ptr[3])"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(Ptr[0], Ptr[1], Ptr[2], 0.0)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(Ptr[0], Ptr[1], Ptr[2], 1.0)"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLoad(Ptr)"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLoad(Ptr)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(Ptr[0], Ptr[0], Ptr[0], Ptr[0])"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(Ptr[0], Ptr[0], Ptr[0], Ptr[0])"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(Ptr[0], Ptr[1], Ptr[0], Ptr[1])"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(Ptr[0], Ptr[1], Ptr[0], Ptr[1])"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegister(Ptr1[0], Ptr1[1], Ptr2[0], Ptr2[1])"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegister(Ptr1[0], Ptr1[1], Ptr2[0], Ptr2[1])"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(F, F, F, F)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(D, D, D, D)"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorDivide(GlobalVectorConstants::FloatOne, Vec)"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorDivide(GlobalVectorConstants::DoubleOne, Vec)"
  },
  {
    "label": "VectorReciprocal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorReciprocal(Vec)"
  },
  {
    "label": "VectorReciprocal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorReciprocal(Vec)"
  },
  {
    "label": "VectorReciprocalLen()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorReciprocalLen(Vector)"
  },
  {
    "label": "VectorReciprocalLen()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorReciprocalLen(Vector)"
  },
  {
    "label": "MakeVectorRegisterFloatFromDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloatFromDouble(Result)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorShuffle(Vec1, Vec2, 2, 3, 2, 3)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorShuffle(Vec1, Vec2, 2, 3, 2, 3)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorShuffle(Vec1, Vec2, 0, 1, 0, 1)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorShuffle(Vec1, Vec2, 0, 1, 0, 1)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(VecXYZ.V[0], VecXYZ.V[1], VecXYZ.V[2], VecW.V[3])"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(VecXYZ.V[0], VecXYZ.V[1], VecXYZ.V[2], VecW.V[3])"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(V[0], V[1], V[2], V[3])"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(V[0], V[1], V[2], V[3])"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(V[0], V[1], V[2], V[3])"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tA.V[0] & B.V[0],\n\t\tA.V[1] & B.V[1],\n\t\tA.V[2] & B.V[2],\n\t\tA.V[3] & B.V[3])"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tA.V[0] | B.V[0],\n\t\tA.V[1] | B.V[1],\n\t\tA.V[2] | B.V[2],\n\t\tA.V[3] | B.V[3])"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tA.V[0] ^ B.V[0],\n\t\tA.V[1] ^ B.V[1],\n\t\tA.V[2] ^ B.V[2],\n\t\tA.V[3] ^ B.V[3])"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\t~A.V[0],\n\t\t~A.V[1],\n\t\t~A.V[2],\n\t\t~A.V[3])"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tA.V[0] == B.V[0] ? 0xFFFFFFFF : 0,\n\t\tA.V[1] == B.V[1] ? 0xFFFFFFFF : 0,\n\t\tA.V[2] == B.V[2] ? 0xFFFFFFFF : 0,\n\t\tA.V[3] == B.V[3] ? 0xFFFFFFFF : 0)"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tA.V[0] != B.V[0] ? 0xFFFFFFFF : 0,\n\t\tA.V[1] != B.V[1] ? 0xFFFFFFFF : 0,\n\t\tA.V[2] != B.V[2] ? 0xFFFFFFFF : 0,\n\t\tA.V[3] != B.V[3] ? 0xFFFFFFFF : 0)"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tA.V[0] > B.V[0] ? 0xFFFFFFFF : 0,\n\t\tA.V[1] > B.V[1] ? 0xFFFFFFFF : 0,\n\t\tA.V[2] > B.V[2] ? 0xFFFFFFFF : 0,\n\t\tA.V[3] > B.V[3] ? 0xFFFFFFFF : 0)"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tA.V[0] < B.V[0] ? 0xFFFFFFFF : 0,\n\t\tA.V[1] < B.V[1] ? 0xFFFFFFFF : 0,\n\t\tA.V[2] < B.V[2] ? 0xFFFFFFFF : 0,\n\t\tA.V[3] < B.V[3] ? 0xFFFFFFFF : 0)"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tA.V[0] >= B.V[0] ? 0xFFFFFFFF : 0,\n\t\tA.V[1] >= B.V[1] ? 0xFFFFFFFF : 0,\n\t\tA.V[2] >= B.V[2] ? 0xFFFFFFFF : 0,\n\t\tA.V[3] >= B.V[3] ? 0xFFFFFFFF : 0)"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tA.V[0] <= B.V[0] ? 0xFFFFFFFF : 0,\n\t\tA.V[1] <= B.V[1] ? 0xFFFFFFFF : 0,\n\t\tA.V[2] <= B.V[2] ? 0xFFFFFFFF : 0,\n\t\tA.V[3] <= B.V[3] ? 0xFFFFFFFF : 0)"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tA.V[0] + B.V[0],\n\t\tA.V[1] + B.V[1],\n\t\tA.V[2] + B.V[2],\n\t\tA.V[3] + B.V[3])"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tA.V[0] - B.V[0],\n\t\tA.V[1] - B.V[1],\n\t\tA.V[2] - B.V[2],\n\t\tA.V[3] - B.V[3])"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tA.V[0] * B.V[0],\n\t\tA.V[1] * B.V[1],\n\t\tA.V[2] * B.V[2],\n\t\tA.V[3] * B.V[3])"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\t-A.V[0],\n\t\t-A.V[1],\n\t\t-A.V[2],\n\t\t-A.V[3])"
  },
  {
    "label": "VectorFloatToInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorFloatToInt(A)"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tIntPtr[0],\n\t\tIntPtr[1],\n\t\tIntPtr[2],\n\t\tIntPtr[3])"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tIntPtr[0],\n\t\tIntPtr[1],\n\t\tIntPtr[2],\n\t\tIntPtr[3])"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt(\n\t\tIntSplat,\n\t\tIntSplat,\n\t\tIntSplat,\n\t\tIntSplat)"
  },
  {
    "label": "MakeVectorRegisterInt64()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterInt64(\n\t\tIntPtr[0],\n\t\tIntPtr[1])"
  },
  {
    "label": "MakeVectorRegister2Double()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegister2Double(\n\t\tDoublePtr[0],\n\t\tDoublePtr[1])"
  }
]