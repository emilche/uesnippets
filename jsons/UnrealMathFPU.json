[
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "VectorRegister4Int",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VectorRegister4Int"
  },
  {
    "label": "VectorRegister2Double",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VectorRegister2Double"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / UnrealMemory . h \" struct)",
    "insertText": "alignas(16)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (union { struct { VectorRegister2Double XY ; VectorRegister2Double ZW ; } ; double V [ 4 ] ; } ;)",
    "insertText": "VectorRegister4Double()"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] = InXY . V [ 0 ] ; V [ 1 ] = InXY . V [ 1 ] ; V [ 2 ] = InZW . V [ 0 ] ; V [ 3 ] = InZW . V [ 1 ] ; })",
    "insertText": "VectorRegister4Double(VectorRegister2Double InXY, VectorRegister2Double InZW, VectorRegisterConstInit) : XY(InXY), ZW(InZW)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VectorRegister4Double(const VectorRegister4Float& FloatVector)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] = FloatVector . V [ 0 ] ; V [ 1 ] = FloatVector . V [ 1 ] ; V [ 2 ] = FloatVector . V [ 2 ] ; V [ 3 ] = FloatVector . V [ 3 ] ; } VectorRegister4Double&)",
    "insertText": "operator(const VectorRegister4Float& From)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] = From . V [ 0 ] ; V [ 1 ] = From . V [ 1 ] ; V [ 2 ] = From . V [ 2 ] ; V [ 3 ] = From . V [ 3 ] ; return* this ; } } ; typedef VectorRegister4Int VectorRegister4i ; typedef VectorRegister4Float VectorRegister4f ; typedef VectorRegister4Double VectorRegister4d ; typedef VectorRegister2Double VectorRegister2d ; typedef VectorRegister4Double VectorRegister4 ; typedef VectorRegister4 VectorRegister ; typedef VectorRegister4Int VectorRegisterInt ; typedef struct { VectorRegister4Float val [ 4 ] ; } VectorRegister4x4Float ; VectorRegister4Float)",
    "insertText": "VectorLoadAligned(const float* Ptr)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double)",
    "insertText": "VectorLoadAligned(const double* Ptr)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Float& Vec, float* Ptr)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Double& Vec, double* Dst)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (struct)",
    "insertText": "alignas(alignof(VectorRegister4Float))"
  },
  {
    "label": "AlignedFloat4()",
    "kind": "Method",
    "detail": "Function (float V [ 4 ] ;)",
    "insertText": "AlignedFloat4(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Vec, V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} } ; struct)",
    "insertText": "alignas(alignof(VectorRegister4Double))"
  },
  {
    "label": "VectorZeroVectorRegister()",
    "kind": "Method",
    "detail": "Function (} } ; typedef AlignedDouble4 AlignedRegister4 ; # define)",
    "insertText": "VectorZeroVectorRegister() VectorZeroDouble() #define VectorOneVectorRegister() VectorOneDouble() #define DECLARE_VECTOR_REGISTER(X, Y, Z, W) MakeVectorRegister(X, Y, Z, W) FORCEINLINE VectorRegister2Double MakeVectorRegister2Double(double X, double Y)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (VectorRegister2Double Result ; Result . V [ 0 ] = X ; Result . V [ 1 ] = Y ; return Result ; } VectorRegister4Float)",
    "insertText": "MakeVectorRegisterFloat(uint32 X, uint32 Y, uint32 Z, uint32 W)"
  },
  {
    "label": "Vec()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "Vec((uint32&)Vec.V[0])"
  },
  {
    "label": "Vec()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double)",
    "insertText": "Vec((uint64&)Vec.V[0])"
  },
  {
    "label": "MakeVectorRegisterFloatMask()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "MakeVectorRegisterFloatMask(uint32 X, uint32 Y, uint32 Z, uint32 W)"
  },
  {
    "label": "MakeVectorRegisterDoubleMask()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "MakeVectorRegisterDoubleMask(uint64 X, uint64 Y, uint64 Z, uint64 W)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "MakeVectorRegisterFloat(float X, float Y, float Z, float W)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec ; Vec . V [ 0 ] = X ; Vec . V [ 1 ] = Y ; Vec . V [ 2 ] = Z ; Vec . V [ 3 ] = W ; return Vec ; } VectorRegister4Double)",
    "insertText": "MakeVectorRegisterDouble(double X, double Y, double Z, double W)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Vec ; Vec . V [ 0 ] = X ; Vec . V [ 1 ] = Y ; Vec . V [ 2 ] = Z ; Vec . V [ 3 ] = W ; return Vec ; } VectorRegister4Double)",
    "insertText": "MakeVectorRegisterDouble(const VectorRegister2Double& XY, const VectorRegister2Double& ZW)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "MakeVectorRegister(float X, float Y, float Z, float W)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "MakeVectorRegister(double X, double Y, double Z, double W)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "MakeVectorRegisterDouble(const VectorRegister4Float& From)"
  },
  {
    "label": "MakeVectorRegisterFloatFromDouble()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "MakeVectorRegisterFloatFromDouble(const VectorRegister4Double& Vec4d)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec ; Vec . V [ 0 ] =)",
    "insertText": "float(Vec4d.V[0])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Vec . V [ 1 ] =)",
    "insertText": "float(Vec4d.V[1])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Vec . V [ 2 ] =)",
    "insertText": "float(Vec4d.V[2])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Vec . V [ 3 ] =)",
    "insertText": "float(Vec4d.V[3])"
  },
  {
    "label": "Vec()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Int)",
    "insertText": "Vec((int32&)Vec.V[0])"
  },
  {
    "label": "Vec()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Int)",
    "insertText": "Vec((int64&)Vec.V[0])"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoad(const double* Ptr)"
  },
  {
    "label": "VectorLoad16()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4x4Float)",
    "insertText": "VectorLoad16(const float* Ptr)"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (VectorRegister4x4Float Result ; Result . val [ 0 ] =)",
    "insertText": "VectorLoad(Ptr)"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (Result . val [ 1 ] =)",
    "insertText": "VectorLoad(Ptr + 4)"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (Result . val [ 2 ] =)",
    "insertText": "VectorLoad(Ptr + 8)"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (Result . val [ 3 ] =)",
    "insertText": "VectorLoad(Ptr + 12)"
  },
  {
    "label": "VectorLoadFloat3_W1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadFloat3_W1(const double* Ptr)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadFloat1(const float* Ptr)"
  },
  {
    "label": "VectorLoadDouble1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadDouble1(const double* Ptr)"
  },
  {
    "label": "VectorLoadFloat2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadFloat2(const float* Ptr)"
  },
  {
    "label": "VectorLoadFloat2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadFloat2(const double* Ptr)"
  },
  {
    "label": "VectorLoadTwoPairsFloat()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadTwoPairsFloat(const float* Ptr1, const float* Ptr2)"
  },
  {
    "label": "VectorLoadTwoPairsFloat()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadTwoPairsFloat(const double* Ptr1, const double* Ptr2)"
  },
  {
    "label": "VectorSetFloat1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSetFloat1(float F)"
  },
  {
    "label": "VectorSetFloat1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSetFloat1(double D)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Float& Vec, float* Dst)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dst, &Vec, 4 * sizeof(float))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dst, &Vec, 4 * sizeof(double))"
  },
  {
    "label": "VectorStoreAlignedStreamed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreAlignedStreamed(const VectorRegister4Float& Vec, float* Dst)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Vec, Dst)"
  },
  {
    "label": "VectorStoreAlignedStreamed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreAlignedStreamed(const VectorRegister4Double& Vec, double* Dst)"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStore(const VectorRegister4Float& Vec, float* Dst)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dst, &(Vec), 4 * sizeof(float))"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStore(const VectorRegister4Double& Vec, double* Dst)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dst, &(Vec), 4 * sizeof(double))"
  },
  {
    "label": "VectorStore16()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStore16(const VectorRegister4x4Float& Vec, float* Dst)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dst, &(Vec), 16 * sizeof(float))"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreFloat3(const VectorRegister4Float& Vec, float* Dst)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dst, &(Vec), 3 * sizeof(float))"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreFloat3(const VectorRegister4Double& Vec, double* Dst)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dst, &(Vec), 3 * sizeof(double))"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreFloat1(const VectorRegister4Float& Vec, float* Dst)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dst, &(Vec), 1 * sizeof(float))"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreFloat1(const VectorRegister4Double& Vec, double* Dst)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dst, &(Vec), 1 * sizeof(double))"
  },
  {
    "label": "VectorReplicate()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VectorReplicate(Vec, ElementIndex ) MakeVectorRegister( (Vec).V[ElementIndex], (Vec).V[ElementIndex], (Vec).V[ElementIndex], (Vec).V[ElementIndex] ) #define VectorSwizzle( Vec, X, Y, Z, W ) MakeVectorRegister( (Vec).V[X], (Vec).V[Y], (Vec).V[Z], (Vec).V[W] ) #define VectorShuffle( Vec1, Vec2, X, Y, Z, W ) MakeVectorRegister( (Vec1).V[X], (Vec1).V[Y], (Vec2).V[Z], (Vec2).V[W] ) FORCEINLINE VectorRegister4Float VectorAbs(const VectorRegister4Float& Vec)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec2 ; Vec2 . V [ 0 ] =)",
    "insertText": "Abs(Vec.V[0])"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Vec2 . V [ 1 ] =)",
    "insertText": "Abs(Vec.V[1])"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Vec2 . V [ 2 ] =)",
    "insertText": "Abs(Vec.V[2])"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Vec2 . V [ 3 ] =)",
    "insertText": "Abs(Vec.V[3])"
  },
  {
    "label": "VectorNegate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorNegate(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorAdd(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec ; Vec . V [ 0 ] = Vec1 . V [ 0 ] + Vec2 . V [ 0 ] ; Vec . V [ 1 ] = Vec1 . V [ 1 ] + Vec2 . V [ 1 ] ; Vec . V [ 2 ] = Vec1 . V [ 2 ] + Vec2 . V [ 2 ] ; Vec . V [ 3 ] = Vec1 . V [ 3 ] + Vec2 . V [ 3 ] ; return Vec ; } VectorRegister4Double)",
    "insertText": "VectorAdd(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Vec ; Vec . V [ 0 ] = Vec1 . V [ 0 ] + Vec2 . V [ 0 ] ; Vec . V [ 1 ] = Vec1 . V [ 1 ] + Vec2 . V [ 1 ] ; Vec . V [ 2 ] = Vec1 . V [ 2 ] + Vec2 . V [ 2 ] ; Vec . V [ 3 ] = Vec1 . V [ 3 ] + Vec2 . V [ 3 ] ; return Vec ; } VectorRegister4Float)",
    "insertText": "VectorSubtract(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec ; Vec . V [ 0 ] = Vec1 . V [ 0 ] - Vec2 . V [ 0 ] ; Vec . V [ 1 ] = Vec1 . V [ 1 ] - Vec2 . V [ 1 ] ; Vec . V [ 2 ] = Vec1 . V [ 2 ] - Vec2 . V [ 2 ] ; Vec . V [ 3 ] = Vec1 . V [ 3 ] - Vec2 . V [ 3 ] ; return Vec ; } VectorRegister4Double)",
    "insertText": "VectorSubtract(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Vec ; Vec . V [ 0 ] = Vec1 . V [ 0 ] - Vec2 . V [ 0 ] ; Vec . V [ 1 ] = Vec1 . V [ 1 ] - Vec2 . V [ 1 ] ; Vec . V [ 2 ] = Vec1 . V [ 2 ] - Vec2 . V [ 2 ] ; Vec . V [ 3 ] = Vec1 . V [ 3 ] - Vec2 . V [ 3 ] ; return Vec ; } VectorRegister4Float)",
    "insertText": "VectorMultiply(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec ; Vec . V [ 0 ] = Vec1 . V [ 0 ]* Vec2 . V [ 0 ] ; Vec . V [ 1 ] = Vec1 . V [ 1 ]* Vec2 . V [ 1 ] ; Vec . V [ 2 ] = Vec1 . V [ 2 ]* Vec2 . V [ 2 ] ; Vec . V [ 3 ] = Vec1 . V [ 3 ]* Vec2 . V [ 3 ] ; return Vec ; } VectorRegister4Double)",
    "insertText": "VectorMultiply(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Vec ; Vec . V [ 0 ] = Vec1 . V [ 0 ]* Vec2 . V [ 0 ] ; Vec . V [ 1 ] = Vec1 . V [ 1 ]* Vec2 . V [ 1 ] ; Vec . V [ 2 ] = Vec1 . V [ 2 ]* Vec2 . V [ 2 ] ; Vec . V [ 3 ] = Vec1 . V [ 3 ]* Vec2 . V [ 3 ] ; return Vec ; } VectorRegister4Float)",
    "insertText": "VectorMultiplyAdd(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2, const VectorRegister4Float& Vec3)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec ; Vec . V [ 0 ] = Vec1 . V [ 0 ]* Vec2 . V [ 0 ] + Vec3 . V [ 0 ] ; Vec . V [ 1 ] = Vec1 . V [ 1 ]* Vec2 . V [ 1 ] + Vec3 . V [ 1 ] ; Vec . V [ 2 ] = Vec1 . V [ 2 ]* Vec2 . V [ 2 ] + Vec3 . V [ 2 ] ; Vec . V [ 3 ] = Vec1 . V [ 3 ]* Vec2 . V [ 3 ] + Vec3 . V [ 3 ] ; return Vec ; } VectorRegister4Double)",
    "insertText": "VectorMultiplyAdd(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2, const VectorRegister4Double& Vec3)"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Vec ; Vec . V [ 0 ] = Vec1 . V [ 0 ]* Vec2 . V [ 0 ] + Vec3 . V [ 0 ] ; Vec . V [ 1 ] = Vec1 . V [ 1 ]* Vec2 . V [ 1 ] + Vec3 . V [ 1 ] ; Vec . V [ 2 ] = Vec1 . V [ 2 ]* Vec2 . V [ 2 ] + Vec3 . V [ 2 ] ; Vec . V [ 3 ] = Vec1 . V [ 3 ]* Vec2 . V [ 3 ] + Vec3 . V [ 3 ] ; return Vec ; } VectorRegister4Float)",
    "insertText": "VectorNegateMultiplyAdd(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2, const VectorRegister4Float& Vec3)"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorNegateMultiplyAdd(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2, const VectorRegister4Double& Vec3)"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorDivide(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec ; Vec . V [ 0 ] = Vec1 . V [ 0 ] / Vec2 . V [ 0 ] ; Vec . V [ 1 ] = Vec1 . V [ 1 ] / Vec2 . V [ 1 ] ; Vec . V [ 2 ] = Vec1 . V [ 2 ] / Vec2 . V [ 2 ] ; Vec . V [ 3 ] = Vec1 . V [ 3 ] / Vec2 . V [ 3 ] ; return Vec ; } VectorRegister4Double)",
    "insertText": "VectorDivide(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorDot3Scalar()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Vec ; Vec . V [ 0 ] = Vec1 . V [ 0 ] / Vec2 . V [ 0 ] ; Vec . V [ 1 ] = Vec1 . V [ 1 ] / Vec2 . V [ 1 ] ; Vec . V [ 2 ] = Vec1 . V [ 2 ] / Vec2 . V [ 2 ] ; Vec . V [ 3 ] = Vec1 . V [ 3 ] / Vec2 . V [ 3 ] ; return Vec ; } float)",
    "insertText": "VectorDot3Scalar(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorDot3Scalar()",
    "kind": "Method",
    "detail": "Function (float D = Vec1 . V [ 0 ]* Vec2 . V [ 0 ] + Vec1 . V [ 1 ]* Vec2 . V [ 1 ] + Vec1 . V [ 2 ]* Vec2 . V [ 2 ] ; return D ; } double)",
    "insertText": "VectorDot3Scalar(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorDot3Scalar()",
    "kind": "Method",
    "detail": "Function (float D =)",
    "insertText": "VectorDot3Scalar(Vec1, Vec2)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec =)",
    "insertText": "MakeVectorRegisterFloat(D, D, D, D)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Vec =)",
    "insertText": "MakeVectorRegisterDouble(D, D, D, D)"
  },
  {
    "label": "VectorCompareEQ()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCompareEQ(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorCompareNE()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCompareNE(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorCompareNE()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCompareNE(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCompareGT(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCompareGT(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCompareGE(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCompareGE(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorCompareLT()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCompareLT(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorCompareLT()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCompareLT(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorCompareLE()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCompareLE(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorCompareLE()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCompareLE(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorMaskBits()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VectorMaskBits(const VectorRegister4Float& Vec1)"
  },
  {
    "label": "V1()",
    "kind": "Method",
    "detail": "Function (uint32*)",
    "insertText": "V1(uint32*)(&(Vec1.V[0]))"
  },
  {
    "label": "VectorMaskBits()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VectorMaskBits(const VectorRegister4Double& Vec1)"
  },
  {
    "label": "V1()",
    "kind": "Method",
    "detail": "Function (uint64*)",
    "insertText": "V1(uint64*)(&(Vec1.V[0]))"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSelect(const VectorRegister4Float& Mask, const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "V2()",
    "kind": "Method",
    "detail": "Function (uint32*)",
    "insertText": "V2(uint32*)(&(Vec2.V[0]))"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (uint32*)",
    "insertText": "M(uint32*)(&(Mask.V[0]))"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSelect(const VectorRegister4Double& Mask, const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "V2()",
    "kind": "Method",
    "detail": "Function (uint64*)",
    "insertText": "V2(uint64*)(&(Vec2.V[0]))"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (uint64*)",
    "insertText": "M(uint64*)(&(Mask.V[0]))"
  },
  {
    "label": "VectorBitwiseOr()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorBitwiseOr(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorBitwiseOr()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorBitwiseOr(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorBitwiseAnd(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorBitwiseAnd(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorBitwiseXor()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorBitwiseXor(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorBitwiseXor()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorBitwiseXor(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorCross()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCross(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorCross()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec ; Vec . V [ 0 ] = Vec1 . V [ 1 ]* Vec2 . V [ 2 ] - Vec1 . V [ 2 ]* Vec2 . V [ 1 ] ; Vec . V [ 1 ] = Vec1 . V [ 2 ]* Vec2 . V [ 0 ] - Vec1 . V [ 0 ]* Vec2 . V [ 2 ] ; Vec . V [ 2 ] = Vec1 . V [ 0 ]* Vec2 . V [ 1 ] - Vec1 . V [ 1 ]* Vec2 . V [ 0 ] ; Vec . V [ 3 ] = 0 . 0 f ; return Vec ; } VectorRegister4Double)",
    "insertText": "VectorCross(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorPow()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Vec ; Vec . V [ 0 ] = Vec1 . V [ 1 ]* Vec2 . V [ 2 ] - Vec1 . V [ 2 ]* Vec2 . V [ 1 ] ; Vec . V [ 1 ] = Vec1 . V [ 2 ]* Vec2 . V [ 0 ] - Vec1 . V [ 0 ]* Vec2 . V [ 2 ] ; Vec . V [ 2 ] = Vec1 . V [ 0 ]* Vec2 . V [ 1 ] - Vec1 . V [ 1 ]* Vec2 . V [ 0 ] ; Vec . V [ 3 ] = 0 . 0 ; return Vec ; } VectorRegister4Float)",
    "insertText": "VectorPow(const VectorRegister4Float& Base, const VectorRegister4Float& Exponent)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec ; Vec . V [ 0 ] =)",
    "insertText": "Pow(Base.V[0], Exponent.V[0])"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (Vec . V [ 1 ] =)",
    "insertText": "Pow(Base.V[1], Exponent.V[1])"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (Vec . V [ 2 ] =)",
    "insertText": "Pow(Base.V[2], Exponent.V[2])"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (Vec . V [ 3 ] =)",
    "insertText": "Pow(Base.V[3], Exponent.V[3])"
  },
  {
    "label": "VectorSqrt()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSqrt(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorReciprocalSqrt()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorReciprocalSqrt(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorReciprocalSqrt()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocalSqrt(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorReciprocalSqrtEstimate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorReciprocalSqrtEstimate(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorReciprocalSqrtEstimate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocalSqrtEstimate(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorReciprocal()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorReciprocal(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorReciprocal()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocal(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorReciprocalEstimate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorReciprocalEstimate(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorReciprocalEstimate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocalEstimate(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorReciprocalLen()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorReciprocalLen(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorDot4()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Len =)",
    "insertText": "VectorDot4(Vec, Vec)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (float rlen = 1 . 0 f /)",
    "insertText": "Sqrt(Len.V[0])"
  },
  {
    "label": "VectorReciprocalLen()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Result ; Result . V [ 0 ] = rlen ; Result . V [ 1 ] = rlen ; Result . V [ 2 ] = rlen ; Result . V [ 3 ] = rlen ; return Result ; } VectorRegister4Double)",
    "insertText": "VectorReciprocalLen(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorReciprocalLenEstimate()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . V [ 0 ] = rlen ; Result . V [ 1 ] = rlen ; Result . V [ 2 ] = rlen ; Result . V [ 3 ] = rlen ; return Result ; } VectorRegister4Float)",
    "insertText": "VectorReciprocalLenEstimate(const VectorRegister4Float& Vector)"
  },
  {
    "label": "VectorReciprocalLenEstimate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocalLenEstimate(const VectorRegister4Double& Vector)"
  },
  {
    "label": "VectorSet_W0()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSet_W0(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorSet_W0()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSet_W0(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorSet_W1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSet_W1(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorSet_W1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSet_W1(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorQuaternionMultiply()",
    "kind": "Method",
    "detail": "Function (} # define USE_FAST_QUAT_MUL 1 void)",
    "insertText": "VectorQuaternionMultiply(VectorRegister4Float* RESTRICT Result, const VectorRegister4Float* RESTRICT Quat1, const VectorRegister4Float* RESTRICT Quat2)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (typedef float Float4 [ 4 ] ; const Float4&)",
    "insertText": "A((const Float4*) Quat1)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (const Float4&)",
    "insertText": "B((const Float4*) Quat2)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (Float4&)",
    "insertText": "R((Float4*) Result)"
  },
  {
    "label": "T0()",
    "kind": "Method",
    "detail": "Function (# if USE_FAST_QUAT_MUL const float)",
    "insertText": "T0(A[2] - A[1]) * (B[1] - B[2])"
  },
  {
    "label": "T1()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "T1(A[3] + A[0]) * (B[3] + B[0])"
  },
  {
    "label": "T2()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "T2(A[3] - A[0]) * (B[1] + B[2])"
  },
  {
    "label": "T3()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "T3(A[1] + A[2]) * (B[3] - B[0])"
  },
  {
    "label": "T4()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "T4(A[2] - A[0]) * (B[0] - B[1])"
  },
  {
    "label": "T5()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "T5(A[2] + A[0]) * (B[0] + B[1])"
  },
  {
    "label": "T6()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "T6(A[3] + A[1]) * (B[3] - B[2])"
  },
  {
    "label": "T7()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "T7(A[3] - A[1]) * (B[3] + B[2])"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (const float T8 = T5 + T6 + T7 ; const float T9 = 0 . 5)",
    "insertText": "f(T4 + T8)"
  },
  {
    "label": "VectorQuaternionMultiply()",
    "kind": "Method",
    "detail": "Function (R [ 0 ] = T1 + T9 - T8 ; R [ 1 ] = T2 + T9 - T7 ; R [ 2 ] = T3 + T9 - T6 ; R [ 3 ] = T0 + T9 - T5 ; # else const float TX = A [ 3 ]* B [ 0 ] + A [ 0 ]* B [ 3 ] + A [ 1 ]* B [ 2 ] - A [ 2 ]* B [ 1 ] ; const float TY = A [ 3 ]* B [ 1 ] - A [ 0 ]* B [ 2 ] + A [ 1 ]* B [ 3 ] + A [ 2 ]* B [ 0 ] ; const float TZ = A [ 3 ]* B [ 2 ] + A [ 0 ]* B [ 1 ] - A [ 1 ]* B [ 0 ] + A [ 2 ]* B [ 3 ] ; const float TW = A [ 3 ]* B [ 3 ] - A [ 0 ]* B [ 0 ] - A [ 1 ]* B [ 1 ] - A [ 2 ]* B [ 2 ] ; R [ 0 ] = TX ; R [ 1 ] = TY ; R [ 2 ] = TZ ; R [ 3 ] = TW ; # endif } void)",
    "insertText": "VectorQuaternionMultiply(VectorRegister4Double* RESTRICT Result, const VectorRegister4Double* RESTRICT Quat1, const VectorRegister4Double* RESTRICT Quat2)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (typedef double Double4 [ 4 ] ; const Double4&)",
    "insertText": "A((const Double4*)Quat1)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (const Double4&)",
    "insertText": "B((const Double4*)Quat2)"
  },
  {
    "label": "T9()",
    "kind": "Method",
    "detail": "Function (const double T8 = T5 + T6 + T7 ; const double)",
    "insertText": "T9(T4 + T8)"
  },
  {
    "label": "VectorQuaternionMultiply2()",
    "kind": "Method",
    "detail": "Function (R [ 0 ] = T1 + T9 - T8 ; R [ 1 ] = T2 + T9 - T7 ; R [ 2 ] = T3 + T9 - T6 ; R [ 3 ] = T0 + T9 - T5 ; # else const double TX = A [ 3 ]* B [ 0 ] + A [ 0 ]* B [ 3 ] + A [ 1 ]* B [ 2 ] - A [ 2 ]* B [ 1 ] ; const double TY = A [ 3 ]* B [ 1 ] - A [ 0 ]* B [ 2 ] + A [ 1 ]* B [ 3 ] + A [ 2 ]* B [ 0 ] ; const double TZ = A [ 3 ]* B [ 2 ] + A [ 0 ]* B [ 1 ] - A [ 1 ]* B [ 0 ] + A [ 2 ]* B [ 3 ] ; const double TW = A [ 3 ]* B [ 3 ] - A [ 0 ]* B [ 0 ] - A [ 1 ]* B [ 1 ] - A [ 2 ]* B [ 2 ] ; R [ 0 ] = TX ; R [ 1 ] = TY ; R [ 2 ] = TZ ; R [ 3 ] = TW ; # endif } VectorRegister4Float)",
    "insertText": "VectorQuaternionMultiply2(const VectorRegister4Float& Quat1, const VectorRegister4Float& Quat2)"
  },
  {
    "label": "VectorQuaternionMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Result ;)",
    "insertText": "VectorQuaternionMultiply(&Result, &Quat1, &Quat2)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (typedef double Double4x4 [ 4 ] [ 4 ] ; const Double4x4&)",
    "insertText": "A((const Double4x4*)Matrix1)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (const Double4x4&)",
    "insertText": "B((const Double4x4*)Matrix2)"
  },
  {
    "label": "VectorMatrixMultiply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorMatrixMultiply(FMatrix44f* Result, const FMatrix44f* Matrix1, const FMatrix44f* Matrix2)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (typedef float Float4x4 [ 4 ] [ 4 ] ; const Float4x4&)",
    "insertText": "A((const Float4x4*)Matrix1)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (const Float4x4&)",
    "insertText": "B((const Float4x4*)Matrix2)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (Float4x4 Temp ; Temp [ 0 ] [ 0 ] = A [ 0 ] [ 0 ]* B [ 0 ] [ 0 ] + A [ 0 ] [ 1 ]* B [ 1 ] [ 0 ] + A [ 0 ] [ 2 ]* B [ 2 ] [ 0 ] + A [ 0 ] [ 3 ]* B [ 3 ] [ 0 ] ; Temp [ 0 ] [ 1 ] = A [ 0 ] [ 0 ]* B [ 0 ] [ 1 ] + A [ 0 ] [ 1 ]* B [ 1 ] [ 1 ] + A [ 0 ] [ 2 ]* B [ 2 ] [ 1 ] + A [ 0 ] [ 3 ]* B [ 3 ] [ 1 ] ; Temp [ 0 ] [ 2 ] = A [ 0 ] [ 0 ]* B [ 0 ] [ 2 ] + A [ 0 ] [ 1 ]* B [ 1 ] [ 2 ] + A [ 0 ] [ 2 ]* B [ 2 ] [ 2 ] + A [ 0 ] [ 3 ]* B [ 3 ] [ 2 ] ; Temp [ 0 ] [ 3 ] = A [ 0 ] [ 0 ]* B [ 0 ] [ 3 ] + A [ 0 ] [ 1 ]* B [ 1 ] [ 3 ] + A [ 0 ] [ 2 ]* B [ 2 ] [ 3 ] + A [ 0 ] [ 3 ]* B [ 3 ] [ 3 ] ; Temp [ 1 ] [ 0 ] = A [ 1 ] [ 0 ]* B [ 0 ] [ 0 ] + A [ 1 ] [ 1 ]* B [ 1 ] [ 0 ] + A [ 1 ] [ 2 ]* B [ 2 ] [ 0 ] + A [ 1 ] [ 3 ]* B [ 3 ] [ 0 ] ; Temp [ 1 ] [ 1 ] = A [ 1 ] [ 0 ]* B [ 0 ] [ 1 ] + A [ 1 ] [ 1 ]* B [ 1 ] [ 1 ] + A [ 1 ] [ 2 ]* B [ 2 ] [ 1 ] + A [ 1 ] [ 3 ]* B [ 3 ] [ 1 ] ; Temp [ 1 ] [ 2 ] = A [ 1 ] [ 0 ]* B [ 0 ] [ 2 ] + A [ 1 ] [ 1 ]* B [ 1 ] [ 2 ] + A [ 1 ] [ 2 ]* B [ 2 ] [ 2 ] + A [ 1 ] [ 3 ]* B [ 3 ] [ 2 ] ; Temp [ 1 ] [ 3 ] = A [ 1 ] [ 0 ]* B [ 0 ] [ 3 ] + A [ 1 ] [ 1 ]* B [ 1 ] [ 3 ] + A [ 1 ] [ 2 ]* B [ 2 ] [ 3 ] + A [ 1 ] [ 3 ]* B [ 3 ] [ 3 ] ; Temp [ 2 ] [ 0 ] = A [ 2 ] [ 0 ]* B [ 0 ] [ 0 ] + A [ 2 ] [ 1 ]* B [ 1 ] [ 0 ] + A [ 2 ] [ 2 ]* B [ 2 ] [ 0 ] + A [ 2 ] [ 3 ]* B [ 3 ] [ 0 ] ; Temp [ 2 ] [ 1 ] = A [ 2 ] [ 0 ]* B [ 0 ] [ 1 ] + A [ 2 ] [ 1 ]* B [ 1 ] [ 1 ] + A [ 2 ] [ 2 ]* B [ 2 ] [ 1 ] + A [ 2 ] [ 3 ]* B [ 3 ] [ 1 ] ; Temp [ 2 ] [ 2 ] = A [ 2 ] [ 0 ]* B [ 0 ] [ 2 ] + A [ 2 ] [ 1 ]* B [ 1 ] [ 2 ] + A [ 2 ] [ 2 ]* B [ 2 ] [ 2 ] + A [ 2 ] [ 3 ]* B [ 3 ] [ 2 ] ; Temp [ 2 ] [ 3 ] = A [ 2 ] [ 0 ]* B [ 0 ] [ 3 ] + A [ 2 ] [ 1 ]* B [ 1 ] [ 3 ] + A [ 2 ] [ 2 ]* B [ 2 ] [ 3 ] + A [ 2 ] [ 3 ]* B [ 3 ] [ 3 ] ; Temp [ 3 ] [ 0 ] = A [ 3 ] [ 0 ]* B [ 0 ] [ 0 ] + A [ 3 ] [ 1 ]* B [ 1 ] [ 0 ] + A [ 3 ] [ 2 ]* B [ 2 ] [ 0 ] + A [ 3 ] [ 3 ]* B [ 3 ] [ 0 ] ; Temp [ 3 ] [ 1 ] = A [ 3 ] [ 0 ]* B [ 0 ] [ 1 ] + A [ 3 ] [ 1 ]* B [ 1 ] [ 1 ] + A [ 3 ] [ 2 ]* B [ 2 ] [ 1 ] + A [ 3 ] [ 3 ]* B [ 3 ] [ 1 ] ; Temp [ 3 ] [ 2 ] = A [ 3 ] [ 0 ]* B [ 0 ] [ 2 ] + A [ 3 ] [ 1 ]* B [ 1 ] [ 2 ] + A [ 3 ] [ 2 ]* B [ 2 ] [ 2 ] + A [ 3 ] [ 3 ]* B [ 3 ] [ 2 ] ; Temp [ 3 ] [ 3 ] = A [ 3 ] [ 0 ]* B [ 0 ] [ 3 ] + A [ 3 ] [ 1 ]* B [ 1 ] [ 3 ] + A [ 3 ] [ 2 ]* B [ 2 ] [ 3 ] + A [ 3 ] [ 3 ]* B [ 3 ] [ 3 ] ;)",
    "insertText": "memcpy(Result, &Temp, 16 * sizeof(float))"
  },
  {
    "label": "VectorMatrixInverse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "VectorMatrixInverse(FMatrix44d* DstMatrix, const FMatrix44d* SrcMatrix)"
  },
  {
    "label": "VectorMatrixInverse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "VectorMatrixInverse(FMatrix44f* DstMatrix, const FMatrix44f* SrcMatrix)"
  },
  {
    "label": "VectorTransformVector()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorTransformVector(const VectorRegister4Float& VecP, const FMatrix44f* MatrixM)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (typedef float Float4x4 [ 4 ] [ 4 ] ; VectorRegister4Float Result ; const Float4x4&)",
    "insertText": "M((const Float4x4*)MatrixM)"
  },
  {
    "label": "VectorTransformVector()",
    "kind": "Method",
    "detail": "Function (Result . V [ 0 ] = VecP . V [ 0 ]* M [ 0 ] [ 0 ] + VecP . V [ 1 ]* M [ 1 ] [ 0 ] + VecP . V [ 2 ]* M [ 2 ] [ 0 ] + VecP . V [ 3 ]* M [ 3 ] [ 0 ] ; Result . V [ 1 ] = VecP . V [ 0 ]* M [ 0 ] [ 1 ] + VecP . V [ 1 ]* M [ 1 ] [ 1 ] + VecP . V [ 2 ]* M [ 2 ] [ 1 ] + VecP . V [ 3 ]* M [ 3 ] [ 1 ] ; Result . V [ 2 ] = VecP . V [ 0 ]* M [ 0 ] [ 2 ] + VecP . V [ 1 ]* M [ 1 ] [ 2 ] + VecP . V [ 2 ]* M [ 2 ] [ 2 ] + VecP . V [ 3 ]* M [ 3 ] [ 2 ] ; Result . V [ 3 ] = VecP . V [ 0 ]* M [ 0 ] [ 3 ] + VecP . V [ 1 ]* M [ 1 ] [ 3 ] + VecP . V [ 2 ]* M [ 2 ] [ 3 ] + VecP . V [ 3 ]* M [ 3 ] [ 3 ] ; return Result ; } VectorRegister4Float)",
    "insertText": "VectorTransformVector(const VectorRegister4Float& VecP, const FMatrix44d* MatrixM)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (typedef double Double4x4 [ 4 ] [ 4 ] ; VectorRegister4Double Tmp,Result ; Tmp =)",
    "insertText": "MakeVectorRegisterDouble(VecP)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (const Double4x4&)",
    "insertText": "M((const Double4x4*)MatrixM)"
  },
  {
    "label": "MakeVectorRegisterFloatFromDouble()",
    "kind": "Method",
    "detail": "Function (Result . V [ 0 ] = Tmp . V [ 0 ]* M [ 0 ] [ 0 ] + Tmp . V [ 1 ]* M [ 1 ] [ 0 ] + Tmp . V [ 2 ]* M [ 2 ] [ 0 ] + Tmp . V [ 3 ]* M [ 3 ] [ 0 ] ; Result . V [ 1 ] = Tmp . V [ 0 ]* M [ 0 ] [ 1 ] + Tmp . V [ 1 ]* M [ 1 ] [ 1 ] + Tmp . V [ 2 ]* M [ 2 ] [ 1 ] + Tmp . V [ 3 ]* M [ 3 ] [ 1 ] ; Result . V [ 2 ] = Tmp . V [ 0 ]* M [ 0 ] [ 2 ] + Tmp . V [ 1 ]* M [ 1 ] [ 2 ] + Tmp . V [ 2 ]* M [ 2 ] [ 2 ] + Tmp . V [ 3 ]* M [ 3 ] [ 2 ] ; Result . V [ 3 ] = Tmp . V [ 0 ]* M [ 0 ] [ 3 ] + Tmp . V [ 1 ]* M [ 1 ] [ 3 ] + Tmp . V [ 2 ]* M [ 2 ] [ 3 ] + Tmp . V [ 3 ]* M [ 3 ] [ 3 ] ; return)",
    "insertText": "MakeVectorRegisterFloatFromDouble(Result)"
  },
  {
    "label": "VectorTransformVector()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorTransformVector(const VectorRegister4Double& VecP, const FMatrix44d* MatrixM)"
  },
  {
    "label": "VectorTransformVector()",
    "kind": "Method",
    "detail": "Function (Result . V [ 0 ] = VecP . V [ 0 ]* M [ 0 ] [ 0 ] + VecP . V [ 1 ]* M [ 1 ] [ 0 ] + VecP . V [ 2 ]* M [ 2 ] [ 0 ] + VecP . V [ 3 ]* M [ 3 ] [ 0 ] ; Result . V [ 1 ] = VecP . V [ 0 ]* M [ 0 ] [ 1 ] + VecP . V [ 1 ]* M [ 1 ] [ 1 ] + VecP . V [ 2 ]* M [ 2 ] [ 1 ] + VecP . V [ 3 ]* M [ 3 ] [ 1 ] ; Result . V [ 2 ] = VecP . V [ 0 ]* M [ 0 ] [ 2 ] + VecP . V [ 1 ]* M [ 1 ] [ 2 ] + VecP . V [ 2 ]* M [ 2 ] [ 2 ] + VecP . V [ 3 ]* M [ 3 ] [ 2 ] ; Result . V [ 3 ] = VecP . V [ 0 ]* M [ 0 ] [ 3 ] + VecP . V [ 1 ]* M [ 1 ] [ 3 ] + VecP . V [ 2 ]* M [ 2 ] [ 3 ] + VecP . V [ 3 ]* M [ 3 ] [ 3 ] ; return Result ; } VectorRegister4Double)",
    "insertText": "VectorTransformVector(const VectorRegister4Double& VecP, const FMatrix44f* MatrixM)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (Result . V [ 0 ] = VecP . V [ 0 ]* M [ 0 ] [ 0 ] + VecP . V [ 1 ]* M [ 1 ] [ 0 ] + VecP . V [ 2 ]* M [ 2 ] [ 0 ] + VecP . V [ 3 ]* M [ 3 ] [ 0 ] ; Result . V [ 1 ] = VecP . V [ 0 ]* M [ 0 ] [ 1 ] + VecP . V [ 1 ]* M [ 1 ] [ 1 ] + VecP . V [ 2 ]* M [ 2 ] [ 1 ] + VecP . V [ 3 ]* M [ 3 ] [ 1 ] ; Result . V [ 2 ] = VecP . V [ 0 ]* M [ 0 ] [ 2 ] + VecP . V [ 1 ]* M [ 1 ] [ 2 ] + VecP . V [ 2 ]* M [ 2 ] [ 2 ] + VecP . V [ 3 ]* M [ 3 ] [ 2 ] ; Result . V [ 3 ] = VecP . V [ 0 ]* M [ 0 ] [ 3 ] + VecP . V [ 1 ]* M [ 1 ] [ 3 ] + VecP . V [ 2 ]* M [ 2 ] [ 3 ] + VecP . V [ 3 ]* M [ 3 ] [ 3 ] ; return Result ; } VectorRegister4Float)",
    "insertText": "VectorMin(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec ; Vec . V [ 0 ] =)",
    "insertText": "Min(Vec1.V[0], Vec2.V[0])"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Vec . V [ 1 ] =)",
    "insertText": "Min(Vec1.V[1], Vec2.V[1])"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Vec . V [ 2 ] =)",
    "insertText": "Min(Vec1.V[2], Vec2.V[2])"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Vec . V [ 3 ] =)",
    "insertText": "Min(Vec1.V[3], Vec2.V[3])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Vec ; Vec . V [ 0 ] =)",
    "insertText": "Max(Vec1.V[0], Vec2.V[0])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Vec . V [ 1 ] =)",
    "insertText": "Max(Vec1.V[1], Vec2.V[1])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Vec . V [ 2 ] =)",
    "insertText": "Max(Vec1.V[2], Vec2.V[2])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Vec . V [ 3 ] =)",
    "insertText": "Max(Vec1.V[3], Vec2.V[3])"
  },
  {
    "label": "VectorCombineHigh()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCombineHigh(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorCombineLow()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCombineLow(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorCombineLow()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCombineLow(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorDeinterleave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorDeinterleave(VectorRegister4Float& RESTRICT OutEvens, VectorRegister4Float& RESTRICT OutOdds, const VectorRegister4Float& RESTRICT Lo, const VectorRegister4Float& RESTRICT Hi)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (OutEvens =)",
    "insertText": "MakeVectorRegister(Lo.V[0], Lo.V[2], Hi.V[0], Hi.V[2])"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (OutOdds =)",
    "insertText": "MakeVectorRegister(Lo.V[1], Lo.V[3], Hi.V[1], Hi.V[3])"
  },
  {
    "label": "VectorDeinterleave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorDeinterleave(VectorRegister4Double& RESTRICT OutEvens, VectorRegister4Double& RESTRICT OutOdds, const VectorRegister4Double& RESTRICT Lo, const VectorRegister4Double& RESTRICT Hi)"
  },
  {
    "label": "VectorMergeVecXYZ_VecW()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorMergeVecXYZ_VecW(const VectorRegister4Float& VecXYZ, const VectorRegister4Float& VecW)"
  },
  {
    "label": "VectorMergeVecXYZ_VecW()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorMergeVecXYZ_VecW(const VectorRegister4Double& VecXYZ, const VectorRegister4Double& VecW)"
  },
  {
    "label": "VectorLoadByte4()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VectorLoadByte4(Ptr ) MakeVectorRegisterFloat( float(((const uint8*)(Ptr))[0]), float(((const uint8*)(Ptr))[1]), float(((const uint8*)(Ptr))[2]), float(((const uint8*)(Ptr))[3]) ) #define VectorLoadSignedByte4( Ptr ) MakeVectorRegisterFloat( float(((const int8*)(Ptr))[0]), float(((const int8*)(Ptr))[1]), float(((const int8*)(Ptr))[2]), float(((const int8*)(Ptr))[3]) ) #define VectorLoadByte4Reverse( Ptr ) MakeVectorRegisterFloat( float(((const uint8*)(Ptr))[3]), float(((const uint8*)(Ptr))[2]), float(((const uint8*)(Ptr))[1]), float(((const uint8*)(Ptr))[0]) ) FORCEINLINE void VectorStoreByte4( const VectorRegister4Float& Vec, void* Ptr)"
  },
  {
    "label": "BytePtr()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "BytePtr(uint8*)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (BytePtr [ 0 ] =)",
    "insertText": "uint8(Vec.V[0])"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (BytePtr [ 1 ] =)",
    "insertText": "uint8(Vec.V[1])"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (BytePtr [ 2 ] =)",
    "insertText": "uint8(Vec.V[2])"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (BytePtr [ 3 ] =)",
    "insertText": "uint8(Vec.V[3])"
  },
  {
    "label": "VectorStoreSignedByte4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreSignedByte4(const VectorRegister4Float& Vec, void* Ptr)"
  },
  {
    "label": "BytePtr()",
    "kind": "Method",
    "detail": "Function (int8*)",
    "insertText": "BytePtr(int8*)"
  },
  {
    "label": "int8()",
    "kind": "Method",
    "detail": "Function (BytePtr [ 0 ] =)",
    "insertText": "int8(Vec.V[0])"
  },
  {
    "label": "int8()",
    "kind": "Method",
    "detail": "Function (BytePtr [ 1 ] =)",
    "insertText": "int8(Vec.V[1])"
  },
  {
    "label": "int8()",
    "kind": "Method",
    "detail": "Function (BytePtr [ 2 ] =)",
    "insertText": "int8(Vec.V[2])"
  },
  {
    "label": "int8()",
    "kind": "Method",
    "detail": "Function (BytePtr [ 3 ] =)",
    "insertText": "int8(Vec.V[3])"
  },
  {
    "label": "VectorLoadURGB10A2N()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadURGB10A2N(void* Ptr)"
  },
  {
    "label": "E()",
    "kind": "Method",
    "detail": "Function (float V [ 4 ] ; uint32)",
    "insertText": "E(uint32*)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] =)",
    "insertText": "float((E >> 00) & 0x3FF)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (V [ 1 ] =)",
    "insertText": "float((E >> 10) & 0x3FF)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (V [ 2 ] =)",
    "insertText": "float((E >> 20) & 0x3FF)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (V [ 3 ] =)",
    "insertText": "float((E >> 30) & 0x3)"
  },
  {
    "label": "VectorStoreURGB10A2N()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreURGB10A2N(const VectorRegister4Float& Vec, void* Ptr)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Tmp ; Tmp =)",
    "insertText": "VectorMax(Vec, MakeVectorRegisterFloat(0.0f, 0.0f, 0.0f, 0.0f))"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (Tmp =)",
    "insertText": "VectorMin(Tmp, MakeVectorRegisterFloat(1.0f, 1.0f, 1.0f, 1.0f))"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (Tmp =)",
    "insertText": "VectorMultiply(Tmp, MakeVectorRegisterFloat(1023.0f, 1023.0f, 1023.0f, 3.0f))"
  },
  {
    "label": "Out()",
    "kind": "Method",
    "detail": "Function (uint32*)",
    "insertText": "Out(uint32*)"
  },
  {
    "label": "Out()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "Out(uint32(Tmp.V[0]) & 0x3FF) << 00 | (uint32(Tmp.V[1]) & 0x3FF) << 10 | (uint32(Tmp.V[2]) & 0x3FF) << 20 | (uint32(Tmp.V[3]) & 0x003)"
  },
  {
    "label": "VectorAnyGreaterThan()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "VectorAnyGreaterThan(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorAnyGreaterThan()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "VectorAnyGreaterThan(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorResetFloatRegisters()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VectorResetFloatRegisters() #define VectorGetControlRegister() 0 #define VectorSetControlRegister(ControlStatus) #define VECTOR_ROUND_TOWARD_ZERO 0 #define VECTOR_DENORMALS_FLUSH_TO_ZERO 0 inline bool VectorContainsNaNOrInfinite(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorContainsNaNOrInfinite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "VectorContainsNaNOrInfinite(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorExp()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorExp(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorExp()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorExp(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorExp2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorExp2(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorExp2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorExp2(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorLog()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLog(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorLog()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLog(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorLog2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLog2(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorLog2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLog2(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorSin()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSin(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorSin()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSin(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorCos()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCos(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorCos()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCos(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorTan()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorTan(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorTan()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorTan(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorASin()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorASin(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorASin()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorASin(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorACos()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorACos(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorACos()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorACos(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorATan()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorATan(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorATan()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorATan(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorATan2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorATan2(const VectorRegister4Float& Y, const VectorRegister4Float& X)"
  },
  {
    "label": "VectorATan2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorATan2(const VectorRegister4Double& Y, const VectorRegister4Double& X)"
  },
  {
    "label": "VectorSinCos()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorSinCos(VectorRegister4Float* RESTRICT VSinAngles, VectorRegister4Float* RESTRICT VCosAngles, const VectorRegister4Float* RESTRICT VAngles)"
  },
  {
    "label": "SinCos()",
    "kind": "Method",
    "detail": "Function (union { VectorRegister4Float v ; float f [ 4 ] ; } VecSin,VecCos,VecAngles ; VecAngles . v =* VAngles ;)",
    "insertText": "SinCos(&VecSin.f[0], &VecCos.f[0], VecAngles.f[0])"
  },
  {
    "label": "SinCos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SinCos(&VecSin.f[1], &VecCos.f[1], VecAngles.f[1])"
  },
  {
    "label": "SinCos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SinCos(&VecSin.f[2], &VecCos.f[2], VecAngles.f[2])"
  },
  {
    "label": "SinCos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SinCos(&VecSin.f[3], &VecCos.f[3], VecAngles.f[3])"
  },
  {
    "label": "VectorSinCos()",
    "kind": "Method",
    "detail": "Function (* VSinAngles = VecSin . v ;* VCosAngles = VecCos . v ; } void)",
    "insertText": "VectorSinCos(VectorRegister4Double* RESTRICT VSinAngles, VectorRegister4Double* RESTRICT VCosAngles, const VectorRegister4Double* RESTRICT VAngles)"
  },
  {
    "label": "VectorSin()",
    "kind": "Method",
    "detail": "Function (* VSinAngles =)",
    "insertText": "VectorSin(*VAngles)"
  },
  {
    "label": "VectorCos()",
    "kind": "Method",
    "detail": "Function (* VCosAngles =)",
    "insertText": "VectorCos(*VAngles)"
  },
  {
    "label": "VectorCeil()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCeil(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorCeil()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCeil(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorFloor()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorFloor(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorFloor()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorFloor(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorTruncate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorTruncate(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorTruncate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorTruncate(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorRound()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorRound(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorRound()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorRound(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorRoundToIntHalfToEven()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorRoundToIntHalfToEven(const VectorRegister4Float& A)"
  },
  {
    "label": "VectorMod()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorMod(const VectorRegister4Float& X, const VectorRegister4Float& Y)"
  },
  {
    "label": "VectorMod()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorMod(const VectorRegister4Double& X, const VectorRegister4Double& Y)"
  },
  {
    "label": "VectorSign()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSign(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorSign()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSign(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorStep()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorStep(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorStep()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorStep(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorLoadURGBA16N()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadURGBA16N(void* Ptr)"
  },
  {
    "label": "E()",
    "kind": "Method",
    "detail": "Function (float V [ 4 ] ; uint16*)",
    "insertText": "E(uint16*)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] =)",
    "insertText": "float(E[0])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (V [ 1 ] =)",
    "insertText": "float(E[1])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (V [ 2 ] =)",
    "insertText": "float(E[2])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (V [ 3 ] =)",
    "insertText": "float(E[3])"
  },
  {
    "label": "VectorLoadSRGBA16N()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadSRGBA16N(void* Ptr)"
  },
  {
    "label": "E()",
    "kind": "Method",
    "detail": "Function (float V [ 4 ] ; int16*)",
    "insertText": "E(int16*)"
  },
  {
    "label": "VectorStoreURGBA16N()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreURGBA16N(const VectorRegister4Float& Vec, void* Ptr)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (Tmp =)",
    "insertText": "VectorMultiplyAdd(Tmp, MakeVectorRegisterFloat(65535.0f, 65535.0f, 65535.0f, 65535.0f), MakeVectorRegisterFloat(0.5f, 0.5f, 0.5f, 0.5f))"
  },
  {
    "label": "VectorTruncate()",
    "kind": "Method",
    "detail": "Function (Tmp =)",
    "insertText": "VectorTruncate(Tmp)"
  },
  {
    "label": "Out()",
    "kind": "Method",
    "detail": "Function (uint16*)",
    "insertText": "Out(uint16*)"
  },
  {
    "label": "Out()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Out(uint16)"
  },
  {
    "label": "VectorIntAnd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntAnd(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntOr()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntOr(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntXor()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntXor(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntAndNot()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntAndNot(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntNot()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntNot(const VectorRegister4Int& A)"
  },
  {
    "label": "VectorIntCompareEQ()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntCompareEQ(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntCompareNEQ()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntCompareNEQ(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntCompareGT()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntCompareGT(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntCompareLT()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntCompareLT(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntCompareGE()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntCompareGE(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntCompareLE()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntCompareLE(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntSelect()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntSelect(const VectorRegister4Int& Mask, const VectorRegister4Int& Vec1, const VectorRegister4Int& Vec2)"
  },
  {
    "label": "VectorIntAdd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntAdd(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntSubtract()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntSubtract(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntMultiply()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntMultiply(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntNegate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntNegate(const VectorRegister4Int& A)"
  },
  {
    "label": "VectorIntMin()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntMin(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntMax()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntMax(const VectorRegister4Int& A, const VectorRegister4Int& B)"
  },
  {
    "label": "VectorIntAbs()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntAbs(const VectorRegister4Int& A)"
  },
  {
    "label": "VectorIntSign()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VectorIntSign(A) VectorIntSelect( VectorIntCompareGE(A, GlobalVectorConstants::IntZero), GlobalVectorConstants::IntOne, GlobalVectorConstants::IntMinusOne ) FORCEINLINE VectorRegister4Float VectorIntToFloat(const VectorRegister4Int& A)"
  },
  {
    "label": "VectorFloatToInt()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorFloatToInt(const VectorRegister4Float& A)"
  },
  {
    "label": "VectorFloatToInt()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorFloatToInt(const VectorRegister4Double& A)"
  },
  {
    "label": "VectorDoubleToInt()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorDoubleToInt(const VectorRegister4Double& A)"
  },
  {
    "label": "VectorShuffleByte4()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorShuffleByte4(const VectorRegister4Int& Vec, const VectorRegister4Int& Mask)"
  },
  {
    "label": "VecPtr()",
    "kind": "Method",
    "detail": "Function (const int8*)",
    "insertText": "VecPtr(const int8*)"
  },
  {
    "label": "MaskPtr()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "MaskPtr(const uint8*)"
  },
  {
    "label": "OutPtr()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Int OutVec ; int8*)",
    "insertText": "OutPtr(int8*)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (uint32 NumBytes =)",
    "insertText": "sizeof(VectorRegister4Int)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 ZeroFill = NumBytes ;)",
    "insertText": "for(uint32 Index = 0; Index < NumBytes; ++Index)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (uint32 M = MaskPtr [ Index ] ; OutPtr [)",
    "insertText": "Index(M < ZeroFill)"
  },
  {
    "label": "VectorIntStore()",
    "kind": "Method",
    "detail": "Function (} return OutVec ; } void)",
    "insertText": "VectorIntStore(const VectorRegister4Int& A, const void* Ptr)"
  },
  {
    "label": "IntPtr()",
    "kind": "Method",
    "detail": "Function (int32*)",
    "insertText": "IntPtr(int32*)"
  },
  {
    "label": "VectorIntLoad()",
    "kind": "Method",
    "detail": "Function (IntPtr [ 0 ] = A . V [ 0 ] ; IntPtr [ 1 ] = A . V [ 1 ] ; IntPtr [ 2 ] = A . V [ 2 ] ; IntPtr [ 3 ] = A . V [ 3 ] ; } VectorRegister4Int)",
    "insertText": "VectorIntLoad(const void* Ptr)"
  },
  {
    "label": "VectorIntStoreAligned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorIntStoreAligned(const VectorRegister4Int& A, const void* Ptr)"
  },
  {
    "label": "VectorIntLoadAligned()",
    "kind": "Method",
    "detail": "Function (IntPtr [ 0 ] = A . V [ 0 ] ; IntPtr [ 1 ] = A . V [ 1 ] ; IntPtr [ 2 ] = A . V [ 2 ] ; IntPtr [ 3 ] = A . V [ 3 ] ; } VectorRegister4Int)",
    "insertText": "VectorIntLoadAligned(const void* Ptr)"
  },
  {
    "label": "VectorIntLoad1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorIntLoad1(const void* Ptr)"
  },
  {
    "label": "IntSplat()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IntSplat(int32*)"
  },
  {
    "label": "VectorInt64Load()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorInt64Load(const void* Ptr)"
  },
  {
    "label": "IntPtr()",
    "kind": "Method",
    "detail": "Function (int64*)",
    "insertText": "IntPtr(int64*)"
  },
  {
    "label": "VectorDoubleLoad()",
    "kind": "Method",
    "detail": "Function (} VectorRegister2Double)",
    "insertText": "VectorDoubleLoad(const void* Ptr)"
  }
]