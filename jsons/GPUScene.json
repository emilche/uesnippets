[
  {
    "label": "FRDGExternalAccessQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGExternalAccessQueue"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FLightSceneInfoCompact",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfoCompact"
  },
  {
    "label": "FGPUScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUScene"
  },
  {
    "label": "FGPUSceneDynamicContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUSceneDynamicContext"
  },
  {
    "label": "FViewUniformShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewUniformShaderParameters"
  },
  {
    "label": "FInstanceCullingOcclusionQueryRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceCullingOcclusionQueryRenderer"
  },
  {
    "label": "FScenePreUpdateChangeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScenePreUpdateChangeSet"
  },
  {
    "label": "FScenePostUpdateChangeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScenePostUpdateChangeSet"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FLightSceneChangeSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightSceneChangeSet"
  },
  {
    "label": "IShadowInvalidatingInstances",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IShadowInvalidatingInstances"
  },
  {
    "label": "FGPUScenePrimitiveCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUScenePrimitiveCollector"
  },
  {
    "label": "FUploadDataSourceAdapterDynamicPrimitives",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUploadDataSourceAdapterDynamicPrimitives"
  },
  {
    "label": "FPrimitiveData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveData"
  },
  {
    "label": "FUploadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUploadData"
  },
  {
    "label": "FInstanceProcessingGPULoadBalancer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceProcessingGPULoadBalancer"
  },
  {
    "label": "FGPUSceneInstanceRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGPUSceneInstanceRange"
  },
  {
    "label": "FRegisteredBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisteredBuffers"
  },
  {
    "label": "FDeferredGPUWrite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredGPUWrite"
  },
  {
    "label": "FGPUSceneScopeBeginEndHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUSceneScopeBeginEndHelper"
  },
  {
    "label": "FBatchedPrimitiveShaderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedPrimitiveShaderData"
  },
  {
    "label": "DECLARE_GPU_STAT_NAMED_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderResource . h \" # include \" RendererInterface . h \" # include \" PrimitiveUniformShaderParameters . h \" # include \" PrimitiveSceneInfo . h \" # include \" SpanAllocator . h \" # include \" GrowOnlySpanAllocator . h \" # include \" InstanceCulling / InstanceCullingLoadBalancer . h \" # include \" MeshBatch . h \" # include \" LightSceneData . h \" # include \" SceneUniformBuffer . h \" # include \" UnifiedBuffer . h \" # include \" ScenePrimitiveUpdates . h \" class FRDGExternalAccessQueue ; class FRHICommandList ; class FScene ; class FViewInfo ; class FLightSceneInfoCompact ; class FGPUScene ; class FGPUSceneDynamicContext ; class FViewUniformShaderParameters ; class FInstanceCullingOcclusionQueryRenderer ; class FScenePreUpdateChangeSet ; class FScenePostUpdateChangeSet ; class FPrimitiveSceneProxy ; struct FLightSceneChangeSet ; namespace UE::Renderer::Private { class IShadowInvalidatingInstances ; })",
    "insertText": "DECLARE_GPU_STAT_NAMED_EXTERN(GPUSceneUpdate, TEXT(\"GPUSceneUpdate\")) BEGIN_SHADER_PARAMETER_STRUCT(FGPUSceneResourceParameters, RENDERER_API) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, GPUSceneInstanceSceneData) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, GPUSceneInstancePayloadData) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, GPUScenePrimitiveSceneData) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, GPUSceneLightmapData) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FLightSceneData>, GPUSceneLightData) SHADER_PARAMETER(uint32, InstanceDataSOAStride) SHADER_PARAMETER(uint32, GPUSceneFrameNumber) SHADER_PARAMETER(int32, NumInstances) SHADER_PARAMETER(int32, NumScenePrimitives) END_SHADER_PARAMETER_STRUCT() DECLARE_SCENE_UB_STRUCT(FGPUSceneResourceParameters, GPUScene, RENDERER_API)"
  },
  {
    "label": "FGPUScenePrimitiveCollector()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FGPUScenePrimitiveCollector(FGPUSceneDynamicContext* InGPUSceneDynamicContext = nullptr) : GPUSceneDynamicContext(InGPUSceneDynamicContext)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Add(const FMeshBatchDynamicPrimitiveData* MeshBatchData, const FPrimitiveUniformShaderParameters& PrimitiveShaderParams, uint32 NumInstances, uint32& OutPrimitiveIndex, uint32& OutInstanceSceneDataOffset)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit()"
  },
  {
    "label": "NumInstances()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumInstances()"
  },
  {
    "label": "CheckPrimitiveProcessed()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK void)",
    "insertText": "CheckPrimitiveProcessed(uint32 PrimitiveIndex, const FGPUScene& GPUScene)"
  },
  {
    "label": "AllocateUploadData()",
    "kind": "Method",
    "detail": "Function (# endif private : class FGPUScene ; class FGPUSceneDynamicContext ; struct FUploadDataSourceAdapterDynamicPrimitives ; struct FPrimitiveData { FMeshBatchDynamicPrimitiveData SourceData ; const FPrimitiveUniformShaderParameters* ShaderParams = nullptr ; uint32 NumInstances = 0 ; uint32 LocalInstanceSceneDataOffset = INDEX_NONE ; uint32 LocalPayloadDataOffset = INDEX_NONE ; } ; struct FUploadData { TArray<FPrimitiveData,TInlineAllocator<8>> PrimitiveData ; TArray<uint32> GPUWritePrimitives ; uint32 InstanceSceneDataOffset = INDEX_NONE ; uint32 TotalInstanceCount = 0 ; uint32 InstancePayloadDataOffset = INDEX_NONE ; uint32 InstancePayloadDataFloat4Count = 0 ; bool bIsUploaded = false ; } ; FUploadData*)",
    "insertText": "AllocateUploadData()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TRange<int32> PrimitiveIdRange = TRange<int32)",
    "insertText": "Empty()"
  },
  {
    "label": "FGPUSceneDynamicContext()",
    "kind": "Method",
    "detail": "Function (FUploadData* UploadData = nullptr ; bool bCommitted = false ; FGPUSceneDynamicContext* GPUSceneDynamicContext = nullptr ; } ; class FInstanceProcessingGPULoadBalancer ; class FGPUSceneDynamicContext { public :)",
    "insertText": "FGPUSceneDynamicContext(FGPUScene& InGPUScene) : GPUScene(InGPUScene)"
  },
  {
    "label": "FGPUSceneDynamicContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGPUSceneDynamicContext()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "AllocateDynamicPrimitiveData()",
    "kind": "Method",
    "detail": "Function (private : class FGPUScene ; class FGPUScenePrimitiveCollector ; FGPUScenePrimitiveCollector::FUploadData*)",
    "insertText": "AllocateDynamicPrimitiveData()"
  },
  {
    "label": "FGPUSceneInstanceRange()",
    "kind": "Method",
    "detail": "Function (UE::FMutex DymamicPrimitiveUploadDataMutex ; TArray<FGPUScenePrimitiveCollector::FUploadData*,TInlineAllocator<1 2 8,SceneRenderingAllocator>> DymamicPrimitiveUploadData ; FGPUScene& GPUScene ; } ; struct FGPUSceneInstanceRange {)",
    "insertText": "FGPUSceneInstanceRange(FPersistentPrimitiveIndex InPrimitive, uint32 InInstanceSceneDataOffset, uint32 InNumInstanceSceneDataEntries) : Primitive(InPrimitive) , InstanceSceneDataOffset(InInstanceSceneDataOffset) , NumInstanceSceneDataEntries(InNumInstanceSceneDataEntries)"
  },
  {
    "label": "FGPUScene()",
    "kind": "Method",
    "detail": "Function (} FPersistentPrimitiveIndex Primitive ; uint32 InstanceSceneDataOffset ; uint32 NumInstanceSceneDataEntries ; } ; class FGPUScene { public :)",
    "insertText": "FGPUScene(FScene &InScene)"
  },
  {
    "label": "FGPUScene()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGPUScene()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (using FUpdateFromComputeCommands = FScenePrimitiveUpdates::TPayloadRangeView<FUpdateInstanceFromComputeCommand> ; void)",
    "insertText": "SetEnabled(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRendering()"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "FreeInstanceSceneDataSlots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeInstanceSceneDataSlots(int32 InstanceSceneDataOffset, int32 NumInstanceSceneDataEntries)"
  },
  {
    "label": "AllocateInstancePayloadDataSlots()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AllocateInstancePayloadDataSlots(int32 NumInstancePayloadFloat4Entries)"
  },
  {
    "label": "FreeInstancePayloadDataSlots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeInstancePayloadDataSlots(int32 InstancePayloadDataOffset, int32 NumInstancePayloadFloat4Entries)"
  },
  {
    "label": "UploadDynamicPrimitiveShaderDataForView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UploadDynamicPrimitiveShaderDataForView(FRDGBuilder& GraphBuilder, FViewInfo& View, bool bRayTracing = false, UE::Renderer::Private::IShadowInvalidatingInstances *ShadowInvalidatingInstances = nullptr)"
  },
  {
    "label": "FillSceneUniformBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FillSceneUniformBuffer(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& SceneUB)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& SceneUB, FRDGExternalAccessQueue& ExternalAccessQueue, const FUpdateFromComputeCommands& UpdatesFromCompute, const UE::Tasks::FTask& UpdateTaskPrerequisites = {})"
  },
  {
    "label": "AddPrimitiveToUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrimitiveToUpdate(FPersistentPrimitiveIndex PersistentPrimitiveIndex, EPrimitiveDirtyState DirtyState = EPrimitiveDirtyState::ChangedAll)"
  },
  {
    "label": "GetSceneFrameNumber()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSceneFrameNumber()"
  },
  {
    "label": "GetNumPrimitives()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumPrimitives()"
  },
  {
    "label": "GetInstanceIdUpperBoundGPU()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetInstanceIdUpperBoundGPU()"
  },
  {
    "label": "GetInstanceSceneDataAllocator()",
    "kind": "Method",
    "detail": "Function (const FSpanAllocator&)",
    "insertText": "GetInstanceSceneDataAllocator()"
  },
  {
    "label": "DebugRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugRender(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& SceneUniformBuffer, FViewInfo& View)"
  },
  {
    "label": "ConsolidateInstanceDataAllocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsolidateInstanceDataAllocations()"
  },
  {
    "label": "ExecuteDeferredGPUWritePass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteDeferredGPUWritePass(FRDGBuilder& GraphBuilder, TArray<FViewInfo>& Views, EGPUSceneGPUWritePass Pass)"
  },
  {
    "label": "HasPendingGPUWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingGPUWrite(uint32 PrimitiveId)"
  },
  {
    "label": "OnPreSceneUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreSceneUpdate(FRDGBuilder& GraphBuilder, const FScenePreUpdateChangeSet& ScenePreUpdateData)"
  },
  {
    "label": "OnPostSceneUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostSceneUpdate(FRDGBuilder& GraphBuilder, const FScenePostUpdateChangeSet& ScenePostUpdateData)"
  },
  {
    "label": "OnPostLightSceneInfoUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostLightSceneInfoUpdate(FRDGBuilder& OnPostLightSceneInfoUpdate, const FLightSceneChangeSet& LightsPostUpdateData)"
  },
  {
    "label": "GetScene()",
    "kind": "Method",
    "detail": "Function (bool bUpdateAllPrimitives ; TRefCountPtr<FRDGPooledBuffer> PrimitiveBuffer ; FRDGAsyncScatterUploadBuffer PrimitiveUploadBuffer ; TRefCountPtr<FRDGPooledBuffer> InstanceSceneDataBuffer ; FRDGAsyncScatterUploadBuffer InstanceSceneUploadBuffer ; uint32 InstanceSceneDataSOAStride ; FSpanAllocator InstancePayloadDataAllocator ; TRefCountPtr<FRDGPooledBuffer> InstancePayloadDataBuffer ; FRDGAsyncScatterUploadBuffer InstancePayloadUploadBuffer ; FSpanAllocator LightmapDataAllocator ; TRefCountPtr<FRDGPooledBuffer> LightmapDataBuffer ; FRDGAsyncScatterUploadBuffer LightmapUploadBuffer ; using FInstanceRange = FGPUSceneInstanceRange ; using FInstanceGPULoadBalancer = TInstanceCullingLoadBalancer<SceneRenderingAllocator> ; const FScene&)",
    "insertText": "GetScene()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (private : int32 InitialBufferSize = 2 5 6 ; TRefCountPtr<FRDGPooledBuffer> LightDataBuffer ; struct FRegisteredBuffers { bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (const int32 NewSize =)",
    "insertText": "Align(NewSizeIn, 64)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (PrimitiveDirtyState .)",
    "insertText": "AddZeroed(NewSize - PrimitiveDirtyState.Num())"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} } TArray<FPersistentPrimitiveIndex> PrimitivesToUpdate ; FRegisteredBuffers CachedRegisteredBuffers ; TArray<EPrimitiveDirtyState> PrimitiveDirtyState ; TArray<FInstanceRange> InstanceRangesToClear ; struct FDeferredGPUWrite { FGPUSceneWriteDelegate DataWriterGPU ; int32 ViewId = INDEX_NONE ; uint32 PrimitiveId = INDEX_NONE ; uint32 InstanceSceneDataOffset = INDEX_NONE ; uint32 NumCustomDataFloats = INDEX_NONE ; uint32 PackedInstanceSceneDataFlags = 0 u ; } ; uint32 NumDeferredGPUWritePasses =)",
    "insertText": "uint32(EGPUSceneGPUWritePass::Num)"
  },
  {
    "label": "CommitPrimitiveCollector()",
    "kind": "Method",
    "detail": "Function (TArray<FDeferredGPUWrite> DeferredGPUWritePassDelegates [ NumDeferredGPUWritePasses ] ; EGPUSceneGPUWritePass LastDeferredGPUWritePass = EGPUSceneGPUWritePass::None ; TRange<int32>)",
    "insertText": "CommitPrimitiveCollector(FGPUScenePrimitiveCollector& PrimitiveCollector)"
  },
  {
    "label": "UpdateBufferAllocations()",
    "kind": "Method",
    "detail": "Function (class FGPUScenePrimitiveCollector ; uint32 SceneFrameNumber = 0 xFFFFFFFF ; int32 DynamicPrimitivesOffset = 0 ; bool bIsEnabled = false ; bool bInBeginEndBlock = false ; FGPUSceneDynamicContext* CurrentDynamicContext = nullptr ; int32 NumScenePrimitives = 0 ; ERHIFeatureLevel::Type FeatureLevel ; template<FUploadDataSourceAdapter> FRegisteredBuffers)",
    "insertText": "UpdateBufferAllocations(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& SceneUB, const FUploadDataSourceAdapter& UploadDataSourceAdapter)"
  },
  {
    "label": "RegisterBuffers()",
    "kind": "Method",
    "detail": "Function (FRegisteredBuffers)",
    "insertText": "RegisterBuffers(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "UploadGeneral()",
    "kind": "Method",
    "detail": "Function (template<FUploadDataSourceAdapter> void)",
    "insertText": "UploadGeneral(FRDGBuilder& GraphBuilder, const FRegisteredBuffers& BufferState, FRDGExternalAccessQueue* ExternalAccessQueue, const FUploadDataSourceAdapter& UploadDataSourceAdapter, const UE::Tasks::FTask& PrerequisiteTask)"
  },
  {
    "label": "UpdateGPULights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGPULights(FRDGBuilder& GraphBuilder, const UE::Tasks::FTask& PrerequisiteTask)"
  },
  {
    "label": "InitLightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitLightData(const FLightSceneInfoCompact& LightInfoCompact, bool bAllowStaticLighting, uint32 LightShaderParameterFlags, FLightSceneData& DataOut)"
  },
  {
    "label": "UploadDynamicPrimitiveShaderDataForViewInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UploadDynamicPrimitiveShaderDataForViewInternal(FRDGBuilder& GraphBuilder, FViewInfo& View, bool bRayTracing, UE::Renderer::Private::IShadowInvalidatingInstances *ShadowInvalidatingInstances)"
  },
  {
    "label": "UpdateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInternal(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& SceneUB, FRDGExternalAccessQueue& ExternalAccessQueue, const UE::Tasks::FTask& UpdateTaskPrerequisites, const FUpdateFromComputeCommands& UpdatesFromCompute)"
  },
  {
    "label": "AddUpdatePrimitiveIdsPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUpdatePrimitiveIdsPass(FRDGBuilder& GraphBuilder, FInstanceGPULoadBalancer& IdOnlyUpdateItems)"
  },
  {
    "label": "AddClearInstancesPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearInstancesPass(FRDGBuilder& GraphBuilder, FInstanceCullingOcclusionQueryRenderer* OcclusionQueryRenderer = nullptr)"
  },
  {
    "label": "FGPUSceneScopeBeginEndHelper()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING FDelegateHandle ScreenMessageDelegate ; bool bLoggedInstanceOverflow = false ; uint32 MaxInstancesDuringPrevUpdate = 0 ; # endif } ; class FGPUSceneScopeBeginEndHelper { public :)",
    "insertText": "FGPUSceneScopeBeginEndHelper(FRDGBuilder& GraphBuilder, FGPUScene& InGPUScene, FGPUSceneDynamicContext &GPUSceneDynamicContext) : GPUScene(InGPUScene)"
  },
  {
    "label": "BeginRender()",
    "kind": "Method",
    "detail": "Function (GPUScene .)",
    "insertText": "BeginRender(GraphBuilder, GPUSceneDynamicContext)"
  },
  {
    "label": "FGPUSceneScopeBeginEndHelper()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGPUSceneScopeBeginEndHelper()"
  },
  {
    "label": "EndRender()",
    "kind": "Method",
    "detail": "Function (GPUScene .)",
    "insertText": "EndRender()"
  },
  {
    "label": "FGPUSceneScopeBeginEndHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGPUSceneScopeBeginEndHelper(const FGPUSceneScopeBeginEndHelper&)"
  },
  {
    "label": "FBatchedPrimitiveShaderData()",
    "kind": "Method",
    "detail": "Function (FGPUScene& GPUScene ; } ; struct FBatchedPrimitiveShaderData { const uint32 DataStrideInFloat4s = BATCHED_PRIMITIVE_DATA_STRIDE_FLOAT4 ; TStaticArray<FVector4f,DataStrideInFloat4s> Data ;)",
    "insertText": "FBatchedPrimitiveShaderData() : Data(InPlace, NoInit)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup(GetIdentityPrimitiveParameters())"
  },
  {
    "label": "FBatchedPrimitiveShaderData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBatchedPrimitiveShaderData(const FPrimitiveUniformShaderParameters& PrimitiveUniformShaderParameters) : Data(InPlace, NoInit)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup(PrimitiveUniformShaderParameters)"
  },
  {
    "label": "FBatchedPrimitiveShaderData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBatchedPrimitiveShaderData(const FPrimitiveSceneProxy* Proxy)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emplace(FBatchedPrimitiveShaderData* Dest, const FPrimitiveUniformShaderParameters& ShaderParams)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emplace(FBatchedPrimitiveShaderData* Dest, const FPrimitiveSceneProxy* Proxy)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Setup(const FPrimitiveUniformShaderParameters& PrimitiveUniformShaderParameters)"
  }
]