[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "UBillboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBillboardComponent"
  },
  {
    "label": "UTraceQueryTestResults",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTraceQueryTestResults"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FFunctionalTestExternalProfiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFunctionalTestExternalProfiler"
  },
  {
    "label": "FStatsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatsData"
  },
  {
    "label": "FUNCTIONALTESTING_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUNCTIONALTESTING_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFunctionalTestInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionalTestInfo"
  },
  {
    "label": "AFunctionalTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AFunctionalTest"
  },
  {
    "label": "UFuncTestRenderingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFuncTestRenderingComponent"
  },
  {
    "label": "UTextRenderComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextRenderComponent"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / Object . h \" # include \" Math / RandomStream . h \" # include \" Stats / Stats2 . h \" # include \" GameFramework / Actor . h \" # include \" ProfilingDebugging / ExternalProfiler . h \" # include \" Math / StatisticalFloat . h \" # include \" Tests / AutomationCommon . h \" # include \" FunctionalTest . generated . h \" class Error ; class UBillboardComponent ; class UTraceQueryTestResults ; class UWorld ;)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"FunctionalTest\"), STATGROUP_FunctionalTest, STATCAT_Advanced)"
  },
  {
    "label": "StartProfiler()",
    "kind": "Method",
    "detail": "Function (# if UE_EXTERNAL_PROFILING_ENABLED class FFunctionalTestExternalProfiler : public FScopedExternalProfilerBase { public : void)",
    "insertText": "StartProfiler(const bool bWantPause)"
  },
  {
    "label": "StartScopedTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartScopedTimer(bWantPause)"
  },
  {
    "label": "StopProfiler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopProfiler()"
  },
  {
    "label": "StopScopedTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopScopedTimer()"
  },
  {
    "label": "FStatsData()",
    "kind": "Method",
    "detail": "Function (} } ; # endif struct FStatsData {)",
    "insertText": "FStatsData() :NumFrames(0), SumTimeSeconds(0.0f)"
  },
  {
    "label": "FPerfStatsRecord()",
    "kind": "Method",
    "detail": "Function (} uint32 NumFrames ; float SumTimeSeconds ; FStatisticalFloat FrameTimeTracker ; FStatisticalFloat GameThreadTimeTracker ; FStatisticalFloat RenderThreadTimeTracker ; FStatisticalFloat GPUTimeTracker ; } ; struct FPerfStatsRecord {)",
    "insertText": "FPerfStatsRecord(FString InName)"
  },
  {
    "label": "SetBudgets()",
    "kind": "Method",
    "detail": "Function (FString Name ; FStatsData Record ; FStatsData Baseline ; float GPUBudget ; float RenderThreadBudget ; float GameThreadBudget ; void)",
    "insertText": "SetBudgets(float InGPUBudget, float InRenderThreadBudget, float InGameThreadBudget)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sample(UWorld* Owner, float DeltaSeconds, bool bBaseline)"
  },
  {
    "label": "GetReportString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReportString()"
  },
  {
    "label": "GetBaselineString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBaselineString()"
  },
  {
    "label": "GetRecordString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRecordString()"
  },
  {
    "label": "GetOverBudgetString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOverBudgetString()"
  },
  {
    "label": "GetGPUTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGPUTimes(double& OutMin, double& OutMax, double& OutAvg)"
  },
  {
    "label": "GetGameThreadTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGameThreadTimes(double& OutMin, double& OutMax, double& OutAvg)"
  },
  {
    "label": "GetRenderThreadTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRenderThreadTimes(double& OutMin, double& OutMax, double& OutAvg)"
  },
  {
    "label": "IsWithinGPUBudget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWithinGPUBudget()"
  },
  {
    "label": "IsWithinGameThreadBudget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWithinGameThreadBudget()"
  },
  {
    "label": "IsWithinRenderThreadBudget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWithinRenderThreadBudget()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Equal_To,Not_Equal_To,Greater_Than_Or_Equal_To,Less_Than_Or_Equal_To,Greater_Than,Less_Than } ;)",
    "insertText": "UCLASS(Blueprintable)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UAutomationPerformaceHelper()",
    "kind": "Method",
    "detail": "Function (bool bRecordingBasicStats ; bool bRecordingBaselineBasicStats ; bool bRecordingCPUCapture ; bool bRecordingStatsFile ; bool bGPUTraceIfBelowBudget ; public :)",
    "insertText": "UAutomationPerformaceHelper()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetCurrentRecord()",
    "kind": "Method",
    "detail": "Function (const FPerfStatsRecord*)",
    "insertText": "GetCurrentRecord()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (Default,Invalid,Error,Running,Failed,Succeeded } ; FString)",
    "insertText": "LexToString(const EFunctionalTestResult TestResult)"
  },
  {
    "label": "MapPackageToAutomationPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MapPackageToAutomationPath(const FString& MapPackageName)"
  },
  {
    "label": "FFunctionalTestInfo()",
    "kind": "Method",
    "detail": "Function (struct FFunctionalTestInfo {)",
    "insertText": "FFunctionalTestInfo(FString BeautifiedName, FString TestCommand, FString TestTags) : BeautifiedName(BeautifiedName), TestCommand(TestCommand), TestTags(TestTags)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (ProjectDefault,OutputIsError,OutputIgnored } ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FFunctionalTestEventSignature)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FFunctionalTestDoneSignature, class AFunctionalTest*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(hidecategories=( Actor, Input, Rendering, HLOD ), Blueprintable)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AFunctionalTest(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "LogStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogStep(ELogVerbosity::Type Verbosity, const FString& Message)"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "RunTest(const TArray<FString>& Params = TArray<FString>())"
  },
  {
    "label": "GetCurrentStepName()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "GetCurrentStepName()"
  },
  {
    "label": "StartStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartStep(const FString& StepName)"
  },
  {
    "label": "FinishStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishStep()"
  },
  {
    "label": "IsInStep()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInStep()"
  },
  {
    "label": "GatherRelevantActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherRelevantActors(TArray<AActor*>& OutActors)"
  },
  {
    "label": "WantsToRunAgain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantsToRunAgain()"
  },
  {
    "label": "GetAdditionalTestFinishedMessage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAdditionalTestFinishedMessage(EFunctionalTestResult TestResult)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "GetReproString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReproString()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "OnSelectObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectObject(UObject* NewSelection)"
  },
  {
    "label": "OnConstruction()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnConstruction(const FTransform& Transform)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "CanChangeIsSpatiallyLoadedFlag()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "CanChangeIsSpatiallyLoadedFlag()"
  },
  {
    "label": "PrepareTest()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PrepareTest()"
  },
  {
    "label": "StartTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTest()"
  },
  {
    "label": "IsReady_Implementation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReady_Implementation()"
  },
  {
    "label": "OnTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeout()"
  },
  {
    "label": "GoToObservationPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoToObservationPoint()"
  },
  {
    "label": "GetSpriteComponent()",
    "kind": "Method",
    "detail": "Function (uint32 RunFrame ; float RunTime ; uint32 StartFrame ; float StartTime ; private : bool bIsReady ; TSharedPtr<FScopedTestEnvironment> EnvSetup ; public : UBillboardComponent*)",
    "insertText": "GetSpriteComponent()"
  }
]