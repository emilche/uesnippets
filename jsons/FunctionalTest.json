[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "UBillboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBillboardComponent"
  },
  {
    "label": "UTraceQueryTestResults",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTraceQueryTestResults"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FFunctionalTestExternalProfiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFunctionalTestExternalProfiler"
  },
  {
    "label": "FStatsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatsData"
  },
  {
    "label": "FUNCTIONALTESTING_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUNCTIONALTESTING_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FUNCTIONALTESTING_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUNCTIONALTESTING_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFunctionalTestInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionalTestInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AFunctionalTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AFunctionalTest"
  },
  {
    "label": "FUNCTIONALTESTING_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUNCTIONALTESTING_API"
  },
  {
    "label": "UFuncTestRenderingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFuncTestRenderingComponent"
  },
  {
    "label": "UTextRenderComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextRenderComponent"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "SetBudgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBudgets(float InGPUBudget, float InRenderThreadBudget, float InGameThreadBudget)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sample(UWorld* Owner, float DeltaSeconds, bool bBaseline)"
  },
  {
    "label": "UAutomationPerformaceHelper()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "UAutomationPerformaceHelper()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sample(float DeltaSeconds)"
  },
  {
    "label": "BeginRecordingBaseline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRecordingBaseline(FString RecordName)"
  },
  {
    "label": "EndRecordingBaseline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRecordingBaseline()"
  },
  {
    "label": "BeginRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRecording(FString RecordName,\tfloat InGPUBudget, float InRenderThreadBudget, float InGameThreadBudget)"
  },
  {
    "label": "EndRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRecording()"
  },
  {
    "label": "WriteLogFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLogFile(const FString& CaptureDir, const FString& CaptureExtension)"
  },
  {
    "label": "OnBeginTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginTests()"
  },
  {
    "label": "OnAllTestsComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllTestsComplete()"
  },
  {
    "label": "StartCPUProfiling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCPUProfiling()"
  },
  {
    "label": "StopCPUProfiling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCPUProfiling()"
  },
  {
    "label": "TriggerGPUTraceIfRecordFallsBelowBudget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerGPUTraceIfRecordFallsBelowBudget()"
  },
  {
    "label": "BeginStatsFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginStatsFile(const FString& RecordName)"
  },
  {
    "label": "EndStatsFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndStatsFile()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FUNCTIONALTESTING_API)",
    "insertText": "LexToString(const EFunctionalTestResult TestResult)"
  },
  {
    "label": "MapPackageToAutomationPath()",
    "kind": "Method",
    "detail": "Function (FUNCTIONALTESTING_API)",
    "insertText": "MapPackageToAutomationPath(const FString& MapPackageName)"
  },
  {
    "label": "AssertTrue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertTrue(bool Condition, const FString& Message, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertFalse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertFalse(bool Condition, const FString& Message, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertIsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertIsValid(UObject* Object, const FString& Message, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertValue_Int()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertValue_Int(int32 Actual, EComparisonMethod ShouldBe, int32 Expected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertValue_Float()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertValue_Float(float Actual, EComparisonMethod ShouldBe, float Expected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertValue_Double()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertValue_Double(double Actual, EComparisonMethod ShouldBe, double Expected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertValue_DateTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertValue_DateTime(FDateTime Actual, EComparisonMethod ShouldBe, FDateTime Expected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Transform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Transform(const FTransform& Actual, const FTransform& Expected, const FString& What, float Tolerance = 1.e-4f, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Float()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Float(float Actual, float Expected, const FString& What, float Tolerance = 1.e-4f, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Double()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Double(double Actual, double Expected, const FString& What, double Tolerance = 1.e-4, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Bool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Bool(bool Actual, bool Expected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Int()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Int(int Actual, int Expected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Name()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Name(FName Actual, FName Expected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Object()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Object(UObject* Actual, UObject* Expected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertNotEqual_Transform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertNotEqual_Transform(const FTransform& Actual, const FTransform& NotExpected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Rotator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Rotator(FRotator Actual, FRotator Expected, const FString& What, float Tolerance = 1.e-4f, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_RotatorOrientation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_RotatorOrientation(FRotator Actual, FRotator Expected, const FString& What, float Tolerance = 1.e-4f, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertNotEqual_Rotator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertNotEqual_Rotator(FRotator Actual, FRotator NotExpected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Vector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Vector(FVector Actual, FVector Expected, const FString& What, float Tolerance = 1.e-4f, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertNotEqual_Vector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertNotEqual_Vector(FVector Actual, FVector NotExpected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Vector2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Vector2D(FVector2D Actual, FVector2D Expected, const FString& What, float Tolerance = 1.e-4f, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertNotEqual_Vector2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertNotEqual_Vector2D(FVector2D Actual, FVector2D NotExpected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Box2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Box2D(FBox2D Actual, FBox2D Expected, const FString& What, float Tolerance = 1.e-4f, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertNotEqual_Box2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertNotEqual_Box2D(FBox2D Actual, FBox2D NotExpected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Vector4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Vector4(FVector4 Actual, FVector4 Expected, const FString& What, float Tolerance = 1.e-4f, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertNotEqual_Vector4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertNotEqual_Vector4(FVector4 Actual, FVector4 NotExpected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Plane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Plane(FPlane Actual, FPlane Expected, const FString& What, float Tolerance = 1.e-4f, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertNotEqual_Plane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertNotEqual_Plane(FPlane Actual, FPlane NotExpected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Quat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Quat(FQuat Actual, FQuat Expected, const FString& What, float Tolerance = 1.e-4f, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertNotEqual_Quat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertNotEqual_Quat(FQuat Actual, FQuat NotExpected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_Matrix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_Matrix(FMatrix Actual, FMatrix Expected, const FString& What, float Tolerance = 1.e-4f, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertNotEqual_Matrix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertNotEqual_Matrix(FMatrix Actual, FMatrix NotExpected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_String()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_String(FString Actual, FString Expected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertNotEqual_String()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertNotEqual_String(FString Actual, FString NotExpected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AssertEqual_TraceQueryResults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertEqual_TraceQueryResults(const UTraceQueryTestResults* Actual, const UTraceQueryTestResults* Expected, const FString& What, const UObject* ContextObject = nullptr)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarning(const FString& Message)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(const FString& Message)"
  },
  {
    "label": "AddInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInfo(const FString& Message)"
  },
  {
    "label": "LogStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogStep(ELogVerbosity::Type Verbosity, const FString& Message)"
  },
  {
    "label": "StartStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartStep(const FString& StepName)"
  },
  {
    "label": "FinishStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishStep()"
  },
  {
    "label": "FinishTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishTest(EFunctionalTestResult TestResult, const FString& Message)"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMessage(const FString& Message)"
  },
  {
    "label": "SetTimeLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeLimit(float NewTimeLimit, EFunctionalTestResult ResultWhenTimeRunsOut)"
  },
  {
    "label": "AddRerun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRerun(FName Reason)"
  },
  {
    "label": "SetConsoleVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConsoleVariable(const FString& Name, const FString& InValue)"
  },
  {
    "label": "SetConsoleVariableFromInteger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConsoleVariableFromInteger(const FString& Name, const int32 InValue)"
  },
  {
    "label": "SetConsoleVariableFromFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConsoleVariableFromFloat(const FString& Name, const float InValue)"
  },
  {
    "label": "SetConsoleVariableFromBoolean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConsoleVariableFromBoolean(const FString& Name, const bool InValue)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FString()"
  },
  {
    "label": "RegisterAutoDestroyActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAutoDestroyActor(AActor* ActorToAutoDestroy)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "OnSelectObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectObject(UObject* NewSelection)"
  },
  {
    "label": "PrepareTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareTest()"
  },
  {
    "label": "ReceivePrepareTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivePrepareTest()"
  },
  {
    "label": "StartTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTest()"
  },
  {
    "label": "ReceiveStartTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveStartTest()"
  },
  {
    "label": "IsReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReady()"
  },
  {
    "label": "IsReady_Implementation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReady_Implementation()"
  },
  {
    "label": "OnTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeout()"
  },
  {
    "label": "GoToObservationPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoToObservationPoint()"
  }
]