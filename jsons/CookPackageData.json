[
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FCookWorkerClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerClient"
  },
  {
    "label": "FPackagePreloader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePreloader"
  },
  {
    "label": "FRequestCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestCluster"
  },
  {
    "label": "FConstructPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstructPackageData"
  },
  {
    "label": "FDiscoveredPlatformSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveredPlatformSet"
  },
  {
    "label": "FPackageDataQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageDataQueue"
  },
  {
    "label": "FRequestCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestCluster"
  },
  {
    "label": "FGenerationHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerationHelper"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FPackageDataMonitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDataMonitor"
  },
  {
    "label": "FPendingCookedPlatformDataCancelManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingCookedPlatformDataCancelManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCachedCookedPlatformDataState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedCookedPlatformDataState"
  },
  {
    "label": "FCachedObjectInOuter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedObjectInOuter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FConstructPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstructPackageData"
  },
  {
    "label": "FPackagePlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackagePlatformData"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "also",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "also"
  },
  {
    "label": "FPendingCookedPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingCookedPlatformData"
  },
  {
    "label": "FPendingCookedPlatformDataCancelManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingCookedPlatformDataCancelManager"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FPackageDataQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageDataQueue"
  },
  {
    "label": "held",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "held"
  },
  {
    "label": "FPackageDataMonitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDataMonitor"
  },
  {
    "label": "FDiscoveryQueueElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveryQueueElement"
  },
  {
    "label": "FRequestQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestQueue"
  },
  {
    "label": "FPackagePreloaderPriorityWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackagePreloaderPriorityWrapper"
  },
  {
    "label": "FPackagePreloaderPriorityQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePreloaderPriorityQueue"
  },
  {
    "label": "FLoadQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoadQueue"
  },
  {
    "label": "FThreadsafePackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadsafePackageData"
  },
  {
    "label": "also",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "also"
  },
  {
    "label": "FPackageDatas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDatas"
  },
  {
    "label": "forwards",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "forwards"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FPoppedPackageDataScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoppedPackageDataScope"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::Cook::FConstructPackageData& PackageData)"
  },
  {
    "label": "AddRefFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRefFrom(FPackageData* PackageData)"
  },
  {
    "label": "ReleaseFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseFrom(FPackageData* PackageData)"
  },
  {
    "label": "ResetReachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetReachable()"
  },
  {
    "label": "MarkAsExplorable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAsExplorable()"
  },
  {
    "label": "MarkCookableForWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkCookableForWorker(FCookWorkerClient& CookWorkerClient)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FPackagePlatformData)",
    "insertText": "check(Value != ECookResult::Invalid)"
  },
  {
    "label": "FPackageData()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FPackageData(FPackageDatas& PackageDatas, const FName& InPackageName, const FName& InFileName)"
  },
  {
    "label": "ClearReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearReferences()"
  },
  {
    "label": "SetLeafToRootRank()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLeafToRootRank(uint32 Value)"
  },
  {
    "label": "SetUrgency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUrgency(EUrgency NewUrgency, ESendFlags SendFlags, bool bAllowUrgencyInIdle = false)"
  },
  {
    "label": "RaiseUrgency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseUrgency(EUrgency NewUrgency, ESendFlags SendFlags, bool bAllowUrgencyInIdle = false)"
  },
  {
    "label": "AddReachablePlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReachablePlatforms(FRequestCluster& RequestCluster, TConstArrayView<const ITargetPlatform*> Platforms,\n\t\tFInstigator&& InInstigator)"
  },
  {
    "label": "QueueAsDiscovered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueAsDiscovered(FInstigator&& InInstigator, FDiscoveredPlatformSet&& ReachablePlatforms, EUrgency InUrgency)"
  },
  {
    "label": "ClearInProgressData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearInProgressData(EStateChangeReason StateChangeReason)"
  },
  {
    "label": "SetPlatformsCooked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformsCooked(const TConstArrayView<const ITargetPlatform*> TargetPlatforms,\n\t\tconst TConstArrayView<ECookResult> Succeeded, bool bInWasCookedThisSession = true)"
  },
  {
    "label": "SetPlatformsCooked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformsCooked(const TConstArrayView<const ITargetPlatform*> TargetPlatforms,\n\t\tECookResult Result, bool bInWasCookedThisSession = true)"
  },
  {
    "label": "SetPlatformCooked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformCooked(const ITargetPlatform* TargetPlatform, ECookResult Result,\n\t\tbool bInWasCookedThisSession = true)"
  },
  {
    "label": "ClearCookResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookResults(const TConstArrayView<const ITargetPlatform*> TargetPlatforms)"
  },
  {
    "label": "ClearCookResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookResults()"
  },
  {
    "label": "ClearCookResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookResults(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ResetReachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetReachable()"
  },
  {
    "label": "SetSuppressCookReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuppressCookReason(ESuppressCookReason Reason)"
  },
  {
    "label": "SetPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackage(UPackage* InPackage)"
  },
  {
    "label": "SendToState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendToState(EPackageState NextState, ESendFlags SendFlags, EStateChangeReason ReleaseSaveReason)"
  },
  {
    "label": "Stall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stall(EPackageState TargetState, ESendFlags SendFlags)"
  },
  {
    "label": "UnStall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnStall(ESendFlags SendFlags)"
  },
  {
    "label": "AddCompletionCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCompletionCallback(TConstArrayView<const ITargetPlatform*> TargetPlatforms,\n\t\tFCompletionCallback&& InCompletionCallback)"
  },
  {
    "label": "SetIsCookLast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsCookLast(bool bValue)"
  },
  {
    "label": "CreateObjectCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateObjectCache()"
  },
  {
    "label": "RefreshObjectCache()",
    "kind": "Method",
    "detail": "Function (EPollStatus)",
    "insertText": "RefreshObjectCache(bool& bOutFoundNewObjects)"
  },
  {
    "label": "ClearObjectCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearObjectCache()"
  },
  {
    "label": "GetMaxNumRetriesBeginCacheOnObjects()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxNumRetriesBeginCacheOnObjects()"
  },
  {
    "label": "SetSaveSubState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSaveSubState(ESaveSubState Value)"
  },
  {
    "label": "SetSaveSubStateComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSaveSubStateComplete(ESaveSubState Value)"
  },
  {
    "label": "UpdateSaveAfterGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSaveAfterGarbageCollect(bool& bOutDemote)"
  },
  {
    "label": "ClearCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookedPlatformData()"
  },
  {
    "label": "OnRemoveSessionPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveSessionPlatform(const ITargetPlatform* Platform)"
  },
  {
    "label": "RemapTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTargetPlatforms(const TMap<ITargetPlatform*, ITargetPlatform*>& Remap)"
  },
  {
    "label": "CreatePackagePreloader()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FPackagePreloader>)",
    "insertText": "CreatePackagePreloader()"
  },
  {
    "label": "OnPackagePreloaderDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPackagePreloaderDestroyed(FPackagePreloader& InPackagePreloader)"
  },
  {
    "label": "GetGenerationHelperIfValid()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FGenerationHelper>)",
    "insertText": "GetGenerationHelperIfValid()"
  },
  {
    "label": "CreateUninitializedGenerationHelper()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FGenerationHelper>)",
    "insertText": "CreateUninitializedGenerationHelper()"
  },
  {
    "label": "TryCreateValidGenerationHelper()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FGenerationHelper>)",
    "insertText": "TryCreateValidGenerationHelper(bool bCookedPlatformDataIsLoaded,\n\t\tbool& bOutNeedWaitForIsLoaded)"
  },
  {
    "label": "OnGenerationHelperDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGenerationHelperDestroyed(FGenerationHelper& InGenerationHelper)"
  },
  {
    "label": "SetGenerated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGenerated(FName InParentGenerator)"
  },
  {
    "label": "SetParentGenerationHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentGenerationHelper(FGenerationHelper* InGenerationHelper, EStateChangeReason StateChangeReason,\n\t\tFCookGenerationInfo* InfoOfPackageInGenerator = nullptr)"
  },
  {
    "label": "GetOrFindParentGenerationHelper()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FGenerationHelper>)",
    "insertText": "GetOrFindParentGenerationHelper()"
  },
  {
    "label": "TryCreateValidParentGenerationHelper()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FGenerationHelper>)",
    "insertText": "TryCreateValidParentGenerationHelper()"
  },
  {
    "label": "SetDoesGeneratedRequireGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDoesGeneratedRequireGenerator(ICookPackageSplitter::EGeneratedRequiresGenerator Value)"
  },
  {
    "label": "SetInstigator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstigator(FRequestCluster& Cluster, FInstigator&& InInstigator)"
  },
  {
    "label": "SetInstigator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstigator(FCookWorkerClient& Client, FInstigator&& InInstigator)"
  },
  {
    "label": "SetInstigator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstigator(FGenerationHelper& InGenerationHelper, FInstigator&& InInstigator)"
  },
  {
    "label": "SetWorkerAssignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorkerAssignment(FWorkerId InWorkerAssignment, ESendFlags SendFlags = ESendFlags::QueueAddAndRemove)"
  },
  {
    "label": "CreateConstructData()",
    "kind": "Method",
    "detail": "Function (FConstructPackageData)",
    "insertText": "CreateConstructData()"
  },
  {
    "label": "DetachUnsolicited()",
    "kind": "Method",
    "detail": "Function (EInstigator>)",
    "insertText": "DetachUnsolicited()"
  },
  {
    "label": "ClearUnsolicited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnsolicited()"
  },
  {
    "label": "GetReachablePlatformsForInstigator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReachablePlatformsForInstigator(UCookOnTheFlyServer& COTFS, FPackageData* InInstigator,\n\t\tTArray<const ITargetPlatform*>& Platforms)"
  },
  {
    "label": "GetReachablePlatformsForInstigator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReachablePlatformsForInstigator(UCookOnTheFlyServer& COTFS, FName InInstigator,\n\t\tTArray<const ITargetPlatform*>& Platforms)"
  },
  {
    "label": "UpdateContainerUrgency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateContainerUrgency(EUrgency OldUrgency, EUrgency NewUrgency)"
  },
  {
    "label": "SetInstigatorInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstigatorInternal(FInstigator&& InInstigator)"
  },
  {
    "label": "AddReachablePlatformsInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReachablePlatformsInternal(FPackageData& PackageData,\n\t\tTConstArrayView<const ITargetPlatform*> Platforms, FInstigator&& InInstigator)"
  },
  {
    "label": "QueueAsDiscoveredInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueAsDiscoveredInternal(FPackageData& PackageData, FInstigator&& InInstigator,\n\t\tFDiscoveredPlatformSet&& ReachablePlatforms, EUrgency InUrgency)"
  },
  {
    "label": "SetFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFileName(const FName& InFileName)"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(EPackageState NextState)"
  },
  {
    "label": "OnEnterIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterIdle()"
  },
  {
    "label": "OnExitIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitIdle()"
  },
  {
    "label": "OnEnterRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterRequest()"
  },
  {
    "label": "OnExitRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitRequest()"
  },
  {
    "label": "OnEnterAssignedToWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterAssignedToWorker()"
  },
  {
    "label": "OnExitAssignedToWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitAssignedToWorker()"
  },
  {
    "label": "OnEnterLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterLoad()"
  },
  {
    "label": "OnExitLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitLoad()"
  },
  {
    "label": "OnEnterSaveActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterSaveActive()"
  },
  {
    "label": "OnExitSaveActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitSaveActive()"
  },
  {
    "label": "OnEnterSaveStalledRetracted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterSaveStalledRetracted()"
  },
  {
    "label": "OnExitSaveStalledRetracted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitSaveStalledRetracted()"
  },
  {
    "label": "OnEnterSaveStalledAssignedToWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterSaveStalledAssignedToWorker()"
  },
  {
    "label": "OnExitSaveStalledAssignedToWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitSaveStalledAssignedToWorker()"
  },
  {
    "label": "OnExitInProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitInProgress(EStateChangeReason StateChangeReason)"
  },
  {
    "label": "OnEnterInProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterInProgress()"
  },
  {
    "label": "OnExitSaving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitSaving(EStateChangeReason ReleaseSaveReason, EPackageState NewState)"
  },
  {
    "label": "OnEnterSaving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterSaving()"
  },
  {
    "label": "OnExitAssignedToWorkerProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitAssignedToWorkerProperty()"
  },
  {
    "label": "OnEnterAssignedToWorkerProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterAssignedToWorkerProperty()"
  },
  {
    "label": "OnPackageDataFirstMarkedReachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPackageDataFirstMarkedReachable(FInstigator&& InInstigator)"
  },
  {
    "label": "ClearCachedCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedCookedPlatformData(UObject* Object, FPackageData& PackageData, bool bCompletedSuccesfully)"
  },
  {
    "label": "PollIsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollIsComplete()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "RemapTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTargetPlatforms(const TMap<ITargetPlatform*, ITargetPlatform*>& Remap)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(FPendingCookedPlatformData& Data)"
  },
  {
    "label": "FPackageDataMonitor()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FPackageDataMonitor()"
  },
  {
    "label": "OnInProgressChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInProgressChanged(FPackageData& PackageData, bool bInProgress)"
  },
  {
    "label": "OnPreloadAllocatedChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreloadAllocatedChanged(FPackageData& PackageData, bool bPreloadAllocated)"
  },
  {
    "label": "OnFirstCookedPlatformAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFirstCookedPlatformAdded(FPackageData& PackageData, ECookResult CookResult)"
  },
  {
    "label": "OnLastCookedPlatformRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLastCookedPlatformRemoved(FPackageData& PackageData)"
  },
  {
    "label": "OnUrgencyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUrgencyChanged(FPackageData& PackageData, EUrgency OldUrgency, EUrgency NewUrgency)"
  },
  {
    "label": "OnCookLastChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCookLastChanged(FPackageData& PackageData)"
  },
  {
    "label": "OnStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStateChanged(FPackageData& PackageData, EPackageState OldState)"
  },
  {
    "label": "TrackUrgentRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackUrgentRequests(EPackageState State, EUrgency Urgency, int32 Delta)"
  },
  {
    "label": "TrackCookLastRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackCookLastRequests(EPackageState State, int32 Delta)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Remove(FPackageData* PackageData)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "AddRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequest(FPackageData* PackageData, bool bForceUrgent=false)"
  },
  {
    "label": "AddReadyRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReadyRequest(FPackageData* PackageData, bool bForceUrgent = false)"
  },
  {
    "label": "RemoveRequest()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RemoveRequest(FPackageData* PackageData)"
  },
  {
    "label": "RemoveRequestExceptFromCluster()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RemoveRequestExceptFromCluster(FPackageData* PackageData, FRequestCluster* ExceptFromCluster)"
  },
  {
    "label": "UpdateUrgency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUrgency(FPackageData* PackageData, EUrgency bOldUrgency, EUrgency NewUrgency)"
  },
  {
    "label": "AddRequestFenceListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequestFenceListener(FName PackageName)"
  },
  {
    "label": "NotifyRequestFencePassed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRequestFencePassed(FPackageDatas& PackageDatas)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(TRefCountPtr<FPackagePreloader> Preloader)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const TRefCountPtr<FPackagePreloader>& Preloader)"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FPackagePreloader>)",
    "insertText": "PopFront()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FPackageData* PackageData)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Remove(FPackageData* PackageData)"
  },
  {
    "label": "UpdateUrgency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUrgency(FPackageData* PackageData, EUrgency bOldUrgency, EUrgency NewUrgency)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (TRangedForIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (TRangedForIterator)",
    "insertText": "end()"
  },
  {
    "label": "FPackageDatas()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FPackageDatas(UCookOnTheFlyServer& InCookOnTheFlyServer)"
  },
  {
    "label": "OnAssetRegistryGenerated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRegistryGenerated(IAssetRegistry& InAssetRegistry)"
  },
  {
    "label": "SetBeginCookConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBeginCookConfigSettings(FStringView CookShowInstigator)"
  },
  {
    "label": "GetNextLeafToRootRank()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNextLeafToRootRank()"
  },
  {
    "label": "ResetLeafToRootRank()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLeafToRootRank()"
  },
  {
    "label": "UpdateThreadsafePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateThreadsafePackageData(const FPackageData& PackageData)"
  },
  {
    "label": "UpdateThreadsafePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateThreadsafePackageData(FName PackageName, CallbackType&& Callback)"
  },
  {
    "label": "FindThreadsafePackageData()",
    "kind": "Method",
    "detail": "Function (TOptional<FThreadsafePackageData>)",
    "insertText": "FindThreadsafePackageData(FName PackageName)"
  },
  {
    "label": "GetFileNameByPackageName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFileNameByPackageName(FName PackageName, bool bRequireExists = true, bool bCreateAsMap = false)"
  },
  {
    "label": "TryGetNamesByFlexName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNamesByFlexName(FName PackageOrFileName, FName* OutPackageName = nullptr, FName* OutFileName = nullptr,\n\t\tbool bRequireExists = true, bool bCreateAsMap = false)"
  },
  {
    "label": "LookupFileNameOnDisk()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "LookupFileNameOnDisk(FName PackageName, bool bRequireExists = true, bool bCreateAsMap = false)"
  },
  {
    "label": "GetStandardFileName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetStandardFileName(FName FileName)"
  },
  {
    "label": "GetStandardFileName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetStandardFileName(FStringView FileName)"
  },
  {
    "label": "AddExistingPackageDatasForPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExistingPackageDatasForPlatform(TConstArrayView<FConstructPackageData> ExistingPackages,\n\t\tconst ITargetPlatform* TargetPlatform, bool bExpectPackageDatasAreNew, int32& OutPackageDataFromBaseGameNum)"
  },
  {
    "label": "GetNumCooked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCooked()"
  },
  {
    "label": "GetNumCooked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCooked(ECookResult CookResult)"
  },
  {
    "label": "GetCookedPackagesForPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCookedPackagesForPlatform(const ITargetPlatform* Platform, TArray<FPackageData*>& SucceededPackages,\n\t\tTArray<FPackageData*>& FailedPackages)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "ClearCookedPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookedPlatforms()"
  },
  {
    "label": "ClearCookResultsForPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookResultsForPackages(const TSet<FName>& InPackages)"
  },
  {
    "label": "OnRemoveSessionPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveSessionPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "AddPendingCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingCookedPlatformData(FPendingCookedPlatformData&& Data)"
  },
  {
    "label": "PollPendingCookedPlatformDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollPendingCookedPlatformDatas(bool bForce, double& LastCookableObjectTickTime)"
  },
  {
    "label": "ClearCancelManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCancelManager(FPackageData& PackageData)"
  },
  {
    "label": "RemapTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTargetPlatforms(const TMap<ITargetPlatform*, ITargetPlatform*>& Remap)"
  },
  {
    "label": "DebugInstigator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugInstigator(FPackageData& PackageData)"
  },
  {
    "label": "LockAndEnumeratePackageDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockAndEnumeratePackageDatas(CallbackType&& Callback)"
  },
  {
    "label": "CachedCookedPlatformDataObjectsPostGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachedCookedPlatformDataObjectsPostGarbageCollect(const TSet<UObject*>& SaveQueueObjectsThatStillExist)"
  },
  {
    "label": "EnumeratePackageDatasWithinLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumeratePackageDatasWithinLock(CallbackType&& Callback)"
  },
  {
    "label": "TryLookupFileNameOnDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLookupFileNameOnDisk(FName PackageName, FString& OutFileName)"
  },
  {
    "label": "LookupPackageNameOnDisk()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "LookupPackageNameOnDisk(FName NormalizedFileName, bool bExactMatchRequired, FName& FoundFileName)"
  },
  {
    "label": "FPoppedPackageDataScope()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FPoppedPackageDataScope(FPackageData& InPackageData)"
  },
  {
    "label": "ExistenceReadLock()",
    "kind": "Method",
    "detail": "Function (FReadScopeLock)",
    "insertText": "ExistenceReadLock(ExistenceLock)"
  },
  {
    "label": "ExistenceWriteLock()",
    "kind": "Method",
    "detail": "Function (FWriteScopeLock)",
    "insertText": "ExistenceWriteLock(ExistenceLock)"
  },
  {
    "label": "ExistenceReadLock()",
    "kind": "Method",
    "detail": "Function (FReadScopeLock)",
    "insertText": "ExistenceReadLock(ExistenceLock)"
  }
]