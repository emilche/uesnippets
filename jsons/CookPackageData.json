[
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FCookWorkerClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerClient"
  },
  {
    "label": "FPackagePreloader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePreloader"
  },
  {
    "label": "FRequestCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestCluster"
  },
  {
    "label": "FConstructPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstructPackageData"
  },
  {
    "label": "FDiscoveredPlatformSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveredPlatformSet"
  },
  {
    "label": "FPackageDataQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageDataQueue"
  },
  {
    "label": "FGenerationHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerationHelper"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FPackageDataMonitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDataMonitor"
  },
  {
    "label": "FPendingCookedPlatformDataCancelManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingCookedPlatformDataCancelManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCachedCookedPlatformDataState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedCookedPlatformDataState"
  },
  {
    "label": "FCachedObjectInOuter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedObjectInOuter"
  },
  {
    "label": "FPackagePlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackagePlatformData"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "FPendingCookedPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingCookedPlatformData"
  },
  {
    "label": "FDiscoveryQueueElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveryQueueElement"
  },
  {
    "label": "FRequestQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestQueue"
  },
  {
    "label": "FPackagePreloaderPriorityWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackagePreloaderPriorityWrapper"
  },
  {
    "label": "FPackagePreloaderPriorityQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePreloaderPriorityQueue"
  },
  {
    "label": "FLoadQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoadQueue"
  },
  {
    "label": "FThreadsafePackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadsafePackageData"
  },
  {
    "label": "FPackageDatas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDatas"
  },
  {
    "label": "FPoppedPackageDataScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoppedPackageDataScope"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CookTypes . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / RingBuffer . h \" # include \" Containers / SortedMap . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" IO / IoHash . h \" # include \" Math / NumericLimits . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Optional . h \" # include \" Misc / ScopeRWLock . h \" # include \" Templates / RefCounting . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" TypedBlockAllocator . h \" # include \" UObject / GCObject . h \" # include \" UObject / ICookInfo . h \" # include \" UObject / NameTypes . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class FReferenceCollector ; class ITargetPlatform ; class FCbFieldView ; class FCbWriter ; class UCookOnTheFlyServer ; class UObject ; class UPackage ; namespace UE::Cook { class FCookWorkerClient ; } namespace UE::Cook { class FPackagePreloader ; } namespace UE::Cook { class FRequestCluster ; } namespace UE::Cook { struct FConstructPackageData ; } namespace UE::Cook { struct FDiscoveredPlatformSet ; } FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const UE::Cook::FConstructPackageData& PackageData)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::Cook::FConstructPackageData& PackageData)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (namespace UE::Cook { class FPackageDataQueue ; class FRequestCluster ; struct FGenerationHelper ; struct FPackageData ; struct FPackageDataMonitor ; struct FPendingCookedPlatformDataCancelManager ; enum class ECachedCookedPlatformDataEvent : uint8 { None,BeginCacheForCookedPlatformDataCalled,IsCachedCookedPlatformDataLoadedCalled,IsCachedCookedPlatformDataLoadedReturnedTrue,ClearCachedCookedPlatformDataCalled,ClearAllCachedCookedPlatformDataCalled,} ; const TCHAR*)",
    "insertText": "LexToString(ECachedCookedPlatformDataEvent)"
  },
  {
    "label": "AddRefFrom()",
    "kind": "Method",
    "detail": "Function (struct FCachedCookedPlatformDataState { void)",
    "insertText": "AddRefFrom(FPackageData* PackageData)"
  },
  {
    "label": "ReleaseFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseFrom(FPackageData* PackageData)"
  },
  {
    "label": "IsReferenced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReferenced()"
  },
  {
    "label": "FCachedObjectInOuter()",
    "kind": "Method",
    "detail": "Function (TArray<FPackageData*,TInlineAllocator<2>> PackageDatas ; TMap<const ITargetPlatform*,ECachedCookedPlatformDataEvent> PlatformStates ; } ; struct FCachedObjectInOuter { FWeakObjectPtr Object ; EObjectFlags ObjectFlags ;)",
    "insertText": "FCachedObjectInOuter(UObject* InObject = nullptr)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (Object = InObject ; ObjectFlags = InObject ? InObject ->)",
    "insertText": "GetFlags()"
  },
  {
    "label": "FCachedObjectInOuter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCachedObjectInOuter(FWeakObjectPtr&& InObject)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Object =)",
    "insertText": "MoveTemp(InObject)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UObject* Ptr = Object .)",
    "insertText": "Get(true)"
  },
  {
    "label": "FCachedObjectInOuter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCachedObjectInOuter(const FWeakObjectPtr& InObject)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ESendFlags : uint8 { QueueNone = 0 x0,QueueRemove = 0 x1,QueueAdd = 0 x2,QueueAddAndRemove = QueueAdd | QueueRemove,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESendFlags)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FConstructPackageData { FCbWriter)",
    "insertText": "operator(FCbWriter& Writer, const FConstructPackageData& PackageData)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FConstructPackageData& PackageData)"
  },
  {
    "label": "CookerLoadingPlatformKey()",
    "kind": "Method",
    "detail": "Function (FName PackageName ; FName NormalizedFileName ; } ; # define)",
    "insertText": "CookerLoadingPlatformKey((ITargetPlatform*)0x1)"
  },
  {
    "label": "FPackagePlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackagePlatformData()"
  },
  {
    "label": "IsReachable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReachable()"
  },
  {
    "label": "bReachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bReachable(uint32)"
  },
  {
    "label": "IsVisitedByCluster()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVisitedByCluster()"
  },
  {
    "label": "bVisitedByCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bVisitedByCluster(uint32)"
  },
  {
    "label": "IsSaveTimedOut()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSaveTimedOut()"
  },
  {
    "label": "bSaveTimedOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bSaveTimedOut(uint32)"
  },
  {
    "label": "IsCookable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCookable()"
  },
  {
    "label": "bCookable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bCookable(uint32)"
  },
  {
    "label": "IsExplorable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsExplorable()"
  },
  {
    "label": "bExplorable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bExplorable(uint32)"
  },
  {
    "label": "IsExplorableOverride()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsExplorableOverride()"
  },
  {
    "label": "bExplorableOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bExplorableOverride(uint32)"
  },
  {
    "label": "ResetReachable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetReachable()"
  },
  {
    "label": "MarkAsExplorable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAsExplorable()"
  },
  {
    "label": "MarkCookableForWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkCookableForWorker(FCookWorkerClient& CookWorkerClient)"
  },
  {
    "label": "IsIterativelyUnmodified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIterativelyUnmodified()"
  },
  {
    "label": "bIterativelyUnmodified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bIterativelyUnmodified(uint32)"
  },
  {
    "label": "IsIterativelySkipped()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIterativelySkipped()"
  },
  {
    "label": "bIterativelySkipped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bIterativelySkipped(uint32)"
  },
  {
    "label": "GetCookResults()",
    "kind": "Method",
    "detail": "Function (} ECookResult)",
    "insertText": "GetCookResults()"
  },
  {
    "label": "IsCookAttempted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCookAttempted()"
  },
  {
    "label": "IsCookSucceeded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCookSucceeded()"
  },
  {
    "label": "SetCookResults()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCookResults(ECookResult Value)"
  },
  {
    "label": "CookResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookResults(uint32)"
  },
  {
    "label": "SetReportedToDirector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReportedToDirector(false)"
  },
  {
    "label": "NeedsCooking()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsCooking(const ITargetPlatform* PlatformItBelongsTo)"
  },
  {
    "label": "IsRegisteredForCachedObjectsInOuter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRegisteredForCachedObjectsInOuter()"
  },
  {
    "label": "IsReportedToDirector()",
    "kind": "Method",
    "detail": "Function (bRegisteredForCachedObjectsInOuter = bValue ; } bool)",
    "insertText": "IsReportedToDirector()"
  },
  {
    "label": "bReportedToDirector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bReportedToDirector(uint32)"
  },
  {
    "label": "CookResults()",
    "kind": "Method",
    "detail": "Function (} private : uint32 bReachable : 1 ; uint32 bVisitedByCluster : 1 ; uint32 bSaveTimedOut : 1 ; uint32 bCookable : 1 ; uint32 bExplorable : 1 ; uint32 bExplorableOverride : 1 ; uint32 bIterativelyUnmodified : 1 ; uint32 bIterativelySkipped : 1 ; uint32 bRegisteredForCachedObjectsInOuter : 1 ; uint32 bReportedToDirector : 1 ; uint32)",
    "insertText": "CookResults(int)"
  },
  {
    "label": "FPackageData()",
    "kind": "Method",
    "detail": "Function (} ; struct FPackageData { public :)",
    "insertText": "FPackageData(FPackageDatas& PackageDatas, const FName& InPackageName, const FName& InFileName)"
  },
  {
    "label": "FPackageData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPackageData()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t Size)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(size_t Size, void* PlacementNewPtr)"
  },
  {
    "label": "ClearReferences()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearReferences()"
  },
  {
    "label": "FPackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageData(const FPackageData& other)"
  },
  {
    "label": "FPackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageData(FPackageData&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPackageData&)",
    "insertText": "operator(const FPackageData& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPackageData&)",
    "insertText": "operator(FPackageData&& other)"
  },
  {
    "label": "GetPackageDatas()",
    "kind": "Method",
    "detail": "Function (FPackageDatas&)",
    "insertText": "GetPackageDatas()"
  },
  {
    "label": "GetFileName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetFileName()"
  },
  {
    "label": "GetLeafToRootRank()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetLeafToRootRank()"
  },
  {
    "label": "SetLeafToRootRank()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLeafToRootRank(uint32 Value)"
  },
  {
    "label": "GetPlatformsNeedingCooking()",
    "kind": "Method",
    "detail": "Function (template<ArrayType> void)",
    "insertText": "GetPlatformsNeedingCooking(ArrayType& OutPlatforms)"
  },
  {
    "label": "GetPlatformsNeedingCookingNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPlatformsNeedingCookingNum()"
  },
  {
    "label": "GetReachablePlatforms()",
    "kind": "Method",
    "detail": "Function (template<ArrayType> void)",
    "insertText": "GetReachablePlatforms(ArrayType& OutPlatforms)"
  },
  {
    "label": "IsPlatformVisitedByCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlatformVisitedByCluster(const ITargetPlatform* Platform)"
  },
  {
    "label": "HasReachablePlatforms()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReachablePlatforms(const TArrayView<const ITargetPlatform* const>& Platforms)"
  },
  {
    "label": "AreAllReachablePlatformsVisitedByCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllReachablePlatformsVisitedByCluster()"
  },
  {
    "label": "GetUrgency()",
    "kind": "Method",
    "detail": "Function (EUrgency)",
    "insertText": "GetUrgency()"
  },
  {
    "label": "SetUrgency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUrgency(EUrgency NewUrgency, ESendFlags SendFlags, bool bAllowUrgencyInIdle = false)"
  },
  {
    "label": "RaiseUrgency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseUrgency(EUrgency NewUrgency, ESendFlags SendFlags, bool bAllowUrgencyInIdle = false)"
  },
  {
    "label": "AddReachablePlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReachablePlatforms(FRequestCluster& RequestCluster, TConstArrayView<const ITargetPlatform*> Platforms, FInstigator&& InInstigator)"
  },
  {
    "label": "QueueAsDiscovered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueAsDiscovered(FInstigator&& InInstigator, FDiscoveredPlatformSet&& ReachablePlatforms, EUrgency InUrgency)"
  },
  {
    "label": "ClearInProgressData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearInProgressData(EStateChangeReason StateChangeReason)"
  },
  {
    "label": "SetPlatformsCooked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformsCooked(const TConstArrayView<const ITargetPlatform*> TargetPlatforms, const TConstArrayView<ECookResult> Succeeded, bool bInWasCookedThisSession = true)"
  },
  {
    "label": "SetPlatformsCooked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformsCooked(const TConstArrayView<const ITargetPlatform*> TargetPlatforms, ECookResult Result, bool bInWasCookedThisSession = true)"
  },
  {
    "label": "SetPlatformCooked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformCooked(const ITargetPlatform* TargetPlatform, ECookResult Result, bool bInWasCookedThisSession = true)"
  },
  {
    "label": "ClearCookResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookResults(const TConstArrayView<const ITargetPlatform*> TargetPlatforms)"
  },
  {
    "label": "ClearCookResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookResults()"
  },
  {
    "label": "ClearCookResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookResults(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "GetPlatformDatas()",
    "kind": "Method",
    "detail": "Function (const TSortedMap<const ITargetPlatform*,FPackagePlatformData,TInlineAllocator<1>>&)",
    "insertText": "GetPlatformDatas()"
  },
  {
    "label": "GetPlatformDatasConstKeysMutableValues()",
    "kind": "Method",
    "detail": "Function (TSortedMap<const ITargetPlatform*,FPackagePlatformData,TInlineAllocator<1>>&)",
    "insertText": "GetPlatformDatasConstKeysMutableValues()"
  },
  {
    "label": "FindOrAddPlatformData()",
    "kind": "Method",
    "detail": "Function (FPackagePlatformData&)",
    "insertText": "FindOrAddPlatformData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "FindPlatformData()",
    "kind": "Method",
    "detail": "Function (FPackagePlatformData*)",
    "insertText": "FindPlatformData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "HasAnyCookedPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyCookedPlatform()"
  },
  {
    "label": "HasAnyCookedPlatforms()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyCookedPlatforms(const TArrayView<const ITargetPlatform* const>& Platforms, bool bIncludeFailed)"
  },
  {
    "label": "HasAllCookedPlatforms()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAllCookedPlatforms(const TArrayView<const ITargetPlatform* const>& Platforms, bool bIncludeFailed)"
  },
  {
    "label": "HasCookedPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCookedPlatform(const ITargetPlatform* Platform, bool bIncludeFailed)"
  },
  {
    "label": "GetCookResults()",
    "kind": "Method",
    "detail": "Function (ECookResult)",
    "insertText": "GetCookResults(const ITargetPlatform* Platform)"
  },
  {
    "label": "GetSuppressCookReason()",
    "kind": "Method",
    "detail": "Function (ESuppressCookReason)",
    "insertText": "GetSuppressCookReason()"
  },
  {
    "label": "SetSuppressCookReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuppressCookReason(ESuppressCookReason Reason)"
  },
  {
    "label": "GetPackage()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "GetPackage()"
  },
  {
    "label": "SetPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackage(UPackage* InPackage)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (EPackageState)",
    "insertText": "GetState()"
  },
  {
    "label": "SendToState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendToState(EPackageState NextState, ESendFlags SendFlags, EStateChangeReason ReleaseSaveReason)"
  },
  {
    "label": "Stall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stall(EPackageState TargetState, ESendFlags SendFlags)"
  },
  {
    "label": "UnStall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnStall(ESendFlags SendFlags)"
  },
  {
    "label": "IsStalled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStalled()"
  },
  {
    "label": "CheckInContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckInContainer()"
  },
  {
    "label": "IsInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInProgress()"
  },
  {
    "label": "IsInStateProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInStateProperty(EPackageStateProperty Property)"
  },
  {
    "label": "GetCompletionCallback()",
    "kind": "Method",
    "detail": "Function (FCompletionCallback&)",
    "insertText": "GetCompletionCallback()"
  },
  {
    "label": "AddCompletionCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCompletionCallback(TConstArrayView<const ITargetPlatform*> TargetPlatforms, FCompletionCallback&& InCompletionCallback)"
  },
  {
    "label": "SetIsCookLast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsCookLast(bool bValue)"
  },
  {
    "label": "GetIsCookLast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsCookLast()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (bIsVisited = static_cast<)",
    "insertText": "uint32(bValue)"
  },
  {
    "label": "GetCachedObjectsInOuter()",
    "kind": "Method",
    "detail": "Function (} TArray<FCachedObjectInOuter>&)",
    "insertText": "GetCachedObjectsInOuter()"
  },
  {
    "label": "GetCachedObjectsInOuterPlatforms()",
    "kind": "Method",
    "detail": "Function (template<ArrayType> void)",
    "insertText": "GetCachedObjectsInOuterPlatforms(ArrayType& OutPlatforms)"
  },
  {
    "label": "CheckObjectCacheEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckObjectCacheEmpty()"
  },
  {
    "label": "CreateObjectCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateObjectCache()"
  },
  {
    "label": "RefreshObjectCache()",
    "kind": "Method",
    "detail": "Function (EPollStatus)",
    "insertText": "RefreshObjectCache(bool& bOutFoundNewObjects)"
  },
  {
    "label": "ClearObjectCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearObjectCache()"
  },
  {
    "label": "GetNumPendingCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (const int32&)",
    "insertText": "GetNumPendingCookedPlatformData()"
  },
  {
    "label": "GetCookedPlatformDataNextIndex()",
    "kind": "Method",
    "detail": "Function (const int32&)",
    "insertText": "GetCookedPlatformDataNextIndex()"
  },
  {
    "label": "GetNumRetriesBeginCacheOnObjects()",
    "kind": "Method",
    "detail": "Function (int32&)",
    "insertText": "GetNumRetriesBeginCacheOnObjects()"
  },
  {
    "label": "GetMaxNumRetriesBeginCacheOnObjects()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxNumRetriesBeginCacheOnObjects()"
  },
  {
    "label": "GetHasSaveCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHasSaveCache()"
  },
  {
    "label": "SetHasSaveCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasSaveCache(bool Value)"
  },
  {
    "label": "GetSaveSubState()",
    "kind": "Method",
    "detail": "Function (bHasSaveCache = Value ! = 0 ; } ESaveSubState)",
    "insertText": "GetSaveSubState()"
  },
  {
    "label": "SetSaveSubState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSaveSubState(ESaveSubState Value)"
  },
  {
    "label": "SetSaveSubStateComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSaveSubStateComplete(ESaveSubState Value)"
  },
  {
    "label": "UpdateSaveAfterGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSaveAfterGarbageCollect(bool& bOutDemote)"
  },
  {
    "label": "HasPrepareSaveFailed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPrepareSaveFailed()"
  },
  {
    "label": "SetHasPrepareSaveFailed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasPrepareSaveFailed(bool bValue)"
  },
  {
    "label": "IsPrepareSaveRequiresGC()",
    "kind": "Method",
    "detail": "Function (bPrepareSaveFailed = bValue ! = 0 ; } bool)",
    "insertText": "IsPrepareSaveRequiresGC()"
  },
  {
    "label": "CheckCookedPlatformDataEmpty()",
    "kind": "Method",
    "detail": "Function (bPrepareSaveRequiresGC = bValue ! = 0 ; } void)",
    "insertText": "CheckCookedPlatformDataEmpty()"
  },
  {
    "label": "ClearCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookedPlatformData()"
  },
  {
    "label": "GetMonitorCookResult()",
    "kind": "Method",
    "detail": "Function (ECookResult)",
    "insertText": "GetMonitorCookResult()"
  },
  {
    "label": "SetMonitorCookResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMonitorCookResult(ECookResult Value)"
  },
  {
    "label": "MonitorCookResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MonitorCookResult(uint8)"
  },
  {
    "label": "OnRemoveSessionPlatform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRemoveSessionPlatform(const ITargetPlatform* Platform)"
  },
  {
    "label": "HasReferencedObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReferencedObjects()"
  },
  {
    "label": "RemapTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTargetPlatforms(const TMap<ITargetPlatform*, ITargetPlatform*>& Remap)"
  },
  {
    "label": "GetPackagePreloader()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FPackagePreloader>)",
    "insertText": "GetPackagePreloader()"
  },
  {
    "label": "CreatePackagePreloader()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FPackagePreloader>)",
    "insertText": "CreatePackagePreloader()"
  },
  {
    "label": "OnPackagePreloaderDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPackagePreloaderDestroyed(FPackagePreloader& InPackagePreloader)"
  },
  {
    "label": "GetGenerationHelper()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FGenerationHelper>)",
    "insertText": "GetGenerationHelper()"
  },
  {
    "label": "GetGenerationHelperIfValid()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FGenerationHelper>)",
    "insertText": "GetGenerationHelperIfValid()"
  },
  {
    "label": "CreateUninitializedGenerationHelper()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FGenerationHelper>)",
    "insertText": "CreateUninitializedGenerationHelper()"
  },
  {
    "label": "TryCreateValidGenerationHelper()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FGenerationHelper>)",
    "insertText": "TryCreateValidGenerationHelper(bool bCookedPlatformDataIsLoaded, bool& bOutNeedWaitForIsLoaded)"
  },
  {
    "label": "OnGenerationHelperDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGenerationHelperDestroyed(FGenerationHelper& InGenerationHelper)"
  },
  {
    "label": "IsGenerated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGenerated()"
  },
  {
    "label": "SetGenerated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGenerated(FName InParentGenerator)"
  },
  {
    "label": "GetParentGenerator()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetParentGenerator()"
  },
  {
    "label": "SetParentGenerationHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentGenerationHelper(FGenerationHelper* InGenerationHelper, EStateChangeReason StateChangeReason, FCookGenerationInfo* InfoOfPackageInGenerator = nullptr)"
  },
  {
    "label": "GetParentGenerationHelper()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FGenerationHelper>)",
    "insertText": "GetParentGenerationHelper()"
  },
  {
    "label": "GetOrFindParentGenerationHelper()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FGenerationHelper>)",
    "insertText": "GetOrFindParentGenerationHelper()"
  },
  {
    "label": "TryCreateValidParentGenerationHelper()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FGenerationHelper>)",
    "insertText": "TryCreateValidParentGenerationHelper()"
  },
  {
    "label": "DoesGeneratedRequireGenerator()",
    "kind": "Method",
    "detail": "Function (ICookPackageSplitter::EGeneratedRequiresGenerator)",
    "insertText": "DoesGeneratedRequireGenerator()"
  },
  {
    "label": "SetDoesGeneratedRequireGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDoesGeneratedRequireGenerator(ICookPackageSplitter::EGeneratedRequiresGenerator Value)"
  },
  {
    "label": "GetInstigator()",
    "kind": "Method",
    "detail": "Function (const FInstigator&)",
    "insertText": "GetInstigator()"
  },
  {
    "label": "SetInstigator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstigator(FCookWorkerClient& Client, FInstigator&& InInstigator)"
  },
  {
    "label": "SetInstigator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstigator(FGenerationHelper& InGenerationHelper, FInstigator&& InInstigator)"
  },
  {
    "label": "IsKeepReferencedDuringGC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeepReferencedDuringGC()"
  },
  {
    "label": "SetKeepReferencedDuringGC()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeepReferencedDuringGC(bool Value)"
  },
  {
    "label": "GetWasCookedThisSession()",
    "kind": "Method",
    "detail": "Function (bKeepReferencedDuringGC = Value ! = 0 ; } bool)",
    "insertText": "GetWasCookedThisSession()"
  },
  {
    "label": "GetWorkerAssignment()",
    "kind": "Method",
    "detail": "Function (} FWorkerId)",
    "insertText": "GetWorkerAssignment()"
  },
  {
    "label": "GetWorkerAssignmentConstraint()",
    "kind": "Method",
    "detail": "Function (FWorkerId)",
    "insertText": "GetWorkerAssignmentConstraint()"
  },
  {
    "label": "CreateConstructData()",
    "kind": "Method",
    "detail": "Function (WorkerAssignmentConstraint = InWorkerAssignment ; } FConstructPackageData)",
    "insertText": "CreateConstructData()"
  },
  {
    "label": "CreateOrGetUnsolicited()",
    "kind": "Method",
    "detail": "Function (TMap<FPackageData*,EInstigator>&)",
    "insertText": "CreateOrGetUnsolicited()"
  },
  {
    "label": "DetachUnsolicited()",
    "kind": "Method",
    "detail": "Function (TMap<FPackageData*,EInstigator>)",
    "insertText": "DetachUnsolicited()"
  },
  {
    "label": "ClearUnsolicited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnsolicited()"
  },
  {
    "label": "GetReachablePlatformsForInstigator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReachablePlatformsForInstigator(UCookOnTheFlyServer& COTFS, FPackageData* InInstigator, TArray<const ITargetPlatform*>& Platforms)"
  },
  {
    "label": "GetReachablePlatformsForInstigator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReachablePlatformsForInstigator(UCookOnTheFlyServer& COTFS, FName InInstigator, TArray<const ITargetPlatform*>& Platforms)"
  },
  {
    "label": "UpdateContainerUrgency()",
    "kind": "Method",
    "detail": "Function (private : struct UE::Cook::FPackageDatas ; void)",
    "insertText": "UpdateContainerUrgency(EUrgency OldUrgency, EUrgency NewUrgency)"
  },
  {
    "label": "SetInstigatorInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstigatorInternal(FInstigator&& InInstigator)"
  },
  {
    "label": "AddReachablePlatformsInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReachablePlatformsInternal(FPackageData& PackageData, TConstArrayView<const ITargetPlatform*> Platforms, FInstigator&& InInstigator)"
  },
  {
    "label": "QueueAsDiscoveredInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueAsDiscoveredInternal(FPackageData& PackageData, FInstigator&& InInstigator, FDiscoveredPlatformSet&& ReachablePlatforms, EUrgency InUrgency)"
  },
  {
    "label": "SetFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFileName(const FName& InFileName)"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(EPackageState NextState)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : typedef)",
    "insertText": "void(FPackageData::*FEdgeFunction)()"
  },
  {
    "label": "UpdateDownEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDownEdge(bool bOld, bool bNew, const FEdgeFunction& EdgeFunction)"
  },
  {
    "label": "UpdateUpEdge()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateUpEdge(bool bOld, bool bNew, const FEdgeFunction& EdgeFunction)"
  },
  {
    "label": "OnEnterIdle()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnEnterIdle()"
  },
  {
    "label": "OnExitIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitIdle()"
  },
  {
    "label": "OnEnterRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterRequest()"
  },
  {
    "label": "OnExitRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitRequest()"
  },
  {
    "label": "OnEnterAssignedToWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterAssignedToWorker()"
  },
  {
    "label": "OnExitAssignedToWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitAssignedToWorker()"
  },
  {
    "label": "OnEnterLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterLoad()"
  },
  {
    "label": "OnExitLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitLoad()"
  },
  {
    "label": "OnEnterSaveActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterSaveActive()"
  },
  {
    "label": "OnExitSaveActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitSaveActive()"
  },
  {
    "label": "OnEnterSaveStalledRetracted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterSaveStalledRetracted()"
  },
  {
    "label": "OnExitSaveStalledRetracted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitSaveStalledRetracted()"
  },
  {
    "label": "OnEnterSaveStalledAssignedToWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterSaveStalledAssignedToWorker()"
  },
  {
    "label": "OnExitSaveStalledAssignedToWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitSaveStalledAssignedToWorker()"
  },
  {
    "label": "OnExitInProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitInProgress(EStateChangeReason StateChangeReason)"
  },
  {
    "label": "OnEnterInProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterInProgress()"
  },
  {
    "label": "OnExitSaving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitSaving(EStateChangeReason ReleaseSaveReason, EPackageState NewState)"
  },
  {
    "label": "OnEnterSaving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterSaving()"
  },
  {
    "label": "OnExitAssignedToWorkerProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitAssignedToWorkerProperty()"
  },
  {
    "label": "OnEnterAssignedToWorkerProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnterAssignedToWorkerProperty()"
  },
  {
    "label": "OnPackageDataFirstMarkedReachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPackageDataFirstMarkedReachable(FInstigator&& InInstigator)"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (FGenerationHelper* GenerationHelper = nullptr ; TRefCountPtr<FGenerationHelper> ParentGenerationHelper ; TSortedMap<const ITargetPlatform*,FPackagePlatformData,TInlineAllocator<1>> PlatformDatas ; TArray<FCachedObjectInOuter> CachedObjectsInOuter ; FCompletionCallback CompletionCallback ; TUniquePtr<TMap<FPackageData*,EInstigator>> Unsolicited ; FName PackageName ; FName FileName ; FName ParentGenerator ; TWeakObjectPtr<UPackage> Package ; FPackageDatas& PackageDatas ; FPackagePreloader* PackagePreloader = nullptr ; uint32 LeafToRootRank = MAX_uint32 ; int32 NumPendingCookedPlatformData = 0 ; int32 CookedPlatformDataNextIndex = - 1 ; int32 NumRetriesBeginCacheOnObject = 0 ; FInstigator Instigator ; FWorkerId WorkerAssignment =)",
    "insertText": "Invalid()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (uint32 State :)",
    "insertText": "int32(EPackageState::BitCount)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (uint32 SaveSubState :)",
    "insertText": "int32(ESaveSubState::BitCount)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (uint32 SuppressCookReason :)",
    "insertText": "int32(ESuppressCookReason::BitCount)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (uint32 Urgency :)",
    "insertText": "int32(EUrgency::BitCount)"
  },
  {
    "label": "MonitorCookResult()",
    "kind": "Method",
    "detail": "Function (uint32 bIsCookLast : 1 ; uint32 bIsVisited : 1 ; uint32 bHasSaveCache : 1 ; uint32 bPrepareSaveFailed : 1 ; uint32 bPrepareSaveRequiresGC : 1 ; uint32)",
    "insertText": "MonitorCookResult(int)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (uint32 bGenerated : 1 ; uint32 bKeepReferencedDuringGC : 1 ; uint32 bWasCookedThisSession : 1 ;)",
    "insertText": "static_assert(static_cast<uint32>(ICookPackageSplitter::EGeneratedRequiresGenerator::Count) <= 4, \"We are storing Enum value in 2 bits\")"
  },
  {
    "label": "FPendingCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (uint32 DoesGeneratedRequireGeneratorValue : 2 ; } ; struct FPendingCookedPlatformData {)",
    "insertText": "FPendingCookedPlatformData(UObject* InObject, const ITargetPlatform* InTargetPlatform, FPackageData& InPackageData, bool bInNeedsResourceRelease, UCookOnTheFlyServer& InCookOnTheFlyServer)"
  },
  {
    "label": "FPendingCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPendingCookedPlatformData(FPendingCookedPlatformData&& Other)"
  },
  {
    "label": "FPendingCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPendingCookedPlatformData(const FPendingCookedPlatformData& Other)"
  },
  {
    "label": "FPendingCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPendingCookedPlatformData()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPendingCookedPlatformData&)",
    "insertText": "operator(const FPendingCookedPlatformData& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPendingCookedPlatformData&)",
    "insertText": "operator(const FPendingCookedPlatformData&& Other)"
  },
  {
    "label": "ClearCachedCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedCookedPlatformData(UObject* Object, FPackageData& PackageData, bool bCompletedSuccesfully)"
  },
  {
    "label": "PollIsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollIsComplete()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (FWeakObjectPtr Object ; const ITargetPlatform* TargetPlatform ; FPackageData& PackageData ; UCookOnTheFlyServer& CookOnTheFlyServer ; FPendingCookedPlatformDataCancelManager* CancelManager ; FName ClassName ; int32 UpdatePeriodMultiplier = 1 ; bool bHasReleased ; bool bNeedsResourceRelease ; } ; struct FPendingCookedPlatformDataCancelManager { int32 NumPendingPlatforms ; void)",
    "insertText": "Release(FPendingCookedPlatformData& Data)"
  },
  {
    "label": "FPackageDataMonitor()",
    "kind": "Method",
    "detail": "Function (} ; class FPackageDataQueue : public TRingBuffer<FPackageData*> { using TRingBuffer<FPackageData*>::TRingBuffer ; } ; struct FPackageDataMonitor { public :)",
    "insertText": "FPackageDataMonitor()"
  },
  {
    "label": "GetNumInProgress()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumInProgress()"
  },
  {
    "label": "GetNumPreloadAllocated()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPreloadAllocated()"
  },
  {
    "label": "GetNumCooked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCooked(ECookResult CookResult)"
  },
  {
    "label": "GetNumUrgent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumUrgent(EUrgency UrgencyLevel)"
  },
  {
    "label": "GetNumUrgent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumUrgent(EPackageState InState, EUrgency UrgencyLevel)"
  },
  {
    "label": "GetNumCookLast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCookLast()"
  },
  {
    "label": "GetNumCookLast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCookLast(EPackageState InState)"
  },
  {
    "label": "OnInProgressChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInProgressChanged(FPackageData& PackageData, bool bInProgress)"
  },
  {
    "label": "OnPreloadAllocatedChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreloadAllocatedChanged(FPackageData& PackageData, bool bPreloadAllocated)"
  },
  {
    "label": "OnFirstCookedPlatformAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFirstCookedPlatformAdded(FPackageData& PackageData, ECookResult CookResult)"
  },
  {
    "label": "OnLastCookedPlatformRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLastCookedPlatformRemoved(FPackageData& PackageData)"
  },
  {
    "label": "OnUrgencyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUrgencyChanged(FPackageData& PackageData, EUrgency OldUrgency, EUrgency NewUrgency)"
  },
  {
    "label": "OnCookLastChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCookLastChanged(FPackageData& PackageData)"
  },
  {
    "label": "OnStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStateChanged(FPackageData& PackageData, EPackageState OldState)"
  },
  {
    "label": "GetMPCookAssignedFenceMarker()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMPCookAssignedFenceMarker()"
  },
  {
    "label": "GetMPCookRetiredFenceMarker()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMPCookRetiredFenceMarker()"
  },
  {
    "label": "TrackUrgentRequests()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "TrackUrgentRequests(EPackageState State, EUrgency Urgency, int32 Delta)"
  },
  {
    "label": "TrackCookLastRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackCookLastRequests(EPackageState State, int32 Delta)"
  },
  {
    "label": "NumCooked()",
    "kind": "Method",
    "detail": "Function (int32 NumInProgress = 0 ; int32)",
    "insertText": "NumCooked(uint8)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} ; int32 NumPreloadAllocated = 0 ; int32 NumUrgentInState [ static_cast<)",
    "insertText": "uint32(EPackageState::Count)][static_cast<uint32>(EUrgency::Count)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (int32 NumCookLastInState [ static_cast<)",
    "insertText": "uint32(EPackageState::Count)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (int32 MPCookAssignedFenceMarker = 0 ; int32 MPCookRetiredFenceMarker = 0 ; } ; struct FDiscoveryQueueElement { FPackageData* PackageData ; FInstigator Instigator ; FDiscoveredPlatformSet ReachablePlatforms ; UE::Cook::EUrgency Urgency ; } ; class FRequestQueue { public : bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Num()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Remove(FPackageData* PackageData)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const FPackageData* PackageData)"
  },
  {
    "label": "DiscoveryQueueContains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DiscoveryQueueContains(FPackageData* PackageData)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "AddRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequest(FPackageData* PackageData, bool bForceUrgent=false)"
  },
  {
    "label": "HasRequestsToExplore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRequestsToExplore()"
  },
  {
    "label": "ReadyRequestsNum()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ReadyRequestsNum()"
  },
  {
    "label": "IsReadyRequestsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyRequestsEmpty()"
  },
  {
    "label": "PopReadyRequest()",
    "kind": "Method",
    "detail": "Function (FPackageData*)",
    "insertText": "PopReadyRequest()"
  },
  {
    "label": "AddReadyRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReadyRequest(FPackageData* PackageData, bool bForceUrgent = false)"
  },
  {
    "label": "RemoveRequest()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RemoveRequest(FPackageData* PackageData)"
  },
  {
    "label": "RemoveRequestExceptFromCluster()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RemoveRequestExceptFromCluster(FPackageData* PackageData, FRequestCluster* ExceptFromCluster)"
  },
  {
    "label": "UpdateUrgency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUrgency(FPackageData* PackageData, EUrgency bOldUrgency, EUrgency NewUrgency)"
  },
  {
    "label": "GetRestartedRequests()",
    "kind": "Method",
    "detail": "Function (FPackageDataSet&)",
    "insertText": "GetRestartedRequests()"
  },
  {
    "label": "NotifyRequestFencePassed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRequestFencePassed(FPackageDatas& PackageDatas)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : FPackageDataSet RestartedRequests ; TRingBuffer<FDiscoveryQueueElement> DiscoveryQueue ; TRingBuffer<FRequestCluster> RequestClusters ; TSet<FName> RequestFencePackageListeners ; FPackageDataSet UrgentRequests ; FPackageDataSet NormalRequests ; } ; struct FPackagePreloaderPriorityWrapper { TRefCountPtr<FPackagePreloader> Payload ; bool)",
    "insertText": "operator(const FPackagePreloaderPriorityWrapper& Other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(TRefCountPtr<FPackagePreloader> Preloader)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const TRefCountPtr<FPackagePreloader>& Preloader)"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FPackagePreloader>)",
    "insertText": "PopFront()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FPackageData* PackageData)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (TSet<FPackageData*>::TRangedForIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (TSet<FPackageData*>::TRangedForIterator)",
    "insertText": "end()"
  },
  {
    "label": "FThreadsafePackageData()",
    "kind": "Method",
    "detail": "Function (TRingBuffer<FPackageData*> Inbox ; FPackagePreloaderPriorityQueue PendingKicks ; TSet<TRefCountPtr<FPackagePreloader>> ActivePreloads ; TRingBuffer<TRefCountPtr<FPackagePreloader>> ReadyForLoads ; TSet<FPackageData*> InProgress ; } ; struct FThreadsafePackageData { FInstigator Instigator ; FName Generator ; bool bInitialized : 1 ; bool bHasLoggedDiscoveryWarning : 1 ; bool bHasLoggedDependencyWarning : 1 ;)",
    "insertText": "FThreadsafePackageData()"
  },
  {
    "label": "FPackageDatas()",
    "kind": "Method",
    "detail": "Function (} ; typedef TArray<FPendingCookedPlatformData> FPendingCookedPlatformDataContainer ; struct FPackageDatas : public FGCObject { public :)",
    "insertText": "FPackageDatas(UCookOnTheFlyServer& InCookOnTheFlyServer)"
  },
  {
    "label": "FPackageDatas()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPackageDatas()"
  },
  {
    "label": "OnAssetRegistryGenerated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRegistryGenerated(IAssetRegistry& InAssetRegistry)"
  },
  {
    "label": "SetBeginCookConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBeginCookConfigSettings(FStringView CookShowInstigator)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetMonitor()",
    "kind": "Method",
    "detail": "Function (FPackageDataMonitor&)",
    "insertText": "GetMonitor()"
  },
  {
    "label": "GetCookOnTheFlyServer()",
    "kind": "Method",
    "detail": "Function (UCookOnTheFlyServer&)",
    "insertText": "GetCookOnTheFlyServer()"
  },
  {
    "label": "GetNextLeafToRootRank()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNextLeafToRootRank()"
  },
  {
    "label": "ResetLeafToRootRank()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLeafToRootRank()"
  },
  {
    "label": "GetRequestQueue()",
    "kind": "Method",
    "detail": "Function (FRequestQueue&)",
    "insertText": "GetRequestQueue()"
  },
  {
    "label": "GetAssignedToWorkerSet()",
    "kind": "Method",
    "detail": "Function (TFastPointerSet<FPackageData*>&)",
    "insertText": "GetAssignedToWorkerSet()"
  },
  {
    "label": "GetLoadQueue()",
    "kind": "Method",
    "detail": "Function (FLoadQueue&)",
    "insertText": "GetLoadQueue()"
  },
  {
    "label": "GetSaveQueue()",
    "kind": "Method",
    "detail": "Function (FPackageDataQueue&)",
    "insertText": "GetSaveQueue()"
  },
  {
    "label": "GetSaveStalledSet()",
    "kind": "Method",
    "detail": "Function (TFastPointerSet<FPackageData*>&)",
    "insertText": "GetSaveStalledSet()"
  },
  {
    "label": "FindOrAddPackageData()",
    "kind": "Method",
    "detail": "Function (FPackageData&)",
    "insertText": "FindOrAddPackageData(const FName& PackageName, const FName& NormalizedFileName)"
  },
  {
    "label": "FindPackageDataByPackageName()",
    "kind": "Method",
    "detail": "Function (FPackageData*)",
    "insertText": "FindPackageDataByPackageName(const FName& PackageName)"
  },
  {
    "label": "TryAddPackageDataByPackageName()",
    "kind": "Method",
    "detail": "Function (FPackageData*)",
    "insertText": "TryAddPackageDataByPackageName(const FName& PackageName, bool bRequireExists = true, bool bCreateAsMap = false)"
  },
  {
    "label": "AddPackageDataByPackageNameChecked()",
    "kind": "Method",
    "detail": "Function (FPackageData&)",
    "insertText": "AddPackageDataByPackageNameChecked(const FName& PackageName, bool bRequireExists = true, bool bCreateAsMap = false)"
  },
  {
    "label": "UpdateThreadsafePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateThreadsafePackageData(const FPackageData& PackageData)"
  },
  {
    "label": "UpdateThreadsafePackageData()",
    "kind": "Method",
    "detail": "Function (template<CallbackType> void)",
    "insertText": "UpdateThreadsafePackageData(FName PackageName, CallbackType&& Callback)"
  },
  {
    "label": "FindThreadsafePackageData()",
    "kind": "Method",
    "detail": "Function (TOptional<FThreadsafePackageData>)",
    "insertText": "FindThreadsafePackageData(FName PackageName)"
  },
  {
    "label": "FindPackageDataByFileName()",
    "kind": "Method",
    "detail": "Function (FPackageData*)",
    "insertText": "FindPackageDataByFileName(const FName& InFileName)"
  },
  {
    "label": "TryAddPackageDataByFileName()",
    "kind": "Method",
    "detail": "Function (FPackageData*)",
    "insertText": "TryAddPackageDataByFileName(const FName& InFileName)"
  },
  {
    "label": "TryAddPackageDataByStandardFileName()",
    "kind": "Method",
    "detail": "Function (FPackageData*)",
    "insertText": "TryAddPackageDataByStandardFileName(const FName& InFileName, bool bExactMatchRequired=true, FName* OutFoundFileName=nullptr)"
  },
  {
    "label": "AddPackageDataByFileNameChecked()",
    "kind": "Method",
    "detail": "Function (FPackageData&)",
    "insertText": "AddPackageDataByFileNameChecked(const FName& FileName)"
  },
  {
    "label": "GetFileNameByPackageName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFileNameByPackageName(FName PackageName, bool bRequireExists = true, bool bCreateAsMap = false)"
  },
  {
    "label": "TryGetNamesByFlexName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNamesByFlexName(FName PackageOrFileName, FName* OutPackageName = nullptr, FName* OutFileName = nullptr, bool bRequireExists = true, bool bCreateAsMap = false)"
  },
  {
    "label": "LookupFileNameOnDisk()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "LookupFileNameOnDisk(FName PackageName, bool bRequireExists = true, bool bCreateAsMap = false)"
  },
  {
    "label": "GetStandardFileName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetStandardFileName(FName FileName)"
  },
  {
    "label": "GetStandardFileName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetStandardFileName(FStringView FileName)"
  },
  {
    "label": "AddExistingPackageDatasForPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExistingPackageDatasForPlatform(TConstArrayView<FConstructPackageData> ExistingPackages, const ITargetPlatform* TargetPlatform, bool bExpectPackageDatasAreNew, int32& OutPackageDataFromBaseGameNum)"
  },
  {
    "label": "UpdateFileName()",
    "kind": "Method",
    "detail": "Function (FPackageData*)",
    "insertText": "UpdateFileName(FName PackageName)"
  },
  {
    "label": "GetNumCooked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCooked()"
  },
  {
    "label": "GetCookedPackagesForPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCookedPackagesForPlatform(const ITargetPlatform* Platform, TArray<FPackageData*>& SucceededPackages, TArray<FPackageData*>& FailedPackages)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "ClearCookedPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookedPlatforms()"
  },
  {
    "label": "ClearCookResultsForPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookResultsForPackages(const TSet<FName>& InPackages)"
  },
  {
    "label": "OnRemoveSessionPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveSessionPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ForEachPendingCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (template<FunctionType> void)",
    "insertText": "ForEachPendingCookedPlatformData(const FunctionType& Function)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(Data)"
  },
  {
    "label": "GetPendingCookedPlatformDataNum()",
    "kind": "Method",
    "detail": "Function (} } } int32)",
    "insertText": "GetPendingCookedPlatformDataNum()"
  },
  {
    "label": "PollPendingCookedPlatformDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollPendingCookedPlatformDatas(bool bForce, double& LastCookableObjectTickTime)"
  },
  {
    "label": "ClearCancelManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCancelManager(FPackageData& PackageData)"
  },
  {
    "label": "DebugInstigator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugInstigator(FPackageData& PackageData)"
  },
  {
    "label": "LockAndEnumeratePackageDatas()",
    "kind": "Method",
    "detail": "Function (template<CallbackType> void)",
    "insertText": "LockAndEnumeratePackageDatas(CallbackType&& Callback)"
  },
  {
    "label": "GetCachedCookedPlatformDataObjects()",
    "kind": "Method",
    "detail": "Function (TMap<UObject*,FCachedCookedPlatformDataState>&)",
    "insertText": "GetCachedCookedPlatformDataObjects()"
  },
  {
    "label": "CreatePackageData()",
    "kind": "Method",
    "detail": "Function (private : FPackageData&)",
    "insertText": "CreatePackageData(FName PackageName, FName FileName)"
  },
  {
    "label": "EnumeratePackageDatasWithinLock()",
    "kind": "Method",
    "detail": "Function (template<CallbackType> void)",
    "insertText": "EnumeratePackageDatasWithinLock(CallbackType&& Callback)"
  },
  {
    "label": "TryLookupFileNameOnDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLookupFileNameOnDisk(FName PackageName, FString& OutFileName)"
  },
  {
    "label": "LookupPackageNameOnDisk()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "LookupPackageNameOnDisk(FName NormalizedFileName, bool bExactMatchRequired, FName& FoundFileName)"
  },
  {
    "label": "FPoppedPackageDataScope()",
    "kind": "Method",
    "detail": "Function (TTypedBlockAllocatorFreeList<FPackageData> Allocator ; FPackageDataMonitor Monitor ; TMap<FName,FPackageData*> PackageNameToPackageData ; TMap<FName,FPackageData*> FileNameToPackageData ; TMap<FName,FThreadsafePackageData> ThreadsafePackageDatas ; TRingBuffer<FPendingCookedPlatformDataContainer> PendingCookedPlatformDataLists ; TMap<UObject*,FCachedCookedPlatformDataState> CachedCookedPlatformDataObjects ; uint32 NextLeafToRootRank = 0 ; int32 PendingCookedPlatformDataNum = 0 ; FRequestQueue RequestQueue ; TFastPointerSet<FPackageData*> AssignedToWorkerSet ; TFastPointerSet<FPackageData*> SaveStalledSet ; FLoadQueue LoadQueue ; FPackageDataQueue SaveQueue ; UCookOnTheFlyServer& CookOnTheFlyServer ; FRWLock ExistenceLock ; FPackageData* ShowInstigatorPackageData = nullptr ; double LastPollAsyncTime ; IAssetRegistry* AssetRegistry ; } ; struct FPoppedPackageDataScope {)",
    "insertText": "FPoppedPackageDataScope(FPackageData& InPackageData)"
  },
  {
    "label": "FPoppedPackageDataScope()",
    "kind": "Method",
    "detail": "Function (# if COOK_CHECKSLOW_PACKAGEDATA ~)",
    "insertText": "FPoppedPackageDataScope()"
  },
  {
    "label": "ExistenceReadLock()",
    "kind": "Method",
    "detail": "Function (FReadScopeLock)",
    "insertText": "ExistenceReadLock(ExistenceLock)"
  },
  {
    "label": "EnumeratePackageDatasWithinLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumeratePackageDatasWithinLock(Forward<CallbackType>(Callback))"
  },
  {
    "label": "EnumerateAllocations()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "EnumerateAllocations(Forward<CallbackType>(Callback))"
  },
  {
    "label": "ExistenceWriteLock()",
    "kind": "Method",
    "detail": "Function (FWriteScopeLock)",
    "insertText": "ExistenceWriteLock(ExistenceLock)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FThreadsafePackageData& Value = ThreadsafePackageDatas .)",
    "insertText": "FindOrAdd(PackageName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bNew = false ;)",
    "insertText": "if(!Value.bInitialized)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (Value . bInitialized = true ; bNew = true ; })",
    "insertText": "Callback(Value, bNew)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FThreadsafePackageData* Value = ThreadsafePackageDatas .)",
    "insertText": "Find(PackageName)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutPlatforms .)",
    "insertText": "Reset(PlatformDatas.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutPlatforms .)",
    "insertText": "Add(Pair.Key)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (SuppressCookReason = static_cast<)",
    "insertText": "uint32(Reason)"
  },
  {
    "label": "RaiseUrgency()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RaiseUrgency(EUrgency NewUrgency, ESendFlags SendFlags, bool bAllowUrgencyInIdle)"
  },
  {
    "label": "SetUrgency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUrgency(NewUrgency, SendFlags, bAllowUrgencyInIdle)"
  }
]