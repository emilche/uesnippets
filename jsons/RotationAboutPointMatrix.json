[
  {
    "label": "TRotationAboutPointMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRotationAboutPointMatrix"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TRotationAboutPointMatrix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Vector . h \" # include \" Math / Matrix . h \" # include \" Math / Quat . h \" # include \" Math / RotationTranslationMatrix . h \" namespace UE { namespace Math { template<T> struct TRotationAboutPointMatrix : public TRotationTranslationMatrix<T> { public : using TRotationTranslationMatrix<T>::M ;)",
    "insertText": "TRotationAboutPointMatrix(const TRotator<T>& Rot, const TVector<T>& Origin)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TRotationAboutPointMatrix(const TRotationAboutPointMatrix<FArg>& From) : TRotationTranslationMatrix<T>(From)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TMatrix<T>)",
    "insertText": "Make(const TRotator<T>& Rot, const TVector<T>& Origin)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TMatrix<T>)",
    "insertText": "Make(const TQuat<T>& Rot, const TVector<T>& Origin)"
  },
  {
    "label": "TRotationAboutPointMatrix()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> TRotationAboutPointMatrix<T)",
    "insertText": "TRotationAboutPointMatrix(const TRotator<T>& Rot, const TVector<T>& Origin) : TRotationTranslationMatrix<T>(Rot, Origin)"
  },
  {
    "label": "XAxis()",
    "kind": "Method",
    "detail": "Function (TVector<T>)",
    "insertText": "XAxis(M[0][0], M[1][0], M[2][0])"
  },
  {
    "label": "YAxis()",
    "kind": "Method",
    "detail": "Function (TVector<T>)",
    "insertText": "YAxis(M[0][1], M[1][1], M[2][1])"
  },
  {
    "label": "ZAxis()",
    "kind": "Method",
    "detail": "Function (TVector<T>)",
    "insertText": "ZAxis(M[0][2], M[1][2], M[2][2])"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (M [ 3 ] [ 0 ] - = XAxis | Origin ; M [ 3 ] [ 1 ] - = YAxis | Origin ; M [ 3 ] [ 2 ] - = ZAxis | Origin ; } } })",
    "insertText": "UE_DECLARE_LWC_TYPE(RotationAboutPointMatrix, 44)"
  }
]