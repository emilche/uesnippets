[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MSGPACK_SYSDEP_H # define MSGPACK_SYSDEP_H # include<rpc / msgpack / predef . h> # include<stdlib . h> # include<stddef . h> # if)",
    "insertText": "defined(_MSC_VER) && _MSC_VER <= 1800 # define snprintf(buf, len, format,...) _snprintf_s(buf, len, len, format, __VA_ARGS__) #endif #if defined(_MSC_VER)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef unsigned __int8 uint8_t ; typedef signed __int16 int16_t ; typedef unsigned __int16 uint16_t ; typedef signed __int32 int32_t ; typedef unsigned __int32 uint32_t ; typedef signed __int64 int64_t ; typedef unsigned __int64 uint64_t ; # elif)",
    "insertText": "defined(_MSC_VER) # include <stdint.h> #else # include <stdint.h> # include <stdbool.h> #endif #if !defined(MSGPACK_DLLEXPORT) #if defined(_MSC_VER) # define MSGPACK_DLLEXPORT __declspec(dllexport) #else # define MSGPACK_DLLEXPORT #endif #endif #ifdef _WIN32 # define _msgpack_atomic_counter_header <windows.h> # if !defined(WIN32_LEAN_AND_MEAN)"
  },
  {
    "label": "_msgpack_sync_decr_and_fetch()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "_msgpack_sync_decr_and_fetch(ptr) InterlockedDecrement(ptr) # define _msgpack_sync_incr_and_fetch(ptr) InterlockedIncrement(ptr) #elif defined(__GNUC__) && ((__GNUC__*10 + __GNUC_MINOR__) < 41) # if defined(__cplusplus)"
  },
  {
    "label": "_msgpack_sync_decr_and_fetch()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "_msgpack_sync_decr_and_fetch(ptr) __sync_sub_and_fetch(ptr, 1) # define _msgpack_sync_incr_and_fetch(ptr) __sync_add_and_fetch(ptr, 1) #endif #ifdef _WIN32 # ifdef __cplusplus # ifdef max # undef max # endif # ifdef min # undef min # endif # endif #elif defined(unix) || defined(__unix) || defined(__APPLE__) || defined(__OpenBSD__) #include <arpa/inet.h> # if defined(linux) # include <byteswap.h> # endif #endif #if MSGPACK_ENDIAN_LITTLE_BYTE # if defined(unix) || defined(__unix) || defined(__APPLE__) || defined(__OpenBSD__) # define _msgpack_be16(x) ntohs(x) # else # if defined(ntohs) # define _msgpack_be16(x) ntohs(x) # elif defined(_byteswap_ushort) || (defined(_MSC_VER) && _MSC_VER >= 1400) # define _msgpack_be16(x) ((uint16_t)_byteswap_ushort((unsigned short)x)) # else # define _msgpack_be16(x) ( \\ ((((uint16_t)x) << 8) ) | \\ ((((uint16_t)x) >> 8) ) ) # endif # endif # if defined(unix) || defined(__unix) || defined(__APPLE__) || defined(__OpenBSD__) # define _msgpack_be32(x) ntohl(x) # else # if defined(ntohl) # define _msgpack_be32(x) ntohl(x) # elif defined(_byteswap_ulong) || (defined(_MSC_VER) && _MSC_VER >= 1400) # define _msgpack_be32(x) ((uint32_t)_byteswap_ulong((unsigned long)x)) # else # define _msgpack_be32(x) \\ ( ((((uint32_t)x) << 24) ) | \\ ((((uint32_t)x) << 8) & 0x00ff0000U ) | \\ ((((uint32_t)x) >> 8) & 0x0000ff00U ) | \\ ((((uint32_t)x) >> 24) ) ) # endif # endif # if defined(_byteswap_uint64) || (defined(_MSC_VER) && _MSC_VER >= 1400) # define _msgpack_be64(x) (_byteswap_uint64(x)) # elif defined(bswap_64) # define _msgpack_be64(x) bswap_64(x) # elif defined(__DARWIN_OSSwapInt64) # define _msgpack_be64(x) __DARWIN_OSSwapInt64(x) # else # define _msgpack_be64(x) \\ ( ((((uint64_t)x) << 56) ) | \\ ((((uint64_t)x) << 40) & 0x00ff000000000000ULL ) | \\ ((((uint64_t)x) << 24) & 0x0000ff0000000000ULL ) | \\ ((((uint64_t)x) << 8) & 0x000000ff00000000ULL ) | \\ ((((uint64_t)x) >> 8) & 0x00000000ff000000ULL ) | \\ ((((uint64_t)x) >> 24) & 0x0000000000ff0000ULL ) | \\ ((((uint64_t)x) >> 40) & 0x000000000000ff00ULL ) | \\ ((((uint64_t)x) >> 56) ) ) # endif #elif MSGPACK_ENDIAN_BIG_BYTE # define _msgpack_be16(x) (x) # define _msgpack_be32(x) (x) # define _msgpack_be64(x) (x) #else # error msgpack-c supports only big endian and little endian #endif #define _msgpack_load16(cast, from, to)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "memcpy((cast*)(to), (from), sizeof(cast))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0)"
  },
  {
    "label": "_msgpack_load32()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "_msgpack_load32(cast, from, to)"
  },
  {
    "label": "_msgpack_load64()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "_msgpack_load64(cast, from, to)"
  },
  {
    "label": "_msgpack_store16()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "_msgpack_store16(to, num)"
  },
  {
    "label": "_msgpack_be16()",
    "kind": "Method",
    "detail": "Function (uint16_t val =)",
    "insertText": "_msgpack_be16(num)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(to, &val, 2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define _msgpack_store32(to, num)"
  },
  {
    "label": "_msgpack_be32()",
    "kind": "Method",
    "detail": "Function (uint32_t val =)",
    "insertText": "_msgpack_be32(num)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(to, &val, 4)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define _msgpack_store64(to, num)"
  },
  {
    "label": "_msgpack_be64()",
    "kind": "Method",
    "detail": "Function (uint64_t val =)",
    "insertText": "_msgpack_be64(num)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(to, &val, 8)"
  }
]