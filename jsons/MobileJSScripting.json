[
  {
    "label": "FMobileJSScripting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileJSScripting"
  },
  {
    "label": "IWebBrowserWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWebBrowserWindow"
  },
  {
    "label": "FMobileJSScripting()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if PLATFORM_ANDROID | | PLATFORM_IOS # include \" WebJSFunction . h \" # include \" WebJSScripting . h \" typedef TSharedRef<class FMobileJSScripting> FMobileJSScriptingRef ; typedef TSharedPtr<class FMobileJSScripting> FMobileJSScriptingPtr ; class FMobileJSScripting : public FWebJSScripting,public TSharedFromThis<FMobileJSScripting> { public : const FString JSMessageTag ; const FString JSMessageHandler ;)",
    "insertText": "FMobileJSScripting(bool bJSBindingToLoweringEnabled)"
  },
  {
    "label": "BindUObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindUObject(const FString& Name, UObject* Object, bool bIsPermanent = true)"
  },
  {
    "label": "UnbindUObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindUObject(const FString& Name, UObject* Object = nullptr, bool bIsPermanent = true)"
  },
  {
    "label": "BindUObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindUObject(TSharedRef<class IWebBrowserWindow> InWindow, const FString& Name, UObject* Object, bool bIsPermanent = true)"
  },
  {
    "label": "UnbindUObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindUObject(TSharedRef<class IWebBrowserWindow> InWindow, const FString& Name, UObject* Object = nullptr, bool bIsPermanent = true)"
  },
  {
    "label": "OnJsMessageReceived()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnJsMessageReceived(const FString& Command, const TArray<FString>& Params, const FString& Origin)"
  },
  {
    "label": "ConvertStruct()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertStruct(UStruct* TypeInfo, const void* StructPtr)"
  },
  {
    "label": "ConvertObject()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertObject(UObject* Object)"
  },
  {
    "label": "InvokeJSFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeJSFunction(FGuid FunctionId, int32 ArgCount, FWebJSParam Arguments[], bool bIsError=false)"
  },
  {
    "label": "InvokeJSErrorResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeJSErrorResult(FGuid FunctionId, const FString& Error)"
  },
  {
    "label": "PageLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PageLoaded(TSharedRef<class IWebBrowserWindow> InWindow)"
  },
  {
    "label": "SetWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindow(TSharedRef<class IWebBrowserWindow> InWindow)"
  },
  {
    "label": "InitializeScript()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitializeScript(TSharedRef<class IWebBrowserWindow> InWindow)"
  },
  {
    "label": "InvokeJSFunctionRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeJSFunctionRaw(FGuid FunctionId, const FString& JSValue, bool bIsError=false)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "AddPermanentBind()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPermanentBind(const FString& Name, UObject* Object)"
  },
  {
    "label": "RemovePermanentBind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePermanentBind(const FString& Name, UObject* Object)"
  },
  {
    "label": "HandleExecuteUObjectMethodMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleExecuteUObjectMethodMessage(const TArray<FString>& Params)"
  }
]