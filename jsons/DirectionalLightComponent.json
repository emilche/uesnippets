[
  {
    "label": "FLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneProxy"
  },
  {
    "label": "UDirectionalLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDirectionalLightComponent"
  },
  {
    "label": "FLightmassDirectionalLightSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightmassDirectionalLightSettings"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" Components / LightComponent . h \" # include \" DirectionalLightComponent . generated . h \" class FLightSceneProxy ;)",
    "insertText": "UCLASS(Blueprintable, ClassGroup=Lights, hidecategories=(Object, LightProfiles), editinlinenew, meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, interp, Category = Light, AdvancedDisplay, meta = (UIMin = \"0\", UIMax = \"1\"))"
  },
  {
    "label": "GetLightPosition()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "GetLightPosition()"
  },
  {
    "label": "GetLightType()",
    "kind": "Method",
    "detail": "Function (ELightComponentType)",
    "insertText": "GetLightType()"
  },
  {
    "label": "GetLightmassSettings()",
    "kind": "Method",
    "detail": "Function (FLightmassLightSettings)",
    "insertText": "GetLightmassSettings()"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FLightSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "IsUsedAsAtmosphereSunLight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedAsAtmosphereSunLight()"
  },
  {
    "label": "GetAtmosphereSunDiskColorScale()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetAtmosphereSunDiskColorScale()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "ForceActorNonSpatiallyLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ForceActorNonSpatiallyLoaded()"
  },
  {
    "label": "InvalidateLightingCacheDetailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateLightingCacheDetailed(bool bInvalidateBuildEnqueuedLighting, bool bTranslationOnly)"
  }
]