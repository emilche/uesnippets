[
  {
    "label": "DataChannelController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataChannelController"
  },
  {
    "label": "LegacyStatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LegacyStatsCollector"
  },
  {
    "label": "PeerConnectionSdpMethods",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnectionSdpMethods"
  },
  {
    "label": "PeerConnectionInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnectionInternal"
  },
  {
    "label": "PeerConnectionSdpMethods()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_PEER_CONNECTION_INTERNAL_H_ # define PC_PEER_CONNECTION_INTERNAL_H_ # include<map> # include<memory> # include<set> # include<string> # include<vector> # include \" api / peer_connection_interface . h \" # include \" call / call . h \" # include \" pc / jsep_transport_controller . h \" # include \" pc / peer_connection_message_handler . h \" # include \" pc / rtp_transceiver . h \" # include \" pc / rtp_transmission_manager . h \" # include \" pc / sctp_data_channel . h \" namespace webrtc { class DataChannelController ; class LegacyStatsCollector ; class PeerConnectionSdpMethods { public : ~)",
    "insertText": "PeerConnectionSdpMethods()"
  },
  {
    "label": "session_id()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "session_id()"
  },
  {
    "label": "NeedsIceRestart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsIceRestart(const std::string& content_name)"
  },
  {
    "label": "sctp_mid()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::string>)",
    "insertText": "sctp_mid()"
  },
  {
    "label": "configuration()",
    "kind": "Method",
    "detail": "Function (const PeerConnectionInterface::RTCConfiguration*)",
    "insertText": "configuration()"
  },
  {
    "label": "ReportSdpBundleUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportSdpBundleUsage(const SessionDescriptionInterface& remote_description)"
  },
  {
    "label": "message_handler()",
    "kind": "Method",
    "detail": "Function (PeerConnectionMessageHandler*)",
    "insertText": "message_handler()"
  },
  {
    "label": "rtp_manager()",
    "kind": "Method",
    "detail": "Function (RtpTransmissionManager*)",
    "insertText": "rtp_manager()"
  },
  {
    "label": "dtls_enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dtls_enabled()"
  },
  {
    "label": "options()",
    "kind": "Method",
    "detail": "Function (const PeerConnectionFactoryInterface::Options*)",
    "insertText": "options()"
  },
  {
    "label": "GetCryptoOptions()",
    "kind": "Method",
    "detail": "Function (CryptoOptions)",
    "insertText": "GetCryptoOptions()"
  },
  {
    "label": "transport_controller_s()",
    "kind": "Method",
    "detail": "Function (JsepTransportController*)",
    "insertText": "transport_controller_s()"
  },
  {
    "label": "transport_controller_n()",
    "kind": "Method",
    "detail": "Function (JsepTransportController*)",
    "insertText": "transport_controller_n()"
  },
  {
    "label": "data_channel_controller()",
    "kind": "Method",
    "detail": "Function (DataChannelController*)",
    "insertText": "data_channel_controller()"
  },
  {
    "label": "port_allocator()",
    "kind": "Method",
    "detail": "Function (cricket::PortAllocator*)",
    "insertText": "port_allocator()"
  },
  {
    "label": "legacy_stats()",
    "kind": "Method",
    "detail": "Function (LegacyStatsCollector*)",
    "insertText": "legacy_stats()"
  },
  {
    "label": "Observer()",
    "kind": "Method",
    "detail": "Function (PeerConnectionObserver*)",
    "insertText": "Observer()"
  },
  {
    "label": "GetSctpSslRole()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSctpSslRole(rtc::SSLRole* role)"
  },
  {
    "label": "ice_connection_state_internal()",
    "kind": "Method",
    "detail": "Function (PeerConnectionInterface::IceConnectionState)",
    "insertText": "ice_connection_state_internal()"
  },
  {
    "label": "SetIceConnectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceConnectionState(PeerConnectionInterface::IceConnectionState new_state)"
  },
  {
    "label": "NoteUsageEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteUsageEvent(UsageEvent event)"
  },
  {
    "label": "IsClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClosed()"
  },
  {
    "label": "IsUnifiedPlan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnifiedPlan()"
  },
  {
    "label": "ValidateBundleSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateBundleSettings(const cricket::SessionDescription* desc, const std::map<std::string, const cricket::ContentGroup*>& bundle_groups_by_mid)"
  },
  {
    "label": "GetDataMid()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::string>)",
    "insertText": "GetDataMid()"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<RtpTransceiverInterface>>)",
    "insertText": "AddTransceiver(cricket::MediaType media_type, rtc::scoped_refptr<MediaStreamTrackInterface> track, const RtpTransceiverInit& init, bool fire_callback = true)"
  },
  {
    "label": "StartSctpTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSctpTransport(int local_port, int remote_port, int max_message_size)"
  },
  {
    "label": "AddRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRemoteCandidate(const std::string& mid, const cricket::Candidate& candidate)"
  },
  {
    "label": "call_ptr()",
    "kind": "Method",
    "detail": "Function (Call*)",
    "insertText": "call_ptr()"
  },
  {
    "label": "SrtpRequired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SrtpRequired()"
  },
  {
    "label": "SetupDataChannelTransport_n()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetupDataChannelTransport_n(const std::string& mid)"
  },
  {
    "label": "TeardownDataChannelTransport_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownDataChannelTransport_n()"
  },
  {
    "label": "SetSctpDataMid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSctpDataMid(const std::string& mid)"
  },
  {
    "label": "ResetSctpDataMid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSctpDataMid()"
  },
  {
    "label": "trials()",
    "kind": "Method",
    "detail": "Function (const FieldTrialsView&)",
    "insertText": "trials()"
  },
  {
    "label": "ClearStatsCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStatsCache()"
  },
  {
    "label": "network_thread()",
    "kind": "Method",
    "detail": "Function (} ; class PeerConnectionInternal : public PeerConnectionInterface,public PeerConnectionSdpMethods,public sigslot::has_slots<> { public : rtc::Thread*)",
    "insertText": "network_thread()"
  },
  {
    "label": "worker_thread()",
    "kind": "Method",
    "detail": "Function (rtc::Thread*)",
    "insertText": "worker_thread()"
  },
  {
    "label": "initial_offerer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "initial_offerer()"
  },
  {
    "label": "GetTransceiversInternal()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>>>)",
    "insertText": "GetTransceiversInternal()"
  },
  {
    "label": "SignalSctpDataChannelCreated()",
    "kind": "Method",
    "detail": "Function (sigslot::signal1<SctpDataChannel*>&)",
    "insertText": "SignalSctpDataChannelCreated()"
  },
  {
    "label": "GetDataChannelStats()",
    "kind": "Method",
    "detail": "Function (std::vector<DataChannelStats>)",
    "insertText": "GetDataChannelStats()"
  },
  {
    "label": "GetPooledCandidateStats()",
    "kind": "Method",
    "detail": "Function (cricket::CandidateStatsList)",
    "insertText": "GetPooledCandidateStats()"
  },
  {
    "label": "GetTransportStatsByNames()",
    "kind": "Method",
    "detail": "Function (std::map<std::string,cricket::TransportStats>)",
    "insertText": "GetTransportStatsByNames(const std::set<std::string>& transport_names)"
  },
  {
    "label": "GetCallStats()",
    "kind": "Method",
    "detail": "Function (Call::Stats)",
    "insertText": "GetCallStats()"
  },
  {
    "label": "GetLocalCertificate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLocalCertificate(const std::string& transport_name, rtc::scoped_refptr<rtc::RTCCertificate>* certificate)"
  },
  {
    "label": "GetRemoteSSLCertChain()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<rtc::SSLCertChain>)",
    "insertText": "GetRemoteSSLCertChain(const std::string& transport_name)"
  },
  {
    "label": "IceRestartPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IceRestartPending(const std::string& content_name)"
  },
  {
    "label": "GetSslRole()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSslRole(const std::string& content_name, rtc::SSLRole* role)"
  },
  {
    "label": "NoteDataAddedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteDataAddedEvent()"
  },
  {
    "label": "OnSctpDataChannelClosed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSctpDataChannelClosed(DataChannelInterface* channel)"
  }
]