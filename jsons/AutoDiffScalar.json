[
  {
    "label": "make_coherent_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "make_coherent_impl"
  },
  {
    "label": "auto_diff_special_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "auto_diff_special_op"
  },
  {
    "label": "AutoDiffScalar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoDiffScalar"
  },
  {
    "label": "ScalarBinaryOpTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScalarBinaryOpTraits"
  },
  {
    "label": "CleanedUpDerType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CleanedUpDerType"
  },
  {
    "label": "NumTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NumTraits"
  },
  {
    "label": "numeric_limits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "numeric_limits"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_AUTODIFF_SCALAR_H # define EIGEN_AUTODIFF_SCALAR_H namespace Eigen { namespace internal { template<A,B> struct make_coherent_impl { void)",
    "insertText": "run(A&, B&)"
  },
  {
    "label": "make_coherent()",
    "kind": "Method",
    "detail": "Function (} } ; template<A,B> void)",
    "insertText": "make_coherent(const A& a, const B&b)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (make_coherent_impl<A,B)",
    "insertText": "run(a.const_cast_derived(), b.const_cast_derived())"
  },
  {
    "label": "MakeAutoDiffScalar()",
    "kind": "Method",
    "detail": "Function (} template<DerivativeType,bool Enable> struct auto_diff_special_op ; } template<DerivativeType> class AutoDiffScalar ; template<NewDerType> AutoDiffScalar<NewDerType>)",
    "insertText": "MakeAutoDiffScalar(const typename NewDerType::Scalar& value, const NewDerType &der)"
  },
  {
    "label": "AutoDiffScalar()",
    "kind": "Method",
    "detail": "Function (} template<DerivativeType> class AutoDiffScalar : public internal::auto_diff_special_op<DerivativeType,! internal::is_same<internal::traits<internal::remove_all<DerivativeType>::type>::Scalar,NumTraits<internal::traits<internal::remove_all<DerivativeType>::type>::Scalar>::Real>::value> { public : typedef internal::auto_diff_special_op<DerivativeType,! internal::is_same<internal::traits<internal::remove_all<DerivativeType>::type>::Scalar,NumTraits<internal::traits<internal::remove_all<DerivativeType>::type>::Scalar>::Real>::value> Base ; typedef internal::remove_all<DerivativeType>::type DerType ; typedef internal::traits<DerType>::Scalar Scalar ; typedef NumTraits<Scalar>::Real Real ; using Base::operator + ; using Base::operator* ;)",
    "insertText": "AutoDiffScalar()"
  },
  {
    "label": "AutoDiffScalar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AutoDiffScalar(const Scalar& value, int nbDer, int derNumber) : m_value(value), m_derivatives(DerType::Zero(nbDer))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_derivatives .)",
    "insertText": "coeffRef(derNumber) = Scalar(1)"
  },
  {
    "label": "AutoDiffScalar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AutoDiffScalar(const Real& value) : m_value(value)"
  },
  {
    "label": "AutoDiffScalar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AutoDiffScalar(const Scalar& value, const DerType& der) : m_value(value), m_derivatives(der)"
  },
  {
    "label": "AutoDiffScalar()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerType>)",
    "insertText": "AutoDiffScalar(const AutoDiffScalar<OtherDerType>& other #ifndef EIGEN_PARSED_BY_DOXYGEN , typename internal::enable_if< internal::is_same<Scalar, typename internal::traits<typename internal::remove_all<OtherDerType>::type>::Scalar>::value && internal::is_convertible<OtherDerType,DerType>::value , void*>::type = 0 #endif ) : m_value(other.value()), m_derivatives(other.derivatives())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::ostream&)",
    "insertText": "operator(std::ostream & s, const AutoDiffScalar& a)"
  },
  {
    "label": "AutoDiffScalar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AutoDiffScalar(const AutoDiffScalar& other) : m_value(other.value()), m_derivatives(other.derivatives())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerType> AutoDiffScalar&)",
    "insertText": "operator(const AutoDiffScalar<OtherDerType>& other)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (m_value = other .)",
    "insertText": "value()"
  },
  {
    "label": "derivatives()",
    "kind": "Method",
    "detail": "Function (m_derivatives = other .)",
    "insertText": "derivatives()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_value = other ;)",
    "insertText": "if(m_derivatives.size()>0) m_derivatives.setZero()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Scalar& a, const AutoDiffScalar& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerType> bool)",
    "insertText": "operator(const AutoDiffScalar<OtherDerType>& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const AutoDiffScalar<DerType&>)",
    "insertText": "operator(const Scalar& other)"
  },
  {
    "label": "make_coherent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_coherent(m_derivatives, other.derivatives())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this =* this - other ; return* this ; } const AutoDiffScalar<CwiseUnaryOp<internal::scalar_opposite_op<Scalar>,const DerType>>)",
    "insertText": "operator()"
  },
  {
    "label": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (} const AutoDiffScalar<)",
    "insertText": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(DerType,Scalar,product) > operator*(const Scalar& other)"
  },
  {
    "label": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (} const AutoDiffScalar<)",
    "insertText": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(DerType,Scalar,product) > operator*(const Scalar& other, const AutoDiffScalar& a)"
  },
  {
    "label": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (} const AutoDiffScalar<)",
    "insertText": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(DerType,Scalar,product) > operator/(const Scalar& other)"
  },
  {
    "label": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (} const AutoDiffScalar<)",
    "insertText": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(DerType,Scalar,product) > operator/(const Scalar& other, const AutoDiffScalar& a)"
  },
  {
    "label": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerType> const AutoDiffScalar<)",
    "insertText": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(CwiseBinaryOp<internal::scalar_difference_op<Scalar> EIGEN_COMMA const EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(DerType,Scalar,product) EIGEN_COMMA const EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(typename internal::remove_all<OtherDerType>::type,Scalar,product) >,Scalar,product) > operator/(const AutoDiffScalar<OtherDerType>& other)"
  },
  {
    "label": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerType> const AutoDiffScalar<CwiseBinaryOp<internal::scalar_sum_op<Scalar>,const)",
    "insertText": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(DerType,Scalar,product), const EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(typename internal::remove_all<OtherDerType>::type,Scalar,product) > > operator*(const AutoDiffScalar<OtherDerType>& other)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (* this =* this / other ; return* this ; } protected : Scalar m_value ; DerType m_derivatives ; } ; namespace internal { template<DerivativeType> struct auto_diff_special_op<DerivativeType,true> { typedef remove_all<DerivativeType>::type DerType ; typedef traits<DerType>::Scalar Scalar ; typedef NumTraits<Scalar>::Real Real ; const AutoDiffScalar<DerivativeType>&)",
    "insertText": "derived()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const AutoDiffScalar<DerType&>)",
    "insertText": "operator(const Real& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const AutoDiffScalar<DerType&>)",
    "insertText": "operator(const Real& a, const AutoDiffScalar<DerivativeType>& b)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "derived().value()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const AutoDiffScalar<CwiseUnaryOp<bind1st_op<scalar_product_op<Real,Scalar>>,DerType>::Type>)",
    "insertText": "operator(const Real& other, const AutoDiffScalar<DerivativeType>& a)"
  },
  {
    "label": "make_coherent_expression()",
    "kind": "Method",
    "detail": "Function (} ; template<BinOp,A,B,RefType> void)",
    "insertText": "make_coherent_expression(CwiseBinaryOp<BinOp,A,B> xpr, const RefType &ref)"
  },
  {
    "label": "make_coherent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_coherent(xpr.const_cast_derived().lhs(), ref)"
  },
  {
    "label": "make_coherent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_coherent(xpr.const_cast_derived().rhs(), ref)"
  },
  {
    "label": "make_coherent_expression()",
    "kind": "Method",
    "detail": "Function (} template<UnaryOp,A,RefType> void)",
    "insertText": "make_coherent_expression(const CwiseUnaryOp<UnaryOp,A> &xpr, const RefType &ref)"
  },
  {
    "label": "make_coherent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_coherent(xpr.nestedExpression().const_cast_derived(), ref)"
  },
  {
    "label": "make_coherent_expression()",
    "kind": "Method",
    "detail": "Function (} template<UnaryOp,A,RefType> void)",
    "insertText": "make_coherent_expression(const CwiseNullaryOp<UnaryOp,A> &, const RefType &)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<A_Scalar,int A_Rows,int A_Cols,int A_Options,int A_MaxRows,int A_MaxCols,B> struct make_coherent_impl<Matrix<A_Scalar,A_Rows,A_Cols,A_Options,A_MaxRows,A_MaxCols>,B> { typedef Matrix<A_Scalar,A_Rows,A_Cols,A_Options,A_MaxRows,A_MaxCols> A ; void)",
    "insertText": "run(A& a, B& b)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "resize(b.size())"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "setZero()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(B::SizeAtCompileTime==Dynamic && a.size()!=0 && b.size()==0)"
  },
  {
    "label": "make_coherent_expression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_coherent_expression(b,a)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (b .)",
    "insertText": "resize(a.size())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(A::SizeAtCompileTime==Dynamic && b.size()!=0 && a.size()==0)"
  },
  {
    "label": "make_coherent_expression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_coherent_expression(a,b)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((B_Rows==Dynamic || B_Cols==Dynamic) && (b.size()==0))"
  },
  {
    "label": "EIGEN_AUTODIFF_DECLARE_GLOBAL_UNARY()",
    "kind": "Method",
    "detail": "Function (} } } ; } template<DerType,BinOp> struct ScalarBinaryOpTraits<AutoDiffScalar<DerType>,DerType::Scalar,BinOp> { typedef AutoDiffScalar<DerType> ReturnType ; } ; template<DerType,BinOp> struct ScalarBinaryOpTraits<DerType::Scalar,AutoDiffScalar<DerType>,BinOp> { typedef AutoDiffScalar<DerType> ReturnType ; } ; # define)",
    "insertText": "EIGEN_AUTODIFF_DECLARE_GLOBAL_UNARY(FUNC,CODE) \\ template<typename DerType> \\ inline const Eigen::AutoDiffScalar< \\ EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(typename Eigen::internal::remove_all<DerType>::type, typename Eigen::internal::traits<typename Eigen::internal::remove_all<DerType>::type>::Scalar, product) > \\ FUNC(const Eigen::AutoDiffScalar<DerType>& x)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\ using namespace Eigen ; \\ typedef Eigen::internal::traits<Eigen::internal::remove_all<DerType>::type>::Scalar Scalar ; \\)",
    "insertText": "EIGEN_UNUSED_VARIABLE(sizeof(Scalar))"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (\\ CODE ; \\ } template<DerType> struct CleanedUpDerType { typedef AutoDiffScalar<Eigen::internal::remove_all<DerType>::type::PlainObject> type ; } ; template<DerType> const AutoDiffScalar<DerType>&)",
    "insertText": "conj(const AutoDiffScalar<DerType>& x)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (typedef CleanedUpDerType<DerType>::type ADS ;)",
    "insertText": "return(x <= y ? ADS(x) : ADS(y))"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (} template<DerType,T> CleanedUpDerType<DerType)",
    "insertText": "type(max)(const AutoDiffScalar<DerType>& x, const T& y)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (typedef CleanedUpDerType<DerType>::type ADS ;)",
    "insertText": "return(x >= y ? ADS(x) : ADS(y))"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (} template<DerType,T> CleanedUpDerType<DerType)",
    "insertText": "type(min)(const T& x, const AutoDiffScalar<DerType>& y)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (typedef CleanedUpDerType<DerType>::type ADS ;)",
    "insertText": "return(x < y ? ADS(x) : ADS(y))"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (} template<DerType,T> CleanedUpDerType<DerType)",
    "insertText": "type(max)(const T& x, const AutoDiffScalar<DerType>& y)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (typedef CleanedUpDerType<DerType>::type ADS ;)",
    "insertText": "return(x > y ? ADS(x) : ADS(y))"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (} template<DerType> CleanedUpDerType<DerType)",
    "insertText": "type(min)(const AutoDiffScalar<DerType>& x, const AutoDiffScalar<DerType>& y)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (} template<DerType> CleanedUpDerType<DerType)",
    "insertText": "type(max)(const AutoDiffScalar<DerType>& x, const AutoDiffScalar<DerType>& y)"
  },
  {
    "label": "EIGEN_AUTODIFF_DECLARE_GLOBAL_UNARY()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_AUTODIFF_DECLARE_GLOBAL_UNARY(abs, using std::abs; return Eigen::MakeAutoDiffScalar(abs(x.value()), x.derivatives() * (x.value()<0 ? -1 : 1) );) EIGEN_AUTODIFF_DECLARE_GLOBAL_UNARY(abs2, using numext::abs2; return Eigen::MakeAutoDiffScalar(abs2(x.value()), x.derivatives() * (Scalar(2)*x.value()));) EIGEN_AUTODIFF_DECLARE_GLOBAL_UNARY(sqrt, using std::sqrt; Scalar sqrtx = sqrt(x.value()); return Eigen::MakeAutoDiffScalar(sqrtx,x.derivatives() * (Scalar(0.5) / sqrtx));) EIGEN_AUTODIFF_DECLARE_GLOBAL_UNARY(cos, using std::cos; using std::sin; return Eigen::MakeAutoDiffScalar(cos(x.value()), x.derivatives() * (-sin(x.value())));) EIGEN_AUTODIFF_DECLARE_GLOBAL_UNARY(sin, using std::sin; using std::cos; return Eigen::MakeAutoDiffScalar(sin(x.value()),x.derivatives() * cos(x.value()));) EIGEN_AUTODIFF_DECLARE_GLOBAL_UNARY(exp, using std::exp; Scalar expx = exp(x.value()); return Eigen::MakeAutoDiffScalar(expx,x.derivatives() * expx);) EIGEN_AUTODIFF_DECLARE_GLOBAL_UNARY(log, using std::log; return Eigen::MakeAutoDiffScalar(log(x.value()),x.derivatives() * (Scalar(1)/x.value()));) template<typename DerType> inline const Eigen::AutoDiffScalar< EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(typename internal::remove_all<DerType>::type,typename internal::traits<typename internal::remove_all<DerType>::type>::Scalar,product) > pow(const Eigen::AutoDiffScalar<DerType> &x, const typename internal::traits<typename internal::remove_all<DerType>::type>::Scalar &y)"
  },
  {
    "label": "MakeAutoDiffScalar()",
    "kind": "Method",
    "detail": "Function (using namespace Eigen ; using std::pow ; return)",
    "insertText": "MakeAutoDiffScalar(pow(x.value(),y), x.derivatives() * (y * pow(x.value(),y-1)))"
  },
  {
    "label": "atan2()",
    "kind": "Method",
    "detail": "Function (} template<DerTypeA,DerTypeB> const AutoDiffScalar<Matrix<internal::traits<internal::remove_all<DerTypeA>::type>::Scalar,Dynamic,1>>)",
    "insertText": "atan2(const AutoDiffScalar<DerTypeA>& a, const AutoDiffScalar<DerTypeB>& b)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (using std::atan2 ; typedef internal::traits<internal::remove_all<DerTypeA>::type>::Scalar Scalar ; typedef AutoDiffScalar<Matrix<Scalar,Dynamic,1>> PlainADS ; PlainADS ret ; ret .)",
    "insertText": "value() = atan2(a.value(), b.value())"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (Scalar squared_hypot = a .)",
    "insertText": "value() * a.value() + b.value() * b.value()"
  },
  {
    "label": "derivatives()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "derivatives() = (a.derivatives() * b.value() - a.value() * b.derivatives())"
  }
]