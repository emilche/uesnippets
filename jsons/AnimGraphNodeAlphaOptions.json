[
  {
    "label": "FAnimGraphNodeAlphaOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimGraphNodeAlphaOptions"
  },
  {
    "label": "HandleCustomizePinData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Kismet2 / BlueprintEditorUtils . h \" # include \" Animation / InputScaleBias . h \" # include \" AnimGraphNode_Base . h \" # include \" ScopedTransaction . h \" # include \" DetailLayoutBuilder . h \" struct FAnimGraphNodeAlphaOptions { template<AnimNodeType> void)",
    "insertText": "HandleCustomizePinData(const AnimNodeType& InAnimNode, UEdGraphPin* InPin)"
  },
  {
    "label": "bHidden()",
    "kind": "Method",
    "detail": "Function (InPin ->)",
    "insertText": "bHidden(InAnimNode.AlphaInputType != EAnimAlphaInputType::Float)"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (InPin -> PinFriendlyName = InAnimNode . AlphaScaleBias .)",
    "insertText": "GetFriendlyName(InAnimNode.AlphaScaleBiasClamp.GetFriendlyName(InPin->PinFriendlyName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(InPin->PinName == GET_MEMBER_NAME_STRING_CHECKED(AnimNodeType, bAlphaBoolEnabled))"
  },
  {
    "label": "bHidden()",
    "kind": "Method",
    "detail": "Function (InPin ->)",
    "insertText": "bHidden(InAnimNode.AlphaInputType != EAnimAlphaInputType::Bool)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InPin->PinName == GET_MEMBER_NAME_STRING_CHECKED(AnimNodeType, AlphaCurveName))"
  },
  {
    "label": "bHidden()",
    "kind": "Method",
    "detail": "Function (InPin ->)",
    "insertText": "bHidden(InAnimNode.AlphaInputType != EAnimAlphaInputType::Curve)"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (InPin -> PinFriendlyName = InAnimNode . AlphaScaleBiasClamp .)",
    "insertText": "GetFriendlyName(InPin->PinFriendlyName)"
  },
  {
    "label": "HandlePostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (} } } template<AnimNodeType> void)",
    "insertText": "HandlePostEditChangeProperty(const AnimNodeType& InAnimNode, UAnimGraphNode_Base* InNode, FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "PropertyName(PropertyChangedEvent.Property ? PropertyChangedEvent.Property->GetFName() : NAME_None)"
  },
  {
    "label": "ReconstructNode()",
    "kind": "Method",
    "detail": "Function (InNode ->)",
    "insertText": "ReconstructNode()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(PropertyName == GET_MEMBER_NAME_STRING_CHECKED(AnimNodeType, AlphaInputType))"
  },
  {
    "label": "Transaction()",
    "kind": "Method",
    "detail": "Function (FScopedTransaction)",
    "insertText": "Transaction(NSLOCTEXT(\"AnimGraphNodeAlphaOptions\", \"ChangeAlphaInputType\", \"Change Alpha Input Type\"))"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (InNode ->)",
    "insertText": "Modify()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin* Pin = InNode -> Pins [ PinIndex ] ;)",
    "insertText": "if(Pin->PinName == GET_MEMBER_NAME_STRING_CHECKED(AnimNodeType, Alpha))"
  },
  {
    "label": "BreakAllPinLinks()",
    "kind": "Method",
    "detail": "Function (Pin ->)",
    "insertText": "BreakAllPinLinks()"
  },
  {
    "label": "RemoveBindings()",
    "kind": "Method",
    "detail": "Function (InNode ->)",
    "insertText": "RemoveBindings(Pin->PinName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Pin->PinName == GET_MEMBER_NAME_STRING_CHECKED(AnimNodeType, bAlphaBoolEnabled))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Pin->PinName == GET_MEMBER_NAME_STRING_CHECKED(AnimNodeType, AlphaCurveName))"
  },
  {
    "label": "MarkBlueprintAsStructurallyModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkBlueprintAsStructurallyModified(InNode->GetBlueprint())"
  },
  {
    "label": "HandleCustomizeDetails()",
    "kind": "Method",
    "detail": "Function (} } template<AnimNodeType> void)",
    "insertText": "HandleCustomizeDetails(const AnimNodeType& InAnimNode, TSharedRef<IPropertyHandle> InNodeHandle, IDetailLayoutBuilder& InDetailBuilder)"
  },
  {
    "label": "HideProperty()",
    "kind": "Method",
    "detail": "Function (InDetailBuilder .)",
    "insertText": "HideProperty(InNodeHandle->GetChildHandle(GET_MEMBER_NAME_CHECKED(AnimNodeType, bAlphaBoolEnabled)))"
  },
  {
    "label": "HideProperty()",
    "kind": "Method",
    "detail": "Function (InDetailBuilder .)",
    "insertText": "HideProperty(InNodeHandle->GetChildHandle(GET_MEMBER_NAME_CHECKED(AnimNodeType, AlphaBoolBlend)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InAnimNode.AlphaInputType != EAnimAlphaInputType::Float)"
  },
  {
    "label": "HideProperty()",
    "kind": "Method",
    "detail": "Function (InDetailBuilder .)",
    "insertText": "HideProperty(InNodeHandle->GetChildHandle(GET_MEMBER_NAME_CHECKED(AnimNodeType, Alpha)))"
  },
  {
    "label": "HideProperty()",
    "kind": "Method",
    "detail": "Function (InDetailBuilder .)",
    "insertText": "HideProperty(InNodeHandle->GetChildHandle(GET_MEMBER_NAME_CHECKED(AnimNodeType, AlphaScaleBias)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InAnimNode.AlphaInputType != EAnimAlphaInputType::Curve)"
  },
  {
    "label": "HideProperty()",
    "kind": "Method",
    "detail": "Function (InDetailBuilder .)",
    "insertText": "HideProperty(InNodeHandle->GetChildHandle(GET_MEMBER_NAME_CHECKED(AnimNodeType, AlphaCurveName)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((InAnimNode.AlphaInputType != EAnimAlphaInputType::Float) && (InAnimNode.AlphaInputType != EAnimAlphaInputType::Curve))"
  },
  {
    "label": "HideProperty()",
    "kind": "Method",
    "detail": "Function (InDetailBuilder .)",
    "insertText": "HideProperty(InNodeHandle->GetChildHandle(GET_MEMBER_NAME_CHECKED(AnimNodeType, AlphaScaleBiasClamp)))"
  }
]