[
  {
    "label": "LogMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LogMessage"
  },
  {
    "label": "LogMessageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LogMessageData"
  },
  {
    "label": "LogMessageFatal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LogMessageFatal"
  },
  {
    "label": "LogMessageQuietlyFatal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LogMessageQuietlyFatal"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_LOG_INTERNAL_LOG_MESSAGE_H_ # define ABSL_LOG_INTERNAL_LOG_MESSAGE_H_ # include<ios> # include<memory> # include<ostream> # include<streambuf> # include<string> # include \" absl / base / attributes . h \" # include \" absl / base / config . h \" # include \" absl / base / internal / errno_saver . h \" # include \" absl / base / log_severity . h \" # include \" absl / log / internal / config . h \" # include \" absl / log / internal / nullguard . h \" # include \" absl / log / log_entry . h \" # include \" absl / log / log_sink . h \" # include \" absl / strings / string_view . h \" # include \" absl / time / time . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace log_internal { int kLogMessageBufferSize = 1 5 0 0 0 ; class LogMessage { public :)",
    "insertText": "LogMessage(const char* file, int line, absl::LogSeverity severity)"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMessage(const LogMessage&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LogMessage&)",
    "insertText": "operator(const LogMessage&)"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LogMessage()"
  },
  {
    "label": "AtLocation()",
    "kind": "Method",
    "detail": "Function (LogMessage&)",
    "insertText": "AtLocation(absl::string_view file, int line)"
  },
  {
    "label": "NoPrefix()",
    "kind": "Method",
    "detail": "Function (LogMessage&)",
    "insertText": "NoPrefix()"
  },
  {
    "label": "WithVerbosity()",
    "kind": "Method",
    "detail": "Function (LogMessage&)",
    "insertText": "WithVerbosity(int verbose_level)"
  },
  {
    "label": "WithTimestamp()",
    "kind": "Method",
    "detail": "Function (LogMessage&)",
    "insertText": "WithTimestamp(absl::Time timestamp)"
  },
  {
    "label": "WithThreadID()",
    "kind": "Method",
    "detail": "Function (LogMessage&)",
    "insertText": "WithThreadID(absl::LogEntry::tid_t tid)"
  },
  {
    "label": "WithMetadataFrom()",
    "kind": "Method",
    "detail": "Function (LogMessage&)",
    "insertText": "WithMetadataFrom(const absl::LogEntry& entry)"
  },
  {
    "label": "WithPerror()",
    "kind": "Method",
    "detail": "Function (LogMessage&)",
    "insertText": "WithPerror()"
  },
  {
    "label": "ToSinkAlso()",
    "kind": "Method",
    "detail": "Function (LogMessage&)",
    "insertText": "ToSinkAlso(absl::LogSink* sink)"
  },
  {
    "label": "ToSinkOnly()",
    "kind": "Method",
    "detail": "Function (LogMessage&)",
    "insertText": "ToSinkOnly(absl::LogSink* sink)"
  },
  {
    "label": "InternalStream()",
    "kind": "Method",
    "detail": "Function (LogMessage&)",
    "insertText": "InternalStream()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(signed char v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(unsigned char v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(signed short v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(signed int v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(signed long v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(signed long long v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(unsigned short v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(unsigned int v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(unsigned long v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(unsigned long long v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(void* v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(const void* v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(float v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(double v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(bool v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogMessage&)",
    "insertText": "operator(std::ostream& (*m)(std::ostream& os))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LogMessage&)",
    "insertText": "operator(std::ios_base& (*m)(std::ios_base& os))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<int SIZE> LogMessage&)",
    "insertText": "operator(const char (&buf)[SIZE])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<int SIZE> LogMessage&)",
    "insertText": "operator(char (&buf)[SIZE])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T> LogMessage&)",
    "insertText": "operator(const T& v)"
  },
  {
    "label": "FailWithoutStackTrace()",
    "kind": "Method",
    "detail": "Function (protected : ABSL_ATTRIBUTE_NORETURN void)",
    "insertText": "FailWithoutStackTrace()"
  },
  {
    "label": "FailQuietly()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_NORETURN void)",
    "insertText": "FailQuietly()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "SetFailQuietly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFailQuietly()"
  },
  {
    "label": "IsFatal()",
    "kind": "Method",
    "detail": "Function (private : struct LogMessageData ; bool)",
    "insertText": "IsFatal()"
  },
  {
    "label": "PrepareToDie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareToDie()"
  },
  {
    "label": "Die()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Die()"
  },
  {
    "label": "SendToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendToLog()"
  },
  {
    "label": "LogBacktraceIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogBacktraceIfNeeded()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (stream_<<log_internal::NullGuard<)",
    "insertText": "T().Guard(v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (stream_<<buf ; return* this ; } template LogMessage&)",
    "insertText": "operator(const char& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const signed char& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const unsigned char& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const short& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const unsigned short& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const int& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const unsigned int& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const long& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const unsigned long& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const long long& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const unsigned long long& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(void* const& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const void* const& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const float& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const double& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const bool& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const std::string& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template LogMessage&)",
    "insertText": "operator(const absl::string_view& v)"
  },
  {
    "label": "LogMessageFatal()",
    "kind": "Method",
    "detail": "Function (class LogMessageFatal final : public LogMessage { public :)",
    "insertText": "LogMessageFatal(const char* file, int line)"
  },
  {
    "label": "LogMessageFatal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMessageFatal(const char* file, int line, absl::string_view failure_msg)"
  },
  {
    "label": "LogMessageFatal()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_NORETURN ~)",
    "insertText": "LogMessageFatal()"
  },
  {
    "label": "LogMessageQuietlyFatal()",
    "kind": "Method",
    "detail": "Function (} ; class LogMessageQuietlyFatal final : public LogMessage { public :)",
    "insertText": "LogMessageQuietlyFatal(const char* file, int line)"
  },
  {
    "label": "LogMessageQuietlyFatal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMessageQuietlyFatal(const char* file, int line, absl::string_view failure_msg)"
  },
  {
    "label": "LogMessageQuietlyFatal()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_NORETURN ~)",
    "insertText": "LogMessageQuietlyFatal()"
  },
  {
    "label": "ABSL_INTERNAL_C_SYMBOL()",
    "kind": "Method",
    "detail": "Function (} ; } ABSL_NAMESPACE_END } \" C \" ABSL_ATTRIBUTE_WEAK void)",
    "insertText": "ABSL_INTERNAL_C_SYMBOL(AbslInternalOnFatalLogMessage)(const absl::LogEntry&)"
  }
]