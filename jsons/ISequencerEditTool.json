[
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "ITrackAreaHotspot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ITrackAreaHotspot"
  },
  {
    "label": "FVirtualTrackArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTrackArea"
  },
  {
    "label": "ISequencerEditToolDragOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerEditToolDragOperation"
  },
  {
    "label": "ISequencerEditTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerEditTool"
  },
  {
    "label": "OnBeginDrag()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Input / CursorReply . h \" # include \" ISequencerInputHandler . h \" class FSlateWindowElementList ; class SWidget ; namespace UE { namespace Sequencer { struct ITrackAreaHotspot ; class FVirtualTrackArea ; class ISequencerEditToolDragOperation { public : void)",
    "insertText": "OnBeginDrag(const FPointerEvent& MouseEvent, FVector2D LocalMousePos, const FVirtualTrackArea& VirtualTrackArea)"
  },
  {
    "label": "OnDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrag(const FPointerEvent& MouseEvent, FVector2D LocalMousePos, const FVirtualTrackArea& VirtualTrackArea)"
  },
  {
    "label": "OnEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndDrag(const FPointerEvent& MouseEvent, FVector2D LocalMousePos, const FVirtualTrackArea& VirtualTrackArea)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "GetCursor()"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "ISequencerEditToolDragOperation()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "ISequencerEditToolDragOperation()"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (} } ; class ISequencerEditTool : public ISequencerInputHandler { public : void)",
    "insertText": "OnMouseCaptureLost()"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(SWidget& OwnerWidget, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyUp(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "CanDeactivate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeactivate()"
  },
  {
    "label": "GetDragHotspot()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITrackAreaHotspot>)",
    "insertText": "GetDragHotspot()"
  },
  {
    "label": "ISequencerEditTool()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "ISequencerEditTool()"
  }
]