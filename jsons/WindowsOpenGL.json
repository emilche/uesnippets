[
  {
    "label": "FWindowsOpenGL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowsOpenGL"
  },
  {
    "label": "InitDebugContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" OpenGLThirdParty . h \" # include \" WindowsOpenGLPlatform . h \" # define EMULATE_ES31 0 # if ! EMULATE_ES31 # include \" OpenGL4 . h \" # define GL_DEBUG_TOOL_EXT 0 x6789 # define GL_DEBUG_TOOL_NAME_EXT 0 x678A # define GL_DEBUG_TOOL_PURPOSE_EXT 0 x678B struct FWindowsOpenGL : public FOpenGL4 { void)",
    "insertText": "InitDebugContext()"
  },
  {
    "label": "glIsEnabled()",
    "kind": "Method",
    "detail": "Function (bool GRunningUnderRenderDoc ; bDebugContext =)",
    "insertText": "glIsEnabled(GL_DEBUG_OUTPUT)"
  },
  {
    "label": "LabelObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LabelObject(GLenum Type, GLuint Object, const ANSICHAR* Name)"
  },
  {
    "label": "glObjectLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glObjectLabel(Type, Object, -1, Name)"
  },
  {
    "label": "PushGroupMarker()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PushGroupMarker(const ANSICHAR* Name)"
  },
  {
    "label": "glPushDebugGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPushDebugGroup(GL_DEBUG_SOURCE_APPLICATION, 1, FCStringAnsi::Strlen(Name), Name)"
  },
  {
    "label": "PopGroupMarker()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PopGroupMarker()"
  },
  {
    "label": "glPopDebugGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPopDebugGroup()"
  },
  {
    "label": "TexStorage2D()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "TexStorage2D(GLenum Target, GLint Levels, GLint InternalFormat, GLsizei Width, GLsizei Height, GLenum Format, GLenum Type, ETextureCreateFlags Flags)"
  },
  {
    "label": "glTexStorage2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexStorage2D(Target, Levels, InternalFormat, Width, Height)"
  },
  {
    "label": "glTexStorage2DMultisample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexStorage2DMultisample(Target, Samples, InternalFormat, Width, Height, FixedSampleLocations)"
  },
  {
    "label": "glTexStorage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexStorage3D(Target, Levels, InternalFormat, Width, Height, Depth)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { const bool bArrayTexture = Target = = GL_TEXTURE_2D_ARRAY | | Target = = GL_TEXTURE_CUBE_MAP_ARRAY ;)",
    "insertText": "for(uint32 MipIndex = 0; MipIndex < uint32(Levels); MipIndex++)"
  },
  {
    "label": "glTexImage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexImage3D(Target, MipIndex, InternalFormat, FMath::Max<uint32>(1, (Width >> MipIndex)), FMath::Max<uint32>(1, (Height >> MipIndex)), (bArrayTexture) ? Depth : FMath::Max<uint32>(1, (Depth >> MipIndex)), 0, Format, Type, NULL)"
  },
  {
    "label": "CopyImageSubData()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "CopyImageSubData(GLuint SrcName, GLenum SrcTarget, GLint SrcLevel, GLint SrcX, GLint SrcY, GLint SrcZ, GLuint DstName, GLenum DstTarget, GLint DstLevel, GLint DstX, GLint DstY, GLint DstZ, GLsizei Width, GLsizei Height, GLsizei Depth)"
  },
  {
    "label": "glCopyImageSubData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCopyImageSubData(SrcName, SrcTarget, SrcLevel, SrcX, SrcY, SrcZ, DstName, DstTarget, DstLevel, DstX, DstY, DstZ, Width, Height, Depth)"
  },
  {
    "label": "SupportsBufferStorage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsBufferStorage()"
  },
  {
    "label": "glBufferStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBufferStorage(Target, Size, Data, Flags)"
  },
  {
    "label": "DepthBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DepthBounds(GLfloat Min, GLfloat Max)"
  },
  {
    "label": "glDepthBoundsEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDepthBoundsEXT(Min, Max)"
  },
  {
    "label": "GetTextureSamplerHandle()",
    "kind": "Method",
    "detail": "Function (} GLuint64)",
    "insertText": "GetTextureSamplerHandle(GLuint Texture, GLuint Sampler)"
  },
  {
    "label": "GetTextureHandle()",
    "kind": "Method",
    "detail": "Function (} GLuint64)",
    "insertText": "GetTextureHandle(GLuint Texture)"
  },
  {
    "label": "MakeTextureHandleResident()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeTextureHandleResident(GLuint64 TextureHandle)"
  },
  {
    "label": "glMakeTextureHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glMakeTextureHandleResidentARB(TextureHandle)"
  },
  {
    "label": "MakeTextureHandleNonResident()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeTextureHandleNonResident(GLuint64 TextureHandle)"
  },
  {
    "label": "glMakeTextureHandleNonResidentARB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glMakeTextureHandleNonResidentARB(TextureHandle)"
  },
  {
    "label": "UniformHandleui64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UniformHandleui64(GLint Location, GLuint64 Value)"
  },
  {
    "label": "glUniformHandleui64ARB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUniformHandleui64ARB(Location, Value)"
  },
  {
    "label": "SupportsProgramBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsProgramBinary()"
  },
  {
    "label": "glGetProgramBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGetProgramBinary(Program, BufSize, Length, BinaryFormat, Binary)"
  },
  {
    "label": "ProgramBinary()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProgramBinary(GLuint Program, GLenum BinaryFormat, const void* Binary, GLsizei Length)"
  },
  {
    "label": "glProgramBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glProgramBinary(Program, BinaryFormat, Binary, Length)"
  },
  {
    "label": "GetShaderPlatform()",
    "kind": "Method",
    "detail": "Function (} } ; # else # define glMapBufferOES glMapBuffer # define glUnmapBufferOES glUnmapBuffer # define GL_CLAMP_TO_BORDER_EXT GL_CLAMP_TO_BORDER # define GL_WRITE_ONLY_OES GL_WRITE_ONLY # define GL_ANY_SAMPLES_PASSED_EXT GL_ANY_SAMPLES_PASSED # define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS # define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS # define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS # define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS # define GL_DEBUG_SOURCE_API_KHR # define GL_DEBUG_SOURCE_OTHER_KHR GL_DEBUG_SOURCE_OTHER # define GL_DEBUG_SOURCE_API_KHR # define GL_DEBUG_TYPE_ERROR_KHR GL_DEBUG_TYPE_ERROR # define GL_DEBUG_TYPE_OTHER_KHR GL_DEBUG_TYPE_OTHER # define GL_DEBUG_TYPE_ERROR_KHR GL_DEBUG_TYPE_ERROR # define GL_DEBUG_TYPE_MARKER_KHR GL_DEBUG_TYPE_MARKER # define GL_DEBUG_TYPE_POP_GROUP_KHR GL_DEBUG_TYPE_POP_GROUP # define GL_DEBUG_TYPE_MARKER_KHR GL_DEBUG_TYPE_MARKER # define GL_DEBUG_SEVERITY_HIGH_KHR GL_DEBUG_SEVERITY_HIGH # define GL_DEBUG_SEVERITY_LOW_KHR GL_DEBUG_SEVERITY_LOW # define GL_DEBUG_SEVERITY_HIGH_KHR GL_DEBUG_SEVERITY_HIGH # define GL_DEBUG_SEVERITY_NOTIFICATION_KHR GL_DEBUG_SEVERITY_NOTIFICATION # define GL_DEBUG_TYPE_ERROR_KHR GL_DEBUG_TYPE_ERROR # define GL_DEBUG_SEVERITY_HIGH_KHR GL_DEBUG_SEVERITY_HIGH # include \" OpenGLES31 . h \" struct FWindowsOpenGL : public FOpenGLESDeferred { EShaderPlatform)",
    "insertText": "GetShaderPlatform()"
  },
  {
    "label": "glObjectLabelKHR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glObjectLabelKHR(Type, Object, -1, Name)"
  },
  {
    "label": "glPushDebugGroupKHR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPushDebugGroupKHR(GL_DEBUG_SOURCE_APPLICATION, 1, -1, Name)"
  },
  {
    "label": "glPopDebugGroupKHR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPopDebugGroupKHR()"
  }
]