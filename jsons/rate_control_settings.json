[
  {
    "label": "CongestionWindowConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CongestionWindowConfig"
  },
  {
    "label": "VideoRateControlConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoRateControlConfig"
  },
  {
    "label": "RateControlSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RateControlSettings"
  },
  {
    "label": "Parser()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_EXPERIMENTS_RATE_CONTROL_SETTINGS_H_ # define RTC_BASE_EXPERIMENTS_RATE_CONTROL_SETTINGS_H_ # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / units / data_size . h \" # include \" api / video_codecs / video_codec . h \" # include \" rtc_base / experiments / struct_parameters_parser . h \" # include \" video / config / video_encoder_config . h \" namespace webrtc { struct CongestionWindowConfig { char kKey [ ] = \" WebRTC - CongestionWindow \" ; absl::optional<int> queue_size_ms ; absl::optional<int> min_bitrate_bps ; absl::optional<DataSize> initial_data_window ; bool drop_frame_only = false ; std::unique_ptr<StructParametersParser>)",
    "insertText": "Parser()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (CongestionWindowConfig)",
    "insertText": "Parse(absl::string_view config)"
  },
  {
    "label": "RateControlSettings()",
    "kind": "Method",
    "detail": "Function (} ; class RateControlSettings final { public : ~)",
    "insertText": "RateControlSettings()"
  },
  {
    "label": "RateControlSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RateControlSettings(RateControlSettings&&)"
  },
  {
    "label": "ParseFromFieldTrials()",
    "kind": "Method",
    "detail": "Function (RateControlSettings)",
    "insertText": "ParseFromFieldTrials()"
  },
  {
    "label": "ParseFromKeyValueConfig()",
    "kind": "Method",
    "detail": "Function (RateControlSettings)",
    "insertText": "ParseFromKeyValueConfig(const FieldTrialsView* const key_value_config)"
  },
  {
    "label": "UseCongestionWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseCongestionWindow()"
  },
  {
    "label": "GetCongestionWindowAdditionalTimeMs()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetCongestionWindowAdditionalTimeMs()"
  },
  {
    "label": "UseCongestionWindowPushback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseCongestionWindowPushback()"
  },
  {
    "label": "UseCongestionWindowDropFrameOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseCongestionWindowDropFrameOnly()"
  },
  {
    "label": "CongestionWindowMinPushbackTargetBitrateBps()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "CongestionWindowMinPushbackTargetBitrateBps()"
  },
  {
    "label": "CongestionWindowInitialDataWindow()",
    "kind": "Method",
    "detail": "Function (absl::optional<DataSize>)",
    "insertText": "CongestionWindowInitialDataWindow()"
  },
  {
    "label": "GetPacingFactor()",
    "kind": "Method",
    "detail": "Function (absl::optional<double>)",
    "insertText": "GetPacingFactor()"
  },
  {
    "label": "UseAlrProbing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseAlrProbing()"
  },
  {
    "label": "LibvpxVp8QpMax()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "LibvpxVp8QpMax()"
  },
  {
    "label": "LibvpxVp8MinPixels()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "LibvpxVp8MinPixels()"
  },
  {
    "label": "LibvpxVp8TrustedRateController()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LibvpxVp8TrustedRateController()"
  },
  {
    "label": "Vp8BoostBaseLayerQuality()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vp8BoostBaseLayerQuality()"
  },
  {
    "label": "Vp8DynamicRateSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vp8DynamicRateSettings()"
  },
  {
    "label": "LibvpxVp9TrustedRateController()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LibvpxVp9TrustedRateController()"
  },
  {
    "label": "Vp9DynamicRateSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vp9DynamicRateSettings()"
  },
  {
    "label": "Vp8BaseHeavyTl3RateAllocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vp8BaseHeavyTl3RateAllocation()"
  },
  {
    "label": "UseEncoderBitrateAdjuster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseEncoderBitrateAdjuster()"
  },
  {
    "label": "BitrateAdjusterCanUseNetworkHeadroom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BitrateAdjusterCanUseNetworkHeadroom()"
  },
  {
    "label": "RateControlSettings()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "RateControlSettings(const FieldTrialsView* const key_value_config)"
  }
]