[
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInst"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "MCSymbolizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbolizer"
  },
  {
    "label": "MCSymbolizer()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCSYMBOLIZER_H # define LLVM_MC_MCSYMBOLIZER_H # include \" llvm / MC / MCRelocationInfo . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / DataTypes . h \" # include<cassert> # include<memory> namespace llvm { class MCContext ; class MCInst ; class raw_ostream ; class MCSymbolizer {)",
    "insertText": "MCSymbolizer(const MCSymbolizer &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MCSymbolizer &)"
  },
  {
    "label": "MCSymbolizer()",
    "kind": "Method",
    "detail": "Function (protected : MCContext& Ctx ; std::unique_ptr<MCRelocationInfo> RelInfo ; public :)",
    "insertText": "MCSymbolizer(MCContext &Ctx, std::unique_ptr<MCRelocationInfo> RelInfo) : Ctx(Ctx), RelInfo(std::move(RelInfo))"
  },
  {
    "label": "MCSymbolizer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MCSymbolizer()"
  },
  {
    "label": "tryAddingSymbolicOperand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "tryAddingSymbolicOperand(MCInst &Inst, raw_ostream &cStream, int64_t Value, uint64_t Address, bool IsBranch, uint64_t Offset, uint64_t InstSize)"
  },
  {
    "label": "tryAddingPcLoadReferenceComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tryAddingPcLoadReferenceComment(raw_ostream &cStream, int64_t Value, uint64_t Address)"
  }
]