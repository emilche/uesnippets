[
  {
    "label": "FInternationalization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternationalization"
  },
  {
    "label": "FLegacyCultureImplementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyCultureImplementation"
  },
  {
    "label": "FCulture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCulture"
  },
  {
    "label": "FLegacyCultureImplementation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Containers / Map . h \" # include \" Internationalization / Text . h \" # include \" Internationalization / Culture . h \" # include \" Internationalization / CultureImplementation . h \" # include \" Internationalization / FastDecimalFormat . h \" # if ! UE_ENABLE_ICU class FInternationalization ; class FLegacyCultureImplementation : public ICultureImplementation { class FCulture ; public :)",
    "insertText": "FLegacyCultureImplementation(const FText& InDisplayName, const FString& InEnglishName, const int InKeyboardLayoutId, const int InLCID, const FString& InName, const FString& InNativeName, const FString& InUnrealLegacyThreeLetterISOLanguageName, const FString& InThreeLetterISOLanguageName, const FString& InTwoLetterISOLanguageName, const FDecimalNumberFormattingRules& InDecimalNumberFormattingRules, const FDecimalNumberFormattingRules& InPercentFormattingRules, const FDecimalNumberFormattingRules& InBaseCurrencyFormattingRules, bool InIsRightToLeft)"
  },
  {
    "label": "FLegacyCultureImplementation()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLegacyCultureImplementation()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetEnglishName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEnglishName()"
  },
  {
    "label": "GetKeyboardLayoutId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetKeyboardLayoutId()"
  },
  {
    "label": "GetLCID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLCID()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetNativeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeName()"
  },
  {
    "label": "GetUnrealLegacyThreeLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUnrealLegacyThreeLetterISOLanguageName()"
  },
  {
    "label": "GetThreeLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetThreeLetterISOLanguageName()"
  },
  {
    "label": "GetTwoLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTwoLetterISOLanguageName()"
  },
  {
    "label": "GetNativeLanguage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeLanguage()"
  },
  {
    "label": "GetNativeRegion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeRegion()"
  },
  {
    "label": "GetRegion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRegion()"
  },
  {
    "label": "GetScript()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetScript()"
  },
  {
    "label": "GetVariant()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetVariant()"
  },
  {
    "label": "IsRightToLeft()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRightToLeft()"
  },
  {
    "label": "GetDecimalNumberFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules&)",
    "insertText": "GetDecimalNumberFormattingRules()"
  },
  {
    "label": "GetPercentFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules&)",
    "insertText": "GetPercentFormattingRules()"
  },
  {
    "label": "GetCurrencyFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules&)",
    "insertText": "GetCurrencyFormattingRules(const FString& InCurrencyCode)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(int32 Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(double Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetValidPluralForms()",
    "kind": "Method",
    "detail": "Function (const TArray<ETextPluralForm>&)",
    "insertText": "GetValidPluralForms(const ETextPluralType PluralType)"
  },
  {
    "label": "GetCanonicalName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCanonicalName(const FString& Name, FInternationalization& I18N)"
  }
]