[
  {
    "label": "UAnimGraphNode_BlendSpaceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_BlendSpaceBase"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" AnimGraphNode_AssetPlayerBase . h \" # include \" Animation / BlendSpace . h \" # include \" AnimGraphNode_BlendSpaceBase . generated . h \")",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() ANIMGRAPH_API virtual FLinearColor GetNodeTitleColor()"
  },
  {
    "label": "GetIconAndTint()",
    "kind": "Method",
    "detail": "Function (FSlateIcon)",
    "insertText": "GetIconAndTint(FLinearColor& OutColor)"
  },
  {
    "label": "GetMenuCategory()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetMenuCategory()"
  },
  {
    "label": "CustomizePinData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizePinData(UEdGraphPin* Pin, FName SourcePropertyName, int32 ArrayIndex)"
  },
  {
    "label": "PreloadRequiredAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreloadRequiredAssets()"
  },
  {
    "label": "PostProcessPinName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProcessPinName(const UEdGraphPin* Pin, FString& DisplayName)"
  },
  {
    "label": "GetOutputLinkAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOutputLinkAttributes(FNodeAttributeArray& OutAttributes)"
  },
  {
    "label": "GetAnimationAssetClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UAnimationAsset>)",
    "insertText": "GetAnimationAssetClass()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& InDetailBuilder)"
  },
  {
    "label": "GetBlendSpace()",
    "kind": "Method",
    "detail": "Function (protected : UBlendSpace*)",
    "insertText": "GetBlendSpace()"
  },
  {
    "label": "IsAimOffsetBlendSpace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAimOffsetBlendSpace(const UClass* BlendSpaceClass)"
  }
]