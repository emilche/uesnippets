[
  {
    "label": "Bignum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Bignum"
  },
  {
    "label": "Bignum()",
    "kind": "Method",
    "detail": "Function (# ifndef DOUBLE_CONVERSION_BIGNUM_H_ # define DOUBLE_CONVERSION_BIGNUM_H_ # include \" utils . h \" namespace double_conversion { class Bignum { public : const int kMaxSignificantBits = 3 5 8 4 ;)",
    "insertText": "Bignum() : used_bigits_(0), exponent_(0)"
  },
  {
    "label": "AssignUInt16()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssignUInt16(const uint16_t value)"
  },
  {
    "label": "AssignUInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignUInt64(uint64_t value)"
  },
  {
    "label": "AssignBignum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignBignum(const Bignum& other)"
  },
  {
    "label": "AssignDecimalString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignDecimalString(const Vector<const char> value)"
  },
  {
    "label": "AssignHexString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignHexString(const Vector<const char> value)"
  },
  {
    "label": "AssignPowerUInt16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignPowerUInt16(uint16_t base, const int exponent)"
  },
  {
    "label": "AddUInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUInt64(const uint64_t operand)"
  },
  {
    "label": "AddBignum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBignum(const Bignum& other)"
  },
  {
    "label": "SubtractBignum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubtractBignum(const Bignum& other)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Square()"
  },
  {
    "label": "ShiftLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShiftLeft(const int shift_amount)"
  },
  {
    "label": "MultiplyByUInt32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyByUInt32(const uint32_t factor)"
  },
  {
    "label": "MultiplyByUInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyByUInt64(const uint64_t factor)"
  },
  {
    "label": "MultiplyByPowerOfTen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyByPowerOfTen(const int exponent)"
  },
  {
    "label": "Times10()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Times10()"
  },
  {
    "label": "DivideModuloIntBignum()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "DivideModuloIntBignum(const Bignum& other)"
  },
  {
    "label": "ToHexString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToHexString(char* buffer, const int buffer_size)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Compare(const Bignum& a, const Bignum& b)"
  },
  {
    "label": "Equal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equal(const Bignum& a, const Bignum& b)"
  },
  {
    "label": "LessEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LessEqual(const Bignum& a, const Bignum& b)"
  },
  {
    "label": "Less()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Less(const Bignum& a, const Bignum& b)"
  },
  {
    "label": "PlusCompare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "PlusCompare(const Bignum& a, const Bignum& b, const Bignum& c)"
  },
  {
    "label": "PlusEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlusEqual(const Bignum& a, const Bignum& b, const Bignum& c)"
  },
  {
    "label": "PlusLessEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PlusLessEqual(const Bignum& a, const Bignum& b, const Bignum& c)"
  },
  {
    "label": "PlusLess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PlusLess(const Bignum& a, const Bignum& b, const Bignum& c)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} private : typedef uint32_t Chunk ; typedef uint64_t DoubleChunk ; const int kChunkSize =)",
    "insertText": "sizeof(Chunk)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const int kDoubleChunkSize =)",
    "insertText": "sizeof(DoubleChunk)"
  },
  {
    "label": "kBigitMask()",
    "kind": "Method",
    "detail": "Function (const int kBigitSize = 2 8 ; const Chunk)",
    "insertText": "kBigitMask(1 << kBigitSize)"
  },
  {
    "label": "EnsureCapacity()",
    "kind": "Method",
    "detail": "Function (const int kBigitCapacity = kMaxSignificantBits / kBigitSize ; void)",
    "insertText": "EnsureCapacity(const int size)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Align(const Bignum& other)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clamp()"
  },
  {
    "label": "IsClamped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClamped()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Zero()"
  },
  {
    "label": "BigitsShiftLeft()",
    "kind": "Method",
    "detail": "Function (used_bigits_ = 0 ; exponent_ = 0 ; } void)",
    "insertText": "BigitsShiftLeft(const int shift_amount)"
  },
  {
    "label": "BigitLength()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BigitLength()"
  },
  {
    "label": "RawBigit()",
    "kind": "Method",
    "detail": "Function (const Chunk&)",
    "insertText": "RawBigit(const int index)"
  },
  {
    "label": "BigitOrZero()",
    "kind": "Method",
    "detail": "Function (Chunk)",
    "insertText": "BigitOrZero(const int index)"
  },
  {
    "label": "SubtractTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubtractTimes(const Bignum& other, const int factor)"
  },
  {
    "label": "DOUBLE_CONVERSION_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (int16_t used_bigits_ ; int16_t exponent_ ; Chunk bigits_buffer_ [ kBigitCapacity ] ;)",
    "insertText": "DOUBLE_CONVERSION_DISALLOW_COPY_AND_ASSIGN(Bignum)"
  }
]