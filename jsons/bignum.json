[
  {
    "label": "Bignum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Bignum"
  },
  {
    "label": "AssignUInt16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignUInt16(const uint16_t value)"
  },
  {
    "label": "AssignUInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignUInt64(uint64_t value)"
  },
  {
    "label": "AssignBignum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignBignum(const Bignum& other)"
  },
  {
    "label": "AssignDecimalString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignDecimalString(const Vector<const char> value)"
  },
  {
    "label": "AssignHexString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignHexString(const Vector<const char> value)"
  },
  {
    "label": "AssignPowerUInt16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignPowerUInt16(uint16_t base, const int exponent)"
  },
  {
    "label": "AddUInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUInt64(const uint64_t operand)"
  },
  {
    "label": "AddBignum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBignum(const Bignum& other)"
  },
  {
    "label": "SubtractBignum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubtractBignum(const Bignum& other)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Square()"
  },
  {
    "label": "ShiftLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShiftLeft(const int shift_amount)"
  },
  {
    "label": "MultiplyByUInt32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyByUInt32(const uint32_t factor)"
  },
  {
    "label": "MultiplyByUInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyByUInt64(const uint64_t factor)"
  },
  {
    "label": "MultiplyByPowerOfTen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyByPowerOfTen(const int exponent)"
  },
  {
    "label": "MultiplyByUInt32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MultiplyByUInt32(10)"
  },
  {
    "label": "DivideModuloIntBignum()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "DivideModuloIntBignum(const Bignum& other)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Compare(const Bignum& a, const Bignum& b)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (Returns)",
    "insertText": "Compare(a + b, c)"
  },
  {
    "label": "PlusCompare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PlusCompare(const Bignum& a, const Bignum& b, const Bignum& c)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Align(const Bignum& other)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clamp()"
  },
  {
    "label": "BigitsShiftLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BigitsShiftLeft(const int shift_amount)"
  },
  {
    "label": "SubtractTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubtractTimes(const Bignum& other, const int factor)"
  }
]