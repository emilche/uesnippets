[
  {
    "label": "ThreadAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadAttributes"
  },
  {
    "label": "PlatformThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PlatformThread"
  },
  {
    "label": "SetPriority()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_PLATFORM_THREAD_H_ # define RTC_BASE_PLATFORM_THREAD_H_ # include<functional> # include<string> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" rtc_base / platform_thread_types . h \" namespace rtc { struct ThreadAttributes { ThreadPriority priority = ThreadPriority::kNormal ; ThreadAttributes&)",
    "insertText": "SetPriority(ThreadPriority priority_param)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (priority = priority_param ; return* this ; } } ; class PlatformThread final { public : # if)",
    "insertText": "defined(WEBRTC_WIN)"
  },
  {
    "label": "PlatformThread()",
    "kind": "Method",
    "detail": "Function (# else using Handle = pthread_t ; # endif)",
    "insertText": "PlatformThread()"
  },
  {
    "label": "PlatformThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformThread(const absl::string_view& name)"
  },
  {
    "label": "PlatformThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformThread(Handle handle, bool joinable, const absl::string_view& name, std::unique_ptr<PlatformThread>&& personal_id)"
  },
  {
    "label": "PlatformThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformThread(PlatformThread&& rhs)"
  },
  {
    "label": "PlatformThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformThread(const PlatformThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PlatformThread&)",
    "insertText": "operator(const PlatformThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PlatformThread&)",
    "insertText": "operator(PlatformThread&& rhs)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "name()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "SpawnJoinable()",
    "kind": "Method",
    "detail": "Function (} PlatformThread)",
    "insertText": "SpawnJoinable(std::function<void()> thread_function, absl::string_view name, ThreadAttributes attributes = ThreadAttributes())"
  },
  {
    "label": "SpawnDetached()",
    "kind": "Method",
    "detail": "Function (PlatformThread)",
    "insertText": "SpawnDetached(std::function<void()> thread_function, absl::string_view name, ThreadAttributes attributes = ThreadAttributes(), bool is_joinable_thread_check = true)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (absl::optional<Handle>)",
    "insertText": "GetHandle()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_WIN) bool QueueAPC(PAPCFUNC apc_function, ULONG_PTR data)"
  },
  {
    "label": "SpawnThread()",
    "kind": "Method",
    "detail": "Function (# endif private : PlatformThread)",
    "insertText": "SpawnThread(std::function<void()> thread_function, absl::string_view name, ThreadAttributes attributes, bool joinable, bool is_joinable_thread_check = true)"
  }
]