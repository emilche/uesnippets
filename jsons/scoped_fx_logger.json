[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedFxLogger()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FUCHSIA_SCOPED_FX_LOGGER_H_ # define BASE_FUCHSIA_SCOPED_FX_LOGGER_H_ # include<fuchsia / logger / cpp / fidl . h> # include<lib / syslog / structured_backend / cpp / fuchsia_syslog . h> # include<lib / zx / socket . h> # include<stdint . h> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / strings / string_piece_forward . h \" namespace base { class BASE_EXPORT ScopedFxLogger { public :)",
    "insertText": "ScopedFxLogger()"
  },
  {
    "label": "ScopedFxLogger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedFxLogger(ScopedFxLogger&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedFxLogger&)",
    "insertText": "operator(ScopedFxLogger&& other)"
  },
  {
    "label": "CreateForProcess()",
    "kind": "Method",
    "detail": "Function (ScopedFxLogger)",
    "insertText": "CreateForProcess(std::vector<base::StringPiece> tags = {})"
  },
  {
    "label": "CreateFromLogSink()",
    "kind": "Method",
    "detail": "Function (ScopedFxLogger)",
    "insertText": "CreateFromLogSink(fuchsia::logger::LogSinkHandle, std::vector<base::StringPiece> tags = {})"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMessage(base::StringPiece file, uint32_t line_number, base::StringPiece msg, FuchsiaLogSeverity severity)"
  },
  {
    "label": "is_valid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_valid()"
  },
  {
    "label": "ScopedFxLogger()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "ScopedFxLogger(std::vector<base::StringPiece> tags, zx::socket socket)"
  }
]