[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "FNetSerializerRegistryDelegates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetSerializerRegistryDelegates"
  },
  {
    "label": "EFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFlags"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "as"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "FNetSerializerRegistryDelegates()",
    "kind": "Method",
    "detail": "Function (IRISCORE_API)",
    "insertText": "FNetSerializerRegistryDelegates()"
  },
  {
    "label": "FNetSerializerRegistryDelegates()",
    "kind": "Method",
    "detail": "Function (IRISCORE_API)",
    "insertText": "FNetSerializerRegistryDelegates(EFlags Flags)"
  },
  {
    "label": "OnPreFreezeNetSerializerRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreFreezeNetSerializerRegistry()"
  },
  {
    "label": "OnPostFreezeNetSerializerRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostFreezeNetSerializerRegistry()"
  },
  {
    "label": "OnLoadedModulesUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadedModulesUpdated()"
  },
  {
    "label": "PreFreezeNetSerializerRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreFreezeNetSerializerRegistry()"
  },
  {
    "label": "PostFreezeNetSerializerRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostFreezeNetSerializerRegistry()"
  },
  {
    "label": "LoadedModulesUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadedModulesUpdated()"
  }
]