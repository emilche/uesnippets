[
  {
    "label": "TNumericPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TNumericPropertyParams"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" UObject / UnrealType . h \" template<NumericType> struct TNumericPropertyParams { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FString, FMetaDataGetter, FName)"
  },
  {
    "label": "TNumericPropertyParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TNumericPropertyParams(const FProperty* Property, FMetaDataGetter MetaDataGetter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString UIMinString ; FString UIMaxString ; FString SliderExponentString ; FString LinearDeltaSensitivityString ; FString DeltaString ; FString ClampMinString ; FString ClampMaxString ; FString ForcedUnits ; FString WheelStepString ;)",
    "insertText": "if(!MetaDataGetter.IsBound() && Property != nullptr)"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (MetaDataGetter =)",
    "insertText": "CreateLambda([Property](const FName& Key) { return Property->GetMetaData(Key); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(MetaDataGetter.IsBound())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (UIMinString = MetaDataGetter .)",
    "insertText": "Execute(\"UIMin\")"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (UIMaxString = MetaDataGetter .)",
    "insertText": "Execute(\"UIMax\")"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (SliderExponentString = MetaDataGetter .)",
    "insertText": "Execute(\"SliderExponent\")"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (LinearDeltaSensitivityString = MetaDataGetter .)",
    "insertText": "Execute(\"LinearDeltaSensitivity\")"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (DeltaString = MetaDataGetter .)",
    "insertText": "Execute(\"Delta\")"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (ClampMinString = MetaDataGetter .)",
    "insertText": "Execute(\"ClampMin\")"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (ClampMaxString = MetaDataGetter .)",
    "insertText": "Execute(\"ClampMax\")"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (WheelStepString = MetaDataGetter .)",
    "insertText": "Execute(\"WheelStep\")"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (} const FString& ActualUIMinString = UIMinString .)",
    "insertText": "Len()"
  },
  {
    "label": "Lowest()",
    "kind": "Method",
    "detail": "Function (NumericType ClampMin = TNumericLimits<NumericType)",
    "insertText": "Lowest()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (NumericType ClampMax = TNumericLimits<NumericType)",
    "insertText": "Max()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TTypeFromString<NumericType)",
    "insertText": "FromString(ClampMin, *ClampMinString)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!ClampMaxString.IsEmpty())"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TTypeFromString<NumericType)",
    "insertText": "FromString(ClampMax, *ClampMaxString)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TTypeFromString<NumericType)",
    "insertText": "FromString(UIMin, *ActualUIMinString)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TTypeFromString<NumericType)",
    "insertText": "FromString(UIMax, *ActualUIMaxString)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} const NumericType ActualUIMin =)",
    "insertText": "Max(UIMin, ClampMin)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const NumericType ActualUIMax =)",
    "insertText": "Min(UIMax, ClampMax)"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (MinValue = ClampMinString .)",
    "insertText": "Len() ? ClampMin : TOptional<NumericType>()"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (MaxValue = ClampMaxString .)",
    "insertText": "Len() ? ClampMax : TOptional<NumericType>()"
  },
  {
    "label": "MinSliderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MinSliderValue(ActualUIMinString.Len()) ? ActualUIMin : TOptional<NumericType>()"
  },
  {
    "label": "MaxSliderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaxSliderValue(ActualUIMaxString.Len()) ? ActualUIMax : TOptional<NumericType>()"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (} SliderExponent =)",
    "insertText": "NumericType(1)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TTypeFromString<NumericType)",
    "insertText": "FromString(SliderExponent, *SliderExponentString)"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (} Delta =)",
    "insertText": "NumericType(0)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TTypeFromString<NumericType)",
    "insertText": "FromString(Delta, *DeltaString)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} LinearDeltaSensitivity = 0 ;)",
    "insertText": "if(LinearDeltaSensitivityString.Len())"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TTypeFromString<int32)",
    "insertText": "FromString(LinearDeltaSensitivity, *LinearDeltaSensitivityString)"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Delta(LinearDeltaSensitivity != 0 && Delta == NumericType(0)) ? NumericType(1)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TTypeFromString<NumericType)",
    "insertText": "FromString(WheelStepValue, *WheelStepString)"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (WheelStep = WheelStepString .)",
    "insertText": "Len() ? WheelStepValue : TOptional<NumericType>()"
  },
  {
    "label": "GetLinearDeltaSensitivityAttribute()",
    "kind": "Method",
    "detail": "Function (} } TAttribute<int32>)",
    "insertText": "GetLinearDeltaSensitivityAttribute()"
  }
]