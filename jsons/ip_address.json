[
  {
    "label": "IPv6AddressFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IPv6AddressFlag"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "addrinfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "addrinfo"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_IP_ADDRESS_H_ # define RTC_BASE_IP_ADDRESS_H_ # if)",
    "insertText": "defined(WEBRTC_POSIX) #include <arpa/inet.h> #include <netdb.h> #include <netinet/in.h> #include <sys/socket.h> #include \"absl/strings/string_view.h\" #endif #if defined(WEBRTC_WIN) #include <winsock2.h> #include <ws2tcpip.h> #endif #include <string.h> #include <string> #include \"rtc_base/byte_order.h\" #if defined(WEBRTC_WIN)"
  },
  {
    "label": "IPAddress()",
    "kind": "Method",
    "detail": "Function (enum IPv6AddressFlag { IPV6_ADDRESS_FLAG_NONE = 0 x00,IPV6_ADDRESS_FLAG_TEMPORARY = 1<<0,IPV6_ADDRESS_FLAG_DEPRECATED = 1<<1,} ; class RTC_EXPORT IPAddress { public :)",
    "insertText": "IPAddress() : family_(AF_UNSPEC)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(&u_, 0, sizeof(u_))"
  },
  {
    "label": "IPAddress()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IPAddress(const in_addr& ip4) : family_(AF_INET)"
  },
  {
    "label": "IPAddress()",
    "kind": "Method",
    "detail": "Function (u_ . ip4 = ip4 ; })",
    "insertText": "IPAddress(const in6_addr& ip6) : family_(AF_INET6)"
  },
  {
    "label": "IPAddress()",
    "kind": "Method",
    "detail": "Function (u_ . ip6 = ip6 ; })",
    "insertText": "IPAddress(uint32_t ip_in_host_byte_order) : family_(AF_INET)"
  },
  {
    "label": "HostToNetwork32()",
    "kind": "Method",
    "detail": "Function (u_ . ip4 . s_addr =)",
    "insertText": "HostToNetwork32(ip_in_host_byte_order)"
  },
  {
    "label": "IPAddress()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IPAddress(const IPAddress& other) : family_(other.family_)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&u_, &other.u_, sizeof(u_))"
  },
  {
    "label": "IPAddress()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IPAddress()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const IPAddress&)",
    "insertText": "operator(const IPAddress& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifdef WEBRTC_UNIT_TEST std::ostream&)",
    "insertText": "operator(std::ostream& os)"
  },
  {
    "label": "family()",
    "kind": "Method",
    "detail": "Function (} # endif int)",
    "insertText": "family()"
  },
  {
    "label": "ipv6_address()",
    "kind": "Method",
    "detail": "Function (in6_addr)",
    "insertText": "ipv6_address()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Size()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "ToSensitiveString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToSensitiveString()"
  },
  {
    "label": "Normalized()",
    "kind": "Method",
    "detail": "Function (IPAddress)",
    "insertText": "Normalized()"
  },
  {
    "label": "AsIPv6Address()",
    "kind": "Method",
    "detail": "Function (IPAddress)",
    "insertText": "AsIPv6Address()"
  },
  {
    "label": "v4AddressAsHostOrderInteger()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "v4AddressAsHostOrderInteger()"
  },
  {
    "label": "overhead()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "overhead()"
  },
  {
    "label": "IsNil()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNil()"
  },
  {
    "label": "InterfaceAddress()",
    "kind": "Method",
    "detail": "Function (private : int family_ ; union { in_addr ip4 ; in6_addr ip6 ; } u_ ; } ; class RTC_EXPORT InterfaceAddress : public IPAddress { public :)",
    "insertText": "InterfaceAddress() : ipv6_flags_(IPV6_ADDRESS_FLAG_NONE)"
  },
  {
    "label": "InterfaceAddress()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InterfaceAddress(IPAddress ip) : IPAddress(ip), ipv6_flags_(IPV6_ADDRESS_FLAG_NONE)"
  },
  {
    "label": "InterfaceAddress()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InterfaceAddress(IPAddress addr, int ipv6_flags) : IPAddress(addr), ipv6_flags_(ipv6_flags)"
  },
  {
    "label": "InterfaceAddress()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InterfaceAddress(const in6_addr& ip6, int ipv6_flags) : IPAddress(ip6), ipv6_flags_(ipv6_flags)"
  },
  {
    "label": "InterfaceAddress()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InterfaceAddress(const InterfaceAddress& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const InterfaceAddress&)",
    "insertText": "operator(const InterfaceAddress& other)"
  },
  {
    "label": "ipv6_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ipv6_flags()"
  },
  {
    "label": "IPFromAddrInfo()",
    "kind": "Method",
    "detail": "Function (private : int ipv6_flags_ ; } ; bool)",
    "insertText": "IPFromAddrInfo(struct addrinfo* info, IPAddress* out)"
  },
  {
    "label": "IPFromString()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT bool)",
    "insertText": "IPFromString(absl::string_view str, IPAddress* out)"
  },
  {
    "label": "IPFromString()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT bool)",
    "insertText": "IPFromString(absl::string_view str, int flags, InterfaceAddress* out)"
  },
  {
    "label": "IPIsAny()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsAny(const IPAddress& ip)"
  },
  {
    "label": "IPIsLoopback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsLoopback(const IPAddress& ip)"
  },
  {
    "label": "IPIsLinkLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsLinkLocal(const IPAddress& ip)"
  },
  {
    "label": "IPIsPrivateNetwork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsPrivateNetwork(const IPAddress& ip)"
  },
  {
    "label": "IPIsSharedNetwork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsSharedNetwork(const IPAddress& ip)"
  },
  {
    "label": "IPIsPrivate()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT bool)",
    "insertText": "IPIsPrivate(const IPAddress& ip)"
  },
  {
    "label": "IPIsUnspec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsUnspec(const IPAddress& ip)"
  },
  {
    "label": "HashIP()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "HashIP(const IPAddress& ip)"
  },
  {
    "label": "IPIs6Bone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIs6Bone(const IPAddress& ip)"
  },
  {
    "label": "IPIs6To4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIs6To4(const IPAddress& ip)"
  },
  {
    "label": "IPIsMacBased()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT bool)",
    "insertText": "IPIsMacBased(const IPAddress& ip)"
  },
  {
    "label": "IPIsSiteLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsSiteLocal(const IPAddress& ip)"
  },
  {
    "label": "IPIsTeredo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsTeredo(const IPAddress& ip)"
  },
  {
    "label": "IPIsULA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsULA(const IPAddress& ip)"
  },
  {
    "label": "IPIsV4Compatibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsV4Compatibility(const IPAddress& ip)"
  },
  {
    "label": "IPIsV4Mapped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsV4Mapped(const IPAddress& ip)"
  },
  {
    "label": "IPAddressPrecedence()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "IPAddressPrecedence(const IPAddress& ip)"
  },
  {
    "label": "TruncateIP()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT IPAddress)",
    "insertText": "TruncateIP(const IPAddress& ip, int length)"
  },
  {
    "label": "GetLoopbackIP()",
    "kind": "Method",
    "detail": "Function (IPAddress)",
    "insertText": "GetLoopbackIP(int family)"
  },
  {
    "label": "GetAnyIP()",
    "kind": "Method",
    "detail": "Function (IPAddress)",
    "insertText": "GetAnyIP(int family)"
  },
  {
    "label": "CountIPMaskBits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CountIPMaskBits(const IPAddress& mask)"
  }
]