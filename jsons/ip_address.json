[
  {
    "label": "IPv6AddressFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IPv6AddressFlag"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "which",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "which"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "addrinfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "addrinfo"
  },
  {
    "label": "IPFromAddrInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPFromAddrInfo(struct addrinfo* info, IPAddress* out)"
  },
  {
    "label": "IPFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPFromString(absl::string_view str, IPAddress* out)"
  },
  {
    "label": "IPFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPFromString(absl::string_view str,\n                             int flags,\n                             InterfaceAddress* out)"
  },
  {
    "label": "IPIsAny()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsAny(const IPAddress& ip)"
  },
  {
    "label": "IPIsLoopback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsLoopback(const IPAddress& ip)"
  },
  {
    "label": "IPIsLinkLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsLinkLocal(const IPAddress& ip)"
  },
  {
    "label": "IPIsPrivateNetwork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsPrivateNetwork(const IPAddress& ip)"
  },
  {
    "label": "IPIsSharedNetwork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsSharedNetwork(const IPAddress& ip)"
  },
  {
    "label": "IPIsPrivate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsPrivate(const IPAddress& ip)"
  },
  {
    "label": "IPIsUnspec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsUnspec(const IPAddress& ip)"
  },
  {
    "label": "HashIP()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "HashIP(const IPAddress& ip)"
  },
  {
    "label": "IPIs6Bone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIs6Bone(const IPAddress& ip)"
  },
  {
    "label": "IPIs6To4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIs6To4(const IPAddress& ip)"
  },
  {
    "label": "IPIsMacBased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsMacBased(const IPAddress& ip)"
  },
  {
    "label": "IPIsSiteLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsSiteLocal(const IPAddress& ip)"
  },
  {
    "label": "IPIsTeredo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsTeredo(const IPAddress& ip)"
  },
  {
    "label": "IPIsULA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsULA(const IPAddress& ip)"
  },
  {
    "label": "IPIsV4Compatibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsV4Compatibility(const IPAddress& ip)"
  },
  {
    "label": "IPIsV4Mapped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IPIsV4Mapped(const IPAddress& ip)"
  },
  {
    "label": "IPAddressPrecedence()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "IPAddressPrecedence(const IPAddress& ip)"
  },
  {
    "label": "TruncateIP()",
    "kind": "Method",
    "detail": "Function (IPAddress)",
    "insertText": "TruncateIP(const IPAddress& ip, int length)"
  },
  {
    "label": "GetLoopbackIP()",
    "kind": "Method",
    "detail": "Function (IPAddress)",
    "insertText": "GetLoopbackIP(int family)"
  },
  {
    "label": "GetAnyIP()",
    "kind": "Method",
    "detail": "Function (IPAddress)",
    "insertText": "GetAnyIP(int family)"
  },
  {
    "label": "CountIPMaskBits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CountIPMaskBits(const IPAddress& mask)"
  }
]