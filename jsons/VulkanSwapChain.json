[
  {
    "label": "FVulkanDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDevice"
  },
  {
    "label": "FVulkanQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanQueue"
  },
  {
    "label": "FVulkanTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanTexture"
  },
  {
    "label": "FVulkanView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanView"
  },
  {
    "label": "EPixelFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPixelFormat"
  },
  {
    "label": "FFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFence"
  },
  {
    "label": "FSemaphore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSemaphore"
  },
  {
    "label": "FVulkanSwapChainRecreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanSwapChainRecreateInfo"
  },
  {
    "label": "FVulkanSwapChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanSwapChain"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVulkanViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanViewport"
  },
  {
    "label": "FVulkanSwapChain()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" VulkanConfiguration . h \" # include \" VulkanThirdParty . h \" class FVulkanDevice ; class FVulkanQueue ; class FVulkanTexture ; class FVulkanView ; enum EPixelFormat : uint8 ; namespace VulkanRHI { class FFence ; class FSemaphore ; } struct FVulkanSwapChainRecreateInfo { VkSwapchainKHR SwapChain ; VkSurfaceKHR Surface ; } ; class FVulkanSwapChain { public :)",
    "insertText": "FVulkanSwapChain(VkInstance InInstance, FVulkanDevice& InDevice, void* WindowHandle, EPixelFormat& InOutPixelFormat, uint32 Width, uint32 Height, bool bIsFullscreen, uint32* InOutDesiredNumBackBuffers, TArray<VkImage>& OutImages, int8 bLockToVsync, FVulkanSwapChainRecreateInfo* RecreateInfo)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(FVulkanSwapChainRecreateInfo* RecreateInfo)"
  },
  {
    "label": "Present()",
    "kind": "Method",
    "detail": "Function (enum class EStatus { Healthy = 0,OutOfDate = - 1,SurfaceLost = - 2,} ; EStatus)",
    "insertText": "Present(FVulkanQueue* GfxQueue, FVulkanQueue* PresentQueue, VulkanRHI::FSemaphore* BackBufferRenderingDoneSemaphore)"
  },
  {
    "label": "RenderThreadPacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderThreadPacing()"
  },
  {
    "label": "DoesLockToVsync()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "DoesLockToVsync()"
  }
]