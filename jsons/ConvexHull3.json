[
  {
    "label": "FProgressCancel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProgressCancel"
  },
  {
    "label": "TExtremePoints3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TExtremePoints3"
  },
  {
    "label": "TConvexHullSimplificationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConvexHullSimplificationSettings"
  },
  {
    "label": "TConvexHull3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConvexHull3"
  },
  {
    "label": "TExtremePoints3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" HalfspaceTypes . h \" # include \" IndexTypes . h \" # include \" LineTypes . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" MathUtil . h \" # include \" PlaneTypes . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" # include \" Util / ProgressCancel . h \" # include \" VectorTypes . h \" class FProgressCancel ; namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> struct TExtremePoints3 { int Dimension = 0 ; int Extreme [ 4 ] { 0,0,0,0 } ; TVector<RealType> Origin { 0,0,0 } ; TVector<RealType> Basis [ 3 ] { { 0,0,0 },{ 0,0,0 },{ 0,0,0 } } ;)",
    "insertText": "TExtremePoints3(int32 NumPoints, TFunctionRef<TVector<RealType>(int32)> GetPointFunc, TFunctionRef<bool(int32)> FilterFunc = [](int32 Idx) {return true; }, RealType Epsilon = TMathUtil<RealType>::Epsilon)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(NumPoints, GetPointFunc, FilterFunc, Epsilon)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Init(int32 NumPoints, TFunctionRef<TVector<RealType>(int32)> GetPointFunc, TFunctionRef<bool(int32)> FilterFunc, RealType Epsilon = TMathUtil<RealType>::Epsilon)"
  },
  {
    "label": "DegenerateEdgeTolerance()",
    "kind": "Method",
    "detail": "Function (} ; template<RealType> struct TConvexHullSimplificationSettings { RealType)",
    "insertText": "DegenerateEdgeTolerance(RealType)"
  },
  {
    "label": "ComputeVolume()",
    "kind": "Method",
    "detail": "Function (int32 MaxHullVertices = - 1 ; RealType SkipAtHullDistanceAbsolute = - TMathUtil<RealType>::MaxReal ; RealType SkipAtHullDistanceAsFraction = - TMathUtil<RealType>::MaxReal ; } ; template<RealType> class TConvexHull3 { public : bool bSaveTriangleNeighbors = false ; TConvexHullSimplificationSettings<RealType> SimplificationSettings ; double)",
    "insertText": "ComputeVolume(const TArrayView<const TVector<RealType>> Vertices)"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Solve(int32 NumPoints, TFunctionRef<TVector<RealType>(int32)> GetPointFunc, TFunctionRef<bool(int32)> FilterFunc)"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Solve(int32 NumPoints, TFunctionRef<TVector<RealType>(int32)> GetPointFunc)"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (} template<VectorType> bool)",
    "insertText": "Solve(TArrayView<const VectorType> Points, TFunctionRef<bool(int32)> FilterFunc)"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (} template<VectorType> bool)",
    "insertText": "Solve(TArrayView<const VectorType> Points)"
  },
  {
    "label": "IsSolutionAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSolutionAvailable()"
  },
  {
    "label": "TriangleFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangleFunc(Triangle)"
  },
  {
    "label": "GetTriangles()",
    "kind": "Method",
    "detail": "Function (} } TArray<FIndex3i> const&)",
    "insertText": "GetTriangles()"
  },
  {
    "label": "GetSimplifiedFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSimplifiedFaces(TFunctionRef<void(TArray<int32>&, TVector<RealType>)> PolygonFunc, TFunctionRef<TVector<RealType>(int32)> GetPointFunc, RealType FaceAngleToleranceInDegrees = (RealType)1.0, RealType PlaneDistanceTolerance = (RealType)1.0)"
  },
  {
    "label": "GetSimplifiedFaces()",
    "kind": "Method",
    "detail": "Function (using FPolygonFace = TArray<int32,TInlineAllocator<8>> ; void)",
    "insertText": "GetSimplifiedFaces(TArray<FPolygonFace>& OutPolygons, TFunctionRef<TVector<RealType>(int32)> GetPointFunc, RealType FaceAngleToleranceInDegrees = (RealType)1.0, RealType PlaneDistanceTolerance = (RealType)1.0, TArray<TVector<RealType>>* OutPolygonNormals = nullptr)"
  },
  {
    "label": "GetTriangleNeighbors()",
    "kind": "Method",
    "detail": "Function (TArray<FIndex3i> const&)",
    "insertText": "GetTriangleNeighbors()"
  },
  {
    "label": "GetAsHalfspaces()",
    "kind": "Method",
    "detail": "Function (} template<VectorType> TArray<THalfspace3<RealType>>)",
    "insertText": "GetAsHalfspaces(TArrayView<const VectorType> Points)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<THalfspace3<RealType>> Halfspaces ;)",
    "insertText": "for(FIndex3i Tri : Hull)"
  },
  {
    "label": "TriHalfspace()",
    "kind": "Method",
    "detail": "Function (THalfspace3<RealType>)",
    "insertText": "TriHalfspace(Points[Tri.A], Points[Tri.B], Points[Tri.C])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Halfspaces .)",
    "insertText": "Add(TriHalfspace)"
  },
  {
    "label": "GetAsHalfspaces()",
    "kind": "Method",
    "detail": "Function (} return Halfspaces ; } template<VectorType> TArray<THalfspace3<RealType>>)",
    "insertText": "GetAsHalfspaces(TFunctionRef<VectorType(int32)> GetPointFunc)"
  },
  {
    "label": "TriHalfspace()",
    "kind": "Method",
    "detail": "Function (THalfspace3<RealType>)",
    "insertText": "TriHalfspace(GetPointFunc(Tri.A), GetPointFunc(Tri.B), GetPointFunc(Tri.C))"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} return Halfspaces ; } void)",
    "insertText": "Empty()"
  },
  {
    "label": "GetDimension()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetDimension()"
  }
]