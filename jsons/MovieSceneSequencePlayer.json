[
  {
    "label": "UMovieSceneSequenceTickManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequenceTickManager"
  },
  {
    "label": "FSequenceWeights",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequenceWeights"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneSequenceReplProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceReplProperties"
  },
  {
    "label": "FMovieSceneSequencePlaybackParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequencePlaybackParams"
  },
  {
    "label": "FMovieSceneSequencePlayToParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequencePlayToParams"
  },
  {
    "label": "UMovieSceneSequencePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequencePlayer"
  },
  {
    "label": "FMovieSceneUpdateArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneUpdateArgs"
  },
  {
    "label": "FServerTimeSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FServerTimeSample"
  },
  {
    "label": "FPauseOnArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPauseOnArgs"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ScriptMacros . h \" # include \" IMovieScenePlayer . h \" # include \" MovieScene . h \" # include \" Evaluation / MovieSceneEvaluationTemplateInstance . h \" # include \" IMovieScenePlaybackClient . h \" # include \" Misc / QualifiedFrameTime . h \" # include \" MovieSceneTimeController . h \" # include \" Evaluation / MovieScenePlayback . h \" # include \" Evaluation / MovieScenePlayback . h \" # include \" MovieSceneSequencePlaybackSettings . h \" # include \" MovieSceneSequenceTickManagerClient . h \" # include \" MovieSceneSequencePlaybackSettings . h \" # include \" MovieSceneLatentActionManager . h \" # include \" IMovieSceneSequencePlayerObserver . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" MovieSceneSequencePlayer . generated . h \" class UMovieSceneSequenceTickManager ; namespace UE::MovieScene { class FSequenceWeights ; })",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnMovieSceneSequencePlayerEvent)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnMovieSceneSequencePlayerNativeEvent)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Play,Jump,Scrub,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneSequenceReplProperties() : LastKnownStatus(EMovieScenePlayerStatus::Stopped) , LastKnownNumLoops(0) , LastKnownSerialNumber(0)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Frame,Time,MarkedFrame,Timecode } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneSequencePlaybackParams() : Time(0.f) , PositionType(EMovieScenePositionType::Frame) , UpdateMethod(EUpdatePositionMethod::Play) , bHasJumped(false)"
  },
  {
    "label": "FMovieSceneSequencePlaybackParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSequencePlaybackParams(FFrameTime InFrame, EUpdatePositionMethod InUpdateMethod) : Frame(InFrame) , Time(0.f) , PositionType(EMovieScenePositionType::Frame) , UpdateMethod(InUpdateMethod) , bHasJumped(false)"
  },
  {
    "label": "FMovieSceneSequencePlaybackParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSequencePlaybackParams(float InTime, EUpdatePositionMethod InUpdateMethod) : Time(InTime) , PositionType(EMovieScenePositionType::Time) , UpdateMethod(InUpdateMethod) , bHasJumped(false)"
  },
  {
    "label": "FMovieSceneSequencePlaybackParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSequencePlaybackParams(const FString& InMarkedFrame, EUpdatePositionMethod InUpdateMethod) : Time(0.f) , MarkedFrame(InMarkedFrame) , PositionType(EMovieScenePositionType::MarkedFrame) , UpdateMethod(InUpdateMethod) , bHasJumped(false)"
  },
  {
    "label": "FMovieSceneSequencePlaybackParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSequencePlaybackParams(const FTimecode& InTimecode, EUpdatePositionMethod InUpdateMethod) : Time(0.f) , Timecode(InTimecode) , PositionType(EMovieScenePositionType::Timecode) , UpdateMethod(InUpdateMethod) , bHasJumped(false)"
  },
  {
    "label": "GetPlaybackPosition()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "GetPlaybackPosition(UMovieSceneSequencePlayer* Player)"
  },
  {
    "label": "GetPlaybackPosition()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "GetPlaybackPosition(UMovieSceneSequence* Sequence)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Cinematic\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Abstract, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() UPROPERTY(replicated)"
  },
  {
    "label": "UMovieSceneSequencePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UMovieSceneSequencePlayer(const FObjectInitializer&)"
  },
  {
    "label": "UMovieSceneSequencePlayer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UMovieSceneSequencePlayer()"
  },
  {
    "label": "SetWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWeight(double InWeight, FMovieSceneSequenceID SequenceID)"
  },
  {
    "label": "RemoveWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWeight(FMovieSceneSequenceID SequenceID)"
  },
  {
    "label": "OnSequenceUpdated()",
    "kind": "Method",
    "detail": "Function (FOnMovieSceneSequencePlayerUpdated&)",
    "insertText": "OnSequenceUpdated()"
  },
  {
    "label": "InitializeForTick()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InitializeForTick(UObject* Context)"
  },
  {
    "label": "SetPlaybackSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackSettings(const FMovieSceneSequencePlaybackSettings& InSettings)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(UMovieSceneSequence* InSequence)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(UMovieSceneSequence* InSequence, const FMovieSceneSequencePlaybackSettings& InSettings)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const float DeltaSeconds)"
  },
  {
    "label": "UpdateAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAsync(const float DeltaSeconds)"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetTickManager()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequenceTickManager*)",
    "insertText": "GetTickManager()"
  },
  {
    "label": "GetTimeController()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMovieSceneTimeController>)",
    "insertText": "GetTimeController()"
  },
  {
    "label": "SetTimeController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeController(TSharedPtr<FMovieSceneTimeController> InTimeController)"
  },
  {
    "label": "SetTimeControllerDirectly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeControllerDirectly(TSharedPtr<FMovieSceneTimeController> InTimeController)"
  },
  {
    "label": "SetIgnorePlaybackReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnorePlaybackReplication(bool bState)"
  },
  {
    "label": "PlayInternal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PlayInternal()"
  },
  {
    "label": "StopInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopInternal(FFrameTime TimeToResetTo)"
  },
  {
    "label": "FinishPlaybackInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishPlaybackInternal(FFrameTime TimeToFinishAt)"
  },
  {
    "label": "UpdateMovieSceneInstance()",
    "kind": "Method",
    "detail": "Function (struct FMovieSceneUpdateArgs { bool bHasJumped = false ; bool bIsAsync = false ; } ; void)",
    "insertText": "UpdateMovieSceneInstance(FMovieSceneEvaluationRange InRange, EMovieScenePlayerStatus::Type PlayerStatus, bool bHasJumped = false)"
  },
  {
    "label": "UpdateMovieSceneInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMovieSceneInstance(FMovieSceneEvaluationRange InRange, EMovieScenePlayerStatus::Type PlayerStatus, const FMovieSceneUpdateArgs& Args)"
  },
  {
    "label": "UpdateTimeCursorPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTimeCursorPosition(FFrameTime NewPosition, EUpdatePositionMethod Method, bool bHasJumpedOverride = false)"
  },
  {
    "label": "ShouldStopOrLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldStopOrLoop(FFrameTime NewPosition)"
  },
  {
    "label": "GetPauseRange()",
    "kind": "Method",
    "detail": "Function (TOptional<TRange<FFrameTime>>)",
    "insertText": "GetPauseRange(const FFrameTime& NewPosition)"
  },
  {
    "label": "GetPlaybackWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetPlaybackWorld()"
  },
  {
    "label": "GetLastValidTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "GetLastValidTime()"
  },
  {
    "label": "GetDisplayRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetDisplayRate()"
  },
  {
    "label": "NeedsQueueLatentAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsQueueLatentAction()"
  },
  {
    "label": "QueueLatentAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueLatentAction(FMovieSceneSequenceLatentActionDelegate Delegate)"
  },
  {
    "label": "RunLatentActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunLatentActions()"
  },
  {
    "label": "GetEvaluationTemplate()",
    "kind": "Method",
    "detail": "Function (public : FMovieSceneRootEvaluationTemplateInstance&)",
    "insertText": "GetEvaluationTemplate()"
  },
  {
    "label": "GetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (EMovieScenePlayerStatus::Type)",
    "insertText": "GetPlaybackStatus()"
  },
  {
    "label": "GetSpawnRegister()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSpawnRegister&)",
    "insertText": "GetSpawnRegister()"
  },
  {
    "label": "AsUObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "AsUObject()"
  },
  {
    "label": "SetViewportSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetViewportSettings(const TMap<FViewportClient*, EMovieSceneViewportParams>& ViewportParamsMap)"
  },
  {
    "label": "GetViewportSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetViewportSettings(TMap<FViewportClient*, EMovieSceneViewportParams>& ViewportParamsMap)"
  },
  {
    "label": "ResolveBoundObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResolveBoundObjects(UE::UniversalObjectLocator::FResolveParams& ResolveParams, const FGuid& InBindingId, FMovieSceneSequenceID SequenceID, UMovieSceneSequence& Sequence, TArray<UObject*, TInlineAllocator<1>>& OutObjects)"
  },
  {
    "label": "GetPlaybackClient()",
    "kind": "Method",
    "detail": "Function (IMovieScenePlaybackClient*)",
    "insertText": "GetPlaybackClient()"
  },
  {
    "label": "PreEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEvaluation(const FMovieSceneContext& Context)"
  },
  {
    "label": "PostEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEvaluation(const FMovieSceneContext& Context)"
  },
  {
    "label": "GetObserver()",
    "kind": "Method",
    "detail": "Function (TScriptInterface<IMovieSceneSequencePlayerObserver>)",
    "insertText": "GetObserver()"
  },
  {
    "label": "CallRemoteFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CallRemoteFunction(UFunction* Function, void* Parameters, FOutParmRec* OutParms, FFrame* Stack)"
  },
  {
    "label": "PostNetReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNetReceive()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "RegisterReplicationFragments()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_IRIS void)",
    "insertText": "RegisterReplicationFragments(UE::Net::FFragmentRegistrationContext& Context, UE::Net::EFragmentRegistrationFlags RegistrationFlags)"
  },
  {
    "label": "TickFromSequenceTickManager()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "TickFromSequenceTickManager(float DeltaSeconds, FMovieSceneEntitySystemRunner* Runner)"
  },
  {
    "label": "CanPlay()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "CanPlay()"
  },
  {
    "label": "OnLooped()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLooped()"
  },
  {
    "label": "OnPaused()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPaused()"
  },
  {
    "label": "OnStopped()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnStopped()"
  },
  {
    "label": "UpdateTimeCursorPosition_Internal()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "UpdateTimeCursorPosition_Internal(FFrameTime NewPosition, EUpdatePositionMethod Method, bool bHasJumpedOverride)"
  },
  {
    "label": "RunPreEvaluationCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPreEvaluationCallbacks()"
  },
  {
    "label": "RunPostEvaluationCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPostEvaluationCallbacks()"
  },
  {
    "label": "IncrementServerSerialNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementServerSerialNumber()"
  },
  {
    "label": "AdvanceClientSerialNumberTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceClientSerialNumberTo(int32 NewSerialNumber)"
  },
  {
    "label": "HasAuthority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAuthority()"
  },
  {
    "label": "UpdateNetworkSyncProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetworkSyncProperties()"
  },
  {
    "label": "UpdateServerTimeSamples()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "UpdateServerTimeSamples()"
  },
  {
    "label": "UpdateNetworkSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetworkSync()"
  },
  {
    "label": "GetPing()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPing()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (FMovieSceneLatentActionManager LatentActionManager ; TSharedPtr<FMovieSceneTimeController> TimeController ; TSharedPtr<FMovieSceneEntitySystemRunner> SynchronousRunner ; bool bIgnorePlaybackReplication = false ; private : FOnMovieSceneSequencePlayerUpdated OnMovieSceneSequencePlayerUpdate ; TOptional<FMovieSceneSequenceTickInterval> RegisteredTickInterval ; TOptional<double> OldMaxTickRate ; bool bOverridingDynResFrameTimeBudget = false ; TOptional<float> LastTickGameTimeSeconds ; struct FPauseOnArgs { FFrameTime Time ; bool bExclusive ; } ; TOptional<FPauseOnArgs> PauseOnFrame ;)",
    "insertText": "DECLARE_DELEGATE(FOnEvaluationCallback)"
  }
]