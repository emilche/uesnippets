[
  {
    "label": "symm_pack_lhs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "symm_pack_lhs"
  },
  {
    "label": "symm_pack_rhs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "symm_pack_rhs"
  },
  {
    "label": "product_selfadjoint_matrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_selfadjoint_matrix"
  },
  {
    "label": "selfadjoint_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "selfadjoint_product_impl"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SELFADJOINT_MATRIX_MATRIX_H # define EIGEN_SELFADJOINT_MATRIX_MATRIX_H namespace Eigen { namespace internal { template<Scalar,Index,int Pack1,int Pack2_dummy,int StorageOrder> struct symm_pack_lhs { template<int BlockRows> void)",
    "insertText": "pack(Scalar* blockA, const const_blas_data_mapper<Scalar,Index,StorageOrder>& lhs, Index cols, Index i, Index& count)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index h = 0 ;)",
    "insertText": "for(Index k=i; k<i+BlockRows; k++)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (blockA [ count + + ] =)",
    "insertText": "real(lhs(k,k))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + h ; })",
    "insertText": "for(Index k=i+BlockRows; k<cols; k++) for(Index w=0; w<BlockRows; w++) blockA[count++] = numext::conj(lhs(k, i+w))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(Scalar* blockA, const Scalar* _lhs, Index lhsStride, Index cols, Index rows)"
  },
  {
    "label": "HasHalf()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<packet_traits<Scalar>::type>::half HalfPacket ; typedef unpacket_traits<unpacket_traits<packet_traits<Scalar>::type>::half>::half QuarterPacket ; enum { PacketSize = packet_traits<Scalar>::size,HalfPacketSize = unpacket_traits<HalfPacket>::size,QuarterPacketSize = unpacket_traits<QuarterPacket>::size,)",
    "insertText": "HasHalf(int)HalfPacketSize < (int)PacketSize, HasQuarter = (int)QuarterPacketSize < (int)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (const_blas_data_mapper<Scalar,Index,StorageOrder>)",
    "insertText": "lhs(_lhs,lhsStride)"
  },
  {
    "label": "PacketSize()",
    "kind": "Method",
    "detail": "Function (Index count = 0 ; const Index peeled_mc3 = Pack1> = 3*)",
    "insertText": "PacketSize(rows/(3*PacketSize))*(3*PacketSize)"
  },
  {
    "label": "peeled_mc3()",
    "kind": "Method",
    "detail": "Function (const Index peeled_mc2 = Pack1> = 2* PacketSize ?)",
    "insertText": "peeled_mc3((rows-peeled_mc3)/(2*PacketSize))*(2*PacketSize)"
  },
  {
    "label": "peeled_mc2()",
    "kind": "Method",
    "detail": "Function (const Index peeled_mc1 = Pack1> = 1* PacketSize ?)",
    "insertText": "peeled_mc2((rows-peeled_mc2)/(1*PacketSize))*(1*PacketSize)"
  },
  {
    "label": "peeled_mc1()",
    "kind": "Method",
    "detail": "Function (const Index peeled_mc_half = Pack1> = HalfPacketSize ?)",
    "insertText": "peeled_mc1((rows-peeled_mc1)/(HalfPacketSize))*(HalfPacketSize)"
  },
  {
    "label": "peeled_mc_half()",
    "kind": "Method",
    "detail": "Function (const Index peeled_mc_quarter = Pack1> = QuarterPacketSize ?)",
    "insertText": "peeled_mc_half((rows-peeled_mc_half)/(QuarterPacketSize))*(QuarterPacketSize)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (blockA [ count + + ] =)",
    "insertText": "real(lhs(i, i))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } ; template<Scalar,Index,int nr,int StorageOrder> struct symm_pack_rhs { enum { PacketSize = packet_traits<Scalar>::size } ; void)",
    "insertText": "operator()(Scalar* blockB, const Scalar* _rhs, Index rhsStride, Index rows, Index cols, Index k2)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (Index end_k = k2 + rows ; Index count = 0 ; const_blas_data_mapper<Scalar,Index,StorageOrder>)",
    "insertText": "rhs(_rhs,rhsStride)"
  },
  {
    "label": "nr()",
    "kind": "Method",
    "detail": "Function (Index packet_cols8 =)",
    "insertText": "nr(cols/8)"
  },
  {
    "label": "nr()",
    "kind": "Method",
    "detail": "Function (Index packet_cols4 =)",
    "insertText": "nr(cols/4)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 0 ] =)",
    "insertText": "rhs(k,j2+0)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 1 ] =)",
    "insertText": "rhs(k,j2+1)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 2 ] =)",
    "insertText": "rhs(k,j2+2)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 3 ] =)",
    "insertText": "rhs(k,j2+3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(nr>=8)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 4 ] =)",
    "insertText": "rhs(k,j2+4)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 5 ] =)",
    "insertText": "rhs(k,j2+5)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 6 ] =)",
    "insertText": "rhs(k,j2+6)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 7 ] =)",
    "insertText": "rhs(k,j2+7)"
  },
  {
    "label": "nr()",
    "kind": "Method",
    "detail": "Function (} count + = nr ; } } Index end8 =)",
    "insertText": "nr(std::min)(k2+rows,packet_cols8)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 0 ] =)",
    "insertText": "conj(rhs(j2+0,k))"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 1 ] =)",
    "insertText": "conj(rhs(j2+1,k))"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 2 ] =)",
    "insertText": "conj(rhs(j2+2,k))"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 3 ] =)",
    "insertText": "conj(rhs(j2+3,k))"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 4 ] =)",
    "insertText": "conj(rhs(j2+4,k))"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 5 ] =)",
    "insertText": "conj(rhs(j2+5,k))"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 6 ] =)",
    "insertText": "conj(rhs(j2+6,k))"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (blockB [ count + 7 ] =)",
    "insertText": "conj(rhs(j2+7,k))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (count + = 8 ; } Index h = 0 ;)",
    "insertText": "for(Index k=j2; k<j2+8; k++)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (blockB [ count + h ] =)",
    "insertText": "real(rhs(k,k))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (count + = 8 ; + + h ; })",
    "insertText": "for(Index k=j2+8; k<end_k; k++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (count + = 8 ; } } })",
    "insertText": "if(nr>=4)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (count + = 4 ; } Index h = 0 ;)",
    "insertText": "for(Index k=j2; k<j2+4; k++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (count + = 4 ; + + h ; })",
    "insertText": "for(Index k=j2+4; k<end_k; k++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (count + = 4 ; } } })",
    "insertText": "for(Index j2=packet_cols4; j2<cols; ++j2)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "half(std::min)(end_k,j2)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (blockB [ count ] =)",
    "insertText": "conj(rhs(j2,k))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (count + = 1 ; })",
    "insertText": "if(half==j2 && half<k2+rows)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (blockB [ count ] =)",
    "insertText": "real(rhs(j2,j2))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (count + = 1 ; } else half - - ;)",
    "insertText": "for(Index k=half+1; k<k2+rows; k++)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (blockB [ count ] =)",
    "insertText": "rhs(k,j2)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (count + = 1 ; } } } } ; template<Scalar,Index,int LhsStorageOrder,bool LhsSelfAdjoint,bool ConjugateLhs,int RhsStorageOrder,bool RhsSelfAdjoint,bool ConjugateRhs,int ResStorageOrder,int ResInnerStride> struct product_selfadjoint_matrix ; template<Scalar,Index,int LhsStorageOrder,bool LhsSelfAdjoint,bool ConjugateLhs,int RhsStorageOrder,bool RhsSelfAdjoint,bool ConjugateRhs,int ResInnerStride> struct product_selfadjoint_matrix<Scalar,Index,LhsStorageOrder,LhsSelfAdjoint,ConjugateLhs,RhsStorageOrder,RhsSelfAdjoint,ConjugateRhs,RowMajor,ResInnerStride> { EIGEN_STRONG_INLINE void)",
    "insertText": "run(Index rows, Index cols, const Scalar* lhs, Index lhsStride, const Scalar* rhs, Index rhsStride, Scalar* res, Index resIncr, Index resStride, const Scalar& alpha, level3_blocking<Scalar,Scalar>& blocking)"
  },
  {
    "label": "EIGEN_LOGICAL_XOR()",
    "kind": "Method",
    "detail": "Function (product_selfadjoint_matrix<Scalar,Index,)",
    "insertText": "EIGEN_LOGICAL_XOR(RhsSelfAdjoint,RhsStorageOrder==RowMajor) ? ColMajor : RowMajor, RhsSelfAdjoint, NumTraits<Scalar>::IsComplex && EIGEN_LOGICAL_XOR(RhsSelfAdjoint,ConjugateRhs), EIGEN_LOGICAL_XOR(LhsSelfAdjoint,LhsStorageOrder==RowMajor) ? ColMajor : RowMajor, LhsSelfAdjoint, NumTraits<Scalar>::IsComplex && EIGEN_LOGICAL_XOR(LhsSelfAdjoint,ConjugateLhs), ColMajor,ResInnerStride> ::run(cols, rows, rhs, rhsStride, lhs, lhsStride, res, resIncr, resStride, alpha, blocking)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,Index,int LhsStorageOrder,bool ConjugateLhs,int RhsStorageOrder,bool ConjugateRhs,int ResInnerStride> struct product_selfadjoint_matrix<Scalar,Index,LhsStorageOrder,true,ConjugateLhs,RhsStorageOrder,false,ConjugateRhs,ColMajor,ResInnerStride> { EIGEN_DONT_INLINE void)",
    "insertText": "run(Index rows, Index cols, const Scalar* _lhs, Index lhsStride, const Scalar* _rhs, Index rhsStride, Scalar* res, Index resIncr, Index resStride, const Scalar& alpha, level3_blocking<Scalar,Scalar>& blocking)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} ; template<Scalar,Index,int LhsStorageOrder,bool ConjugateLhs,int RhsStorageOrder,bool ConjugateRhs,int ResInnerStride> EIGEN_DONT_INLINE void product_selfadjoint_matrix<Scalar,Index,LhsStorageOrder,true,ConjugateLhs,RhsStorageOrder,false,ConjugateRhs,ColMajor,ResInnerStride)",
    "insertText": "run(Index rows, Index cols, const Scalar* _lhs, Index lhsStride, const Scalar* _rhs, Index rhsStride, Scalar* _res, Index resIncr, Index resStride, const Scalar& alpha, level3_blocking<Scalar,Scalar>& blocking)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index size = rows ; typedef gebp_traits<Scalar,Scalar> Traits ; typedef const_blas_data_mapper<Scalar,Index,LhsStorageOrder> LhsMapper ; typedef const_blas_data_mapper<Scalar,)",
    "insertText": "Index(LhsStorageOrder == RowMajor)"
  },
  {
    "label": "lhs_transpose()",
    "kind": "Method",
    "detail": "Function (LhsTransposeMapper)",
    "insertText": "lhs_transpose(_lhs,lhsStride)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (ResMapper)",
    "insertText": "res(_res, resStride, resIncr)"
  },
  {
    "label": "kc()",
    "kind": "Method",
    "detail": "Function (Index kc = blocking .)",
    "insertText": "kc()"
  },
  {
    "label": "mc()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "mc(std::min)(rows,blocking.mc())"
  },
  {
    "label": "kc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "kc(std::min)(kc,mc)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (std::size_t sizeA = kc* mc ; std::size_t sizeB = kc* cols ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(Scalar, blockA, sizeA, blocking.blockA())"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(Scalar, blockB, sizeB, blocking.blockB())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (gebp_kernel<Scalar,Scalar,Index,ResMapper,Traits::mr,Traits::nr,ConjugateLhs,ConjugateRhs> gebp_kernel ; symm_pack_lhs<Scalar,Index,Traits::mr,Traits::LhsProgress,LhsStorageOrder> pack_lhs ; gemm_pack_rhs<Scalar,Index,RhsMapper,Traits::nr,RhsStorageOrder> pack_rhs ; gemm_pack_lhs<Scalar,Index,LhsTransposeMapper,Traits::mr,Traits::LhsProgress,Traits::LhsPacket4Packing,LhsStorageOrder = = RowMajor ? ColMajor : RowMajor,true> pack_lhs_transposed ;)",
    "insertText": "for(Index k2=0; k2<size; k2+=kc)"
  },
  {
    "label": "actual_kc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_kc(std::min)(k2+kc,size)"
  },
  {
    "label": "pack_rhs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_rhs(blockB, rhs.getSubMapper(k2,0), actual_kc, cols)"
  },
  {
    "label": "actual_mc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_mc(std::min)(i2+mc,k2)"
  },
  {
    "label": "pack_lhs_transposed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_lhs_transposed(blockA, lhs_transpose.getSubMapper(i2, k2), actual_kc, actual_mc)"
  },
  {
    "label": "gebp_kernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gebp_kernel(res.getSubMapper(i2, 0), blockA, blockB, actual_mc, actual_kc, cols, alpha)"
  },
  {
    "label": "actual_mc()",
    "kind": "Method",
    "detail": "Function (} { const Index)",
    "insertText": "actual_mc(std::min)(k2+kc,size)"
  },
  {
    "label": "pack_lhs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_lhs(blockA, &lhs(k2,k2), lhsStride, actual_kc, actual_mc)"
  },
  {
    "label": "gebp_kernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gebp_kernel(res.getSubMapper(k2, 0), blockA, blockB, actual_mc, actual_kc, cols, alpha)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i2=k2+kc; i2<size; i2+=mc)"
  },
  {
    "label": "actual_mc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_mc(std::min)(i2+mc,size)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (gemm_pack_lhs<Scalar,Index,LhsMapper,Traits::mr,Traits::LhsProgress,Traits::LhsPacket4Packing,LhsStorageOrder,)",
    "insertText": "false() (blockA, lhs.getSubMapper(i2, k2), actual_kc, actual_mc)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (ResMapper)",
    "insertText": "res(_res,resStride, resIncr)"
  },
  {
    "label": "pack_rhs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_rhs(blockB, _rhs, rhsStride, actual_kc, cols, k2)"
  },
  {
    "label": "actual_mc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_mc(std::min)(i2+mc,rows)"
  },
  {
    "label": "pack_lhs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_lhs(blockA, lhs.getSubMapper(i2, k2), actual_kc, actual_mc)"
  },
  {
    "label": "LhsIsUpper()",
    "kind": "Method",
    "detail": "Function (} } } } namespace internal { template<Lhs,int LhsMode,Rhs,int RhsMode> struct selfadjoint_product_impl<Lhs,LhsMode,false,Rhs,RhsMode,false> { typedef Product<Lhs,Rhs>::Scalar Scalar ; typedef internal::blas_traits<Lhs> LhsBlasTraits ; typedef LhsBlasTraits::DirectLinearAccessType ActualLhsType ; typedef internal::blas_traits<Rhs> RhsBlasTraits ; typedef RhsBlasTraits::DirectLinearAccessType ActualRhsType ; enum {)",
    "insertText": "LhsIsUpper(LhsMode&(Upper|Lower))==Upper, LhsIsSelfAdjoint = (LhsMode&SelfAdjoint)==SelfAdjoint, RhsIsUpper = (RhsMode&(Upper|Lower))==Upper, RhsIsSelfAdjoint = (RhsMode&SelfAdjoint)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<Dest> void)",
    "insertText": "run(Dest &dst, const Lhs &a_lhs, const Rhs &a_rhs, const Scalar& alpha)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dst.rows()==a_lhs.rows() && dst.cols()==a_rhs.cols())"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (internal::add_const_on_value_type<ActualLhsType>::type lhs =)",
    "insertText": "extract(a_lhs)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (internal::add_const_on_value_type<ActualRhsType>::type rhs =)",
    "insertText": "extract(a_rhs)"
  },
  {
    "label": "extractScalarFactor()",
    "kind": "Method",
    "detail": "Function (Scalar actualAlpha = alpha*)",
    "insertText": "extractScalarFactor(a_lhs) * RhsBlasTraits::extractScalarFactor(a_rhs)"
  },
  {
    "label": "gemm_blocking_space()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "gemm_blocking_space(Dest::Flags&RowMajorBit)"
  },
  {
    "label": "blocking()",
    "kind": "Method",
    "detail": "Function (BlockingType)",
    "insertText": "blocking(lhs.rows(), rhs.cols(), lhs.cols(), 1, false)"
  },
  {
    "label": "EIGEN_LOGICAL_XOR()",
    "kind": "Method",
    "detail": "Function (internal::product_selfadjoint_matrix<Scalar,Index,)",
    "insertText": "EIGEN_LOGICAL_XOR(LhsIsUpper,internal::traits<Lhs>::Flags &RowMajorBit) ? RowMajor : ColMajor, LhsIsSelfAdjoint, NumTraits<Scalar>::IsComplex && EIGEN_LOGICAL_XOR(LhsIsUpper,bool(LhsBlasTraits::NeedToConjugate)), EIGEN_LOGICAL_XOR(RhsIsUpper,internal::traits<Rhs>::Flags &RowMajorBit) ? RowMajor : ColMajor, RhsIsSelfAdjoint, NumTraits<Scalar>::IsComplex && EIGEN_LOGICAL_XOR(RhsIsUpper,bool(RhsBlasTraits::NeedToConjugate)), internal::traits<Dest>::Flags&RowMajorBit ? RowMajor : ColMajor, Dest::InnerStrideAtCompileTime> ::run( lhs.rows(), rhs.cols(), &lhs.coeffRef(0,0), lhs.outerStride(), &rhs.coeffRef(0,0), rhs.outerStride(), &dst.coeffRef(0,0), dst.innerStride(), dst.outerStride(), actualAlpha, blocking)"
  }
]