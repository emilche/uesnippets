[
  {
    "label": "User",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "User"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "BranchInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BranchInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "DbgDeclareInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DbgDeclareInst"
  },
  {
    "label": "StoreInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StoreInst"
  },
  {
    "label": "LoadInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoadInst"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "PHINode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PHINode"
  },
  {
    "label": "AllocaInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocaInst"
  },
  {
    "label": "AssumptionCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssumptionCache"
  },
  {
    "label": "ConstantExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantExpr"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "TargetLibraryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfo"
  },
  {
    "label": "TargetTransformInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetTransformInfo"
  },
  {
    "label": "DIBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIBuilder"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "SmallVectorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallVectorImpl"
  },
  {
    "label": "index",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "index"
  },
  {
    "label": "ConstantFoldTerminator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConstantFoldTerminator(BasicBlock *BB, bool DeleteDeadConditions = false,\n                            const TargetLibraryInfo *TLI = nullptr)"
  },
  {
    "label": "isInstructionTriviallyDead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isInstructionTriviallyDead(Instruction *I,\n                                const TargetLibraryInfo *TLI = nullptr)"
  },
  {
    "label": "RecursivelyDeleteTriviallyDeadInstructions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecursivelyDeleteTriviallyDeadInstructions(Value *V,\n                                        const TargetLibraryInfo *TLI = nullptr)"
  },
  {
    "label": "RecursivelyDeleteDeadPHINode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecursivelyDeleteDeadPHINode(PHINode *PN,\n                                  const TargetLibraryInfo *TLI = nullptr)"
  },
  {
    "label": "SimplifyInstructionsInBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SimplifyInstructionsInBlock(BasicBlock *BB,\n                                 const TargetLibraryInfo *TLI = nullptr)"
  },
  {
    "label": "RemovePredecessorAndSimplify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePredecessorAndSimplify(BasicBlock *BB, BasicBlock *Pred)"
  },
  {
    "label": "MergeBasicBlockIntoOnlyPred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeBasicBlockIntoOnlyPred(BasicBlock *BB, DominatorTree *DT = nullptr)"
  },
  {
    "label": "TryToSimplifyUncondBranchFromEmptyBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToSimplifyUncondBranchFromEmptyBlock(BasicBlock *BB)"
  },
  {
    "label": "EliminateDuplicatePHINodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EliminateDuplicatePHINodes(BasicBlock *BB)"
  },
  {
    "label": "SimplifyCFG()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SimplifyCFG(BasicBlock *BB, const TargetTransformInfo &TTI,\n                 unsigned BonusInstThreshold, AssumptionCache *AC = nullptr)"
  },
  {
    "label": "FlattenCFG()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FlattenCFG(BasicBlock *BB, AliasAnalysis *AA = nullptr)"
  },
  {
    "label": "FoldBranchToCommonDest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FoldBranchToCommonDest(BranchInst *BI, unsigned BonusInstThreshold = 1)"
  },
  {
    "label": "getOrEnforceKnownAlignment()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getOrEnforceKnownAlignment(Value *V, unsigned PrefAlign,\n                                    const DataLayout &DL,\n                                    const Instruction *CxtI = nullptr,\n                                    AssumptionCache *AC = nullptr,\n                                    const DominatorTree *DT = nullptr)"
  },
  {
    "label": "getOrEnforceKnownAlignment()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOrEnforceKnownAlignment(V, 0, DL, CxtI, AC, DT)"
  },
  {
    "label": "ConvertDebugDeclareToDebugValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertDebugDeclareToDebugValue(DbgDeclareInst *DDI,\n                                     StoreInst *SI, DIBuilder &Builder)"
  },
  {
    "label": "ConvertDebugDeclareToDebugValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertDebugDeclareToDebugValue(DbgDeclareInst *DDI,\n                                     LoadInst *LI, DIBuilder &Builder)"
  },
  {
    "label": "LowerDbgDeclare()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LowerDbgDeclare(Function &F)"
  },
  {
    "label": "FindAllocaDbgDeclare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAllocaDbgDeclare(Value *V, SmallVectorImpl<DbgDeclareInst *> &Declares)"
  },
  {
    "label": "replaceDbgDeclareForAlloca()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "replaceDbgDeclareForAlloca(AllocaInst *AI, Value *NewAllocaAddress,\n                                DIBuilder &Builder, bool Deref)"
  },
  {
    "label": "removeUnreachableBlocks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "removeUnreachableBlocks(Function &F)"
  },
  {
    "label": "combineMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combineMetadata(Instruction *K, const Instruction *J, ArrayRef<unsigned> KnownIDs)"
  },
  {
    "label": "replaceDominatedUsesWith()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "replaceDominatedUsesWith(Value *From, Value *To, DominatorTree &DT,\n                                  const BasicBlockEdge &Edge)"
  }
]