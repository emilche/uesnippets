[
  {
    "label": "ST_DLL_LINK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ST_DLL_LINK"
  },
  {
    "label": "SNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SNode"
  },
  {
    "label": "EReportFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EReportFormat"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if)",
    "insertText": "defined(NDEBUG) && defined(_WIN32) #endif #ifndef SPEEDTREE_INTEL_GPA #endif #ifdef SPEEDTREE_INTEL_GPA #include <ittnotify.h> #include \"Core/Types.h\" #else #include \"Core/Timer.h\" #include \"Core/Array.h\" #include \"Core/String.h\" #endif #include <cassert> #ifdef ST_SETS_PACKING_INTERNALLY #pragma pack(push, 4)"
  },
  {
    "label": "ScopeTrace()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "ScopeTrace(FunctionName) CScopeTrace __task__(FunctionName)"
  },
  {
    "label": "SNode()",
    "kind": "Method",
    "detail": "Function (public : struct SNode {)",
    "insertText": "SNode()"
  },
  {
    "label": "CScopeTrace()",
    "kind": "Method",
    "detail": "Function (const char* m_pName ; st_float32 m_fTime ; CArray<SNode*> m_aChildren ; } ;)",
    "insertText": "CScopeTrace(const char* pName)"
  },
  {
    "label": "CScopeTrace()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CScopeTrace()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void ST_CALL_CONV)",
    "insertText": "Init(void)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void ST_CALL_CONV)",
    "insertText": "Start(void)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (st_bool ST_CALL_CONV)",
    "insertText": "IsActive(void)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void ST_CALL_CONV)",
    "insertText": "Stop(void)"
  },
  {
    "label": "Report()",
    "kind": "Method",
    "detail": "Function (enum EReportFormat { FORMAT_PRINT,FORMAT_CSV_FILE } ; void ST_CALL_CONV)",
    "insertText": "Report(EReportFormat eFormat, CString& strReport, SNode* pStart = NULL)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (private : # ifdef SPEEDTREE_INTEL_GPA __itt_domain* m_pDomain ; # elif)",
    "insertText": "defined(SPEEDTREE_FALLBACK_TIMING)"
  }
]