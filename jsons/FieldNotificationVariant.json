[
  {
    "label": "FFieldVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldVariant"
  },
  {
    "label": "FFieldVariant()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Class . h \" # include \" UObject / Field . h \" # include \" UObject / UnrealType . h \" namespace UE::FieldNotification { struct FFieldVariant : private::FFieldVariant { public :)",
    "insertText": "FFieldVariant()"
  },
  {
    "label": "FFieldVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFieldVariant(const FProperty* InProperty) : ::FFieldVariant(InProperty)"
  },
  {
    "label": "FFieldVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFieldVariant(const UFunction* InFunction) : ::FFieldVariant(InFunction)"
  },
  {
    "label": "IsProperty()",
    "kind": "Method",
    "detail": "Function (} public : using::FFieldVariant::IsValid ; using::FFieldVariant::GetOwnerClass ; using::FFieldVariant::GetFName ; using::FFieldVariant::operator bool ; using::FFieldVariant::operator = = ; using::FFieldVariant::operator ! = ; # if WITH_METADATA using::FFieldVariant::HasMetaData ; # endif bool)",
    "insertText": "IsProperty()"
  },
  {
    "label": "IsFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFunction()"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} FProperty*)",
    "insertText": "GetProperty()"
  },
  {
    "label": "GetFunction()",
    "kind": "Method",
    "detail": "Function (} UFunction*)",
    "insertText": "GetFunction()"
  }
]