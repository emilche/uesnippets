[
  {
    "label": "FBodyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstance"
  },
  {
    "label": "FCollisionQueryFilterCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionQueryFilterCallback"
  },
  {
    "label": "FPreFilterRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreFilterRecord"
  },
  {
    "label": "FCollisionQueryFilterCallback()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CollisionQueryFilterCallbackCore . h \" # include \" CollisionQueryParams . h \" # include \" Physics / PhysicsInterfaceTypes . h \" # define ENABLE_PREFILTER_LOGGING 0 struct FBodyInstance ; typedef FCollisionQueryParams::IgnoreComponentsArrayType FilterIgnoreComponentsArrayType ; typedef FCollisionQueryParams::IgnoreActorsArrayType FilterIgnoreActorsArrayType ; class FCollisionQueryFilterCallback : public ICollisionQueryFilterCallbackBase { public : ECollisionQueryHitType PreFilterReturnValue ; const FilterIgnoreComponentsArrayType& IgnoreComponents ; const FilterIgnoreActorsArrayType& IgnoreActors ; bool bIsOverlapQuery ; bool bIgnoreTouches ; bool bIgnoreBlocks ;)",
    "insertText": "FCollisionQueryFilterCallback(const FCollisionQueryParams& InQueryParams, bool bInIsSweep) : IgnoreComponents(InQueryParams.GetIgnoredComponents()) , IgnoreActors(InQueryParams.GetIgnoredSourceObjects()) #if DETECT_SQ_HITCHES , bRecordHitches(false) #endif , bIsSweep(bInIsSweep)"
  },
  {
    "label": "FCollisionQueryFilterCallback()",
    "kind": "Method",
    "detail": "Function (PreFilterReturnValue = ECollisionQueryHitType::None ; bIsOverlapQuery = false ; bIgnoreTouches = InQueryParams . bIgnoreTouches ; bIgnoreBlocks = InQueryParams . bIgnoreBlocks ; bDiscardInitialOverlaps = ! InQueryParams . bFindInitialOverlaps ; } ~)",
    "insertText": "FCollisionQueryFilterCallback()"
  },
  {
    "label": "CalcQueryHitType()",
    "kind": "Method",
    "detail": "Function (} ECollisionQueryHitType)",
    "insertText": "CalcQueryHitType(const FCollisionFilterData& QueryFilter, const FCollisionFilterData& ShapeFilter, bool bPreFilter = false)"
  },
  {
    "label": "PreFilterImp()",
    "kind": "Method",
    "detail": "Function (ECollisionQueryHitType)",
    "insertText": "PreFilterImp(const FCollisionFilterData& FilterData, const FCollisionFilterData& ShapeFilterData, uint32 ComponentID, const FBodyInstance* BodyInstance)"
  },
  {
    "label": "PostFilterImp()",
    "kind": "Method",
    "detail": "Function (ECollisionQueryHitType)",
    "insertText": "PostFilterImp(const FCollisionFilterData& FilterData, bool bIsOverlap)"
  },
  {
    "label": "PreFilterImp()",
    "kind": "Method",
    "detail": "Function (ECollisionQueryHitType)",
    "insertText": "PreFilterImp(const FCollisionFilterData& FilterData, const Chaos::FPerShapeData& Shape, const Chaos::FGeometryParticle& Actor)"
  },
  {
    "label": "PreFilterImp()",
    "kind": "Method",
    "detail": "Function (ECollisionQueryHitType)",
    "insertText": "PreFilterImp(const FCollisionFilterData& FilterData, const Chaos::FPerShapeData& Shape, const Chaos::FGeometryParticleHandle& Actor)"
  },
  {
    "label": "PostFilterImp()",
    "kind": "Method",
    "detail": "Function (ECollisionQueryHitType)",
    "insertText": "PostFilterImp(const FCollisionFilterData& FilterData, const ChaosInterface::FQueryHit& Hit)"
  },
  {
    "label": "PostFilterImp()",
    "kind": "Method",
    "detail": "Function (ECollisionQueryHitType)",
    "insertText": "PostFilterImp(const FCollisionFilterData& FilterData, const ChaosInterface::FPTQueryHit& Hit)"
  },
  {
    "label": "PostFilter()",
    "kind": "Method",
    "detail": "Function (ECollisionQueryHitType)",
    "insertText": "PostFilter(const FCollisionFilterData& FilterData, const ChaosInterface::FQueryHit& Hit)"
  },
  {
    "label": "PostFilter()",
    "kind": "Method",
    "detail": "Function (} ECollisionQueryHitType)",
    "insertText": "PostFilter(const FCollisionFilterData& FilterData, const ChaosInterface::FPTQueryHit& Hit)"
  },
  {
    "label": "PreFilter()",
    "kind": "Method",
    "detail": "Function (} ECollisionQueryHitType)",
    "insertText": "PreFilter(const FCollisionFilterData& FilterData, const Chaos::FPerShapeData& Shape, const Chaos::FGeometryParticle& Actor)"
  },
  {
    "label": "PreFilter()",
    "kind": "Method",
    "detail": "Function (} ECollisionQueryHitType)",
    "insertText": "PreFilter(const FCollisionFilterData& FilterData, const Chaos::FPerShapeData& Shape, const Chaos::FGeometryParticleHandle& Actor)"
  },
  {
    "label": "PreFilterBaseImp()",
    "kind": "Method",
    "detail": "Function (} # if DETECT_SQ_HITCHES struct FPreFilterRecord { FString OwnerComponentReadableName ; ECollisionQueryHitType Result ; } ; TArray<FPreFilterRecord> PreFilterHitchInfo ; bool bRecordHitches ; # endif bool bDiscardInitialOverlaps ; bool bIsSweep ; private : template<TParticle> ECollisionQueryHitType)",
    "insertText": "PreFilterBaseImp(const FCollisionFilterData& FilterData, const Chaos::FPerShapeData& Shape, const TParticle& Actor)"
  }
]