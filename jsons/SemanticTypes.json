[
  {
    "label": "SQualifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SQualifier"
  },
  {
    "label": "CSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSymbol"
  },
  {
    "label": "CClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CClass"
  },
  {
    "label": "CInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CInterface"
  },
  {
    "label": "CDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDefinition"
  },
  {
    "label": "CFunctionType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CFunctionType"
  },
  {
    "label": "CAstPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAstPackage"
  },
  {
    "label": "CExpressionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CExpressionBase"
  },
  {
    "label": "CFlowType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CFlowType"
  },
  {
    "label": "CFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CFunction"
  },
  {
    "label": "CNamedType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CNamedType"
  },
  {
    "label": "CNormalType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CNormalType"
  },
  {
    "label": "CNominalType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CNominalType"
  },
  {
    "label": "CSemanticProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSemanticProgram"
  },
  {
    "label": "CTypeVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTypeVariable"
  },
  {
    "label": "CTupleType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTupleType"
  },
  {
    "label": "CUnknownType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CUnknownType"
  },
  {
    "label": "CAliasType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAliasType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "into",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "into"
  },
  {
    "label": "CSemanticProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSemanticProgram"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "CGlobalType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CGlobalType"
  },
  {
    "label": "CSemanticProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSemanticProgram"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "Key",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Key"
  },
  {
    "label": "objects",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "objects"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "Key",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Key"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "SKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SKey"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "Key",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Key"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "Constraint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Constraint"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "is",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "is"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AsCodeRecursive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AsCodeRecursive(OuterPrecedence, VisitedFlowTypes, false)"
  },
  {
    "label": "AsParamsCode()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AsParamsCode(OuterPrecedence, VisitedFlowTypes, true)"
  },
  {
    "label": "AsCodeRecursive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AsCodeRecursive(ETypeSyntaxPrecedence::Min, VisitedFlowTypes, true)"
  },
  {
    "label": "PositiveValueType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "PositiveValueType()"
  },
  {
    "label": "GetFirstNamedIndex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetFirstNamedIndex()"
  },
  {
    "label": "SingletonRangeView()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SingletonRangeView(Type)"
  },
  {
    "label": "AsParamTypes()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AsParamTypes(_ParamsType)"
  },
  {
    "label": "ULANG_UNREACHABLE()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "ULANG_UNREACHABLE()"
  },
  {
    "label": "Instantiate()",
    "kind": "Method",
    "detail": "Function (TArray<STypeVariableSubstitution>)",
    "insertText": "Instantiate(const TArray<const CTypeVariable*>& TypeVariables)"
  },
  {
    "label": "Constrain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Constrain(const CTypeBase* PositiveType1, const CTypeBase* NegativeType2)"
  },
  {
    "label": "IsSubtype()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubtype(const CTypeBase* PositiveType1, const CTypeBase* PositiveType2)"
  },
  {
    "label": "IsEquivalent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEquivalent(const CTypeBase* PositiveType1, const CTypeBase* PositiveType2)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matches(const CTypeBase* PositiveType1, const CTypeBase* NegativeType2)"
  },
  {
    "label": "AreDomainsDistinct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreDomainsDistinct(const CTypeBase* DomainType1, const CTypeBase* DomainType2)"
  },
  {
    "label": "IsUnknownType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnknownType(const CTypeBase* Type)"
  },
  {
    "label": "IsAttributeType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttributeType(const CTypeBase* Type)"
  },
  {
    "label": "IsEditableType()",
    "kind": "Method",
    "detail": "Function (EIsEditable)",
    "insertText": "IsEditableType(const uLang::CTypeBase* Type, bool bAllowNonConcreteClasses)"
  }
]