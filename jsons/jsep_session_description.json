[
  {
    "label": "SessionDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SessionDescription"
  },
  {
    "label": "JsepSessionDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JsepSessionDescription"
  },
  {
    "label": "JsepSessionDescription()",
    "kind": "Method",
    "detail": "Function (# ifndef API_JSEP_SESSION_DESCRIPTION_H_ # define API_JSEP_SESSION_DESCRIPTION_H_ # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / candidate . h \" # include \" api / jsep . h \" # include \" api / jsep_ice_candidate . h \" namespace cricket { class SessionDescription ; } namespace webrtc { class JsepSessionDescription : public SessionDescriptionInterface { public :)",
    "insertText": "JsepSessionDescription(SdpType type)"
  },
  {
    "label": "JsepSessionDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JsepSessionDescription(const std::string& type)"
  },
  {
    "label": "JsepSessionDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JsepSessionDescription(SdpType type, std::unique_ptr<cricket::SessionDescription> description, absl::string_view session_id, absl::string_view session_version)"
  },
  {
    "label": "JsepSessionDescription()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "JsepSessionDescription()"
  },
  {
    "label": "JsepSessionDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JsepSessionDescription(const JsepSessionDescription&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JsepSessionDescription&)",
    "insertText": "operator(const JsepSessionDescription&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(std::unique_ptr<cricket::SessionDescription> description, const std::string& session_id, const std::string& session_version)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "Clone()"
  },
  {
    "label": "description()",
    "kind": "Method",
    "detail": "Function (cricket::SessionDescription*)",
    "insertText": "description()"
  },
  {
    "label": "session_id()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "session_id()"
  },
  {
    "label": "AddCandidate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddCandidate(const IceCandidateInterface* candidate)"
  },
  {
    "label": "RemoveCandidates()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "RemoveCandidates(const std::vector<cricket::Candidate>& candidates)"
  },
  {
    "label": "number_of_mediasections()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "number_of_mediasections()"
  },
  {
    "label": "candidates()",
    "kind": "Method",
    "detail": "Function (const IceCandidateCollection*)",
    "insertText": "candidates(size_t mediasection_index)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToString(std::string* out)"
  },
  {
    "label": "GetMediasectionIndex()",
    "kind": "Method",
    "detail": "Function (const int kDefaultVideoCodecId ; const char kDefaultVideoCodecName [ ] ; private : std::unique_ptr<cricket::SessionDescription> description_ ; std::string session_id_ ; std::string session_version_ ; SdpType type_ ; std::vector<JsepCandidateCollection> candidate_collection_ ; bool)",
    "insertText": "GetMediasectionIndex(const IceCandidateInterface* candidate, size_t* index)"
  },
  {
    "label": "GetMediasectionIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMediasectionIndex(const cricket::Candidate& candidate)"
  }
]