[
  {
    "label": "FSquare2DGridHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSquare2DGridHelper"
  },
  {
    "label": "FGrid2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGrid2D"
  },
  {
    "label": "FGridLevel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGridLevel"
  },
  {
    "label": "FGridCellDataChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGridCellDataChunk"
  },
  {
    "label": "FGridCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGridCell"
  },
  {
    "label": "FGrid2D()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Find . h \" # include \" Algo / Transform . h \" # include \" ProfilingDebugging / ScopedTimers . h \" # include \" WorldPartition / WorldPartitionRuntimeSpatialHash . h \" # include \" WorldPartition / WorldPartitionStreamingGenerationContext . h \" # include \" WorldPartition / DataLayer / DataLayersID . h \" # include \" WorldPartition / DataLayer / DataLayerInstance . h \" # if WITH_EDITOR bool GRuntimeSpatialHashUseAlignedGridLevels ; bool GRuntimeSpatialHashSnapNonAlignedGridLevelsToLowerLevels ; bool GRuntimeSpatialHashPlaceSmallActorsUsingLocation ; bool GRuntimeSpatialHashPlacePartitionActorsUsingLocation ; # endif struct FSquare2DGridHelper { struct FGrid2D { FVector2D Origin ; int64 CellSize ; int64 GridSize ;)",
    "insertText": "FGrid2D(const FVector2D& InOrigin, int64 InCellSize, int64 InGridSize) : Origin(InOrigin) , CellSize(InCellSize) , GridSize(InGridSize)"
  },
  {
    "label": "IsValidCoords()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidCoords(const FGridCellCoord2& InCoords)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Index(InCoords.Y * GridSize)"
  },
  {
    "label": "Coords()",
    "kind": "Method",
    "detail": "Function (const FGridCellCoord2)",
    "insertText": "Coords(InIndex % GridSize, InIndex / GridSize)"
  },
  {
    "label": "GetCellBounds()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "GetCellBounds(const FGridCellCoord2& InCoords, FBox2D& OutBounds, bool bCheckIsValidCoord = true)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const FVector2D)",
    "insertText": "Min(FVector2D(Origin) - FVector2D(GridSize * CellSize * 0.5)) + FVector2D(InCoords.X * CellSize, InCoords.Y * CellSize)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (const FVector2D Max = Min +)",
    "insertText": "FVector2D(CellSize, CellSize)"
  },
  {
    "label": "FBox2D()",
    "kind": "Method",
    "detail": "Function (OutBounds =)",
    "insertText": "FBox2D(Min, Max)"
  },
  {
    "label": "FGridCellCoord2()",
    "kind": "Method",
    "detail": "Function (OutCoords =)",
    "insertText": "FGridCellCoord2(FMath::FloorToInt(((InPos.X - Origin.X) / CellSize) + GridSize * 0.5), FMath::FloorToInt(((InPos.Y - Origin.Y) / CellSize) + GridSize * 0.5))"
  },
  {
    "label": "GetCellCoords()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCellCoords(const FBox2D& InBounds2D, FGridCellCoord2& OutMinCellCoords, FGridCellCoord2& OutMaxCellCoords)"
  },
  {
    "label": "GetCellCoords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCellCoords(InBounds2D.Min, OutMinCellCoords)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (OutMinCellCoords . Y =)",
    "insertText": "Clamp(OutMinCellCoords.Y, 0LL, GridSize - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (OutMaxCellCoords . X =)",
    "insertText": "Clamp(OutMaxCellCoords.X, 0LL, GridSize - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (OutMaxCellCoords . Y =)",
    "insertText": "Clamp(OutMaxCellCoords.Y, 0LL, GridSize - 1)"
  },
  {
    "label": "OutIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutIndex(InCoords.Y * GridSize)"
  },
  {
    "label": "GetNumIntersectingCells()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumIntersectingCells(const FBox& InBox)"
  },
  {
    "label": "Bounds2D()",
    "kind": "Method",
    "detail": "Function (FGridCellCoord2 MinCellCoords ; FGridCellCoord2 MaxCellCoords ; const FBox2D)",
    "insertText": "Bounds2D(FVector2D(InBox.Min), FVector2D(InBox.Max))"
  },
  {
    "label": "ForEachIntersectingCellsBreakable()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } int32)",
    "insertText": "ForEachIntersectingCellsBreakable(const FBox& InBox, TFunctionRef<bool(const FGridCellCoord2&)> InOperation)"
  },
  {
    "label": "Coord()",
    "kind": "Method",
    "detail": "Function (const FGridCellCoord2)",
    "insertText": "Coord(x, y)"
  },
  {
    "label": "ForEachIntersectingCells()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ForEachIntersectingCells(const FSphere& InSphere, TFunctionRef<void(const FGridCellCoord2&)> InOperation)"
  },
  {
    "label": "Box()",
    "kind": "Method",
    "detail": "Function (int32 NumCells = 0 ; const FBox)",
    "insertText": "Box(InSphere.Center - FVector(InSphere.W), InSphere.Center + FVector(InSphere.W))"
  },
  {
    "label": "SphereCenter()",
    "kind": "Method",
    "detail": "Function (const double SquareDistance = InSphere . W* InSphere . W ; const FVector2D)",
    "insertText": "SphereCenter(InSphere.Center)"
  },
  {
    "label": "DoesCircleSectorIntersectsCell()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "DoesCircleSectorIntersectsCell(const FGridCellCoord2& Coords, const FSphericalSector& InShape)"
  },
  {
    "label": "FGridCellDataChunk()",
    "kind": "Method",
    "detail": "Function (} ; struct FGridLevel : public FGrid2D { # if WITH_EDITOR struct FGridCellDataChunk {)",
    "insertText": "FGridCellDataChunk(const TArray<const UDataLayerInstance*>& InDataLayers, const FGuid& InContentBundleID)"
  },
  {
    "label": "TransformIf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformIf(InDataLayers, DataLayers, [](const UDataLayerInstance* DataLayer) { return DataLayer->IsRuntime(); }, [](const UDataLayerInstance* DataLayer) { return DataLayer; })"
  },
  {
    "label": "FDataLayersID()",
    "kind": "Method",
    "detail": "Function (DataLayersID =)",
    "insertText": "FDataLayersID(DataLayers)"
  },
  {
    "label": "AddActorSetInstance()",
    "kind": "Method",
    "detail": "Function (ContentBundleID = InContentBundleID ; } void)",
    "insertText": "AddActorSetInstance(const IStreamingGenerationContext::FActorSetInstance* ActorSetInstance)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ActorSetInstances .)",
    "insertText": "Add(ActorSetInstance)"
  },
  {
    "label": "GetActorSetInstances()",
    "kind": "Method",
    "detail": "Function (} const TArray<const IStreamingGenerationContext::FActorSetInstance*>&)",
    "insertText": "GetActorSetInstances()"
  },
  {
    "label": "GetDataLayers()",
    "kind": "Method",
    "detail": "Function (} const TArray<const UDataLayerInstance*>&)",
    "insertText": "GetDataLayers()"
  },
  {
    "label": "FGridCell()",
    "kind": "Method",
    "detail": "Function (} private : TArray<const IStreamingGenerationContext::FActorSetInstance*> ActorSetInstances ; TArray<const UDataLayerInstance*> DataLayers ; FDataLayersID DataLayersID ; FGuid ContentBundleID ; } ; # endif struct FGridCell {)",
    "insertText": "FGridCell(const FGridCellCoord& InCoords) : Coords(InCoords)"
  },
  {
    "label": "FDataLayersID()",
    "kind": "Method",
    "detail": "Function (const FDataLayersID DataLayersID =)",
    "insertText": "FDataLayersID(ActorSetInstance->DataLayers)"
  },
  {
    "label": "FindOrAddByHash()",
    "kind": "Method",
    "detail": "Function (FGridCellDataChunk& ActorDataChunk = DataChunks .)",
    "insertText": "FindOrAddByHash(DataLayersID.GetHash(), FGridCellDataChunk(ActorSetInstance->DataLayers, ActorSetInstance->ContentBundleID))"
  },
  {
    "label": "AddActorSetInstance()",
    "kind": "Method",
    "detail": "Function (ActorDataChunk .)",
    "insertText": "AddActorSetInstance(ActorSetInstance)"
  },
  {
    "label": "GetDataChunks()",
    "kind": "Method",
    "detail": "Function (} const TSet<FGridCellDataChunk>&)",
    "insertText": "GetDataChunks()"
  },
  {
    "label": "GetCell()",
    "kind": "Method",
    "detail": "Function (} FGridCell&)",
    "insertText": "GetCell(const FGridCellCoord2& InCoords)"
  },
  {
    "label": "verify()",
    "kind": "Method",
    "detail": "Function (uint64 CellIndex ;)",
    "insertText": "verify(GetCellIndex(InCoords, CellIndex))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int64 CellIndexMapping ; int64* CellIndexMappingPtr = CellsMapping .)",
    "insertText": "Find(CellIndex)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (CellIndexMapping =* CellIndexMappingPtr ; } else { CellIndexMapping = Cells .)",
    "insertText": "Emplace(FGridCellCoord(InCoords.X, InCoords.Y, Level))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CellsMapping .)",
    "insertText": "Add(CellIndex, CellIndexMapping)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (int64 CellIndexMapping = CellsMapping .)",
    "insertText": "FindChecked(CellIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const FGridCell& Cell = Cells [ CellIndexMapping ] ;)",
    "insertText": "check(Cell.GetCoords() == FGridCellCoord(InCoords.X, InCoords.Y, Level))"
  },
  {
    "label": "FSquare2DGridHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSquare2DGridHelper(const FBox& InWorldBounds, const FVector& InOrigin, int64 InCellSize, bool bUseAlignedGridLevels)"
  },
  {
    "label": "GetLowestLevel()",
    "kind": "Method",
    "detail": "Function (FGridLevel&)",
    "insertText": "GetLowestLevel()"
  },
  {
    "label": "GetAlwaysLoadedCell()",
    "kind": "Method",
    "detail": "Function (} const FGridLevel::FGridCell&)",
    "insertText": "GetAlwaysLoadedCell()"
  },
  {
    "label": "GetCell()",
    "kind": "Method",
    "detail": "Function (} const FGridLevel::FGridCell&)",
    "insertText": "GetCell(const FGridCellCoord& InCoords)"
  },
  {
    "label": "GetCellBounds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCellBounds(const FGridCellCoord& InCoords, FBox2D& OutBounds)"
  },
  {
    "label": "GetCellGlobalCoords()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "GetCellGlobalCoords(const FGridCellCoord& InCoords, FGridCellCoord& OutGlobalCoords)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FGridLevel& GridLevel = Levels [ InCoords . Z ] ;)",
    "insertText": "if(GridLevel.IsValidCoords(FGridCellCoord2(InCoords.X, InCoords.Y)))"
  },
  {
    "label": "ForEachCells()",
    "kind": "Method",
    "detail": "Function (int64 CoordOffset = Levels [ InCoords . Z ] . GridSize>> 1 ; OutGlobalCoords = InCoords ; OutGlobalCoords . X - = CoordOffset ; OutGlobalCoords . Y - = CoordOffset ; return true ; } } return false ; } void)",
    "insertText": "ForEachCells(TFunctionRef<void(const FSquare2DGridHelper::FGridLevel::FGridCell&)> InOperation)"
  },
  {
    "label": "ForEachIntersectingCells()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ForEachIntersectingCells(const FBox& InBox, TFunctionRef<void(const FGridCellCoord&)> InOperation, int32 InStartLevel = 0)"
  },
  {
    "label": "ForEachIntersectingCells()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ForEachIntersectingCells(const FSphere& InSphere, TFunctionRef<void(const FGridCellCoord&)> InOperation, int32 InStartLevel = 0)"
  },
  {
    "label": "ForEachIntersectingCells()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ForEachIntersectingCells(const FSphericalSector& InShape, TFunctionRef<void(const FGridCellCoord&)> InOperation, int32 InStartLevel = 0)"
  },
  {
    "label": "GetGridHelper()",
    "kind": "Method",
    "detail": "Function (public : FBox WorldBounds ; FVector Origin ; int64 CellSize ; TArray<FGridLevel> Levels ; } ; # if WITH_EDITOR FSquare2DGridHelper)",
    "insertText": "GetGridHelper(const FBox& WorldBounds, const FVector& GridOrigin, int64 GridCellSize, bool bUseAlignedGridLevels)"
  },
  {
    "label": "GetPartitionedActors()",
    "kind": "Method",
    "detail": "Function (FSquare2DGridHelper)",
    "insertText": "GetPartitionedActors(const FBox& WorldBounds, const FSpatialHashRuntimeGrid& Grid, const TArray<const IStreamingGenerationContext::FActorSetInstance*>& ActorSetInstances, const FSpatialHashSettings& Settings)"
  }
]