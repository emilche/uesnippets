[
  {
    "label": "Timer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Timer"
  },
  {
    "label": "ExtendedTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtendedTimer"
  },
  {
    "label": "TimerScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimerScope"
  },
  {
    "label": "ExtendedTimerScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtendedTimerScope"
  },
  {
    "label": "TimeToText",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimeToText"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaSynchronization . h \" namespace uba { u64)",
    "insertText": "GetTime()"
  },
  {
    "label": "GetFrequency()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetFrequency()"
  },
  {
    "label": "GetSystemTimeUs()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetSystemTimeUs()"
  },
  {
    "label": "TimeToTick()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "TimeToTick(u64 time, u64 frequency)"
  },
  {
    "label": "TimeToTick()",
    "kind": "Method",
    "detail": "Function (} u64)",
    "insertText": "TimeToTick(u64 time)"
  },
  {
    "label": "TimeToUs()",
    "kind": "Method",
    "detail": "Function (} u64)",
    "insertText": "TimeToUs(u64 time)"
  },
  {
    "label": "TimeToMs()",
    "kind": "Method",
    "detail": "Function (} u64)",
    "insertText": "TimeToMs(u64 time)"
  },
  {
    "label": "TimeToS()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "TimeToS(u64 time)"
  },
  {
    "label": "TickToTime()",
    "kind": "Method",
    "detail": "Function (} u64)",
    "insertText": "TickToTime(u64 us)"
  },
  {
    "label": "UsToTime()",
    "kind": "Method",
    "detail": "Function (} u64)",
    "insertText": "UsToTime(u64 us)"
  },
  {
    "label": "MsToTime()",
    "kind": "Method",
    "detail": "Function (} u64)",
    "insertText": "MsToTime(u64 ms)"
  },
  {
    "label": "Timer()",
    "kind": "Method",
    "detail": "Function (} struct Timer {)",
    "insertText": "Timer(Timer &o)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (time .)",
    "insertText": "store(o.time.load())"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (count .)",
    "insertText": "store(o.count.load())"
  },
  {
    "label": "Timer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Timer()"
  },
  {
    "label": "Timer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Timer(u64 t, u32 c) : time(t), count(c)"
  },
  {
    "label": "Timer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Timer(Timer&& o) noexcept : time(o.time.load()), count(o.count.load())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const Timer& o)"
  },
  {
    "label": "TimerScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TimerScope()"
  },
  {
    "label": "Leave()",
    "kind": "Method",
    "detail": "Function (timer . time + = t - start ; + + timer . count ; } void)",
    "insertText": "Leave()"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (start = ~)",
    "insertText": "u64(0)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (+ + timer . count ; } void)",
    "insertText": "Cancel()"
  },
  {
    "label": "TimerScope()",
    "kind": "Method",
    "detail": "Function (} Timer& timer ; u64 start ;)",
    "insertText": "TimerScope(const TimerScope&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const TimerScope&)"
  },
  {
    "label": "ExtendedTimerScope()",
    "kind": "Method",
    "detail": "Function (} ; struct ExtendedTimerScope {)",
    "insertText": "ExtendedTimerScope(ExtendedTimer& t) : timer(t), start(GetTime())"
  },
  {
    "label": "ExtendedTimerScope()",
    "kind": "Method",
    "detail": "Function (+ + timer . count ; } ~)",
    "insertText": "ExtendedTimerScope()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (timer . time + = t ; u64 prev = timer . longest .)",
    "insertText": "load()"
  },
  {
    "label": "TimeToText()",
    "kind": "Method",
    "detail": "Function (} } ExtendedTimer& timer ; u64 start ; } ; struct TimeToText {)",
    "insertText": "TimeToText(u64 time, bool allowMinutes = false)"
  },
  {
    "label": "TimeToText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeToText(u64 time, bool allowMinutes, u64 frequency)"
  },
  {
    "label": "tchar()",
    "kind": "Method",
    "detail": "Function (operator const)",
    "insertText": "tchar()"
  }
]