[
  {
    "label": "FBuildOutputBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildOutputBuilder"
  },
  {
    "label": "IBuildJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildJob"
  },
  {
    "label": "IRequestOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRequestOwner"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBuildJobContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildJobContext"
  },
  {
    "label": "FBuildJobContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / ManualResetEvent . h \" # include \" Compression / CompressedBuffer . h \" # include \" Containers / Map . h \" # include \" Containers / SharedString . h \" # include \" Containers / StringView . h \" # include \" DerivedDataBuildFunction . h \" # include \" DerivedDataCacheKey . h \" # include \" DerivedDataRequest . h \" # include \" Memory / MemoryFwd . h \" # include \" Serialization / CompactBinary . h \" # include \" Templates / Function . h \" namespace UE::DerivedData { class FBuildOutputBuilder ; } namespace UE::DerivedData { class IBuildJob ; } namespace UE::DerivedData { class IRequestOwner ; } namespace UE::DerivedData { enum class EBuildPolicy : uint32 ; } namespace UE::DerivedData { enum class ECachePolicy : uint32 ; } namespace UE::DerivedData { enum class EPriority : uint8 ; } namespace UE::DerivedData::Private { class FBuildJobContext final : public FBuildContext,public FBuildConfigContext,public FRequestBase { public :)",
    "insertText": "FBuildJobContext(IBuildJob& Job, const FCacheKey& CacheKey, const IBuildFunction& Function, FBuildOutputBuilder& OutputBuilder)"
  },
  {
    "label": "BeginBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBuild(IRequestOwner& Owner, TUniqueFunction<void ()>&& OnEndBuild)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FSharedString&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (const FUtf8SharedString&)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "AddInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInput(FUtf8StringView Key, const FCompressedBuffer& Value)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(FStringView Message)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarning(FStringView Message)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMessage(FStringView Message)"
  },
  {
    "label": "ResetInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetInputs()"
  },
  {
    "label": "FindConstant()",
    "kind": "Method",
    "detail": "Function (private : FCbObject)",
    "insertText": "FindConstant(FUtf8StringView Key)"
  },
  {
    "label": "FindInput()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer)",
    "insertText": "FindInput(FUtf8StringView Key)"
  },
  {
    "label": "AddMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeta(FUtf8StringView Key, const FCbField& Meta)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(const FValueId& Id, const FValue& Value)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(const FValueId& Id, const FCompressedBuffer& Buffer)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(const FValueId& Id, const FCompositeBuffer& Buffer, uint64 BlockSize)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(const FValueId& Id, const FSharedBuffer& Buffer, uint64 BlockSize)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(const FValueId& Id, const FCbObject& Object)"
  },
  {
    "label": "EndBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBuild()"
  },
  {
    "label": "BeginAsyncBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginAsyncBuild()"
  },
  {
    "label": "EndAsyncBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndAsyncBuild()"
  },
  {
    "label": "SetTypeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTypeName(const FUtf8SharedString& TypeName)"
  },
  {
    "label": "SetCacheBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCacheBucket(FCacheBucket Bucket)"
  },
  {
    "label": "SetCachePolicyMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachePolicyMask(ECachePolicy Policy)"
  },
  {
    "label": "SetBuildPolicyMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBuildPolicyMask(EBuildPolicy Policy)"
  },
  {
    "label": "SetRequiredMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequiredMemory(uint64 InRequiredMemory)"
  },
  {
    "label": "SkipDeterministicOutputCheck()",
    "kind": "Method",
    "detail": "Function (RequiredMemory = InRequiredMemory ; } void)",
    "insertText": "SkipDeterministicOutputCheck()"
  },
  {
    "label": "SetPriority()",
    "kind": "Method",
    "detail": "Function (bDeterministicOutputCheck = false ; } void)",
    "insertText": "SetPriority(EPriority Priority)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : IBuildJob& Job ; FCacheKey CacheKey ; FUtf8SharedString ; const IBuildFunction& Function ; FBuildOutputBuilder& OutputBuilder ; TMap<FUtf8SharedString,FCbObject> Constants ; TMap<FUtf8SharedString,FCompressedBuffer> Inputs ; TUniqueFunction<)",
    "insertText": "void()"
  }
]