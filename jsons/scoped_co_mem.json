[
  {
    "label": "ScopedCoMem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedCoMem"
  },
  {
    "label": "ScopedCoMem()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_CO_MEM_H_ # define BASE_WIN_SCOPED_CO_MEM_H_ # include<objbase . h> # include \" base / check . h \" namespace base { namespace win { template<T> class ScopedCoMem { public :)",
    "insertText": "ScopedCoMem() : mem_ptr_(nullptr)"
  },
  {
    "label": "ScopedCoMem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedCoMem(const ScopedCoMem&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedCoMem&)",
    "insertText": "operator(const ScopedCoMem&)"
  },
  {
    "label": "ScopedCoMem()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedCoMem()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T**)",
    "insertText": "operator()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(mem_ptr_ == nullptr)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(mem_ptr_ != NULL)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (mem_ptr_ = ptr ; } T*)",
    "insertText": "get()"
  }
]