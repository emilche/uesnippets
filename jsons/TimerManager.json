[
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTimerSourceList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerSourceList"
  },
  {
    "label": "FTimerUnifiedDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerUnifiedDelegate"
  },
  {
    "label": "FTimerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerData"
  },
  {
    "label": "FTimerManagerTimerParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerManagerTimerParameters"
  },
  {
    "label": "FTimerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerManager"
  },
  {
    "label": "UserClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UserClass"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / Object . h \" # include \" Engine / TimerHandle . h \" # include \" Misc / TVariant . h \" # include \" Templates / Function . h \" class UGameInstance ; enum class ELevelCollectionType : uint8 ; struct FTimerSourceList ; using FTimerDelegate = TDelegate<)",
    "insertText": "void()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FTimerFunction = TFunction<)",
    "insertText": "void(void)"
  },
  {
    "label": "FTimerUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (using FTimerDelegateVariant = TVariant<TYPE_OF_NULLPTR,FTimerDelegate,FTimerDynamicDelegate,FTimerFunction> ; # ifndef UE_ENABLE_TRACKING_TIMER_SOURCES # define UE_ENABLE_TRACKING_TIMER_SOURCES ! UE_BUILD_SHIPPING # endif struct FTimerUnifiedDelegate { FTimerDelegateVariant VariantDelegate ;)",
    "insertText": "FTimerUnifiedDelegate()"
  },
  {
    "label": "FTimerUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FTimerUnifiedDelegate(FTimerDelegate const& D) : VariantDelegate(TInPlaceType<FTimerDelegate>(), D)"
  },
  {
    "label": "FTimerUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimerUnifiedDelegate(FTimerDynamicDelegate const& D) : VariantDelegate(TInPlaceType<FTimerDynamicDelegate>(), D)"
  },
  {
    "label": "FTimerUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimerUnifiedDelegate(FTimerFunction&& Callback) : VariantDelegate(TInPlaceType<FTimerFunction>(), MoveTemp(Callback))"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Execute()"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBound()"
  },
  {
    "label": "GetBoundObject()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetBoundObject()"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unbind()"
  },
  {
    "label": "TYPE_OF_NULLPTR()",
    "kind": "Method",
    "detail": "Function (VariantDelegate . Set<)",
    "insertText": "TYPE_OF_NULLPTR(nullptr)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FTimerUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimerUnifiedDelegate(FTimerUnifiedDelegate&&)"
  },
  {
    "label": "FTimerUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimerUnifiedDelegate(const FTimerUnifiedDelegate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimerUnifiedDelegate&)",
    "insertText": "operator(FTimerUnifiedDelegate&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimerUnifiedDelegate&)",
    "insertText": "operator(const FTimerUnifiedDelegate&)"
  },
  {
    "label": "FTimerData()",
    "kind": "Method",
    "detail": "Function (} ; enum class ETimerStatus : uint8 { Pending,Active,Paused,Executing,ActivePendingRemoval } ; struct FTimerData { uint8 bLoop : 1 ; uint8 bMaxOncePerFrame : 1 ; uint8 bRequiresDelegate : 1 ; ETimerStatus Status ; ELevelCollectionType LevelCollection ; float Rate ; double ExpireTime ; FTimerUnifiedDelegate TimerDelegate ; FTimerHandle Handle ; const void* TimerIndicesByObjectKey = nullptr ;)",
    "insertText": "FTimerData()"
  },
  {
    "label": "FTimerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimerData(FTimerData&&)"
  },
  {
    "label": "FTimerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimerData(const FTimerData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimerData&)",
    "insertText": "operator(FTimerData&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimerData&)",
    "insertText": "operator(const FTimerData&)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} ; struct FTimerManagerTimerParameters { bool bLoop = false ; bool bMaxOncePerFrame = false ; float FirstDelay = - 1 . f ; } ; class FTimerManager : public FNoncopyable { public : void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "FTimerManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimerManager(UGameInstance* GameInstance = nullptr)"
  },
  {
    "label": "FTimerManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTimerManager()"
  },
  {
    "label": "OnCrash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCrash()"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (template<class UserClass> void)",
    "insertText": "SetTimer(FTimerHandle& InOutHandle, UserClass* InObj, typename FTimerDelegate::TMethodPtr< UserClass > InTimerMethod, float InRate, bool InbLoop = false, float InFirstDelay = -1.f)"
  },
  {
    "label": "InternalSetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetTimer(InOutHandle, FTimerUnifiedDelegate( FTimerDelegate::CreateUObject(InObj, InTimerMethod) ), InRate, InbLoop, InFirstDelay)"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> void)",
    "insertText": "SetTimer(FTimerHandle& InOutHandle, UserClass* InObj, typename FTimerDelegate::TConstMethodPtr< UserClass > InTimerMethod, float InRate, bool InbLoop = false, float InFirstDelay = -1.f)"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimer(FTimerHandle& InOutHandle, FTimerDelegate const& InDelegate, float InRate, bool InbLoop, float InFirstDelay = -1.f)"
  },
  {
    "label": "InternalSetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetTimer(InOutHandle, FTimerUnifiedDelegate(InDelegate), InRate, InbLoop, InFirstDelay)"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimer(FTimerHandle& InOutHandle, FTimerDynamicDelegate const& InDynDelegate, float InRate, bool InbLoop, float InFirstDelay = -1.f)"
  },
  {
    "label": "InternalSetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetTimer(InOutHandle, FTimerUnifiedDelegate(InDynDelegate), InRate, InbLoop, InFirstDelay)"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimer(FTimerHandle& InOutHandle, float InRate, bool InbLoop, float InFirstDelay = -1.f)"
  },
  {
    "label": "InternalSetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetTimer(InOutHandle, FTimerUnifiedDelegate(), InRate, InbLoop, InFirstDelay)"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimer(FTimerHandle& InOutHandle, TFunction<void(void)>&& Callback, float InRate, bool InbLoop, float InFirstDelay = -1.f)"
  },
  {
    "label": "InternalSetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetTimer(InOutHandle, FTimerUnifiedDelegate(MoveTemp(Callback)), InRate, InbLoop, InFirstDelay)"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> void)",
    "insertText": "SetTimer(FTimerHandle& InOutHandle, UserClass* InObj, typename FTimerDelegate::TMethodPtr<UserClass> InTimerMethod, float InRate, const FTimerManagerTimerParameters& InTimerParameters)"
  },
  {
    "label": "InternalSetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetTimer(InOutHandle, FTimerUnifiedDelegate(FTimerDelegate::CreateUObject(InObj, InTimerMethod)), InRate, InTimerParameters)"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> void)",
    "insertText": "SetTimer(FTimerHandle& InOutHandle, UserClass* InObj, typename FTimerDelegate::TConstMethodPtr<UserClass> InTimerMethod, float InRate, const FTimerManagerTimerParameters& InTimerParameters)"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimer(FTimerHandle& InOutHandle, FTimerDelegate const& InDelegate, float InRate, const FTimerManagerTimerParameters& InTimerParameters)"
  },
  {
    "label": "InternalSetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetTimer(InOutHandle, FTimerUnifiedDelegate(InDelegate), InRate, InTimerParameters)"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimer(FTimerHandle& InOutHandle, FTimerDynamicDelegate const& InDynDelegate, float InRate, const FTimerManagerTimerParameters& InTimerParameters)"
  },
  {
    "label": "InternalSetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetTimer(InOutHandle, FTimerUnifiedDelegate(InDynDelegate), InRate, InTimerParameters)"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimer(FTimerHandle& InOutHandle, float InRate, const FTimerManagerTimerParameters& InTimerParameters)"
  },
  {
    "label": "InternalSetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetTimer(InOutHandle, FTimerUnifiedDelegate(), InRate, InTimerParameters)"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimer(FTimerHandle& InOutHandle, TFunction<void(void)>&& Callback, float InRate, const FTimerManagerTimerParameters& InTimerParameters)"
  },
  {
    "label": "InternalSetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetTimer(InOutHandle, FTimerUnifiedDelegate(MoveTemp(Callback)), InRate, InTimerParameters)"
  },
  {
    "label": "SetTimerForNextTick()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> FTimerHandle)",
    "insertText": "SetTimerForNextTick(UserClass* inObj, typename FTimerDelegate::TMethodPtr< UserClass > inTimerMethod)"
  },
  {
    "label": "SetTimerForNextTick()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> FTimerHandle)",
    "insertText": "SetTimerForNextTick(UserClass* inObj, typename FTimerDelegate::TConstMethodPtr< UserClass > inTimerMethod)"
  },
  {
    "label": "SetTimerForNextTick()",
    "kind": "Method",
    "detail": "Function (} FTimerHandle)",
    "insertText": "SetTimerForNextTick(FTimerDelegate const& InDelegate)"
  },
  {
    "label": "SetTimerForNextTick()",
    "kind": "Method",
    "detail": "Function (} FTimerHandle)",
    "insertText": "SetTimerForNextTick(FTimerDynamicDelegate const& InDynDelegate)"
  },
  {
    "label": "SetTimerForNextTick()",
    "kind": "Method",
    "detail": "Function (} FTimerHandle)",
    "insertText": "SetTimerForNextTick(TFunction<void(void)>&& Callback)"
  },
  {
    "label": "ClearTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearTimer(FTimerHandle& InHandle)"
  },
  {
    "label": "InternalClearTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalClearTimer(InHandle)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (} InHandle .)",
    "insertText": "Invalidate()"
  },
  {
    "label": "ClearAllTimersForObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearAllTimersForObject(void const* Object)"
  },
  {
    "label": "InternalClearAllTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalClearAllTimers(Object)"
  },
  {
    "label": "PauseTimer()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PauseTimer(FTimerHandle InHandle)"
  },
  {
    "label": "UnPauseTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnPauseTimer(FTimerHandle InHandle)"
  },
  {
    "label": "FindTimer()",
    "kind": "Method",
    "detail": "Function (FTimerData const* const TimerData =)",
    "insertText": "FindTimer(InHandle)"
  },
  {
    "label": "IsTimerActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTimerActive(FTimerHandle InHandle)"
  },
  {
    "label": "GetTimerElapsed()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTimerElapsed(FTimerHandle InHandle)"
  },
  {
    "label": "GetTimerRemaining()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTimerRemaining(FTimerHandle InHandle)"
  },
  {
    "label": "HasBeenTickedThisFrame()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBeenTickedThisFrame()"
  },
  {
    "label": "K2_FindDynamicTimerHandle()",
    "kind": "Method",
    "detail": "Function (} FTimerHandle)",
    "insertText": "K2_FindDynamicTimerHandle(FTimerDynamicDelegate InDynamicDelegate)"
  },
  {
    "label": "ListTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListTimers()"
  },
  {
    "label": "SetGameInstance()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetGameInstance(UGameInstance* InGameInstance)"
  },
  {
    "label": "GenerateHandle()",
    "kind": "Method",
    "detail": "Function (public : FTimerHandle)",
    "insertText": "GenerateHandle(int32 Index)"
  },
  {
    "label": "FindTimer()",
    "kind": "Method",
    "detail": "Function (protected : FTimerData const*)",
    "insertText": "FindTimer(FTimerHandle const& InHandle)"
  },
  {
    "label": "InternalSetTimer()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InternalSetTimer(FTimerHandle& InOutHandle, FTimerUnifiedDelegate&& InDelegate, float InRate, bool bInLoop, float InFirstDelay)"
  },
  {
    "label": "InternalSetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetTimer(FTimerHandle& InOutHandle, FTimerUnifiedDelegate&& InDelegate, float InRate, const FTimerManagerTimerParameters& InTimerParameters)"
  },
  {
    "label": "InternalSetTimerForNextTick()",
    "kind": "Method",
    "detail": "Function (FTimerHandle)",
    "insertText": "InternalSetTimerForNextTick(FTimerUnifiedDelegate&& InDelegate)"
  },
  {
    "label": "InternalClearTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalClearTimer(FTimerHandle InDelegate)"
  },
  {
    "label": "InternalClearAllTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalClearAllTimers(void const* Object)"
  },
  {
    "label": "InternalGetTimerRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "InternalGetTimerRate(FTimerData const* const TimerData)"
  },
  {
    "label": "InternalGetTimerElapsed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "InternalGetTimerElapsed(FTimerData const* const TimerData)"
  },
  {
    "label": "InternalGetTimerRemaining()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "InternalGetTimerRemaining(FTimerData const* const TimerData)"
  },
  {
    "label": "GetTimer()",
    "kind": "Method",
    "detail": "Function (} FTimerData&)",
    "insertText": "GetTimer(FTimerHandle const& InHandle)"
  },
  {
    "label": "AddTimer()",
    "kind": "Method",
    "detail": "Function (FTimerHandle)",
    "insertText": "AddTimer(FTimerData&& TimerData)"
  },
  {
    "label": "RemoveTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTimer(FTimerHandle Handle)"
  },
  {
    "label": "WillRemoveTimerAssert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillRemoveTimerAssert(FTimerHandle Handle)"
  }
]