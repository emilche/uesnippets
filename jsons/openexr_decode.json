[
  {
    "label": "_exr_decode_pipeline",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_exr_decode_pipeline"
  },
  {
    "label": "EXR_DECODE_SAMPLE_COUNTS_AS_INDIVIDUAL()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENEXR_CORE_DECODE_H # define OPENEXR_CORE_DECODE_H # include \" openexr_chunkio . h \" # include \" openexr_coding . h \" # ifdef __cplusplus \" C \" { # endif # define)",
    "insertText": "EXR_DECODE_SAMPLE_COUNTS_AS_INDIVIDUAL((uint16_t) (1 << 0)) #define EXR_DECODE_NON_IMAGE_DATA_AS_POINTERS ((uint16_t) (1 << 1)) #define EXR_DECODE_SAMPLE_DATA_ONLY ((uint16_t) (1 << 2))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (exr_coding_channel_info_t* channels ; int16_t channel_count ; uint16_t decode_flags ; int part_index ; exr_const_context_t context ; exr_chunk_info_t chunk ; void* decoding_user_data ; void* packed_buffer ; size_t packed_alloc_size ; void* unpacked_buffer ; size_t unpacked_alloc_size ; void* packed_sample_count_table ; size_t packed_sample_count_alloc_size ; int32_t* sample_count_table ; size_t sample_count_alloc_size ; void* scratch_buffer_1 ; size_t scratch_alloc_size_1 ; void* scratch_buffer_2 ; size_t scratch_alloc_size_2 ;)",
    "insertText": "void(*alloc_fn) (exr_transcoding_pipeline_buffer_id_t, size_t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*free_fn) (exr_transcoding_pipeline_buffer_id_t, void*)"
  },
  {
    "label": "exr_result_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exr_result_t(*read_fn) (struct _exr_decode_pipeline* pipeline)"
  },
  {
    "label": "exr_result_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exr_result_t(*decompress_fn) (struct _exr_decode_pipeline* pipeline)"
  },
  {
    "label": "exr_result_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exr_result_t(*realloc_nonimage_data_fn) ( struct _exr_decode_pipeline* pipeline)"
  },
  {
    "label": "exr_result_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exr_result_t(*unpack_and_convert_fn) ( struct _exr_decode_pipeline* pipeline)"
  },
  {
    "label": "exr_decoding_initialize()",
    "kind": "Method",
    "detail": "Function (exr_coding_channel_info_t _quick_chan_store [ 5 ] ; } exr_decode_pipeline_t ; # define EXR_DECODE_PIPELINE_INITIALIZER \\ { \\ 0 \\ } EXR_EXPORT exr_result_t)",
    "insertText": "exr_decoding_initialize(exr_const_context_t ctxt, int part_index, const exr_chunk_info_t* cinfo, exr_decode_pipeline_t* decode)"
  },
  {
    "label": "exr_decoding_choose_default_routines()",
    "kind": "Method",
    "detail": "Function (EXR_EXPORT exr_result_t)",
    "insertText": "exr_decoding_choose_default_routines(exr_const_context_t ctxt, int part_index, exr_decode_pipeline_t* decode)"
  },
  {
    "label": "exr_decoding_update()",
    "kind": "Method",
    "detail": "Function (EXR_EXPORT exr_result_t)",
    "insertText": "exr_decoding_update(exr_const_context_t ctxt, int part_index, const exr_chunk_info_t* cinfo, exr_decode_pipeline_t* decode)"
  },
  {
    "label": "exr_decoding_run()",
    "kind": "Method",
    "detail": "Function (EXR_EXPORT exr_result_t)",
    "insertText": "exr_decoding_run(exr_const_context_t ctxt, int part_index, exr_decode_pipeline_t* decode)"
  },
  {
    "label": "exr_decoding_destroy()",
    "kind": "Method",
    "detail": "Function (EXR_EXPORT exr_result_t)",
    "insertText": "exr_decoding_destroy(exr_const_context_t ctxt, exr_decode_pipeline_t* decode)"
  }
]