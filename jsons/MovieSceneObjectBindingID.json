[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "FMovieSceneSequenceHierarchy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceHierarchy"
  },
  {
    "label": "FSequenceInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceInstance"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "FRelativeObjectBindingID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRelativeObjectBindingID"
  },
  {
    "label": "FFixedObjectBindingID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFixedObjectBindingID"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneObjectBindingID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneObjectBindingID"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FRelativeObjectBindingID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Guid . h \" # include \" MovieSceneFwd . h \" # include \" MovieSceneSequenceID . h \" # include \" Templates / TypeHash . h \" # include \" UObject / Class . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" MovieSceneObjectBindingID . generated . h \" class FArchive ; class IMovieScenePlayer ; class UMovieSceneSequence ; struct FMovieSceneSequenceHierarchy ; namespace UE { namespace MovieScene { struct FSequenceInstance ; struct FSharedPlaybackState ; struct FRelativeObjectBindingID {)",
    "insertText": "FRelativeObjectBindingID(const FGuid& InGuid) : Guid(InGuid) , SequenceID(MovieSceneSequenceID::Root) , ResolveParentIndex(0)"
  },
  {
    "label": "FRelativeObjectBindingID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRelativeObjectBindingID(const FGuid& InGuid, FMovieSceneSequenceID InSequenceID) : Guid(InGuid) , SequenceID(InSequenceID) , ResolveParentIndex(0)"
  },
  {
    "label": "FRelativeObjectBindingID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRelativeObjectBindingID(const FGuid& InGuid, FMovieSceneSequenceID InSequenceID, int32 InParentIndex) : Guid(InGuid) , SequenceID(InSequenceID) , ResolveParentIndex(InParentIndex)"
  },
  {
    "label": "FRelativeObjectBindingID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRelativeObjectBindingID(FMovieSceneSequenceID SourceSequenceID, FMovieSceneSequenceID TargetSequenceID, const FGuid& TargetGuid, UMovieSceneSequence* RootSequence)"
  },
  {
    "label": "FRelativeObjectBindingID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRelativeObjectBindingID(FMovieSceneSequenceID SourceSequenceID, FMovieSceneSequenceID TargetSequenceID, const FGuid& TargetGuid, const FMovieSceneSequenceHierarchy* Hierarchy)"
  },
  {
    "label": "FRelativeObjectBindingID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRelativeObjectBindingID(FMovieSceneSequenceID SourceSequenceID, FMovieSceneSequenceID TargetSequenceID, const FGuid& TargetGuid, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "FRelativeObjectBindingID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRelativeObjectBindingID(FMovieSceneSequenceID SourceSequenceID, FMovieSceneSequenceID TargetSequenceID, const FGuid& TargetGuid, IMovieScenePlayer& Player)"
  },
  {
    "label": "ConstructInternal()",
    "kind": "Method",
    "detail": "Function (FGuid Guid ; FMovieSceneSequenceID SequenceID ; int32 ResolveParentIndex ; private : void)",
    "insertText": "ConstructInternal(FMovieSceneSequenceID SourceSequenceID, FMovieSceneSequenceID TargetSequenceID, const FGuid& TargetGuid, const FMovieSceneSequenceHierarchy* Hierarchy)"
  },
  {
    "label": "FFixedObjectBindingID()",
    "kind": "Method",
    "detail": "Function (} ; struct FFixedObjectBindingID {)",
    "insertText": "FFixedObjectBindingID()"
  },
  {
    "label": "FFixedObjectBindingID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFixedObjectBindingID(const FGuid& InGuid, FMovieSceneSequenceID InSequenceID) : Guid(InGuid) , SequenceID(InSequenceID)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} public : uint32)",
    "insertText": "GetTypeHash(const FFixedObjectBindingID& A)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FFixedObjectBindingID& A, const FFixedObjectBindingID& B)"
  },
  {
    "label": "ConvertToRelative()",
    "kind": "Method",
    "detail": "Function (FRelativeObjectBindingID)",
    "insertText": "ConvertToRelative(FMovieSceneSequenceID SourceSequenceID, IMovieScenePlayer& InPlayer)"
  },
  {
    "label": "ConvertToRelative()",
    "kind": "Method",
    "detail": "Function (FRelativeObjectBindingID)",
    "insertText": "ConvertToRelative(FMovieSceneSequenceID SourceSequenceID, const FMovieSceneSequenceHierarchy* Hierarchy)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (public : FGuid Guid ; FMovieSceneSequenceID SequenceID ; } ; } })",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Local,Root,Unused)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType, meta=(HasNativeMake))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (using FSharedPlaybackState = UE::MovieScene::FSharedPlaybackState ;)",
    "insertText": "GENERATED_BODY() FMovieSceneObjectBindingID() : SequenceID(int32(MovieSceneSequenceID::Root.GetInternalValue())) , ResolveParentIndex(FixedRootSequenceParentIndex)"
  },
  {
    "label": "LegacyInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LegacyInit()"
  },
  {
    "label": "FMovieSceneObjectBindingID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneObjectBindingID(const UE::MovieScene::FRelativeObjectBindingID& InID) : Guid(InID.Guid) , SequenceID(InID.SequenceID.GetInternalValue()) , ResolveParentIndex(InID.ResolveParentIndex)"
  },
  {
    "label": "FMovieSceneObjectBindingID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneObjectBindingID(const UE::MovieScene::FFixedObjectBindingID& InID) : Guid(InID.Guid) , SequenceID(InID.SequenceID.GetInternalValue()) , ResolveParentIndex(FixedRootSequenceParentIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : FMovieSceneObjectBindingID&)",
    "insertText": "operator(const UE::MovieScene::FRelativeObjectBindingID& InID)"
  },
  {
    "label": "GetInternalValue()",
    "kind": "Method",
    "detail": "Function (Guid = InID . Guid ; SequenceID = InID . SequenceID .)",
    "insertText": "GetInternalValue()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ResolveParentIndex = InID . ResolveParentIndex ; return* this ; } FMovieSceneObjectBindingID&)",
    "insertText": "operator(const UE::MovieScene::FFixedObjectBindingID& InID)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (ResolveParentIndex = FixedRootSequenceParentIndex ; return* this ; } public : uint32)",
    "insertText": "GetTypeHash(const FMovieSceneObjectBindingID& A)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMovieSceneObjectBindingID& A, const FMovieSceneObjectBindingID& B)"
  },
  {
    "label": "IsFixedBinding()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFixedBinding()"
  },
  {
    "label": "GetGuid()",
    "kind": "Method",
    "detail": "Function (} const FGuid&)",
    "insertText": "GetGuid()"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "ensureMsgf(Space_DEPRECATED == EMovieSceneObjectBindingSpace::Unused, TEXT(\"Assigning a GUID for a binding which has no type specifier - consider using Local / External / Fixed instead\"))"
  },
  {
    "label": "GetRelativeSequenceID()",
    "kind": "Method",
    "detail": "Function (# endif Guid = InGuid ; } FMovieSceneSequenceID)",
    "insertText": "GetRelativeSequenceID()"
  },
  {
    "label": "ResolveToFixed()",
    "kind": "Method",
    "detail": "Function (} UE::MovieScene::FFixedObjectBindingID)",
    "insertText": "ResolveToFixed(FMovieSceneSequenceID SourceSequenceID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "ResolveToFixed()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::FFixedObjectBindingID)",
    "insertText": "ResolveToFixed(FMovieSceneSequenceID SourceSequenceID, IMovieScenePlayer& Player)"
  },
  {
    "label": "ResolveSequenceID()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceID)",
    "insertText": "ResolveSequenceID(FMovieSceneSequenceID SourceSequenceID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "ResolveSequenceID()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceID)",
    "insertText": "ResolveSequenceID(FMovieSceneSequenceID SourceSequenceID, IMovieScenePlayer& Player)"
  },
  {
    "label": "ResolveSequenceID()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceID)",
    "insertText": "ResolveSequenceID(FMovieSceneSequenceID SourceSequenceID, const FMovieSceneSequenceHierarchy* Hierarchy)"
  },
  {
    "label": "ResolveBoundObjects()",
    "kind": "Method",
    "detail": "Function (TArrayView<TWeakObjectPtr<>>)",
    "insertText": "ResolveBoundObjects(FMovieSceneSequenceID SourceSequenceID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "ResolveBoundObjects()",
    "kind": "Method",
    "detail": "Function (TArrayView<TWeakObjectPtr<>>)",
    "insertText": "ResolveBoundObjects(FMovieSceneSequenceID SourceSequenceID, IMovieScenePlayer& Player)"
  },
  {
    "label": "ResolveBoundObjects()",
    "kind": "Method",
    "detail": "Function (TArrayView<TWeakObjectPtr<>>)",
    "insertText": "ResolveBoundObjects(const UE::MovieScene::FSequenceInstance& SequenceInstance)"
  },
  {
    "label": "ReinterpretAsFixed()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::FFixedObjectBindingID)",
    "insertText": "ReinterpretAsFixed()"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (} public : # if WITH_EDITORONLY_DATA void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  }
]