[
  {
    "label": "FecControllerPlrBased",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FecControllerPlrBased"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_FEC_CONTROLLER_PLR_BASED_H_ # define MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_FEC_CONTROLLER_PLR_BASED_H_ # include<memory> # include \" absl / types / optional . h \" # include \" common_audio / smoothing_filter . h \" # include \" modules / audio_coding / audio_network_adaptor / controller . h \" # include \" modules / audio_coding / audio_network_adaptor / include / audio_network_adaptor_config . h \" # include \" modules / audio_coding / audio_network_adaptor / util / threshold_curve . h \" namespace webrtc { class FecControllerPlrBased final : public Controller { public : struct Config {)",
    "insertText": "Config(bool initial_fec_enabled, const ThresholdCurve& fec_enabling_threshold, const ThresholdCurve& fec_disabling_threshold, int time_constant_ms)"
  },
  {
    "label": "FecControllerPlrBased()",
    "kind": "Method",
    "detail": "Function (bool initial_fec_enabled ; ThresholdCurve fec_enabling_threshold ; ThresholdCurve fec_disabling_threshold ; int time_constant_ms ; } ;)",
    "insertText": "FecControllerPlrBased(const Config& config, std::unique_ptr<SmoothingFilter> smoothing_filter)"
  },
  {
    "label": "FecControllerPlrBased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FecControllerPlrBased(const Config& config)"
  },
  {
    "label": "FecControllerPlrBased()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FecControllerPlrBased()"
  },
  {
    "label": "FecControllerPlrBased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FecControllerPlrBased(const FecControllerPlrBased&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FecControllerPlrBased&)",
    "insertText": "operator(const FecControllerPlrBased&)"
  },
  {
    "label": "UpdateNetworkMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetworkMetrics(const NetworkMetrics& network_metrics)"
  },
  {
    "label": "MakeDecision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeDecision(AudioEncoderRuntimeConfig* config)"
  },
  {
    "label": "FecEnablingDecision()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "FecEnablingDecision(const absl::optional<float>& packet_loss)"
  },
  {
    "label": "FecDisablingDecision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FecDisablingDecision(const absl::optional<float>& packet_loss)"
  }
]