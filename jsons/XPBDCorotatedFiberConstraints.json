[
  {
    "label": "FXPBDCorotatedFiberConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDCorotatedFiberConstraints"
  },
  {
    "label": "FXPBDCorotatedFiberConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" Chaos / XPBDCorotatedConstraints . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / Framework / Parallel . h \" namespace Chaos::Softs { template<T,ParticleType> class FXPBDCorotatedFiberConstraints : public FXPBDCorotatedConstraints<T,ParticleType> { typedef FXPBDCorotatedConstraints<T,ParticleType> Base ; using Base::MeshConstraints ; using Base::LambdaArray ; using Base::Measure ; using Base::DmInverse ; public :)",
    "insertText": "FXPBDCorotatedFiberConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 4>>& InMesh, const bool bRecordMetricIn = true, const T& EMesh = (T)10.0, const T& NuMesh = (T).3, const TVector<T, 3> InFiberDir = TVector<T, 3>((T)1., (T)0., (T)0.), const T InSigmaMax = (T)3e5 ) : Base(InParticles, InMesh, bRecordMetricIn, EMesh, NuMesh), SigmaMax(InSigmaMax), FiberDir(InFiberDir)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (LambdaArray .)",
    "insertText": "Init((T)0., 3 * MeshConstraints.Num())"
  },
  {
    "label": "FXPBDCorotatedFiberConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FXPBDCorotatedFiberConstraints()"
  },
  {
    "label": "GetFiberDir()",
    "kind": "Method",
    "detail": "Function (} TVector<T,3>)",
    "insertText": "GetFiberDir()"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (AlphaActivation = AlphaIn ; } void)",
    "insertText": "SetTime(const float Time)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (float FinalTime = 4 . 0 f ; float CurrentTime = Time ;)",
    "insertText": "while(CurrentTime > FinalTime)"
  },
  {
    "label": "AlphaActivation()",
    "kind": "Method",
    "detail": "Function (CurrentTime - = FinalTime ; })",
    "insertText": "AlphaActivation(T)1. - (T)4. / FinalTime * FMath::Abs(CurrentTime - FinalTime / (T)2.)"
  },
  {
    "label": "ApplyInSerial()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyInSerial(ParticleType& Particles, const T Dt, const int32 ElementIndex)"
  },
  {
    "label": "GetPolarDelta()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>> PolarDelta =)",
    "insertText": "GetPolarDelta(Particles, Dt, ElementIndex)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(MeshConstraints[ElementIndex][i])"
  },
  {
    "label": "GetDeterminantDelta()",
    "kind": "Method",
    "detail": "Function (} TVec4<TVector<T,3>> DetDelta =)",
    "insertText": "GetDeterminantDelta(Particles, Dt, ElementIndex)"
  },
  {
    "label": "GetFiberDelta()",
    "kind": "Method",
    "detail": "Function (} TVec4<TVector<T,3>> FiberDelta =)",
    "insertText": "GetFiberDelta(Particles, Dt, ElementIndex)"
  },
  {
    "label": "GetFiberGradient()",
    "kind": "Method",
    "detail": "Function (} } TVec4<TVector<T,3>>)",
    "insertText": "GetFiberGradient(const T dFpdL, const T dFadL,const T C3, const TVec4<TVector<T, 3>>& dLdX)"
  },
  {
    "label": "dC3dL()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "dC3dL(T)0.5 * (dFpdL + AlphaActivation * dFadL)"
  },
  {
    "label": "dC3()",
    "kind": "Method",
    "detail": "Function (} else { dC3dL / = C3 ; } TVec4<TVector<T,3>>)",
    "insertText": "dC3(TVector<T, 3>((T)0.))"
  },
  {
    "label": "GetFiberDelta()",
    "kind": "Method",
    "detail": "Function (dC3 [ i ] [ j ] = dC3dL* dLdX [ i ] [ j ] ; } } return dC3 ; } private : TVec4<TVector<T,3>>)",
    "insertText": "GetFiberDelta(const ParticleType& Particles, const T Dt, const int32 ElementIndex, const T Tol = 1e-3)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (const PMatrix<T,3,3> Fe =)",
    "insertText": "F(ElementIndex, Particles)"
  },
  {
    "label": "Re()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "Re((T)0.), Se((T)0.)"
  },
  {
    "label": "PolarDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PolarDecomposition(Fe, Re, Se)"
  },
  {
    "label": "GetTransposed()",
    "kind": "Method",
    "detail": "Function (TVector<T,3> FeV = Fe .)",
    "insertText": "GetTransposed()"
  },
  {
    "label": "ElementDmInv()",
    "kind": "Method",
    "detail": "Function (TVector<T,3> DmInverseV =)",
    "insertText": "ElementDmInv(ElementIndex).GetTransposed()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (T L = FeV .)",
    "insertText": "Size()"
  },
  {
    "label": "dLdX()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>>)",
    "insertText": "dLdX(TVector<T, 3>((T)0.))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (dLdX [ 0 ] [ alpha ] - = FeV [ alpha ]* DmInverseV [ s ] / L ; } })",
    "insertText": "for(int32 ie = 1; ie < 4; ie++)"
  },
  {
    "label": "LambdaOFL()",
    "kind": "Method",
    "detail": "Function (dLdX [ ie ] [ alpha ] = FeV [ alpha ]* DmInverseV [ ie - 1 ] / L ; } } T)",
    "insertText": "LambdaOFL(T)"
  },
  {
    "label": "P1()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "P1(T)"
  },
  {
    "label": "P2()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "P2(T)"
  },
  {
    "label": "FpIntegral()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "FpIntegral(T)"
  },
  {
    "label": "FaIntegral()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "FaIntegral(T)"
  },
  {
    "label": "C3()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "C3(T)"
  },
  {
    "label": "LambdaOFL()",
    "kind": "Method",
    "detail": "Function (T AlphaTilde =)",
    "insertText": "LambdaOFL(SigmaMax * Dt * Dt * Measure[ElementIndex])"
  },
  {
    "label": "dFpdL()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "dFpdL(T)"
  },
  {
    "label": "dFadL()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "dFadL(T)"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (FpIntegral = P1* LambdaOFL / P2*)",
    "insertText": "Exp(P2 * (L / LambdaOFL - (T)1.)) - P1 * (L - LambdaOFL)"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (dFpdL = P1*)",
    "insertText": "Exp(P2 * (L / LambdaOFL - (T)1.))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(L > (T)0.4 * LambdaOFL && L < (T)0.6 * LambdaOFL)"
  },
  {
    "label": "FaIntegral()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FaIntegral(T)3. * LambdaOFL * FMath::Pow((L / LambdaOFL - (T)0.4), 3)"
  },
  {
    "label": "dFadL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dFadL(T)9. * FMath::Pow((L / LambdaOFL - (T)0.4), 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(L >= (T)0.6 * LambdaOFL && L <= (T)1.4 * LambdaOFL)"
  },
  {
    "label": "FaIntegral()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FaIntegral(T)3. * LambdaOFL * (T)0.008 + L - (T)4. / (T)3. * LambdaOFL * FMath::Pow(L / LambdaOFL - (T)1., 3) - (T)0.6 * LambdaOFL - (T)4. / (T)3. * LambdaOFL * FMath::Pow((T)0.4, 3)"
  },
  {
    "label": "dFadL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dFadL(T)1. - (T)4. * FMath::Pow(L / LambdaOFL - (T)1., 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(L > (T)1.4 * LambdaOFL && L <= (T)1.6 * LambdaOFL)"
  },
  {
    "label": "FaIntegral()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FaIntegral(T)3. * LambdaOFL * (T)0.008 + (T)0.8 * LambdaOFL - (T)8. / (T)3. * LambdaOFL * FMath::Pow((T)0.4, 3) + (T)3. * LambdaOFL * FMath::Pow(L / LambdaOFL - (T)1.6, 3) + (T)3. * LambdaOFL * (T)"
  },
  {
    "label": "dFadL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dFadL(T)9. * FMath::Pow((L / LambdaOFL - (T)1.6), 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(L > (T)1.6 * LambdaOFL)"
  },
  {
    "label": "FaIntegral()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FaIntegral(T)3. * LambdaOFL * (T)0.008 + (T)0.8 * LambdaOFL - (T)8. / (T)3. * LambdaOFL * FMath::Pow((T)0.4, 3) + (T)3. * LambdaOFL * (T)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (} C3 =)",
    "insertText": "Sqrt(FpIntegral + AlphaActivation * FaIntegral)"
  },
  {
    "label": "GetFiberGradient()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>> dC3 =)",
    "insertText": "GetFiberGradient(dFpdL,dFadL, C3, dLdX)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T DLambda = - C3 - AlphaTilde* LambdaArray [ 2* ElementIndex + 2 ] ; T Denom = AlphaTilde ;)",
    "insertText": "for(int i = 0; i < 4; i++)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (Denom + = dC3 [ i ] [ j ]* Particles .)",
    "insertText": "InvM(MeshConstraints[ElementIndex][i])"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (} } DLambda / = Denom ; LambdaArray [ 2* ElementIndex + 2 ] + = DLambda ; TVec4<TVector<T,3>>)",
    "insertText": "Delta(TVector<T, 3>((T)0.))"
  }
]