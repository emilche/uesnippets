[
  {
    "label": "lgamma()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPECIALFUNCTIONS_BFLOAT16_H # define EIGEN_SPECIALFUNCTIONS_BFLOAT16_H namespace Eigen { namespace numext { # if EIGEN_HAS_C99_MATH template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16)",
    "insertText": "lgamma(const Eigen::bfloat16& a)"
  },
  {
    "label": "digamma()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16)",
    "insertText": "digamma(const Eigen::bfloat16& a)"
  },
  {
    "label": "zeta()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16)",
    "insertText": "zeta(const Eigen::bfloat16& x, const Eigen::bfloat16& q)"
  },
  {
    "label": "polygamma()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16)",
    "insertText": "polygamma(const Eigen::bfloat16& n, const Eigen::bfloat16& x)"
  },
  {
    "label": "erf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16)",
    "insertText": "erf(const Eigen::bfloat16& a)"
  },
  {
    "label": "erfc()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16)",
    "insertText": "erfc(const Eigen::bfloat16& a)"
  },
  {
    "label": "ndtri()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16)",
    "insertText": "ndtri(const Eigen::bfloat16& a)"
  },
  {
    "label": "igamma()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16)",
    "insertText": "igamma(const Eigen::bfloat16& a, const Eigen::bfloat16& x)"
  },
  {
    "label": "igamma_der_a()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16)",
    "insertText": "igamma_der_a(const Eigen::bfloat16& a, const Eigen::bfloat16& x)"
  },
  {
    "label": "gamma_sample_der_alpha()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16)",
    "insertText": "gamma_sample_der_alpha(const Eigen::bfloat16& alpha, const Eigen::bfloat16& sample)"
  },
  {
    "label": "igammac()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16)",
    "insertText": "igammac(const Eigen::bfloat16& a, const Eigen::bfloat16& x)"
  },
  {
    "label": "betainc()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16)",
    "insertText": "betainc(const Eigen::bfloat16& a, const Eigen::bfloat16& b, const Eigen::bfloat16& x)"
  }
]