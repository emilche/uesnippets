[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FrameEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameEntry"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_ARM_CFI_TABLE_H_ # define BASE_PROFILER_ARM_CFI_TABLE_H_ # include<memory> # include \" base / base_export . h \" # include \" base / containers / buffer_iterator . h \" # include \" base / containers / span . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class BASE_EXPORT ArmCFITable { public : struct FrameEntry { uint16_t cfa_offset = 0 ; uint16_t ra_offset = 0 ; } ; std::unique_ptr<ArmCFITable>)",
    "insertText": "Parse(span<const uint8_t> cfi_data)"
  },
  {
    "label": "ArmCFITable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArmCFITable(span<const uint32_t> function_addresses, span<const uint16_t> entry_data_indices, span<const uint8_t> entry_data)"
  },
  {
    "label": "ArmCFITable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArmCFITable(const ArmCFITable&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArmCFITable&)",
    "insertText": "operator(const ArmCFITable&)"
  },
  {
    "label": "ArmCFITable()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ArmCFITable()"
  },
  {
    "label": "FindEntryForAddress()",
    "kind": "Method",
    "detail": "Function (absl::optional<FrameEntry>)",
    "insertText": "FindEntryForAddress(uintptr_t address)"
  },
  {
    "label": "GetTableSizeForTesting()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetTableSizeForTesting()"
  }
]