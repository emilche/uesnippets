[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GenerateEnvelopeData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace Audio { namespace Grain { typedef TArray<float> FEnvelope ; enum class EEnvelope { Gaussian,Triangle,DownwardTriangle,UpwardTriangle,ExponentialDecay,ExponentialAttack } ; void)",
    "insertText": "GenerateEnvelopeData(FEnvelope& InData, const int32 InNumFrames, const EEnvelope InEnvelopeType)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (InData .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (InData .)",
    "insertText": "AddUninitialized(InNumFrames)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float N = static_cast<)",
    "insertText": "float(InNumFrames)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (const float N_1 = N - 1 . 0 f ; float n = 0 . 0 f ;)",
    "insertText": "switch(InEnvelopeType)"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (InData [ i ] =)",
    "insertText": "Exp(-0.5f * FMath::Pow((n - 0.5f * N_1) / Denominator, 2.0f))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } break ; case EEnvelope::Triangle : { const float A = 0 . 5 f* N_1 ;)",
    "insertText": "for(int32 i = 0; i < InNumFrames; ++i, n += 1.0f)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (InData [ i ] = 1 . 0 f -)",
    "insertText": "Abs((n - A) / A)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (InData [ i ] =)",
    "insertText": "Pow((n - N + 1.0f) / N_1, 4.0f)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (InData [ i ] =)",
    "insertText": "Pow(n / N_1, 4.0f)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} } break ; } } float)",
    "insertText": "GetValue(const FEnvelope& InGrainData, const float InFraction)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumFrames = InGrainData .)",
    "insertText": "Num()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float Frame = static_cast<)",
    "insertText": "float(InFraction) * (NumFrames - 1)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 PrevIndex = static_cast<)",
    "insertText": "int32(Frame)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const int32 NextIndex =)",
    "insertText": "Min(NumFrames, PrevIndex + 1)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float AlphaIndex = Frame - static_cast<)",
    "insertText": "float(PrevIndex)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const float* GrainEnvelopePtr = InGrainData .)",
    "insertText": "GetData()"
  }
]