[
  {
    "label": "poisson_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "poisson_distribution"
  },
  {
    "label": "param_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "param_type"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_POISSON_DISTRIBUTION_H_ # define ABSL_RANDOM_POISSON_DISTRIBUTION_H_ # include<cassert> # include<cmath> # include<istream> # include<limits> # include<ostream> # include<type_traits> # include \" absl / random / internal / fast_uniform_bits . h \" # include \" absl / random / internal / fastmath . h \" # include \" absl / random / internal / generate_real . h \" # include \" absl / random / internal / iostream_state_saver . h \" # include \" absl / random / internal / traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<IntType = int> class poisson_distribution { public : using result_type = IntType ; class param_type { public : using distribution_type = poisson_distribution ;)",
    "insertText": "param_type(double mean = 1.0)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} private : class poisson_distribution ; double mean_ ; double emu_ ; double lmu_ ; double s_ ; double log_k_ ; int split_ ;)",
    "insertText": "static_assert(random_internal::IsIntegral<IntType>::value, \"Class-template absl::poisson_distribution<> must be \" \"parameterized using an integral type.\")"
  },
  {
    "label": "poisson_distribution()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "poisson_distribution() : poisson_distribution(1.0)"
  },
  {
    "label": "poisson_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "poisson_distribution(double mean) : param_(mean)"
  },
  {
    "label": "poisson_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "poisson_distribution(const param_type& p) : param_(p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g, const param_type& p)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (param_type)",
    "insertText": "param()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (param_ = p ; })",
    "insertText": "result_type(min)()"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "mean()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const poisson_distribution& a, const poisson_distribution& b)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mean >= 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mean <= static_cast<double>((std::numeric_limits<result_type>::max)()))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mean <= 1e10)"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (split_ = 1 ; emu_ =)",
    "insertText": "exp(-mean_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mean_ <= 50)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (split_ = 1 + static_cast<)",
    "insertText": "int(mean_ / 10.0)"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (emu_ =)",
    "insertText": "exp(-mean_ / static_cast<double>(split_))"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (} else { double k2E = 0 . 7 3 5 7 5 8 8 8 2 3 4 2 8 8 4 6 ; double kSA = 0 . 4 4 9 4 5 8 0 8 1 0 2 9 4 4 9 3 ; lmu_ =)",
    "insertText": "log(mean_)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (const double mode =)",
    "insertText": "ceil(mean_)"
  },
  {
    "label": "StirlingLogFactorial()",
    "kind": "Method",
    "detail": "Function (log_k_ = lmu_* mode - absl::)",
    "insertText": "StirlingLogFactorial(mode)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } template<IntType> template<URBG> poisson_distribution<IntType>::result_type poisson_distribution<IntType)",
    "insertText": "operator()( URBG& g, const param_type& p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using random_internal::GeneratePositiveTag ; using random_internal::GenerateRealFromBits ; using random_internal::GenerateSignedTag ;)",
    "insertText": "if(p.split_ != 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (result_type n = 0 ;)",
    "insertText": "for(int split = p.split_; split > 0; --split)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + n ; })",
    "insertText": "while(r > p.emu_)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (- - n ; } return n ; } const double a = p . mean_ + 0 . 5 ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (const double u = GenerateRealFromBits<double,GeneratePositiveTag,)",
    "insertText": "false(fast_u64_(g))"
  },
  {
    "label": "floor()",
    "kind": "Method",
    "detail": "Function (const double x =)",
    "insertText": "floor(p.s_ * v / u + a)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (const double rhs = x* p . lmu_ ; double)",
    "insertText": "s(x <= 1.0) ? 0.0 : (x == 2.0) ? 0.693147180559945 : absl::random_internal::StirlingLogFactorial(x)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (const double lhs = 2 . 0*)",
    "insertText": "log(u)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } template<CharT,Traits,IntType> std::basic_ostream<CharT,Traits>&)",
    "insertText": "operator(std::basic_ostream<CharT, Traits>& os, const poisson_distribution<IntType>& x)"
  },
  {
    "label": "make_ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (auto saver =)",
    "insertText": "make_ostream_state_saver(os)"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "precision(random_internal::stream_precision_helper<double>::kPrecision)"
  },
  {
    "label": "make_istream_state_saver()",
    "kind": "Method",
    "detail": "Function (using param_type = poisson_distribution<IntType>::param_type ; auto saver =)",
    "insertText": "make_istream_state_saver(is)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "param(param_type(mean))"
  }
]