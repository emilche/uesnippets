[
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_FILEIO_COLLADA_IO_STREAM_H_ # define _FBXSDK_FILEIO_COLLADA_IO_STREAM_H_ # include<fbxsdk . h> # include<fbxsdk / fbxsdk_nsbegin . h> template<T> bool)",
    "insertText": "FromString(T * pDest, const char * pSourceBegin, const char ** pSourceEnd = NULL)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (template<> bool)",
    "insertText": "FromString(int * pDest, const char * pSourceBegin, const char ** pSourceEnd)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (template<> bool)",
    "insertText": "FromString(double * pDest, const char * pSourceBegin, const char ** pSourceEnd)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (template<> bool)",
    "insertText": "FromString(FbxString * pDest, const char * pSourceBegin, const char ** pSourceEnd)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (template<> bool)",
    "insertText": "FromString(FbxDouble2 * pDest, const char * pSourceBegin, const char ** pSourceEnd)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (template<> bool)",
    "insertText": "FromString(FbxDouble3 * pDest, const char * pSourceBegin, const char ** pSourceEnd)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (template<> bool)",
    "insertText": "FromString(FbxDouble4 * pDest, const char * pSourceBegin, const char ** pSourceEnd)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (template<> bool)",
    "insertText": "FromString(FbxVector4 * pDest, const char * pSourceBegin, const char ** pSourceEnd)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (template<> bool)",
    "insertText": "FromString(FbxAMatrix * pDest, const char * pSourceBegin, const char ** pSourceEnd)"
  },
  {
    "label": "FromStringToArray()",
    "kind": "Method",
    "detail": "Function (template<TYPE> int)",
    "insertText": "FromStringToArray(const char * pString, TYPE * pArray, int pArraySize, int pSourceUnitOffset, int pSourceValidUnitCount, int pSourceGroupSize, int pDestUnitOffset, int pDestValidUnitCount, int pDestGroupSize, TYPE pDefaultValue = TYPE())"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(pSourceUnitOffset >= 0 && pSourceUnitOffset < pSourceGroupSize)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(pSourceValidUnitCount >= 0 && pSourceUnitOffset + pSourceValidUnitCount <= pSourceGroupSize)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(pDestUnitOffset >= 0 && pDestUnitOffset < pDestGroupSize)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(pDestValidUnitCount >= 0 && pDestUnitOffset + pDestValidUnitCount <= pDestGroupSize)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const char* lSource = pString ; TYPE* lDest = pArray ; int lReadCount = 0 ; int lSourceCounter = 0 ; int lDestCounter = 0 ; const int lSourceUnitValidEnd = pSourceUnitOffset + pSourceValidUnitCount ; const int lDestUnitGap = pDestGroupSize - pDestValidUnitCount - pDestUnitOffset ;)",
    "insertText": "while(lSource && *lSource)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TYPE lData ; const char* lSourceStart = lSource ;)",
    "insertText": "if(FromString(&lData, lSource, &lSource) && lSourceCounter >= pSourceUnitOffset && lSourceCounter < lSourceUnitValidEnd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (}* lDest + + = lData ; + + lReadCount ; + + lDestCounter ;)",
    "insertText": "if(lDestCounter == pDestValidUnitCount)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (lDestCounter = 0 ;)",
    "insertText": "for(int lIndex = 0; lIndex < lDestUnitGap; ++lIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(lSource == lSourceStart)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } } + + lSourceCounter ;)",
    "insertText": "if(lSourceCounter == pSourceGroupSize)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} return lReadCount ; } template<T> const FbxString)",
    "insertText": "ToString(const T & pValue)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} template<> const FbxString)",
    "insertText": "ToString(const FbxVector4 & pValue)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (template<> const FbxString)",
    "insertText": "ToString(const FbxAMatrix & pValue)"
  },
  {
    "label": "DecodePercentEncoding()",
    "kind": "Method",
    "detail": "Function (const FbxString)",
    "insertText": "DecodePercentEncoding(const FbxString & pEncodedString)"
  }
]