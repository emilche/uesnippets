[
  {
    "label": "RWMutexImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RWMutexImpl"
  },
  {
    "label": "SmartRWMutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmartRWMutex"
  },
  {
    "label": "SmartScopedReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SmartScopedReader"
  },
  {
    "label": "SmartScopedWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SmartScopedWriter"
  },
  {
    "label": "RWMutexImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_RWMUTEX_H # define LLVM_SUPPORT_RWMUTEX_H # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / Threading . h \" # include<cassert> namespace llvm { namespace sys { class RWMutexImpl { public :)",
    "insertText": "RWMutexImpl()"
  },
  {
    "label": "reader_acquire()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "reader_acquire()"
  },
  {
    "label": "reader_release()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "reader_release()"
  },
  {
    "label": "writer_acquire()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "writer_acquire()"
  },
  {
    "label": "writer_release()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "writer_release()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (private : # if)",
    "insertText": "defined(LLVM_ENABLE_THREADS)"
  },
  {
    "label": "RWMutexImpl()",
    "kind": "Method",
    "detail": "Function (# endif private :)",
    "insertText": "RWMutexImpl(const RWMutexImpl & original)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const RWMutexImpl &)"
  },
  {
    "label": "SmartRWMutex()",
    "kind": "Method",
    "detail": "Function (} ; template<bool mt_only> class SmartRWMutex { RWMutexImpl impl ; unsigned readers,writers ; public :)",
    "insertText": "SmartRWMutex() : impl(), readers(0), writers(0)"
  },
  {
    "label": "lock_shared()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "lock_shared()"
  },
  {
    "label": "unlock_shared()",
    "kind": "Method",
    "detail": "Function (+ + readers ; return true ; } bool)",
    "insertText": "unlock_shared()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(readers > 0 && \"Reader lock not acquired before release!\")"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (- - readers ; return true ; } bool)",
    "insertText": "lock()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(writers == 0 && \"Writer lock already acquired!\")"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (+ + writers ; return true ; } bool)",
    "insertText": "unlock()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(writers == 1 && \"Writer lock not acquired before release!\")"
  },
  {
    "label": "SmartRWMutex()",
    "kind": "Method",
    "detail": "Function (- - writers ; return true ; } private :)",
    "insertText": "SmartRWMutex(const SmartRWMutex<mt_only> & original)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const SmartRWMutex<mt_only> &)"
  },
  {
    "label": "SmartScopedReader()",
    "kind": "Method",
    "detail": "Function (} ; typedef SmartRWMutex<false> RWMutex ; template<bool mt_only> struct SmartScopedReader { SmartRWMutex<mt_only>& mutex ;)",
    "insertText": "SmartScopedReader(SmartRWMutex<mt_only>& m) : mutex(m)"
  },
  {
    "label": "SmartScopedReader()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SmartScopedReader()"
  },
  {
    "label": "SmartScopedWriter()",
    "kind": "Method",
    "detail": "Function (} } ; typedef SmartScopedReader<false> ScopedReader ; template<bool mt_only> struct SmartScopedWriter { SmartRWMutex<mt_only>& mutex ;)",
    "insertText": "SmartScopedWriter(SmartRWMutex<mt_only>& m) : mutex(m)"
  },
  {
    "label": "SmartScopedWriter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SmartScopedWriter()"
  }
]