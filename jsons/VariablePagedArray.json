[
  {
    "label": "TVariablePagedArrayPage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVariablePagedArrayPage"
  },
  {
    "label": "TVariablePagedArrayPageGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVariablePagedArrayPageGroup"
  },
  {
    "label": "TVariablePagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVariablePagedArray"
  },
  {
    "label": "TVariablePagedArrayIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVariablePagedArrayIterator"
  },
  {
    "label": "VARIABLE_PAGED_ARRAY_CHECK()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" TraceServices / Containers / Allocators . h \" # include \" Containers / Array . h \" namespace TraceServices { # define DEBUG_VARIABLE_PAGED_ARRAY 0 # if DEBUG_VARIABLE_PAGED_ARRAY # define)",
    "insertText": "VARIABLE_PAGED_ARRAY_CHECK(x) check(x) #else #define VARIABLE_PAGED_ARRAY_CHECK(x)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (ItemType* Items = nullptr ; uint64 ItemOffset = 0 ; uint64 ItemCount = 0 ; } ; template<ItemType> const ItemType*)",
    "insertText": "GetData(const TVariablePagedArrayPage<ItemType>& Page)"
  },
  {
    "label": "CheckIntegrity()",
    "kind": "Method",
    "detail": "Function (# if DEBUG_VARIABLE_PAGED_ARRAY Outer ->)",
    "insertText": "CheckIntegrity()"
  },
  {
    "label": "SetPositionAtFirstItem()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "SetPositionAtFirstItem()"
  },
  {
    "label": "TVariablePagedArrayIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TVariablePagedArrayIterator(const ArrayType& InOuter, const uint64 ItemIndex) : Outer(&InOuter)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "check(ItemIndex < Outer->TotalItemCount)"
  },
  {
    "label": "FindItemChecked()",
    "kind": "Method",
    "detail": "Function (const PageType* Page ; uint64 ItemIndexInPage ; Outer ->)",
    "insertText": "FindItemChecked(ItemIndex, Page, ItemIndexInPage)"
  },
  {
    "label": "OnCurrentPageChanged()",
    "kind": "Method",
    "detail": "Function (CurrentPage = Page ;)",
    "insertText": "OnCurrentPageChanged()"
  },
  {
    "label": "VARIABLE_PAGED_ARRAY_CHECK()",
    "kind": "Method",
    "detail": "Function (CurrentItemIndex = ItemIndex ;)",
    "insertText": "VARIABLE_PAGED_ARRAY_CHECK(ItemIndexInPage < CurrentPage->ItemCount)"
  },
  {
    "label": "GetCurrentPage()",
    "kind": "Method",
    "detail": "Function (CurrentItem = CurrentPage -> Items + CurrentPage -> ItemOffset + ItemIndexInPage ; } const PageType*)",
    "insertText": "GetCurrentPage()"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (CurrentItemIndex - = static_cast<)",
    "insertText": "uint64(CurrentItem - CurrentPageFirstItem)"
  },
  {
    "label": "NextPage()",
    "kind": "Method",
    "detail": "Function (CurrentItem = CurrentPageLastItem ; } else { CurrentPage = nullptr ; CurrentItemIndex = 0 ; CurrentItem = nullptr ; CurrentPageFirstItem = nullptr ; CurrentPageLastItem = nullptr ; } return CurrentPage ; } const PageType*)",
    "insertText": "NextPage()"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (CurrentItemIndex + = static_cast<)",
    "insertText": "uint64(CurrentPageLastItem - CurrentItem)"
  },
  {
    "label": "PrevItem()",
    "kind": "Method",
    "detail": "Function (CurrentItem = CurrentPageFirstItem ; } else { CurrentPage = nullptr ; CurrentItemIndex = 0 ; CurrentItem = nullptr ; CurrentPageFirstItem = nullptr ; CurrentPageLastItem = nullptr ; } return CurrentPage ; } const ItemType*)",
    "insertText": "PrevItem()"
  },
  {
    "label": "PrevPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrevPage()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} else { - - CurrentItemIndex ; - - CurrentItem ; } return CurrentItem ; } TVariablePagedArrayIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (TVariablePagedArrayIterator)",
    "insertText": "Tmp(*this)"
  },
  {
    "label": "NextItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NextItem()"
  },
  {
    "label": "SetPositionAtLastItem()",
    "kind": "Method",
    "detail": "Function (CurrentItemIndex = 0 ; CurrentItem = CurrentPageFirstItem ; return CurrentItem ; } const ItemType*)",
    "insertText": "SetPositionAtLastItem()"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (CurrentItemIndex = Outer -> TotalItemCount - 1 ; CurrentItem = CurrentPageLastItem ; return CurrentItem ; } const ItemType*)",
    "insertText": "SetPosition(uint64 Index)"
  },
  {
    "label": "FindItemChecked()",
    "kind": "Method",
    "detail": "Function (PageType* Page ; uint64 ItemIndexInPage ; Outer ->)",
    "insertText": "FindItemChecked(Index, Page, ItemIndexInPage)"
  },
  {
    "label": "TVariablePagedArray()",
    "kind": "Method",
    "detail": "Function (CurrentPageFirstItem = CurrentPage -> Items + CurrentPage -> ItemOffset ; CurrentPageLastItem = CurrentPageFirstItem + CurrentPage -> ItemCount - 1 ; } const ArrayType* Outer = nullptr ; const PageType* CurrentPage = nullptr ; uint64 CurrentItemIndex = 0 ; const ItemType* CurrentItem = nullptr ; const ItemType* CurrentPageFirstItem = nullptr ; const ItemType* CurrentPageLastItem = nullptr ; } ; template<InItemType> class TVariablePagedArray { public : typedef InItemType ItemType ; typedef TVariablePagedArrayPage<InItemType> PageType ; typedef TVariablePagedArrayPageGroup<InItemType> PageGroupType ; typedef TVariablePagedArrayIterator<InItemType> TIterator ;)",
    "insertText": "TVariablePagedArray(ILinearAllocator& InAllocator, uint64 InPageSize) : Allocator(InAllocator) , Pages() , FirstPage(nullptr) , LastPage(nullptr) , PageGroups() , FirstPageGroup(nullptr) , LastPageGroup(nullptr) , PageSize(InPageSize) , TotalItemCount(0)"
  },
  {
    "label": "TVariablePagedArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TVariablePagedArray()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const ItemType* const PageStart = Page . Items + Page . ItemOffset ; const ItemType* const PageEnd = PageStart + Page . ItemCount ;)",
    "insertText": "for(const ItemType* Item = PageStart; Item != PageEnd; ++Item)"
  },
  {
    "label": "ItemType()",
    "kind": "Method",
    "detail": "Function (Item -> ~)",
    "insertText": "ItemType()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} } } uint64)",
    "insertText": "Num()"
  },
  {
    "label": "NumItemsWasted()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "NumItemsWasted()"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (} ItemType&)",
    "insertText": "PushBack()"
  },
  {
    "label": "CreateInitialPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateInitialPage()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(LastPage->ItemOffset + LastPage->ItemCount == PageSize)"
  },
  {
    "label": "AddDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (PageType& NewPage = Pages .)",
    "insertText": "AddDefaulted_GetRef()"
  },
  {
    "label": "ItemType()",
    "kind": "Method",
    "detail": "Function (NewPage . Items = reinterpret_cast<)",
    "insertText": "ItemType(Allocator.Allocate(PageSize * sizeof(ItemType)))"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (FirstPage = Pages .)",
    "insertText": "GetData()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (LastPage =& NewPage ; + + LastPageGroup -> PageCount ; } ItemType* ItemPtr = LastPage -> Items + LastPage -> ItemOffset + LastPage -> ItemCount ;)",
    "insertText": "new(ItemPtr) ItemType()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (+ + LastPage -> ItemCount ; + + LastPageGroup -> ItemCount ; + + TotalItemCount ; return* ItemPtr ; } ItemType&)",
    "insertText": "Insert(uint64 Index)"
  },
  {
    "label": "UpperBoundBy()",
    "kind": "Method",
    "detail": "Function (} uint64 PageGroupIndex =)",
    "insertText": "UpperBoundBy(PageGroups, Index, &PageGroupType::FirstItemIndex)"
  },
  {
    "label": "VARIABLE_PAGED_ARRAY_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VARIABLE_PAGED_ARRAY_CHECK(PageGroupIndex > 0 && PageGroupIndex <= PageGroups.Num())"
  },
  {
    "label": "VARIABLE_PAGED_ARRAY_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VARIABLE_PAGED_ARRAY_CHECK(Index >= PageGroup->FirstItemIndex)"
  },
  {
    "label": "VARIABLE_PAGED_ARRAY_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VARIABLE_PAGED_ARRAY_CHECK(Index < PageGroup->FirstItemIndex + PageGroup->ItemCount)"
  },
  {
    "label": "VARIABLE_PAGED_ARRAY_CHECK()",
    "kind": "Method",
    "detail": "Function (ItemIndex - = Page -> ItemCount ; + + Page ; } Page + = ItemIndex / PageSize ; ItemIndex = ItemIndex % PageSize ;)",
    "insertText": "VARIABLE_PAGED_ARRAY_CHECK(ItemIndex < Page->ItemCount)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (ItemType* ItemPtr = Page -> Items + Page -> ItemOffset + ItemIndex ;)",
    "insertText": "memmove(ItemPtr + 1, ItemPtr, sizeof(ItemType) * (Page->ItemCount - ItemIndex))"
  },
  {
    "label": "OnInsertedItem()",
    "kind": "Method",
    "detail": "Function (+ + Page -> ItemCount ;)",
    "insertText": "OnInsertedItem(PageGroupIndex)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (ItemType* const FirstItemPtr = Page -> Items + Page -> ItemOffset ;)",
    "insertText": "memmove(FirstItemPtr - 1, FirstItemPtr, sizeof(ItemType) * ItemIndex)"
  },
  {
    "label": "VARIABLE_PAGED_ARRAY_CHECK()",
    "kind": "Method",
    "detail": "Function (ItemType* ItemPtr = Page -> Items + Page -> ItemOffset + ItemIndex ; return* ItemPtr ; } })",
    "insertText": "VARIABLE_PAGED_ARRAY_CHECK(Page->ItemCount == PageSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PageType* LeftPage ; PageType* RightPage ;)",
    "insertText": "if(ItemIndex == 0)"
  },
  {
    "label": "InsertDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (LeftPage =& Pages .)",
    "insertText": "InsertDefaulted_GetRef(static_cast<uint32>(LeftPageIndex))"
  },
  {
    "label": "InsertDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (LeftPage -> ItemCount = 1 ; ItemPtr = LeftPage -> Items ; } else { RightPage =& Pages .)",
    "insertText": "InsertDefaulted_GetRef(static_cast<uint32>(LeftPageIndex) + 1)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (RightPage -> ItemCount = LeftPage -> ItemCount - ItemIndex ; RightPage -> ItemOffset = PageSize - RightPage -> ItemCount ; LeftPage -> ItemCount = ItemIndex + 1 ; ItemPtr = LeftPage -> Items + LeftPage -> ItemOffset + ItemIndex ;)",
    "insertText": "memcpy(RightPage->Items + RightPage->ItemOffset, ItemPtr, sizeof(ItemType) * RightPage->ItemCount)"
  },
  {
    "label": "OnInsertedPage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OnInsertedPage(PageGroupIndex)"
  },
  {
    "label": "InsertDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (PageGroupType* RightPageGroup =& PageGroups .)",
    "insertText": "InsertDefaulted_GetRef(static_cast<uint32>(PageGroupIndex) + 1)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (LastPageGroup = PageGroups .)",
    "insertText": "GetData() + PageGroups.Num()"
  },
  {
    "label": "GetIterator()",
    "kind": "Method",
    "detail": "Function (# endif return* ItemPtr ; } TIterator)",
    "insertText": "GetIterator()"
  },
  {
    "label": "GetIteratorFromItem()",
    "kind": "Method",
    "detail": "Function (} TIterator)",
    "insertText": "GetIteratorFromItem(uint64 ItemIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ItemType&)",
    "insertText": "operator(uint64 Index)"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (} ItemType&)",
    "insertText": "First()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (const ItemType* Item = FirstPage -> Items + FirstPage -> ItemOffset ; return* Item ; } ItemType&)",
    "insertText": "Last()"
  },
  {
    "label": "FindItemChecked()",
    "kind": "Method",
    "detail": "Function (const ItemType* Item = LastPage -> Items + LastPage -> ItemOffset + LastPage -> ItemCount - 1 ; return* Item ; } private : void)",
    "insertText": "FindItemChecked(const uint64 Index, const PageType*& OutPage, uint64& OutItemIndexInPage)"
  },
  {
    "label": "VARIABLE_PAGED_ARRAY_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VARIABLE_PAGED_ARRAY_CHECK(Index < TotalItemCount)"
  },
  {
    "label": "VARIABLE_PAGED_ARRAY_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VARIABLE_PAGED_ARRAY_CHECK(Pages.Num() == 0)"
  },
  {
    "label": "VARIABLE_PAGED_ARRAY_CHECK()",
    "kind": "Method",
    "detail": "Function (FirstPage = Page ; LastPage = Page ;)",
    "insertText": "VARIABLE_PAGED_ARRAY_CHECK(PageGroups.Num() == 0)"
  },
  {
    "label": "PushBackItemInPageGroup()",
    "kind": "Method",
    "detail": "Function (PageGroup -> PageCount = 1 ; FirstPageGroup = PageGroup ; LastPageGroup = PageGroup ; } ItemType&)",
    "insertText": "PushBackItemInPageGroup(const uint64 PageGroupIndex)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (PageGroupType& PageGroup = PageGroups [ static_cast<)",
    "insertText": "uint32(PageGroupIndex)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint64 PageIndex = PageGroup . FirstPageIndex + PageGroup . PageCount - 1 ; PageType* Page =& Pages [ static_cast<)",
    "insertText": "uint32(PageIndex)"
  },
  {
    "label": "InsertDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (+ + PageIndex ; Page =& Pages .)",
    "insertText": "InsertDefaulted_GetRef(static_cast<uint32>(PageIndex))"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (LastPage = Pages .)",
    "insertText": "GetData() + Pages.Num()"
  },
  {
    "label": "OnInsertedItem()",
    "kind": "Method",
    "detail": "Function (+ + CurrentPageGroup -> FirstPageIndex ; } } void)",
    "insertText": "OnInsertedItem(const uint64 PageGroupIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(Pages.Num() > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} { uint64 ItemCount = 0 ;)",
    "insertText": "for(const PageType& Page : Pages)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ItemCount + = Page . ItemCount ; })",
    "insertText": "check(ItemCount == TotalItemCount)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} { uint64 ItemCount = 0 ; uint64 PageCount = 0 ; uint64 ItemIndex = 0 ; uint64 PageIndex = 0 ;)",
    "insertText": "for(const PageGroupType& PageGroup : PageGroups)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ItemCount + = PageGroup . ItemCount ;)",
    "insertText": "check(PageGroup.FirstItemIndex == ItemIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ItemIndex + = PageGroup . ItemCount ;)",
    "insertText": "check(PageGroup.PageCount > 0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (PageCount + = PageGroup . PageCount ;)",
    "insertText": "check(PageGroup.FirstPageIndex == PageIndex)"
  }
]