[
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "SSlateFileOpenDlg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSlateFileOpenDlg"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FFileEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileEntry"
  },
  {
    "label": "FSlateFileDlgWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFileDlgWindow"
  },
  {
    "label": "EResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EResult"
  },
  {
    "label": "FDirNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirNode"
  },
  {
    "label": "SSlateFileDialogRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSlateFileDialogRow"
  },
  {
    "label": "EVisibility",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EVisibility"
  },
  {
    "label": "FFileEntry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Misc / Paths . h \" # include \" Layout / Visibility . h \" # include \" Layout / Margin . h \" # include \" Widgets / SNullWidget . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" SlateOptMacros . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" # include \" SlateFileDialogsStyles . h \" # include \" IDirectoryWatcher . h \" # define LOCTEXT_NAMESPACE \" SlateFileDialogsNamespace \" class SButton ; class SSlateFileOpenDlg ; class SWindow ; struct FFileEntry { FString Label ; FString ModDate ; FString FileSize ; bool bIsSelected ; bool bIsDirectory ;)",
    "insertText": "FFileEntry()"
  },
  {
    "label": "FFileEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFileEntry(FString InLabel, FString InModDate, FString InFileSize, bool InIsDirectory) : Label(MoveTemp(InLabel)) , ModDate(MoveTemp(InModDate)) , FileSize(MoveTemp(InFileSize)) , bIsSelected(false) , bIsDirectory(InIsDirectory)"
  },
  {
    "label": "ConstPredicate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ConstPredicate(const TSharedPtr<FFileEntry> Entry1, const TSharedPtr<FFileEntry> Entry2)"
  },
  {
    "label": "FSlateFileDlgWindow()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TSharedPtr<FFileEntry> SSlateFileDialogItemPtr ; class FSlateFileDlgWindow { public : enum EResult { Cancel = 0,Accept = 1,Engine = 2,Project = 3 } ;)",
    "insertText": "FSlateFileDlgWindow(FSlateFileDialogsStyle *InStyleSet)"
  },
  {
    "label": "OpenFileDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenFileDialog(const void* ParentWindowHandle, const FString& DialogTitle, const FString& DefaultPath, const FString& DefaultFile, const FString& FileTypes, uint32 Flags, TArray<FString>& OutFilenames, int32& OutFilterIndex, int32 DefaultFilterIndex = 0)"
  },
  {
    "label": "OpenFileDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenFileDialog(const void* ParentWindowHandle, const FString& DialogTitle, const FString& DefaultPath, const FString& DefaultFile, const FString& FileTypes, uint32 Flags, TArray<FString>& OutFilenames)"
  },
  {
    "label": "OpenDirectoryDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenDirectoryDialog(const void* ParentWindowHandle, const FString& DialogTitle, const FString& DefaultPath, FString& OutFoldername)"
  },
  {
    "label": "SaveFileDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveFileDialog(const void* ParentWindowHandle, const FString& DialogTitle, const FString& DefaultPath, const FString& DefaultFile, const FString& FileTypes, uint32 Flags, TArray<FString>& OutFilenames, int32& OutFilterIndex, int32 DefaultFilterIndex = 0)"
  },
  {
    "label": "SaveFileDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveFileDialog(const void* ParentWindowHandle, const FString& DialogTitle, const FString& DefaultPath, const FString& DefaultFile, const FString& FileTypes, uint32 Flags, TArray<FString>& OutFilenames)"
  },
  {
    "label": "TrimFilenameFromPath()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<class SSlateFileOpenDlg> DialogWidget ; FString CurrentDirectory ; FSlateFileDialogsStyle* StyleSet ; void)",
    "insertText": "TrimFilenameFromPath(FString &Path)"
  },
  {
    "label": "FDirNode()",
    "kind": "Method",
    "detail": "Function (} ; class SSlateFileOpenDlg : public SCompoundWidget { public : struct FDirNode { FString Label ; TSharedPtr<STextBlock> TextBlock ; TSharedPtr<SButton> Button ;)",
    "insertText": "FDirNode()"
  },
  {
    "label": "FDirNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDirNode(FString InLabel, TSharedPtr<STextBlock> InTextBlock)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (Label = InLabel ; TextBlock = InTextBlock ; } } ;)",
    "insertText": "SLATE_BEGIN_ARGS(SSlateFileOpenDlg) : _CurrentPath(TEXT(\"\")), _Filters(TEXT(\"\")), _bMultiSelectEnabled(false), _WindowTitleText(TEXT(\"\")), _AcceptText(LOCTEXT(\"SlateDialogOpen\",\"Open\")), _bDirectoriesOnly(false), _bSaveFile(false), _OutNames(nullptr), _OutFilterIndex(nullptr), _ParentWindow(nullptr), _StyleSet(nullptr)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FString, CurrentPath) SLATE_ARGUMENT(FString, Filters) SLATE_ARGUMENT(bool, bMultiSelectEnabled) SLATE_ARGUMENT(FString, WindowTitleText) SLATE_ARGUMENT(FText, AcceptText) SLATE_ARGUMENT(bool, bDirectoriesOnly) SLATE_ARGUMENT(bool, bSaveFile) SLATE_ARGUMENT(TArray<FString>*, OutNames) SLATE_ARGUMENT(int32*, OutFilterIndex) SLATE_ARGUMENT(TWeakPtr<SWindow>, ParentWindow) SLATE_ARGUMENT(FSlateFileDialogsStyle*, StyleSet) SLATE_END_ARGS() ~SSlateFileOpenDlg()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetResponse()",
    "kind": "Method",
    "detail": "Function (FSlateFileDlgWindow::EResult)",
    "insertText": "GetResponse()"
  },
  {
    "label": "SetOutFilterIndex()",
    "kind": "Method",
    "detail": "Function (OutNames = Ptr ; } void)",
    "insertText": "SetOutFilterIndex(int32* InOutFilterIndex)"
  },
  {
    "label": "SetDefaultFilterIndex()",
    "kind": "Method",
    "detail": "Function (OutFilterIndex = InOutFilterIndex ; } void)",
    "insertText": "SetDefaultFilterIndex(int32 DefaultFilterIndex)"
  },
  {
    "label": "SetDefaultFile()",
    "kind": "Method",
    "detail": "Function (FilterIndex = DefaultFilterIndex ; } void)",
    "insertText": "SetDefaultFile(FString DefaultFile)"
  },
  {
    "label": "OnPathClicked()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnPathClicked(const FString& CrumbData)"
  },
  {
    "label": "OnGetCrumbDelimiterContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGetCrumbDelimiterContent(const FString& CrumbData)"
  },
  {
    "label": "RebuildFileTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildFileTable()"
  },
  {
    "label": "BuildDirectoryPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildDirectoryPath()"
  },
  {
    "label": "ReadDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadDir(bool bIsRefresh = false)"
  },
  {
    "label": "RefreshCrumbs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCrumbs()"
  },
  {
    "label": "OnPathMenuItemClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathMenuItemClicked(FString ClickedPath)"
  },
  {
    "label": "OnItemSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemSelected(TSharedPtr<FFileEntry> Item, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "ParseTextField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTextField(TArray<FString> &FilenameArray, FString Files)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry &AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnGenerateWidgetForList()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateWidgetForList(TSharedPtr<FFileEntry> Item, const TSharedRef<STableViewBase> &OwnerTable)"
  },
  {
    "label": "OnItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemDoubleClicked(TSharedPtr<FFileEntry> Item)"
  },
  {
    "label": "OnFilterChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "IsAcceptEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAcceptEnabled()"
  },
  {
    "label": "OnAcceptCancelClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAcceptCancelClick(FSlateFileDlgWindow::EResult ButtonID)"
  },
  {
    "label": "OnQuickLinkClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnQuickLinkClick(FSlateFileDlgWindow::EResult ButtonID)"
  },
  {
    "label": "OnDirSublevelClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDirSublevelClick(int32 Level)"
  },
  {
    "label": "OnDirectoryChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDirectoryChanged(const TArray <FFileChangeData> &FileChanges)"
  },
  {
    "label": "OnFileNameCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileNameCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "OnNewDirectoryCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewDirectoryCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "OnNewDirectoryClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnNewDirectoryClick()"
  },
  {
    "label": "OnNewDirectoryTextChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnNewDirectoryTextChanged(const FText &InText, FText &ErrorMsg)"
  },
  {
    "label": "OnNewDirectoryAcceptCancelClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnNewDirectoryAcceptCancelClick(FSlateFileDlgWindow::EResult ButtonID)"
  },
  {
    "label": "OnGoForwardClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnGoForwardClick()"
  },
  {
    "label": "OnGoBackClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnGoBackClick()"
  },
  {
    "label": "SetOutputFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputFiles()"
  },
  {
    "label": "GetFilterExtensions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFilterExtensions(TArray< FString >& OutExtensions)"
  },
  {
    "label": "ParseFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseFilters()"
  },
  {
    "label": "IsWildcardExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWildcardExtension(const FString& Extension)"
  },
  {
    "label": "GetSoloDirectorySelected()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFileEntry>)",
    "insertText": "GetSoloDirectorySelected()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TArray<FDirNode> DirectoryNodesArray ; TArray<TSharedPtr<FFileEntry>> FoldersArray ; TArray<TSharedPtr<FFileEntry>> FilesArray ; TArray<TSharedPtr<FFileEntry>> LineItemArray ; TSharedPtr<SComboBox<TSharedPtr<FString>>> FilterCombo ; TSharedPtr<STextBlock> FilterComboBoxTitleBlock ; TSharedPtr<SHorizontalBox> FilterHBox ; TSharedPtr<SInlineEditableTextBlock> SaveFilenameEditBox ; TSharedPtr<SInlineEditableTextBlock> NewDirectoryEditBox ; TSharedPtr<SBox> SaveFilenameSizeBox ; TSharedPtr<STextBlock> WindowTitle ; TSharedPtr<SListView<TSharedPtr<FFileEntry>>> ListView ; TSharedPtr<SBreadcrumbTrail<FString>> PathBreadcrumbTrail ; TSharedPtr<SButton> NewDirCancelButton ; TSharedPtr<SBox> NewDirectorySizeBox ; TSharedPtr<STextBlock> DirErrorMsg ; TArray<TSharedPtr<FString>> FilterNameArray ; TArray<FString> FilterListArray ; int32 FilterIndex ; FSlateFileDlgWindow::EResult UserResponse ; bool bNeedsBuilding ; bool bRebuildDirPath ; bool bDirectoryHasChanged ; int32 DirNodeIndex ; FString SaveFilename ; TWeakPtr<SWindow> ParentWindow ; FString CurrentPath ; FString Filters ; FString WindowTitleText ; bool bMultiSelectEnabled ; TArray<FString>* OutNames ; int32* OutFilterIndex ; bool bDirectoriesOnly ; bool bSaveFile ; FText AcceptText ; FSlateFileDialogsStyle* StyleSet ; IDirectoryWatcher* DirectoryWatcher ; FDelegateHandle OnDialogDirectoryChangedDelegateHandle ; FString RegisteredPath ; FString NewDirectoryName ; TArray<FString> History ; int32 HistoryIndex ; } ; class SSlateFileDialogRow : public SMultiColumnTableRow<SSlateFileDialogItemPtr> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSlateFileDialogRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(SSlateFileDialogItemPtr, DialogItem) SLATE_ARGUMENT(FSlateFileDialogsStyle *, StyleSet) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase> &InOwnerTableView)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (DialogItem = InArgs . _DialogItem ; StyleSet = InArgs . _StyleSet ; SMultiColumnTableRow<SSlateFileDialogItemPtr)",
    "insertText": "Construct(FSuperRowType::FArguments(), InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} BEGIN_SLATE_FUNCTION_BUILD_OPTIMIZATION TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "GetFontStyle()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo ItemFont = StyleSet ->)",
    "insertText": "GetFontStyle(\"SlateFileDialogs.Dialog\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (struct EVisibility FolderIconVisibility = EVisibility::Visible ; const FSlateBrush* Icon ;)",
    "insertText": "if(DialogItem->bIsDirectory)"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Icon = StyleSet ->)",
    "insertText": "GetBrush(\"SlateFileDialogs.Folder16\")"
  },
  {
    "label": "GetExtension()",
    "kind": "Method",
    "detail": "Function (} else { FString Extension =)",
    "insertText": "GetExtension(DialogItem->Label, false)"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Icon = StyleSet ->)",
    "insertText": "GetBrush(\"SlateFileDialogs.UAsset16\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Extension.Equals(TEXT(\"uproject\"), ESearchCase::IgnoreCase))"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Icon = StyleSet ->)",
    "insertText": "GetBrush(\"SlateFileDialogs.UProject16\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Extension.Equals(TEXT(\"fbx\"), ESearchCase::IgnoreCase))"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Icon = StyleSet ->)",
    "insertText": "GetBrush(\"SlateFileDialogs.Model3D\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Extension.Equals(TEXT(\"cpp\"), ESearchCase::IgnoreCase) || Extension.Equals(TEXT(\"h\"), ESearchCase::IgnoreCase) || Extension.Equals(TEXT(\"txt\"), ESearchCase::IgnoreCase) || Extension.Equals(TEXT(\"log\"), ESearchCase::IgnoreCase))"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Icon = StyleSet ->)",
    "insertText": "GetBrush(\"SlateFileDialogs.TextFile\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Extension.Equals(TEXT(\"wav\"), ESearchCase::IgnoreCase) || Extension.Equals(TEXT(\"mp3\"), ESearchCase::IgnoreCase) || Extension.Equals(TEXT(\"ogg\"), ESearchCase::IgnoreCase))"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Icon = StyleSet ->)",
    "insertText": "GetBrush(\"SlateFileDialogs.Audio\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Extension.Equals(TEXT(\"mp4\"), ESearchCase::IgnoreCase) || Extension.Equals(TEXT(\"webm\"), ESearchCase::IgnoreCase))"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Icon = StyleSet ->)",
    "insertText": "GetBrush(\"SlateFileDialogs.Video\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Extension.Equals(TEXT(\"png\"), ESearchCase::IgnoreCase) || Extension.Equals(TEXT(\"jpg\"), ESearchCase::IgnoreCase) || Extension.Equals(TEXT(\"tga\"), ESearchCase::IgnoreCase) || Extension.Equals(TEXT(\"bmp\"), ESearchCase::IgnoreCase))"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Icon = StyleSet ->)",
    "insertText": "GetBrush(\"SlateFileDialogs.Image\")"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (} else { Icon = StyleSet ->)",
    "insertText": "GetBrush(\"SlateFileDialogs.PlaceHolder\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FolderIconVisibility = EVisibility::Hidden ; } })",
    "insertText": "if(ColumnName == TEXT(\"Pathname\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"ModDate\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"FileSize\"))"
  }
]