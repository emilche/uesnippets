[
  {
    "label": "FCurveEditorScreenSpaceH",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorScreenSpaceH"
  },
  {
    "label": "FCurveEditorScreenSpaceV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorScreenSpaceV"
  },
  {
    "label": "FCurveEditorScreenSpace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorScreenSpace"
  },
  {
    "label": "FCurveEditorScreenSpaceH()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Matrix . h \" # include \" Math / Plane . h \" # include \" Math / TransformCalculus2D . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Vector2D . h \" # include \" Misc / AssertionMacros . h \" struct FCurveEditorScreenSpaceH {)",
    "insertText": "FCurveEditorScreenSpaceH(double InPixelWidth, double InInputMin, double InInputMax) : PixelWidth(FMath::Max(InPixelWidth, 1.0)) , InputMin(InInputMin), InputMax(InInputMax)"
  },
  {
    "label": "ScreenToSeconds()",
    "kind": "Method",
    "detail": "Function (InputMax = InputMin + KINDA_SMALL_NUMBER ; } } public : double)",
    "insertText": "ScreenToSeconds(double ScreenPosition)"
  },
  {
    "label": "SecondsToScreen()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "SecondsToScreen(double InSeconds)"
  },
  {
    "label": "PixelsPerInput()",
    "kind": "Method",
    "detail": "Function (} public : double)",
    "insertText": "PixelsPerInput()"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (const FVector2D& T = CurveTransform .)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "FCurveEditorScreenSpaceV()",
    "kind": "Method",
    "detail": "Function (} private : double PixelWidth ; double InputMin,InputMax ; } ; struct FCurveEditorScreenSpaceV {)",
    "insertText": "FCurveEditorScreenSpaceV(double InPixelHeight, double InOutputMin, double InOutputMax) : PixelHeight(FMath::Max(InPixelHeight, 1.0)) , OutputMin(InOutputMin), OutputMax(InOutputMax)"
  },
  {
    "label": "ScreenToValue()",
    "kind": "Method",
    "detail": "Function (OutputMax = OutputMin + 1 . 0 ; } } public : double)",
    "insertText": "ScreenToValue(double ScreenPosition)"
  },
  {
    "label": "ValueToScreen()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ValueToScreen(double InValue)"
  },
  {
    "label": "PixelsPerOutput()",
    "kind": "Method",
    "detail": "Function (} public : double)",
    "insertText": "PixelsPerOutput()"
  },
  {
    "label": "FCurveEditorScreenSpace()",
    "kind": "Method",
    "detail": "Function (} private : double PixelHeight ; double OutputMin,OutputMax ; } ; struct FCurveEditorScreenSpace : FCurveEditorScreenSpaceH,FCurveEditorScreenSpaceV {)",
    "insertText": "FCurveEditorScreenSpace(FVector2D InPixelSize, double InInputMin, double InInputMax, double InOutputMin, double InOutputMax) : FCurveEditorScreenSpaceH(InPixelSize.X, InInputMin, InInputMax) , FCurveEditorScreenSpaceV(InPixelSize.Y, InOutputMin, InOutputMax)"
  },
  {
    "label": "GetPhysicalSize()",
    "kind": "Method",
    "detail": "Function (} public : FVector2D)",
    "insertText": "GetPhysicalSize()"
  },
  {
    "label": "ToCurveSpace()",
    "kind": "Method",
    "detail": "Function (} public : FCurveEditorScreenSpace)",
    "insertText": "ToCurveSpace(const FTransform2d& CurveTransform)"
  },
  {
    "label": "FCurveEditorScreenSpaceH()",
    "kind": "Method",
    "detail": "Function (FCurveEditorScreenSpace New =* this ; FCurveEditorScreenSpaceH& H = static_cast<)",
    "insertText": "FCurveEditorScreenSpaceH(New)"
  },
  {
    "label": "FCurveEditorScreenSpaceV()",
    "kind": "Method",
    "detail": "Function (FCurveEditorScreenSpaceV& V = static_cast<)",
    "insertText": "FCurveEditorScreenSpaceV(New)"
  },
  {
    "label": "ToCurveSpace()",
    "kind": "Method",
    "detail": "Function (H = H .)",
    "insertText": "ToCurveSpace(CurveTransform)"
  }
]