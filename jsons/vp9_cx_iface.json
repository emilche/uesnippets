[
  {
    "label": "vp9_get_encoder_config()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_VP9_CX_IFACE_H_ # define VPX_VP9_VP9_CX_IFACE_H_ # include \" vp9 / encoder / vp9_encoder . h \" # include \" vp9 / common / vp9_onyxc_int . h \" # ifdef __cplusplus \" C \" { # endif VP9EncoderConfig)",
    "insertText": "vp9_get_encoder_config(int frame_width, int frame_height, vpx_rational_t frame_rate, int target_bitrate, int encode_speed, int target_level, vpx_enc_pass enc_pass)"
  },
  {
    "label": "vp9_dump_encoder_config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_dump_encoder_config(const VP9EncoderConfig *oxcf, FILE *fp)"
  },
  {
    "label": "vp9_get_frame_info()",
    "kind": "Method",
    "detail": "Function (FRAME_INFO)",
    "insertText": "vp9_get_frame_info(const VP9EncoderConfig *oxcf)"
  },
  {
    "label": "timebase_units_to_ticks()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "timebase_units_to_ticks(const vpx_rational64_t *timestamp_ratio, int64_t n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int64_t round = timestamp_ratio -> num / 2 ;)",
    "insertText": "if(round > 0)"
  },
  {
    "label": "vp9_set_first_pass_stats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vp9_set_first_pass_stats(VP9EncoderConfig *oxcf, const vpx_fixed_buf_t *stats)"
  }
]