[
  {
    "label": "FPerParticlePBDUpdateFromDeltaPosition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerParticlePBDUpdateFromDeltaPosition"
  },
  {
    "label": "T_PARTICLES",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T_PARTICLES"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPerParticlePBDUpdateFromDeltaPosition()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Particle / ParticleUtilities . h \" # include \" Chaos / PBDParticles . h \" # include \" Chaos / PBDRigidParticles . h \" # include \" Chaos / PerParticleRule . h \" namespace Chaos { class FPerParticlePBDUpdateFromDeltaPosition : public FPerParticleRule { public :)",
    "insertText": "FPerParticlePBDUpdateFromDeltaPosition()"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (} template<class T_PARTICLES> void)",
    "insertText": "ApplyHelper(T_PARTICLES& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "SetV(Index, (InParticles.GetP(Index) - InParticles.GetX(Index)) / Dt)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FPBDParticles& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "V(Index) = (InParticles.GetP(Index) - InParticles.GetX(Index))"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "SetX(Index, InParticles.GetP(Index))"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TPBDRigidParticles<FReal, 3>& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHelper(InParticles, Dt, Index)"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "SetW(Index, FRotation3f::CalculateAngularVelocity(InParticles.GetRf(Index), InParticles.GetQf(Index), FRealSingle(Dt)))"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FPBDRigidParticleHandle* Particle, const FReal Dt)"
  },
  {
    "label": "CenterOfMass()",
    "kind": "Method",
    "detail": "Function (const FVec3& CenterOfMass = Particle ->)",
    "insertText": "CenterOfMass()"
  },
  {
    "label": "XCom()",
    "kind": "Method",
    "detail": "Function (const FVec3 CenteredX = Particle ->)",
    "insertText": "XCom()"
  },
  {
    "label": "PCom()",
    "kind": "Method",
    "detail": "Function (const FVec3 CenteredP = Particle ->)",
    "insertText": "PCom()"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (Particle ->)",
    "insertText": "SetV(FVec3::CalculateVelocity(CenteredX, CenteredP, Dt))"
  },
  {
    "label": "SetWf()",
    "kind": "Method",
    "detail": "Function (Particle ->)",
    "insertText": "SetWf(FRotation3f::CalculateAngularVelocity(Particle->GetRf(), Particle->GetQf(), FRealSingle(Dt)))"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TTransientPBDRigidParticleHandle<FReal, 3>& Particle, const FReal Dt)"
  },
  {
    "label": "SetWf()",
    "kind": "Method",
    "detail": "Function (Particle .)",
    "insertText": "SetWf(FRotation3f::CalculateAngularVelocity(Particle.GetRf(), Particle.GetQf(), FRealSingle(Dt)))"
  }
]