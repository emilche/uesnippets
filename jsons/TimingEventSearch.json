[
  {
    "label": "IFilterExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFilterExecutor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTimingEventSearchHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingEventSearchHandle"
  },
  {
    "label": "FTimingEventSearchParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingEventSearchParameters"
  },
  {
    "label": "TTimingEventSearchCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTimingEventSearchCache"
  },
  {
    "label": "FResultData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResultData"
  },
  {
    "label": "TTimingEventSearch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTimingEventSearch"
  },
  {
    "label": "FContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContext"
  },
  {
    "label": "StopAtFirstMatch()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Map . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / SharedPointer . h \" namespace UE::Insights { class IFilterExecutor ; } enum class ETimingEventSearchFlags : int32 { None = 0,SearchAll = None,)",
    "insertText": "StopAtFirstMatch(1 << 0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(ETimingEventSearchFlags)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (struct FTimingEventSearchHandle { bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (Id =)",
    "insertText": "uint64(-1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FTimingEventSearchHandle& InOther)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; class FTimingEventSearchParameters { public : typedef TFunctionRef<)",
    "insertText": "bool(double , double , uint32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "void(double , double , uint32)"
  },
  {
    "label": "FTimingEventSearchParameters()",
    "kind": "Method",
    "detail": "Function (enum class ESearchDirection : uint32 { Forward = 0,Backward = 1,} ;)",
    "insertText": "FTimingEventSearchParameters(double InStartTime, double InEndTime, ETimingEventSearchFlags Flags, EventFilterPredicate InEventFilter = NoFilter, EventMatchedPredicate InEventMatched = NoMatch) : EventFilter(InEventFilter) , EventMatched(InEventMatched) , SearchHandle(nullptr) , StartTime(InStartTime) , EndTime(InEndTime) , Flags(Flags)"
  },
  {
    "label": "NoFilter()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "NoFilter(double, double, uint32)"
  },
  {
    "label": "TTimingEventSearchCache()",
    "kind": "Method",
    "detail": "Function (} public : EventFilterPredicate EventFilter ; EventMatchedPredicate EventMatched ; FTimingEventSearchHandle* SearchHandle ; double StartTime ; double EndTime ; ETimingEventSearchFlags Flags ; TSharedPtr<UE::Insights::IFilterExecutor> FilterExecutor ; ESearchDirection SearchDirection = ESearchDirection::Forward ; } ; template<PayloadType,int32 Size = 3> struct TTimingEventSearchCache { public :)",
    "insertText": "TTimingEventSearchCache() : WriteIndex(0)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} FTimingEventSearchHandle)",
    "insertText": "Write(double InStartTime, double InEndTime, uint32 InDepth, const PayloadType& InPayload)"
  },
  {
    "label": "GenerateHandle()",
    "kind": "Method",
    "detail": "Function (TPair<FTimingEventSearchHandle,FResultData>& WritePair = CachedValues [ WriteIndex ] ; WritePair . Key =)",
    "insertText": "GenerateHandle()"
  },
  {
    "label": "WriteIndex()",
    "kind": "Method",
    "detail": "Function (WritePair . Value . Payload = InPayload ; WritePair . Value . StartTime = InStartTime ; WritePair . Value . EndTime = InEndTime ; WritePair . Value . Depth = InDepth ;)",
    "insertText": "WriteIndex(WriteIndex + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TPair<FTimingEventSearchHandle,FResultData>& CachedPair = CachedValues [ ReadIndex ] ;)",
    "insertText": "if(InHandle == CachedPair.Key)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } private : int32 WriteIndex ; struct FResultData { PayloadType Payload ; double StartTime ; double EndTime ; uint32 Depth ; } ; TPair<FTimingEventSearchHandle,FResultData> CachedValues [ Size ] ; } ; template<PayloadType> struct TTimingEventSearch { public : struct FContext ; typedef TFunctionRef<)",
    "insertText": "void(double , double , uint32 , const PayloadType&)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "bool(double , double , uint32 , const PayloadType&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "void(FContext&)"
  },
  {
    "label": "FContext()",
    "kind": "Method",
    "detail": "Function (struct FContext { public :)",
    "insertText": "FContext(const FTimingEventSearchParameters& InParameters, PayloadFilterPredicate InPayloadFilterPredicate, PayloadMatchedPredicate InPayloadMatchedPredicate) : Parameters(InParameters) , PayloadMatched(InPayloadMatchedPredicate) , PayloadFilter(InPayloadFilterPredicate) , FoundStartTime(-1.0) , FoundEndTime(-1.0) , FoundDepth(0) , bFound(false) , bContinueSearching(true)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Check(double InEventStartTime, double InEventEndTime, uint32 InEventDepth, const PayloadType& InEvent)"
  },
  {
    "label": "EventMatched()",
    "kind": "Method",
    "detail": "Function (Parameters .)",
    "insertText": "EventMatched(InEventStartTime, InEventEndTime, InEventDepth)"
  },
  {
    "label": "PayloadMatched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PayloadMatched(InEventStartTime, InEventEndTime, InEventDepth, InEvent)"
  },
  {
    "label": "bContinueSearching()",
    "kind": "Method",
    "detail": "Function (FoundPayload = InEvent ; FoundDepth = InEventDepth ; FoundStartTime = InEventStartTime ; FoundEndTime = InEventEndTime ; bFound = true ;)",
    "insertText": "bContinueSearching(Parameters.Flags & ETimingEventSearchFlags::StopAtFirstMatch)"
  },
  {
    "label": "GetParameters()",
    "kind": "Method",
    "detail": "Function (} } const FTimingEventSearchParameters&)",
    "insertText": "GetParameters()"
  },
  {
    "label": "NoFilter()",
    "kind": "Method",
    "detail": "Function (bContinueSearching = false ; } private : FTimingEventSearchParameters Parameters ; PayloadMatchedPredicate PayloadMatched ; PayloadFilterPredicate PayloadFilter ; PayloadType FoundPayload ; double FoundStartTime ; double FoundEndTime ; uint32 FoundDepth ; bool bFound ; bool bContinueSearching ; } ; public : bool)",
    "insertText": "NoFilter(double, double, uint32, const PayloadType&)"
  },
  {
    "label": "Search()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Search(const FTimingEventSearchParameters& InParameters, SearchPredicate InSearchPredicate, FoundPredicate InFoundPredicate)"
  },
  {
    "label": "Search()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Search(const FTimingEventSearchParameters& InParameters, SearchPredicate InSearchPredicate, FoundPredicate InFoundPredicate, TTimingEventSearchCache<PayloadType>& InCache)"
  },
  {
    "label": "Search()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Search(const FTimingEventSearchParameters& InParameters, SearchPredicate InSearchPredicate, PayloadFilterPredicate InFilterPredicate, FoundPredicate InFoundPredicate, PayloadMatchedPredicate InPayloadMatchedPredicate, TTimingEventSearchCache<PayloadType>* InCache = nullptr)"
  },
  {
    "label": "EventMatched()",
    "kind": "Method",
    "detail": "Function (InParameters .)",
    "insertText": "EventMatched(StartTime, EndTime, Depth)"
  },
  {
    "label": "InPayloadMatchedPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InPayloadMatchedPredicate(StartTime, EndTime, Depth, Payload)"
  },
  {
    "label": "InFoundPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InFoundPredicate(StartTime, EndTime, Depth, Payload)"
  },
  {
    "label": "InSearchPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InSearchPredicate(Context)"
  },
  {
    "label": "InFoundPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InFoundPredicate(Context.GetStartTimeFound(), Context.GetEndTimeFound(), Context.GetDepthFound(), Context.GetPayloadFound())"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (* InParameters . SearchHandle = InCache ->)",
    "insertText": "Write(Context.GetStartTimeFound(), Context.GetEndTimeFound(), Context.GetDepthFound(), Context.GetPayloadFound())"
  },
  {
    "label": "IsMatchFound()",
    "kind": "Method",
    "detail": "Function (} } return Context .)",
    "insertText": "IsMatchFound()"
  }
]