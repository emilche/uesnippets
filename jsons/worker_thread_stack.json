[
  {
    "label": "WorkerThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkerThread"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "WorkerThreadStack()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_WORKER_THREAD_STACK_H_ # define BASE_TASK_THREAD_POOL_WORKER_THREAD_STACK_H_ # include<stddef . h> # include<vector> # include \" base / base_export . h \" namespace base { namespace internal { class WorkerThread ; class BASE_EXPORT WorkerThreadStack { public :)",
    "insertText": "WorkerThreadStack()"
  },
  {
    "label": "WorkerThreadStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorkerThreadStack(const WorkerThreadStack&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WorkerThreadStack&)",
    "insertText": "operator(const WorkerThreadStack&)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(WorkerThread* worker)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (WorkerThread*)",
    "insertText": "Pop()"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (WorkerThread*)",
    "insertText": "Peek()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const WorkerThread* worker)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const WorkerThread* worker)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Size()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  }
]