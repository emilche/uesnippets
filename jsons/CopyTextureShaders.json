[
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "FRHIComputeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeShader"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TThreadGroupSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TThreadGroupSize"
  },
  {
    "label": "DispatchContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DispatchContext"
  },
  {
    "label": "FCopyTextureCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCopyTextureCS"
  },
  {
    "label": "TCopyResourceCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCopyResourceCS"
  },
  {
    "label": "DECLARE_EXPORTED_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GlobalShader . h \" # include \" Math / IntVector . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / AssertionMacros . h \" # include \" RHICommandList . h \" # include \" RHIDefinitions . h \" # include \" Serialization / MemoryLayout . h \" # include \" Shader . h \" # include \" ShaderCompilerCore . h \" # include \" ShaderCore . h \" # include \" ShaderParameterUtils . h \" # include \" ShaderParameters . h \" # include \" DataDrivenShaderPlatformInfo . h \" class FPointerTableBase ; class FRHIComputeShader ; enum class ECopyTextureResourceType { Texture2D = 0,Texture2DArray = 1,Texture3D = 2 } ; enum class ECopyTextureValueType { Float,Int32,Uint32 } ; namespace CopyTextureCS { template<ECopyTextureResourceType> struct TThreadGroupSize { int32 X = 8,Y = 8,Z = 1 ; } ; template<> struct TThreadGroupSize<ECopyTextureResourceType::Texture3D> { int32 X = 4,Y = 4,Z = 4 ; } ; struct DispatchContext { uint32 ThreadGroupSizeX = 0 u ; uint32 ThreadGroupSizeY = 0 u ; uint32 ThreadGroupSizeZ = 0 u ; ECopyTextureResourceType SrcType ; ECopyTextureResourceType DstType ; ECopyTextureValueType ValueType ; uint32 NumChannels ; } ; } class FCopyTextureCS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_TYPE_LAYOUT(FCopyTextureCS, RENDERCORE_API, NonVirtual)"
  },
  {
    "label": "FCopyTextureCS()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FCopyTextureCS()"
  },
  {
    "label": "FCopyTextureCS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCopyTextureCS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (DstOffsetParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"DstOffset\"), SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (SrcOffsetParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"SrcOffset\"), SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (DimensionsParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"Dimensions\"), SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (SrcResourceParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"SrcResource\"), SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (DstResourceParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"DstResource\"), SPF_Mandatory)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutEnvironment . CompilerFlags .)",
    "insertText": "Add(CFLAG_ForceBindful)"
  },
  {
    "label": "GetSrcResourceParam()",
    "kind": "Method",
    "detail": "Function (} } const FShaderResourceParameter&)",
    "insertText": "GetSrcResourceParam()"
  },
  {
    "label": "GetScratchShaderParameters()",
    "kind": "Method",
    "detail": "Function (FRHIBatchedShaderParameters& BatchedParameters = RHICmdList .)",
    "insertText": "GetScratchShaderParameters()"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, SrcOffsetParam, SrcOffset)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, DstOffsetParam, DstOffset)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, DimensionsParam, Dimensions)"
  },
  {
    "label": "SetBatchedShaderParameters()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetBatchedShaderParameters(RHICmdList.GetBoundComputeShader(), BatchedParameters)"
  },
  {
    "label": "DispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "DispatchComputeShader(FMath::DivideAndRoundUp(uint32(Dimensions.X), Context.ThreadGroupSizeX), FMath::DivideAndRoundUp(uint32(Dimensions.Y), Context.ThreadGroupSizeY), FMath::DivideAndRoundUp(uint32(Dimensions.Z), Context.ThreadGroupSizeZ))"
  },
  {
    "label": "SelectShader()",
    "kind": "Method",
    "detail": "Function (} TShaderRef<FCopyTextureCS>)",
    "insertText": "SelectShader(FGlobalShaderMap* GlobalShaderMap, ECopyTextureResourceType SrcType, ECopyTextureResourceType DstType, ECopyTextureValueType ValueType, CopyTextureCS::DispatchContext& OutContext)"
  },
  {
    "label": "SelectShader()",
    "kind": "Method",
    "detail": "Function (protected : template<ShaderType> TShaderRef<FCopyTextureCS>)",
    "insertText": "SelectShader(FGlobalShaderMap* GlobalShaderMap, CopyTextureCS::DispatchContext& OutContext)"
  },
  {
    "label": "SelectShader()",
    "kind": "Method",
    "detail": "Function (template<ECopyTextureResourceType SrcType> TShaderRef<FCopyTextureCS>)",
    "insertText": "SelectShader(FGlobalShaderMap* GlobalShaderMap, ECopyTextureResourceType DstType, ECopyTextureValueType ValueType, CopyTextureCS::DispatchContext& OutContext)"
  },
  {
    "label": "SelectShader()",
    "kind": "Method",
    "detail": "Function (template<ECopyTextureResourceType SrcType,ECopyTextureResourceType DstType> TShaderRef<FCopyTextureCS>)",
    "insertText": "SelectShader(FGlobalShaderMap* GlobalShaderMap, ECopyTextureValueType ValueType, CopyTextureCS::DispatchContext& OutContext)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, DstOffsetParam)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, SrcOffsetParam)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, DimensionsParam)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, SrcResourceParam)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, DstResourceParam)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<ECopyTextureResourceType SrcType,ECopyTextureResourceType DstType,ECopyTextureValueType ValueType,uint32 NumChannels> class TCopyResourceCS : public FCopyTextureCS {)",
    "insertText": "static_assert(NumChannels >= 1 && NumChannels <= 4, \"Only 1 to 4 channels are supported.\")"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(TCopyResourceCS, Global, RENDERCORE_API)"
  },
  {
    "label": "TCopyResourceCS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TCopyResourceCS()"
  },
  {
    "label": "TCopyResourceCS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCopyResourceCS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FCopyTextureCS(Initializer)"
  },
  {
    "label": "GetSourceFilename()",
    "kind": "Method",
    "detail": "Function (} uint32 ThreadGroupSizeX = CopyTextureCS::TThreadGroupSize<DstType>::X ; uint32 ThreadGroupSizeY = CopyTextureCS::TThreadGroupSize<DstType>::Y ; uint32 ThreadGroupSizeZ = CopyTextureCS::TThreadGroupSize<DstType>::Z ; const TCHAR*)",
    "insertText": "GetSourceFilename()"
  },
  {
    "label": "GetFunctionName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetFunctionName()"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"THREADGROUPSIZE_X\"), ThreadGroupSizeX)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"THREADGROUPSIZE_Y\"), ThreadGroupSizeY)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"THREADGROUPSIZE_Z\"), ThreadGroupSizeZ)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SRC_TYPE\"), uint32(SrcType))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"DST_TYPE\"), uint32(DstType))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"float2\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"float3\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 4 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"float4\"))"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (break ; } break ; case ECopyTextureValueType::Int32 :)",
    "insertText": "switch(NumChannels)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"int2\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"int3\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 4 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"int4\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"uint2\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"uint3\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 4 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"uint4\"))"
  },
  {
    "label": "GetDispatchContext()",
    "kind": "Method",
    "detail": "Function (break ; } break ; } } void)",
    "insertText": "GetDispatchContext(CopyTextureCS::DispatchContext& OutContext)"
  },
  {
    "label": "ShaderType()",
    "kind": "Method",
    "detail": "Function (TShaderRef<ShaderType> Shader = GlobalShaderMap -> GetShader<)",
    "insertText": "ShaderType()"
  },
  {
    "label": "GetDispatchContext()",
    "kind": "Method",
    "detail": "Function (Shader ->)",
    "insertText": "GetDispatchContext(OutContext)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  }
]