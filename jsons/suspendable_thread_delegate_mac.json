[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedSuspendThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedSuspendThread"
  },
  {
    "label": "ScopedSuspendThread()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_SUSPENDABLE_THREAD_DELEGATE_MAC_H_ # define BASE_PROFILER_SUSPENDABLE_THREAD_DELEGATE_MAC_H_ # include<mach / mach . h> # include<memory> # include<vector> # include \" base / base_export . h \" # include \" base / profiler / module_cache . h \" # include \" base / profiler / sampling_profiler_thread_token . h \" # include \" base / profiler / suspendable_thread_delegate . h \" # include \" base / threading / platform_thread . h \" namespace base { class BASE_EXPORT SuspendableThreadDelegateMac : public SuspendableThreadDelegate { public : class ScopedSuspendThread : public SuspendableThreadDelegate::ScopedSuspendThread { public :)",
    "insertText": "ScopedSuspendThread(mach_port_t thread_port)"
  },
  {
    "label": "ScopedSuspendThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedSuspendThread()"
  },
  {
    "label": "ScopedSuspendThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedSuspendThread(const ScopedSuspendThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedSuspendThread&)",
    "insertText": "operator(const ScopedSuspendThread&)"
  },
  {
    "label": "WasSuccessful()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasSuccessful()"
  },
  {
    "label": "SuspendableThreadDelegateMac()",
    "kind": "Method",
    "detail": "Function (private : mach_port_t thread_port_ ; } ;)",
    "insertText": "SuspendableThreadDelegateMac(SamplingProfilerThreadToken thread_token)"
  },
  {
    "label": "SuspendableThreadDelegateMac()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SuspendableThreadDelegateMac()"
  },
  {
    "label": "SuspendableThreadDelegateMac()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendableThreadDelegateMac(const SuspendableThreadDelegateMac&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SuspendableThreadDelegateMac&)",
    "insertText": "operator(const SuspendableThreadDelegateMac&)"
  },
  {
    "label": "CreateScopedSuspendThread()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SuspendableThreadDelegate::ScopedSuspendThread>)",
    "insertText": "CreateScopedSuspendThread()"
  },
  {
    "label": "GetThreadContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetThreadContext(RegisterContext* thread_context)"
  },
  {
    "label": "GetThreadId()",
    "kind": "Method",
    "detail": "Function (PlatformThreadId)",
    "insertText": "GetThreadId()"
  },
  {
    "label": "GetStackBaseAddress()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "GetStackBaseAddress()"
  },
  {
    "label": "CanCopyStack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyStack(uintptr_t stack_pointer)"
  },
  {
    "label": "GetRegistersToRewrite()",
    "kind": "Method",
    "detail": "Function (std::vector<uintptr_t*>)",
    "insertText": "GetRegistersToRewrite(RegisterContext* thread_context)"
  }
]