[
  {
    "label": "FGeometryCollectionResults",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionResults"
  },
  {
    "label": "FDirtyPropertiesManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDirtyPropertiesManager"
  },
  {
    "label": "FPullPhysicsData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPullPhysicsData"
  },
  {
    "label": "FDirtyProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyProxy"
  },
  {
    "label": "FDirtyProxiesBucket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyProxiesBucket"
  },
  {
    "label": "FDirtySet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDirtySet"
  },
  {
    "label": "FChaosMarshallingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosMarshallingManager"
  },
  {
    "label": "FPushPhysicsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPushPhysicsData"
  },
  {
    "label": "FDirtyProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Queue . h \" # include \" Chaos / Defines . h \" # include \" Chaos / ParticleDirtyFlags . h \" # include \" Chaos / Framework / PhysicsProxyBase . h \" # include \" Chaos / ParallelFor . h \" # include \" PhysicsProxy / SingleParticlePhysicsProxyFwd . h \" # include \" Chaos / SimCallbackObject . h \" # include \" Chaos / AsyncInitBodyHelper . h \" class FGeometryCollectionResults ; namespace Chaos { class FDirtyPropertiesManager ; class FPullPhysicsData ; struct FDirtyProxy { IPhysicsProxyBase* Proxy ; FDirtyChaosProperties PropertyData ; TArray<int32> ShapeDataIndices ;)",
    "insertText": "FDirtyProxy(IPhysicsProxyBase* InProxy) : Proxy(InProxy)"
  },
  {
    "label": "SetDirtyIdx()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDirtyIdx(int32 Idx)"
  },
  {
    "label": "SetDirtyIdx()",
    "kind": "Method",
    "detail": "Function (Proxy ->)",
    "insertText": "SetDirtyIdx(Idx)"
  },
  {
    "label": "AddShape()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddShape(int32 ShapeDataIdx)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShapeDataIndices .)",
    "insertText": "Add(ShapeDataIdx)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear(FDirtyPropertiesManager& Manager,int32 DataIdx,FShapeDirtyData* ShapesData)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (PropertyData .)",
    "insertText": "Clear(Manager,DataIdx)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (ShapesData [ ShapeDataIdx ] .)",
    "insertText": "Clear(Manager,ShapeDataIdx)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } } ; struct FDirtyProxiesBucket { TArray<FDirtyProxy> ProxiesData ; } ; class FDirtySet { public : void)",
    "insertText": "Add(IPhysicsProxyBase* Base)"
  },
  {
    "label": "DirtyProxyBuckets()",
    "kind": "Method",
    "detail": "Function (FDirtyProxiesBucket& Bucket =)",
    "insertText": "DirtyProxyBuckets(uint32)Base->GetType()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (+ + DirtyProxyBucketInfo .)",
    "insertText": "Num(uint32)Base->GetType()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (+ + DirtyProxyBucketInfo . TotalNum ; const int32 Idx = Bucket . ProxiesData .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Bucket . ProxiesData .)",
    "insertText": "Add(Base)"
  },
  {
    "label": "AddMultipleUnsafe()",
    "kind": "Method",
    "detail": "Function (} } template<TProxiesArray> void)",
    "insertText": "AddMultipleUnsafe(TProxiesArray& ProxiesArray)"
  },
  {
    "label": "DirtyProxyBuckets()",
    "kind": "Method",
    "detail": "Function (FDirtyProxiesBucket& Bucket =)",
    "insertText": "DirtyProxyBuckets(uint32)ProxiesArray[0]->GetType()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Bucket . ProxiesData .)",
    "insertText": "Append(ProxiesArray)"
  },
  {
    "label": "SetDirtyIdx()",
    "kind": "Method",
    "detail": "Function (Proxy ->)",
    "insertText": "SetDirtyIdx(Idx++)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} DirtyProxyBucketInfo .)",
    "insertText": "Num(uint32)ProxiesArray[0]->GetType()] += ProxiesArray.Num()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Remove(IPhysicsProxyBase* Base)"
  },
  {
    "label": "GetDirtyIdx()",
    "kind": "Method",
    "detail": "Function (const int32 Idx = Base ->)",
    "insertText": "GetDirtyIdx()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Bucket . ProxiesData .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - DirtyProxyBucketInfo . TotalNum ; } else)",
    "insertText": "if(Bucket.ProxiesData.IsValidIndex(Idx))"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (Bucket . ProxiesData .)",
    "insertText": "RemoveAtSwap(Idx)"
  },
  {
    "label": "ResetDirtyIdx()",
    "kind": "Method",
    "detail": "Function (- - DirtyProxyBucketInfo . TotalNum ; } Base ->)",
    "insertText": "ResetDirtyIdx()"
  },
  {
    "label": "RemoveIfNoShapesAreDirty()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveIfNoShapesAreDirty(IPhysicsProxyBase* Base)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FDirtyProxy& ProxyData = Bucket . ProxiesData [ Idx ] ;)",
    "insertText": "if(ProxyData.ShapeDataIndices.IsEmpty())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(Base)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetDirtyProxyBucketInfo()",
    "kind": "Method",
    "detail": "Function (} const FDirtyProxiesBucketInfo&)",
    "insertText": "GetDirtyProxyBucketInfo()"
  },
  {
    "label": "GetShapesDirtyData()",
    "kind": "Method",
    "detail": "Function (} FShapeDirtyData*)",
    "insertText": "GetShapesDirtyData()"
  },
  {
    "label": "GetDirtyProxyAt()",
    "kind": "Method",
    "detail": "Function (} FDirtyProxy&)",
    "insertText": "GetDirtyProxyAt(EPhysicsProxyType ProxyType, int32 Idx)"
  },
  {
    "label": "ParallelForEachProxy()",
    "kind": "Method",
    "detail": "Function (} template<Lambda> void)",
    "insertText": "ParallelForEachProxy(const Lambda& Func)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(TEXT(\"Chaos.PF\"),DirtyProxyBucketInfo.TotalNum,1, [this,&Func](int32 Idx) { int32 BucketIdx, InnerIdx; DirtyProxyBucketInfo.GetBucketIdx(Idx, BucketIdx, InnerIdx); Func(InnerIdx, DirtyProxyBuckets[BucketIdx].ProxiesData[InnerIdx]); })"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(DirtyProxyBucketInfo.TotalNum,[this,&Func](int32 Idx) { int32 BucketIdx, InnerIdx; DirtyProxyBucketInfo.GetBucketIdx(Idx, BucketIdx, InnerIdx); Func(InnerIdx, DirtyProxyBuckets[BucketIdx].ProxiesData[InnerIdx]); })"
  },
  {
    "label": "ForEachProxy()",
    "kind": "Method",
    "detail": "Function (} template<Lambda> void)",
    "insertText": "ForEachProxy(const Lambda& Func)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Idx = 0 ;)",
    "insertText": "for(FDirtyProxy& Dirty : DirtyProxyBuckets[BucketIdx].ProxiesData)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(Idx++, Dirty)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Idx = 0 ;)",
    "insertText": "for(const FDirtyProxy& Dirty : DirtyProxyBuckets[BucketIdx].ProxiesData)"
  },
  {
    "label": "AddShape()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "AddShape(IPhysicsProxyBase* Proxy,int32 ShapeIdx)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(Proxy)"
  },
  {
    "label": "DirtyProxyBuckets()",
    "kind": "Method",
    "detail": "Function (FDirtyProxy& Dirty =)",
    "insertText": "DirtyProxyBuckets(uint32)Proxy->GetType()].ProxiesData[(uint32)Proxy->GetDirtyIdx()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 ShapeDataIdx = ShapesData .)",
    "insertText": "Add(FShapeDirtyData(NewShapeIdx))"
  },
  {
    "label": "AddShape()",
    "kind": "Method",
    "detail": "Function (Dirty .)",
    "insertText": "AddShape(ShapeDataIdx)"
  },
  {
    "label": "SetNumDirtyShapes()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetNumDirtyShapes(IPhysicsProxyBase* Proxy,int32 NumShapes)"
  },
  {
    "label": "DirtyProxyBuckets()",
    "kind": "Method",
    "detail": "Function (FDirtyProxy& Dirty =)",
    "insertText": "DirtyProxyBuckets(uint32)Proxy->GetType()].ProxiesData[Proxy->GetDirtyIdx()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Dirty . ShapeDataIndices .)",
    "insertText": "SetNum(NumShapes)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int32 NewShapeIdx = Dirty.ShapeDataIndices.Num(); NewShapeIdx < NumShapes; ++NewShapeIdx)"
  },
  {
    "label": "DirtyProxyBuckets()",
    "kind": "Method",
    "detail": "Function (} } } private : FDirtyProxiesBucketInfo DirtyProxyBucketInfo ; FDirtyProxiesBucket)",
    "insertText": "DirtyProxyBuckets(uint32)"
  },
  {
    "label": "ResetForHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetForHistory()"
  },
  {
    "label": "ResetDirtyProxiesBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDirtyProxiesBuffer()"
  },
  {
    "label": "CopySubstepData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySubstepData(const FPushPhysicsData& FirstStepData)"
  },
  {
    "label": "FChaosMarshallingManager()",
    "kind": "Method",
    "detail": "Function (} ; class FChaosMarshallingManager { public :)",
    "insertText": "FChaosMarshallingManager()"
  },
  {
    "label": "GetProducerData_External()",
    "kind": "Method",
    "detail": "Function (FPushPhysicsData*)",
    "insertText": "GetProducerData_External()"
  },
  {
    "label": "UE_CHAOS_ASYNC_INITBODY_WRITESCOPELOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_ASYNC_INITBODY_WRITESCOPELOCK(MarshallingManagerLock)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ProducerData -> DirtyProxiesDataBuffer .)",
    "insertText": "Add(ProxyBaseIn)"
  },
  {
    "label": "RemoveDirtyProxy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveDirtyProxy(IPhysicsProxyBase* ProxyBaseIn)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ProducerData -> DirtyProxiesDataBuffer .)",
    "insertText": "Remove(ProxyBaseIn)"
  },
  {
    "label": "RemoveDirtyProxyIfNoShapesAreDirty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveDirtyProxyIfNoShapesAreDirty(IPhysicsProxyBase* ProxyBaseIn)"
  },
  {
    "label": "RemoveIfNoShapesAreDirty()",
    "kind": "Method",
    "detail": "Function (ProducerData -> DirtyProxiesDataBuffer .)",
    "insertText": "RemoveIfNoShapesAreDirty(ProxyBaseIn)"
  },
  {
    "label": "GetDirtyProxyBucketInfo_External()",
    "kind": "Method",
    "detail": "Function (} const FDirtyProxiesBucketInfo&)",
    "insertText": "GetDirtyProxyBucketInfo_External()"
  },
  {
    "label": "GetDirtyProxyBucketInfoNum_External()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetDirtyProxyBucketInfoNum_External(EPhysicsProxyType Type)"
  },
  {
    "label": "UE_CHAOS_ASYNC_INITBODY_READSCOPELOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_ASYNC_INITBODY_READSCOPELOCK(MarshallingManagerLock)"
  },
  {
    "label": "AddDirtyProxiesUnsafe()",
    "kind": "Method",
    "detail": "Function (} template<TProxiesArray> void)",
    "insertText": "AddDirtyProxiesUnsafe(TProxiesArray& ProxiesArray)"
  },
  {
    "label": "AddMultipleUnsafe()",
    "kind": "Method",
    "detail": "Function (ProducerData -> DirtyProxiesDataBuffer .)",
    "insertText": "AddMultipleUnsafe(ProxiesArray)"
  },
  {
    "label": "AddDirtyProxyShape()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDirtyProxyShape(IPhysicsProxyBase* ProxyBaseIn, int32 ShapeIdx)"
  },
  {
    "label": "AddShape()",
    "kind": "Method",
    "detail": "Function (ProducerData -> DirtyProxiesDataBuffer .)",
    "insertText": "AddShape(ProxyBaseIn, ShapeIdx)"
  },
  {
    "label": "SetNumDirtyShapes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumDirtyShapes(IPhysicsProxyBase* Proxy, int32 NumShapes)"
  },
  {
    "label": "SetNumDirtyShapes()",
    "kind": "Method",
    "detail": "Function (ProducerData -> DirtyProxiesDataBuffer .)",
    "insertText": "SetNumDirtyShapes(Proxy, NumShapes)"
  },
  {
    "label": "RegisterSimCallbackObject_External()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterSimCallbackObject_External(ISimCallbackObject* SimCallbackObject)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ProducerData -> SimCallbackObjectsToAdd .)",
    "insertText": "Add(SimCallbackObject)"
  },
  {
    "label": "RegisterSimCommand_External()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterSimCommand_External(FSimCallbackCommandObject* SimCommand)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ProducerData -> SimCommands .)",
    "insertText": "Add(SimCommand)"
  },
  {
    "label": "UnregisterSimCallbackObject_External()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterSimCallbackObject_External(ISimCallbackObject* SimCallbackObject)"
  },
  {
    "label": "AddSimCallbackInputData_External()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSimCallbackInputData_External(ISimCallbackObject* SimCallbackObject, FSimCallbackInput* InputData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ProducerData -> SimCallbackInputs .)",
    "insertText": "Add(FSimCallbackInputAndObject{ SimCallbackObject, InputData })"
  },
  {
    "label": "Step_External()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Step_External(FReal ExternalDT, const int32 NumSteps = 1, bool bSolverSubstepped = false)"
  },
  {
    "label": "StepInternalTime_External()",
    "kind": "Method",
    "detail": "Function (FPushPhysicsData*)",
    "insertText": "StepInternalTime_External()"
  },
  {
    "label": "FreeData_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeData_Internal(FPushPhysicsData* PushData)"
  },
  {
    "label": "FreeDataToHistory_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDataToHistory_Internal(FPushPhysicsData* PushData)"
  },
  {
    "label": "FreePullData_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreePullData_External(FPullPhysicsData* PullData)"
  },
  {
    "label": "GetExternalTimestamp_External()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetExternalTimestamp_External()"
  },
  {
    "label": "GetCurrentPullData_Internal()",
    "kind": "Method",
    "detail": "Function (Delay = InDelay ; } FPullPhysicsData*)",
    "insertText": "GetCurrentPullData_Internal()"
  },
  {
    "label": "PopPullData_External()",
    "kind": "Method",
    "detail": "Function (FPullPhysicsData*)",
    "insertText": "PopPullData_External()"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (FPullPhysicsData* Result = nullptr ; PullDataQueue .)",
    "insertText": "Dequeue(Result)"
  },
  {
    "label": "StealHistory_Internal()",
    "kind": "Method",
    "detail": "Function (TArray<FPushPhysicsData*>)",
    "insertText": "StealHistory_Internal(int32 NumFrames)"
  },
  {
    "label": "GetNumHistory_Internal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumHistory_Internal()"
  },
  {
    "label": "GetMarshallingManagerLock()",
    "kind": "Method",
    "detail": "Function (} FRWLock&)",
    "insertText": "GetMarshallingManagerLock()"
  },
  {
    "label": "PreparePullData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreparePullData()"
  }
]