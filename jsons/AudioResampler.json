[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FResamplingParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResamplingParameters"
  },
  {
    "label": "FResamplerResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResamplerResults"
  },
  {
    "label": "FResamplerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResamplerImpl"
  },
  {
    "label": "FResampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResampler"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Logging / LogMacros . h \" # include \" Templates / UniquePtr . h \" # define AUDIO_BUFFER_ALIGNMENT 1 6)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAudioResampler, Warning, All)"
  },
  {
    "label": "FResamplerResults()",
    "kind": "Method",
    "detail": "Function (namespace Audio { namespace VectorOps { using FAlignedFloatBuffer = TArray<float,TAlignedHeapAllocator<AUDIO_BUFFER_ALIGNMENT>> ; } enum class EResamplingMethod : uint8 { BestSinc = 0,ModerateSinc = 1,FastSinc = 2,ZeroOrderHold = 3,Linear = 4 } ; struct FResamplingParameters { EResamplingMethod ResamplerMethod ; int32 NumChannels ; float SourceSampleRate ; float DestinationSampleRate ; VectorOps::FAlignedFloatBuffer& InputBuffer ; } ; struct FResamplerResults { VectorOps::FAlignedFloatBuffer* OutBuffer ; float ResultingSampleRate ; int32 InputFramesUsed ; int32 OutputFramesGenerated ;)",
    "insertText": "FResamplerResults() : OutBuffer(nullptr) , ResultingSampleRate(0.0f) , InputFramesUsed(0) , OutputFramesGenerated(0)"
  },
  {
    "label": "GetOutputBufferSize()",
    "kind": "Method",
    "detail": "Function (} } ; int32)",
    "insertText": "GetOutputBufferSize(const FResamplingParameters& InParameters)"
  },
  {
    "label": "Resample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Resample(const FResamplingParameters& InParameters, FResamplerResults& OutData)"
  },
  {
    "label": "FResampler()",
    "kind": "Method",
    "detail": "Function (class FResamplerImpl ; class FResampler { public :)",
    "insertText": "FResampler()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(EResamplingMethod ResamplingMethod, float StartingSampleRateRatio, int32 InNumChannels)"
  },
  {
    "label": "SetSampleRateRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSampleRateRatio(float InRatio)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ProcessAudio(float* InAudioBuffer, int32 InSamples, bool bEndOfInput, float* OutAudioBuffer, int32 MaxOutputFrames, int32& OutNumFrames)"
  },
  {
    "label": "CreateImpl()",
    "kind": "Method",
    "detail": "Function (private : TUniquePtr<FResamplerImpl>)",
    "insertText": "CreateImpl()"
  }
]