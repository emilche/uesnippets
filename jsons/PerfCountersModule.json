[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FHistogram",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHistogram"
  },
  {
    "label": "CharType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharType"
  },
  {
    "label": "PrintPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrintPolicy"
  },
  {
    "label": "TJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TJsonWriter"
  },
  {
    "label": "TPrettyJsonPrintPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPrettyJsonPrintPolicy"
  },
  {
    "label": "IPerfCounters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPerfCounters"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "FJsonVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJsonVariant"
  },
  {
    "label": "Histograms",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Histograms"
  },
  {
    "label": "IPerfCountersModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPerfCountersModule"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Modules / ModuleInterface . h \" # include \" Modules / ModuleManager . h \" # include \" Templates / SharedPointer . h \" class FName ; class FOutputDevice ; struct FHistogram ; template<class CharType,class PrintPolicy> class TJsonWriter ; template<class CharType> struct TPrettyJsonPrintPolicy ; template<class CharType> struct TPrettyJsonPrintPolicy ; typedef TSharedRef<TJsonWriter<TCHAR,TPrettyJsonPrintPolicy<TCHAR>>> FPrettyJsonWriter ; struct FHistogram ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FProduceJsonCounterValue, const FPrettyJsonWriter&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FPerfCounterExecCommandCallback, const FString& , FOutputDevice&)"
  },
  {
    "label": "Transient()",
    "kind": "Method",
    "detail": "Function (class IPerfCounters { public : enum Flags : uint32 {)",
    "insertText": "Transient(1 << 0)"
  },
  {
    "label": "FJsonVariant()",
    "kind": "Method",
    "detail": "Function (struct FJsonVariant { enum { Null,String,Number,Callback } Format ; FString StringValue ; double NumberValue ; FProduceJsonCounterValue CallbackValue ; uint32 Flags ;)",
    "insertText": "FJsonVariant() : Format(Null), NumberValue(0)"
  },
  {
    "label": "IPerfCounters()",
    "kind": "Method",
    "detail": "Function (} } ; struct Histograms { const FName FrameTime ; const FName FrameTimePeriodic ; const FName FrameTimeWithoutSleep ; const FName ServerReplicateActorsTime ; const FName SleepTime ; const FName ZeroLoadFrameTime ; } ; typedef TMap<FName,FHistogram> TPerformanceHistogramMap ; ~)",
    "insertText": "IPerfCounters()"
  },
  {
    "label": "GetInstanceName()",
    "kind": "Method",
    "detail": "Function (} ; const FString&)",
    "insertText": "GetInstanceName()"
  },
  {
    "label": "GetNumber()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetNumber(const FString& Name, double DefaultValue = 0.0)"
  },
  {
    "label": "SetNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumber(const FString& Name, double Value, uint32 Flags = 0)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetString(const FString& Name, const FString& Value, uint32 Flags = 0)"
  },
  {
    "label": "SetJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJson(const FString& Name, const FProduceJsonCounterValue& Callback, uint32 Flags = 0)"
  },
  {
    "label": "OnPerfCounterExecCommand()",
    "kind": "Method",
    "detail": "Function (FPerfCounterExecCommandCallback&)",
    "insertText": "OnPerfCounterExecCommand()"
  },
  {
    "label": "GetAllCounters()",
    "kind": "Method",
    "detail": "Function (const TMap<FString,FJsonVariant>&)",
    "insertText": "GetAllCounters()"
  },
  {
    "label": "GetAllCountersAsJson()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAllCountersAsJson()"
  },
  {
    "label": "ResetStatsForNextPeriod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStatsForNextPeriod()"
  },
  {
    "label": "PerformanceHistograms()",
    "kind": "Method",
    "detail": "Function (TPerformanceHistogramMap&)",
    "insertText": "PerformanceHistograms()"
  },
  {
    "label": "StartMachineLoadTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartMachineLoadTracking()"
  },
  {
    "label": "StartMachineLoadTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartMachineLoadTracking(double TickRate, const TArray<double>& FrameTimeHistogramBucketsMs)"
  },
  {
    "label": "StopMachineLoadTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopMachineLoadTracking()"
  },
  {
    "label": "ReportUnplayableCondition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReportUnplayableCondition(const FString& ConditionDescription)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "Get(const FString& Name, int32 Val = 0)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Get(const FString& Name, uint32 Val = 0)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Get(const FString& Name, float Val = 0.0f)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Get(const FString& Name, double Val = 0.0)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Increment(const FString & Name, int32 Add = 1, int32 DefaultValue = 0, uint32 Flags = IPerfCounters::Flags::Transient)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (int32 CurrentValue =)",
    "insertText": "Get(Name, DefaultValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Name, CurrentValue, Flags)"
  },
  {
    "label": "SetNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumber(Name, (double)Val, Flags)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const FString& Name, uint32 Val, uint32 Flags = 0)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const FString& Name, float Val, uint32 Flags = 0)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const FString& Name, double Val, uint32 Flags = 0)"
  },
  {
    "label": "SetNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumber(Name, Val, Flags)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const FString& Name, int64 Val, uint32 Flags = 0)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetString(Name, FString::Printf(TEXT(\"%lld\"), Val), Flags)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const FString& Name, uint64 Val, uint32 Flags = 0)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetString(Name, FString::Printf(TEXT(\"%llu\"), Val), Flags)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const FString& Name, const FString& Val, uint32 Flags = 0)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetString(Name, Val, Flags)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const FString& Name, const FProduceJsonCounterValue& Callback, uint32 Flags = 0)"
  },
  {
    "label": "SetJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJson(Name, Callback, Flags)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } ; class IPerfCountersModule : public IModuleInterface { public : IPerfCountersModule&)",
    "insertText": "Get()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "GetHTTPStatsPort()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetHTTPStatsPort()"
  },
  {
    "label": "GetPerformanceCounters()",
    "kind": "Method",
    "detail": "Function (IPerfCounters*)",
    "insertText": "GetPerformanceCounters()"
  },
  {
    "label": "CreatePerformanceCounters()",
    "kind": "Method",
    "detail": "Function (IPerfCounters*)",
    "insertText": "CreatePerformanceCounters(const FString& UniqueInstanceId = TEXT(\"\"))"
  }
]