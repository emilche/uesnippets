[
  {
    "label": "_IterMaybeQualified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_IterMaybeQualified"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_ITERATOR_CONCEPT_H # define _LIBCPP___ALGORITHM_RANGES_ITERATOR_CONCEPT_H # include<__config> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__get_iterator_concept()",
    "kind": "Method",
    "detail": "Function (template<class _IterMaybeQualified> consteval auto)",
    "insertText": "__get_iterator_concept()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (using _Iter = __uncvref_t<_IterMaybeQualified> ; if)",
    "insertText": "constexpr(contiguous_iterator<_Iter>) return contiguous_iterator_tag()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter> using __iterator_concept =)",
    "insertText": "decltype(__get_iterator_concept<_Iter>())"
  }
]