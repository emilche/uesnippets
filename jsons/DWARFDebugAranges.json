[
  {
    "label": "DWARFContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWARFContext"
  },
  {
    "label": "DWARFDebugAranges",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWARFDebugAranges"
  },
  {
    "label": "Range",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Range"
  },
  {
    "label": "RangeEndpoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RangeEndpoint"
  },
  {
    "label": "generate()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_LIB_DEBUGINFO_DWARFDEBUGARANGES_H # define LLVM_LIB_DEBUGINFO_DWARFDEBUGARANGES_H # include \" llvm / ADT / DenseSet . h \" # include \" llvm / Support / DataExtractor . h \" # include<vector> namespace llvm { class DWARFContext ; class DWARFDebugAranges { public : void)",
    "insertText": "generate(DWARFContext *CTX)"
  },
  {
    "label": "findAddress()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "findAddress(uint64_t Address)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "clear()"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extract(DataExtractor DebugArangesData)"
  },
  {
    "label": "appendRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "appendRange(uint32_t CUOffset, uint64_t LowPC, uint64_t HighPC)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct()"
  },
  {
    "label": "Range()",
    "kind": "Method",
    "detail": "Function (struct Range {)",
    "insertText": "Range(uint64_t LowPC = -1ULL, uint64_t HighPC = -1ULL, uint32_t CUOffset = -1U) : LowPC(LowPC), Length(HighPC - LowPC), CUOffset(CUOffset)"
  },
  {
    "label": "setHighPC()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setHighPC(uint64_t HighPC)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Range &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const RangeEndpoint &Other)"
  }
]