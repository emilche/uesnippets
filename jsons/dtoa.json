[
  {
    "label": "RAPIDJSON_DIAG_OFF()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_DTOA_ # define RAPIDJSON_DTOA_ # include \" itoa . h \" # include \" diyfp . h \" # include \" ieee754 . h \" RAPIDJSON_NAMESPACE_BEGIN namespace internal { # ifdef __GNUC__ RAPIDJSON_DIAG_PUSH)",
    "insertText": "RAPIDJSON_DIAG_OFF(effc++) RAPIDJSON_DIAG_OFF(array-bounds) #endif inline void GrisuRound(char* buffer, int len, uint64_t delta, uint64_t rest, uint64_t ten_kappa, uint64_t wp_w)"
  },
  {
    "label": "CountDecimalDigit32()",
    "kind": "Method",
    "detail": "Function (buffer [ len - 1 ] - - ; rest + = ten_kappa ; } } int)",
    "insertText": "CountDecimalDigit32(uint32_t n)"
  },
  {
    "label": "one()",
    "kind": "Method",
    "detail": "Function (const uint64_t kPow10 [ ] = { 1 ULL,1 0 ULL,1 0 0 ULL,1 0 0 0 ULL,1 0 0 0 0 ULL,1 0 0 0 0 0 ULL,1 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ULL,1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ULL } ; const DiyFp)",
    "insertText": "one(uint64_t(1) << -Mp.e, Mp.e)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (const DiyFp wp_w = Mp - W ; uint32_t p1 = static_cast<)",
    "insertText": "uint32_t(Mp.f >> -one.e)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (uint64_t p2 = Mp .)",
    "insertText": "f(one.f - 1)"
  },
  {
    "label": "CountDecimalDigit32()",
    "kind": "Method",
    "detail": "Function (int kappa =)",
    "insertText": "CountDecimalDigit32(p1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (* len = 0 ;)",
    "insertText": "while(kappa > 0)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (uint32_t d = 0 ;)",
    "insertText": "switch(kappa)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (kappa - - ; uint64_t)",
    "insertText": "tmp(static_cast<uint64_t>(p1) << -one.e)"
  },
  {
    "label": "GrisuRound()",
    "kind": "Method",
    "detail": "Function (* K + = kappa ;)",
    "insertText": "GrisuRound(buffer, *len, delta, tmp, kPow10[kappa] << -one.e, wp_w.f)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (p2* = 1 0 ; delta* = 1 0 ; char d = static_cast<)",
    "insertText": "char(p2 >> -one.e)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (p2& = one . f - 1 ; kappa - - ;)",
    "insertText": "if(p2 < delta)"
  },
  {
    "label": "GrisuRound()",
    "kind": "Method",
    "detail": "Function (* K + = kappa ; int index = - kappa ;)",
    "insertText": "GrisuRound(buffer, *len, delta, p2, one.f, wp_w.f * (index < 20 ? kPow10[index] : 0))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (const DiyFp)",
    "insertText": "v(value)"
  },
  {
    "label": "NormalizedBoundaries()",
    "kind": "Method",
    "detail": "Function (DiyFp w_m,w_p ; v .)",
    "insertText": "NormalizedBoundaries(&w_m, &w_p)"
  },
  {
    "label": "GetCachedPower()",
    "kind": "Method",
    "detail": "Function (const DiyFp c_mk =)",
    "insertText": "GetCachedPower(w_p.e, K)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (const DiyFp W = v .)",
    "insertText": "Normalize()"
  },
  {
    "label": "DigitGen()",
    "kind": "Method",
    "detail": "Function (DiyFp Wp = w_p* c_mk ; DiyFp Wm = w_m* c_mk ; Wm . f + + ; Wp . f - - ;)",
    "insertText": "DigitGen(W, Wp, Wp.f - Wm.f, buffer, length, K)"
  },
  {
    "label": "WriteExponent()",
    "kind": "Method",
    "detail": "Function (} char*)",
    "insertText": "WriteExponent(int K, char* buffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* buffer + + = ' - ' ; K = - K ; })",
    "insertText": "if(K >= 100)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (* buffer + + = static_cast<)",
    "insertText": "char('0' + static_cast<char>(K / 100))"
  },
  {
    "label": "GetDigitsLut()",
    "kind": "Method",
    "detail": "Function (K % = 1 0 0 ; const char* d =)",
    "insertText": "GetDigitsLut()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* buffer + + = d [ 0 ] ;* buffer + + = d [ 1 ] ; } else)",
    "insertText": "if(K >= 10)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (* buffer + + = d [ 0 ] ;* buffer + + = d [ 1 ] ; } else* buffer + + = static_cast<)",
    "insertText": "char('0' + static_cast<char>(K))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int kk = length + k ;)",
    "insertText": "if(0 <= k && kk <= 21)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (buffer [ kk ] = ' . ' ; buffer [ kk + 1 ] = ' 0 ' ; return& buffer [ kk + 2 ] ; } else)",
    "insertText": "if(0 < kk && kk <= 21)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(&buffer[kk + 1], &buffer[kk], static_cast<size_t>(length - kk))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (buffer [ kk ] = ' . ' ;)",
    "insertText": "if(0 > k + maxDecimalPlaces)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (const int offset = 2 - kk ;)",
    "insertText": "memmove(&buffer[offset], &buffer[0], static_cast<size_t>(length))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (buffer [ 0 ] = ' 0 ' ; buffer [ 1 ] = ' . ' ;)",
    "insertText": "for(int i = 2; i < offset; i++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (buffer [ 0 ] = ' 0 ' ; buffer [ 1 ] = ' . ' ; buffer [ 2 ] = ' 0 ' ; return& buffer [ 3 ] ; } else)",
    "insertText": "if(length == 1)"
  },
  {
    "label": "WriteExponent()",
    "kind": "Method",
    "detail": "Function (buffer [ 1 ] = ' e ' ; return)",
    "insertText": "WriteExponent(kk - 1, &buffer[2])"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "memmove(&buffer[2], &buffer[1], static_cast<size_t>(length - 1))"
  },
  {
    "label": "WriteExponent()",
    "kind": "Method",
    "detail": "Function (buffer [ 1 ] = ' . ' ; buffer [ length + 1 ] = ' e ' ; return)",
    "insertText": "WriteExponent(kk - 1, &buffer[0 + length + 2])"
  },
  {
    "label": "dtoa()",
    "kind": "Method",
    "detail": "Function (} } char*)",
    "insertText": "dtoa(double value, char* buffer, int maxDecimalPlaces = 324)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(maxDecimalPlaces >= 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (buffer [ 0 ] = ' 0 ' ; buffer [ 1 ] = ' . ' ; buffer [ 2 ] = ' 0 ' ; return& buffer [ 3 ] ; } else {)",
    "insertText": "if(value < 0)"
  },
  {
    "label": "Grisu2()",
    "kind": "Method",
    "detail": "Function (* buffer + + = ' - ' ; value = - value ; } int length,K ;)",
    "insertText": "Grisu2(value, buffer, &length, &K)"
  }
]