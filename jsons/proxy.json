[
  {
    "label": "ScopedTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedTrace"
  },
  {
    "label": "ReturnType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnType"
  },
  {
    "label": "MethodCall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MethodCall"
  },
  {
    "label": "ConstMethodCall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstMethodCall"
  },
  {
    "label": "INTERNAL_CLASS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INTERNAL_CLASS"
  },
  {
    "label": "class_name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "class_name"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_PROXY_H_ # define PC_PROXY_H_ # include<stddef . h> # include<memory> # include<string> # include<tuple> # include<type_traits> # include<utility> # include \" absl / types / optional . h \" # include \" api / scoped_refptr . h \" # include \" api / task_queue / task_queue_base . h \" # include \" rtc_base / event . h \" # include \" rtc_base / string_utils . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / thread . h \" # if !)",
    "insertText": "defined(RTC_DISABLE_PROXY_TRACE_EVENTS) && !defined(WEBRTC_CHROMIUM_BUILD)"
  },
  {
    "label": "ScopedTrace()",
    "kind": "Method",
    "detail": "Function (namespace proxy_internal { class ScopedTrace { public :)",
    "insertText": "ScopedTrace(const char* class_and_method_name)"
  },
  {
    "label": "ScopedTrace()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedTrace()"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (private : [ [ maybe_unused ] ] const char* const class_and_method_name_ ; } ; } template<R> class ReturnType { public : template<C,M,. . . Args> void)",
    "insertText": "Invoke(C* c, M m, Args&&... args)"
  },
  {
    "label": "r_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "r_(c->*m)(std::forward<Args>(args)...)"
  },
  {
    "label": "moved_result()",
    "kind": "Method",
    "detail": "Function (} R)",
    "insertText": "moved_result()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<C,R,. . . Args> class MethodCall { public : typedef)",
    "insertText": "R(C::*Method)(Args...)"
  },
  {
    "label": "MethodCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MethodCall(C* c, Method m, Args&&... args) : c_(c), m_(m), args_(std::forward_as_tuple(std::forward<Args>(args)...))"
  },
  {
    "label": "Marshal()",
    "kind": "Method",
    "detail": "Function (} R)",
    "insertText": "Marshal(rtc::Thread* t)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invoke(std::index_sequence_for<Args...>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!event_.has_value())"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (event_ .)",
    "insertText": "emplace()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (} t ->)",
    "insertText": "PostTask([this] { Invoke(std::index_sequence_for<Args...>()); RTC_DCHECK(event_.has_value()); event_.value().Set(); })"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(event_.has_value())"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (event_ .)",
    "insertText": "value().Wait(rtc::Event::kForever)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (} private : template<size_t . . . Is> void)",
    "insertText": "Invoke(std::index_sequence<Is...>)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (r_ .)",
    "insertText": "Invoke(c_, m_, std::move(std::get<Is>(args_))...)"
  },
  {
    "label": "ConstMethodCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstMethodCall(const C* c, Method m, Args&&... args) : c_(c), m_(m), args_(std::forward_as_tuple(std::forward<Args>(args)...))"
  },
  {
    "label": "PROXY_STRINGIZE_IMPL()",
    "kind": "Method",
    "detail": "Function (} const C* c_ ; Method m_ ; ReturnType<R> r_ ; std::tuple<Args&& . . .> args_ ; absl::optional<rtc::Event> event_ ; } ; # define)",
    "insertText": "PROXY_STRINGIZE_IMPL(x) #x #define PROXY_STRINGIZE(x) PROXY_STRINGIZE_IMPL(x) #define PROXY_MAP_BOILERPLATE(class_name)"
  },
  {
    "label": "internal()",
    "kind": "Method",
    "detail": "Function (\\ typedef class_name # # ProxyWithInternal<class_name # # Interface> \\ class_name # # Proxy ; \\ template<class INTERNAL_CLASS> \\ class class_name # # ProxyWithInternal : public class_name # # Interface { \\ protected : \\ char proxy_name_ [ ] = # class_name \" Proxy \" ; \\ typedef class_name # # Interface C ; \\ \\ public : \\ const INTERNAL_CLASS*)",
    "insertText": "internal()"
  },
  {
    "label": "END_PROXY_MAP()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "END_PROXY_MAP(class_name)"
  },
  {
    "label": "PRIMARY_PROXY_MAP_BOILERPLATE()",
    "kind": "Method",
    "detail": "Function (\\ template<class INTERNAL_CLASS> \\ char class_name # # ProxyWithInternal<INTERNAL_CLASS>::proxy_name_ [ ] ; # define)",
    "insertText": "PRIMARY_PROXY_MAP_BOILERPLATE(class_name) \\ protected: \\ class_name##ProxyWithInternal(rtc::Thread* primary_thread, \\ rtc::scoped_refptr<INTERNAL_CLASS> c) \\ : primary_thread_(primary_thread), c_(std::move(c))"
  },
  {
    "label": "SECONDARY_PROXY_MAP_BOILERPLATE()",
    "kind": "Method",
    "detail": "Function (} \\ \\ private : \\ rtc::Thread* primary_thread_ ; # define)",
    "insertText": "SECONDARY_PROXY_MAP_BOILERPLATE(class_name) \\ protected: \\ class_name##ProxyWithInternal(rtc::Thread* primary_thread, \\ rtc::Thread* secondary_thread, \\ rtc::scoped_refptr<INTERNAL_CLASS> c) \\ : primary_thread_(primary_thread), \\ secondary_thread_(secondary_thread), \\ c_(std::move(c))"
  },
  {
    "label": "REFCOUNTED_PROXY_MAP_BOILERPLATE()",
    "kind": "Method",
    "detail": "Function (} \\ \\ private : \\ rtc::Thread* primary_thread_ ; \\ rtc::Thread* secondary_thread_ ; # define)",
    "insertText": "REFCOUNTED_PROXY_MAP_BOILERPLATE(class_name) \\ protected: \\ ~class_name##ProxyWithInternal()"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (\\ MethodCall<class_name # # ProxyWithInternal,void>)",
    "insertText": "call(\\ this, &class_name##ProxyWithInternal::DestroyInternal)"
  },
  {
    "label": "Marshal()",
    "kind": "Method",
    "detail": "Function (\\ call .)",
    "insertText": "Marshal(destructor_thread())"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ private : \\ const INTERNAL_CLASS*)",
    "insertText": "c()"
  },
  {
    "label": "DestroyInternal()",
    "kind": "Method",
    "detail": "Function (} \\ void)",
    "insertText": "DestroyInternal()"
  },
  {
    "label": "OWNED_PROXY_MAP_BOILERPLATE()",
    "kind": "Method",
    "detail": "Function (c_ = nullptr ; } \\ rtc::scoped_refptr<INTERNAL_CLASS> c_ ; # define)",
    "insertText": "OWNED_PROXY_MAP_BOILERPLATE(class_name) \\ public: \\ ~class_name##ProxyWithInternal()"
  },
  {
    "label": "BEGIN_PRIMARY_PROXY_MAP()",
    "kind": "Method",
    "detail": "Function (delete c_ ; } \\ INTERNAL_CLASS* c_ ; # define)",
    "insertText": "BEGIN_PRIMARY_PROXY_MAP(class_name) \\ PROXY_MAP_BOILERPLATE(class_name) \\ PRIMARY_PROXY_MAP_BOILERPLATE(class_name) \\ REFCOUNTED_PROXY_MAP_BOILERPLATE(class_name) \\ public: \\ static rtc::scoped_refptr<class_name##ProxyWithInternal> Create( \\ rtc::Thread* primary_thread, rtc::scoped_refptr<INTERNAL_CLASS> c)"
  },
  {
    "label": "ProxyWithInternal()",
    "kind": "Method",
    "detail": "Function (\\ return rtc::make_ref_counted<class_name # #)",
    "insertText": "ProxyWithInternal(\\ primary_thread, std::move(c))"
  },
  {
    "label": "BEGIN_PROXY_MAP()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "BEGIN_PROXY_MAP(class_name) \\ PROXY_MAP_BOILERPLATE(class_name) \\ SECONDARY_PROXY_MAP_BOILERPLATE(class_name) \\ REFCOUNTED_PROXY_MAP_BOILERPLATE(class_name) \\ public: \\ static rtc::scoped_refptr<class_name##ProxyWithInternal> Create( \\ rtc::Thread* primary_thread, rtc::Thread* secondary_thread, \\ rtc::scoped_refptr<INTERNAL_CLASS> c)"
  },
  {
    "label": "ProxyWithInternal()",
    "kind": "Method",
    "detail": "Function (\\ return rtc::make_ref_counted<class_name # #)",
    "insertText": "ProxyWithInternal(\\ primary_thread, secondary_thread, std::move(c))"
  },
  {
    "label": "PROXY_PRIMARY_THREAD_DESTRUCTOR()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_PRIMARY_THREAD_DESTRUCTOR() \\ private: \\ rtc::Thread* destructor_thread()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #else #define TRACE_BOILERPLATE(method) \\ static constexpr auto class_and_method_name = \\ rtc::MakeCompileTimeString(proxy_name_) \\ .Concat(rtc::MakeCompileTimeString(\"::\")) \\ .Concat(rtc::MakeCompileTimeString(#method))"
  },
  {
    "label": "scoped_trace()",
    "kind": "Method",
    "detail": "Function (\\ proxy_internal::ScopedTrace)",
    "insertText": "scoped_trace(class_and_method_name.string) #endif #define PROXY_METHOD0(r, method) \\ r method()"
  },
  {
    "label": "TRACE_BOILERPLATE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_BOILERPLATE(method)"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (\\ MethodCall<C,r>)",
    "insertText": "call(c(), &C::method)"
  },
  {
    "label": "Marshal()",
    "kind": "Method",
    "detail": "Function (\\ return call .)",
    "insertText": "Marshal(primary_thread_)"
  },
  {
    "label": "PROXY_CONSTMETHOD0()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_CONSTMETHOD0(r, method) \\ r method()"
  },
  {
    "label": "PROXY_METHOD1()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_METHOD1(r, method, t1) \\ r method(t1 a1)"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (\\ MethodCall<C,r,t1>)",
    "insertText": "call(c(), &C::method, std::move(a1))"
  },
  {
    "label": "PROXY_CONSTMETHOD1()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_CONSTMETHOD1(r, method, t1) \\ r method(t1 a1)"
  },
  {
    "label": "PROXY_METHOD2()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_METHOD2(r, method, t1, t2) \\ r method(t1 a1, t2 a2)"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (\\ MethodCall<C,r,t1,t2>)",
    "insertText": "call(c(), &C::method, std::move(a1), \\ std::move(a2))"
  },
  {
    "label": "PROXY_METHOD3()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_METHOD3(r, method, t1, t2, t3) \\ r method(t1 a1, t2 a2, t3 a3)"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (\\ MethodCall<C,r,t1,t2,t3>)",
    "insertText": "call(c(), &C::method, std::move(a1), \\ std::move(a2), std::move(a3))"
  },
  {
    "label": "PROXY_METHOD4()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_METHOD4(r, method, t1, t2, t3, t4) \\ r method(t1 a1, t2 a2, t3 a3, t4 a4)"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (\\ MethodCall<C,r,t1,t2,t3,t4>)",
    "insertText": "call(c(), &C::method, std::move(a1), \\ std::move(a2), std::move(a3), \\ std::move(a4))"
  },
  {
    "label": "PROXY_METHOD5()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_METHOD5(r, method, t1, t2, t3, t4, t5) \\ r method(t1 a1, t2 a2, t3 a3, t4 a4, t5 a5)"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (\\ MethodCall<C,r,t1,t2,t3,t4,t5>)",
    "insertText": "call(c(), &C::method, std::move(a1), \\ std::move(a2), std::move(a3), \\ std::move(a4), std::move(a5))"
  },
  {
    "label": "PROXY_SECONDARY_METHOD0()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_SECONDARY_METHOD0(r, method) \\ r method()"
  },
  {
    "label": "Marshal()",
    "kind": "Method",
    "detail": "Function (\\ return call .)",
    "insertText": "Marshal(secondary_thread_)"
  },
  {
    "label": "PROXY_SECONDARY_CONSTMETHOD0()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_SECONDARY_CONSTMETHOD0(r, method) \\ r method()"
  },
  {
    "label": "PROXY_SECONDARY_METHOD1()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_SECONDARY_METHOD1(r, method, t1) \\ r method(t1 a1)"
  },
  {
    "label": "PROXY_SECONDARY_CONSTMETHOD1()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_SECONDARY_CONSTMETHOD1(r, method, t1) \\ r method(t1 a1)"
  },
  {
    "label": "PROXY_SECONDARY_METHOD2()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_SECONDARY_METHOD2(r, method, t1, t2) \\ r method(t1 a1, t2 a2)"
  },
  {
    "label": "PROXY_SECONDARY_CONSTMETHOD2()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_SECONDARY_CONSTMETHOD2(r, method, t1, t2) \\ r method(t1 a1, t2 a2)"
  },
  {
    "label": "PROXY_SECONDARY_METHOD3()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_SECONDARY_METHOD3(r, method, t1, t2, t3) \\ r method(t1 a1, t2 a2, t3 a3)"
  },
  {
    "label": "PROXY_SECONDARY_CONSTMETHOD3()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PROXY_SECONDARY_CONSTMETHOD3(r, method, t1, t2) \\ r method(t1 a1, t2 a2, t3 a3)"
  },
  {
    "label": "BYPASS_PROXY_CONSTMETHOD0()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "BYPASS_PROXY_CONSTMETHOD0(r, method) \\ r method()"
  },
  {
    "label": "method()",
    "kind": "Method",
    "detail": "Function (\\ return c_ ->)",
    "insertText": "method()"
  }
]