[
  {
    "label": "VideoQualityTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoQualityTest"
  },
  {
    "label": "VideoQualityTest()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_VIDEO_QUALITY_TEST_H_ # define VIDEO_VIDEO_QUALITY_TEST_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" api / fec_controller . h \" # include \" api / rtc_event_log / rtc_event_log_factory . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / test / frame_generator_interface . h \" # include \" api / test / video_quality_test_fixture . h \" # include \" api / video / video_bitrate_allocator_factory . h \" # include \" call / fake_network_pipe . h \" # include \" media / engine / internal_decoder_factory . h \" # include \" media / engine / internal_encoder_factory . h \" # include \" test / call_test . h \" # include \" test / layer_filtering_transport . h \" # include \" video / video_analyzer . h \" # ifdef WEBRTC_WIN # include \" modules / audio_device / win / core_audio_utility_win . h \" # include \" rtc_base / win / scoped_com_initializer . h \" # endif namespace webrtc { class VideoQualityTest : public test::CallTest,public VideoQualityTestFixtureInterface { public :)",
    "insertText": "VideoQualityTest(std::unique_ptr<InjectionComponents> injection_components)"
  },
  {
    "label": "RunWithAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunWithAnalyzer(const Params& params)"
  },
  {
    "label": "RunWithRenderers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunWithRenderers(const Params& params)"
  },
  {
    "label": "payload_type_map()",
    "kind": "Method",
    "detail": "Function (const std::map<uint8_t,webrtc::MediaType>&)",
    "insertText": "payload_type_map()"
  },
  {
    "label": "DefaultVideoStream()",
    "kind": "Method",
    "detail": "Function (VideoStream)",
    "insertText": "DefaultVideoStream(const Params& params, size_t video_idx)"
  },
  {
    "label": "DefaultThumbnailStream()",
    "kind": "Method",
    "detail": "Function (VideoStream)",
    "insertText": "DefaultThumbnailStream()"
  },
  {
    "label": "ParseCSV()",
    "kind": "Method",
    "detail": "Function (std::vector<int>)",
    "insertText": "ParseCSV(const std::string& str)"
  },
  {
    "label": "TestBody()",
    "kind": "Method",
    "detail": "Function (protected : std::map<uint8_t,webrtc::MediaType> payload_type_map_ ; void)",
    "insertText": "TestBody()"
  },
  {
    "label": "GenerateGraphTitle()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GenerateGraphTitle()"
  },
  {
    "label": "CheckParamsAndInjectionComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckParamsAndInjectionComponents()"
  },
  {
    "label": "CreateCapturers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCapturers()"
  },
  {
    "label": "CreateFrameGenerator()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<test::FrameGeneratorInterface>)",
    "insertText": "CreateFrameGenerator(size_t video_idx)"
  },
  {
    "label": "SetupThumbnailCapturers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupThumbnailCapturers(size_t num_thumbnail_streams)"
  },
  {
    "label": "CreateVideoDecoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<VideoDecoder>)",
    "insertText": "CreateVideoDecoder(const SdpVideoFormat& format)"
  },
  {
    "label": "CreateVideoEncoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<VideoEncoder>)",
    "insertText": "CreateVideoEncoder(const SdpVideoFormat& format, VideoAnalyzer* analyzer)"
  },
  {
    "label": "SetupVideo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupVideo(Transport* send_transport, Transport* recv_transport)"
  },
  {
    "label": "SetupThumbnails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupThumbnails(Transport* send_transport, Transport* recv_transport)"
  },
  {
    "label": "StartAudioStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAudioStreams()"
  },
  {
    "label": "StartThumbnails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartThumbnails()"
  },
  {
    "label": "StopThumbnails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopThumbnails()"
  },
  {
    "label": "DestroyThumbnailStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyThumbnailStreams()"
  },
  {
    "label": "CreateAudioDevice()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<AudioDeviceModule>)",
    "insertText": "CreateAudioDevice()"
  },
  {
    "label": "InitializeAudioDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAudioDevice(Call::Config* send_call_config, Call::Config* recv_call_config, bool use_real_adm)"
  },
  {
    "label": "SetupAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupAudio(Transport* transport)"
  },
  {
    "label": "StartEncodedFrameLogs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartEncodedFrameLogs(VideoReceiveStreamInterface* stream)"
  },
  {
    "label": "CreateSendTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<test::LayerFilteringTransport>)",
    "insertText": "CreateSendTransport()"
  },
  {
    "label": "CreateReceiveTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<test::DirectTransport>)",
    "insertText": "CreateReceiveTransport()"
  }
]