[
  {
    "label": "FileObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileObject"
  },
  {
    "label": "HandleType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HandleType"
  },
  {
    "label": "DetouredHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DetouredHandle"
  },
  {
    "label": "MemoryFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemoryFile"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaDetoursFunctionsWin . h \" # include \" UbaDetoursFileMappingTable . h \" namespace uba { struct FileObject { void* operator)",
    "insertText": "new(size_t size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void* p)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (g_fileObjectAllocator .)",
    "insertText": "Free(p)"
  },
  {
    "label": "DetouredHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetouredHandle(HandleType t, HANDLE th = INVALID_HANDLE_VALUE) : trueHandle(th), type(t)"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (} HANDLE trueHandle ; u32 dirTableOffset = ~)",
    "insertText": "u32(0)"
  },
  {
    "label": "MemoryFile()",
    "kind": "Method",
    "detail": "Function (HandleType type ; FileObject* fileObject = nullptr ; u64 pos = 0 ; } ; struct MemoryFile {)",
    "insertText": "MemoryFile(u8* data = nullptr, bool localOnly = true) : baseAddress(data), isLocalOnly(localOnly)"
  },
  {
    "label": "MemoryFile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MemoryFile(bool localOnly, u64 reserveSize_) : isLocalOnly(localOnly)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(reserveSize_)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(u64 reserveSize_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (reserveSize = reserveSize_ ;)",
    "insertText": "if(isLocalOnly)"
  },
  {
    "label": "baseAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "baseAddress(u8*)VirtualAlloc(NULL, reserveSize, MEM_RESERVE, PAGE_READWRITE)"
  },
  {
    "label": "ts()",
    "kind": "Method",
    "detail": "Function (mappedSize = reserveSize ; } else { { mappedSize = 3 2* 1 0 2 4* 1 0 2 4 ; TimerScope)",
    "insertText": "ts(g_kernelStats.createFileMapping)"
  },
  {
    "label": "True_CreateFileMappingW()",
    "kind": "Method",
    "detail": "Function (mappingHandle =)",
    "insertText": "True_CreateFileMappingW(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE | SEC_RESERVE, ToHigh(reserveSize), ToLow(reserveSize), NULL)"
  },
  {
    "label": "ts()",
    "kind": "Method",
    "detail": "Function (} TimerScope)",
    "insertText": "ts(g_kernelStats.mapViewOfFile)"
  },
  {
    "label": "baseAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "baseAddress(u8*)True_MapViewOfFile(mappingHandle, FILE_MAP_READ | FILE_MAP_WRITE, 0, 0, mappedSize)"
  },
  {
    "label": "Unreserve()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Unreserve()"
  },
  {
    "label": "VirtualFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VirtualFree(baseAddress, 0, MEM_RELEASE)"
  },
  {
    "label": "True_UnmapViewOfFile()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "True_UnmapViewOfFile(baseAddress)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(mappingHandle)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (mappingHandle = nullptr ; } baseAddress = nullptr ; committedSize = 0 ; } void)",
    "insertText": "Write(struct DetouredHandle& handle, LPCVOID lpBuffer, u64 nNumberOfBytesToWrite)"
  },
  {
    "label": "EnsureCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureCommitted(const struct DetouredHandle& handle, u64 size)"
  },
  {
    "label": "Remap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remap(const struct DetouredHandle& handle, u64 size)"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (u64 fileIndex = ~)",
    "insertText": "u64(0)"
  }
]