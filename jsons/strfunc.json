[
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_INTERNAL_STRFUNC_H_ # define RAPIDJSON_INTERNAL_STRFUNC_H_ # include \" . . / stream . h \" # include<cwchar> RAPIDJSON_NAMESPACE_BEGIN namespace internal { template<Ch> SizeType)",
    "insertText": "StrLen(const Ch* s)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(s != 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const Ch* p = s ;)",
    "insertText": "while(*p)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (} template<> SizeType)",
    "insertText": "StrLen(const char* s)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (} template<> SizeType)",
    "insertText": "StrLen(const wchar_t* s)"
  },
  {
    "label": "StrCmp()",
    "kind": "Method",
    "detail": "Function (} template<Ch> int)",
    "insertText": "StrCmp(const Ch* s1, const Ch* s2)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(s1 != 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(s2 != 0)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (s1 + + ; s2 + + ; } return static_cast<)",
    "insertText": "unsigned(*s1) < static_cast<unsigned>(*s2) ? -1 : static_cast<unsigned>(*s1) > static_cast<unsigned>(*s2)"
  },
  {
    "label": "CountStringCodePoint()",
    "kind": "Method",
    "detail": "Function (} template<Encoding> bool)",
    "insertText": "CountStringCodePoint(const typename Encoding::Ch* s, SizeType length, SizeType* outCount)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(outCount != 0)"
  },
  {
    "label": "is()",
    "kind": "Method",
    "detail": "Function (GenericStringStream<Encoding>)",
    "insertText": "is(s)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const Encoding::Ch* end = s + length ; SizeType count = 0 ;)",
    "insertText": "while(is.src_ < end)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned codepoint ;)",
    "insertText": "if(!Encoding::Decode(is, &codepoint))"
  }
]