[
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "SSCSEditorViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSCSEditorViewport"
  },
  {
    "label": "FBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditor"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOverlay"
  },
  {
    "label": "FSCSEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSCSEditorViewportClient"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Delegates / IDelegateInstance . h \" # include \" Input / Reply . h \" # include \" SEditorViewport . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" class FDragDropEvent ; class SDockTab ; struct FGeometry ; class SSCSEditorViewport : public SEditorViewport { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSCSEditorViewport)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TWeakPtr<class FBlueprintEditor>, BlueprintEditor) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SSCSEditorViewport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SSCSEditorViewport()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "EnablePreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePreview(bool bEnable)"
  },
  {
    "label": "RequestRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRefresh(bool bResetCamera = false, bool bRefreshNow = false)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnComponentSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentSelectionChanged()"
  },
  {
    "label": "OnFocusViewportToSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusViewportToSelection()"
  },
  {
    "label": "GetIsSimulateEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsSimulateEnabled()"
  },
  {
    "label": "SetOwnerTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwnerTab(TSharedRef<SDockTab> Tab)"
  },
  {
    "label": "GetOwnerTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "GetOwnerTab()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "ShouldShowViewportCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowViewportCommands()"
  },
  {
    "label": "ToggleIsSimulateEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleIsSimulateEnabled()"
  },
  {
    "label": "MakeEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class FEditorViewportClient>)",
    "insertText": "MakeEditorViewportClient()"
  },
  {
    "label": "MakeViewportToolbar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SWidget>)",
    "insertText": "MakeViewportToolbar()"
  },
  {
    "label": "BuildViewportToolbar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildViewportToolbar()"
  },
  {
    "label": "PopulateViewportOverlays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateViewportOverlays(TSharedRef<class SOverlay> Overlay)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "DeferredUpdatePreview()",
    "kind": "Method",
    "detail": "Function (private : EActiveTimerReturnType)",
    "insertText": "DeferredUpdatePreview(double InCurrentTime, float InDeltaTime, bool bResetCamera)"
  }
]