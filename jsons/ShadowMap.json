[
  {
    "label": "FShadowMap2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMap2D"
  },
  {
    "label": "UInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInstancedStaticMeshComponent"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "UMapBuildDataRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMapBuildDataRegistry"
  },
  {
    "label": "UShadowMapTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UShadowMapTexture2D"
  },
  {
    "label": "FSignedDistanceFieldShadowSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSignedDistanceFieldShadowSample"
  },
  {
    "label": "FQuantizedSignedDistanceFieldShadowSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedSignedDistanceFieldShadowSample"
  },
  {
    "label": "FShadowMapData2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMapData2D"
  },
  {
    "label": "ShadowMapDataType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ShadowMapDataType"
  },
  {
    "label": "FShadowSignedDistanceFieldData2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowSignedDistanceFieldData2D"
  },
  {
    "label": "FQuantizedShadowSignedDistanceFieldData2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuantizedShadowSignedDistanceFieldData2D"
  },
  {
    "label": "FFourDistanceFieldSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFourDistanceFieldSamples"
  },
  {
    "label": "FShadowMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMap"
  },
  {
    "label": "FShadowMapPendingTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShadowMapPendingTexture"
  },
  {
    "label": "GetFilterableComponent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" RenderDeferredCleanup . h \" # include \" SceneManagement . h \" class FShadowMap2D ; class UInstancedStaticMeshComponent ; class ULightComponent ; class UMapBuildDataRegistry ; class UShadowMapTexture2D ; struct FSignedDistanceFieldShadowSample { float Distance ; float PenumbraSize ; bool IsMapped ; } ; struct FQuantizedSignedDistanceFieldShadowSample { enum { NumFilterableComponents = 2 } ; uint8 Distance ; uint8 PenumbraSize ; uint8 Coverage ; float)",
    "insertText": "GetFilterableComponent(int32 Index)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Distance(uint8)FMath::Clamp<int32>(FMath::TruncToInt(InComponent * 255.0f), 0, 255)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkSlow(Index == 1)"
  },
  {
    "label": "PenumbraSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PenumbraSize(uint8)FMath::Clamp<int32>(FMath::TruncToInt(InComponent * 255.0f), 0, 255)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "operator(const FQuantizedSignedDistanceFieldShadowSample& RHS)"
  },
  {
    "label": "FQuantizedSignedDistanceFieldShadowSample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQuantizedSignedDistanceFieldShadowSample(const FSignedDistanceFieldShadowSample& InSample)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Distance(uint8)FMath::Clamp<int32>(FMath::TruncToInt(InSample.Distance * 255.0f), 0, 255)"
  },
  {
    "label": "PenumbraSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PenumbraSize(uint8)FMath::Clamp<int32>(FMath::TruncToInt(InSample.PenumbraSize * 255.0f), 0, 255)"
  },
  {
    "label": "FShadowMapData2D()",
    "kind": "Method",
    "detail": "Function (Coverage = InSample . IsMapped ? 2 5 5 : 0 ; } } ; class FShadowMapData2D { public : ~)",
    "insertText": "FShadowMapData2D()"
  },
  {
    "label": "GetSizeX()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSizeX()"
  },
  {
    "label": "GetSurfaceHeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSurfaceHeight()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} enum ShadowMapDataType { UNKNOWN,SHADOW_FACTOR_DATA,SHADOW_FACTOR_DATA_QUANTIZED,SHADOW_SIGNED_DISTANCE_FIELD_DATA,SHADOW_SIGNED_DISTANCE_FIELD_DATA_QUANTIZED,} ; ShadowMapDataType)",
    "insertText": "GetType()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive* OutShadowMap)"
  },
  {
    "label": "FShadowMapData2D()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FShadowMapData2D(uint32 InSizeX, uint32 InSizeY) : SizeX(InSizeX), SizeY(InSizeY)"
  },
  {
    "label": "FShadowSignedDistanceFieldData2D()",
    "kind": "Method",
    "detail": "Function (} uint32 SizeX ; uint32 SizeY ; } ; class FShadowSignedDistanceFieldData2D : public FShadowMapData2D { public :)",
    "insertText": "FShadowSignedDistanceFieldData2D(uint32 InSizeX, uint32 InSizeY) : FShadowMapData2D(InSizeX, InSizeY)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Empty(SizeX * SizeY)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "AddZeroed(SizeX * SizeY)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FSignedDistanceFieldShadowSample&)",
    "insertText": "operator()(uint32 X, uint32 Y)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "Empty(Data.Num())"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "AddUninitialized(Data.Num())"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (OutShadowMap ->)",
    "insertText": "Serialize(&Data[Index], sizeof(FSignedDistanceFieldShadowSample))"
  },
  {
    "label": "FQuantizedShadowSignedDistanceFieldData2D()",
    "kind": "Method",
    "detail": "Function (} } private : TArray<FSignedDistanceFieldShadowSample> Data ; } ; class FQuantizedShadowSignedDistanceFieldData2D : public FShadowMapData2D { public :)",
    "insertText": "FQuantizedShadowSignedDistanceFieldData2D(uint32 InSizeX, uint32 InSizeY) : FShadowMapData2D(InSizeX, InSizeY)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} FQuantizedSignedDistanceFieldShadowSample*)",
    "insertText": "GetData()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (OutShadowMap ->)",
    "insertText": "Serialize(&Data[Index], sizeof(FQuantizedSignedDistanceFieldShadowSample))"
  },
  {
    "label": "FShadowMap()",
    "kind": "Method",
    "detail": "Function (} } private : TArray<FQuantizedSignedDistanceFieldShadowSample> Data ; } ; class FFourDistanceFieldSamples { public : FQuantizedSignedDistanceFieldShadowSample Samples [ 4 ] ; } ; class FShadowMap : private FDeferredCleanupInterface { public : enum { SMT_None = 0,SMT_2D = 2,} ; TArray<FGuid> LightGuids ;)",
    "insertText": "FShadowMap() : NumRefs(0)"
  },
  {
    "label": "FShadowMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShadowMap(TArray<FGuid> InLightGuids) : LightGuids(MoveTemp(InLightGuids)) , NumRefs(0)"
  },
  {
    "label": "FShadowMap()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FShadowMap()"
  },
  {
    "label": "ContainsLight()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsLight(const FGuid& LightGuid)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetInteraction()",
    "kind": "Method",
    "detail": "Function (FShadowMapInteraction)",
    "insertText": "GetInteraction()"
  },
  {
    "label": "GetShadowMap2D()",
    "kind": "Method",
    "detail": "Function (FShadowMap2D*)",
    "insertText": "GetShadowMap2D()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (NumRefs + + ; } void)",
    "insertText": "Release()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "EncodeTextures()",
    "kind": "Method",
    "detail": "Function (private : int32 NumRefs ; } ; class FShadowMap2D : public FShadowMap { public : void)",
    "insertText": "EncodeTextures(const FStaticLightingBuildContext* LightingContext, bool bLightingSuccessful, bool bMultithreadedEncode =false)"
  },
  {
    "label": "EncodeSingleTexture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EncodeSingleTexture(const FStaticLightingBuildContext* LightingContext, struct FShadowMapPendingTexture& PendingTexture, UShadowMapTexture2D* Texture, TArray< TArray<FFourDistanceFieldSamples>>& MipData)"
  },
  {
    "label": "AllocateShadowMap()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FShadowMap2D>)",
    "insertText": "AllocateShadowMap(UObject* LightMapOuter, const TMap<ULightComponent*, FShadowMapData2D*>& ShadowMapData, const FBoxSphereBounds& Bounds, ELightMapPaddingType InPaddingType, EShadowMapFlags InShadowmapFlags)"
  },
  {
    "label": "AllocateInstancedShadowMap()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FShadowMap2D>)",
    "insertText": "AllocateInstancedShadowMap(UObject* LightMapOuter, UInstancedStaticMeshComponent* Component, TArray<TMap<ULightComponent*, TUniquePtr<FShadowMapData2D>>>&& InstancedShadowMapData, UMapBuildDataRegistry* Registry, FGuid MapBuildDataId, const FBoxSphereBounds& Bounds, ELightMapPaddingType PaddingType, EShadowMapFlags ShadowmapFlags)"
  },
  {
    "label": "FShadowMap2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShadowMap2D()"
  },
  {
    "label": "FShadowMap2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShadowMap2D(const TMap<ULightComponent*, FShadowMapData2D*>& ShadowMapData)"
  },
  {
    "label": "FShadowMap2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShadowMap2D(TArray<FGuid> LightGuids)"
  },
  {
    "label": "GetTexture()",
    "kind": "Method",
    "detail": "Function (UTexture2D*)",
    "insertText": "GetTexture()"
  },
  {
    "label": "GetCoordinateScale()",
    "kind": "Method",
    "detail": "Function (const FVector2D&)",
    "insertText": "GetCoordinateScale()"
  },
  {
    "label": "GetStatusUpdate()",
    "kind": "Method",
    "detail": "Function (bUpdateStatus = bInEnable ; } bool)",
    "insertText": "GetStatusUpdate()"
  }
]