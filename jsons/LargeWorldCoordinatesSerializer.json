[
  {
    "label": "UE_SERIALIZE_VARIANT_FROM_MISMATCHED_TAG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / NameTypes . h \" # include \" UObject / ObjectVersion . h \" # include \" Serialization / StructuredArchive . h \" # define)",
    "insertText": "UE_SERIALIZE_VARIANT_FROM_MISMATCHED_TAG(AR_OR_SLOT, ALIAS, TYPE, ALT_TYPE) LWCSerializerPrivate::SerializeFromMismatchedTag<F##ALT_TYPE>(*this, StructTag, AR_OR_SLOT, NAME_##ALIAS, NAME_##TYPE, NAME_##ALT_TYPE)"
  },
  {
    "label": "IsPreLWC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreLWC(const FArchive& Ar)"
  },
  {
    "label": "IsPreLWC()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPreLWC(const FStructuredArchive::FSlot& Slot)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (} template<FAltType,FType,FArSlot> std::enable_if_t<std::is_floating_point_v<FType::FReal>,bool>)",
    "insertText": "SerializeFromMismatchedTag(FType& Target, FName StructTag, FArSlot& ArSlot, FName BaseTag, FName ThisTag, FName AltTag)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(StructTag == AltTag || StructTag == BaseTag)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (FAltType AsAlt ; const bool bResult = AsAlt .)",
    "insertText": "Serialize(ArSlot)"
  },
  {
    "label": "FType()",
    "kind": "Method",
    "detail": "Function (Target = static_cast<)",
    "insertText": "FType(AsAlt)"
  }
]