[
  {
    "label": "ACameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACameraActor"
  },
  {
    "label": "AHUD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AHUD"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "ASpectatorPawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASpectatorPawn"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UActorChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorChannel"
  },
  {
    "label": "UCheatManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCheatManager"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "UInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputComponent"
  },
  {
    "label": "ULocalMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalMessage"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayer"
  },
  {
    "label": "UPlayerInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayerInput"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FActiveForceFeedbackEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveForceFeedbackEffect"
  },
  {
    "label": "FActiveHapticFeedbackEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveHapticFeedbackEffect"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FForceFeedbackEffectHistoryEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForceFeedbackEffectHistoryEntry"
  },
  {
    "label": "FInputKeyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputKeyParams"
  },
  {
    "label": "FPlatformUserId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformUserId"
  },
  {
    "label": "UAsyncPhysicsInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAsyncPhysicsInputComponent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FDynamicForceFeedbackDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicForceFeedbackDetails"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FInputModeDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputModeDataBase"
  },
  {
    "label": "FReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReply"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FInputModeUIOnly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputModeUIOnly"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "FUpdateLevelStreamingLevelStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateLevelStreamingLevelStatus"
  },
  {
    "label": "FInputModeGameAndUI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputModeGameAndUI"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "FInputModeGameOnly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputModeGameOnly"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "FAsyncPhysicsTimestamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPhysicsTimestamp"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "should"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FDynamicForceFeedbackAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicForceFeedbackAction"
  },
  {
    "label": "FLatentDynamicForceFeedbackAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLatentDynamicForceFeedbackAction"
  },
  {
    "label": "FActiveHapticFeedbackEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveHapticFeedbackEffect"
  },
  {
    "label": "FActiveHapticFeedbackEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveHapticFeedbackEffect"
  },
  {
    "label": "FActiveHapticFeedbackEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveHapticFeedbackEffect"
  },
  {
    "label": "FActiveHapticFeedbackEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveHapticFeedbackEffect"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FUniqueNetId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniqueNetId"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UCameraShakeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeBase"
  },
  {
    "label": "UCameraShakeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeBase"
  },
  {
    "label": "UCameraShakeSourceComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeSourceComponent"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FViewTargetTransitionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewTargetTransitionParams"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AEmitterCameraLensEffectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AEmitterCameraLensEffectBase"
  },
  {
    "label": "UCameraShakeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeBase"
  },
  {
    "label": "UCameraShakeSourceComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeSourceComponent"
  },
  {
    "label": "UForceFeedbackEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UForceFeedbackEffect"
  },
  {
    "label": "UForceFeedbackEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UForceFeedbackEffect"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "UForceFeedbackEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UForceFeedbackEffect"
  },
  {
    "label": "UForceFeedbackEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UForceFeedbackEffect"
  },
  {
    "label": "UHapticFeedbackEffect_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHapticFeedbackEffect_Base"
  },
  {
    "label": "ETravelType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETravelType"
  },
  {
    "label": "ETravelType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETravelType"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "FViewTargetTransitionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewTargetTransitionParams"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "UTouchInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTouchInterface"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "EViewTargetBlendFunction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EViewTargetBlendFunction"
  },
  {
    "label": "SVirtualJoystick",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVirtualJoystick"
  },
  {
    "label": "SVirtualJoystick",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVirtualJoystick"
  },
  {
    "label": "UTouchInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTouchInterface"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "UDamageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDamageType"
  },
  {
    "label": "FInBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInBunch"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "FOutBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutBunch"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayer"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "AGameModeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameModeBase"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogPlayerController, Log, All)"
  },
  {
    "label": "SetTargetViewRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetViewRotation(const FRotator& InRotation)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update(const float DeltaTime, FForceFeedbackValues& Values)"
  },
  {
    "label": "ServerSetSpectatorWaiting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerSetSpectatorWaiting(bool bWaiting)"
  },
  {
    "label": "ClientSetSpectatorWaiting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientSetSpectatorWaiting(bool bWaiting)"
  },
  {
    "label": "SetDeprecatedInputYawScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeprecatedInputYawScale(float NewValue)"
  },
  {
    "label": "SetDeprecatedInputPitchScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeprecatedInputPitchScale(float NewValue)"
  },
  {
    "label": "SetDeprecatedInputRollScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeprecatedInputRollScale(float NewValue)"
  },
  {
    "label": "SetMotionControlsEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMotionControlsEnabled(bool bEnabled)"
  },
  {
    "label": "EnableCheats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableCheats()"
  },
  {
    "label": "UnFreeze()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnFreeze()"
  },
  {
    "label": "GetMinRespawnDelay()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinRespawnDelay()"
  },
  {
    "label": "FOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOV(float NewFOV)"
  },
  {
    "label": "RestartLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartLevel()"
  },
  {
    "label": "LocalTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalTravel(const FString& URL)"
  },
  {
    "label": "ServerExecRPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerExecRPC(const FString& Msg)"
  },
  {
    "label": "ServerExec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerExec(const FString& Msg)"
  },
  {
    "label": "ClientReturnToMainMenuWithTextReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientReturnToMainMenuWithTextReason(const FText& ReturnReason)"
  },
  {
    "label": "ClientRepObjRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientRepObjRef(UObject* Object)"
  },
  {
    "label": "game()",
    "kind": "Method",
    "detail": "Function (pause)",
    "insertText": "game(call serverpause to pause network game)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(const FString& S)"
  },
  {
    "label": "SwitchLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchLevel(const FString& URL)"
  },
  {
    "label": "NotifyLoadedWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLoadedWorld(FName WorldPackageName, bool bFinalDest)"
  },
  {
    "label": "PlayerTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayerTick(float DeltaTime)"
  },
  {
    "label": "PreProcessInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreProcessInput(const float DeltaTime, const bool bGamePaused)"
  },
  {
    "label": "PostProcessInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProcessInput(const float DeltaTime, const bool bGamePaused)"
  },
  {
    "label": "SetCinematicMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCinematicMode( bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning)"
  },
  {
    "label": "SetMouseLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMouseLocation( const int X, const int Y )"
  },
  {
    "label": "UpdateRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRotation(float DeltaTime)"
  },
  {
    "label": "BeginPlayingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlayingState()"
  },
  {
    "label": "EndPlayingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlayingState()"
  },
  {
    "label": "StartFire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartFire(uint8 FireModeNum = 0)"
  },
  {
    "label": "LevelStreamingStatusChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LevelStreamingStatusChanged(class ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32 LODIndex)"
  },
  {
    "label": "LevelStreamingStatusChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LevelStreamingStatusChanged(class ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, bool bNewShouldBlockOnUnload, int32 LODIndex)"
  },
  {
    "label": "DelayedPrepareMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayedPrepareMapChange()"
  },
  {
    "label": "GetSeamlessTravelActorList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>& ActorList)"
  },
  {
    "label": "SeamlessTravelTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeamlessTravelTo(class APlayerController* NewPC)"
  },
  {
    "label": "SeamlessTravelFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeamlessTravelFrom(class APlayerController* OldPC)"
  },
  {
    "label": "PostSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSeamlessTravel()"
  },
  {
    "label": "OnAddedToPlayerControllerList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddedToPlayerControllerList()"
  },
  {
    "label": "OnRemovedFromPlayerControllerList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemovedFromPlayerControllerList()"
  },
  {
    "label": "ClientEnableNetworkVoice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientEnableNetworkVoice(bool bEnable)"
  },
  {
    "label": "ClientAckUpdateLevelVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAckUpdateLevelVisibility(FName PackageName, FNetLevelVisibilityTransactionId TransactionId, bool bClientAckCanMakeVisible)"
  },
  {
    "label": "StartTalking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTalking()"
  },
  {
    "label": "StopTalking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTalking()"
  },
  {
    "label": "ToggleSpeaking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSpeaking(bool bInSpeaking)"
  },
  {
    "label": "ClientVoiceHandshakeComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientVoiceHandshakeComplete()"
  },
  {
    "label": "ServerMutePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMutePlayer(FUniqueNetIdRepl PlayerId)"
  },
  {
    "label": "ServerUnmutePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerUnmutePlayer(FUniqueNetIdRepl PlayerId)"
  },
  {
    "label": "ClientMutePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientMutePlayer(FUniqueNetIdRepl PlayerId)"
  },
  {
    "label": "ClientUnmutePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientUnmutePlayer(FUniqueNetIdRepl PlayerId)"
  },
  {
    "label": "ServerBlockPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerBlockPlayer(FUniqueNetIdRepl PlayerId)"
  },
  {
    "label": "ServerUnblockPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerUnblockPlayer(FUniqueNetIdRepl PlayerId)"
  },
  {
    "label": "ClientUnmutePlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientUnmutePlayers(const TArray<FUniqueNetIdRepl>& PlayerIds)"
  },
  {
    "label": "GameplayMutePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameplayMutePlayer(const FUniqueNetIdRepl& PlayerNetId)"
  },
  {
    "label": "GameplayUnmutePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameplayUnmutePlayer(const FUniqueNetIdRepl& PlayerNetId)"
  },
  {
    "label": "GameplayUnmuteAllPlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameplayUnmuteAllPlayers()"
  },
  {
    "label": "IsPlayerMuted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayerMuted(const class FUniqueNetId& PlayerId)"
  },
  {
    "label": "ConsoleKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsoleKey(FKey Key)"
  },
  {
    "label": "SendToConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendToConsole(const FString& Command)"
  },
  {
    "label": "ClientAddTextureStreamingLoc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAddTextureStreamingLoc(FVector InLoc, float Duration, bool bOverrideLocation)"
  },
  {
    "label": "ClientCancelPendingMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCancelPendingMapChange()"
  },
  {
    "label": "ClientCapBandwidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCapBandwidth(int32 Cap)"
  },
  {
    "label": "ClientCommitMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCommitMapChange()"
  },
  {
    "label": "ClientFlushLevelStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientFlushLevelStreaming()"
  },
  {
    "label": "ClientForceGarbageCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientForceGarbageCollection()"
  },
  {
    "label": "ClientGameEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner)"
  },
  {
    "label": "ClientGotoState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientGotoState(FName NewState)"
  },
  {
    "label": "ClientIgnoreLookInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientIgnoreLookInput(bool bIgnore)"
  },
  {
    "label": "ClientIgnoreMoveInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientIgnoreMoveInput(bool bIgnore)"
  },
  {
    "label": "ClientMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientMessage(const FString& S, FName Type = NAME_None, float MsgLifeTime = 0.f)"
  },
  {
    "label": "ClientStartCameraShake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientStartCameraShake(TSubclassOf<class UCameraShakeBase> Shake, float Scale = 1.f, ECameraShakePlaySpace PlaySpace = ECameraShakePlaySpace::CameraLocal, FRotator UserPlaySpaceRot = FRotator::ZeroRotator)"
  },
  {
    "label": "ClientStartCameraShakeFromSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientStartCameraShakeFromSource(TSubclassOf<class UCameraShakeBase> Shake, class UCameraShakeSourceComponent* SourceComponent)"
  },
  {
    "label": "ClientPlaySound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier = 1.f, float PitchMultiplier = 1.f )"
  },
  {
    "label": "ClientPlaySoundAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientPlaySoundAtLocation(class USoundBase* Sound, FVector Location, float VolumeMultiplier = 1.f, float PitchMultiplier = 1.f)"
  },
  {
    "label": "ClientPrepareMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast)"
  },
  {
    "label": "ClientPrestreamTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32 CinematicTextureGroups = 0)"
  },
  {
    "label": "ClientReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientReset()"
  },
  {
    "label": "ClientRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientRestart(class APawn* NewPawn)"
  },
  {
    "label": "ClientSetBlockOnAsyncLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientSetBlockOnAsyncLoading()"
  },
  {
    "label": "ClientSetCameraMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientSetCameraMode(FName NewCamMode)"
  },
  {
    "label": "ClientSetCinematicMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)"
  },
  {
    "label": "ClientSetForceMipLevelsToBeResident()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int32 CinematicTextureGroups = 0)"
  },
  {
    "label": "ClientSetHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientSetHUD(TSubclassOf<AHUD> NewHUDClass)"
  },
  {
    "label": "ClientSpawnCameraLensEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientSpawnCameraLensEffect(TSubclassOf<class AEmitterCameraLensEffectBase>  LensEffectEmitterClass)"
  },
  {
    "label": "ClientClearCameraLensEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientClearCameraLensEffects()"
  },
  {
    "label": "ClientStopCameraShake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientStopCameraShake(TSubclassOf<class UCameraShakeBase> Shake, bool bImmediately = true)"
  },
  {
    "label": "ClientStopCameraShakesFromSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately = true)"
  },
  {
    "label": "K2_ClientPlayForceFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused)"
  },
  {
    "label": "ClientStopForceFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, FName Tag)"
  },
  {
    "label": "PlayDynamicForceFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction::Type> Action, FLatentActionInfo LatentInfo)"
  },
  {
    "label": "TestServerLevelVisibilityChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestServerLevelVisibilityChange(const FName PackageName, const FName FileName)"
  },
  {
    "label": "PlayDynamicForceFeedback()",
    "kind": "Method",
    "detail": "Function (FDynamicForceFeedbackHandle)",
    "insertText": "PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, EDynamicForceFeedbackAction::Type Action = EDynamicForceFeedbackAction::Start, FDynamicForceFeedbackHandle ActionHandle = 0)"
  },
  {
    "label": "PlayHapticEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale = 1.f,  bool bLoop = false)"
  },
  {
    "label": "StopHapticEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopHapticEffect(EControllerHand Hand)"
  },
  {
    "label": "SetHapticsByValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHapticsByValue(const float Frequency, const float Amplitude, EControllerHand Hand)"
  },
  {
    "label": "SetDisableHaptics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisableHaptics(bool bNewDisabled)"
  },
  {
    "label": "SetControllerLightColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControllerLightColor(FColor Color)"
  },
  {
    "label": "ResetControllerLightColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetControllerLightColor()"
  },
  {
    "label": "SetControllerDeadZones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControllerDeadZones(const float LeftDeadZone, const float RightDeadZone)"
  },
  {
    "label": "ResetControllerDeadZones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetControllerDeadZones()"
  },
  {
    "label": "ClientUpdateMultipleLevelsStreamingStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientUpdateMultipleLevelsStreamingStatus(const TArray<FUpdateLevelStreamingLevelStatus>& LevelStatuses)"
  },
  {
    "label": "ClientWasKicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientWasKicked(const FText& KickReason)"
  },
  {
    "label": "ClientStartOnlineSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientStartOnlineSession()"
  },
  {
    "label": "ClientEndOnlineSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientEndOnlineSession()"
  },
  {
    "label": "ClientRetryClientRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientRetryClientRestart(class APawn* NewPawn)"
  },
  {
    "label": "SafeRetryClientRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeRetryClientRestart()"
  },
  {
    "label": "ClientReceiveLocalizedMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientReceiveLocalizedMessage(TSubclassOf<ULocalMessage> Message, int32 Switch = 0, class APlayerState* RelatedPlayerState_1 = nullptr, class APlayerState* RelatedPlayerState_2 = nullptr, class UObject* OptionalObject = nullptr)"
  },
  {
    "label": "ServerAcknowledgePossession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerAcknowledgePossession(class APawn* P)"
  },
  {
    "label": "ServerCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerCamera(FName NewMode)"
  },
  {
    "label": "ServerChangeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerChangeName(const FString& S)"
  },
  {
    "label": "ServerNotifyLoadedWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerNotifyLoadedWorld(FName WorldPackageName)"
  },
  {
    "label": "ServerPause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerPause()"
  },
  {
    "label": "ServerRestartPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerRestartPlayer()"
  },
  {
    "label": "ServerSetSpectatorLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerSetSpectatorLocation(FVector NewLoc, FRotator NewRot)"
  },
  {
    "label": "SafeServerUpdateSpectatorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeServerUpdateSpectatorState()"
  },
  {
    "label": "ServerCheckClientPossession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerCheckClientPossession()"
  },
  {
    "label": "ServerCheckClientPossessionReliable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerCheckClientPossessionReliable()"
  },
  {
    "label": "SafeServerCheckClientPossession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeServerCheckClientPossession()"
  },
  {
    "label": "ServerShortTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerShortTimeout()"
  },
  {
    "label": "ServerUpdateCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerUpdateCamera(FVector_NetQuantize CamLoc, int32 CamPitchAndYaw)"
  },
  {
    "label": "ServerUpdateLevelVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerUpdateLevelVisibility(const FUpdateLevelVisibilityLevelInfo& LevelVisibility)"
  },
  {
    "label": "ServerUpdateMultipleLevelsVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerUpdateMultipleLevelsVisibility( const TArray<FUpdateLevelVisibilityLevelInfo>& LevelVisibilities )"
  },
  {
    "label": "ServerVerifyViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerVerifyViewTarget()"
  },
  {
    "label": "ServerViewNextPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerViewNextPlayer()"
  },
  {
    "label": "ServerViewPrevPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerViewPrevPlayer()"
  },
  {
    "label": "ClientTeamMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientTeamMessage(class APlayerState* SenderPlayerState, const FString& S, FName Type, float MsgLifeTime = 0)"
  },
  {
    "label": "ServerToggleAILogging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerToggleAILogging()"
  },
  {
    "label": "AddPitchInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPitchInput(float Val)"
  },
  {
    "label": "AddYawInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddYawInput(float Val)"
  },
  {
    "label": "AddRollInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRollInput(float Val)"
  },
  {
    "label": "ActivateTouchInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateTouchInterface(class UTouchInterface* NewTouchInterface)"
  },
  {
    "label": "SetVirtualJoystickVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVirtualJoystickVisibility(bool bVisible)"
  },
  {
    "label": "SetInputMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputMode(const FInputModeDataBase& InData)"
  },
  {
    "label": "Camera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Camera(FName NewMode)"
  },
  {
    "label": "SetViewTargetWithBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime = 0, enum EViewTargetBlendFunction BlendFunc = VTBlend_Linear, float BlendExp = 0, bool bLockOutgoing = false)"
  },
  {
    "label": "IncludeInNetConditionGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncludeInNetConditionGroup(FName NetGroup)"
  },
  {
    "label": "RemoveFromNetConditionGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromNetConditionGroup(FName NetGroup)"
  },
  {
    "label": "SetupInactiveStateInputComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupInactiveStateInputComponent(UInputComponent* InComponent)"
  },
  {
    "label": "UpdateStateInputComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStateInputComponents()"
  },
  {
    "label": "CreateVirtualJoystick()",
    "kind": "Method",
    "detail": "Function (SVirtualJoystick>)",
    "insertText": "CreateVirtualJoystick()"
  },
  {
    "label": "PushInputComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushInputComponent(UInputComponent* Input)"
  },
  {
    "label": "PopInputComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopInputComponent(UInputComponent* Input)"
  },
  {
    "label": "FlushPressedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPressedKeys()"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FKey Key, EInputEvent EventType, float AmountDepressed, bool bGamepad)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(const FInputKeyParams& Params)"
  },
  {
    "label": "InputTouch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputTouch(uint32 Handle, ETouchType::Type Type, const FVector2D& TouchLocation, float Force, FDateTime DeviceTimestamp, uint32 TouchpadIndex)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FKey Key, float Delta, float DeltaTime, int32 NumSamples, bool bGamepad)"
  },
  {
    "label": "InputMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputMotion(const FVector& Tilt, const FVector& RotationRate, const FVector& Gravity, const FVector& Acceleration)"
  },
  {
    "label": "SetPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayer(UPlayer* InPlayer)"
  },
  {
    "label": "SmoothTargetViewRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SmoothTargetViewRotation(APawn* TargetPawn, float DeltaSeconds)"
  },
  {
    "label": "ConsoleCommand()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConsoleCommand(const FString& Command, bool bWriteToLog = true)"
  },
  {
    "label": "BuildHiddenComponentList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildHiddenComponentList(const FVector& ViewLocation, TSet<FPrimitiveComponentId>& HiddenComponentsOut)"
  },
  {
    "label": "SpawnPlayerCameraManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnPlayerCameraManager()"
  },
  {
    "label": "SetAudioListenerOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioListenerOverride(USceneComponent* AttachToComponent, FVector Location, FRotator Rotation)"
  },
  {
    "label": "ClearAudioListenerOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAudioListenerOverride()"
  },
  {
    "label": "SetAudioListenerAttenuationOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioListenerAttenuationOverride(USceneComponent* AttachToComponent, FVector AttenuationLocationOVerride)"
  },
  {
    "label": "ClearAudioListenerAttenuationOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAudioListenerAttenuationOverride()"
  },
  {
    "label": "TickPlayerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickPlayerInput(const float DeltaSeconds, const bool bGamePaused)"
  },
  {
    "label": "ProcessPlayerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPlayerInput(const float DeltaTime, const bool bGamePaused)"
  },
  {
    "label": "BuildInputStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildInputStack(TArray<UInputComponent*>& InputStack)"
  },
  {
    "label": "ProcessForceFeedbackAndHaptics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessForceFeedbackAndHaptics(const float DeltaTime, const bool bGamePaused)"
  },
  {
    "label": "UpdateForceFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateForceFeedback(IInputInterface* InputInterface, const int32 ControllerId)"
  },
  {
    "label": "SetupInputComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupInputComponent()"
  },
  {
    "label": "SetNetSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetSpeed(int32 NewSpeed)"
  },
  {
    "label": "GetPlayerNetworkAddress()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPlayerNetworkAddress()"
  },
  {
    "label": "GetServerNetworkAddress()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetServerNetworkAddress()"
  },
  {
    "label": "NetworkRemapPath()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NetworkRemapPath(FName InPackageName, bool bReading)"
  },
  {
    "label": "CleanUpAudioComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpAudioComponents()"
  },
  {
    "label": "AddCheats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCheats(bool bForce = false)"
  },
  {
    "label": "SpawnDefaultHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnDefaultHUD()"
  },
  {
    "label": "CreateTouchInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTouchInterface()"
  },
  {
    "label": "CleanupGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupGameViewport()"
  },
  {
    "label": "AcknowledgePossession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcknowledgePossession(class APawn* P)"
  },
  {
    "label": "PawnLeavingGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PawnLeavingGame()"
  },
  {
    "label": "UpdatePing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePing(float InPing)"
  },
  {
    "label": "ViewAPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ViewAPlayer(int32 dir)"
  },
  {
    "label": "CanRestartPlayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRestartPlayer()"
  },
  {
    "label": "SetCinematicMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)"
  },
  {
    "label": "UpdateCameraManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraManager(float DeltaSeconds)"
  },
  {
    "label": "ReceivedGameModeClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedGameModeClass(TSubclassOf<class AGameModeBase> GameModeClass)"
  },
  {
    "label": "NotifyServerReceivedClientData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyServerReceivedClientData(APawn* InPawn, float TimeStamp)"
  },
  {
    "label": "StartSpectatingOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSpectatingOnly()"
  },
  {
    "label": "DefaultCanUnpause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DefaultCanUnpause()"
  },
  {
    "label": "HasClientLoadedCurrentWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasClientLoadedCurrentWorld()"
  },
  {
    "label": "ForceSingleNetUpdateFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceSingleNetUpdateFor(class AActor* Target)"
  },
  {
    "label": "AutoManageActiveCameraTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoManageActiveCameraTarget(AActor* SuggestedTarget)"
  },
  {
    "label": "OnServerStartedVisualLogger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnServerStartedVisualLogger(bool bIsLogging)"
  },
  {
    "label": "SetShowMouseCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowMouseCursor(bool bShow)"
  },
  {
    "label": "ReceivedSpectatorClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedSpectatorClass(TSubclassOf<ASpectatorPawn> SpectatorClass)"
  },
  {
    "label": "BeginSpectatingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSpectatingState()"
  },
  {
    "label": "EndSpectatingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSpectatingState()"
  },
  {
    "label": "SetSpectatorPawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpectatorPawn(ASpectatorPawn* NewSpectatorPawn)"
  },
  {
    "label": "DestroySpectatorPawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySpectatorPawn()"
  },
  {
    "label": "SetSpawnLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpawnLocation(const FVector& NewLocation)"
  },
  {
    "label": "ReceivedPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedPlayer()"
  },
  {
    "label": "InitInputSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitInputSystem()"
  },
  {
    "label": "IsFrozen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFrozen()"
  },
  {
    "label": "PreClientTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreClientTravel(const FString& PendingURL, ETravelType TravelType, bool bIsSeamlessTravel)"
  },
  {
    "label": "SetCameraMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraMode(FName NewCamMode)"
  },
  {
    "label": "ResetCameraMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCameraMode()"
  },
  {
    "label": "SendClientAdjustment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendClientAdjustment()"
  },
  {
    "label": "PushClientInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushClientInput(int32 ClientInputFrame, TArray<uint8>& Data)"
  },
  {
    "label": "ServerRecvClientInputFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerRecvClientInputFrame(int32 RecvClientInputFrame, const TArray<uint8>& Data)"
  },
  {
    "label": "ClientRecvServerAckFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientRecvServerAckFrame(int32 LastProcessedInputFrame, int32 RecvServerFrameNumber, int8 TimeDilation)"
  },
  {
    "label": "ClientRecvServerAckFrameDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientRecvServerAckFrameDebug(uint8 NumBuffered, float TargetNumBufferedCmds)"
  },
  {
    "label": "ClientCorrectionAsyncPhysicsTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCorrectionAsyncPhysicsTimestamp(FAsyncPhysicsTimestamp Timestamp)"
  },
  {
    "label": "GetAsyncPhysicsTimestamp()",
    "kind": "Method",
    "detail": "Function (FAsyncPhysicsTimestamp)",
    "insertText": "GetAsyncPhysicsTimestamp(float DeltaSeconds = 0.f)"
  },
  {
    "label": "UpdateServerTimestampToCorrect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateServerTimestampToCorrect()"
  },
  {
    "label": "UpdateServerAsyncPhysicsTickOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateServerAsyncPhysicsTickOffset()"
  },
  {
    "label": "ServerSendLatestAsyncPhysicsTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerSendLatestAsyncPhysicsTimestamp(FAsyncPhysicsTimestamp Timestamp)"
  },
  {
    "label": "ClientSetupNetworkPhysicsTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientSetupNetworkPhysicsTimestamp(FAsyncPhysicsTimestamp Timestamp)"
  },
  {
    "label": "ClientAckTimeDilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAckTimeDilation(float TimeDilation, int32 ServerStep)"
  },
  {
    "label": "GetPhysicsTimestamp()",
    "kind": "Method",
    "detail": "Function (FAsyncPhysicsTimestamp)",
    "insertText": "GetPhysicsTimestamp(float DeltaSeconds = 0.0f)"
  }
]