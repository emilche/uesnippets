[
  {
    "label": "ACameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACameraActor"
  },
  {
    "label": "AHUD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AHUD"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "ASpectatorPawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASpectatorPawn"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UActorChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorChannel"
  },
  {
    "label": "UCheatManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCheatManager"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "UInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputComponent"
  },
  {
    "label": "ULocalMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalMessage"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayer"
  },
  {
    "label": "UPlayerInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayerInput"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FActiveForceFeedbackEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveForceFeedbackEffect"
  },
  {
    "label": "FActiveHapticFeedbackEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveHapticFeedbackEffect"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FForceFeedbackEffectHistoryEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForceFeedbackEffectHistoryEntry"
  },
  {
    "label": "FInputKeyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputKeyParams"
  },
  {
    "label": "FPlatformUserId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformUserId"
  },
  {
    "label": "UAsyncPhysicsInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAsyncPhysicsInputComponent"
  },
  {
    "label": "FDynamicForceFeedbackDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicForceFeedbackDetails"
  },
  {
    "label": "FInputModeDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputModeDataBase"
  },
  {
    "label": "FReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReply"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FInputModeUIOnly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputModeUIOnly"
  },
  {
    "label": "FUpdateLevelStreamingLevelStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateLevelStreamingLevelStatus"
  },
  {
    "label": "FInputModeGameAndUI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputModeGameAndUI"
  },
  {
    "label": "FInputModeGameOnly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputModeGameOnly"
  },
  {
    "label": "FAsyncPhysicsTimestamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPhysicsTimestamp"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FDynamicForceFeedbackAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicForceFeedbackAction"
  },
  {
    "label": "FLatentDynamicForceFeedbackAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLatentDynamicForceFeedbackAction"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "FUniqueNetId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniqueNetId"
  },
  {
    "label": "UCameraShakeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeBase"
  },
  {
    "label": "UCameraShakeSourceComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeSourceComponent"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "FViewTargetTransitionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewTargetTransitionParams"
  },
  {
    "label": "AEmitterCameraLensEffectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AEmitterCameraLensEffectBase"
  },
  {
    "label": "UForceFeedbackEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UForceFeedbackEffect"
  },
  {
    "label": "UHapticFeedbackEffect_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHapticFeedbackEffect_Base"
  },
  {
    "label": "ETravelType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETravelType"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UTouchInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTouchInterface"
  },
  {
    "label": "EViewTargetBlendFunction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EViewTargetBlendFunction"
  },
  {
    "label": "SVirtualJoystick",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVirtualJoystick"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "UDamageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDamageType"
  },
  {
    "label": "FInBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInBunch"
  },
  {
    "label": "FOutBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutBunch"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "AGameModeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameModeBase"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SlateFwd . h \" # include \" UObject / ObjectMacros . h \" # include \" Containers / SortedMap . h \" # include \" Containers / StaticArray . h \" # include \" Misc / Guid . h \" # include \" InputCoreTypes . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / NetSerialization . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / EngineBaseTypes . h \" # include \" Engine / LatentActionManager . h \" # include \" SceneTypes . h \" # include \" GameFramework / Controller . h \" # include \" UObject / TextProperty . h \" # include \" GameFramework / PlayerMuteList . h \" # include \" Camera / PlayerCameraManager . h \" # include \" GameFramework / ForceFeedbackParameters . h \" # include \" GameFramework / UpdateLevelVisibilityLevelInfo . h \" # include \" GenericPlatform / ICursor . h \" # include \" GenericPlatform / IInputInterface . h \" # include \" Physics / AsyncPhysicsData . h \" # include \" WorldPartition / WorldPartitionStreamingSource . h \" # include \" EngineDefines . h \" # include \" PlayerController . generated . h \" class ACameraActor ; class AHUD ; class APawn ; class ASpectatorPawn ; class FDebugDisplayInfo ; class SWidget ; class UActorChannel ; class UCheatManager ; class UGameViewportClient ; class UInputComponent ; class ULocalMessage ; class UNetConnection ; class UPlayer ; class UPlayerInput ; class UPrimitiveComponent ; namespace EControllerAnalogStick { enum Type : int ; } struct FActiveForceFeedbackEffect ; struct FActiveHapticFeedbackEffect ; struct FCollisionQueryParams ; struct FForceFeedbackEffectHistoryEntry ; struct FInputKeyParams ; struct FPlatformUserId ; class UAsyncPhysicsInputComponent ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FCanUnpause)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FGetAudioListenerPos, FVector& , FVector& , FVector&)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogPlayerController, Log, All)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"PlayerController\"), STATGROUP_PlayerController, STATCAT_Advanced)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "FDynamicForceFeedbackDetails()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Start,Update,Stop,} ; } typedef uint64 FDynamicForceFeedbackHandle ; struct FDynamicForceFeedbackDetails { uint32 bAffectsLeftLarge : 1 ; uint32 bAffectsLeftSmall : 1 ; uint32 bAffectsRightLarge : 1 ; uint32 bAffectsRightSmall : 1 ; float Intensity ;)",
    "insertText": "FDynamicForceFeedbackDetails() : bAffectsLeftLarge(true) , bAffectsLeftSmall(true) , bAffectsRightLarge(true) , bAffectsRightSmall(true) , Intensity(0.f)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update(FForceFeedbackValues& Values)"
  },
  {
    "label": "FInputModeDataBase()",
    "kind": "Method",
    "detail": "Function (} ; struct FInputModeDataBase { protected : ~)",
    "insertText": "FInputModeDataBase()"
  },
  {
    "label": "ApplyInputMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyInputMode(class FReply& SlateOperations, class UGameViewportClient& GameViewportClient)"
  },
  {
    "label": "ShouldFlushInputOnViewportFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFlushInputOnViewportFocus()"
  },
  {
    "label": "GetDebugDisplayName()",
    "kind": "Method",
    "detail": "Function (class APlayerController ; public : # if UE_ENABLE_DEBUG_DRAWING const FString&)",
    "insertText": "GetDebugDisplayName()"
  },
  {
    "label": "SetWidgetToFocus()",
    "kind": "Method",
    "detail": "Function (# endif } ; struct FInputModeUIOnly : public FInputModeDataBase { FInputModeUIOnly&)",
    "insertText": "SetWidgetToFocus(TSharedPtr<SWidget> InWidgetToFocus)"
  },
  {
    "label": "SetLockMouseToViewportBehavior()",
    "kind": "Method",
    "detail": "Function (FInputModeUIOnly&)",
    "insertText": "SetLockMouseToViewportBehavior(EMouseLockMode InMouseLockMode)"
  },
  {
    "label": "FInputModeUIOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInputModeUIOnly() : WidgetToFocus() , MouseLockMode(EMouseLockMode::LockInFullscreen)"
  },
  {
    "label": "ApplyInputMode()",
    "kind": "Method",
    "detail": "Function (# endif protected : TSharedPtr<SWidget> WidgetToFocus ; EMouseLockMode MouseLockMode ; void)",
    "insertText": "ApplyInputMode(FReply& SlateOperations, class UGameViewportClient& GameViewportClient)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "SetHideCursorDuringCapture()",
    "kind": "Method",
    "detail": "Function (MouseLockMode = InMouseLockMode ; return* this ; } FInputModeGameAndUI&)",
    "insertText": "SetHideCursorDuringCapture(bool InHideCursorDuringCapture)"
  },
  {
    "label": "SetConsumeCaptureMouseDown()",
    "kind": "Method",
    "detail": "Function (} ; struct FInputModeGameOnly : public FInputModeDataBase { FInputModeGameOnly&)",
    "insertText": "SetConsumeCaptureMouseDown(bool InConsumeCaptureMouseDown)"
  },
  {
    "label": "FInputModeGameOnly()",
    "kind": "Method",
    "detail": "Function (bConsumeCaptureMouseDown = InConsumeCaptureMouseDown ; return* this ; })",
    "insertText": "FInputModeGameOnly() : bConsumeCaptureMouseDown(true)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() bool IsValid()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config=Game, BlueprintType, Blueprintable, meta=(ShortTooltip=\"A Player Controller is an actor responsible for controlling a Pawn used by the player.\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API APlayerController(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "SetTargetViewRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetViewRotation(const FRotator& InRotation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "BeginReplication()",
    "kind": "Method",
    "detail": "Function (# endif protected : # if UE_WITH_IRIS void)",
    "insertText": "BeginReplication()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (# endif private : struct FDynamicForceFeedbackAction { float TotalTime ; float TimeElapsed ; FDynamicForceFeedbackDetails ForceFeedbackDetails ; FDynamicForceFeedbackHandle Handle ; FDynamicForceFeedbackHandle HandleAllocator ; bool)",
    "insertText": "Update(const float DeltaTime, FForceFeedbackValues& Values)"
  },
  {
    "label": "UnFreeze()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnFreeze()"
  },
  {
    "label": "GetMinRespawnDelay()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinRespawnDelay()"
  },
  {
    "label": "SetPause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPause(bool bPause, FCanUnpause CanUnpauseDelegate = FCanUnpause())"
  },
  {
    "label": "NotifyLoadedWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLoadedWorld(FName WorldPackageName, bool bFinalDest)"
  },
  {
    "label": "PlayerTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayerTick(float DeltaTime)"
  },
  {
    "label": "PreProcessInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreProcessInput(const float DeltaTime, const bool bGamePaused)"
  },
  {
    "label": "PostProcessInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProcessInput(const float DeltaTime, const bool bGamePaused)"
  },
  {
    "label": "SetCinematicMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning)"
  },
  {
    "label": "ResetIgnoreInputFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetIgnoreInputFlags()"
  },
  {
    "label": "GetHitResultAtScreenPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHitResultAtScreenPosition(const FVector2D ScreenPosition, const ECollisionChannel TraceChannel, const FCollisionQueryParams& CollisionQueryParams, FHitResult& HitResult)"
  },
  {
    "label": "GetHitResultAtScreenPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHitResultAtScreenPosition(const FVector2D ScreenPosition, const ECollisionChannel TraceChannel, bool bTraceComplex, FHitResult& HitResult)"
  },
  {
    "label": "GetHitResultAtScreenPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHitResultAtScreenPosition(const FVector2D ScreenPosition, const ETraceTypeQuery TraceChannel, bool bTraceComplex, FHitResult& HitResult)"
  },
  {
    "label": "GetHitResultAtScreenPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHitResultAtScreenPosition(const FVector2D ScreenPosition, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, bool bTraceComplex, FHitResult& HitResult)"
  },
  {
    "label": "ProjectWorldLocationToScreenWithDistance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProjectWorldLocationToScreenWithDistance(FVector WorldLocation, FVector& ScreenLocation, bool bPlayerViewportRelative = false)"
  },
  {
    "label": "PostProcessWorldToScreen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostProcessWorldToScreen(FVector WorldLocation, FVector2D& ScreenLocation, bool bPlayerViewportRelative)"
  },
  {
    "label": "UpdateRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRotation(float DeltaTime)"
  },
  {
    "label": "GetStreamingSources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStreamingSources(TArray<FWorldPartitionStreamingSource>& OutStreamingSources)"
  },
  {
    "label": "GetStreamingSourcesInternal()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "GetStreamingSourcesInternal(TArray<FWorldPartitionStreamingSource>& OutStreamingSources)"
  },
  {
    "label": "GetStreamingSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStreamingSource(FWorldPartitionStreamingSource& OutStreamingSource)"
  },
  {
    "label": "GetStreamingSourceOwner()",
    "kind": "Method",
    "detail": "Function (const UObject*)",
    "insertText": "GetStreamingSourceOwner()"
  },
  {
    "label": "EndPlayingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlayingState()"
  },
  {
    "label": "HasNetOwner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNetOwner()"
  },
  {
    "label": "LevelStreamingStatusChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LevelStreamingStatusChanged(class ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32 LODIndex)"
  },
  {
    "label": "LevelStreamingStatusChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LevelStreamingStatusChanged(class ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, bool bNewShouldBlockOnUnload, int32 LODIndex)"
  },
  {
    "label": "DelayedPrepareMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayedPrepareMapChange()"
  },
  {
    "label": "GetSeamlessTravelActorList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>& ActorList)"
  },
  {
    "label": "SeamlessTravelTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeamlessTravelTo(class APlayerController* NewPC)"
  },
  {
    "label": "SeamlessTravelFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeamlessTravelFrom(class APlayerController* OldPC)"
  },
  {
    "label": "PostSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSeamlessTravel()"
  },
  {
    "label": "OnAddedToPlayerControllerList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddedToPlayerControllerList()"
  },
  {
    "label": "OnRemovedFromPlayerControllerList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemovedFromPlayerControllerList()"
  },
  {
    "label": "StartTalking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTalking()"
  },
  {
    "label": "StopTalking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTalking()"
  },
  {
    "label": "GameplayMutePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameplayMutePlayer(const FUniqueNetIdRepl& PlayerNetId)"
  },
  {
    "label": "GameplayUnmutePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameplayUnmutePlayer(const FUniqueNetIdRepl& PlayerNetId)"
  },
  {
    "label": "GameplayUnmuteAllPlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameplayUnmuteAllPlayers()"
  },
  {
    "label": "GetPlayerControllerForMuting()",
    "kind": "Method",
    "detail": "Function (class APlayerController*)",
    "insertText": "GetPlayerControllerForMuting(const FUniqueNetIdRepl& PlayerNetId)"
  },
  {
    "label": "IsPlayerMuted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayerMuted(const class FUniqueNetId& PlayerId)"
  },
  {
    "label": "GetHUD()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetHUD()"
  },
  {
    "label": "ClientPlayForceFeedback()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, FForceFeedbackParameters Params = FForceFeedbackParameters())"
  },
  {
    "label": "ClientPlayForceFeedback_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientPlayForceFeedback_Internal(ForceFeedbackEffect, Params)"
  },
  {
    "label": "PlayDynamicForceFeedback()",
    "kind": "Method",
    "detail": "Function (public : FDynamicForceFeedbackHandle)",
    "insertText": "PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, EDynamicForceFeedbackAction::Type Action = EDynamicForceFeedbackAction::Start, FDynamicForceFeedbackHandle ActionHandle = 0)"
  },
  {
    "label": "SafeRetryClientRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeRetryClientRestart()"
  },
  {
    "label": "SafeServerUpdateSpectatorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeServerUpdateSpectatorState()"
  },
  {
    "label": "SafeServerCheckClientPossession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeServerCheckClientPossession()"
  },
  {
    "label": "GetInputTouchState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInputTouchState(ETouchIndex::Type FingerIndex, double& LocationX, double& LocationY, bool& bIsCurrentlyPressed)"
  },
  {
    "label": "GetMousePosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMousePosition(double& LocationX, double& LocationY)"
  },
  {
    "label": "GetInputMouseDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInputMouseDelta(double& DeltaX, double& DeltaY)"
  },
  {
    "label": "GetInputAnalogStickState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInputAnalogStickState(EControllerAnalogStick::Type WhichStick, double& StickX, double& StickY)"
  },
  {
    "label": "SetInputMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputMode(const FInputModeDataBase& InData)"
  },
  {
    "label": "IncludeInNetConditionGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncludeInNetConditionGroup(FName NetGroup)"
  },
  {
    "label": "RemoveFromNetConditionGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromNetConditionGroup(FName NetGroup)"
  },
  {
    "label": "IsMemberOfNetConditionGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMemberOfNetConditionGroup(FName NetGroup)"
  },
  {
    "label": "GetNetConditionGroups()",
    "kind": "Method",
    "detail": "Function (} const TArray<FName>&)",
    "insertText": "GetNetConditionGroups()"
  },
  {
    "label": "SetupInactiveStateInputComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupInactiveStateInputComponent(UInputComponent* InComponent)"
  },
  {
    "label": "UpdateStateInputComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStateInputComponents()"
  },
  {
    "label": "CreateVirtualJoystick()",
    "kind": "Method",
    "detail": "Function (private : uint32 bInputEnabled : 1 ; protected : TSharedPtr<class SVirtualJoystick> VirtualJoystick ; TSharedPtr<class SVirtualJoystick>)",
    "insertText": "CreateVirtualJoystick()"
  },
  {
    "label": "PushInputComponent()",
    "kind": "Method",
    "detail": "Function (FTimerHandle TimerHandle_UnFreeze ; private : FTimerHandle TimerHandle_DelayedPrepareMapChange ; FTimerHandle TimerHandle_ClientCommitMapChange ; public : void)",
    "insertText": "PushInputComponent(UInputComponent* Input)"
  },
  {
    "label": "PopInputComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopInputComponent(UInputComponent* Input)"
  },
  {
    "label": "IsInputComponentInStack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInputComponentInStack(const UInputComponent* Input)"
  },
  {
    "label": "FlushPressedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPressedKeys()"
  },
  {
    "label": "ShouldFlushKeysWhenViewportFocusChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFlushKeysWhenViewportFocusChanges()"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(const FInputKeyParams& Params)"
  },
  {
    "label": "InputTouch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputTouch(uint32 Handle, ETouchType::Type Type, const FVector2D& TouchLocation, float Force, FDateTime DeviceTimestamp, uint32 TouchpadIndex)"
  },
  {
    "label": "InputMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputMotion(const FVector& Tilt, const FVector& RotationRate, const FVector& Gravity, const FVector& Acceleration)"
  },
  {
    "label": "SetPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayer(UPlayer* InPlayer)"
  },
  {
    "label": "GetLocalPlayer()",
    "kind": "Method",
    "detail": "Function (class ULocalPlayer*)",
    "insertText": "GetLocalPlayer()"
  },
  {
    "label": "SmoothTargetViewRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SmoothTargetViewRotation(APawn* TargetPawn, float DeltaSeconds)"
  },
  {
    "label": "ConsoleCommand()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConsoleCommand(const FString& Command, bool bWriteToLog = true)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLifetimeReplicatedProps(TArray< FLifetimeProperty > & OutLifetimeProps)"
  },
  {
    "label": "GetActorEyesViewPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorEyesViewPoint(FVector& Location, FRotator& Rotation)"
  },
  {
    "label": "CalcCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcCamera(float DeltaTime, struct FMinimalViewInfo& OutResult)"
  },
  {
    "label": "TickActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickActor(float DeltaTime, enum ELevelTick TickType, FActorTickFunction& ThisTickFunction)"
  },
  {
    "label": "IsNetRelevantFor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNetRelevantFor(const AActor* RealViewer, const AActor* ViewTarget, const FVector& SrcLocation)"
  },
  {
    "label": "FellOutOfWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FellOutOfWorld(const class UDamageType& dmgType)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "OnPossess()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnPossess(APawn* aPawn)"
  },
  {
    "label": "OnUnPossess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnPossess()"
  },
  {
    "label": "CleanupPlayerState()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "CleanupPlayerState()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "Destroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroyed()"
  },
  {
    "label": "OnActorChannelOpen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorChannelOpen(class FInBunch& InBunch, class UNetConnection* Connection)"
  },
  {
    "label": "UseShortConnectTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseShortConnectTimeout()"
  },
  {
    "label": "OnSerializeNewActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSerializeNewActor(class FOutBunch& OutBunch)"
  },
  {
    "label": "OnNetCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetCleanup(class UNetConnection* Connection)"
  },
  {
    "label": "GetNetPriority()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNetPriority(const FVector& ViewPos, const FVector& ViewDir, AActor* Viewer, AActor* ViewTarget, UActorChannel* InChannel, float Time, bool bLowBandwidth)"
  },
  {
    "label": "GetNetOwner()",
    "kind": "Method",
    "detail": "Function (const AActor*)",
    "insertText": "GetNetOwner()"
  },
  {
    "label": "GetNetOwningPlayer()",
    "kind": "Method",
    "detail": "Function (class UPlayer*)",
    "insertText": "GetNetOwningPlayer()"
  },
  {
    "label": "GetNetConnection()",
    "kind": "Method",
    "detail": "Function (class UNetConnection*)",
    "insertText": "GetNetConnection()"
  },
  {
    "label": "DestroyNetworkActorHandled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroyNetworkActorHandled()"
  },
  {
    "label": "DisplayDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebug(class UCanvas* Canvas, const FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos)"
  },
  {
    "label": "PostInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitializeComponents()"
  },
  {
    "label": "EnableInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableInput(class APlayerController* PlayerController)"
  },
  {
    "label": "DisableInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableInput(class APlayerController* PlayerController)"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "GameHasEnded()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "GameHasEnded(class AActor* EndGameFocus = nullptr, bool bIsWinner = false)"
  },
  {
    "label": "IsLocalController()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocalController()"
  },
  {
    "label": "GetPlayerViewPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlayerViewPoint(FVector& out_Location, FRotator& out_Rotation)"
  },
  {
    "label": "SetInitialLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialLocationAndRotation(const FVector& NewLocation, const FRotator& NewRotation)"
  },
  {
    "label": "ChangeState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeState(FName NewState)"
  },
  {
    "label": "GetViewTarget()",
    "kind": "Method",
    "detail": "Function (class AActor*)",
    "insertText": "GetViewTarget()"
  },
  {
    "label": "BeginInactiveState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginInactiveState()"
  },
  {
    "label": "EndInactiveState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndInactiveState()"
  },
  {
    "label": "FailedToSpawnPawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FailedToSpawnPawn()"
  },
  {
    "label": "SetPawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPawn(APawn* InPawn)"
  },
  {
    "label": "NotifyActorChannelFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorChannelFailure(UActorChannel* ActorChan)"
  },
  {
    "label": "UpdateHiddenActors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateHiddenActors(const FVector& ViewLocation)"
  },
  {
    "label": "UpdateHiddenComponents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateHiddenComponents(const FVector& ViewLocation, TSet<FPrimitiveComponentId>&)"
  },
  {
    "label": "BuildHiddenComponentList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildHiddenComponentList(const FVector& ViewLocation, TSet<FPrimitiveComponentId>& HiddenComponentsOut)"
  },
  {
    "label": "SpawnPlayerCameraManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnPlayerCameraManager()"
  },
  {
    "label": "GetAudioListenerPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAudioListenerPosition(FVector& OutLocation, FVector& OutFrontDir, FVector& OutRightDir)"
  },
  {
    "label": "GetAudioListenerAttenuationOverridePosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAudioListenerAttenuationOverridePosition(FVector& OutLocation)"
  },
  {
    "label": "TickPlayerInput()",
    "kind": "Method",
    "detail": "Function (protected : uint32 bOverrideAudioListener : 1 ; uint32 bOverrideAudioAttenuationListener : 1 ; TWeakObjectPtr<USceneComponent> AudioListenerComponent ; TWeakObjectPtr<USceneComponent> AudioListenerAttenuationComponent ; FVector AudioListenerLocationOverride ; FRotator AudioListenerRotationOverride ; FVector AudioListenerAttenuationOverride ; void)",
    "insertText": "TickPlayerInput(const float DeltaSeconds, const bool bGamePaused)"
  },
  {
    "label": "ProcessPlayerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPlayerInput(const float DeltaTime, const bool bGamePaused)"
  },
  {
    "label": "BuildInputStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildInputStack(TArray<UInputComponent*>& InputStack)"
  },
  {
    "label": "ProcessForceFeedbackAndHaptics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessForceFeedbackAndHaptics(const float DeltaTime, const bool bGamePaused)"
  },
  {
    "label": "UpdateForceFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateForceFeedback(IInputInterface* InputInterface, const int32 ControllerId)"
  },
  {
    "label": "IsInViewportClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInViewportClient(UGameViewportClient* ViewportClient)"
  },
  {
    "label": "GetInputIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInputIndex()"
  },
  {
    "label": "GetAutoActivateCameraForPlayer()",
    "kind": "Method",
    "detail": "Function (ACameraActor*)",
    "insertText": "GetAutoActivateCameraForPlayer()"
  },
  {
    "label": "SetupInputComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupInputComponent()"
  },
  {
    "label": "SetNetSpeed()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetNetSpeed(int32 NewSpeed)"
  },
  {
    "label": "GetPlayerNetworkAddress()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPlayerNetworkAddress()"
  },
  {
    "label": "GetServerNetworkAddress()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetServerNetworkAddress()"
  },
  {
    "label": "NetworkRemapPath()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NetworkRemapPath(FName InPackageName, bool bReading)"
  },
  {
    "label": "CleanUpAudioComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpAudioComponents()"
  },
  {
    "label": "AddCheats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCheats(bool bForce = false)"
  },
  {
    "label": "SpawnDefaultHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnDefaultHUD()"
  },
  {
    "label": "CreateTouchInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTouchInterface()"
  },
  {
    "label": "CleanupGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupGameViewport()"
  },
  {
    "label": "AcknowledgePossession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcknowledgePossession(class APawn* P)"
  },
  {
    "label": "PawnLeavingGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PawnLeavingGame()"
  },
  {
    "label": "UpdatePing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePing(float InPing)"
  },
  {
    "label": "GetNextViewablePlayer()",
    "kind": "Method",
    "detail": "Function (class APlayerState*)",
    "insertText": "GetNextViewablePlayer(int32 dir)"
  },
  {
    "label": "ViewAPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ViewAPlayer(int32 dir)"
  },
  {
    "label": "IsSplitscreenPlayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSplitscreenPlayer(int32* OutSplitscreenPlayerIndex = nullptr)"
  },
  {
    "label": "IsPrimaryPlayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrimaryPlayer()"
  },
  {
    "label": "GetSplitscreenPlayerByIndex()",
    "kind": "Method",
    "detail": "Function (class APlayerState*)",
    "insertText": "GetSplitscreenPlayerByIndex(int32 PlayerIndex = 1)"
  },
  {
    "label": "GetSplitscreenPlayerCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSplitscreenPlayerCount()"
  },
  {
    "label": "UpdateCameraManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraManager(float DeltaSeconds)"
  },
  {
    "label": "ReceivedGameModeClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedGameModeClass(TSubclassOf<class AGameModeBase> GameModeClass)"
  },
  {
    "label": "NotifyServerReceivedClientData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyServerReceivedClientData(APawn* InPawn, float TimeStamp)"
  },
  {
    "label": "StartSpectatingOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSpectatingOnly()"
  },
  {
    "label": "DefaultCanUnpause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DefaultCanUnpause()"
  },
  {
    "label": "IsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPaused()"
  },
  {
    "label": "InputEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputEnabled()"
  },
  {
    "label": "HasClientLoadedCurrentWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasClientLoadedCurrentWorld()"
  },
  {
    "label": "SetViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewTarget(class AActor* NewViewTarget, FViewTargetTransitionParams TransitionParams = FViewTargetTransitionParams())"
  },
  {
    "label": "AutoManageActiveCameraTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoManageActiveCameraTarget(AActor* SuggestedTarget)"
  },
  {
    "label": "SetShowMouseCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowMouseCursor(bool bShow)"
  },
  {
    "label": "ShouldShowMouseCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowMouseCursor()"
  },
  {
    "label": "GetMouseCursor()",
    "kind": "Method",
    "detail": "Function (EMouseCursor::Type)",
    "insertText": "GetMouseCursor()"
  },
  {
    "label": "ReceivedSpectatorClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedSpectatorClass(TSubclassOf<ASpectatorPawn> SpectatorClass)"
  },
  {
    "label": "BeginSpectatingState()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BeginSpectatingState()"
  },
  {
    "label": "EndSpectatingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSpectatingState()"
  },
  {
    "label": "SetSpectatorPawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpectatorPawn(ASpectatorPawn* NewSpectatorPawn)"
  },
  {
    "label": "SpawnSpectatorPawn()",
    "kind": "Method",
    "detail": "Function (ASpectatorPawn*)",
    "insertText": "SpawnSpectatorPawn()"
  },
  {
    "label": "DestroySpectatorPawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySpectatorPawn()"
  },
  {
    "label": "ShouldKeepCurrentPawnUponSpectating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldKeepCurrentPawnUponSpectating()"
  },
  {
    "label": "SetSpawnLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpawnLocation(const FVector& NewLocation)"
  },
  {
    "label": "GetSpawnLocation()",
    "kind": "Method",
    "detail": "Function (float LastMovementUpdateTime ; float LastMovementHitch ; public : FVector)",
    "insertText": "GetSpawnLocation()"
  },
  {
    "label": "InitInputSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitInputSystem()"
  },
  {
    "label": "IsFrozen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFrozen()"
  },
  {
    "label": "PreClientTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreClientTravel(const FString& PendingURL, ETravelType TravelType, bool bIsSeamlessTravel)"
  },
  {
    "label": "SetCameraMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraMode(FName NewCamMode)"
  },
  {
    "label": "ResetCameraMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCameraMode()"
  },
  {
    "label": "SendClientAdjustment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendClientAdjustment()"
  },
  {
    "label": "SetAsLocalPlayerController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsLocalPlayerController()"
  },
  {
    "label": "ShouldParticipateInSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (bIsLocalPlayerController = true ; } bool)",
    "insertText": "ShouldParticipateInSeamlessTravel()"
  },
  {
    "label": "HeadFrame()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS int32)",
    "insertText": "HeadFrame()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} TArray<uint8>&)",
    "insertText": "Write(int32 Frame)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (LastWritten =)",
    "insertText": "Max(Frame, LastWritten)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const TArray<uint8>&)",
    "insertText": "Get(int32 Frame)"
  },
  {
    "label": "FInputCmdBuffer()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS private : PRAGMA_DISABLE_DEPRECATION_WARNINGS int32 LastWritten = INDEX_NONE ; TStaticArray<TArray<uint8>,1 6> Buffer ; PRAGMA_ENABLE_DEPRECATION_WARNINGS public : PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FInputCmdBuffer()"
  },
  {
    "label": "FInputCmdBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInputCmdBuffer(const FInputCmdBuffer&)"
  },
  {
    "label": "FInputCmdBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInputCmdBuffer(FInputCmdBuffer&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInputCmdBuffer&)",
    "insertText": "operator(const FInputCmdBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInputCmdBuffer&)",
    "insertText": "operator(FInputCmdBuffer&&)"
  },
  {
    "label": "GetLocalFrameOffset()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS int32 LastRecvInputFrame = INDEX_NONE ; int32 LastProcessedInputFrame = INDEX_NONE ; int32 LastRecvServerFrame = INDEX_NONE ; int8 QuantizedTimeDilation = 1 ; float TargetNumBufferedCmds = 0 . f ; int32)",
    "insertText": "GetLocalFrameOffset()"
  },
  {
    "label": "FClientFrameInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FClientFrameInfo()"
  },
  {
    "label": "FClientFrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FClientFrameInfo(const FClientFrameInfo&)"
  },
  {
    "label": "FClientFrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FClientFrameInfo(FClientFrameInfo&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FClientFrameInfo&)",
    "insertText": "operator(const FClientFrameInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FClientFrameInfo&)",
    "insertText": "operator(FClientFrameInfo&&)"
  },
  {
    "label": "FServerFrameInfo()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS int32 LastProcessedInputFrame = INDEX_NONE ; int32 LastLocalFrame = INDEX_NONE ; int32 LastSentLocalFrame = INDEX_NONE ; float TargetTimeDilation = 1 . f ; int8 QuantizedTimeDilation = 1 ; float TargetNumBufferedCmds = 1 . f ; bool bFault = true ; PRAGMA_ENABLE_DEPRECATION_WARNINGS PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FServerFrameInfo()"
  },
  {
    "label": "FServerFrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FServerFrameInfo(const FServerFrameInfo&)"
  },
  {
    "label": "FServerFrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FServerFrameInfo(FServerFrameInfo&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FServerFrameInfo&)",
    "insertText": "operator(const FServerFrameInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FServerFrameInfo&)",
    "insertText": "operator(FServerFrameInfo&&)"
  },
  {
    "label": "UpdateServerAsyncPhysicsTickOffset()",
    "kind": "Method",
    "detail": "Function (private : int32 NetworkPhysicsTickOffset = 0 ; bool bNetworkPhysicsTickOffsetAssigned = false ; float TickOffsetSyncCountdown = 0 . f ; float NetworkPhysicsTickOffsetDesyncAccumulatedTime = 0 . 0 f ; public : void)",
    "insertText": "UpdateServerAsyncPhysicsTickOffset()"
  },
  {
    "label": "ExecuteAsyncPhysicsCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteAsyncPhysicsCommand(const FAsyncPhysicsTimestamp& AsyncPhysicsTimestamp, UObject* OwningObject, const TFunction<void()>& Command, const bool bEnableResim = true)"
  },
  {
    "label": "GetPhysicsTimestamp()",
    "kind": "Method",
    "detail": "Function (FAsyncPhysicsTimestamp)",
    "insertText": "GetPhysicsTimestamp(float DeltaSeconds = 0.0f)"
  },
  {
    "label": "GetNetworkPhysicsTickOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNetworkPhysicsTickOffset()"
  }
]