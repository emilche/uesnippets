[
  {
    "label": "FUnixFeedbackContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUnixFeedbackContext"
  },
  {
    "label": "FUnixFeedbackContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Containers / UnrealString . h \" # include \" CoreGlobals . h \" # include \" Misc / OutputDeviceRedirector . h \" # include \" Misc / OutputDeviceHelper . h \" # include \" Misc / App . h \" # include \" Misc / OutputDeviceConsole . h \" # include \" Misc / FeedbackContext . h \" # include<syslog . h> class FUnixFeedbackContext : public FFeedbackContext { FContextSupplier* Context ; public : int32 SlowTaskCount ;)",
    "insertText": "FUnixFeedbackContext() : FFeedbackContext() , Context( NULL ) , SlowTaskCount( 0)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category, double Time)"
  },
  {
    "label": "SerializeRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeRecord(const UE::FLogRecord& Record)"
  },
  {
    "label": "YesNof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "YesNof(const FText& Question)"
  },
  {
    "label": "BeginSlowTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSlowTask(const FText& Task, bool ShowProgressDialog, bool bShowCancelButton=false)"
  },
  {
    "label": "EndSlowTask()",
    "kind": "Method",
    "detail": "Function (GIsSlowTask = + + SlowTaskCount> 0 ; } void)",
    "insertText": "EndSlowTask()"
  },
  {
    "label": "StatusUpdate()",
    "kind": "Method",
    "detail": "Function (GIsSlowTask = - - SlowTaskCount> 0 ; } bool)",
    "insertText": "StatusUpdate(int32 Numerator, int32 Denominator, const FText& StatusText)"
  },
  {
    "label": "LogErrorToSysLog()",
    "kind": "Method",
    "detail": "Function (Context = InSupplier ; } private : void)",
    "insertText": "LogErrorToSysLog(const TCHAR* V, const FName& Category, double Time)"
  },
  {
    "label": "LogErrorRecordToSysLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogErrorRecordToSysLog(const UE::FLogRecord& Record)"
  }
]