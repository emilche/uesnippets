[
  {
    "label": "FTagDataNameKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTagDataNameKey"
  },
  {
    "label": "FTagData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTagData"
  },
  {
    "label": "FTagDataNameMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTagDataNameMap"
  },
  {
    "label": "FConstTagDataArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstTagDataArray"
  },
  {
    "label": "FTagDataArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTagDataArray"
  },
  {
    "label": "FTrackerTagSizeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackerTagSizeData"
  },
  {
    "label": "FThreadTagSizeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadTagSizeData"
  },
  {
    "label": "LLM_ENABLED_FULL_TAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / LowLevelMemTracker . h \" # if ENABLE_LOW_LEVEL_MEM_TRACKER # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SortedMap . h \" # include \" LowLevelMemoryUtils . h \" # ifndef LLM_ALLOW_NAMES_TAGS # define LLM_ALLOW_NAMES_TAGS 1 # endif # define)",
    "insertText": "LLM_ENABLED_FULL_TAGS(LLM_ALLOW_NAMES_TAGS || LLM_ALLOW_STATS || LLM_ALLOW_ASSETS_TAGS)"
  },
  {
    "label": "FTagDataNameKey()",
    "kind": "Method",
    "detail": "Function (namespace LLMPrivate { struct FTagDataNameKey { FName Name ; ELLMTagSet TagSet ;)",
    "insertText": "FTagDataNameKey(FName InName, ELLMTagSet InTagSet) : Name(InName), TagSet(InTagSet)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FTagDataNameKey& Key)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 HashPrime = 1 0 1 ; return)",
    "insertText": "GetTypeHash(Key.Name) + HashPrime * static_cast<uint32>(Key.TagSet)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FTagDataNameKey& A, const FTagDataNameKey& B)"
  },
  {
    "label": "FTagDataNameKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTagDataNameKey()"
  },
  {
    "label": "FTagData()",
    "kind": "Method",
    "detail": "Function (} ; class FTagData { public :)",
    "insertText": "FTagData(FName InName, ELLMTagSet InTagSet, FName InDisplayName, FName InParentName, FName InStatName, FName InSummaryStatName, bool bInHasEnumTag, ELLMTag InEnumTag, ETagReferenceSource InReferenceSource)"
  },
  {
    "label": "FTagData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTagData(FName InName, ELLMTagSet InTagSet, FName InDisplayName, const FTagData* InParent, FName InStatName, FName InSummaryStatName, bool bInHasEnumTag, ELLMTag InEnumTag, ETagReferenceSource InReferenceSource)"
  },
  {
    "label": "FTagData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTagData()"
  },
  {
    "label": "IsParentConstructed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParentConstructed()"
  },
  {
    "label": "IsFinishConstructed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFinishConstructed()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetDisplayPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDisplayPath(FStringBuilderBase& Result, int32 MaxLen=-1)"
  },
  {
    "label": "AppendDisplayPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendDisplayPath(FStringBuilderBase& Result, int32 MaxLen=-1)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (const FTagData*)",
    "insertText": "GetParent()"
  },
  {
    "label": "GetParentName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetParentName()"
  },
  {
    "label": "GetParentNameSafeBeforeFinishConstruct()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetParentNameSafeBeforeFinishConstruct()"
  },
  {
    "label": "GetStatName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetStatName()"
  },
  {
    "label": "GetSummaryStatName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSummaryStatName()"
  },
  {
    "label": "GetEnumTag()",
    "kind": "Method",
    "detail": "Function (ELLMTag)",
    "insertText": "GetEnumTag()"
  },
  {
    "label": "GetTagSet()",
    "kind": "Method",
    "detail": "Function (ELLMTagSet)",
    "insertText": "GetTagSet()"
  },
  {
    "label": "HasEnumTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEnumTag()"
  },
  {
    "label": "GetContainingEnumTagData()",
    "kind": "Method",
    "detail": "Function (const FTagData*)",
    "insertText": "GetContainingEnumTagData()"
  },
  {
    "label": "GetContainingEnum()",
    "kind": "Method",
    "detail": "Function (ELLMTag)",
    "insertText": "GetContainingEnum()"
  },
  {
    "label": "GetReferenceSource()",
    "kind": "Method",
    "detail": "Function (ETagReferenceSource)",
    "insertText": "GetReferenceSource()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "IsReportable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReportable()"
  },
  {
    "label": "IsStatsReportable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStatsReportable()"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParent(const FTagData* InParent)"
  },
  {
    "label": "SetIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIndex(int32 InIndex)"
  },
  {
    "label": "SetIsReportable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsReportable(bool bInReportable)"
  },
  {
    "label": "SetIsStatsReportable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsStatsReportable(bool bInReportable)"
  },
  {
    "label": "SetFinishConstructed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFinishConstructed()"
  },
  {
    "label": "FTagData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTagData(ELLMTag InEnumTag)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(FName InName)"
  },
  {
    "label": "SetDisplayName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplayName(FName InDisplayName)"
  },
  {
    "label": "SetStatName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStatName(FName InStatName)"
  },
  {
    "label": "SetSummaryStatName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSummaryStatName(FName InSummaryStatName)"
  },
  {
    "label": "SetParentName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentName(FName InParentName)"
  },
  {
    "label": "IsUsedAsDisplayParent()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsUsedAsDisplayParent()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (FName Name ; FName DisplayName ; union { const FTagData* Parent ; FName ParentName ; } ; FName StatName ; FName SummaryStatName ; int32 Index ; ELLMTag EnumTag ; ETagReferenceSource ReferenceSource ; ELLMTagSet TagSet ; bool bIsFinishConstructed ; bool bParentIsName ; bool bHasEnumTag ; bool bIsReportable ; } ; class FTagDataNameMap : public TMap<FTagDataNameKey,FTagData*,FDefaultSetLLMAllocator> { using TMap<FTagDataNameKey,FTagData*,FDefaultSetLLMAllocator>::TMap ; } ; class FConstTagDataArray : public TArray<const FTagData*,FDefaultLLMAllocator> { using TArray<const FTagData*,FDefaultLLMAllocator>::TArray ; } ; class FTagDataArray : public TArray<FTagData*,FDefaultLLMAllocator> { using TArray<FTagData*,FDefaultLLMAllocator>::TArray ; } ; } } UE::LLMPrivate::FTagData**)",
    "insertText": "GetData(UE::LLMPrivate::FTagDataArray& Array)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (} UE::LLMPrivate::FTagDataArray::SizeType)",
    "insertText": "GetNum(UE::LLMPrivate::FTagDataArray& Array)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} namespace UE { namespace LLMPrivate { struct FTrackerTagSizeData { int64 Size = 0 ; # if LLM_ENABLED_TRACK_PEAK_MEMORY int64 PeakSize = 0 ; # endif int64 SizeInSnapshot = 0 ; int64 ExternalAmount = 0 ; bool bExternalValid = false ; bool bExternalAddToTotal = false ; int64)",
    "insertText": "GetSize(UE::LLM::ESizeParams SizeParams)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int64 CurrentSize = Size ; # if LLM_ENABLED_TRACK_PEAK_MEMORY)",
    "insertText": "if(EnumHasAnyFlags(SizeParams, UE::LLM::ESizeParams::ReportPeak))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentSize = PeakSize ; } # endif)",
    "insertText": "if(EnumHasAnyFlags(SizeParams, UE::LLM::ESizeParams::RelativeToSnapshot))"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (CurrentSize = FMath::Clamp<)",
    "insertText": "int64(CurrentSize - SizeInSnapshot, 0, INT64_MAX)"
  },
  {
    "label": "CaptureSnapshot()",
    "kind": "Method",
    "detail": "Function (} return CurrentSize ; } ; void)",
    "insertText": "CaptureSnapshot()"
  },
  {
    "label": "ClearSnapshot()",
    "kind": "Method",
    "detail": "Function (SizeInSnapshot = Size ; } void)",
    "insertText": "ClearSnapshot()"
  },
  {
    "label": "LLMGetTagUniqueName()",
    "kind": "Method",
    "detail": "Function (SizeInSnapshot = 0 ; } } ; typedef TFastPointerLLMMap<const FTagData*,FTrackerTagSizeData> FTrackerTagSizeMap ; struct FThreadTagSizeData { const FTagData* TagData = nullptr ; int64 Size = 0 ; } ; typedef TSortedMap<int32,FThreadTagSizeData,FDefaultLLMAllocator> FThreadTagSizeMap ; } } FName)",
    "insertText": "LLMGetTagUniqueName(ELLMTag Tag)"
  }
]