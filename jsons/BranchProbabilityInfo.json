[
  {
    "label": "LoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfo"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "BranchProbabilityInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BranchProbabilityInfo"
  },
  {
    "label": "BranchProbabilityInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_BRANCHPROBABILITYINFO_H # define LLVM_ANALYSIS_BRANCHPROBABILITYINFO_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / IR / CFG . h \" # include \" llvm / InitializePasses . h \" # include \" llvm / Pass . h \" # include \" llvm / Support / BranchProbability . h \" namespace llvm { class LoopInfo ; class raw_ostream ; class BranchProbabilityInfo : public FunctionPass { public : char ID ;)",
    "insertText": "BranchProbabilityInfo() : FunctionPass(ID)"
  },
  {
    "label": "initializeBranchProbabilityInfoPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeBranchProbabilityInfoPass(*PassRegistry::getPassRegistry())"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnFunction(Function &F)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS, const Module *M = nullptr)"
  },
  {
    "label": "getEdgeProbability()",
    "kind": "Method",
    "detail": "Function (BranchProbability)",
    "insertText": "getEdgeProbability(const BasicBlock *Src, unsigned IndexInSuccessors)"
  },
  {
    "label": "getEdgeProbability()",
    "kind": "Method",
    "detail": "Function (BranchProbability)",
    "insertText": "getEdgeProbability(const BasicBlock *Src, const BasicBlock *Dst)"
  },
  {
    "label": "isEdgeHot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEdgeHot(const BasicBlock *Src, const BasicBlock *Dst)"
  },
  {
    "label": "getHotSucc()",
    "kind": "Method",
    "detail": "Function (BasicBlock*)",
    "insertText": "getHotSucc(BasicBlock *BB)"
  },
  {
    "label": "printEdgeProbability()",
    "kind": "Method",
    "detail": "Function (raw_ostream&)",
    "insertText": "printEdgeProbability(raw_ostream &OS, const BasicBlock *Src, const BasicBlock *Dst)"
  },
  {
    "label": "getEdgeWeight()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getEdgeWeight(const BasicBlock *Src, unsigned IndexInSuccessors)"
  },
  {
    "label": "getEdgeWeight()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getEdgeWeight(const BasicBlock *Src, const BasicBlock *Dst)"
  },
  {
    "label": "getEdgeWeight()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getEdgeWeight(const BasicBlock *Src, succ_const_iterator Dst)"
  },
  {
    "label": "setEdgeWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEdgeWeight(const BasicBlock *Src, unsigned IndexInSuccessors, uint32_t Weight)"
  },
  {
    "label": "getBranchWeightStackProtector()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getBranchWeightStackProtector(bool IsLikely)"
  },
  {
    "label": "getSumForBlock()",
    "kind": "Method",
    "detail": "Function (} private : typedef std::pair<const BasicBlock*,unsigned> Edge ; const uint32_t DEFAULT_WEIGHT = 1 6 ; DenseMap<Edge,uint32_t> Weights ; LoopInfo* LI ; Function* LastF ; SmallPtrSet<BasicBlock*,1 6> PostDominatedByUnreachable ; SmallPtrSet<BasicBlock*,1 6> PostDominatedByColdCall ; uint32_t)",
    "insertText": "getSumForBlock(const BasicBlock *BB)"
  },
  {
    "label": "calcUnreachableHeuristics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "calcUnreachableHeuristics(BasicBlock *BB)"
  },
  {
    "label": "calcMetadataWeights()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "calcMetadataWeights(BasicBlock *BB)"
  },
  {
    "label": "calcColdCallHeuristics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "calcColdCallHeuristics(BasicBlock *BB)"
  },
  {
    "label": "calcPointerHeuristics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "calcPointerHeuristics(BasicBlock *BB)"
  },
  {
    "label": "calcLoopBranchHeuristics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "calcLoopBranchHeuristics(BasicBlock *BB)"
  },
  {
    "label": "calcZeroHeuristics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "calcZeroHeuristics(BasicBlock *BB)"
  },
  {
    "label": "calcFloatingPointHeuristics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "calcFloatingPointHeuristics(BasicBlock *BB)"
  },
  {
    "label": "calcInvokeHeuristics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "calcInvokeHeuristics(BasicBlock *BB)"
  }
]