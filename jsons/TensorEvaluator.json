[
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorSelectOpBlockFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorSelectOpBlockFactory"
  },
  {
    "label": "XprType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XprType"
  },
  {
    "label": "PacketAccess()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_EVALUATOR_H # define EIGEN_CXX11_TENSOR_TENSOR_EVALUATOR_H namespace Eigen { template<Derived,Device> struct TensorEvaluator { typedef Derived::Index Index ; typedef Derived::Scalar Scalar ; typedef Derived::Scalar CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; typedef Derived::Dimensions Dimensions ; typedef Derived XprType ; const int PacketSize = PacketType<CoeffReturnType,Device>::size ; typedef internal::traits<Derived>::template MakePointer<Scalar>::Type TensorPointerType ; typedef StorageMemory<Scalar,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; const int NumCoords = internal::traits<Derived>::NumDimensions> 0 ? internal::traits<Derived>::NumDimensions : 0 ; enum { IsAligned = Derived::IsAligned,)",
    "insertText": "PacketAccess(PacketType<CoeffReturnType, Device>::size > 1)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::remove_const<Scalar>::type ScalarNoConst ; typedef internal::TensorBlockDescriptor<NumCoords,Index> TensorBlockDesc ; typedef internal::TensorBlockScratchAllocator<Device> TensorBlockScratch ; typedef internal::TensorMaterializedBlock<ScalarNoConst,NumCoords,Layout,Index> TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const Derived& m, const Device& device) : m_data(device.get((const_cast<TensorPointerType>(m.data())))), m_dims(m.dimensions()), m_device(device)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Dimensions&)",
    "insertText": "dimensions()"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "memcpy((void*)(m_device.get(dest)), m_device.get(m_data), m_dims.TotalSize() * sizeof(Scalar))"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_data != NULL)"
  },
  {
    "label": "partialPacket()",
    "kind": "Method",
    "detail": "Function (} template<PacketReturnTypeT> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::enable_if<internal::unpacket_traits<PacketReturnTypeT>::masked_load_available,PacketReturnTypeT>::type)",
    "insertText": "partialPacket(Index index, typename internal::unpacket_traits<PacketReturnTypeT>::mask_t umask)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int StoreMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "writePacket(Index index, const PacketReturnType& x)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(const array<DenseIndex, NumCoords>& coords)"
  },
  {
    "label": "IndexOfRowMajor()",
    "kind": "Method",
    "detail": "Function (} else { return m_data [ m_dims .)",
    "insertText": "IndexOfRowMajor(coords)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType&)",
    "insertText": "coeffRef(const array<DenseIndex, NumCoords>& coords)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "getResourceRequirements()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::TensorBlockResourceRequirements)",
    "insertText": "getResourceRequirements()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorBlock)",
    "insertText": "block(TensorBlockDesc& desc, TensorBlockScratch& scratch, bool = false)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(m_data != NULL)"
  },
  {
    "label": "writeBlock()",
    "kind": "Method",
    "detail": "Function (} template<TensorBlock> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "writeBlock(const TensorBlockDesc& desc, const TensorBlock& block)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (typedef TensorBlock::XprType TensorBlockExpr ; typedef internal::TensorBlockAssignment<Scalar,NumCoords,TensorBlockExpr,Index> TensorBlockAssign ;)",
    "insertText": "Run(TensorBlockAssign::target(desc.dimensions(), internal::strides<Layout>(m_dims), m_data, desc.offset()), block.expr())"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "loadConstant()",
    "kind": "Method",
    "detail": "Function (} # endif protected : EvaluatorPointerType m_data ; Dimensions m_dims ; const Device EIGEN_DEVICE_REF m_device ; } ; namespace { template<T> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE T)",
    "insertText": "loadConstant(const T* address)"
  },
  {
    "label": "loadConstant()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE double)",
    "insertText": "loadConstant(const double* address)"
  },
  {
    "label": "loadConstant()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Eigen::half)",
    "insertText": "loadConstant(const Eigen::half* address)"
  },
  {
    "label": "loadConstant()",
    "kind": "Method",
    "detail": "Function (} # endif # ifdef EIGEN_USE_SYCL template<cl::sycl::access::mode AcMd,T> T&)",
    "insertText": "loadConstant(const Eigen::TensorSycl::internal::RangeAccess<AcMd, T> &address)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockDescriptor<NumCoords,Index> TensorBlockDesc ; typedef internal::TensorBlockScratchAllocator<Device> TensorBlockScratch ; typedef internal::TensorMaterializedBlock<ScalarNoConst,NumCoords,Layout,Index> TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const Derived& m, const Device& device) : m_data(device.get(m.data())), m_dims(m.dimensions()), m_device(device)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "memcpy((void*)(m_device.get(data)),m_device.get(m_data), m_dims.TotalSize() * sizeof(Scalar))"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "index(static_cast<int>(Layout) == static_cast<int>(ColMajor)) ? m_dims.IndexOfColMajor(coords) : m_dims.IndexOfRowMajor(coords)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} # endif protected : EvaluatorPointerType m_data ; Dimensions m_dims ; const Device EIGEN_DEVICE_REF m_device ; } ; template<NullaryOp,ArgType,Device> struct TensorEvaluator<const TensorCwiseNullaryOp<NullaryOp,ArgType>,Device> { typedef TensorCwiseNullaryOp<NullaryOp,ArgType> XprType ;)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_functor(op.functor()), m_argImpl(op.nestedExpression(), device), m_wrapper()"
  },
  {
    "label": "EIGEN_USE_SYCL()",
    "kind": "Method",
    "detail": "Function (} typedef XprType::Index Index ; typedef XprType::Scalar Scalar ; typedef internal::traits<XprType>::Scalar CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; const int PacketSize = PacketType<CoeffReturnType,Device>::size ; typedef TensorEvaluator<ArgType,Device>::Dimensions Dimensions ; typedef StorageMemory<CoeffReturnType,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; enum { IsAligned = true,PacketAccess = internal::functor_traits<NullaryOp>::PacketAccess # ifdef)",
    "insertText": "EIGEN_USE_SYCL(PacketType<CoeffReturnType, Device>::size >1)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE bool)",
    "insertText": "evalSubExprsIfNeeded(EvaluatorPointerType)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} # endif private : const NullaryOp m_functor ; TensorEvaluator<ArgType,Device> m_argImpl ; const internal::nullary_wrapper<CoeffReturnType,NullaryOp> m_wrapper ; } ; template<UnaryOp,ArgType,Device> struct TensorEvaluator<const TensorCwiseUnaryOp<UnaryOp,ArgType>,Device> { typedef TensorCwiseUnaryOp<UnaryOp,ArgType> XprType ; enum { IsAligned = TensorEvaluator<ArgType,Device>::IsAligned,PacketAccess =)",
    "insertText": "int(TensorEvaluator<ArgType, Device>::PacketAccess) & int(internal::functor_traits<UnaryOp>::PacketAccess)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_device(device), m_functor(op.functor()), m_argImpl(op.nestedExpression(), device)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_argImpl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_argImpl .)",
    "insertText": "evalSubExprsIfNeededAsync(nullptr, [done](bool) { done(true); })"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (const double functor_cost = internal::functor_traits<UnaryOp>::Cost ; return m_argImpl .)",
    "insertText": "costPerCoeff(vectorized) + TensorOpCost(0, 0, functor_cost, vectorized, PacketSize)"
  },
  {
    "label": "getResourceRequirements()",
    "kind": "Method",
    "detail": "Function (const double functor_cost = internal::functor_traits<UnaryOp>::Cost ; return m_argImpl .)",
    "insertText": "getResourceRequirements().addCostPerCoeff( {0, 0, functor_cost / PacketSize})"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} # endif private : const Device EIGEN_DEVICE_REF m_device ; const UnaryOp m_functor ; TensorEvaluator<ArgType,Device> m_argImpl ; } ; template<BinaryOp,LeftArgType,RightArgType,Device> struct TensorEvaluator<const TensorCwiseBinaryOp<BinaryOp,LeftArgType,RightArgType>,Device> { typedef TensorCwiseBinaryOp<BinaryOp,LeftArgType,RightArgType> XprType ; enum { IsAligned =)",
    "insertText": "int(TensorEvaluator<LeftArgType, Device>::IsAligned) & int(TensorEvaluator<RightArgType, Device>::IsAligned), PacketAccess = int(TensorEvaluator<LeftArgType, Device>::PacketAccess) & int(TensorEvaluator<RightArgType, Device>::PacketAccess) & int(internal::functor_traits<BinaryOp>::PacketAccess), BlockAccess = int(TensorEvaluator<LeftArgType, Device>::BlockAccess) & int(TensorEvaluator<RightArgType, Device>::BlockAccess), PreferBlockAccess = int(TensorEvaluator<LeftArgType, Device>::PreferBlockAccess) | int(TensorEvaluator<RightArgType, Device>::PreferBlockAccess)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_device(device), m_functor(op.functor()), m_leftImpl(op.lhsExpression(), device), m_rightImpl(op.rhsExpression(), device)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((static_cast<int>(TensorEvaluator<LeftArgType, Device>::Layout) == static_cast<int>(TensorEvaluator<RightArgType, Device>::Layout) || internal::traits<XprType>::NumDimensions <= 1), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dimensions_match(m_leftImpl.dimensions(), m_rightImpl.dimensions()))"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_leftImpl .)",
    "insertText": "evalSubExprsIfNeededAsync(nullptr, [this, done](bool) { m_rightImpl.evalSubExprsIfNeededAsync(nullptr, [done](bool) { done(true); }); })"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (const double functor_cost = internal::functor_traits<BinaryOp>::Cost ; return m_leftImpl .)",
    "insertText": "costPerCoeff(vectorized) + m_rightImpl.costPerCoeff(vectorized) + TensorOpCost(0, 0, functor_cost, vectorized, PacketSize)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (const double functor_cost = internal::functor_traits<BinaryOp>::Cost ; return internal::)",
    "insertText": "merge(m_leftImpl.getResourceRequirements(), m_rightImpl.getResourceRequirements()) .addCostPerCoeff({0, 0, functor_cost / PacketSize})"
  },
  {
    "label": "DropDestinationBuffer()",
    "kind": "Method",
    "detail": "Function (desc .)",
    "insertText": "DropDestinationBuffer()"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} # endif private : const Device EIGEN_DEVICE_REF m_device ; const BinaryOp m_functor ; TensorEvaluator<LeftArgType,Device> m_leftImpl ; TensorEvaluator<RightArgType,Device> m_rightImpl ; } ; template<TernaryOp,Arg1Type,Arg2Type,Arg3Type,Device> struct TensorEvaluator<const TensorCwiseTernaryOp<TernaryOp,Arg1Type,Arg2Type,Arg3Type>,Device> { typedef TensorCwiseTernaryOp<TernaryOp,Arg1Type,Arg2Type,Arg3Type> XprType ; enum { IsAligned = TensorEvaluator<Arg1Type,Device>::IsAligned& TensorEvaluator<Arg2Type,Device>::IsAligned& TensorEvaluator<Arg3Type,Device>::IsAligned,PacketAccess = TensorEvaluator<Arg1Type,Device>::PacketAccess&& TensorEvaluator<Arg2Type,Device>::PacketAccess&& TensorEvaluator<Arg3Type,Device>::PacketAccess&& internal::functor_traits<TernaryOp>::PacketAccess,BlockAccess = false,PreferBlockAccess = TensorEvaluator<Arg1Type,Device>::PreferBlockAccess | | TensorEvaluator<Arg2Type,Device>::PreferBlockAccess | | TensorEvaluator<Arg3Type,Device>::PreferBlockAccess,Layout = TensorEvaluator<Arg1Type,Device>::Layout,CoordAccess = false,RawAccess = false } ;)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_functor(op.functor()), m_arg1Impl(op.arg1Expression(), device), m_arg2Impl(op.arg2Expression(), device), m_arg3Impl(op.arg3Expression(), device)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((static_cast<int>(TensorEvaluator<Arg1Type, Device>::Layout) == static_cast<int>(TensorEvaluator<Arg3Type, Device>::Layout) || internal::traits<XprType>::NumDimensions <= 1), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((internal::is_same<typename internal::traits<Arg1Type>::StorageKind, typename internal::traits<Arg2Type>::StorageKind>::value), STORAGE_KIND_MUST_MATCH) EIGEN_STATIC_ASSERT((internal::is_same<typename internal::traits<Arg1Type>::StorageKind, typename internal::traits<Arg3Type>::StorageKind>::value), STORAGE_KIND_MUST_MATCH) EIGEN_STATIC_ASSERT((internal::is_same<typename internal::traits<Arg1Type>::Index, typename internal::traits<Arg2Type>::Index>::value), STORAGE_INDEX_MUST_MATCH) EIGEN_STATIC_ASSERT((internal::is_same<typename internal::traits<Arg1Type>::Index, typename internal::traits<Arg3Type>::Index>::value), STORAGE_INDEX_MUST_MATCH) eigen_assert(dimensions_match(m_arg1Impl.dimensions(), m_arg2Impl.dimensions()) && dimensions_match(m_arg1Impl.dimensions(), m_arg3Impl.dimensions()))"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (const double functor_cost = internal::functor_traits<TernaryOp>::Cost ; return m_arg1Impl .)",
    "insertText": "costPerCoeff(vectorized) + m_arg2Impl.costPerCoeff(vectorized) + m_arg3Impl.costPerCoeff(vectorized) + TensorOpCost(0, 0, functor_cost, vectorized, PacketSize)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} # endif private : const TernaryOp m_functor ; TensorEvaluator<Arg1Type,Device> m_arg1Impl ; TensorEvaluator<Arg2Type,Device> m_arg2Impl ; TensorEvaluator<Arg3Type,Device> m_arg3Impl ; } ; template<IfArgType,ThenArgType,ElseArgType,Device> struct TensorEvaluator<const TensorSelectOp<IfArgType,ThenArgType,ElseArgType>,Device> { typedef TensorSelectOp<IfArgType,ThenArgType,ElseArgType> XprType ; typedef XprType::Scalar Scalar ; enum { IsAligned = TensorEvaluator<ThenArgType,Device>::IsAligned& TensorEvaluator<ElseArgType,Device>::IsAligned,PacketAccess = TensorEvaluator<ThenArgType,Device>::PacketAccess& TensorEvaluator<ElseArgType,Device>::PacketAccess& PacketType<Scalar,Device>::HasBlend,BlockAccess = TensorEvaluator<IfArgType,Device>::BlockAccess&& TensorEvaluator<ThenArgType,Device>::BlockAccess&& TensorEvaluator<ElseArgType,Device>::BlockAccess,PreferBlockAccess = TensorEvaluator<IfArgType,Device>::PreferBlockAccess | | TensorEvaluator<ThenArgType,Device>::PreferBlockAccess | | TensorEvaluator<ElseArgType,Device>::PreferBlockAccess,Layout = TensorEvaluator<IfArgType,Device>::Layout,CoordAccess = false,RawAccess = false } ;)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_condImpl(op.ifExpression(), device), m_thenImpl(op.thenExpression(), device), m_elseImpl(op.elseExpression(), device)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((static_cast<int>(TensorEvaluator<IfArgType, Device>::Layout) == static_cast<int>(TensorEvaluator<ThenArgType, Device>::Layout)), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((static_cast<int>(TensorEvaluator<IfArgType, Device>::Layout) == static_cast<int>(TensorEvaluator<ElseArgType, Device>::Layout)), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dimensions_match(m_condImpl.dimensions(), m_thenImpl.dimensions()))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dimensions_match(m_thenImpl.dimensions(), m_elseImpl.dimensions()))"
  },
  {
    "label": "expr()",
    "kind": "Method",
    "detail": "Function (} typedef XprType::Index Index ; typedef internal::traits<XprType>::Scalar CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; const int PacketSize = PacketType<CoeffReturnType,Device>::size ; typedef TensorEvaluator<IfArgType,Device>::Dimensions Dimensions ; typedef StorageMemory<CoeffReturnType,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; const int NumDims = internal::array_size<Dimensions>::value ; typedef internal::TensorBlockDescriptor<NumDims,Index> TensorBlockDesc ; typedef internal::TensorBlockScratchAllocator<Device> TensorBlockScratch ; typedef TensorEvaluator<const IfArgType,Device>::TensorBlock IfArgTensorBlock ; typedef TensorEvaluator<const ThenArgType,Device>::TensorBlock ThenArgTensorBlock ; typedef TensorEvaluator<const ElseArgType,Device>::TensorBlock ElseArgTensorBlock ; struct TensorSelectOpBlockFactory { template<IfArgXprType,ThenArgXprType,ElseArgXprType> struct XprType { typedef TensorSelectOp<const IfArgXprType,const ThenArgXprType,const ElseArgXprType> type ; } ; template<IfArgXprType,ThenArgXprType,ElseArgXprType> XprType<IfArgXprType,ThenArgXprType,ElseArgXprType>::type)",
    "insertText": "expr(const IfArgXprType& if_expr, const ThenArgXprType& then_expr, const ElseArgXprType& else_expr)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_condImpl .)",
    "insertText": "evalSubExprsIfNeeded(nullptr, [this, done](bool) { m_thenImpl.evalSubExprsIfNeeded(nullptr, [this, done](bool) { m_elseImpl.evalSubExprsIfNeeded(nullptr, [done](bool) { done(true); }); }); })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (internal::Selector<PacketSize> select ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(Index i = 0; i < PacketSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (select . select [ i ] = m_condImpl .)",
    "insertText": "coeff(index+i)"
  },
  {
    "label": "pblend()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "pblend(select, m_thenImpl.template packet<LoadMode>(index), m_elseImpl.template packet<LoadMode>(index))"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (auto merged_req = internal::)",
    "insertText": "merge(then_req, else_req)"
  },
  {
    "label": "cwiseMax()",
    "kind": "Method",
    "detail": "Function (merged_req . cost_per_coeff = then_req . cost_per_coeff .)",
    "insertText": "cwiseMax(else_req.cost_per_coeff)"
  }
]