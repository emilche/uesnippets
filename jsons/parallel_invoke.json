[
  {
    "label": "task_group_context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "task_group_context"
  },
  {
    "label": "function_invoker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "function_invoker"
  },
  {
    "label": "spawner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "spawner"
  },
  {
    "label": "parallel_invoke_helper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "parallel_invoke_helper"
  },
  {
    "label": "parallel_invoke_noop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "parallel_invoke_noop"
  },
  {
    "label": "parallel_invoke_cleaner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "parallel_invoke_cleaner"
  },
  {
    "label": "impl_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "impl_selector"
  },
  {
    "label": "task_group_context()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_parallel_invoke_H # define __TBB_parallel_invoke_H # include \" task . h \" # include \" tbb_profiling . h \" # if __TBB_VARIADIC_PARALLEL_INVOKE # include<utility> # endif namespace tbb { # if ! __TBB_TASK_GROUP_CONTEXT struct task_group_context {)",
    "insertText": "task_group_context(tbb::internal::string_index)"
  },
  {
    "label": "function_invoker()",
    "kind": "Method",
    "detail": "Function (} } ; # endif namespace internal { template<function> class function_invoker : public task { public :)",
    "insertText": "function_invoker(const function& _function) : my_function(_function)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (} private : const function& my_function ; task*)",
    "insertText": "execute()"
  },
  {
    "label": "my_function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "my_function()"
  },
  {
    "label": "set_ref_count()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_ref_count(N)"
  },
  {
    "label": "recycle_as_safe_continuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recycle_as_safe_continuation()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (internal::function_invoker<function2>* invoker2 =)",
    "insertText": "new(allocate_child()) internal::function_invoker<function2>(my_func2)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(invoker2, \"Child task allocation failed\")"
  },
  {
    "label": "spawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn(*invoker2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t n = N ;)",
    "insertText": "if(n>2)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (internal::function_invoker<function3>* invoker3 =)",
    "insertText": "new(allocate_child()) internal::function_invoker<function3>(my_func3)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(invoker3, \"Child task allocation failed\")"
  },
  {
    "label": "spawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn(*invoker3)"
  },
  {
    "label": "my_func1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "my_func1()"
  },
  {
    "label": "spawner()",
    "kind": "Method",
    "detail": "Function (is_recycled = true ; return NULL ; } } public :)",
    "insertText": "spawner(const function1& _func1, const function2& _func2, const function3& _func3) : my_func1(_func1), my_func2(_func2), my_func3(_func3), is_recycled(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; class parallel_invoke_helper : public empty_task { public : class parallel_invoke_noop { public : void)",
    "insertText": "operator() ()"
  },
  {
    "label": "parallel_invoke_helper()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "parallel_invoke_helper(int number_of_children)"
  },
  {
    "label": "set_ref_count()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_ref_count(number_of_children + 1)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_VARIADIC_PARALLEL_INVOKE void)",
    "insertText": "add_children()"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "add_children(tbb::task_group_context&)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (} template<function> void)",
    "insertText": "add_children(function&& _func)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (internal::function_invoker<function>* invoker =)",
    "insertText": "new(allocate_child()) internal::function_invoker<function>(std::forward<function>(_func))"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(invoker, \"Child task allocation failed\")"
  },
  {
    "label": "spawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn(*invoker)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (} template<function> void)",
    "insertText": "add_children(function&& _func, tbb::task_group_context&)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_children(std::forward<function>(_func))"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (} template<function1,function2,. . . function> void)",
    "insertText": "add_children(function1&& _func1, function2&& _func2, function&&... _func)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (parallel_invoke_noop noop ; typedef internal::spawner<2,function1,function2,parallel_invoke_noop> spawner_type ; spawner_type& sub_root =*)",
    "insertText": "new(allocate_child()) spawner_type(std::forward<function1>(_func1), std::forward<function2>(_func2), noop)"
  },
  {
    "label": "spawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn(sub_root)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_children(std::forward<function>(_func)...)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (} # else template<function> void)",
    "insertText": "add_children(const function &_func)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (internal::function_invoker<function>* invoker =)",
    "insertText": "new(allocate_child()) internal::function_invoker<function>(_func)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (} template<function1,function2> void)",
    "insertText": "add_children(const function1& _func1, const function2& _func2)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (parallel_invoke_noop noop ; internal::spawner<2,function1,function2,parallel_invoke_noop>& sub_root =*)",
    "insertText": "new(allocate_child())internal::spawner<2, function1, function2, parallel_invoke_noop>(_func1, _func2, noop)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (} template<function1,function2,function3> void)",
    "insertText": "add_children(const function1& _func1, const function2& _func2, const function3& _func3)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (internal::spawner<3,function1,function2,function3>& sub_root =*)",
    "insertText": "new(allocate_child())internal::spawner<3, function1, function2, function3>(_func1, _func2, _func3)"
  },
  {
    "label": "run_and_finish()",
    "kind": "Method",
    "detail": "Function (} # endif template<F0> void)",
    "insertText": "run_and_finish(const F0& f0)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (internal::function_invoker<F0>* invoker =)",
    "insertText": "new(allocate_child()) internal::function_invoker<F0>(f0)"
  },
  {
    "label": "spawn_and_wait_for_all()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn_and_wait_for_all(*invoker)"
  },
  {
    "label": "parallel_invoke_cleaner()",
    "kind": "Method",
    "detail": "Function (} } ; class parallel_invoke_cleaner : internal::no_copy { public : # if __TBB_TASK_GROUP_CONTEXT)",
    "insertText": "parallel_invoke_cleaner(int number_of_children, tbb::task_group_context& context) : root(*new(task::allocate_root(context)) internal::parallel_invoke_helper(number_of_children)) #else parallel_invoke_cleaner(int number_of_children, tbb::task_group_context&) : root(*new(task::allocate_root()) internal::parallel_invoke_helper(number_of_children))"
  },
  {
    "label": "parallel_invoke_cleaner()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "parallel_invoke_cleaner()"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (root .)",
    "insertText": "destroy(root)"
  },
  {
    "label": "get_context()",
    "kind": "Method",
    "detail": "Function (} internal::parallel_invoke_helper& root ; } ; # if __TBB_VARIADIC_PARALLEL_INVOKE template<. . . T> struct impl_selector ; template<T1,. . . T> struct impl_selector<T1,T . . .> { typedef impl_selector<T . . .>::type type ; } ; template<T> struct impl_selector<T> { typedef false_type type ; } ; template<> struct impl_selector<task_group_context&> { typedef true_type type ; } ; task_group_context&)",
    "insertText": "get_context(task_group_context& tgc)"
  },
  {
    "label": "parallel_invoke_impl()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,. . . F> void)",
    "insertText": "parallel_invoke_impl(true_type, F0&& f0, F1&& f1, F&&... f)"
  },
  {
    "label": "__TBB_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_STATIC_ASSERT(sizeof...(F)>0, \"Variadic parallel_invoke implementation broken?\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const size_t number_of_children = 2 +)",
    "insertText": "sizeof(F)"
  },
  {
    "label": "cleaner()",
    "kind": "Method",
    "detail": "Function (parallel_invoke_cleaner)",
    "insertText": "cleaner(number_of_children, get_context(std::forward<F>(f)...))"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (parallel_invoke_helper& root = cleaner . root ; root .)",
    "insertText": "add_children(std::forward<F>(f)...)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (root .)",
    "insertText": "add_children(std::forward<F1>(f1))"
  },
  {
    "label": "run_and_finish()",
    "kind": "Method",
    "detail": "Function (root .)",
    "insertText": "run_and_finish(std::forward<F0>(f0))"
  },
  {
    "label": "parallel_invoke_impl()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,. . . F> void)",
    "insertText": "parallel_invoke_impl(false_type, F0&& f0, F1&& f1, F&&... f)"
  },
  {
    "label": "context()",
    "kind": "Method",
    "detail": "Function (tbb::task_group_context)",
    "insertText": "context(PARALLEL_INVOKE)"
  },
  {
    "label": "parallel_invoke_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_invoke_impl(true_type(), std::forward<F0>(f0), std::forward<F1>(f1), std::forward<F>(f)..., context)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} # endif } # if __TBB_VARIADIC_PARALLEL_INVOKE template<F0,F1,. . . F> void)",
    "insertText": "parallel_invoke(F0&& f0, F1&& f1, F&&... f)"
  },
  {
    "label": "parallel_invoke_impl()",
    "kind": "Method",
    "detail": "Function (typedef internal::impl_selector<internal::false_type,F . . .>::type selector_type ;)",
    "insertText": "parallel_invoke_impl(selector_type(), std::forward<F0>(f0), std::forward<F1>(f1), std::forward<F>(f)...)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} # else template<F0,F1> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, tbb::task_group_context& context)"
  },
  {
    "label": "cleaner()",
    "kind": "Method",
    "detail": "Function (internal::parallel_invoke_cleaner)",
    "insertText": "cleaner(2, context)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (internal::parallel_invoke_helper& root = cleaner . root ; root .)",
    "insertText": "add_children(f1)"
  },
  {
    "label": "run_and_finish()",
    "kind": "Method",
    "detail": "Function (root .)",
    "insertText": "run_and_finish(f0)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, tbb::task_group_context& context)"
  },
  {
    "label": "cleaner()",
    "kind": "Method",
    "detail": "Function (internal::parallel_invoke_cleaner)",
    "insertText": "cleaner(3, context)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (internal::parallel_invoke_helper& root = cleaner . root ; root .)",
    "insertText": "add_children(f2)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, tbb::task_group_context& context)"
  },
  {
    "label": "cleaner()",
    "kind": "Method",
    "detail": "Function (internal::parallel_invoke_cleaner)",
    "insertText": "cleaner(4, context)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (internal::parallel_invoke_helper& root = cleaner . root ; root .)",
    "insertText": "add_children(f3)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3,F4> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, const F4& f4, tbb::task_group_context& context)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (internal::parallel_invoke_helper& root = cleaner . root ; root .)",
    "insertText": "add_children(f4, f3)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (root .)",
    "insertText": "add_children(f2, f1)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3,F4,F5> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, const F4& f4, const F5& f5, tbb::task_group_context& context)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (internal::parallel_invoke_helper& root = cleaner . root ; root .)",
    "insertText": "add_children(f5, f4, f3)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3,F4,F5,F6> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, const F4& f4, const F5& f5, const F6& f6, tbb::task_group_context& context)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (internal::parallel_invoke_helper& root = cleaner . root ; root .)",
    "insertText": "add_children(f6, f5, f4)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (root .)",
    "insertText": "add_children(f3, f2, f1)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3,F4,F5,F6,F7> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, const F4& f4, const F5& f5, const F6& f6, const F7& f7, tbb::task_group_context& context)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (internal::parallel_invoke_helper& root = cleaner . root ; root .)",
    "insertText": "add_children(f7, f6, f5)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3,F4,F5,F6,F7,F8> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, const F4& f4, const F5& f5, const F6& f6, const F7& f7, const F8& f8, tbb::task_group_context& context)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (internal::parallel_invoke_helper& root = cleaner . root ; root .)",
    "insertText": "add_children(f8, f7, f6)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3,F4,F5,F6,F7,F8,F9> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, const F4& f4, const F5& f5, const F6& f6, const F7& f7, const F8& f8, const F9& f9, tbb::task_group_context& context)"
  },
  {
    "label": "add_children()",
    "kind": "Method",
    "detail": "Function (internal::parallel_invoke_helper& root = cleaner . root ; root .)",
    "insertText": "add_children(f9, f8, f7)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1)"
  },
  {
    "label": "context()",
    "kind": "Method",
    "detail": "Function (task_group_context)",
    "insertText": "context(internal::PARALLEL_INVOKE)"
  },
  {
    "label": "F1()",
    "kind": "Method",
    "detail": "Function (parallel_invoke<F0,)",
    "insertText": "F1(f0, f1, context)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2)"
  },
  {
    "label": "F2()",
    "kind": "Method",
    "detail": "Function (parallel_invoke<F0,F1,)",
    "insertText": "F2(f0, f1, f2, context)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3)"
  },
  {
    "label": "F3()",
    "kind": "Method",
    "detail": "Function (parallel_invoke<F0,F1,F2,)",
    "insertText": "F3(f0, f1, f2, f3, context)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3,F4> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, const F4& f4)"
  },
  {
    "label": "F4()",
    "kind": "Method",
    "detail": "Function (parallel_invoke<F0,F1,F2,F3,)",
    "insertText": "F4(f0, f1, f2, f3, f4, context)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3,F4,F5> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, const F4& f4, const F5& f5)"
  },
  {
    "label": "F5()",
    "kind": "Method",
    "detail": "Function (parallel_invoke<F0,F1,F2,F3,F4,)",
    "insertText": "F5(f0, f1, f2, f3, f4, f5, context)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3,F4,F5,F6> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, const F4& f4, const F5& f5, const F6& f6)"
  },
  {
    "label": "F6()",
    "kind": "Method",
    "detail": "Function (parallel_invoke<F0,F1,F2,F3,F4,F5,)",
    "insertText": "F6(f0, f1, f2, f3, f4, f5, f6, context)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3,F4,F5,F6,F7> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, const F4& f4, const F5& f5, const F6& f6, const F7& f7)"
  },
  {
    "label": "F7()",
    "kind": "Method",
    "detail": "Function (parallel_invoke<F0,F1,F2,F3,F4,F5,F6,)",
    "insertText": "F7(f0, f1, f2, f3, f4, f5, f6, f7, context)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3,F4,F5,F6,F7,F8> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, const F4& f4, const F5& f5, const F6& f6, const F7& f7, const F8& f8)"
  },
  {
    "label": "F8()",
    "kind": "Method",
    "detail": "Function (parallel_invoke<F0,F1,F2,F3,F4,F5,F6,F7,)",
    "insertText": "F8(f0, f1, f2, f3, f4, f5, f6, f7, f8, context)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (} template<F0,F1,F2,F3,F4,F5,F6,F7,F8,F9> void)",
    "insertText": "parallel_invoke(const F0& f0, const F1& f1, const F2& f2, const F3& f3, const F4& f4, const F5& f5, const F6& f6, const F7& f7, const F8& f8, const F9& f9)"
  },
  {
    "label": "F9()",
    "kind": "Method",
    "detail": "Function (parallel_invoke<F0,F1,F2,F3,F4,F5,F6,F7,F8,)",
    "insertText": "F9(f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, context)"
  }
]