[
  {
    "label": "TSimpTri",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimpTri"
  },
  {
    "label": "ESimpElementFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESimpElementFlags"
  },
  {
    "label": "TSimpVert",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimpVert"
  },
  {
    "label": "TSimpEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimpEdge"
  },
  {
    "label": "TSimpVert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UnrolledLinkList . h \" template<T> class TSimpTri ; enum ESimpElementFlags { SIMP_DEFAULT = 0,SIMP_REMOVED = 1<<0,SIMP_MARK1 = 1<<1,SIMP_MARK2 = 1<<2,SIMP_LOCKED = 1<<3,} ; template<T> class TSimpTri ; template<T> class TSimpVert { public :)",
    "insertText": "TSimpVert()"
  },
  {
    "label": "GetPos()",
    "kind": "Method",
    "detail": "Function (FVector3f&)",
    "insertText": "GetPos()"
  },
  {
    "label": "GetAttributes()",
    "kind": "Method",
    "detail": "Function (} float*)",
    "insertText": "GetAttributes()"
  },
  {
    "label": "EnableFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableFlags(uint32 f)"
  },
  {
    "label": "DisableFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableFlags(uint32 f)"
  },
  {
    "label": "TestFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestFlags(uint32 f)"
  },
  {
    "label": "EnableAdjVertFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAdjVertFlags(uint32 f)"
  },
  {
    "label": "DisableAdjVertFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAdjVertFlags(uint32 f)"
  },
  {
    "label": "EnableAdjTriFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAdjTriFlags(uint32 f)"
  },
  {
    "label": "DisableAdjTriFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAdjTriFlags(uint32 f)"
  },
  {
    "label": "FindAdjacentVerts()",
    "kind": "Method",
    "detail": "Function (template<Allocator> void)",
    "insertText": "FindAdjacentVerts(TArray< TSimpVert<T>*, Allocator >& adjVerts)"
  },
  {
    "label": "EnableFlagsGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFlagsGroup(uint32 f)"
  },
  {
    "label": "DisableFlagsGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableFlagsGroup(uint32 f)"
  },
  {
    "label": "EnableAdjVertFlagsGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAdjVertFlagsGroup(uint32 f)"
  },
  {
    "label": "DisableAdjVertFlagsGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAdjVertFlagsGroup(uint32 f)"
  },
  {
    "label": "EnableAdjTriFlagsGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAdjTriFlagsGroup(uint32 f)"
  },
  {
    "label": "DisableAdjTriFlagsGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAdjTriFlagsGroup(uint32 f)"
  },
  {
    "label": "FindAdjacentVertsGroup()",
    "kind": "Method",
    "detail": "Function (template<Allocator> void)",
    "insertText": "FindAdjacentVertsGroup(TArray< TSimpVert<T>*, Allocator >& adjVerts)"
  },
  {
    "label": "TSimpTri()",
    "kind": "Method",
    "detail": "Function (typedef TUnrolledLinkList<TSimpTri<T>*,8> TriList ; typedef TriList::TIterator TriIterator ; TSimpVert<T>* next ; TSimpVert<T>* prev ; uint32 flags ; T vert ; TriList adjTris ; } ; template<T> class TSimpTri { public :)",
    "insertText": "TSimpTri() : flags( SIMP_DEFAULT)"
  },
  {
    "label": "HasVertex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVertex(const TSimpVert<T>* v)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetNormal()"
  },
  {
    "label": "ReplaceVertexIsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceVertexIsValid(const TSimpVert<T>* oldV, const FVector3f& pos)"
  },
  {
    "label": "ReplaceVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceVertex(TSimpVert<T>* oldV, TSimpVert<T>* newV)"
  },
  {
    "label": "TSimpEdge()",
    "kind": "Method",
    "detail": "Function (TSimpVert<T>* verts [ 3 ] ; uint32 flags ; } ; template<T> class TSimpEdge { public :)",
    "insertText": "TSimpEdge()"
  },
  {
    "label": "TSimpVert()",
    "kind": "Method",
    "detail": "Function (TSimpEdge* next ; TSimpEdge* prev ; TSimpVert<T>* v0 ; TSimpVert<T>* v1 ; uint32 flags ; } ; template<T> TSimpVert<T)",
    "insertText": "TSimpVert() : flags( SIMP_DEFAULT)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (verts[j])",
    "insertText": "v(*i)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (adjVerts .)",
    "insertText": "AddUnique(v)"
  },
  {
    "label": "EnableFlags()",
    "kind": "Method",
    "detail": "Function (TSimpVert<T>* v = this ; do { v ->)",
    "insertText": "EnableFlags(f)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (v = v -> next ; })",
    "insertText": "while(v != this)"
  },
  {
    "label": "DisableFlags()",
    "kind": "Method",
    "detail": "Function (TSimpVert<T>* v = this ; do { v ->)",
    "insertText": "DisableFlags(f)"
  },
  {
    "label": "EnableAdjVertFlags()",
    "kind": "Method",
    "detail": "Function (TSimpVert<T>* v = this ; do { v ->)",
    "insertText": "EnableAdjVertFlags(f)"
  },
  {
    "label": "DisableAdjVertFlags()",
    "kind": "Method",
    "detail": "Function (TSimpVert<T>* v = this ; do { v ->)",
    "insertText": "DisableAdjVertFlags(f)"
  },
  {
    "label": "EnableAdjTriFlags()",
    "kind": "Method",
    "detail": "Function (TSimpVert<T>* v = this ; do { v ->)",
    "insertText": "EnableAdjTriFlags(f)"
  },
  {
    "label": "DisableAdjTriFlags()",
    "kind": "Method",
    "detail": "Function (TSimpVert<T>* v = this ; do { v ->)",
    "insertText": "DisableAdjTriFlags(f)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSimpVert<T>* v = this ; do {)",
    "insertText": "for(TriIterator i = adjTris.Begin(); i != adjTris.End(); ++i)"
  },
  {
    "label": "TriVert()",
    "kind": "Method",
    "detail": "Function (verts[j])",
    "insertText": "TriVert(*i)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (adjVerts .)",
    "insertText": "AddUnique(TriVert)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "n(verts[2]->GetPos() - verts[0]->GetPos() ) ^ ( verts[1]->GetPos() - verts[0]->GetPos())"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (n .)",
    "insertText": "Normalize()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 k ;)",
    "insertText": "if(oldV == verts[0])"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (const FVector3f& v1 = verts [)",
    "insertText": "k(1 << k) & 3 ]->GetPos()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FVector3f d21 = v2 - v1 ; const FVector3f d01 = v0 - v1 ; const FVector3f dp1 = pos - v1 ; FVector3f n0 = d01 ^ d21 ; FVector3f n1 = dp1 ^ d21 ;)",
    "insertText": "return(n0 | n1)"
  },
  {
    "label": "TSimpEdge()",
    "kind": "Method",
    "detail": "Function (} template<T> TSimpEdge<T)",
    "insertText": "TSimpEdge() : flags( SIMP_DEFAULT)"
  }
]