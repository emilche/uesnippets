[
  {
    "label": "ValueSymbolTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueSymbolTable"
  },
  {
    "label": "ilist_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ilist_iterator"
  },
  {
    "label": "iplist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iplist"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "SymbolTableListTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SymbolTableListTraits"
  },
  {
    "label": "SymbolTableListTraits()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_SYMBOLTABLELISTTRAITS_H # define LLVM_IR_SYMBOLTABLELISTTRAITS_H # include \" llvm / ADT / ilist . h \" namespace llvm { class ValueSymbolTable ; template<NodeTy> class ilist_iterator ; template<NodeTy,Traits> class iplist ; template<Ty> struct ilist_traits ; template<ValueSubClass,ItemParentClass> class SymbolTableListTraits : public ilist_default_traits<ValueSubClass> { typedef ilist_traits<ValueSubClass> TraitsClass ; public :)",
    "insertText": "SymbolTableListTraits()"
  },
  {
    "label": "getListOwner()",
    "kind": "Method",
    "detail": "Function (} ItemParentClass*)",
    "insertText": "getListOwner()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Offset(size_t(&((ItemParentClass*)nullptr->*ItemParentClass:: getSublistAccess(static_cast<ValueSubClass*>(nullptr)))))"
  },
  {
    "label": "Anchor()",
    "kind": "Method",
    "detail": "Function (iplist<ValueSubClass>*)",
    "insertText": "Anchor(static_cast<iplist<ValueSubClass>*>(this))"
  },
  {
    "label": "getList()",
    "kind": "Method",
    "detail": "Function (} iplist<ValueSubClass>&)",
    "insertText": "getList(ItemParentClass *Par)"
  },
  {
    "label": "getSymTab()",
    "kind": "Method",
    "detail": "Function (} ValueSymbolTable*)",
    "insertText": "getSymTab(ItemParentClass *Par)"
  },
  {
    "label": "addNodeToList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addNodeToList(ValueSubClass *V)"
  },
  {
    "label": "removeNodeFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeNodeFromList(ValueSubClass *V)"
  },
  {
    "label": "transferNodesFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transferNodesFromList(ilist_traits<ValueSubClass> &L2, ilist_iterator<ValueSubClass> first, ilist_iterator<ValueSubClass> last)"
  },
  {
    "label": "setSymTabObject()",
    "kind": "Method",
    "detail": "Function (template<TPtr> void)",
    "insertText": "setSymTabObject(TPtr *, TPtr)"
  },
  {
    "label": "toPtr()",
    "kind": "Method",
    "detail": "Function (ValueSymbolTable*)",
    "insertText": "toPtr(ValueSymbolTable *P)"
  }
]