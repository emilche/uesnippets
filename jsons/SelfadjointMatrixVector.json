[
  {
    "label": "selfadjoint_matrix_vector_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "selfadjoint_matrix_vector_product"
  },
  {
    "label": "selfadjoint_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "selfadjoint_product_impl"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SELFADJOINT_MATRIX_VECTOR_H # define EIGEN_SELFADJOINT_MATRIX_VECTOR_H namespace Eigen { namespace internal { template<Scalar,Index,int StorageOrder,int UpLo,bool ConjugateLhs,bool ConjugateRhs,int Version = Specialized> struct selfadjoint_matrix_vector_product ; template<Scalar,Index,int StorageOrder,int UpLo,bool ConjugateLhs,bool ConjugateRhs,int Version> struct selfadjoint_matrix_vector_product { EIGEN_DONT_INLINE EIGEN_DEVICE_FUNC void)",
    "insertText": "run(Index size, const Scalar* lhs, Index lhsStride, const Scalar* rhs, Scalar* res, Scalar alpha)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef packet_traits<Scalar>::type Packet ; typedef NumTraits<Scalar>::Real RealScalar ; const Index PacketSize =)",
    "insertText": "sizeof(Packet)/sizeof(Scalar)"
  },
  {
    "label": "EIGEN_LOGICAL_XOR()",
    "kind": "Method",
    "detail": "Function (enum { IsRowMajor = StorageOrder = = RowMajor ? 1 : 0,IsLower = UpLo = = Lower ? 1 : 0,FirstTriangular = IsRowMajor = = IsLower } ; conj_helper<Scalar,Scalar,NumTraits<Scalar>::IsComplex&&)",
    "insertText": "EIGEN_LOGICAL_XOR(ConjugateLhs, IsRowMajor)"
  },
  {
    "label": "EIGEN_LOGICAL_XOR()",
    "kind": "Method",
    "detail": "Function (conj_helper<Scalar,Scalar,NumTraits<Scalar>::IsComplex&&)",
    "insertText": "EIGEN_LOGICAL_XOR(ConjugateLhs, !IsRowMajor)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (Scalar cjAlpha = ConjugateRhs ?)",
    "insertText": "conj(alpha)"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (Index bound =)",
    "insertText": "maxi(Index(0), size-8)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (const Scalar* EIGEN_RESTRICT A0 = lhs + j* lhsStride ; const Scalar* EIGEN_RESTRICT A1 =)",
    "insertText": "lhs(j+1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Scalar t0 = cjAlpha* rhs [ j ] ; Packet ptmp0 = pset1<)",
    "insertText": "Packet(t0)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Scalar t1 = cjAlpha* rhs [ j + 1 ] ; Packet ptmp1 = pset1<)",
    "insertText": "Packet(t1)"
  },
  {
    "label": "t2()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "t2(0)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet ptmp2 = pset1<)",
    "insertText": "Packet(t2)"
  },
  {
    "label": "t3()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "t3(0)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet ptmp3 = pset1<)",
    "insertText": "Packet(t3)"
  },
  {
    "label": "alignedStart()",
    "kind": "Method",
    "detail": "Function (Index starti = FirstTriangular ? 0 : j + 2 ; Index endi = FirstTriangular ? j : size ; Index)",
    "insertText": "alignedStart(starti) + internal::first_default_aligned(&res[starti], endi-starti)"
  },
  {
    "label": "alignedStart()",
    "kind": "Method",
    "detail": "Function (Index alignedEnd =)",
    "insertText": "alignedStart((endi-alignedStart)/(PacketSize))*(PacketSize)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (res [ j ] + = cjd .)",
    "insertText": "pmul(numext::real(A0[j]), t0)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (res [ j + 1 ] + = cjd .)",
    "insertText": "pmul(numext::real(A1[j+1]), t1)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (res [ j ] + = cj0 .)",
    "insertText": "pmul(A1[j], t1)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (t3 + = cj1 .)",
    "insertText": "pmul(A1[j], rhs[j])"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (} else { res [ j + 1 ] + = cj0 .)",
    "insertText": "pmul(A0[j+1],t0)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (t2 + = cj1 .)",
    "insertText": "pmul(A0[j+1], rhs[j+1])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i=starti; i<alignedStart; ++i)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (res [ i ] + = cj0 .)",
    "insertText": "pmul(A0[i], t0) + cj0.pmul(A1[i],t1)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (t2 + = cj1 .)",
    "insertText": "pmul(A0[i], rhs[i])"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (t3 + = cj1 .)",
    "insertText": "pmul(A1[i], rhs[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} const Scalar* EIGEN_RESTRICT a0It = A0 + alignedStart ; const Scalar* EIGEN_RESTRICT a1It = A1 + alignedStart ; const Scalar* EIGEN_RESTRICT rhsIt = rhs + alignedStart ; Scalar* EIGEN_RESTRICT resIt = res + alignedStart ;)",
    "insertText": "for(Index i=alignedStart; i<alignedEnd; i+=PacketSize)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet A0i = ploadu<)",
    "insertText": "Packet(a0It)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (a0It + = PacketSize ; Packet A1i = ploadu<)",
    "insertText": "Packet(a1It)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (a1It + = PacketSize ; Packet Bi = ploadu<)",
    "insertText": "Packet(rhsIt)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (rhsIt + = PacketSize ; Packet Xi = pload<)",
    "insertText": "Packet(resIt)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Xi = pcj0 .)",
    "insertText": "pmadd(A0i,ptmp0, pcj0.pmadd(A1i,ptmp1,Xi))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (ptmp2 = pcj1 .)",
    "insertText": "pmadd(A0i, Bi, ptmp2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (ptmp3 = pcj1 .)",
    "insertText": "pmadd(A1i, Bi, ptmp3)"
  },
  {
    "label": "pstore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstore(resIt,Xi)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (resIt + = PacketSize ; })",
    "insertText": "for(Index i=alignedEnd; i<endi; i++)"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (} res [ j ] + =)",
    "insertText": "alpha(t2 + predux(ptmp2))"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (res [ j + 1 ] + =)",
    "insertText": "alpha(t3 + predux(ptmp3))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index j=FirstTriangular ? 0 : bound;j<(FirstTriangular ? bound : size);j++)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (res [ j ] + = cjd .)",
    "insertText": "pmul(numext::real(A0[j]), t1)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (res [ i ] + = cj0 .)",
    "insertText": "pmul(A0[i], t1)"
  },
  {
    "label": "LhsMode()",
    "kind": "Method",
    "detail": "Function (} res [ j ] + = alpha* t2 ; } } } namespace internal { template<Lhs,int LhsMode,Rhs> struct selfadjoint_product_impl<Lhs,LhsMode,false,Rhs,0,true> { typedef Product<Lhs,Rhs>::Scalar Scalar ; typedef internal::blas_traits<Lhs> LhsBlasTraits ; typedef LhsBlasTraits::DirectLinearAccessType ActualLhsType ; typedef internal::remove_all<ActualLhsType>::type ActualLhsTypeCleaned ; typedef internal::blas_traits<Rhs> RhsBlasTraits ; typedef RhsBlasTraits::DirectLinearAccessType ActualRhsType ; typedef internal::remove_all<ActualRhsType>::type ActualRhsTypeCleaned ; enum { LhsUpLo =)",
    "insertText": "LhsMode(Upper|Lower)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<Dest> EIGEN_DEVICE_FUNC void)",
    "insertText": "run(Dest& dest, const Lhs &a_lhs, const Rhs &a_rhs, const Scalar& alpha)"
  },
  {
    "label": "EIGEN_PLAIN_ENUM_MIN()",
    "kind": "Method",
    "detail": "Function (typedef Dest::Scalar ResScalar ; typedef Rhs::Scalar RhsScalar ; typedef Map<Matrix<ResScalar,Dynamic,1>,)",
    "insertText": "EIGEN_PLAIN_ENUM_MIN(AlignedMax,internal::packet_traits<ResScalar>::size)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dest.rows()==a_lhs.rows() && dest.cols()==a_rhs.cols())"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (internal::add_const_on_value_type<ActualLhsType>::type lhs =)",
    "insertText": "extract(a_lhs)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (internal::add_const_on_value_type<ActualRhsType>::type rhs =)",
    "insertText": "extract(a_rhs)"
  },
  {
    "label": "extractScalarFactor()",
    "kind": "Method",
    "detail": "Function (Scalar actualAlpha = alpha*)",
    "insertText": "extractScalarFactor(a_lhs) * RhsBlasTraits::extractScalarFactor(a_rhs)"
  },
  {
    "label": "EvalToDest()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "EvalToDest(Dest::InnerStrideAtCompileTime==1), UseRhs = (ActualRhsTypeCleaned::InnerStrideAtCompileTime==1)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (internal::gemv_static_vector_if<ResScalar,Dest::SizeAtCompileTime,Dest::MaxSizeAtCompileTime,! EvalToDest> static_dest ; internal::gemv_static_vector_if<RhsScalar,ActualRhsTypeCleaned::SizeAtCompileTime,ActualRhsTypeCleaned::MaxSizeAtCompileTime,! UseRhs> static_rhs ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(ResScalar,actualDestPtr,dest.size(), EvalToDest ? dest.data() : static_dest.data())"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(RhsScalar,actualRhsPtr,rhs.size(), UseRhs ? const_cast<RhsScalar*>(rhs.data()) : static_rhs.data())"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_DENSE_STORAGE_CTOR_PLUGIN Index size = dest .)",
    "insertText": "size()"
  },
  {
    "label": "MappedDest()",
    "kind": "Method",
    "detail": "Function (EIGEN_DENSE_STORAGE_CTOR_PLUGIN # endif)",
    "insertText": "MappedDest(actualDestPtr, dest.size())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!UseRhs)"
  },
  {
    "label": "PlainObject()",
    "kind": "Method",
    "detail": "Function (EIGEN_DENSE_STORAGE_CTOR_PLUGIN # endif Map<)",
    "insertText": "PlainObject(actualRhsPtr, rhs.size())"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (} internal::selfadjoint_matrix_vector_product<Scalar,)",
    "insertText": "Index(internal::traits<ActualLhsTypeCleaned>::Flags&RowMajorBit) ? RowMajor : ColMajor, int(LhsUpLo), bool(LhsBlasTraits::NeedToConjugate), bool(RhsBlasTraits::NeedToConjugate)>::run ( lhs.rows(), &lhs.coeffRef(0,0), lhs.outerStride(), actualRhsPtr, actualDestPtr, actualAlpha)"
  },
  {
    "label": "RhsMode()",
    "kind": "Method",
    "detail": "Function (} } ; template<Lhs,Rhs,int RhsMode> struct selfadjoint_product_impl<Lhs,0,true,Rhs,RhsMode,false> { typedef Product<Lhs,Rhs>::Scalar Scalar ; enum { RhsUpLo =)",
    "insertText": "RhsMode(Upper|Lower)"
  },
  {
    "label": "destT()",
    "kind": "Method",
    "detail": "Function (Transpose<Dest>)",
    "insertText": "destT(dest)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (selfadjoint_product_impl<Transpose<const Rhs>,)",
    "insertText": "int(RhsUpLo)==Upper ? Lower : Upper, false, Transpose<const Lhs>, 0, true>::run(destT, a_rhs.transpose(), a_lhs.transpose(), alpha)"
  }
]