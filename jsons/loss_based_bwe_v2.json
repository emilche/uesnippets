[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LossBasedBweV2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LossBasedBweV2"
  },
  {
    "label": "Result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Result"
  },
  {
    "label": "ChannelParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChannelParameters"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "Derivatives",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Derivatives"
  },
  {
    "label": "Observation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Observation"
  },
  {
    "label": "PartialObservation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PartialObservation"
  },
  {
    "label": "LossBasedBweV2()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "LossBasedBweV2(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "SetAcknowledgedBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAcknowledgedBitrate(DataRate acknowledged_bitrate)"
  },
  {
    "label": "SetBandwidthEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBandwidthEstimate(DataRate bandwidth_estimate)"
  },
  {
    "label": "SetMinMaxBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinMaxBitrate(DataRate min_bitrate, DataRate max_bitrate)"
  },
  {
    "label": "UpdateBandwidthEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBandwidthEstimate(\n      rtc::ArrayView<const PacketResult> packet_results,\n      DataRate delay_based_estimate,\n      BandwidthUsage delay_detector_state,\n      absl::optional<DataRate> probe_bitrate)"
  },
  {
    "label": "CreateConfig()",
    "kind": "Method",
    "detail": "Function (absl::optional<Config>)",
    "insertText": "CreateConfig(\n      const FieldTrialsView* key_value_config)"
  },
  {
    "label": "CalculateInstantUpperBound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateInstantUpperBound()"
  },
  {
    "label": "CalculateTemporalWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTemporalWeights()"
  },
  {
    "label": "PushBackObservation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushBackObservation(rtc::ArrayView<const PacketResult> packet_results,\n                           BandwidthUsage delay_detector_state)"
  },
  {
    "label": "UpdateTrendlineEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTrendlineEstimator(\n      const std::vector<PacketResult>& packet_feedbacks,\n      Timestamp at_time)"
  },
  {
    "label": "UpdateDelayDetector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelayDetector(BandwidthUsage delay_detector_state)"
  },
  {
    "label": "IsEstimateIncreasingWhenLossLimited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEstimateIncreasingWhenLossLimited(\n      const ChannelParameters& best_candidate)"
  },
  {
    "label": "SetProbeBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProbeBitrate(absl::optional<DataRate> probe_bitrate)"
  }
]