[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LossBasedBweV2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LossBasedBweV2"
  },
  {
    "label": "Result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Result"
  },
  {
    "label": "ChannelParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChannelParameters"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "Derivatives",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Derivatives"
  },
  {
    "label": "Observation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Observation"
  },
  {
    "label": "PartialObservation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PartialObservation"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_GOOG_CC_LOSS_BASED_BWE_V2_H_ # define MODULES_CONGESTION_CONTROLLER_GOOG_CC_LOSS_BASED_BWE_V2_H_ # include<cstddef> # include<deque> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / field_trials_view . h \" # include \" api / network_state_predictor . h \" # include \" api / transport / network_types . h \" # include \" api / units / data_rate . h \" # include \" api / units / data_size . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" namespace webrtc { enum class LossBasedState { kIncreasing = 0,kDecreasing = 1,kDelayBasedEstimate = 2 } ; class LossBasedBweV2 { public : struct Result { ~)",
    "insertText": "Result()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (DataRate bandwidth_estimate =)",
    "insertText": "Zero()"
  },
  {
    "label": "LossBasedBweV2()",
    "kind": "Method",
    "detail": "Function (LossBasedState state = LossBasedState::kDelayBasedEstimate ; } ;)",
    "insertText": "LossBasedBweV2(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "LossBasedBweV2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LossBasedBweV2(const LossBasedBweV2&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LossBasedBweV2&)",
    "insertText": "operator(const LossBasedBweV2&)"
  },
  {
    "label": "LossBasedBweV2()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LossBasedBweV2()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReady()"
  },
  {
    "label": "GetLossBasedResult()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "GetLossBasedResult()"
  },
  {
    "label": "SetAcknowledgedBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAcknowledgedBitrate(DataRate acknowledged_bitrate)"
  },
  {
    "label": "SetBandwidthEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBandwidthEstimate(DataRate bandwidth_estimate)"
  },
  {
    "label": "SetMinMaxBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinMaxBitrate(DataRate min_bitrate, DataRate max_bitrate)"
  },
  {
    "label": "UpdateBandwidthEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBandwidthEstimate(rtc::ArrayView<const PacketResult> packet_results, DataRate delay_based_estimate, BandwidthUsage delay_detector_state, absl::optional<DataRate> probe_bitrate)"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (private : struct ChannelParameters { double inherent_loss = 0 . 0 ; DataRate loss_limited_bandwidth =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "CreateConfig()",
    "kind": "Method",
    "detail": "Function (} ; absl::optional<Config>)",
    "insertText": "CreateConfig(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "IsConfigValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConfigValid()"
  },
  {
    "label": "GetCandidates()",
    "kind": "Method",
    "detail": "Function (std::vector<ChannelParameters>)",
    "insertText": "GetCandidates()"
  },
  {
    "label": "GetCandidateBandwidthUpperBound()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "GetCandidateBandwidthUpperBound()"
  },
  {
    "label": "GetDerivatives()",
    "kind": "Method",
    "detail": "Function (Derivatives)",
    "insertText": "GetDerivatives(const ChannelParameters& channel_parameters)"
  },
  {
    "label": "GetSendingRate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "GetSendingRate(DataRate instantaneous_sending_rate)"
  },
  {
    "label": "GetInstantUpperBound()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "GetInstantUpperBound()"
  },
  {
    "label": "CalculateInstantUpperBound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateInstantUpperBound()"
  },
  {
    "label": "CalculateTemporalWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTemporalWeights()"
  },
  {
    "label": "NewtonsMethodUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewtonsMethodUpdate(ChannelParameters& channel_parameters)"
  },
  {
    "label": "TrendlineEsimateAllowBitrateIncrease()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrendlineEsimateAllowBitrateIncrease()"
  },
  {
    "label": "TrendlineEsimateAllowEmergencyBackoff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrendlineEsimateAllowEmergencyBackoff()"
  },
  {
    "label": "PushBackObservation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushBackObservation(rtc::ArrayView<const PacketResult> packet_results, BandwidthUsage delay_detector_state)"
  },
  {
    "label": "UpdateTrendlineEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTrendlineEstimator(const std::vector<PacketResult>& packet_feedbacks, Timestamp at_time)"
  },
  {
    "label": "UpdateDelayDetector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelayDetector(BandwidthUsage delay_detector_state)"
  },
  {
    "label": "IsEstimateIncreasingWhenLossLimited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEstimateIncreasingWhenLossLimited(const ChannelParameters& best_candidate)"
  },
  {
    "label": "IsBandwidthLimitedDueToLoss()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBandwidthLimitedDueToLoss()"
  },
  {
    "label": "SetProbeBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProbeBitrate(absl::optional<DataRate> probe_bitrate)"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (absl::optional<DataRate> acknowledged_bitrate_ ; absl::optional<Config> config_ ; ChannelParameters current_estimate_ ; int num_observations_ = 0 ; std::vector<Observation> observations_ ; PartialObservation partial_observation_ ; Timestamp last_send_time_most_recent_observation_ =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "KilobitsPerSec()",
    "kind": "Method",
    "detail": "Function (DataRate min_bitrate_ =)",
    "insertText": "KilobitsPerSec(1)"
  }
]