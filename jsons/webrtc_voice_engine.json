[
  {
    "label": "AudioFrameProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioFrameProcessor"
  },
  {
    "label": "AudioSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioSource"
  },
  {
    "label": "WebRtcVoiceMediaChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcVoiceMediaChannel"
  },
  {
    "label": "WebRtcVoiceEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcVoiceEngine"
  },
  {
    "label": "WebRtcAudioSendStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcAudioSendStream"
  },
  {
    "label": "WebRtcAudioReceiveStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcAudioReceiveStream"
  },
  {
    "label": "WebRtcVoiceEngine()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_ENGINE_WEBRTC_VOICE_ENGINE_H_ # define MEDIA_ENGINE_WEBRTC_VOICE_ENGINE_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" api / audio_codecs / audio_encoder_factory . h \" # include \" api / field_trials_view . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / transport / rtp / rtp_source . h \" # include \" call / audio_state . h \" # include \" call / call . h \" # include \" media / base / media_engine . h \" # include \" media / base / rtp_utils . h \" # include \" modules / async_audio_processing / async_audio_processing . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / network_route . h \" # include \" rtc_base / task_queue . h \" namespace webrtc { class AudioFrameProcessor ; } namespace cricket { class AudioSource ; class WebRtcVoiceMediaChannel ; class WebRtcVoiceEngine final : public VoiceEngineInterface { class WebRtcVoiceMediaChannel ; public :)",
    "insertText": "WebRtcVoiceEngine(webrtc::TaskQueueFactory* task_queue_factory, webrtc::AudioDeviceModule* adm, const rtc::scoped_refptr<webrtc::AudioEncoderFactory>& encoder_factory, const rtc::scoped_refptr<webrtc::AudioDecoderFactory>& decoder_factory, rtc::scoped_refptr<webrtc::AudioMixer> audio_mixer, rtc::scoped_refptr<webrtc::AudioProcessing> audio_processing, webrtc::AudioFrameProcessor* audio_frame_processor, const webrtc::FieldTrialsView& trials)"
  },
  {
    "label": "WebRtcVoiceEngine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WebRtcVoiceEngine()"
  },
  {
    "label": "WebRtcVoiceEngine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WebRtcVoiceEngine(const WebRtcVoiceEngine&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WebRtcVoiceEngine&)",
    "insertText": "operator(const WebRtcVoiceEngine&)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "GetAudioState()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::AudioState>)",
    "insertText": "GetAudioState()"
  },
  {
    "label": "CreateMediaChannel()",
    "kind": "Method",
    "detail": "Function (VoiceMediaChannel*)",
    "insertText": "CreateMediaChannel(webrtc::Call* call, const MediaConfig& config, const AudioOptions& options, const webrtc::CryptoOptions& crypto_options)"
  },
  {
    "label": "send_codecs()",
    "kind": "Method",
    "detail": "Function (const std::vector<AudioCodec>&)",
    "insertText": "send_codecs()"
  },
  {
    "label": "recv_codecs()",
    "kind": "Method",
    "detail": "Function (const std::vector<AudioCodec>&)",
    "insertText": "recv_codecs()"
  },
  {
    "label": "GetRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpHeaderExtensionCapability>)",
    "insertText": "GetRtpHeaderExtensions()"
  },
  {
    "label": "StartAecDump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartAecDump(webrtc::FileWrapper file, int64_t max_size_bytes)"
  },
  {
    "label": "StopAecDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAecDump()"
  },
  {
    "label": "ApplyOptions()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ApplyOptions(const AudioOptions& options)"
  },
  {
    "label": "CreateVoEChannel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CreateVoEChannel()"
  },
  {
    "label": "adm()",
    "kind": "Method",
    "detail": "Function (webrtc::TaskQueueFactory* const task_queue_factory_ ; std::unique_ptr<rtc::TaskQueue> low_priority_worker_queue_ ; webrtc::AudioDeviceModule*)",
    "insertText": "adm()"
  },
  {
    "label": "apm()",
    "kind": "Method",
    "detail": "Function (webrtc::AudioProcessing*)",
    "insertText": "apm()"
  },
  {
    "label": "audio_state()",
    "kind": "Method",
    "detail": "Function (webrtc::AudioState*)",
    "insertText": "audio_state()"
  },
  {
    "label": "CollectCodecs()",
    "kind": "Method",
    "detail": "Function (std::vector<AudioCodec>)",
    "insertText": "CollectCodecs(const std::vector<webrtc::AudioCodecSpec>& specs)"
  },
  {
    "label": "WebRtcVoiceMediaChannel()",
    "kind": "Method",
    "detail": "Function (webrtc::SequenceChecker signal_thread_checker_ ; webrtc::SequenceChecker worker_thread_checker_ ; rtc::scoped_refptr<webrtc::AudioDeviceModule> adm_ ; rtc::scoped_refptr<webrtc::AudioEncoderFactory> encoder_factory_ ; rtc::scoped_refptr<webrtc::AudioDecoderFactory> decoder_factory_ ; rtc::scoped_refptr<webrtc::AudioMixer> audio_mixer_ ; rtc::scoped_refptr<webrtc::AudioProcessing> apm_ ; webrtc::AudioFrameProcessor* const audio_frame_processor_ ; rtc::scoped_refptr<webrtc::AudioState> audio_state_ ; std::vector<AudioCodec> send_codecs_ ; std::vector<AudioCodec> recv_codecs_ ; bool is_dumping_aec_ = false ; bool initialized_ = false ; size_t audio_jitter_buffer_max_packets_ = 2 0 0 ; bool audio_jitter_buffer_fast_accelerate_ = false ; int audio_jitter_buffer_min_delay_ms_ = 0 ; const bool minimized_remsampling_on_mobile_trial_enabled_ ; } ; class WebRtcVoiceMediaChannel final : public VoiceMediaChannel,public webrtc::Transport { public :)",
    "insertText": "WebRtcVoiceMediaChannel(WebRtcVoiceEngine* engine, const MediaConfig& config, const AudioOptions& options, const webrtc::CryptoOptions& crypto_options, webrtc::Call* call)"
  },
  {
    "label": "WebRtcVoiceMediaChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WebRtcVoiceMediaChannel()"
  },
  {
    "label": "WebRtcVoiceMediaChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WebRtcVoiceMediaChannel(const WebRtcVoiceMediaChannel&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WebRtcVoiceMediaChannel&)",
    "insertText": "operator(const WebRtcVoiceMediaChannel&)"
  },
  {
    "label": "options()",
    "kind": "Method",
    "detail": "Function (const AudioOptions&)",
    "insertText": "options()"
  },
  {
    "label": "SetRecvParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRecvParameters(const AudioRecvParameters& params)"
  },
  {
    "label": "GetRtpSendParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpParameters)",
    "insertText": "GetRtpSendParameters(uint32_t ssrc)"
  },
  {
    "label": "SetRtpSendParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "SetRtpSendParameters(uint32_t ssrc, const webrtc::RtpParameters& parameters)"
  },
  {
    "label": "GetRtpReceiveParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpParameters)",
    "insertText": "GetRtpReceiveParameters(uint32_t ssrc)"
  },
  {
    "label": "GetDefaultRtpReceiveParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpParameters)",
    "insertText": "GetDefaultRtpReceiveParameters()"
  },
  {
    "label": "SetPlayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayout(bool playout)"
  },
  {
    "label": "SetSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSend(bool send)"
  },
  {
    "label": "SetAudioSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAudioSend(uint32_t ssrc, bool enable, const AudioOptions* options, AudioSource* source)"
  },
  {
    "label": "AddSendStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSendStream(const StreamParams& sp)"
  },
  {
    "label": "RemoveSendStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSendStream(uint32_t ssrc)"
  },
  {
    "label": "AddRecvStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddRecvStream(const StreamParams& sp)"
  },
  {
    "label": "RemoveRecvStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveRecvStream(uint32_t ssrc)"
  },
  {
    "label": "ResetUnsignaledRecvStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetUnsignaledRecvStream()"
  },
  {
    "label": "OnDemuxerCriteriaUpdatePending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDemuxerCriteriaUpdatePending()"
  },
  {
    "label": "OnDemuxerCriteriaUpdateComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDemuxerCriteriaUpdateComplete()"
  },
  {
    "label": "SetFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameDecryptor(uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameDecryptorInterface> frame_decryptor)"
  },
  {
    "label": "SetFrameEncryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameEncryptor(uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameEncryptorInterface> frame_encryptor)"
  },
  {
    "label": "SetOutputVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetOutputVolume(uint32_t ssrc, double volume)"
  },
  {
    "label": "SetDefaultOutputVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDefaultOutputVolume(double volume)"
  },
  {
    "label": "SetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumPlayoutDelayMs(uint32_t ssrc, int delay_ms)"
  },
  {
    "label": "GetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetBaseMinimumPlayoutDelayMs(uint32_t ssrc)"
  },
  {
    "label": "CanInsertDtmf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInsertDtmf()"
  },
  {
    "label": "InsertDtmf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertDtmf(uint32_t ssrc, int event, int duration)"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketReceived(rtc::CopyOnWriteBuffer packet, int64_t packet_time_us)"
  },
  {
    "label": "OnPacketSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketSent(const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkRouteChanged(absl::string_view transport_name, const rtc::NetworkRoute& network_route)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(bool ready)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(VoiceMediaInfo* info, bool get_and_clear_legacy_stats)"
  },
  {
    "label": "SetRawAudioSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRawAudioSink(uint32_t ssrc, std::unique_ptr<webrtc::AudioSinkInterface> sink)"
  },
  {
    "label": "SetDefaultRawAudioSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultRawAudioSink(std::unique_ptr<webrtc::AudioSinkInterface> sink)"
  },
  {
    "label": "GetSources()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpSource>)",
    "insertText": "GetSources(uint32_t ssrc)"
  },
  {
    "label": "SetEncoderToPacketizerFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderToPacketizerFrameTransformer(uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "SetDepacketizerToDecoderFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepacketizerToDecoderFrameTransformer(uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "SendRtp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtp(const uint8_t* data, size_t len, const webrtc::PacketOptions& options)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcp(const uint8_t* data, size_t len)"
  },
  {
    "label": "SetOptions()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "SetOptions(const AudioOptions& options)"
  },
  {
    "label": "SetRecvCodecs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRecvCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetSendCodecs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSendCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetLocalSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLocalSource(uint32_t ssrc, AudioSource* source)"
  },
  {
    "label": "MuteStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MuteStream(uint32_t ssrc, bool mute)"
  },
  {
    "label": "engine()",
    "kind": "Method",
    "detail": "Function (WebRtcVoiceEngine*)",
    "insertText": "engine()"
  },
  {
    "label": "DeleteVoEChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteVoEChannel(int channel)"
  },
  {
    "label": "SetMaxSendBitrate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMaxSendBitrate(int bps)"
  },
  {
    "label": "SetupRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupRecording()"
  },
  {
    "label": "MaybeDeregisterUnsignaledRecvStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeDeregisterUnsignaledRecvStream(uint32_t ssrc)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (webrtc::TaskQueueBase* const worker_thread_ ; webrtc::ScopedTaskSafety task_safety_ ; webrtc::SequenceChecker network_thread_checker_ ; WebRtcVoiceEngine* const engine_ = nullptr ; std::vector<AudioCodec> send_codecs_ ; std::map<int,webrtc::SdpAudioFormat> decoder_map_ ; std::vector<AudioCodec> recv_codecs_ ; int max_send_bitrate_bps_ = 0 ; AudioOptions options_ ; absl::optional<int> dtmf_payload_type_ ; int dtmf_payload_freq_ = - 1 ; bool recv_transport_cc_enabled_ = false ; bool recv_nack_enabled_ = false ; bool enable_non_sender_rtt_ = false ; bool playout_ = false ; bool send_ = false ; webrtc::Call* const call_ = nullptr ; const MediaConfig::Audio audio_config_ ; std::vector<uint32_t> unsignaled_recv_ssrcs_ ; StreamParams unsignaled_stream_params_ ; double default_recv_volume_ = 1 . 0 ; int default_recv_base_minimum_delay_ms_ = 0 ; std::unique_ptr<webrtc::AudioSinkInterface> default_sink_ ; uint32_t receiver_reports_ssrc_ = 0 xFA17FA17u ; class WebRtcAudioSendStream ; std::map<uint32_t,WebRtcAudioSendStream*> send_streams_ ; std::vector<webrtc::RtpExtension> send_rtp_extensions_ ; std::string mid_ ; class WebRtcAudioReceiveStream ; std::map<uint32_t,WebRtcAudioReceiveStream*> recv_streams_ ; std::vector<webrtc::RtpExtension> recv_rtp_extensions_ ; absl::optional<webrtc::AudioSendStream::Config::SendCodecSpec> send_codec_spec_ ; const webrtc::AudioCodecPairId codec_pair_id_ = webrtc::)",
    "insertText": "Create()"
  }
]