[
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "FSequencerCurveEditorTimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerCurveEditorTimeSliderController"
  },
  {
    "label": "FSequencerCurveEditorTimeSliderController()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SequencerTimeSliderController . h \" class ISequencer ; class FSequencer ; class FSequencerCurveEditorTimeSliderController : public FSequencerTimeSliderController { public :)",
    "insertText": "FSequencerCurveEditorTimeSliderController(const FTimeSliderArgs& InArgs, TWeakPtr<FSequencer> InWeakSequencer, TSharedRef<FCurveEditor> InCurveEditor)"
  },
  {
    "label": "ClampViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClampViewRange(double& NewRangeMin, double& NewRangeMax)"
  },
  {
    "label": "SetViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewRange(double NewRangeMin, double NewRangeMax, EViewRangeInterpolation Interpolation)"
  },
  {
    "label": "GetViewRange()",
    "kind": "Method",
    "detail": "Function (FAnimatedRange)",
    "insertText": "GetViewRange()"
  }
]