[
  {
    "label": "UMovieSceneTestSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTestSequence"
  },
  {
    "label": "FSequenceTrackBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceTrackBuilder"
  },
  {
    "label": "FSequenceSectionBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceSectionBuilder"
  },
  {
    "label": "FSequenceBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceBuilder"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneChannelHandle . h \" # include \" Channels / MovieSceneChannelTraits . h \" # include \" Channels / MovieSceneChannelProxy . h \" # include \" CoreTypes . h \" # include \" Generators / MovieSceneEasingCurves . h \" # include \" IMovieScenePlayer . h \" # include \" KeyParams . h \" # include \" MovieScene . h \" # include \" MovieSceneSection . h \" # include \" MovieSceneSequence . h \" # include \" Templates / EnableIf . h \" # include \" Templates / PointerIsConvertibleFromTo . h \" # include \" Tracks / MovieScenePropertyTrack . h \" # include \" MovieSceneTestDataBuilders . generated . h \")",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "AddObjectBinding()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "AddObjectBinding(TObjectPtr<UObject> InObject)"
  },
  {
    "label": "BindPossessableObject()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BindPossessableObject(const FGuid& ObjectId, UObject& PossessedObject, UObject* Context)"
  },
  {
    "label": "CanPossessObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanPossessObject(UObject& Object, UObject* InPlaybackContext)"
  },
  {
    "label": "GetMovieScene()",
    "kind": "Method",
    "detail": "Function (UMovieScene*)",
    "insertText": "GetMovieScene()"
  },
  {
    "label": "UnbindObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnbindObjects(const FGuid& ObjectId, const TArray<UObject*>& InObjects, UObject* Context)"
  },
  {
    "label": "UnbindInvalidObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnbindInvalidObjects(const FGuid& ObjectId, UObject* Context)"
  },
  {
    "label": "FSequenceBuilder()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE::MovieScene::Test { template<TrackClass> struct FSequenceTrackBuilder ; template<TrackClass> struct FSequenceSectionBuilder ; struct FSequenceBuilder { TObjectPtr<UMovieSceneTestSequence> Sequence ; FGuid CurrentBinding ;)",
    "insertText": "FSequenceBuilder()"
  },
  {
    "label": "UMovieSceneTestSequence()",
    "kind": "Method",
    "detail": "Function (Sequence = NewObject<)",
    "insertText": "UMovieSceneTestSequence()"
  },
  {
    "label": "AddObjectBinding()",
    "kind": "Method",
    "detail": "Function (CurrentBinding = Sequence ->)",
    "insertText": "AddObjectBinding(InObject)"
  },
  {
    "label": "AddRootTrack()",
    "kind": "Method",
    "detail": "Function (OutBindingID = CurrentBinding ; return* this ; } template<TrackClass> FSequenceTrackBuilder<TrackClass>)",
    "insertText": "AddRootTrack()"
  },
  {
    "label": "TrackClass()",
    "kind": "Method",
    "detail": "Function (TrackClass* Track = MovieScene -> AddTrack<)",
    "insertText": "TrackClass()"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (} template<TrackClass> FSequenceTrackBuilder<TrackClass>)",
    "insertText": "AddTrack()"
  },
  {
    "label": "TrackClass()",
    "kind": "Method",
    "detail": "Function (TrackClass* Track = MovieScene -> AddTrack<)",
    "insertText": "TrackClass(CurrentBinding)"
  },
  {
    "label": "AddPropertyTrack()",
    "kind": "Method",
    "detail": "Function (} template<TrackClass> FSequenceTrackBuilder<TrackClass>)",
    "insertText": "AddPropertyTrack(FName InPropertyName)"
  },
  {
    "label": "SetPropertyNameAndPath()",
    "kind": "Method",
    "detail": "Function (Track ->)",
    "insertText": "SetPropertyNameAndPath(InPropertyName, InPropertyName.ToString())"
  },
  {
    "label": "FSequenceTrackBuilder()",
    "kind": "Method",
    "detail": "Function (} } ; template<TrackClass> struct FSequenceTrackBuilder { FSequenceBuilder& Parent ; TObjectPtr<TrackClass> Track ;)",
    "insertText": "FSequenceTrackBuilder(FSequenceBuilder& InParent, TrackClass* InTrack) : Parent(InParent), Track(InTrack)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} FSequenceTrackBuilder&)",
    "insertText": "Assign(TrackClass*& OutTrack)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (OutTrack = Track ; return* this ; } template<Func> FSequenceBuilder&)",
    "insertText": "Do(Func&& Callback)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(Track)"
  },
  {
    "label": "CreateNewSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection* NewSection = Track ->)",
    "insertText": "CreateNewSection()"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (NewSection ->)",
    "insertText": "SetRange(TRange<FFrameNumber>(InStart, InEnd))"
  },
  {
    "label": "SetRowIndex()",
    "kind": "Method",
    "detail": "Function (NewSection ->)",
    "insertText": "SetRowIndex(InRowIndex)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (} Track ->)",
    "insertText": "AddSection(*NewSection)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} FSequenceBuilder&)",
    "insertText": "Pop()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} FSequenceSectionBuilder&)",
    "insertText": "Assign(UMovieSceneSection*& OutSection)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (OutSection = Section ; return* this ; } template<SectionClass> FSequenceSectionBuilder&)",
    "insertText": "Assign(SectionClass*& OutSection)"
  },
  {
    "label": "SectionClass()",
    "kind": "Method",
    "detail": "Function (OutSection = Cast<)",
    "insertText": "SectionClass(Section)"
  },
  {
    "label": "SetBlendType()",
    "kind": "Method",
    "detail": "Function (Section ->)",
    "insertText": "SetBlendType(InBlendType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEasingSettings& Easing = Section -> Easing ; Easing . bManualEaseIn = true ; Easing . ManualEaseInDuration = InDurationTicks ;)",
    "insertText": "if(UMovieSceneBuiltInEasingFunction* Function = Cast<UMovieSceneBuiltInEasingFunction>(Easing.EaseIn.GetObject()))"
  },
  {
    "label": "SetEaseOut()",
    "kind": "Method",
    "detail": "Function (Function -> Type = InEasingType ; } return* this ; } FSequenceSectionBuilder&)",
    "insertText": "SetEaseOut(int32 InDurationTicks, EMovieSceneBuiltInEasing InEasingType = EMovieSceneBuiltInEasing::Linear)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEasingSettings& Easing = Section -> Easing ; Easing . bManualEaseOut = true ; Easing . ManualEaseOutDuration = InDurationTicks ;)",
    "insertText": "if(UMovieSceneBuiltInEasingFunction* Function = Cast<UMovieSceneBuiltInEasingFunction>(Easing.EaseOut.GetObject()))"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (Function -> Type = InEasingType ; } return* this ; } template<ChannelType,ValueType> FSequenceSectionBuilder&)",
    "insertText": "AddKey(int32 InChannelIndex, FFrameNumber InTime, ValueType InValue, EMovieSceneKeyInterpolation Interpolation = EMovieSceneKeyInterpolation::Auto)"
  },
  {
    "label": "GetChannelProxy()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelProxy& ChannelProxy = Section ->)",
    "insertText": "GetChannelProxy()"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (ChannelType* Channel = ChannelProxy . GetChannel<)",
    "insertText": "ChannelType(InChannelIndex)"
  },
  {
    "label": "AddKeys()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType,ValueType> FSequenceSectionBuilder&)",
    "insertText": "AddKeys(int32 InChannelIndex, const TArray<FFrameNumber>& InTimes, const TArray<ValueType>& InValues, EMovieSceneKeyInterpolation Interpolation = EMovieSceneKeyInterpolation::Auto)"
  },
  {
    "label": "AddKeys()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR template<ChannelType,ValueType> FSequenceSectionBuilder&)",
    "insertText": "AddKeys(FName InChannelName, const TArray<FFrameNumber>& InTimes, const TArray<ValueType>& InValues, EMovieSceneKeyInterpolation Interpolation = EMovieSceneKeyInterpolation::Auto)"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (TMovieSceneChannelHandle<ChannelType> ChannelHandle = ChannelProxy . GetChannelByName<)",
    "insertText": "ChannelType(InChannelName)"
  },
  {
    "label": "AddKeys()",
    "kind": "Method",
    "detail": "Function (} # endif template<ChannelType,ValueType> FSequenceSectionBuilder&)",
    "insertText": "AddKeys(ChannelType* InChannel, const TArray<FFrameNumber>& InTimes, const TArray<ValueType>& InValues, EMovieSceneKeyInterpolation Interpolation = EMovieSceneKeyInterpolation::Auto)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (int32 Num =)",
    "insertText": "Min(InTimes.Num(), InValues.Num())"
  },
  {
    "label": "AddKeyToChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyToChannel(InChannel, InTimes[Index], InValues[Index], Interpolation)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(Section)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(Cast<SectionClass>(Section))"
  }
]