[
  {
    "label": "FPBDCollisionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraints"
  },
  {
    "label": "FCollisionContextAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionContextAllocator"
  },
  {
    "label": "Private",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Private"
  },
  {
    "label": "FCollisionConstraintAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionConstraintAllocator"
  },
  {
    "label": "FCollisionContextAllocator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / Core . h \" # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / Collision / CollisionContext . h \" # include \" Chaos / Collision / CollisionKeys . h \" # include \" Chaos / Collision / ParticlePairMidPhase . h \" # include \" Chaos / ObjectPool . h \" # include \" Chaos / ParticleHandle . h \" # include \" ChaosStats . h \" namespace Chaos { class FPBDCollisionConstraints ; namespace Private { class FCollisionContextAllocator { public :)",
    "insertText": "FCollisionContextAllocator(FPBDCollisionConstraints* InCollisionContainer, const int32 InNumCollisionsPerBlock, const int32 InCurrentEpoch) : CollisionContainer(InCollisionContainer) , CurrentEpoch(InCurrentEpoch) #if CHAOS_COLLISION_OBJECTPOOL_ENABLED , ConstraintPool(InNumCollisionsPerBlock, 0) #endif #if CHAOS_MIDPHASE_OBJECTPOOL_ENABLED , MidPhasePool(InNumCollisionsPerBlock, 0)"
  },
  {
    "label": "GetCurrentEpoch()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCurrentEpoch()"
  },
  {
    "label": "CreateConstraint()",
    "kind": "Method",
    "detail": "Function (FPBDCollisionConstraintPtr)",
    "insertText": "CreateConstraint()"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_COLLISION_OBJECTPOOL_ENABLED FPBDCollisionConstraint* Constraint = ConstraintPool .)",
    "insertText": "Alloc()"
  },
  {
    "label": "FPBDCollisionConstraint()",
    "kind": "Method",
    "detail": "Function (# else return MakeUnique<)",
    "insertText": "FPBDCollisionConstraint()"
  },
  {
    "label": "ActivateConstraint()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "ActivateConstraint(FPBDCollisionConstraint* Constraint)"
  },
  {
    "label": "GetContainerCookie()",
    "kind": "Method",
    "detail": "Function (FPBDCollisionConstraintContainerCookie& Cookie = Constraint ->)",
    "insertText": "GetContainerCookie()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Cookie . LastUsedEpoch = CurrentEpoch ; Cookie . ConstraintIndex = INDEX_NONE ; Cookie . CCDConstraintIndex = INDEX_NONE ; NewActiveConstraints .)",
    "insertText": "Push(Constraint)"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (Constraint ->)",
    "insertText": "Activate()"
  },
  {
    "label": "FindMidPhaseImpl()",
    "kind": "Method",
    "detail": "Function (FParticlePairMidPhase* MidPhase =)",
    "insertText": "FindMidPhaseImpl(Particle0, Particle1, SearchParticlePerformanceHint)"
  },
  {
    "label": "CreateMidPhase()",
    "kind": "Method",
    "detail": "Function (MidPhase =)",
    "insertText": "CreateMidPhase(Particle0, Particle1, Context)"
  },
  {
    "label": "FindMidPhase()",
    "kind": "Method",
    "detail": "Function (} return MidPhase ; } FParticlePairMidPhase*)",
    "insertText": "FindMidPhase(FGeometryParticleHandle* Particle0, FGeometryParticleHandle* Particle1, FGeometryParticleHandle* SearchParticlePerformanceHint)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} private : class Private::FCollisionConstraintAllocator ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "BeginDetectCollisions()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "BeginDetectCollisions(const int32 InEpoch)"
  },
  {
    "label": "FindMidPhaseImpl()",
    "kind": "Method",
    "detail": "Function (CurrentEpoch = InEpoch ; } FParticlePairMidPhase*)",
    "insertText": "FindMidPhaseImpl(FGeometryParticleHandle* Particle0, FGeometryParticleHandle* Particle1, FGeometryParticleHandle* SearchParticle)"
  },
  {
    "label": "FCollisionParticlePairKey()",
    "kind": "Method",
    "detail": "Function (const Private::FCollisionParticlePairKey Key =)",
    "insertText": "FCollisionParticlePairKey(Particle0, Particle1)"
  },
  {
    "label": "CreateMidPhase()",
    "kind": "Method",
    "detail": "Function (} FParticlePairMidPhase*)",
    "insertText": "CreateMidPhase(FGeometryParticleHandle* Particle0, FGeometryParticleHandle* Particle1, const FCollisionContext& Context)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (# else FParticlePairMidPhase* MidPhase =)",
    "insertText": "Make(Particle0, Particle1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (# endif NewMidPhases .)",
    "insertText": "Add(MidPhase)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (MidPhase ->)",
    "insertText": "Init(Particle0, Particle1, Key, Context)"
  },
  {
    "label": "FCollisionConstraintAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollisionConstraintAllocator(const int32 InNumCollisionsPerBlock = 1000) : CollisionContainer(nullptr) , ContextAllocators() , NumCollisionsPerBlock(InNumCollisionsPerBlock) , ParticlePairMidPhases() , ActiveConstraints() , ActiveCCDConstraints() , CurrentEpoch(0) , bIsDeteministic(false) , bInCollisionDetectionPhase(false)"
  },
  {
    "label": "FCollisionConstraintAllocator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCollisionConstraintAllocator()"
  },
  {
    "label": "SetCollisionContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCollisionContainer(FPBDCollisionConstraints* InCollisionContainer)"
  },
  {
    "label": "SetMaxContexts()",
    "kind": "Method",
    "detail": "Function (CollisionContainer = InCollisionContainer ; } void)",
    "insertText": "SetMaxContexts(const int32 MaxContexts)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumNewContexts = MaxContexts - ContextAllocators .)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ContextAllocators .)",
    "insertText": "Reserve(MaxContexts)"
  },
  {
    "label": "FCollisionContextAllocator()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FCollisionContextAllocator> ContextAllocator = MakeUnique<)",
    "insertText": "FCollisionContextAllocator(CollisionContainer, NumCollisionsPerBlock, CurrentEpoch)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ContextAllocators .)",
    "insertText": "Emplace(MoveTemp(ContextAllocator))"
  },
  {
    "label": "GetContextAllocator()",
    "kind": "Method",
    "detail": "Function (} } } FCollisionContextAllocator*)",
    "insertText": "GetContextAllocator(const int32 Index)"
  },
  {
    "label": "GetConstraints()",
    "kind": "Method",
    "detail": "Function (} TArrayView<FPBDCollisionConstraint* const>)",
    "insertText": "GetConstraints()"
  },
  {
    "label": "GetCCDConstraints()",
    "kind": "Method",
    "detail": "Function (} TArrayView<FPBDCollisionConstraint* const>)",
    "insertText": "GetCCDConstraints()"
  },
  {
    "label": "GetConstConstraints()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FPBDCollisionConstraint* const>)",
    "insertText": "GetConstConstraints()"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginFrame()"
  },
  {
    "label": "ResetActiveConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetActiveConstraints()"
  },
  {
    "label": "BeginDetectCollisions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginDetectCollisions()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bInCollisionDetectionPhase = true ; + + CurrentEpoch ;)",
    "insertText": "for(const TUniquePtr<FCollisionContextAllocator>& ContextAllocator : ContextAllocators)"
  },
  {
    "label": "BeginDetectCollisions()",
    "kind": "Method",
    "detail": "Function (ContextAllocator ->)",
    "insertText": "BeginDetectCollisions(CurrentEpoch)"
  },
  {
    "label": "EndDetectCollisions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndDetectCollisions()"
  },
  {
    "label": "PruneExpiredItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneExpiredItems()"
  },
  {
    "label": "PruneExpiredMidPhases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneExpiredMidPhases()"
  },
  {
    "label": "ProcessNewMidPhases()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessNewMidPhases()"
  },
  {
    "label": "ProcessInjectedConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInjectedConstraints()"
  },
  {
    "label": "ProcessNewItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNewItems()"
  },
  {
    "label": "AddResimConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddResimConstraints(const TArray<FPBDCollisionConstraint>& InConstraints, const FCollisionContext Context)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FGeometryParticleHandle* Particle0 = SourceConstraint . Particle [ 0 ] ; FGeometryParticleHandle* Particle1 = SourceConstraint . Particle [ 1 ] ;)",
    "insertText": "if(ShouldSwapParticleOrder(Particle0, Particle1))"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Particle0, Particle1)"
  },
  {
    "label": "GetAllocator()",
    "kind": "Method",
    "detail": "Function (} FParticlePairMidPhase* MidPhase = Context .)",
    "insertText": "GetAllocator()->GetMidPhase(Particle0, Particle1, SourceConstraint.Particle[0], Context)"
  },
  {
    "label": "InjectCollision()",
    "kind": "Method",
    "detail": "Function (MidPhase ->)",
    "insertText": "InjectCollision(SourceConstraint, Context)"
  },
  {
    "label": "ProcessNewConstraints()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ProcessNewConstraints()"
  },
  {
    "label": "SortConstraintsHandles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SortConstraintsHandles()"
  },
  {
    "label": "SortActiveConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortActiveConstraints()"
  },
  {
    "label": "RemoveParticle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveParticle(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "VisitConstCollisions()",
    "kind": "Method",
    "detail": "Function (template<TLambda> void)",
    "insertText": "VisitConstCollisions(const TLambda& Visitor, const ECollisionVisitorFlags& VisitFlags = ECollisionVisitorFlags::VisitDefault)"
  },
  {
    "label": "AddMidPhase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMidPhase(FParticlePairMidPhasePtr&& MidPhase)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ParticlePairMidPhases .)",
    "insertText": "Emplace(MoveTemp(MidPhase))"
  },
  {
    "label": "DetachParticlePairMidPhase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DetachParticlePairMidPhase(FParticlePairMidPhase* MidPhase)"
  },
  {
    "label": "ParticleCollisions()",
    "kind": "Method",
    "detail": "Function (Particle0 ->)",
    "insertText": "ParticleCollisions().RemoveMidPhase(Particle0, MidPhase)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FGeometryParticleHandle* Particle1 = MidPhase->GetParticle1())"
  },
  {
    "label": "ParticleCollisions()",
    "kind": "Method",
    "detail": "Function (Particle1 ->)",
    "insertText": "ParticleCollisions().RemoveMidPhase(Particle1, MidPhase)"
  },
  {
    "label": "RemoveActiveConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActiveConstraint(FPBDCollisionConstraint& Constraint)"
  },
  {
    "label": "CollisionVisitorShouldVisit()",
    "kind": "Method",
    "detail": "Function (FPBDCollisionConstraints* CollisionContainer ; TArray<TUniquePtr<FCollisionContextAllocator>> ContextAllocators ; int32 NumCollisionsPerBlock ; TArray<FParticlePairMidPhasePtr> ParticlePairMidPhases ; TArray<FPBDCollisionConstraint*> ActiveConstraints ; TArray<FPBDCollisionConstraint*> ActiveCCDConstraints ; int32 CurrentEpoch ; bool bIsDeteministic ; bool bInCollisionDetectionPhase ; } ; } bool)",
    "insertText": "CollisionVisitorShouldVisit(const FPBDCollisionConstraint* Constraint, const ECollisionVisitorFlags VisitFlags)"
  },
  {
    "label": "FShapePairParticlePairMidPhase()",
    "kind": "Method",
    "detail": "Function (FShapePairParticlePairMidPhase* This = static_cast<)",
    "insertText": "FShapePairParticlePairMidPhase(this)"
  },
  {
    "label": "FGenericParticlePairMidPhase()",
    "kind": "Method",
    "detail": "Function (FGenericParticlePairMidPhase* This = static_cast<)",
    "insertText": "FGenericParticlePairMidPhase(this)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FPBDCollisionConstraintPtr& Constraint = KVP . Value ;)",
    "insertText": "if(CollisionVisitorShouldVisit(Constraint.Get(), VisitFlags))"
  },
  {
    "label": "FSphereApproximationParticlePairMidPhase()",
    "kind": "Method",
    "detail": "Function (FSphereApproximationParticlePairMidPhase* This = static_cast<)",
    "insertText": "FSphereApproximationParticlePairMidPhase(this)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FPBDCollisionConstraint* Constraint = This -> Constraint .)",
    "insertText": "Get()"
  },
  {
    "label": "VisitConstCollisions()",
    "kind": "Method",
    "detail": "Function (} template<TLambda> ECollisionVisitorResult)",
    "insertText": "VisitConstCollisions(const TLambda& Visitor, const ECollisionVisitorFlags VisitFlags)"
  }
]