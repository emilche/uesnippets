[
  {
    "label": "TopologyLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TopologyLevel"
  },
  {
    "label": "TopologyRefiner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TopologyRefiner"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_FAR_TOPOLOGY_LEVEL_H # define OPENSUBDIV3_FAR_TOPOLOGY_LEVEL_H # include \" . . / version . h \" # include \" . . / vtr / level . h \" # include \" . . / vtr / refinement . h \" # include \" . . / far / types . h \" # include<vector> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { class TopologyLevel { public : int)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "GetNumFaces()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNumFaces()"
  },
  {
    "label": "GetNumEdges()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNumEdges()"
  },
  {
    "label": "GetNumFaceVertices()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNumFaceVertices()"
  },
  {
    "label": "GetFaceVertices()",
    "kind": "Method",
    "detail": "Function (} ConstIndexArray)",
    "insertText": "GetFaceVertices(Index f)"
  },
  {
    "label": "GetFaceEdges()",
    "kind": "Method",
    "detail": "Function (} ConstIndexArray)",
    "insertText": "GetFaceEdges(Index f)"
  },
  {
    "label": "GetEdgeVertices()",
    "kind": "Method",
    "detail": "Function (} ConstIndexArray)",
    "insertText": "GetEdgeVertices(Index e)"
  },
  {
    "label": "GetEdgeFaces()",
    "kind": "Method",
    "detail": "Function (} ConstIndexArray)",
    "insertText": "GetEdgeFaces(Index e)"
  },
  {
    "label": "GetVertexFaces()",
    "kind": "Method",
    "detail": "Function (} ConstIndexArray)",
    "insertText": "GetVertexFaces(Index v)"
  },
  {
    "label": "GetVertexEdges()",
    "kind": "Method",
    "detail": "Function (} ConstIndexArray)",
    "insertText": "GetVertexEdges(Index v)"
  },
  {
    "label": "GetVertexFaceLocalIndices()",
    "kind": "Method",
    "detail": "Function (} ConstLocalIndexArray)",
    "insertText": "GetVertexFaceLocalIndices(Index v)"
  },
  {
    "label": "GetVertexEdgeLocalIndices()",
    "kind": "Method",
    "detail": "Function (} ConstLocalIndexArray)",
    "insertText": "GetVertexEdgeLocalIndices(Index v)"
  },
  {
    "label": "GetEdgeFaceLocalIndices()",
    "kind": "Method",
    "detail": "Function (} ConstLocalIndexArray)",
    "insertText": "GetEdgeFaceLocalIndices(Index e)"
  },
  {
    "label": "FindEdge()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "FindEdge(Index v0, Index v1)"
  },
  {
    "label": "IsEdgeNonManifold()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEdgeNonManifold(Index e)"
  },
  {
    "label": "IsVertexNonManifold()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertexNonManifold(Index v)"
  },
  {
    "label": "IsEdgeBoundary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEdgeBoundary(Index e)"
  },
  {
    "label": "IsVertexBoundary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertexBoundary(Index v)"
  },
  {
    "label": "IsVertexCorner()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertexCorner(Index v)"
  },
  {
    "label": "IsVertexValenceRegular()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertexValenceRegular(Index v)"
  },
  {
    "label": "GetEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetEdgeSharpness(Index e)"
  },
  {
    "label": "GetVertexSharpness()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetVertexSharpness(Index v)"
  },
  {
    "label": "IsEdgeInfSharp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEdgeInfSharp(Index e)"
  },
  {
    "label": "IsVertexInfSharp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertexInfSharp(Index v)"
  },
  {
    "label": "IsEdgeSemiSharp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEdgeSemiSharp(Index e)"
  },
  {
    "label": "IsVertexSemiSharp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertexSemiSharp(Index v)"
  },
  {
    "label": "IsFaceHole()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFaceHole(Index f)"
  },
  {
    "label": "GetVertexRule()",
    "kind": "Method",
    "detail": "Function (} Sdc::Crease::Rule)",
    "insertText": "GetVertexRule(Index v)"
  },
  {
    "label": "GetNumFVarChannels()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNumFVarChannels()"
  },
  {
    "label": "GetNumFVarValues()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNumFVarValues(int channel = 0)"
  },
  {
    "label": "GetFaceFVarValues()",
    "kind": "Method",
    "detail": "Function (} ConstIndexArray)",
    "insertText": "GetFaceFVarValues(Index f, int channel = 0)"
  },
  {
    "label": "DoesVertexFVarTopologyMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesVertexFVarTopologyMatch(Index v, int channel = 0)"
  },
  {
    "label": "DoesEdgeFVarTopologyMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesEdgeFVarTopologyMatch(Index e, int channel = 0)"
  },
  {
    "label": "DoesFaceFVarTopologyMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesFaceFVarTopologyMatch(Index f, int channel = 0)"
  },
  {
    "label": "GetFaceChildFaces()",
    "kind": "Method",
    "detail": "Function (} ConstIndexArray)",
    "insertText": "GetFaceChildFaces(Index f)"
  },
  {
    "label": "GetFaceChildEdges()",
    "kind": "Method",
    "detail": "Function (} ConstIndexArray)",
    "insertText": "GetFaceChildEdges(Index f)"
  },
  {
    "label": "GetEdgeChildEdges()",
    "kind": "Method",
    "detail": "Function (} ConstIndexArray)",
    "insertText": "GetEdgeChildEdges(Index e)"
  },
  {
    "label": "GetFaceChildVertex()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "GetFaceChildVertex(Index f)"
  },
  {
    "label": "GetEdgeChildVertex()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "GetEdgeChildVertex(Index e)"
  },
  {
    "label": "GetVertexChildVertex()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "GetVertexChildVertex(Index v)"
  },
  {
    "label": "GetFaceParentFace()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "GetFaceParentFace(Index f)"
  },
  {
    "label": "ValidateTopology()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidateTopology()"
  },
  {
    "label": "PrintTopology()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintTopology(bool children = true)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (_level ->)",
    "insertText": "print((children && _refToChild) ? _refToChild : 0)"
  },
  {
    "label": "TopologyLevel()",
    "kind": "Method",
    "detail": "Function (} private : class TopologyRefiner ; Vtr::internal::Level const* _level ; Vtr::internal::Refinement const* _refToParent ; Vtr::internal::Refinement const* _refToChild ; public :)",
    "insertText": "TopologyLevel()"
  }
]