[
  {
    "label": "FScopeTryLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopeTryLock"
  },
  {
    "label": "FScopeTryLock()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / CriticalSection . h \" class FScopeTryLock { public :)",
    "insertText": "FScopeTryLock(FCriticalSection *InCriticalSection) : CriticalSection(InCriticalSection)"
  },
  {
    "label": "FScopeTryLock()",
    "kind": "Method",
    "detail": "Function (CriticalSection = nullptr ; } } ~)",
    "insertText": "FScopeTryLock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (CriticalSection ->)",
    "insertText": "Unlock()"
  },
  {
    "label": "IsLocked()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsLocked()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopeTryLock&)",
    "insertText": "operator(FScopeTryLock &Rhs)"
  }
]