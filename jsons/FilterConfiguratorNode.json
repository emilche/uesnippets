[
  {
    "label": "FFilterConfiguratorNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilterConfiguratorNode"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "FFilterContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilterContext"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" InsightsCore / Filter / ViewModels / Filters . h \" # include \" InsightsCore / Table / ViewModels / BaseTreeNode . h \" namespace UE::Insights { typedef TSharedPtr<class FFilterConfiguratorNode> FFilterConfiguratorNodePtr ; typedef TSharedRef<class FFilterConfiguratorNode> FFilterConfiguratorRef ; typedef TSharedRef<const class FFilterConfiguratorNode> FFilterConfiguratorRefConst ; typedef TWeakPtr<class FFilterConfiguratorNode> FFilterConfiguratorNodeWeak ; class FFilterConfiguratorNode : public FBaseTreeNode {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FFilterConfiguratorNode, FBaseTreeNode) public: FFilterConfiguratorNode(const FName InName, bool bInIsGroup)"
  },
  {
    "label": "DeepCopy()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FFilterConfiguratorNode>)",
    "insertText": "DeepCopy(const FFilterConfiguratorNode& Node)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FFilterConfiguratorNode& Other)"
  },
  {
    "label": "FFilterConfiguratorNode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FFilterConfiguratorNode()"
  },
  {
    "label": "SetAvailableFilters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAvailableFilters(TSharedPtr<TArray<TSharedPtr<FFilter>>> InAvailableFilters)"
  },
  {
    "label": "GetAvailableFilters()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<TArray<TSharedPtr<FFilter>>>)",
    "insertText": "GetAvailableFilters()"
  },
  {
    "label": "GetSelectedFilter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFilter>)",
    "insertText": "GetSelectedFilter()"
  },
  {
    "label": "GetSelectedFilterOperator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const IFilterOperator>)",
    "insertText": "GetSelectedFilterOperator()"
  },
  {
    "label": "GetFilterGroupOperators()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FFilterGroupOperator>>&)",
    "insertText": "GetFilterGroupOperators()"
  },
  {
    "label": "SetSelectedFilterGroupOperator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedFilterGroupOperator(TSharedPtr<FFilterGroupOperator> InSelectedFilterGroupOperator)"
  },
  {
    "label": "GetSelectedFilterGroupOperator()",
    "kind": "Method",
    "detail": "Function (SelectedFilterGroupOperator = InSelectedFilterGroupOperator ; } TSharedPtr<FFilterGroupOperator>)",
    "insertText": "GetSelectedFilterGroupOperator()"
  },
  {
    "label": "ApplyFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyFilters(const class FFilterContext& Context)"
  },
  {
    "label": "GetUsedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedKeys(TSet<int32>& GetUsedKeys)"
  },
  {
    "label": "ProcessFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessFilter()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "GetSelectedFilterState()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFilterState>)",
    "insertText": "GetSelectedFilterState()"
  }
]