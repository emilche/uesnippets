[
  {
    "label": "NATInternalSocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NATInternalSocketFactory"
  },
  {
    "label": "NATSocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NATSocketFactory"
  },
  {
    "label": "NATSocketServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NATSocketServer"
  },
  {
    "label": "Translator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Translator"
  },
  {
    "label": "TranslatorMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TranslatorMap"
  },
  {
    "label": "NATInternalSocketFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NAT_SOCKET_FACTORY_H_ # define RTC_BASE_NAT_SOCKET_FACTORY_H_ # include<stddef . h> # include<map> # include<memory> # include<set> # include \" rtc_base / nat_server . h \" # include \" rtc_base / nat_types . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / socket_factory . h \" # include \" rtc_base / socket_server . h \" # include \" rtc_base / thread . h \" namespace rtc { const size_t kNATEncodedIPv4AddressSize = 8 U ; const size_t kNATEncodedIPv6AddressSize = 2 0 U ; class NATInternalSocketFactory { public : ~)",
    "insertText": "NATInternalSocketFactory()"
  },
  {
    "label": "CreateInternalSocket()",
    "kind": "Method",
    "detail": "Function (} Socket*)",
    "insertText": "CreateInternalSocket(int family, int type, const SocketAddress& local_addr, SocketAddress* nat_addr)"
  },
  {
    "label": "NATSocketFactory()",
    "kind": "Method",
    "detail": "Function (} ; class NATSocketFactory : public SocketFactory,public NATInternalSocketFactory { public :)",
    "insertText": "NATSocketFactory(SocketFactory* factory, const SocketAddress& nat_udp_addr, const SocketAddress& nat_tcp_addr)"
  },
  {
    "label": "NATSocketFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NATSocketFactory(const NATSocketFactory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NATSocketFactory&)",
    "insertText": "operator(const NATSocketFactory&)"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (Socket*)",
    "insertText": "CreateSocket(int family, int type)"
  },
  {
    "label": "TranslatorMap()",
    "kind": "Method",
    "detail": "Function (private : SocketFactory* factory_ ; SocketAddress nat_udp_addr_ ; SocketAddress nat_tcp_addr_ ; } ; class NATSocketServer : public SocketServer,public NATInternalSocketFactory { public : class Translator ; class TranslatorMap : private std::map<SocketAddress,Translator*> { public : ~)",
    "insertText": "TranslatorMap()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Translator*)",
    "insertText": "Get(const SocketAddress& ext_ip)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Translator*)",
    "insertText": "Add(const SocketAddress& ext_ip, Translator*)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const SocketAddress& ext_ip)"
  },
  {
    "label": "FindClient()",
    "kind": "Method",
    "detail": "Function (Translator*)",
    "insertText": "FindClient(const SocketAddress& int_ip)"
  },
  {
    "label": "Translator()",
    "kind": "Method",
    "detail": "Function (} ; class Translator { public :)",
    "insertText": "Translator(NATSocketServer* server, NATType type, const SocketAddress& int_addr, SocketFactory* ext_factory, const SocketAddress& ext_addr)"
  },
  {
    "label": "Translator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Translator()"
  },
  {
    "label": "internal_factory()",
    "kind": "Method",
    "detail": "Function (SocketFactory*)",
    "insertText": "internal_factory()"
  },
  {
    "label": "internal_udp_address()",
    "kind": "Method",
    "detail": "Function (} SocketAddress)",
    "insertText": "internal_udp_address()"
  },
  {
    "label": "internal_tcp_address()",
    "kind": "Method",
    "detail": "Function (} SocketAddress)",
    "insertText": "internal_tcp_address()"
  },
  {
    "label": "GetTranslator()",
    "kind": "Method",
    "detail": "Function (} Translator*)",
    "insertText": "GetTranslator(const SocketAddress& ext_ip)"
  },
  {
    "label": "AddTranslator()",
    "kind": "Method",
    "detail": "Function (Translator*)",
    "insertText": "AddTranslator(const SocketAddress& ext_ip, const SocketAddress& int_ip, NATType type)"
  },
  {
    "label": "RemoveTranslator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTranslator(const SocketAddress& ext_ip)"
  },
  {
    "label": "AddClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddClient(const SocketAddress& int_ip)"
  },
  {
    "label": "RemoveClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveClient(const SocketAddress& int_ip)"
  },
  {
    "label": "NATSocketServer()",
    "kind": "Method",
    "detail": "Function (private : NATSocketServer* server_ ; std::unique_ptr<SocketServer> internal_server_ ; std::unique_ptr<NATServer> nat_server_ ; TranslatorMap nats_ ; std::set<SocketAddress> clients_ ; } ;)",
    "insertText": "NATSocketServer(SocketServer* ss)"
  },
  {
    "label": "NATSocketServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NATSocketServer(const NATSocketServer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NATSocketServer&)",
    "insertText": "operator(const NATSocketServer&)"
  },
  {
    "label": "socketserver()",
    "kind": "Method",
    "detail": "Function (SocketServer*)",
    "insertText": "socketserver()"
  },
  {
    "label": "SetMessageQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessageQueue(Thread* queue)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Wait(webrtc::TimeDelta max_wait_duration, bool process_io)"
  },
  {
    "label": "WakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeUp()"
  },
  {
    "label": "PackAddressForNAT()",
    "kind": "Method",
    "detail": "Function (private : SocketServer* server_ ; Thread* msg_queue_ ; TranslatorMap nats_ ; } ; size_t)",
    "insertText": "PackAddressForNAT(char* buf, size_t buf_size, const SocketAddress& remote_addr)"
  },
  {
    "label": "UnpackAddressFromNAT()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "UnpackAddressFromNAT(const char* buf, size_t buf_size, SocketAddress* remote_addr)"
  }
]