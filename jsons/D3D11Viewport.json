[
  {
    "label": "FD3D11EventQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11EventQuery"
  },
  {
    "label": "FD3D11DynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11DynamicRHI"
  },
  {
    "label": "FD3D11Viewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11Viewport"
  },
  {
    "label": "ED3DViewportValidFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ED3DViewportValidFlags"
  },
  {
    "label": "TD3D11ResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TD3D11ResourceTraits"
  },
  {
    "label": "FD3D11EventQuery()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D11Resources . h \" # include \" RenderResource . h \" # include \" RenderUtils . h \" # include \" RHIResources . h \" # include \" Windows / D3D11ThirdParty . h \" # include \" DXGIUtilities . h \" class FD3D11EventQuery { public : D3D11RHI_API)",
    "insertText": "FD3D11EventQuery(class FD3D11DynamicRHI* InD3DRHI)"
  },
  {
    "label": "IssueEvent()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "IssueEvent()"
  },
  {
    "label": "WaitForCompletion()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "WaitForCompletion()"
  },
  {
    "label": "FD3D11Viewport()",
    "kind": "Method",
    "detail": "Function (private : FD3D11DynamicRHI* D3DRHI ; TRefCountPtr<ID3D11Query> Query ; } ; class FD3D11Viewport : public FRHIViewport { public : enum ED3DViewportValidFlags : uint32 { VIEWPORT_INVALID = 0 x1,VIEWPORT_FULLSCREEN_LOST = 0 x2,} ;)",
    "insertText": "FD3D11Viewport(class FD3D11DynamicRHI* InD3DRHI) : D3DRHI(InD3DRHI), PresentFailCount(0), ValidState (0), FrameSyncEvent(InD3DRHI)"
  },
  {
    "label": "FD3D11Viewport()",
    "kind": "Method",
    "detail": "Function (} D3D11RHI_API)",
    "insertText": "FD3D11Viewport(class FD3D11DynamicRHI* InD3DRHI, HWND InWindowHandle, uint32 InSizeX, uint32 InSizeY, bool bInIsFullscreen, EPixelFormat InPreferredPixelFormat)"
  },
  {
    "label": "FD3D11Viewport()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API ~)",
    "insertText": "FD3D11Viewport()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "Resize(uint32 InSizeX, uint32 InSizeY, bool bInIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "ConditionalResetSwapChain()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "ConditionalResetSwapChain(bool bIgnoreFocus)"
  },
  {
    "label": "CheckHDRMonitorStatus()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "CheckHDRMonitorStatus()"
  },
  {
    "label": "Present()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API bool)",
    "insertText": "Present(IRHICommandContext& RHICmdContext, bool bLockToVsync)"
  },
  {
    "label": "GetSizeXY()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetSizeXY()"
  },
  {
    "label": "GetBackBuffer()",
    "kind": "Method",
    "detail": "Function (} FD3D11Texture*)",
    "insertText": "GetBackBuffer()"
  },
  {
    "label": "IssueFrameEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IssueFrameEvent()"
  },
  {
    "label": "GetSwapChain()",
    "kind": "Method",
    "detail": "Function (} IDXGISwapChain*)",
    "insertText": "GetSwapChain()"
  },
  {
    "label": "GetNativeBackBufferTexture()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetNativeBackBufferTexture()"
  },
  {
    "label": "GetNativeBackBufferRT()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetNativeBackBufferRT()"
  },
  {
    "label": "SetCustomPresent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomPresent(FRHICustomPresent* InCustomPresent)"
  },
  {
    "label": "GetCustomPresent()",
    "kind": "Method",
    "detail": "Function (CustomPresent = InCustomPresent ; } FRHICustomPresent*)",
    "insertText": "GetCustomPresent()"
  },
  {
    "label": "GetSwapChainSurface()",
    "kind": "Method",
    "detail": "Function (} D3D11RHI_API FD3D11Texture*)",
    "insertText": "GetSwapChainSurface(FD3D11DynamicRHI* D3DRHI, EPixelFormat PixelFormat, uint32 SizeX, uint32 SizeY, IDXGISwapChain* SwapChain)"
  },
  {
    "label": "GetRenderTargetFormat()",
    "kind": "Method",
    "detail": "Function (DXGI_FORMAT)",
    "insertText": "GetRenderTargetFormat(EPixelFormat PixelFormat)"
  },
  {
    "label": "ResetSwapChainInternal()",
    "kind": "Method",
    "detail": "Function (} protected : D3D11RHI_API void)",
    "insertText": "ResetSwapChainInternal(bool bIgnoreFocus)"
  },
  {
    "label": "GetSwapChainFlags()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API uint32)",
    "insertText": "GetSwapChainFlags()"
  },
  {
    "label": "PresentWithVsyncDWM()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "PresentWithVsyncDWM(IRHICommandContext& RHICmdContext)"
  },
  {
    "label": "PresentChecked()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API bool)",
    "insertText": "PresentChecked(IRHICommandContext& RHICmdContext, int32 SyncInterval)"
  },
  {
    "label": "EnableHDR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableHDR()"
  },
  {
    "label": "ShutdownHDR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownHDR()"
  },
  {
    "label": "SetupDXGI_MODE_DESC()",
    "kind": "Method",
    "detail": "Function (FD3D11DynamicRHI* D3DRHI ; uint64 LastFlipTime ; uint64 LastFrameComplete ; uint64 LastCompleteTime ; int32 SyncCounter ; bool bSyncedLastFrame ; HWND WindowHandle ; uint32 MaximumFrameLatency ; uint32 SizeX ; uint32 SizeY ; uint32 BackBufferCount ; uint32 PresentFailCount ; TAtomic<uint32> ValidState ; EPixelFormat PixelFormat ; EDisplayColorGamut DisplayColorGamut ; EDisplayOutputFormat DisplayOutputFormat ; bool bIsFullscreen ; bool bAllowTearing ; D3D11RHI_API uint32 GSwapChainFlags ; TRefCountPtr<IDXGISwapChain> SwapChain ; TRefCountPtr<FD3D11Texture> BackBuffer ; TRefCountPtr<IDXGIOutput> ForcedFullscreenOutput ; bool bForcedFullscreenDisplay ; bool bNeedSwapChain ; FD3D11EventQuery FrameSyncEvent ; FCustomPresentRHIRef CustomPresent ; D3D11RHI_API DXGI_MODE_DESC)",
    "insertText": "SetupDXGI_MODE_DESC()"
  }
]