[
  {
    "label": "TIsEnumConvertibleToInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsEnumConvertibleToInt"
  },
  {
    "label": "TIsEnumClass",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsEnumClass"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / AndOrNot . h \" namespace UE::Core::Private::IsEnumClass { template<T> struct TIsEnumConvertibleToInt {)",
    "insertText": "char(&Resolve(int))"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (char)",
    "insertText": "Resolve(...)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (enum { Value =)",
    "insertText": "sizeof(Resolve(T()))"
  },
  {
    "label": "__is_enum()",
    "kind": "Method",
    "detail": "Function (} ; } template<T> struct TIsEnumClass { enum { Value = TAndValue<)",
    "insertText": "__is_enum(T)"
  }
]