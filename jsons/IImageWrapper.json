[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IImageWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IImageWrapper"
  },
  {
    "label": "SetCompressed()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" # include \" ImageCore . h \" # include \" ImageWrapperOutputTypes . h \" enum class EImageFormat : int8 { Invalid = - 1,PNG = 0,JPEG,GrayscaleJPEG,BMP,ICO,EXR,ICNS,TGA,HDR,TIFF,DDS,UEJPEG,GrayscaleUEJPEG,} ; enum class ERGBFormat : int8 { Invalid = - 1,RGBA = 0,BGRA = 1,Gray = 2,RGBAF = 3,BGRE = 4,GrayF = 5,} ; enum class EImageCompressionQuality : int8 { Default = 0,Uncompressed = 1,Max = 1 0 0,} ; class IImageWrapper { protected : const TCHAR* DebugImageName = nullptr ; public : bool)",
    "insertText": "SetCompressed(const void* InCompressedData, int64 InCompressedSize)"
  },
  {
    "label": "SetRaw()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRaw(const void* InRawData, int64 InRawSize, const int32 InWidth, const int32 InHeight, const ERGBFormat InFormat, const int32 InBitDepth, const int32 InBytesPerRow = 0)"
  },
  {
    "label": "CanSetRawFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetRawFormat(const ERGBFormat InFormat, const int32 InBitDepth)"
  },
  {
    "label": "GetSupportedRawFormat()",
    "kind": "Method",
    "detail": "Function (ERawImageFormat::Type)",
    "insertText": "GetSupportedRawFormat(const ERawImageFormat::Type InFormat)"
  },
  {
    "label": "GetCompressed()",
    "kind": "Method",
    "detail": "Function (TArray64<uint8>)",
    "insertText": "GetCompressed(int32 Quality = 0)"
  },
  {
    "label": "GetExportData()",
    "kind": "Method",
    "detail": "Function (TArray64<uint8>)",
    "insertText": "GetExportData(int32 Quality = 0)"
  },
  {
    "label": "GetRaw()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetRaw(TArray64<uint8>& OutRawData)"
  },
  {
    "label": "GetFormat()",
    "kind": "Method",
    "detail": "Function (ERGBFormat Format =)",
    "insertText": "GetFormat()"
  },
  {
    "label": "GetBitDepth()",
    "kind": "Method",
    "detail": "Function (int32 BitDepth =)",
    "insertText": "GetBitDepth()"
  },
  {
    "label": "GetRaw()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetRaw(FDecompressedImageOutput& OutDecompressedImage)"
  },
  {
    "label": "GetRawImage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetRawImage(FImage & OutImage)"
  },
  {
    "label": "GetRawImage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRawImage(FDecompressedImageOutput& OutDecompressedImage)"
  },
  {
    "label": "GetRaw()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRaw(const ERGBFormat InFormat, int32 InBitDepth, TArray64<uint8>& OutRawData)"
  },
  {
    "label": "GetRaw()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRaw(const ERGBFormat InFormat, int32 InBitDepth, FDecompressedImageOutput& OutDecompressedImage)"
  },
  {
    "label": "GetRaw()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRaw(const ERGBFormat InFormat, int32 InBitDepth, TArray<uint8>& OutRawData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray64<uint8> TmpRawData ;)",
    "insertText": "if(GetRaw(InFormat, InBitDepth, TmpRawData) && ensureMsgf(TmpRawData.Num() == (int32)TmpRawData.Num(), TEXT(\"Tried to get %dx%d %dbpp image with format %d into 32-bit TArray (%\" INT64_FMT \" bytes)\"), GetWidth(), GetHeight(), InBitDepth, InFormat, (long long int)TmpRawData.Num()))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutRawData =)",
    "insertText": "MoveTemp(TmpRawData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray64<uint8> TmpRawData ;)",
    "insertText": "if(GetRaw(InFormat, InBitDepth, TmpRawData))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(OutRawData.GetData(), TmpRawData.GetData(), OutRawData.Num())"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetHeight()"
  },
  {
    "label": "GetSRGB()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSRGB()"
  },
  {
    "label": "ConvertRawImageFormat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConvertRawImageFormat(ERawImageFormat::Type RawFormat, ERGBFormat & OutFormat,int & OutBitDepth)"
  },
  {
    "label": "ConvertRGBFormat()",
    "kind": "Method",
    "detail": "Function (ERawImageFormat::Type)",
    "insertText": "ConvertRGBFormat(ERGBFormat RGBFormat,int BitDepth,bool * bIsExactMatch = nullptr)"
  },
  {
    "label": "GetRGBFormatBytesPerPel()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetRGBFormatBytesPerPel(ERGBFormat RGBFormat,int BitDepth)"
  },
  {
    "label": "GetClosestRawImageFormat()",
    "kind": "Method",
    "detail": "Function (ERawImageFormat::Type)",
    "insertText": "GetClosestRawImageFormat(bool * bIsExactMatch = nullptr)"
  },
  {
    "label": "ConvertRGBFormat()",
    "kind": "Method",
    "detail": "Function (ERawImageFormat::Type Ret =)",
    "insertText": "ConvertRGBFormat(Format,BitDepth,bIsExactMatch)"
  },
  {
    "label": "IImageWrapper()",
    "kind": "Method",
    "detail": "Function (DebugImageName = InDebugImageName ; } public : ~)",
    "insertText": "IImageWrapper()"
  }
]