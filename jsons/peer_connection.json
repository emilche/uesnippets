[
  {
    "label": "PeerConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnection"
  },
  {
    "label": "InitializePortAllocatorResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InitializePortAllocatorResult"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_PEER_CONNECTION_H_ # define PC_PEER_CONNECTION_H_ # include<stdint . h> # include<functional> # include<map> # include<memory> # include<set> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / adaptation / resource . h \" # include \" api / async_dns_resolver . h \" # include \" api / candidate . h \" # include \" api / crypto / crypto_options . h \" # include \" api / data_channel_interface . h \" # include \" api / dtls_transport_interface . h \" # include \" api / field_trials_view . h \" # include \" api / ice_transport_interface . h \" # include \" api / jsep . h \" # include \" api / media_stream_interface . h \" # include \" api / media_types . h \" # include \" api / peer_connection_interface . h \" # include \" api / rtc_error . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / rtc_event_log_output . h \" # include \" api / rtp_receiver_interface . h \" # include \" api / rtp_sender_interface . h \" # include \" api / rtp_transceiver_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / sctp_transport_interface . h \" # include \" api / sequence_checker . h \" # include \" api / set_local_description_observer_interface . h \" # include \" api / set_remote_description_observer_interface . h \" # include \" api / stats / rtc_stats_collector_callback . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / transport / bitrate_settings . h \" # include \" api / transport / data_channel_transport_interface . h \" # include \" api / transport / enums . h \" # include \" api / turn_customizer . h \" # include \" call / call . h \" # include \" p2p / base / ice_transport_internal . h \" # include \" p2p / base / port . h \" # include \" p2p / base / port_allocator . h \" # include \" p2p / base / transport_description . h \" # include \" pc / channel_interface . h \" # include \" pc / connection_context . h \" # include \" pc / data_channel_controller . h \" # include \" pc / data_channel_utils . h \" # include \" pc / dtls_transport . h \" # include \" pc / jsep_transport_controller . h \" # include \" pc / legacy_stats_collector . h \" # include \" pc / peer_connection_internal . h \" # include \" pc / peer_connection_message_handler . h \" # include \" pc / rtc_stats_collector . h \" # include \" pc / rtp_transceiver . h \" # include \" pc / rtp_transmission_manager . h \" # include \" pc / rtp_transport_internal . h \" # include \" pc / sctp_data_channel . h \" # include \" pc / sdp_offer_answer . h \" # include \" pc / session_description . h \" # include \" pc / transceiver_list . h \" # include \" pc / transport_stats . h \" # include \" pc / usage_pattern . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / rtc_certificate . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / ssl_stream_adapter . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" # include \" rtc_base / weak_ptr . h \" namespace webrtc { class PeerConnection : public PeerConnectionInternal,public JsepTransportController::Observer { public : RTCErrorOr<rtc::scoped_refptr<PeerConnection>>)",
    "insertText": "Create(rtc::scoped_refptr<ConnectionContext> context, const PeerConnectionFactoryInterface::Options& options, std::unique_ptr<RtcEventLog> event_log, std::unique_ptr<Call> call, const PeerConnectionInterface::RTCConfiguration& configuration, PeerConnectionDependencies dependencies)"
  },
  {
    "label": "local_streams()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<StreamCollectionInterface>)",
    "insertText": "local_streams()"
  },
  {
    "label": "remote_streams()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<StreamCollectionInterface>)",
    "insertText": "remote_streams()"
  },
  {
    "label": "AddStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddStream(MediaStreamInterface* local_stream)"
  },
  {
    "label": "RemoveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStream(MediaStreamInterface* local_stream)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<RtpSenderInterface>>)",
    "insertText": "AddTrack(rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<std::string>& stream_ids)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<RtpSenderInterface>>)",
    "insertText": "AddTrack(rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<std::string>& stream_ids, const std::vector<RtpEncodingParameters>& init_send_encodings)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<RtpSenderInterface>>)",
    "insertText": "AddTrack(rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<std::string>& stream_ids, const std::vector<RtpEncodingParameters>* init_send_encodings)"
  },
  {
    "label": "RemoveTrackOrError()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "RemoveTrackOrError(rtc::scoped_refptr<RtpSenderInterface> sender)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<RtpTransceiverInterface>>)",
    "insertText": "AddTransceiver(rtc::scoped_refptr<MediaStreamTrackInterface> track)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<RtpTransceiverInterface>>)",
    "insertText": "AddTransceiver(rtc::scoped_refptr<MediaStreamTrackInterface> track, const RtpTransceiverInit& init)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<RtpTransceiverInterface>>)",
    "insertText": "AddTransceiver(cricket::MediaType media_type)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<RtpTransceiverInterface>>)",
    "insertText": "AddTransceiver(cricket::MediaType media_type, const RtpTransceiverInit& init)"
  },
  {
    "label": "CreateSender()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpSenderInterface>)",
    "insertText": "CreateSender(const std::string& kind, const std::string& stream_id)"
  },
  {
    "label": "GetSenders()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<RtpSenderInterface>>)",
    "insertText": "GetSenders()"
  },
  {
    "label": "GetReceivers()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<RtpReceiverInterface>>)",
    "insertText": "GetReceivers()"
  },
  {
    "label": "GetTransceivers()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<RtpTransceiverInterface>>)",
    "insertText": "GetTransceivers()"
  },
  {
    "label": "CreateDataChannelOrError()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<DataChannelInterface>>)",
    "insertText": "CreateDataChannelOrError(const std::string& label, const DataChannelInit* config)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(StatsObserver* observer, webrtc::MediaStreamTrackInterface* track, StatsOutputLevel level)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(RTCStatsCollectorCallback* callback)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(rtc::scoped_refptr<RtpSenderInterface> selector, rtc::scoped_refptr<RTCStatsCollectorCallback> callback)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(rtc::scoped_refptr<RtpReceiverInterface> selector, rtc::scoped_refptr<RTCStatsCollectorCallback> callback)"
  },
  {
    "label": "ClearStatsCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStatsCache()"
  },
  {
    "label": "signaling_state()",
    "kind": "Method",
    "detail": "Function (SignalingState)",
    "insertText": "signaling_state()"
  },
  {
    "label": "ice_connection_state()",
    "kind": "Method",
    "detail": "Function (IceConnectionState)",
    "insertText": "ice_connection_state()"
  },
  {
    "label": "ice_connection_state_internal()",
    "kind": "Method",
    "detail": "Function (IceConnectionState)",
    "insertText": "ice_connection_state_internal()"
  },
  {
    "label": "standardized_ice_connection_state()",
    "kind": "Method",
    "detail": "Function (} IceConnectionState)",
    "insertText": "standardized_ice_connection_state()"
  },
  {
    "label": "peer_connection_state()",
    "kind": "Method",
    "detail": "Function (PeerConnectionState)",
    "insertText": "peer_connection_state()"
  },
  {
    "label": "ice_gathering_state()",
    "kind": "Method",
    "detail": "Function (IceGatheringState)",
    "insertText": "ice_gathering_state()"
  },
  {
    "label": "can_trickle_ice_candidates()",
    "kind": "Method",
    "detail": "Function (absl::optional<bool>)",
    "insertText": "can_trickle_ice_candidates()"
  },
  {
    "label": "local_description()",
    "kind": "Method",
    "detail": "Function (const SessionDescriptionInterface*)",
    "insertText": "local_description()"
  },
  {
    "label": "remote_description()",
    "kind": "Method",
    "detail": "Function (const SessionDescriptionInterface*)",
    "insertText": "remote_description()"
  },
  {
    "label": "current_local_description()",
    "kind": "Method",
    "detail": "Function (const SessionDescriptionInterface*)",
    "insertText": "current_local_description()"
  },
  {
    "label": "current_remote_description()",
    "kind": "Method",
    "detail": "Function (const SessionDescriptionInterface*)",
    "insertText": "current_remote_description()"
  },
  {
    "label": "pending_local_description()",
    "kind": "Method",
    "detail": "Function (const SessionDescriptionInterface*)",
    "insertText": "pending_local_description()"
  },
  {
    "label": "pending_remote_description()",
    "kind": "Method",
    "detail": "Function (const SessionDescriptionInterface*)",
    "insertText": "pending_remote_description()"
  },
  {
    "label": "RestartIce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartIce()"
  },
  {
    "label": "CreateOffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOffer(CreateSessionDescriptionObserver* observer, const RTCOfferAnswerOptions& options)"
  },
  {
    "label": "CreateAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAnswer(CreateSessionDescriptionObserver* observer, const RTCOfferAnswerOptions& options)"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalDescription(std::unique_ptr<SessionDescriptionInterface> desc, rtc::scoped_refptr<SetLocalDescriptionObserverInterface> observer)"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalDescription(rtc::scoped_refptr<SetLocalDescriptionObserverInterface> observer)"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalDescription(SetSessionDescriptionObserver* observer, SessionDescriptionInterface* desc)"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalDescription(SetSessionDescriptionObserver* observer)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteDescription(std::unique_ptr<SessionDescriptionInterface> desc, rtc::scoped_refptr<SetRemoteDescriptionObserverInterface> observer)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteDescription(SetSessionDescriptionObserver* observer, SessionDescriptionInterface* desc)"
  },
  {
    "label": "GetConfiguration()",
    "kind": "Method",
    "detail": "Function (PeerConnectionInterface::RTCConfiguration)",
    "insertText": "GetConfiguration()"
  },
  {
    "label": "SetConfiguration()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetConfiguration(const PeerConnectionInterface::RTCConfiguration& configuration)"
  },
  {
    "label": "AddIceCandidate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddIceCandidate(const IceCandidateInterface* candidate)"
  },
  {
    "label": "AddIceCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIceCandidate(std::unique_ptr<IceCandidateInterface> candidate, std::function<void(RTCError)> callback)"
  },
  {
    "label": "RemoveIceCandidates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveIceCandidates(const std::vector<cricket::Candidate>& candidates)"
  },
  {
    "label": "SetBitrate()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetBitrate(const BitrateSettings& bitrate)"
  },
  {
    "label": "SetAudioPlayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioPlayout(bool playout)"
  },
  {
    "label": "SetAudioRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioRecording(bool recording)"
  },
  {
    "label": "LookupDtlsTransportByMid()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<DtlsTransportInterface>)",
    "insertText": "LookupDtlsTransportByMid(const std::string& mid)"
  },
  {
    "label": "LookupDtlsTransportByMidInternal()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<DtlsTransport>)",
    "insertText": "LookupDtlsTransportByMidInternal(const std::string& mid)"
  },
  {
    "label": "GetSctpTransport()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<SctpTransportInterface>)",
    "insertText": "GetSctpTransport()"
  },
  {
    "label": "AddAdaptationResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdaptationResource(rtc::scoped_refptr<Resource> resource)"
  },
  {
    "label": "StartRtcEventLog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartRtcEventLog(std::unique_ptr<RtcEventLogOutput> output, int64_t output_period_ms)"
  },
  {
    "label": "StartRtcEventLog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartRtcEventLog(std::unique_ptr<RtcEventLogOutput> output)"
  },
  {
    "label": "StopRtcEventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRtcEventLog()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "signaling_thread()",
    "kind": "Method",
    "detail": "Function (rtc::Thread*)",
    "insertText": "signaling_thread()"
  },
  {
    "label": "network_thread()",
    "kind": "Method",
    "detail": "Function (} rtc::Thread*)",
    "insertText": "network_thread()"
  },
  {
    "label": "worker_thread()",
    "kind": "Method",
    "detail": "Function (} rtc::Thread*)",
    "insertText": "worker_thread()"
  },
  {
    "label": "session_id()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "session_id()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(signaling_thread())"
  },
  {
    "label": "GetTransceiversInternal()",
    "kind": "Method",
    "detail": "Function (} std::vector<rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>>>)",
    "insertText": "GetTransceiversInternal()"
  },
  {
    "label": "SignalSctpDataChannelCreated()",
    "kind": "Method",
    "detail": "Function (} sigslot::signal1<SctpDataChannel*>&)",
    "insertText": "SignalSctpDataChannelCreated()"
  },
  {
    "label": "GetDataChannelStats()",
    "kind": "Method",
    "detail": "Function (} std::vector<DataChannelStats>)",
    "insertText": "GetDataChannelStats()"
  },
  {
    "label": "sctp_transport_name()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::string>)",
    "insertText": "sctp_transport_name()"
  },
  {
    "label": "sctp_mid()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::string>)",
    "insertText": "sctp_mid()"
  },
  {
    "label": "GetPooledCandidateStats()",
    "kind": "Method",
    "detail": "Function (cricket::CandidateStatsList)",
    "insertText": "GetPooledCandidateStats()"
  },
  {
    "label": "GetTransportStatsByNames()",
    "kind": "Method",
    "detail": "Function (std::map<std::string,cricket::TransportStats>)",
    "insertText": "GetTransportStatsByNames(const std::set<std::string>& transport_names)"
  },
  {
    "label": "GetCallStats()",
    "kind": "Method",
    "detail": "Function (Call::Stats)",
    "insertText": "GetCallStats()"
  },
  {
    "label": "GetLocalCertificate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLocalCertificate(const std::string& transport_name, rtc::scoped_refptr<rtc::RTCCertificate>* certificate)"
  },
  {
    "label": "GetRemoteSSLCertChain()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<rtc::SSLCertChain>)",
    "insertText": "GetRemoteSSLCertChain(const std::string& transport_name)"
  },
  {
    "label": "IceRestartPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IceRestartPending(const std::string& content_name)"
  },
  {
    "label": "NeedsIceRestart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsIceRestart(const std::string& content_name)"
  },
  {
    "label": "GetSslRole()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSslRole(const std::string& content_name, rtc::SSLRole* role)"
  },
  {
    "label": "NoteDataAddedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteDataAddedEvent()"
  },
  {
    "label": "NoteUsageEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteUsageEvent(UsageEvent::DATA_ADDED)"
  },
  {
    "label": "Observer()",
    "kind": "Method",
    "detail": "Function (} PeerConnectionObserver*)",
    "insertText": "Observer()"
  },
  {
    "label": "IsClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClosed()"
  },
  {
    "label": "GetSctpSslRole()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetSctpSslRole(rtc::SSLRole* role)"
  },
  {
    "label": "OnSctpDataChannelClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSctpDataChannelClosed(DataChannelInterface* channel)"
  },
  {
    "label": "ShouldFireNegotiationNeededEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFireNegotiationNeededEvent(uint32_t event_id)"
  },
  {
    "label": "legacy_stats()",
    "kind": "Method",
    "detail": "Function (LegacyStatsCollector*)",
    "insertText": "legacy_stats()"
  },
  {
    "label": "data_channel_controller()",
    "kind": "Method",
    "detail": "Function (} DataChannelController*)",
    "insertText": "data_channel_controller()"
  },
  {
    "label": "rtp_manager()",
    "kind": "Method",
    "detail": "Function (} const RtpTransmissionManager*)",
    "insertText": "rtp_manager()"
  },
  {
    "label": "transport_controller_s()",
    "kind": "Method",
    "detail": "Function (} JsepTransportController*)",
    "insertText": "transport_controller_s()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(network_thread())"
  },
  {
    "label": "port_allocator()",
    "kind": "Method",
    "detail": "Function (} cricket::PortAllocator*)",
    "insertText": "port_allocator()"
  },
  {
    "label": "call_ptr()",
    "kind": "Method",
    "detail": "Function (} Call*)",
    "insertText": "call_ptr()"
  },
  {
    "label": "options()",
    "kind": "Method",
    "detail": "Function (} const PeerConnectionFactoryInterface::Options*)",
    "insertText": "options()"
  },
  {
    "label": "NoteUsageEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteUsageEvent(UsageEvent event)"
  },
  {
    "label": "AddRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRemoteCandidate(const std::string& mid, const cricket::Candidate& candidate)"
  },
  {
    "label": "ReportSdpBundleUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportSdpBundleUsage(const SessionDescriptionInterface& remote_description)"
  },
  {
    "label": "ReportFirstConnectUsageMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportFirstConnectUsageMetrics() RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "IsUnifiedPlan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnifiedPlan()"
  },
  {
    "label": "GetDataMid()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::string>)",
    "insertText": "GetDataMid()"
  },
  {
    "label": "SetSctpDataMid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSctpDataMid(const std::string& mid)"
  },
  {
    "label": "ResetSctpDataMid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSctpDataMid()"
  },
  {
    "label": "StartSctpTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSctpTransport(int local_port, int remote_port, int max_message_size)"
  },
  {
    "label": "GetCryptoOptions()",
    "kind": "Method",
    "detail": "Function (CryptoOptions)",
    "insertText": "GetCryptoOptions()"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<RtpTransceiverInterface>>)",
    "insertText": "AddTransceiver(cricket::MediaType media_type, rtc::scoped_refptr<MediaStreamTrackInterface> track, const RtpTransceiverInit& init, bool fire_callback = true)"
  },
  {
    "label": "GetRtpTransport()",
    "kind": "Method",
    "detail": "Function (RtpTransportInternal*)",
    "insertText": "GetRtpTransport(const std::string& mid)"
  },
  {
    "label": "SrtpRequired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SrtpRequired()"
  },
  {
    "label": "SetupDataChannelTransport_n()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetupDataChannelTransport_n(const std::string& mid) override RTC_RUN_ON(network_thread())"
  },
  {
    "label": "TeardownDataChannelTransport_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownDataChannelTransport_n() override RTC_RUN_ON(network_thread())"
  },
  {
    "label": "trials()",
    "kind": "Method",
    "detail": "Function (const FieldTrialsView&)",
    "insertText": "trials()"
  },
  {
    "label": "ReturnHistogramVeryQuicklyForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnHistogramVeryQuicklyForTesting()"
  },
  {
    "label": "PeerConnection()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "PeerConnection(rtc::scoped_refptr<ConnectionContext> context, const PeerConnectionFactoryInterface::Options& options, bool is_unified_plan, std::unique_ptr<RtcEventLog> event_log, std::unique_ptr<Call> call, PeerConnectionDependencies& dependencies, bool dtls_enabled)"
  },
  {
    "label": "PeerConnection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PeerConnection()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : RTCError)",
    "insertText": "Initialize(const PeerConnectionInterface::RTCConfiguration& configuration, PeerConnectionDependencies dependencies)"
  },
  {
    "label": "InitializeTransportController_n()",
    "kind": "Method",
    "detail": "Function (JsepTransportController*)",
    "insertText": "InitializeTransportController_n(const RTCConfiguration& configuration, const PeerConnectionDependencies& dependencies) RTC_RUN_ON(network_thread())"
  },
  {
    "label": "FindTransceiverBySender()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>>)",
    "insertText": "FindTransceiverBySender(rtc::scoped_refptr<RtpSenderInterface> sender) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "SetStandardizedIceConnectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStandardizedIceConnectionState(PeerConnectionInterface::IceConnectionState new_state) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "SetConnectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConnectionState(PeerConnectionInterface::PeerConnectionState new_state) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnIceGatheringChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceGatheringChange(IceGatheringState new_state) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnIceCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceCandidate(std::unique_ptr<IceCandidateInterface> candidate) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnIceCandidateError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceCandidateError(const std::string& address, int port, const std::string& url, int error_code, const std::string& error_text) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnIceCandidatesRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceCandidatesRemoved(const std::vector<cricket::Candidate>& candidates) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnSelectedCandidatePairChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedCandidatePairChanged(const cricket::CandidatePairChangeEvent& event) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnNegotiationNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNegotiationNeeded()"
  },
  {
    "label": "InitializePortAllocator_n()",
    "kind": "Method",
    "detail": "Function (struct InitializePortAllocatorResult { bool enable_ipv6 ; } ; InitializePortAllocatorResult)",
    "insertText": "InitializePortAllocator_n(const cricket::ServerAddresses& stun_servers, const std::vector<cricket::RelayServerConfig>& turn_servers, const RTCConfiguration& configuration)"
  },
  {
    "label": "ReconfigurePortAllocator_n()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReconfigurePortAllocator_n(const cricket::ServerAddresses& stun_servers, const std::vector<cricket::RelayServerConfig>& turn_servers, IceTransportsType type, int candidate_pool_size, PortPrunePolicy turn_port_prune_policy, webrtc::TurnCustomizer* turn_customizer, absl::optional<int> stun_candidate_keepalive_interval, bool have_local_description)"
  },
  {
    "label": "StartRtcEventLog_w()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartRtcEventLog_w(std::unique_ptr<RtcEventLogOutput> output, int64_t output_period_ms)"
  },
  {
    "label": "StopRtcEventLog_w()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRtcEventLog_w()"
  },
  {
    "label": "GetTransportDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTransportDescription(const cricket::SessionDescription* description, const std::string& content_name, cricket::TransportDescription* info)"
  },
  {
    "label": "GetLocalCandidateMediaIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLocalCandidateMediaIndex(const std::string& content_name, int* sdp_mline_index) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnTransportControllerConnectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportControllerConnectionState(cricket::IceConnectionState state) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnTransportControllerGatheringState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportControllerGatheringState(cricket::IceGatheringState state) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnTransportControllerCandidatesGathered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportControllerCandidatesGathered(const std::string& transport_name, const std::vector<cricket::Candidate>& candidates) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnTransportControllerCandidateError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportControllerCandidateError(const cricket::IceCandidateErrorEvent& event) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnTransportControllerCandidatesRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportControllerCandidatesRemoved(const std::vector<cricket::Candidate>& candidates) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnTransportControllerCandidateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportControllerCandidateChanged(const cricket::CandidatePairChangeEvent& event) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnTransportControllerDtlsHandshakeError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportControllerDtlsHandshakeError(rtc::SSLHandshakeError error)"
  },
  {
    "label": "ReportTransportStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportTransportStats() RTC_RUN_ON(network_thread())"
  },
  {
    "label": "ReportBestConnectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportBestConnectionState(const cricket::TransportStats& stats)"
  },
  {
    "label": "ReportNegotiatedCiphers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportNegotiatedCiphers(bool dtls_enabled, const cricket::TransportStats& stats, const std::set<cricket::MediaType>& media_types)"
  },
  {
    "label": "ReportIceCandidateCollected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportIceCandidateCollected(const cricket::Candidate& candidate) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "ReportUsagePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportUsagePattern() const RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "ReportRemoteIceCandidateAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportRemoteIceCandidateAdded(const cricket::Candidate& candidate)"
  },
  {
    "label": "OnTransportChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnTransportChanged(const std::string& mid, RtpTransportInternal* rtp_transport, rtc::scoped_refptr<DtlsTransport> dtls_transport, DataChannelTransportInterface* data_channel_transport)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "void(const rtc::CopyOnWriteBuffer& packet, int64_t packet_time_us)> InitializeRtcpCallback()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const rtc::scoped_refptr<ConnectionContext> context_ ; const webrtc::AlwaysValidPointer<const FieldTrialsView,FieldTrialBasedConfig> trials_ ; const PeerConnectionFactoryInterface::Options options_ ; PeerConnectionObserver* observer_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread())"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const bool is_unified_plan_ ; std::unique_ptr<RtcEventLog> event_log_)",
    "insertText": "RTC_GUARDED_BY(worker_thread())"
  },
  {
    "label": "RTC_PT_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RtcEventLog* const event_log_ptr_)",
    "insertText": "RTC_PT_GUARDED_BY(worker_thread())"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const std::unique_ptr<AsyncDnsResolverFactoryInterface> async_dns_resolver_factory_ ; std::unique_ptr<cricket::PortAllocator> port_allocator_ ; const std::unique_ptr<webrtc::IceTransportFactory> ice_transport_factory_ ; const std::unique_ptr<rtc::SSLCertificateVerifier> tls_cert_verifier_)",
    "insertText": "RTC_GUARDED_BY(network_thread())"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SdpOfferAnswerHandler> sdp_handler_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread()) RTC_PT_GUARDED_BY(signaling_thread())"
  }
]