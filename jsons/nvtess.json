[
  {
    "label": "DestBufferMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DestBufferMode"
  },
  {
    "label": "IndexBufferType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IndexBufferType"
  },
  {
    "label": "Vector3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vector3"
  },
  {
    "label": "Vector2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vector2"
  },
  {
    "label": "Vertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vertex"
  },
  {
    "label": "around",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "around"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "IndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndexBuffer"
  },
  {
    "label": "RenderBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RenderBuffer"
  },
  {
    "label": "FHashMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHashMap"
  },
  {
    "label": "FFromEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFromEntry"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FToRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToRef"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "iterator"
  },
  {
    "label": "Edge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Edge"
  },
  {
    "label": "Edge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Edge"
  },
  {
    "label": "Corner",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Corner"
  },
  {
    "label": "Triangle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Triangle"
  },
  {
    "label": "IndexBuffer()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "IndexBuffer(void* bufferContents, IndexBufferType ibtype, unsigned int length, bool bufferOwner)"
  },
  {
    "label": "FToRef()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FToRef( To )"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator( 0 )"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator( &ToEntries[EntryIndex] )"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hash_value(vert.pos)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "hash_value(const Edge& edge)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "assert(0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "assert(0)"
  },
  {
    "label": "Edge()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Edge(mIndexTo, mIndexFrom, mVertexTo, mVertexFrom)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "hash_value(const Edge& edge)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "assert(0)"
  },
  {
    "label": "tri()",
    "kind": "Method",
    "detail": "Function (Triangle)",
    "insertText": "tri(i0, i1, i2, v0, v1, v2)"
  },
  {
    "label": "expandIb_DominantEdgeAndCorner()",
    "kind": "Method",
    "detail": "Function (DBM_DominantEdgeAndCorner:)",
    "insertText": "expandIb_DominantEdgeAndCorner(outIb, tri, startOutIndex)"
  },
  {
    "label": "expandIb_PnAenOnly()",
    "kind": "Method",
    "detail": "Function (DBM_PnAenOnly:)",
    "insertText": "expandIb_PnAenOnly(outIb, tri, startOutIndex)"
  },
  {
    "label": "expandIb_PnAenDominantCorner()",
    "kind": "Method",
    "detail": "Function (DBM_PnAenDominantCorner:)",
    "insertText": "expandIb_PnAenDominantCorner(outIb, tri, startOutIndex)"
  },
  {
    "label": "expandIb_PnAenDominantEdgeAndCorner()",
    "kind": "Method",
    "detail": "Function (DBM_PnAenDominantEdgeAndCorner:)",
    "insertText": "expandIb_PnAenDominantEdgeAndCorner(outIb, tri, startOutIndex)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "assert(0)"
  },
  {
    "label": "tri()",
    "kind": "Method",
    "detail": "Function (Triangle)",
    "insertText": "tri(i0, i1, i2, v0, v1, v2)"
  },
  {
    "label": "replacePlaceholderIndices_DominantEdgeAndCorner()",
    "kind": "Method",
    "detail": "Function (DBM_DominantEdgeAndCorner:)",
    "insertText": "replacePlaceholderIndices_DominantEdgeAndCorner(outIb, tri, startOutIndex, edgeDict, posDict)"
  },
  {
    "label": "replacePlaceholderIndices_PnAenOnly()",
    "kind": "Method",
    "detail": "Function (DBM_PnAenOnly:)",
    "insertText": "replacePlaceholderIndices_PnAenOnly(outIb, tri, startOutIndex, edgeDict, posDict)"
  },
  {
    "label": "replacePlaceholderIndices_PnAenDominantCorner()",
    "kind": "Method",
    "detail": "Function (DBM_PnAenDominantCorner:)",
    "insertText": "replacePlaceholderIndices_PnAenDominantCorner(outIb, tri, startOutIndex, edgeDict, posDict)"
  },
  {
    "label": "replacePlaceholderIndices_PnAenDominantEdgeAndCorner()",
    "kind": "Method",
    "detail": "Function (DBM_PnAenDominantEdgeAndCorner:)",
    "insertText": "replacePlaceholderIndices_PnAenDominantEdgeAndCorner(outIb, tri, startOutIndex, edgeDict, posDict)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "assert(0)"
  },
  {
    "label": "newIb()",
    "kind": "Method",
    "detail": "Function (int>)",
    "insertText": "newIb(newIbSize)"
  },
  {
    "label": "newIndexBuffer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "newIndexBuffer(newIb, inputBuffer)"
  }
]