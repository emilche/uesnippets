[
  {
    "label": "DestBufferMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DestBufferMode"
  },
  {
    "label": "IndexBufferType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IndexBufferType"
  },
  {
    "label": "Vector3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vector3"
  },
  {
    "label": "Vector2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vector2"
  },
  {
    "label": "Vertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vertex"
  },
  {
    "label": "IndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndexBuffer"
  },
  {
    "label": "RenderBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RenderBuffer"
  },
  {
    "label": "FHashMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHashMap"
  },
  {
    "label": "FFromEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFromEntry"
  },
  {
    "label": "FToRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToRef"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "iterator"
  },
  {
    "label": "Edge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Edge"
  },
  {
    "label": "Corner",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Corner"
  },
  {
    "label": "Triangle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Triangle"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef NVTESS_H # define NVTESS_H # include<algorithm> namespace nv { enum DestBufferMode { DBM_DominantEdgeAndCorner = 0,DBM_PnAenOnly = 1,DBM_PnAenDominantCorner = 2,DBM_PnAenDominantEdgeAndCorner = 3,DestBufferMode_MAX } ; enum IndexBufferType { IBT_U16,IBT_U32,IndexBufferType_MAX } ; struct Vector3 { float x,y,z ; bool)",
    "insertText": "operator(const Vector3& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct Vertex { nv::Vector3 pos ; nv::Vector2 uv ; bool)",
    "insertText": "operator(const Vertex& rhs)"
  },
  {
    "label": "IndexBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IndexBuffer()"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (IndexBufferType)",
    "insertText": "getType()"
  },
  {
    "label": "RenderBuffer()",
    "kind": "Method",
    "detail": "Function (} ; class RenderBuffer { protected : IndexBuffer* mIb ; public : ~)",
    "insertText": "RenderBuffer()"
  },
  {
    "label": "getVertex()",
    "kind": "Method",
    "detail": "Function (delete mIb ; } nv::Vertex)",
    "insertText": "getVertex(unsigned int index)"
  },
  {
    "label": "getIb()",
    "kind": "Method",
    "detail": "Function (const IndexBuffer*)",
    "insertText": "getIb()"
  },
  {
    "label": "INVALID_ENTRY()",
    "kind": "Method",
    "detail": "Function (} ; } ; # include \" nvtess . h \" # include<assert . h> # define USE_HASHMAP 1 # define NO_STL 1 # if USE_HASHMAP # if PLATFORM_MAC | | PLATFORM_LINUX # include<unordered_map> # include<vector> # else # include<hash_map> # endif # else # include<map> # endif const unsigned int EdgesPerTriangle = 3 ; const unsigned int IndicesPerTriangle = 3 ; const unsigned int VerticesPerTriangle = 3 ; const unsigned int DuplicateIndexCount = 3 ; namespace nv { # if NO_STL template<FromType,ToType> class FHashMap { const size_t)",
    "insertText": "INVALID_ENTRY(size_t)"
  },
  {
    "label": "FToRef()",
    "kind": "Method",
    "detail": "Function (struct FFromEntry { FromType From ; size_t NextEntry ; } ; size_t* HashTable ; FFromEntry* FromEntries ; ToType* ToEntries ; size_t MaxEntries ; size_t MaxHashes ; size_t EntryCount ; public : struct FToRef { const ToType& second ;)",
    "insertText": "FToRef(const ToType* Ptr ) : second( *Ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FToRef*)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const iterator& Other)"
  },
  {
    "label": "FHashMap()",
    "kind": "Method",
    "detail": "Function (} } ; typedef iterator const_iterator ;)",
    "insertText": "FHashMap(const size_t InMaxEntries)"
  },
  {
    "label": "MaxHashes()",
    "kind": "Method",
    "detail": "Function (EntryCount = 0 ; MaxEntries = InMaxEntries ;)",
    "insertText": "MaxHashes(MaxEntries * 4)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (HashTable = new size_t [ MaxHashes ] ; FromEntries = new FFromEntry [ MaxEntries ] ; ToEntries = new ToType [ MaxEntries ] ;)",
    "insertText": "for(size_t HashIndex = 0; HashIndex < MaxHashes; ++HashIndex)"
  },
  {
    "label": "FHashMap()",
    "kind": "Method",
    "detail": "Function (HashTable [ HashIndex ] = INVALID_ENTRY ; } } ~)",
    "insertText": "FHashMap()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (delete [ ] HashTable ; delete [ ] FromEntries ; delete [ ] ToEntries ; } void)",
    "insertText": "set(const FromType& From, const ToType& To)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (const size_t Hash =)",
    "insertText": "hash_value(From)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t EntryIndex = HashTable [ Hash ] ;)",
    "insertText": "while(EntryIndex != INVALID_ENTRY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FFromEntry& Entry = FromEntries [ EntryIndex ] ;)",
    "insertText": "if(Entry.From == From)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (ToEntries [ EntryIndex ] = To ; return ; } EntryIndex = Entry . NextEntry ; })",
    "insertText": "assert(EntryCount < MaxEntries)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (FromEntries [ EntryCount ] . NextEntry = HashTable [ Hash ] ; FromEntries [ EntryCount ] . From = From ; ToEntries [ EntryCount ] = To ; HashTable [ Hash ] = EntryCount ; EntryCount + + ; } const iterator)",
    "insertText": "end()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} const iterator)",
    "insertText": "find(const FromType& From)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FFromEntry& Entry = FromEntries [ EntryIndex ] ;)",
    "insertText": "if(Entry.From == From ) return iterator( &ToEntries[EntryIndex])"
  },
  {
    "label": "IndexBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; # endif)",
    "insertText": "IndexBuffer(void* bufferContents, IndexBufferType ibtype, unsigned int length, bool bufferOwner) : mBufferContents((unsigned char*)bufferContents), mIbType(ibtype), mLength(length), mBufferOwner(bufferOwner)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (delete [ ] mBufferContents ; } mBufferContents = 0 ; } unsigned int)",
    "insertText": "operator(unsigned int index)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (break ; case IBT_U32 :)",
    "insertText": "return((unsigned int*)mBufferContents)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (break ; default : break ; } ;)",
    "insertText": "assert(0)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "hash_value(const Vertex& vert)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (} namespace tess { class Edge ; size_t)",
    "insertText": "hash_value(const Edge& edge)"
  },
  {
    "label": "Edge()",
    "kind": "Method",
    "detail": "Function (class Edge { unsigned int mIndexFrom ; unsigned int mIndexTo ; nv::Vertex mVertexFrom ; nv::Vertex mVertexTo ; size_t mCachedHash ; public :)",
    "insertText": "Edge() : mCachedHash(0)"
  },
  {
    "label": "Edge()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Edge(unsigned int indexFrom, unsigned int indexTo, const nv::Vertex& vFrom, const nv::Vertex& vTo) : mIndexFrom(indexFrom), mIndexTo(indexTo), mVertexFrom(vFrom), mVertexTo(vTo)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (mCachedHash = 7*)",
    "insertText": "hash_value(mVertexFrom) + 2 * hash_value(mVertexTo)"
  },
  {
    "label": "vertex()",
    "kind": "Method",
    "detail": "Function (} nv::Vertex)",
    "insertText": "vertex(unsigned int i)"
  },
  {
    "label": "Vertex()",
    "kind": "Method",
    "detail": "Function (break ; } return)",
    "insertText": "Vertex()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "index(unsigned int i)"
  },
  {
    "label": "reverse()",
    "kind": "Method",
    "detail": "Function (break ; } return 0 ; } ; Edge)",
    "insertText": "reverse()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Edge& rhs)"
  },
  {
    "label": "Corner()",
    "kind": "Method",
    "detail": "Function (} ; struct Corner { unsigned int mIndex ; nv::Vector2 mUV ;)",
    "insertText": "Corner() : mIndex(0)"
  },
  {
    "label": "Corner()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Corner(unsigned int index, nv::Vector2 uv) : mIndex(index), mUV(uv)"
  },
  {
    "label": "add_if_leastUV()",
    "kind": "Method",
    "detail": "Function (} } ; # if NO_STL typedef FHashMap<Edge,Edge> EdgeDict ; typedef FHashMap<nv::Vector3,Corner> PositionDict ; # elif USE_HASHMAP typedef stdext::hash_map<Edge,Edge> EdgeDict ; typedef stdext::hash_map<nv::Vector3,Corner> PositionDict ; # else typedef std::map<Edge,Edge> EdgeDict ; typedef std::map<nv::Vector3,Corner> PositionDict ; # endif typedef EdgeDict::iterator EdgeDictIt ; typedef PositionDict::iterator PositionDictIt ; void)",
    "insertText": "add_if_leastUV(PositionDict& outPd, const nv::Vertex& v, unsigned int i)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (PositionDictIt foundIt = outPd .)",
    "insertText": "find(v.pos)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (# if NO_STL outPd .)",
    "insertText": "set(v.pos, Corner(i, v.uv))"
  },
  {
    "label": "Corner()",
    "kind": "Method",
    "detail": "Function (# else outPd [ v . pos ] =)",
    "insertText": "Corner(i, v.uv)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif } else)",
    "insertText": "if(v.uv < foundIt->second.mUV)"
  },
  {
    "label": "Triangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Triangle(unsigned int i0, unsigned int i1, unsigned int i2, const nv::Vertex& v0, const nv::Vertex& v1, const nv::Vertex& v2) : mEdge0(i0, i1, v0, v1), mEdge1(i1, i2, v1, v2), mEdge2(i2, i0, v2, v0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Triangle& rhs)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ElemType* elemBuffer = new ElemType [ indexCount ] ;)",
    "insertText": "for(unsigned int u = 0; u < indexCount; ++u)"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (elemBuffer [)",
    "insertText": "u(ElemType)"
  },
  {
    "label": "IndexBuffer()",
    "kind": "Method",
    "detail": "Function (} return new)",
    "insertText": "IndexBuffer((void*)elemBuffer, destBufferType, indexCount, true)"
  },
  {
    "label": "newIndexBuffer()",
    "kind": "Method",
    "detail": "Function (} IndexBuffer*)",
    "insertText": "newIndexBuffer(const std::vector<unsigned int>& newIndices, const RenderBuffer* inputBuffer)"
  },
  {
    "label": "getIb()",
    "kind": "Method",
    "detail": "Function (IndexBufferType ibType = inputBuffer ->)",
    "insertText": "getIb()->getType()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (break ; case IBT_U32 : return createIndexBuffer<unsigned)",
    "insertText": "int(&newIndices[0], (unsigned int)newIndices.size(), IBT_U32)"
  },
  {
    "label": "expandIb_DominantEdgeAndCorner()",
    "kind": "Method",
    "detail": "Function (break ; } ; return 0 ; } void)",
    "insertText": "expandIb_DominantEdgeAndCorner(unsigned int* outIb, const Triangle& tri, unsigned int startOutIndex)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (outIb [ startOutIndex + 0 ] = tri .)",
    "insertText": "index(0)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (outIb [ startOutIndex + 1 ] = tri .)",
    "insertText": "index(1)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (outIb [ startOutIndex + 2 ] = tri .)",
    "insertText": "index(2)"
  },
  {
    "label": "expandIb_PnAenOnly()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "expandIb_PnAenOnly(unsigned int* outIb, const Triangle& tri, unsigned int startOutIndex)"
  },
  {
    "label": "expandIb_PnAenDominantCorner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "expandIb_PnAenDominantCorner(unsigned int* outIb, const Triangle& tri, unsigned int startOutIndex)"
  },
  {
    "label": "expandIb_PnAenDominantEdgeAndCorner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "expandIb_PnAenDominantEdgeAndCorner(unsigned int* outIb, const Triangle& tri, unsigned int startOutIndex)"
  },
  {
    "label": "expandIb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "expandIb(unsigned int* outIb, DestBufferMode destBufferMode, EdgeDict& outEd, PositionDict& outPd, const RenderBuffer* inputBuffer)"
  },
  {
    "label": "getLength()",
    "kind": "Method",
    "detail": "Function (const unsigned int triCount = inIb ->)",
    "insertText": "getLength()"
  },
  {
    "label": "getIndicesPerPatch()",
    "kind": "Method",
    "detail": "Function (const unsigned int outputIndicesPerPatch =)",
    "insertText": "getIndicesPerPatch(destBufferMode)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool requiresEdgeDict = true ; bool requiresPositionDict = destBufferMode ! = DBM_PnAenOnly ;)",
    "insertText": "for(unsigned int u = 0; u < triCount; ++u)"
  },
  {
    "label": "i0()",
    "kind": "Method",
    "detail": "Function (const unsigned int startInIndex = u* IndicesPerTriangle ; const unsigned int startOutIndex = u* outputIndicesPerPatch ; const unsigned int)",
    "insertText": "i0(*inIb)[startInIndex + 0], i1 = (*inIb)[startInIndex + 1], i2 = (*inIb)"
  },
  {
    "label": "getVertex()",
    "kind": "Method",
    "detail": "Function (const Vertex v0 = inputBuffer ->)",
    "insertText": "getVertex(i0), v1 = inputBuffer->getVertex(i1), v2 = inputBuffer->getVertex(i2)"
  },
  {
    "label": "tri()",
    "kind": "Method",
    "detail": "Function (Triangle)",
    "insertText": "tri(i0, i1, i2, v0, v1, v2)"
  },
  {
    "label": "expandIb_PnAenOnly()",
    "kind": "Method",
    "detail": "Function (break ; case DBM_PnAenOnly :)",
    "insertText": "expandIb_PnAenOnly(outIb, tri, startOutIndex)"
  },
  {
    "label": "expandIb_PnAenDominantCorner()",
    "kind": "Method",
    "detail": "Function (break ; case DBM_PnAenDominantCorner :)",
    "insertText": "expandIb_PnAenDominantCorner(outIb, tri, startOutIndex)"
  },
  {
    "label": "expandIb_PnAenDominantEdgeAndCorner()",
    "kind": "Method",
    "detail": "Function (break ; case DBM_PnAenDominantEdgeAndCorner :)",
    "insertText": "expandIb_PnAenDominantEdgeAndCorner(outIb, tri, startOutIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } ;)",
    "insertText": "if(requiresEdgeDict)"
  },
  {
    "label": "edge()",
    "kind": "Method",
    "detail": "Function (Edge rev0 = tri .)",
    "insertText": "edge(0).reverse(), rev1 = tri.edge(1).reverse(), rev2 = tri.edge(2).reverse()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (# if NO_STL outEd .)",
    "insertText": "set(rev0, rev0)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (outEd .)",
    "insertText": "set(rev1, rev1)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (outEd .)",
    "insertText": "set(rev2, rev2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else outEd [ rev0 ] = rev0 ; outEd [ rev1 ] = rev1 ; outEd [ rev2 ] = rev2 ; # endif })",
    "insertText": "if(requiresPositionDict)"
  },
  {
    "label": "add_if_leastUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_if_leastUV(outPd, v0, i0)"
  },
  {
    "label": "add_if_leastUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_if_leastUV(outPd, v1, i1)"
  },
  {
    "label": "add_if_leastUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_if_leastUV(outPd, v2, i2)"
  },
  {
    "label": "replacePlaceholderIndices_DominantEdgeAndCorner()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "replacePlaceholderIndices_DominantEdgeAndCorner(unsigned int* outIb, const Triangle& tri, unsigned int startOutIndex, const EdgeDict& edgeDict, const PositionDict& posDict)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (EdgeDict::const_iterator fwdIt = edgeDict .)",
    "insertText": "find(tri.edge(u))"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (EdgeDict::const_iterator revIt = edgeDict .)",
    "insertText": "find(tri.edge(u).reverse())"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (unsigned int eFmin =)",
    "insertText": "min(fwdIt->second.index(0), fwdIt->second.index(1))"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (unsigned int eFmax =)",
    "insertText": "max(fwdIt->second.index(0), fwdIt->second.index(1))"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (unsigned int eRmin =)",
    "insertText": "min(revIt->second.index(0), revIt->second.index(1))"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (unsigned int eRmax =)",
    "insertText": "max(revIt->second.index(0), revIt->second.index(1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cit = fwdIt ; } else)",
    "insertText": "if(eRmin < eFmin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cit = revIt ; } else)",
    "insertText": "if(eFmax < eRmax)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cit = fwdIt ; } else)",
    "insertText": "if(eRmax < eFmax)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cit = revIt ; } else { cit = revIt ; } } else)",
    "insertText": "if(fwdIt != edgeDict.end())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cit = fwdIt ; } else)",
    "insertText": "if(revIt != edgeDict.end())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cit = revIt ; })",
    "insertText": "if(cit != edgeDict.end())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(unsigned u = 0; u < VerticesPerTriangle; ++u)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (PositionDict::const_iterator pit = posDict .)",
    "insertText": "find(tri.edge(u).vertex(0).pos)"
  },
  {
    "label": "replacePlaceholderIndices_PnAenOnly()",
    "kind": "Method",
    "detail": "Function (outIb [ startOutIndex + 9 + u ] = pit -> second . mIndex ; } } } void)",
    "insertText": "replacePlaceholderIndices_PnAenOnly(unsigned int* outIb, const Triangle& tri, unsigned int startOutIndex, const EdgeDict& edgeDict, const PositionDict& posDict)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (EdgeDict::const_iterator cit = edgeDict .)",
    "insertText": "find(tri.edge(0))"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} cit = edgeDict .)",
    "insertText": "find(tri.edge(1))"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} cit = edgeDict .)",
    "insertText": "find(tri.edge(2))"
  },
  {
    "label": "replacePlaceholderIndices_PnAenDominantCorner()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "replacePlaceholderIndices_PnAenDominantCorner(unsigned int* outIb, const Triangle& tri, unsigned int startOutIndex, const EdgeDict& edgeDict, const PositionDict& posDict)"
  },
  {
    "label": "replacePlaceholderIndices_PnAenOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replacePlaceholderIndices_PnAenOnly(outIb, tri, startOutIndex, edgeDict, posDict)"
  },
  {
    "label": "replacePlaceholderIndices_PnAenDominantEdgeAndCorner()",
    "kind": "Method",
    "detail": "Function (outIb [ startOutIndex + 9 + u ] = pit -> second . mIndex ; } } } void)",
    "insertText": "replacePlaceholderIndices_PnAenDominantEdgeAndCorner(unsigned int* outIb, const Triangle& tri, unsigned int startOutIndex, const EdgeDict& edgeDict, const PositionDict& posDict)"
  },
  {
    "label": "replacePlaceholderIndices_DominantEdgeAndCorner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replacePlaceholderIndices_DominantEdgeAndCorner(outIb, tri, startOutIndex + getIndicesPerPatch(DBM_PnAenOnly) - VerticesPerTriangle, edgeDict, posDict)"
  },
  {
    "label": "replacePlaceholderIndices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replacePlaceholderIndices(unsigned int* outIb, unsigned int indexCount, DestBufferMode destBufferMode, const EdgeDict& edgeDict, const PositionDict& posDict, const RenderBuffer* inputBuffer)"
  },
  {
    "label": "replacePlaceholderIndices_PnAenDominantCorner()",
    "kind": "Method",
    "detail": "Function (break ; case DBM_PnAenDominantCorner :)",
    "insertText": "replacePlaceholderIndices_PnAenDominantCorner(outIb, tri, startOutIndex, edgeDict, posDict)"
  },
  {
    "label": "replacePlaceholderIndices_PnAenDominantEdgeAndCorner()",
    "kind": "Method",
    "detail": "Function (break ; case DBM_PnAenDominantEdgeAndCorner :)",
    "insertText": "replacePlaceholderIndices_PnAenDominantEdgeAndCorner(outIb, tri, startOutIndex, edgeDict, posDict)"
  },
  {
    "label": "stripUnusedIndices()",
    "kind": "Method",
    "detail": "Function (break ; } ; } } void)",
    "insertText": "stripUnusedIndices(std::vector<unsigned int>& outIb, DestBufferMode destBufferMode)"
  },
  {
    "label": "numPatches()",
    "kind": "Method",
    "detail": "Function (const unsigned int destIndicesPerPatch = indicesPerPatch - DuplicateIndexCount ; const unsigned int)",
    "insertText": "numPatches(unsigned int) outIb.size()"
  },
  {
    "label": "newIb()",
    "kind": "Method",
    "detail": "Function (const unsigned int newIbSize = numPatches* destIndicesPerPatch ; std::vector<unsigned int>)",
    "insertText": "newIb(newIbSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned int sourceIndex = DuplicateIndexCount ; const unsigned int* __restrict srcIndices =& outIb [ 0 ] ; unsigned int* __restrict destIndices =& newIb [ 0 ] ;)",
    "insertText": "for(unsigned int destIndex = 0; destIndex < newIbSize; ++destIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (destIndices [ destIndex ] = srcIndices [ sourceIndex + + ] ;)",
    "insertText": "if(sourceIndex % indicesPerPatch == 0)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (sourceIndex + = DuplicateIndexCount ; } } outIb .)",
    "insertText": "swap(newIb)"
  },
  {
    "label": "buildTessellationBuffer()",
    "kind": "Method",
    "detail": "Function (} IndexBuffer*)",
    "insertText": "buildTessellationBuffer(const RenderBuffer* inputBuffer, DestBufferMode destBufferMode, bool completeBuffer)"
  },
  {
    "label": "edgeDict()",
    "kind": "Method",
    "detail": "Function (# if NO_STL EdgeDict)",
    "insertText": "edgeDict(inputBuffer->getIb()->getLength())"
  },
  {
    "label": "posDict()",
    "kind": "Method",
    "detail": "Function (PositionDict)",
    "insertText": "posDict(inputBuffer->getIb()->getLength())"
  },
  {
    "label": "rehash()",
    "kind": "Method",
    "detail": "Function (# else EdgeDict edgeDict ; PositionDict posDict ; # if USE_HASHMAP edgeDict .)",
    "insertText": "rehash(inputBuffer->getIb()->getLength() * EdgesPerTriangle / IndicesPerTriangle * 2 + 1)"
  },
  {
    "label": "rehash()",
    "kind": "Method",
    "detail": "Function (posDict .)",
    "insertText": "rehash(inputBuffer->getIb()->getLength() * VerticesPerTriangle / IndicesPerTriangle * 2 + 1)"
  },
  {
    "label": "newIb()",
    "kind": "Method",
    "detail": "Function (# endif # endif std::vector<unsigned int>)",
    "insertText": "newIb(getIndicesPerPatch(destBufferMode) * inputBuffer->getIb()->getLength() / IndicesPerTriangle)"
  },
  {
    "label": "expandIb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "expandIb(&newIb[0], destBufferMode, edgeDict, posDict, inputBuffer)"
  },
  {
    "label": "replacePlaceholderIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replacePlaceholderIndices(&newIb[0], (unsigned int)newIb.size(), destBufferMode, edgeDict, posDict, inputBuffer)"
  },
  {
    "label": "stripUnusedIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stripUnusedIndices(newIb, destBufferMode)"
  },
  {
    "label": "newIndexBuffer()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "newIndexBuffer(newIb, inputBuffer)"
  }
]