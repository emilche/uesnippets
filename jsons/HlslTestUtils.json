[
  {
    "label": "EXPECT_STREQ()",
    "kind": "Method",
    "detail": "Function (# include<algorithm> # include<atomic> # include<cmath> # include<fstream> # include<sstream> # include<string> # include<vector> # ifdef _WIN32 # ifdef __clang__ # pragma clang diagnostic push # pragma clang diagnostic ignored \" - Wignored - qualifiers \" # endif # include \" WexTestClass . h \" # ifdef __clang__ # pragma clang diagnostic pop # endif # include<dxgiformat . h> # else # include \" WEXAdapter . h \" # include \" dxc / Support / Global . h \" # endif # include \" dxc / DXIL / DxilConstants . h \" # ifdef _HLK_CONF # define DEFAULT_TEST_DIR L \" \" # define DEFAULT_EXEC_TEST_DIR DEFAULT_TEST_DIR # else # include \" dxc / Test / TestConfig . h \" # endif using namespace std ; # ifndef HLSLDATAFILEPARAM # define HLSLDATAFILEPARAM L \" HlslDataDir \" # endif # ifndef FILECHECKDUMPDIRPARAM # define FILECHECKDUMPDIRPARAM L \" FileCheckDumpDir \" # endif # ifdef VERIFY_ARE_EQUAL # ifndef EXPECT_STREQ # define)",
    "insertText": "EXPECT_STREQ(a, b) VERIFY_ARE_EQUAL(0, strcmp(a, b)) #endif #define EXPECT_STREQW(a, b) VERIFY_ARE_EQUAL(0, wcscmp(a, b)) #define VERIFY_ARE_EQUAL_CMP(a, b, ...) VERIFY_IS_TRUE(a == b, __VA_ARGS__) #define VERIFY_ARE_EQUAL_STR(a, b)"
  },
  {
    "label": "pTmpA()",
    "kind": "Method",
    "detail": "Function (\\ const char*)",
    "insertText": "pTmpA(a)"
  },
  {
    "label": "pTmpB()",
    "kind": "Method",
    "detail": "Function (\\ const char*)",
    "insertText": "pTmpB(b)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(0 != strcmp(pTmpA, pTmpB))"
  },
  {
    "label": "conv()",
    "kind": "Method",
    "detail": "Function (\\ CA2W)",
    "insertText": "conv(pTmpB, CP_UTF8)"
  },
  {
    "label": "Comment()",
    "kind": "Method",
    "detail": "Function (\\ WEX::Logging::)",
    "insertText": "Comment(conv)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ const char* pA = pTmpA ; \\ const char* pB = pTmpB ; \\)",
    "insertText": "while(*pA == *pB)"
  },
  {
    "label": "swprintf_s()",
    "kind": "Method",
    "detail": "Function (\\ pA + + ; \\ pB + + ; \\ } \\ wchar_t diffMsg [ 3 2 ] ; \\)",
    "insertText": "swprintf_s(diffMsg, _countof(diffMsg), L\"diff at %u\", \\ (unsigned)(pA - pTmpA))"
  },
  {
    "label": "Comment()",
    "kind": "Method",
    "detail": "Function (\\ WEX::Logging::)",
    "insertText": "Comment(diffMsg)"
  },
  {
    "label": "VERIFY_ARE_EQUAL()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "VERIFY_ARE_EQUAL(0, strcmp(pTmpA, pTmpB))"
  },
  {
    "label": "VERIFY_ARE_EQUAL_WSTR()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VERIFY_ARE_EQUAL_WSTR(a, b)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(0 != wcscmp(a, b))"
  },
  {
    "label": "Comment()",
    "kind": "Method",
    "detail": "Function (\\ WEX::Logging::)",
    "insertText": "Comment(b)"
  },
  {
    "label": "VERIFY_ARE_EQUAL()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "VERIFY_ARE_EQUAL(0, wcscmp(a, b))"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (\\ } # ifndef ASSERT_EQ # define)",
    "insertText": "ASSERT_EQ(expected, actual) VERIFY_ARE_EQUAL(expected, actual) #endif #ifndef ASSERT_NE #define ASSERT_NE(expected, actual) VERIFY_ARE_NOT_EQUAL(expected, actual) #endif #ifndef TEST_F #define TEST_F(typeName, functionName) void typeName::functionName() #endif #define ASSERT_HRESULT_SUCCEEDED VERIFY_SUCCEEDED #ifndef EXPECT_EQ #define EXPECT_EQ(expected, actual) VERIFY_ARE_EQUAL(expected, actual)"
  },
  {
    "label": "strltrim()",
    "kind": "Method",
    "detail": "Function (wchar_t wideWhitespaceChars [ ] = L \" \\ t \\ r \\ n \" ; std::string)",
    "insertText": "strltrim(const std::string &value)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (size_t first = value .)",
    "insertText": "find_first_not_of(whitespaceChars)"
  },
  {
    "label": "strrtrim()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "strrtrim(const std::string &value)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (size_t last = value .)",
    "insertText": "find_last_not_of(whitespaceChars)"
  },
  {
    "label": "strtrim()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "strtrim(const std::string &value)"
  },
  {
    "label": "strstartswith()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "strstartswith(const std::string &value, const char *pattern)"
  },
  {
    "label": "strtok()",
    "kind": "Method",
    "detail": "Function (} } std::vector<std::string>)",
    "insertText": "strtok(const std::string &value, const char *delimiters = whitespaceChars)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t searchOffset = 0 ; std::vector<std::string> tokens ;)",
    "insertText": "while(searchOffset != value.size())"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (size_t tokenStartIndex = value .)",
    "insertText": "find_first_not_of(delimiters, searchOffset)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (size_t tokenEndIndex = value .)",
    "insertText": "find_first_of(delimiters, tokenStartIndex)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (tokens .)",
    "insertText": "emplace_back(value.substr(tokenStartIndex, tokenEndIndex - tokenStartIndex))"
  },
  {
    "label": "strtok()",
    "kind": "Method",
    "detail": "Function (searchOffset = tokenEndIndex ; } return tokens ; } std::vector<std::wstring>)",
    "insertText": "strtok(const std::wstring &value, const wchar_t *delimiters = wideWhitespaceChars)"
  },
  {
    "label": "strreplace()",
    "kind": "Method",
    "detail": "Function (searchOffset = tokenEndIndex ; } return tokens ; } void)",
    "insertText": "strreplace(const std::vector<std::string> &lookFors, const std::vector<std::string> &replacements, std::string &str)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (bool bOptional = false ; bool found = false ; size_t pos = 0 ; LPCSTR pLookFor = lookFors [ i ] .)",
    "insertText": "data()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t lookForLen = lookFors [ i ] .)",
    "insertText": "size()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bOptional = true ; pLookFor + + ; lookForLen - - ; })",
    "insertText": "if(!pLookFor || !*pLookFor)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "for(;;)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (pos = str .)",
    "insertText": "find(pLookFor, pos)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (found = true ; str .)",
    "insertText": "replace(pos, lookForLen, replacements[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bOptional)"
  },
  {
    "label": "Comment()",
    "kind": "Method",
    "detail": "Function (WEX::Logging::)",
    "insertText": "Comment(WEX::Common::String().Format( L\"String not found: '%S' in text:\\r\\n%.*S\", pLookFor, (unsigned)str.size(), str.data()))"
  },
  {
    "label": "VERIFY_IS_TRUE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VERIFY_IS_TRUE(found)"
  },
  {
    "label": "vFormatToWString()",
    "kind": "Method",
    "detail": "Function (} } } namespace hlsl_test { std::wstring)",
    "insertText": "vFormatToWString(const wchar_t *fmt, va_list argptr)"
  },
  {
    "label": "_vscwprintf()",
    "kind": "Method",
    "detail": "Function (std::wstring result ; # ifdef _WIN32 int len =)",
    "insertText": "_vscwprintf(fmt, argptr)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "resize(len + 1)"
  },
  {
    "label": "vswprintf_s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vswprintf_s((wchar_t *)result.data(), len + 1, fmt, argptr)"
  },
  {
    "label": "vswprintf()",
    "kind": "Method",
    "detail": "Function (# else wchar_t fmtOut [ 1 0 0 0 ] ; int len =)",
    "insertText": "vswprintf(fmtOut, 1000, fmt, argptr)"
  },
  {
    "label": "DXASSERT_LOCALVAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DXASSERT_LOCALVAR(len, len >= 0, \"Too long formatted string in vFormatToWstring\")"
  },
  {
    "label": "FormatToWString()",
    "kind": "Method",
    "detail": "Function (result = fmtOut ; # endif return result ; } std::wstring)",
    "insertText": "FormatToWString(const wchar_t *fmt, ...)"
  },
  {
    "label": "va_start()",
    "kind": "Method",
    "detail": "Function (va_list args ;)",
    "insertText": "va_start(args, fmt)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "result(vFormatToWString(fmt, args))"
  },
  {
    "label": "va_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "va_end(args)"
  },
  {
    "label": "buf()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "buf(vFormatToWString(fmt, args))"
  },
  {
    "label": "Comment()",
    "kind": "Method",
    "detail": "Function (WEX::Logging::)",
    "insertText": "Comment(buf.data())"
  },
  {
    "label": "LogErrorFmt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LogErrorFmt(const wchar_t *fmt, ...)"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (WEX::Logging::)",
    "insertText": "Error(buf.data())"
  },
  {
    "label": "GetPathToHlslDataFile()",
    "kind": "Method",
    "detail": "Function (} std::wstring)",
    "insertText": "GetPathToHlslDataFile(const wchar_t *relative, LPCWSTR paramName = HLSLDATAFILEPARAM, LPCWSTR defaultDataDir = DEFAULT_TEST_DIR)"
  },
  {
    "label": "verifySettings()",
    "kind": "Method",
    "detail": "Function (WEX::TestExecution::SetVerifyOutput)",
    "insertText": "verifySettings(WEX::TestExecution::VerifyOutputSettings::LogOnlyFailures)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (WEX::Common::String HlslDataDirValue ;)",
    "insertText": "if(std::wstring(paramName).compare(HLSLDATAFILEPARAM) != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(FAILED(WEX::TestExecution::RuntimeParameters::TryGetValue( HLSLDATAFILEPARAM, HlslDataDirValue)))"
  },
  {
    "label": "swprintf_s()",
    "kind": "Method",
    "detail": "Function (} wchar_t envPath [ MAX_PATH ] ; wchar_t expanded [ MAX_PATH ] ;)",
    "insertText": "swprintf_s(envPath, _countof(envPath), L\"%ls\\\\%ls\", reinterpret_cast<const wchar_t *>(HlslDataDirValue.GetBuffer()), relative)"
  },
  {
    "label": "PathLooksAbsolute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PathLooksAbsolute(LPCWSTR name)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (# ifdef _WIN32 return name&&*)",
    "insertText": "name((*name == L'\\\\') || (name[1] == L':'))"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (# else return name&&*)",
    "insertText": "name(*name == L'/')"
  },
  {
    "label": "HasRunLine()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "HasRunLine(std::string &line)"
  },
  {
    "label": "strtok()",
    "kind": "Method",
    "detail": "Function (const char* delimiters = \" ; / \" ; auto lineelems =)",
    "insertText": "strtok(line, delimiters)"
  },
  {
    "label": "GetRunLines()",
    "kind": "Method",
    "detail": "Function (} std::vector<std::string>)",
    "insertText": "GetRunLines(const LPCWSTR name)"
  },
  {
    "label": "PathLooksAbsolute()",
    "kind": "Method",
    "detail": "Function (const std::wstring path =)",
    "insertText": "PathLooksAbsolute(name) ? std::wstring(name) : hlsl_test::GetPathToHlslDataFile(name)"
  },
  {
    "label": "infile()",
    "kind": "Method",
    "detail": "Function (# ifdef _WIN32 std::ifstream)",
    "insertText": "infile(path)"
  },
  {
    "label": "infile()",
    "kind": "Method",
    "detail": "Function (# else std::ifstream)",
    "insertText": "infile((CW2A(path.c_str())))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(infile.fail() || infile.bad())"
  },
  {
    "label": "errMsg()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "errMsg(L\"Unable to read file \")"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (errMsg + = path ; WEX::Logging::)",
    "insertText": "Error(errMsg.c_str())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} std::vector<std::string> runlines ; std::string line ; size_t runlinesize = 3 0 0 ;)",
    "insertText": "while(std::getline(infile, line))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (char runline [ runlinesize ] ;)",
    "insertText": "memset(runline, 0, runlinesize)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(runline, line.c_str(), min(runlinesize, line.size()))"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (runlines .)",
    "insertText": "emplace_back(runline)"
  },
  {
    "label": "GetFirstLine()",
    "kind": "Method",
    "detail": "Function (} return runlines ; } std::string)",
    "insertText": "GetFirstLine(LPCWSTR name)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (char firstLine [ 3 0 0 ] ;)",
    "insertText": "memset(firstLine, 0, sizeof(firstLine))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(infile.bad())"
  },
  {
    "label": "getline()",
    "kind": "Method",
    "detail": "Function (} infile .)",
    "insertText": "getline(firstLine, _countof(firstLine))"
  },
  {
    "label": "CreateFileW()",
    "kind": "Method",
    "detail": "Function (HANDLE sourceHandle =)",
    "insertText": "CreateFileW(path, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0)"
  },
  {
    "label": "GetLastError()",
    "kind": "Method",
    "detail": "Function (DWORD err =)",
    "insertText": "GetLastError()"
  },
  {
    "label": "errorMessage()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "errorMessage(FormatToWString(L\"Unable to open file '%s', err=%u\", path, err) .c_str())"
  },
  {
    "label": "CreateNewFileForReadWrite()",
    "kind": "Method",
    "detail": "Function (} return sourceHandle ; } HANDLE)",
    "insertText": "CreateNewFileForReadWrite(LPCWSTR path)"
  },
  {
    "label": "CreateFileW()",
    "kind": "Method",
    "detail": "Function (HANDLE sourceHandle =)",
    "insertText": "CreateFileW(path, GENERIC_READ | GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, 0)"
  },
  {
    "label": "errorMessage()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "errorMessage(FormatToWString(L\"Unable to create file '%s', err=%u\", path, err) .c_str())"
  },
  {
    "label": "IsStarMatchT()",
    "kind": "Method",
    "detail": "Function (} return sourceHandle ; } template<TChar> bool)",
    "insertText": "IsStarMatchT(const TChar *pMask, size_t maskLen, const TChar *pName, size_t nameLen, TChar star)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(nameLen != maskLen)"
  },
  {
    "label": "IsStarMatchWide()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsStarMatchWide(const wchar_t *pMask, size_t maskLen, const wchar_t *pName, size_t nameLen)"
  },
  {
    "label": "GetTestParamBool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetTestParamBool(LPCWSTR name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (WEX::Common::String ParamValue ; WEX::Common::String NameValue ;)",
    "insertText": "if(FAILED(WEX::TestExecution::RuntimeParameters::TryGetValue(name, ParamValue)))"
  },
  {
    "label": "GetTestParamUseWARP()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetTestParamUseWARP(bool defaultVal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (WEX::Common::String AdapterValue ;)",
    "insertText": "if(FAILED(WEX::TestExecution::RuntimeParameters::TryGetValue( L\"Adapter\", AdapterValue)))"
  },
  {
    "label": "isdenorm()",
    "kind": "Method",
    "detail": "Function (} # else bool)",
    "insertText": "isdenorm(float f)"
  },
  {
    "label": "ifdenorm_flushf()",
    "kind": "Method",
    "detail": "Function (} # endif float)",
    "insertText": "ifdenorm_flushf(float a)"
  },
  {
    "label": "ifdenorm_flushf_eq()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ifdenorm_flushf_eq(float a, float b)"
  },
  {
    "label": "GetSign()",
    "kind": "Method",
    "detail": "Function (} const uint16_t Float16NaN = 0 xff80 ; const uint16_t Float16PosInf = 0 x7c00 ; const uint16_t Float16NegInf = 0 xfc00 ; const uint16_t Float16PosDenorm = 0 x0008 ; const uint16_t Float16NegDenorm = 0 x8008 ; const uint16_t Float16PosZero = 0 x0000 ; const uint16_t Float16NegZero = 0 x8000 ; bool)",
    "insertText": "GetSign(float x)"
  },
  {
    "label": "GetMantissa()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetMantissa(float x)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int bits = reinterpret_cast<)",
    "insertText": "int(x)"
  },
  {
    "label": "isnanFloat16()",
    "kind": "Method",
    "detail": "Function (} # define FLOAT16_BIT_SIGN 0 x8000 # define FLOAT16_BIT_EXP 0 x7c00 # define FLOAT16_BIT_MANTISSA 0 x03ff # define FLOAT16_BIGGEST_DENORM FLOAT16_BIT_MANTISSA # define FLOAT16_BIGGEST_NORMAL 0 x7bff bool)",
    "insertText": "isnanFloat16(uint16_t val)"
  },
  {
    "label": "ConvertFloat32ToFloat16()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "ConvertFloat32ToFloat16(float val) throw()"
  },
  {
    "label": "ConvertFloat16ToFloat32()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ConvertFloat16ToFloat32(uint16_t val) throw()"
  },
  {
    "label": "CompareFloatULP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareFloatULP(const float &fsrc, const float &fref, int ULPTolerance, hlsl::DXIL::Float32DenormMode mode = hlsl::DXIL::Float32DenormMode::Any)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(mode == hlsl::DXIL::Float32DenormMode::Any)"
  },
  {
    "label": "diff()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "diff((const DWORD *)&fsrc) - *((const DWORD *)&fref)"
  },
  {
    "label": "uDiff()",
    "kind": "Method",
    "detail": "Function (unsigned int uDiff = diff<0 ? - diff : diff ; return)",
    "insertText": "uDiff(unsigned int)"
  },
  {
    "label": "CompareFloatEpsilon()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CompareFloatEpsilon(const float &fsrc, const float &fref, float epsilon, hlsl::DXIL::Float32DenormMode mode = hlsl::DXIL::Float32DenormMode::Any)"
  },
  {
    "label": "fabsf()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "fabsf(fsrc - fref)"
  },
  {
    "label": "CompareFloatRelativeEpsilon()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CompareFloatRelativeEpsilon(const float &fsrc, const float &fref, int nRelativeExp, hlsl::DXIL::Float32DenormMode mode = hlsl::DXIL::Float32DenormMode::Any)"
  },
  {
    "label": "CompareHalfULP()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CompareHalfULP(const uint16_t &fsrc, const uint16_t &fref, float ULPTolerance)"
  },
  {
    "label": "CompareHalfEpsilon()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CompareHalfEpsilon(const uint16_t &fsrc, const uint16_t &fref, float epsilon)"
  },
  {
    "label": "ConvertFloat16ToFloat32()",
    "kind": "Method",
    "detail": "Function (float src_f32 =)",
    "insertText": "ConvertFloat16ToFloat32(fsrc)"
  },
  {
    "label": "ConvertFloat16ToFloat32()",
    "kind": "Method",
    "detail": "Function (float ref_f32 =)",
    "insertText": "ConvertFloat16ToFloat32(fref)"
  },
  {
    "label": "CompareHalfRelativeEpsilon()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CompareHalfRelativeEpsilon(const uint16_t &fsrc, const uint16_t &fref, int nRelativeExp)"
  },
  {
    "label": "GetByteSizeForFormat()",
    "kind": "Method",
    "detail": "Function (} # ifdef _WIN32 UINT)",
    "insertText": "GetByteSizeForFormat(DXGI_FORMAT value)"
  }
]