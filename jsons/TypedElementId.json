[
  {
    "label": "FTypedElementId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementId"
  },
  {
    "label": "FTypedElementId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Framework / TypedElementLimits . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / TypeHash . h \" struct FTypedElementId { public :)",
    "insertText": "FTypedElementId() : CombinedId(0)"
  },
  {
    "label": "FTypedElementId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTypedElementId(const FTypedElementId&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTypedElementId&)",
    "insertText": "operator(const FTypedElementId&)"
  },
  {
    "label": "FTypedElementId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementId(FTypedElementId&& InOther) : CombinedId(InOther.CombinedId)"
  },
  {
    "label": "Private_DestroyNoRef()",
    "kind": "Method",
    "detail": "Function (InOther .)",
    "insertText": "Private_DestroyNoRef()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FTypedElementId&)",
    "insertText": "operator(FTypedElementId&& InOther)"
  },
  {
    "label": "FTypedElementId()",
    "kind": "Method",
    "detail": "Function (} return* this ; } ~)",
    "insertText": "FTypedElementId()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FTypedElementId& InElementId)"
  },
  {
    "label": "Private_InitializeNoRef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Private_InitializeNoRef(const FTypedHandleTypeId InTypeId, const FTypedHandleElementId InElementId)"
  }
]