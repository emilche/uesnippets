[
  {
    "label": "FProjectDialogProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectDialogProvider"
  },
  {
    "label": "FMainFrameModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMainFrameModule"
  },
  {
    "label": "FMainMRUFavoritesList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMainMRUFavoritesList"
  },
  {
    "label": "FMainFrameCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMainFrameCommands"
  },
  {
    "label": "FMainFrameHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMainFrameHandler"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Frame / MainFrameActions . h \" # include \" Widgets / SWidget . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" Interfaces / IMainFrameModule . h \" # include \" UnrealEdMisc . h \" # include \" Frame / MainFrameHandler . h \" # include \" Misc / CompilationResult . h \" # include \" Interfaces / IEditorMainFrameProvider . h \" class FProjectDialogProvider : public IEditorMainFrameProvider { public : void)",
    "insertText": "Register()"
  },
  {
    "label": "UnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegister()"
  },
  {
    "label": "IsRequestingMainFrameControl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRequestingMainFrameControl()"
  },
  {
    "label": "GetDesiredWindowConfiguration()",
    "kind": "Method",
    "detail": "Function (FMainFrameWindowOverrides)",
    "insertText": "GetDesiredWindowConfiguration()"
  },
  {
    "label": "CreateMainFrameContentWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateMainFrameContentWidget()"
  },
  {
    "label": "CreateDefaultMainFrame()",
    "kind": "Method",
    "detail": "Function (} ; class FMainFrameModule : public IMainFrameModule { public : void)",
    "insertText": "CreateDefaultMainFrame(const bool bStartImmersive, const bool bStartPIE)"
  },
  {
    "label": "RecreateDefaultMainFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateDefaultMainFrame(const bool bStartImmersive, const bool bStartPIE)"
  },
  {
    "label": "CreateDefaultMainFrameAuxiliary()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateDefaultMainFrameAuxiliary(const bool bStartImmersive, const bool bStartPIE, const bool bIsBeingRecreated)"
  },
  {
    "label": "IsRecreatingDefaultMainFrame()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsRecreatingDefaultMainFrame()"
  },
  {
    "label": "MakeMainMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeMainMenu(const TSharedPtr<FTabManager>& TabManager, const FName MenuName, FToolMenuContext& ToolMenuContext)"
  },
  {
    "label": "MakeDeveloperTools()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeDeveloperTools(const TArray<FMainFrameDeveloperTool>& AdditionalTools)"
  },
  {
    "label": "IsWindowInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowInitialized()"
  },
  {
    "label": "GetParentWindow()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWindow>)",
    "insertText": "GetParentWindow()"
  },
  {
    "label": "SetMainTab()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMainTab(const TSharedRef<SDockTab>& MainTab)"
  },
  {
    "label": "SetMainTab()",
    "kind": "Method",
    "detail": "Function (MainFrameHandler ->)",
    "insertText": "SetMainTab(MainTab)"
  },
  {
    "label": "EnableTabClosedDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableTabClosedDelegate()"
  },
  {
    "label": "DisableTabClosedDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DisableTabClosedDelegate()"
  },
  {
    "label": "RequestCloseEditor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestCloseEditor()"
  },
  {
    "label": "ClearDelayedShowMainFrameDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDelayedShowMainFrameDelegate()"
  },
  {
    "label": "ShutDownEditor()",
    "kind": "Method",
    "detail": "Function (MainFrameHandler ->)",
    "insertText": "ShutDownEditor()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Get().ClearPendingProjectName()"
  },
  {
    "label": "SetLevelNameForWindowTitle()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetLevelNameForWindowTitle(const FString& InLevelFileName)"
  },
  {
    "label": "GetLoadedLevelName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLoadedLevelName()"
  },
  {
    "label": "SetApplicationTitleOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetApplicationTitleOverride(const FText& NewOverriddenApplicationTitle)"
  },
  {
    "label": "ShowAboutWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAboutWindow()"
  },
  {
    "label": "AboutUnrealEd_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AboutUnrealEd_Execute()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DERIVED_EVENT(FMainFrameModule, IMainFrameModule::FMainFrameCreationFinishedEvent, FMainFrameCreationFinishedEvent)"
  },
  {
    "label": "OnMainFrameCreationFinished()",
    "kind": "Method",
    "detail": "Function (FMainFrameCreationFinishedEvent&)",
    "insertText": "OnMainFrameCreationFinished()"
  },
  {
    "label": "OnMainFrameSDKNotInstalled()",
    "kind": "Method",
    "detail": "Function (FMainFrameSDKNotInstalled&)",
    "insertText": "OnMainFrameSDKNotInstalled()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DERIVED_EVENT(FMainFrameModule, IMainFrameModule::FMainFrameRequestResource, FMainFrameRequestResource)"
  },
  {
    "label": "OnMainFrameRequestResource()",
    "kind": "Method",
    "detail": "Function (FMainFrameRequestResource&)",
    "insertText": "OnMainFrameRequestResource()"
  },
  {
    "label": "EnableDelayedShowMainFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableDelayedShowMainFrame()"
  },
  {
    "label": "ShowDelayedMainFrame()",
    "kind": "Method",
    "detail": "Function (bDelayedShowMainFrame = true ; } void)",
    "insertText": "ShowDelayedMainFrame()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bDelayedShowMainFrame = false ;)",
    "insertText": "if(DelayedShowMainFrameDelegate.IsBound())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (DelayedShowMainFrameDelegate .)",
    "insertText": "Execute()"
  },
  {
    "label": "RegisterCanCloseEditor()",
    "kind": "Method",
    "detail": "Function (} } FDelegateHandle)",
    "insertText": "RegisterCanCloseEditor(const FMainFrameCanCloseEditor& InDelegate)"
  },
  {
    "label": "UnregisterCanCloseEditor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterCanCloseEditor(FDelegateHandle InHandle)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (CanCloseEditorDelegates .)",
    "insertText": "RemoveAll([InHandle](const FMainFrameCanCloseEditor& Delegate) { return Delegate.GetHandle() == InHandle; })"
  },
  {
    "label": "ExecuteCanCloseEditorDelegates()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ExecuteCanCloseEditorDelegates()"
  },
  {
    "label": "GetEditorSettingsDefaultSelectionOverride()",
    "kind": "Method",
    "detail": "Function (EditorSettingsDefaultCategoryOverride = CategoryName ; EditorSettingsDefaultSectionOverride = SectionName ; } void)",
    "insertText": "GetEditorSettingsDefaultSelectionOverride(FName& OutCategoryName, FName& OutSectionName)"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (OutCategoryName = EditorSettingsDefaultCategoryOverride ; OutSectionName = EditorSettingsDefaultSectionOverride ; } public : void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "SupportsDynamicReloading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsDynamicReloading()"
  },
  {
    "label": "GetProjectBrowserWindowSize()",
    "kind": "Method",
    "detail": "Function (public : FVector2D)",
    "insertText": "GetProjectBrowserWindowSize()"
  },
  {
    "label": "HandleLevelEditorModuleCompileStarted()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "HandleLevelEditorModuleCompileStarted(bool bIsAsyncCompile)"
  },
  {
    "label": "OnCancelCodeCompilationClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCancelCodeCompilationClicked()"
  },
  {
    "label": "HandleLevelEditorModuleCompileFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLevelEditorModuleCompileFinished(const FString& LogDump, ECompilationResult::Type CompilationResult, bool bShowLog)"
  },
  {
    "label": "HandleReloadFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReloadFinished(EReloadCompleteReason Reason)"
  },
  {
    "label": "HandleCodeAccessorLaunched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCodeAccessorLaunched(const bool WasSuccessful)"
  },
  {
    "label": "HandleCodeAccessorOpenFileFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCodeAccessorOpenFileFailed(const FString& Filename)"
  },
  {
    "label": "HandleCodeAccessorLaunching()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCodeAccessorLaunching()"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (DelayedShowMainFrameDelegate .)",
    "insertText": "Unbind()"
  }
]