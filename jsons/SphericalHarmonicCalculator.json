[
  {
    "label": "FSphericalHarmonicCalculator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSphericalHarmonicCalculator"
  },
  {
    "label": "AmbiChanNumber",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AmbiChanNumber"
  },
  {
    "label": "ComputeSoundfieldChannelGains()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / BufferVectorOperations . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / Matrix . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector2D . h \" class FSphericalHarmonicCalculator { public : enum AmbiChanNumber { ACN_0 = 0,ACN_1,ACN_2,ACN_3,ACN_4,ACN_5,ACN_6,ACN_7,ACN_8,ACN_9,ACN_10,ACN_11,ACN_12,ACN_13,ACN_14,ACN_15,ACN_16,ACN_17,ACN_18,ACN_19,ACN_20,ACN_21,ACN_22,ACN_23,ACN_24,ACN_25,ACN_26,ACN_27,ACN_28,ACN_29,ACN_30,ACN_31,ACN_32,ACN_33,ACN_34,ACN_35 } ; void)",
    "insertText": "ComputeSoundfieldChannelGains(const int32 Order, const float Azimuth, const float Elevation, float* OutGains)"
  },
  {
    "label": "GenerateFirstOrderRotationMatrixGivenRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateFirstOrderRotationMatrixGivenRadians(const float RotXRadians, const float RotYRadians, const float RotZRadians, FMatrix& OutMatrix)"
  },
  {
    "label": "GenerateFirstOrderRotationMatrixGivenDegrees()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateFirstOrderRotationMatrixGivenDegrees(const float RotXDegrees, const float RotYDegrees, const float RotZDegrees, FMatrix& OutMatrix)"
  },
  {
    "label": "AdjustUESphericalCoordinatesForAmbisonics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustUESphericalCoordinatesForAmbisonics(FVector2D& InOutVector)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (InOutVector .)",
    "insertText": "X(InOutVector.X - HALF_PI)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (InOutVector . Y* = - 1 . 0 f ;)",
    "insertText": "Swap(InOutVector.X,InOutVector.Y)"
  }
]