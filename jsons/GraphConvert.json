[
  {
    "label": "FGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraph"
  },
  {
    "label": "FMappingOneToMany",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMappingOneToMany"
  },
  {
    "label": "FMappingManyToOne",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMappingManyToOne"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVertex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Sort . h \" # include \" Algo / Unique . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / IdentityFunctor . h \" # include \" Templates / Invoke . h \" # include \" Traits / ElementType . h \" # include<utility> namespace UE::Graph { typedef int32 FVertex ; FVertex MaxVertex = static_cast<)",
    "insertText": "FVertex(MAX_int32-1)"
  },
  {
    "label": "FVertex()",
    "kind": "Method",
    "detail": "Function (FVertex InvalidVertex = static_cast<)",
    "insertText": "FVertex(INDEX_NONE)"
  },
  {
    "label": "FGraph()",
    "kind": "Method",
    "detail": "Function (struct FGraph { TArray64<FVertex> Buffer ; TArray<TConstArrayView<FVertex>> EdgeLists ;)",
    "insertText": "FGraph()"
  },
  {
    "label": "FGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGraph(const FGraph&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGraph&)",
    "insertText": "operator(const FGraph&)"
  },
  {
    "label": "FGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGraph(FGraph&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGraph&)",
    "insertText": "operator(FGraph&&)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "FMappingOneToMany()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMappingOneToMany { TArray64<FVertex> Buffer ; TArray<TConstArrayView<FVertex>> Mapping ;)",
    "insertText": "FMappingOneToMany()"
  },
  {
    "label": "FMappingOneToMany()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMappingOneToMany(const FMappingOneToMany&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMappingOneToMany&)",
    "insertText": "operator(const FMappingOneToMany&)"
  },
  {
    "label": "FMappingOneToMany()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMappingOneToMany(FMappingOneToMany&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMappingOneToMany&)",
    "insertText": "operator(FMappingOneToMany&&)"
  },
  {
    "label": "FMappingManyToOne()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMappingManyToOne { TArray<FVertex> Mapping ;)",
    "insertText": "FMappingManyToOne()"
  },
  {
    "label": "FMappingManyToOne()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMappingManyToOne(const FMappingManyToOne&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMappingManyToOne&)",
    "insertText": "operator(const FMappingManyToOne&)"
  },
  {
    "label": "FMappingManyToOne()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMappingManyToOne(FMappingManyToOne&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMappingManyToOne&)",
    "insertText": "operator(FMappingManyToOne&&)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EConvertToGraphOptions { None = 0,Shrink = 1<<0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EConvertToGraphOptions)"
  },
  {
    "label": "ConvertToGraph()",
    "kind": "Method",
    "detail": "Function (template<RangeType,GetKeyEdgesType> FGraph)",
    "insertText": "ConvertToGraph(const RangeType& UniqueKeys, GetKeyEdgesType GetKeyEdges, EConvertToGraphOptions Options = EConvertToGraphOptions::None)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (using KeyType = TElementType_T<RangeType> ; int32 NumVertices =)",
    "insertText": "GetNum(UniqueKeys)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TMap<KeyType,FVertex> VertexOfKey ; VertexOfKey .)",
    "insertText": "Reserve(NumVertices)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FVertex Vertex = 0 ;)",
    "insertText": "for(const KeyType& Key : UniqueKeys)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FVertex& ExistingHandle = VertexOfKey .)",
    "insertText": "FindOrAdd(Key, InvalidVertex)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ExistingHandle = Vertex + + ; } } FGraph OutGraph ; OutGraph . Buffer .)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutGraph . EdgeLists .)",
    "insertText": "Empty(NumVertices)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} else { OutGraph . EdgeLists .)",
    "insertText": "Reset(NumVertices)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} FVertex* EdgeListBase = nullptr ; Vertex = 0 ;)",
    "insertText": "for(const KeyType& Element : UniqueKeys)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int64 InitialOffset = OutGraph . Buffer .)",
    "insertText": "Num()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FVertex* TargetVertex = VertexOfKey .)",
    "insertText": "Find(Dependency)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(*TargetVertex == Vertex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (continue ; } OutGraph . Buffer .)",
    "insertText": "Add(*TargetVertex)"
  },
  {
    "label": "FVertex()",
    "kind": "Method",
    "detail": "Function (} TArrayView64<FVertex> VertexEdges = TArrayView64<)",
    "insertText": "FVertex(OutGraph.Buffer).Mid(InitialOffset)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(VertexEdges)"
  },
  {
    "label": "Left()",
    "kind": "Method",
    "detail": "Function (VertexEdges = VertexEdges .)",
    "insertText": "Left(Algo::Unique(VertexEdges))"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (OutGraph . Buffer .)",
    "insertText": "SetNum(InitialOffset + VertexEdges.Num(), EAllowShrinking::No)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutGraph . EdgeLists .)",
    "insertText": "Emplace(EdgeListBase + InitialOffset, static_cast<int32>(VertexEdges.Num()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + Vertex ; })",
    "insertText": "if(EnumHasAnyFlags(Options, EConvertToGraphOptions::Shrink))"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (OutGraph . Buffer .)",
    "insertText": "Shrink()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} FVertex* NewBase = OutGraph . Buffer .)",
    "insertText": "GetData()"
  },
  {
    "label": "FVertex()",
    "kind": "Method",
    "detail": "Function (EdgeList = TConstArrayView<)",
    "insertText": "FVertex(NewBase + (EdgeList.GetData() - EdgeListBase), EdgeList.Num())"
  },
  {
    "label": "ConvertToSingleBufferGraph()",
    "kind": "Method",
    "detail": "Function (} return OutGraph ; } template<RangeType,ProjectionType> FGraph)",
    "insertText": "ConvertToSingleBufferGraph(RangeType&& Graph, ProjectionType Proj, EConvertToGraphOptions Options = EConvertToGraphOptions::None)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (typedef TElementType_T<RangeType> InEdgeRangeType ; typedef)",
    "insertText": "decltype(Proj(std::declval<const InEdgeRangeType&>()))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int64 NumEdges = 0 ;)",
    "insertText": "for(const InEdgeRangeType& VertexEdges : Graph)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (NumEdges + =)",
    "insertText": "GetNum(Proj(VertexEdges))"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutGraph . Buffer .)",
    "insertText": "Empty(NumEdges)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} else { OutGraph . Buffer .)",
    "insertText": "Reset(NumEdges)"
  },
  {
    "label": "Proj()",
    "kind": "Method",
    "detail": "Function (ProjectedEdgeRangeType VertexEdges =)",
    "insertText": "Proj(InVertexEdges)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (int32 NumVertexEdges =)",
    "insertText": "GetNum(VertexEdges)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutGraph . EdgeLists .)",
    "insertText": "Emplace(OutBufferData + OutGraph.Buffer.Num(), NumVertexEdges)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutGraph . Buffer .)",
    "insertText": "Append(GetData(VertexEdges), NumVertexEdges)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(OutGraph.Buffer.GetData() == OutBufferData)"
  },
  {
    "label": "ConstructTransposeGraph()",
    "kind": "Method",
    "detail": "Function (} FGraph)",
    "insertText": "ConstructTransposeGraph(TConstArrayView<TConstArrayView<FVertex>> Graph, EConvertToGraphOptions Options = EConvertToGraphOptions::None)"
  },
  {
    "label": "TryConstructCondensationGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConstructCondensationGraph(TConstArrayView<TConstArrayView<FVertex>> Graph, FGraph& OutGraph, FMappingOneToMany* OutCondensationVertexToInputVertex, FMappingManyToOne* OutInputVertexToCondensationVertex, EConvertToGraphOptions Options = EConvertToGraphOptions::None)"
  },
  {
    "label": "ConstructPartialTransposeGraph()",
    "kind": "Method",
    "detail": "Function (FGraph)",
    "insertText": "ConstructPartialTransposeGraph(TConstArrayView<TConstArrayView<FVertex>> Graph, TArrayView<FVertex> InVertices, int64 MaxOutGraphEdges, TArray<FVertex>& OutInputVerticesPresentInOutputGraph)"
  }
]