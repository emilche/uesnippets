[
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "UMorphTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMorphTarget"
  },
  {
    "label": "SRenameMorphTargetDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SRenameMorphTargetDialog"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / MorphTarget . h \" # include \" Engine / SkeletalMesh . h \" # include \" UObject / ObjectPtr . h \" # include \" Widgets / SCompoundWidget . h \" class SEditableTextBox ; namespace ETextCommit { enum Type : int ; } class UMorphTarget ; class SRenameMorphTargetDialog : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SRenameMorphTargetDialog) : _SkeletalMesh(nullptr) , _MorphTarget(nullptr) , _Padding(FMargin(15))"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TObjectPtr<USkeletalMesh>, SkeletalMesh) SLATE_ARGUMENT(TObjectPtr<UMorphTarget>, MorphTarget) SLATE_ARGUMENT(FMargin, Padding) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnRenameClicked()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "OnRenameClicked()"
  },
  {
    "label": "OnCancelClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCancelClicked()"
  },
  {
    "label": "OnVerifyNameChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyNameChanged(const FText& InText, FText& OutErrorMessage)"
  },
  {
    "label": "RenameAndClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameAndClose()"
  },
  {
    "label": "OnRenameTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameTextCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "CloseContainingWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseContainingWindow()"
  }
]