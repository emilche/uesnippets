[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SFbxSSceneBaseMeshListView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFbxSSceneBaseMeshListView"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "PivotColumnId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Input / Reply . h \" # include \" Factories / FbxSceneImportFactory . h \" # include \" Widgets / Views / SListView . h \" enum class EFbxSceneReimportStatusFlags : uint8 ; typedef TSharedPtr<FFbxMeshInfo> FbxMeshInfoPtr ; typedef TMap<FString,EFbxSceneReimportStatusFlags> FbxSceneReimportStatusMap ; typedef FbxSceneReimportStatusMap* FbxSceneReimportStatusMapPtr ; typedef TArray<TSharedPtr<FString>> FbxOverrideNameOptionsArray ; typedef FbxOverrideNameOptionsArray* FbxOverrideNameOptionsArrayPtr ; namespace FbxSceneBaseListViewColumn { const FName)",
    "insertText": "PivotColumnId(TEXT(\"PivotNameHeaderId\"))"
  },
  {
    "label": "SFbxSSceneBaseMeshListView()",
    "kind": "Method",
    "detail": "Function (} class SFbxSSceneBaseMeshListView : public SListView<FbxMeshInfoPtr> { public : ~)",
    "insertText": "SFbxSSceneBaseMeshListView()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnCreateOverrideOptions()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCreateOverrideOptions()"
  },
  {
    "label": "CreateOverrideOptionComboBox()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STextComboBox>)",
    "insertText": "CreateOverrideOptionComboBox()"
  },
  {
    "label": "CanDeleteOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteOverride()"
  },
  {
    "label": "OnDeleteOverride()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDeleteOverride()"
  },
  {
    "label": "OnCreateOverrideOptionsWithName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateOverrideOptionsWithName(const FText& CommittedText, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnChangedOverrideOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangedOverrideOptions(TSharedPtr<FString> ItemSelected, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnSelectAssetUsing()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnSelectAssetUsing()"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged(FbxMeshInfoPtr Item, ESelectInfo::Type SelectionType)"
  },
  {
    "label": "OnToggleSelectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleSelectAll(ECheckBoxState CheckType)"
  },
  {
    "label": "FillMeshStatusMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillMeshStatusMap(FbxSceneReimportStatusMapPtr MeshStatusMap , TSharedPtr<FFbxSceneInfo> SceneInfo , TSharedPtr<FFbxSceneInfo> SceneInfoOriginal , bool bFillSkeletalMeshStatusMap , TArray<FbxMeshInfoPtr>* FilterFbxMeshesArrayPtr = nullptr , TArray<FbxMeshInfoPtr>* FbxMeshesArrayPtr = nullptr)"
  },
  {
    "label": "FindNodeInfoByUid()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFbxNodeInfo>)",
    "insertText": "FindNodeInfoByUid(uint64 NodeUid, TSharedPtr<FFbxSceneInfo> SceneInfoOriginal)"
  },
  {
    "label": "AddSelectionToImport()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<FFbxSceneInfo> SceneInfo ; UnFbx::FBXImportOptions* GlobalImportSettings ; UnFbx::FBXImportOptions* CurrentMeshImportOptions ; TArray<FbxMeshInfoPtr> FbxMeshesArray ; void)",
    "insertText": "AddSelectionToImport()"
  },
  {
    "label": "RemoveSelectionFromImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSelectionFromImport()"
  },
  {
    "label": "SetSelectionImportState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionImportState(bool MarkForImport)"
  },
  {
    "label": "FindOptionNameFromName()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString>)",
    "insertText": "FindOptionNameFromName(FString OptionName)"
  },
  {
    "label": "AssignToOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignToOptions(FString OptionName)"
  },
  {
    "label": "FindUniqueOptionName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FindUniqueOptionName(FString OverrideName, bool bForceNumber)"
  },
  {
    "label": "AddBakePivotMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBakePivotMenu(class FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "FillPivotContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillPivotContextMenu(class FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "AssignToPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignToPivot(uint64 NodeUid)"
  }
]