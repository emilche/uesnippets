[
  {
    "label": "PIXEventsThreadInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PIXEventsThreadInfo"
  },
  {
    "label": "PIXHUDOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PIXHUDOptions"
  },
  {
    "label": "PIXGetThreadInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef _PIX3_H_ # error Don ' t include this file directly - use pix3 . h # endif # ifndef _PIX3_WIN_H_ # define _PIX3_WIN_H_ struct PIXEventsThreadInfo ; \" C \" PIXEventsThreadInfo* WINAPI)",
    "insertText": "PIXGetThreadInfo()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(USE_PIX) && defined(USE_PIX_SUPPORTED_ARCHITECTURE) extern \"C\" void WINAPI PIXNotifyWakeFromFenceSignal(_In_ HANDLE event)"
  },
  {
    "label": "PIXRecordMemoryAllocationEvent()",
    "kind": "Method",
    "detail": "Function (\" C \" void WINAPI)",
    "insertText": "PIXRecordMemoryAllocationEvent(USHORT allocatorId, void* baseAddress, size_t size, UINT64 metadata)"
  },
  {
    "label": "PIXRecordMemoryFreeEvent()",
    "kind": "Method",
    "detail": "Function (\" C \" void WINAPI)",
    "insertText": "PIXRecordMemoryFreeEvent(USHORT allocatorId, void* baseAddress, size_t size, UINT64 metadata)"
  },
  {
    "label": "PIXRecordMemoryAllocationEvent()",
    "kind": "Method",
    "detail": "Function (# else void)",
    "insertText": "PIXRecordMemoryAllocationEvent(USHORT, void*, size_t, UINT64)"
  },
  {
    "label": "PIXRecordMemoryFreeEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXRecordMemoryFreeEvent(USHORT, void*, size_t, UINT64)"
  },
  {
    "label": "PIXGetTimestampCounter()",
    "kind": "Method",
    "detail": "Function (} # endif # define WINPIX_EVENT_UNICODE_VERSION 0 # define WINPIX_EVENT_ANSI_VERSION 1 # define WINPIX_EVENT_PIX3BLOB_VERSION 2 # define WINPIX_EVENT_PIX3BLOB_V2 6 3 4 5 1 2 7 # define D3D12_EVENT_METADATA WINPIX_EVENT_PIX3BLOB_VERSION UINT64)",
    "insertText": "PIXGetTimestampCounter()"
  },
  {
    "label": "QueryPerformanceCounter()",
    "kind": "Method",
    "detail": "Function (LARGE_INTEGER time = { } ;)",
    "insertText": "QueryPerformanceCounter(&time)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (} enum PIXHUDOptions { PIX_HUD_SHOW_ON_ALL_WINDOWS = 0 x1,PIX_HUD_SHOW_ON_TARGET_WINDOW_ONLY = 0 x2,PIX_HUD_SHOW_ON_NO_WINDOWS = 0 x4 } ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(PIXHUDOptions)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(USE_PIX_SUPPORTED_ARCHITECTURE) && defined(USE_PIX) #if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES) #include <shlobj.h> #include <strsafe.h> #include <knownfolders.h> #include <shellapi.h> #define PIXERRORCHECK(value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(FAILED(value))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0)"
  },
  {
    "label": "GetModuleHandleExW()",
    "kind": "Method",
    "detail": "Function (# ifndef PIX3_WIN_UNIT_TEST BOOL)",
    "insertText": "GetModuleHandleExW(DWORD dwFlags, LPCWSTR lpModuleName, HMODULE* phModule)"
  },
  {
    "label": "SHGetKnownFolderPath()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "SHGetKnownFolderPath(REFKNOWNFOLDERID rfid, DWORD dwFlags, HANDLE hToken, PWSTR* ppszPath)"
  },
  {
    "label": "CoTaskMemFree()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CoTaskMemFree(LPVOID pv)"
  },
  {
    "label": "FindFirstFileW()",
    "kind": "Method",
    "detail": "Function (} HANDLE)",
    "insertText": "FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)"
  },
  {
    "label": "GetFileAttributesW()",
    "kind": "Method",
    "detail": "Function (} DWORD)",
    "insertText": "GetFileAttributesW(LPCWSTR lpFileName)"
  },
  {
    "label": "FindNextFileW()",
    "kind": "Method",
    "detail": "Function (} BOOL)",
    "insertText": "FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)"
  },
  {
    "label": "FindClose()",
    "kind": "Method",
    "detail": "Function (} BOOL)",
    "insertText": "FindClose(HANDLE hFindFile)"
  },
  {
    "label": "LoadLibraryExW()",
    "kind": "Method",
    "detail": "Function (} HMODULE)",
    "insertText": "LoadLibraryExW(LPCWSTR lpLibFileName, DWORD flags)"
  },
  {
    "label": "GetGpuCaptureFunctionPtr()",
    "kind": "Method",
    "detail": "Function (} # endif void*)",
    "insertText": "GetGpuCaptureFunctionPtr(LPCSTR fnName)"
  },
  {
    "label": "GetModuleHandleW()",
    "kind": "Method",
    "detail": "Function (HMODULE module =)",
    "insertText": "GetModuleHandleW(L\"WinPixGpuCapturer.dll\")"
  },
  {
    "label": "GetModuleHandleW()",
    "kind": "Method",
    "detail": "Function (HMODULE module =)",
    "insertText": "GetModuleHandleW(L\"WinPixTimingCapturer.dll\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HMODULE libHandle { } ;)",
    "insertText": "if(PixImpl::GetModuleHandleExW(0, capturerDllName, &libHandle))"
  },
  {
    "label": "CoTaskMemFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CoTaskMemFree(programFilesPath)"
  },
  {
    "label": "PIXERRORCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXERRORCHECK(StringCchCatW(pixSearchPath, MAX_PATH, L\"\\\\Microsoft PIX\\\\*\"))"
  },
  {
    "label": "FindFirstFileW()",
    "kind": "Method",
    "detail": "Function (WIN32_FIND_DATAW findData ; bool foundPixInstallation = false ; wchar_t newestVersionFound [ MAX_PATH ] ; wchar_t output [ MAX_PATH ] ; wchar_t possibleOutput [ MAX_PATH ] ; HANDLE hFind =)",
    "insertText": "FindFirstFileW(pixSearchPath, &findData)"
  },
  {
    "label": "PIXERRORCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXERRORCHECK(StringCchCopyNW(possibleOutput, MAX_PATH, pixSearchPath, wcslen(pixSearchPath) - 1))"
  },
  {
    "label": "PIXERRORCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXERRORCHECK(StringCchCatW(possibleOutput, MAX_PATH, findData.cFileName))"
  },
  {
    "label": "PIXERRORCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXERRORCHECK(StringCchCatW(possibleOutput, MAX_PATH, L\"\\\\\"))"
  },
  {
    "label": "PIXERRORCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXERRORCHECK(StringCchCatW(possibleOutput, MAX_PATH, capturerDllName))"
  },
  {
    "label": "GetFileAttributesW()",
    "kind": "Method",
    "detail": "Function (DWORD result =)",
    "insertText": "GetFileAttributesW(possibleOutput)"
  },
  {
    "label": "PIXERRORCHECK()",
    "kind": "Method",
    "detail": "Function (foundPixInstallation = true ;)",
    "insertText": "PIXERRORCHECK(StringCchCopyW(newestVersionFound, _countof(newestVersionFound), findData.cFileName))"
  },
  {
    "label": "PIXERRORCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXERRORCHECK(StringCchCopyW(output, _countof(possibleOutput), possibleOutput))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "while(PixImpl::FindNextFileW(hFind, &findData) != 0)"
  },
  {
    "label": "FindClose()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FindClose(hFind)"
  },
  {
    "label": "SetLastError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastError(ERROR_FILE_NOT_FOUND)"
  },
  {
    "label": "PIXLoadLatestWinPixGpuCapturerLibrary()",
    "kind": "Method",
    "detail": "Function (} } # undef PIXERRORCHECK HMODULE)",
    "insertText": "PIXLoadLatestWinPixGpuCapturerLibrary()"
  },
  {
    "label": "PIXLoadLatestWinPixTimingCapturerLibrary()",
    "kind": "Method",
    "detail": "Function (} HMODULE)",
    "insertText": "PIXLoadLatestWinPixTimingCapturerLibrary()"
  },
  {
    "label": "PIXSetTargetWindow()",
    "kind": "Method",
    "detail": "Function (} HRESULT WINAPI)",
    "insertText": "PIXSetTargetWindow(HWND hwnd)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(WINAPI* SetGlobalTargetWindowFn)(HWND)"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "fn(SetGlobalTargetWindowFn)PixImpl::GetGpuCaptureFunctionPtr(\"SetGlobalTargetWindow\")"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "fn(hwnd)"
  },
  {
    "label": "HRESULT()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "HRESULT(WINAPI* CaptureNextFrameFn)(PCWSTR, UINT32)"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "fn(CaptureNextFrameFn)PixImpl::GetGpuCaptureFunctionPtr(\"CaptureNextFrame\")"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "fn(fileName, numFrames)"
  },
  {
    "label": "PIXBeginCapture2()",
    "kind": "Method",
    "detail": "Function (} \" C \" HRESULT WINAPI)",
    "insertText": "PIXBeginCapture2(DWORD captureFlags, _In_opt_ const PPIXCaptureParameters captureParameters)"
  },
  {
    "label": "HRESULT()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "HRESULT(WINAPI* BeginProgrammaticGpuCaptureFn)(const PPIXCaptureParameters)"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "fn(BeginProgrammaticGpuCaptureFn)PixImpl::GetGpuCaptureFunctionPtr(\"BeginProgrammaticGpuCapture\")"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "fn(captureParameters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(captureFlags == PIX_CAPTURE_TIMING)"
  },
  {
    "label": "HRESULT()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "HRESULT(WINAPI* BeginProgrammaticTimingCaptureFn)(void const*, UINT64)"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "fn(BeginProgrammaticTimingCaptureFn)PixImpl::GetTimingCaptureFunctionPtr(\"BeginProgrammaticTimingCapture\")"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "fn(&captureParameters->TimingCaptureParameters, sizeof(captureParameters->TimingCaptureParameters))"
  },
  {
    "label": "PIXEndCapture()",
    "kind": "Method",
    "detail": "Function (} else { return E_NOTIMPL ; } } \" C \" HRESULT WINAPI)",
    "insertText": "PIXEndCapture(BOOL discard)"
  },
  {
    "label": "HRESULT()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "HRESULT(WINAPI* EndProgrammaticGpuCaptureFn)(void)"
  },
  {
    "label": "gpuFn()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "gpuFn(EndProgrammaticGpuCaptureFn)PixImpl::GetGpuCaptureFunctionPtr(\"EndProgrammaticGpuCapture\")"
  },
  {
    "label": "HRESULT()",
    "kind": "Method",
    "detail": "Function (} typedef)",
    "insertText": "HRESULT(WINAPI* EndProgrammaticTimingCaptureFn)(BOOL)"
  },
  {
    "label": "timingFn()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "timingFn(EndProgrammaticTimingCaptureFn)PixImpl::GetTimingCaptureFunctionPtr(\"EndProgrammaticTimingCapture\")"
  },
  {
    "label": "HRESULT_FROM_WIN32()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "HRESULT_FROM_WIN32(GetLastError())"
  },
  {
    "label": "PIXForceD3D11On12()",
    "kind": "Method",
    "detail": "Function (} HRESULT WINAPI)",
    "insertText": "PIXForceD3D11On12()"
  },
  {
    "label": "HRESULT()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "HRESULT(WINAPI* ForceD3D11On12Fn)(void)"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "fn(ForceD3D11On12Fn)PixImpl::GetGpuCaptureFunctionPtr(\"ForceD3D11On12\")"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "fn()"
  },
  {
    "label": "PIXSetHUDOptions()",
    "kind": "Method",
    "detail": "Function (} HRESULT WINAPI)",
    "insertText": "PIXSetHUDOptions(PIXHUDOptions hudOptions)"
  },
  {
    "label": "HRESULT()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "HRESULT(WINAPI* SetHUDOptionsFn)(PIXHUDOptions)"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "fn(SetHUDOptionsFn)PixImpl::GetGpuCaptureFunctionPtr(\"SetHUDOptions\")"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "fn(hudOptions)"
  },
  {
    "label": "PIXIsAttachedForGpuCapture()",
    "kind": "Method",
    "detail": "Function (} bool WINAPI)",
    "insertText": "PIXIsAttachedForGpuCapture()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "bool(WINAPI* GetIsAttachedToPixFn)(void)"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "fn(GetIsAttachedToPixFn)PixImpl::GetGpuCaptureFunctionPtr(\"GetIsAttachedToPix\")"
  },
  {
    "label": "OutputDebugStringW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputDebugStringW(L\"WinPixEventRuntime error: Mismatched header/dll. Please ensure that pix3.h and WinPixGpuCapturer.dll match\")"
  },
  {
    "label": "PIXOpenCaptureInUI()",
    "kind": "Method",
    "detail": "Function (} HINSTANCE WINAPI)",
    "insertText": "PIXOpenCaptureInUI(PCWSTR fileName)"
  },
  {
    "label": "UNREFERENCED_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UNREFERENCED_PARAMETER(eventType)"
  },
  {
    "label": "BeginEvent()",
    "kind": "Method",
    "detail": "Function (commandList ->)",
    "insertText": "BeginEvent(WINPIX_EVENT_PIX3BLOB_V2, data, size)"
  },
  {
    "label": "PIXInsertTimingMarkerOnContextForBeginEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXInsertTimingMarkerOnContextForBeginEvent(_In_ ID3D12CommandQueue* commandQueue, UINT8 eventType, _In_reads_bytes_(size) void* data, UINT size)"
  },
  {
    "label": "PIXInsertTimingMarkerOnContextForSetMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXInsertTimingMarkerOnContextForSetMarker(_In_ ID3D12GraphicsCommandList* commandList, UINT8 eventType, _In_reads_bytes_(size) void* data, UINT size)"
  },
  {
    "label": "SetMarker()",
    "kind": "Method",
    "detail": "Function (commandList ->)",
    "insertText": "SetMarker(WINPIX_EVENT_PIX3BLOB_V2, data, size)"
  },
  {
    "label": "PIXInsertTimingMarkerOnContextForSetMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXInsertTimingMarkerOnContextForSetMarker(_In_ ID3D12CommandQueue* commandQueue, UINT8 eventType, _In_reads_bytes_(size) void* data, UINT size)"
  },
  {
    "label": "PIXInsertTimingMarkerOnContextForEndEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXInsertTimingMarkerOnContextForEndEvent(_In_ ID3D12GraphicsCommandList* commandList, UINT8 eventType)"
  },
  {
    "label": "EndEvent()",
    "kind": "Method",
    "detail": "Function (commandList ->)",
    "insertText": "EndEvent()"
  },
  {
    "label": "PIXInsertTimingMarkerOnContextForEndEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXInsertTimingMarkerOnContextForEndEvent(_In_ ID3D12CommandQueue* commandQueue, UINT8 eventType)"
  },
  {
    "label": "PIXInsertGPUMarkerOnContextForBeginEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXInsertGPUMarkerOnContextForBeginEvent(_In_ ID3D12GraphicsCommandList* commandList, UINT8 eventType, _In_reads_bytes_(size) void* data, UINT size)"
  },
  {
    "label": "PIXInsertGPUMarkerOnContextForBeginEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXInsertGPUMarkerOnContextForBeginEvent(_In_ ID3D12CommandQueue* commandQueue, UINT8 eventType, _In_reads_bytes_(size) void* data, UINT size)"
  },
  {
    "label": "PIXInsertGPUMarkerOnContextForSetMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXInsertGPUMarkerOnContextForSetMarker(_In_ ID3D12GraphicsCommandList* commandList, UINT8 eventType, _In_reads_bytes_(size) void* data, UINT size)"
  },
  {
    "label": "PIXInsertGPUMarkerOnContextForSetMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXInsertGPUMarkerOnContextForSetMarker(_In_ ID3D12CommandQueue* commandQueue, UINT8 eventType, _In_reads_bytes_(size) void* data, UINT size)"
  },
  {
    "label": "PIXInsertGPUMarkerOnContextForEndEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXInsertGPUMarkerOnContextForEndEvent(_In_ ID3D12GraphicsCommandList* commandList, UINT8, void*, UINT)"
  },
  {
    "label": "PIXInsertGPUMarkerOnContextForEndEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXInsertGPUMarkerOnContextForEndEvent(_In_ ID3D12CommandQueue* commandQueue, UINT8, void*, UINT)"
  }
]