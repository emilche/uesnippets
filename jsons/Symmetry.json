[
  {
    "label": "tensor_symmetry_pre_analysis",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_symmetry_pre_analysis"
  },
  {
    "label": "tensor_static_symgroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_static_symgroup"
  },
  {
    "label": "tensor_static_symgroup_if",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_static_symgroup_if"
  },
  {
    "label": "tensor_symmetry_calculate_flags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_symmetry_calculate_flags"
  },
  {
    "label": "tensor_symmetry_assign_value",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_symmetry_assign_value"
  },
  {
    "label": "tensor_symmetry_num_indices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_symmetry_num_indices"
  },
  {
    "label": "Symmetry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Symmetry"
  },
  {
    "label": "AntiSymmetry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AntiSymmetry"
  },
  {
    "label": "Hermiticity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Hermiticity"
  },
  {
    "label": "AntiHermiticity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AntiHermiticity"
  },
  {
    "label": "DynamicSGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicSGroup"
  },
  {
    "label": "DynamicSGroupFromTemplateArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicSGroupFromTemplateArgs"
  },
  {
    "label": "StaticSGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StaticSGroup"
  },
  {
    "label": "SGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGroup"
  },
  {
    "label": "tensor_symmetry_value_setter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tensor_symmetry_value_setter"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSORSYMMETRY_SYMMETRY_H # define EIGEN_CXX11_TENSORSYMMETRY_SYMMETRY_H namespace Eigen { enum { NegationFlag = 0 x01,ConjugationFlag = 0 x02 } ; enum { GlobalRealFlag = 0 x01,GlobalImagFlag = 0 x02,GlobalZeroFlag = 0 x03 } ; namespace internal { template<std::size_t NumIndices,. . . Sym> struct tensor_symmetry_pre_analysis ; template<std::size_t NumIndices,. . . Sym> struct tensor_static_symgroup ; template<bool instantiate,std::size_t NumIndices,. . . Sym> struct tensor_static_symgroup_if ; template<Tensor_> struct tensor_symmetry_calculate_flags ; template<Tensor_> struct tensor_symmetry_assign_value ; template<. . . Sym> struct tensor_symmetry_num_indices ; } template<int One_,int Two_> struct Symmetry {)",
    "insertText": "static_assert(One_ != Two_, \"Symmetries must cover distinct indices.\")"
  },
  {
    "label": "SGroup()",
    "kind": "Method",
    "detail": "Function (int One = One_ ; int Two = Two_ ; int Flags = ConjugationFlag | NegationFlag ; } ; class DynamicSGroup ; template<. . . Gen> class DynamicSGroupFromTemplateArgs ; template<. . . Gen> class StaticSGroup ; template<. . . Gen> class SGroup : public internal::tensor_symmetry_pre_analysis<internal::tensor_symmetry_num_indices<Gen . . .>::value,Gen . . .>::root_type { public : std::size_t NumIndices = internal::tensor_symmetry_num_indices<Gen . . .>::value ; typedef internal::tensor_symmetry_pre_analysis<NumIndices,Gen . . .>::root_type Base ;)",
    "insertText": "SGroup() : Base()"
  },
  {
    "label": "SGroup()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SGroup(const SGroup<Gen...>& other) : Base(other)"
  },
  {
    "label": "SGroup()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SGroup(SGroup<Gen...>&& other) : Base(other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SGroup<Gen . . .>&)",
    "insertText": "operator(const SGroup<Gen...>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(other)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (std::size_t Two = static_cast<)",
    "insertText": "size_t(Two_)"
  },
  {
    "label": "maxOneTwoPlusOne()",
    "kind": "Method",
    "detail": "Function (std::size_t Three = tensor_symmetry_num_indices<Sym . . .>::value ; std::size_t)",
    "insertText": "maxOneTwoPlusOne((One > Two) ? One : Two)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (public : std::size_t)",
    "insertText": "value(maxOneTwoPlusOne > Three)"
  },
  {
    "label": "tensor_static_symgroup_if()",
    "kind": "Method",
    "detail": "Function (} ; template<int One_,int Two_,. . . Sym> struct tensor_symmetry_num_indices<AntiSymmetry<One_,Two_>,Sym . . .> : public tensor_symmetry_num_indices<Symmetry<One_,Two_>,Sym . . .> { } ; template<int One_,int Two_,. . . Sym> struct tensor_symmetry_num_indices<Hermiticity<One_,Two_>,Sym . . .> : public tensor_symmetry_num_indices<Symmetry<One_,Two_>,Sym . . .> { } ; template<int One_,int Two_,. . . Sym> struct tensor_symmetry_num_indices<AntiHermiticity<One_,Two_>,Sym . . .> : public tensor_symmetry_num_indices<Symmetry<One_,Two_>,Sym . . .> { } ; template<std::size_t NumIndices> struct tensor_symmetry_pre_analysis<NumIndices> { typedef StaticSGroup<> root_type ; } ; template<std::size_t NumIndices,Gen_,. . . Gens_> struct tensor_symmetry_pre_analysis<NumIndices,Gen_,Gens_ . . .> { std::size_t max_static_generators = 4 ; std::size_t max_static_elements = 1 6 ; typedef)",
    "insertText": "tensor_static_symgroup_if(sizeof...(Gens_) + 1 <= max_static_generators)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (std::size_t possible_size = helper::size ; typedef conditional<possible_size = = 0 | | possible_size> = max_static_elements,DynamicSGroupFromTemplateArgs<Gen_,Gens_ . . .>,helper::type>::type root_type ; } ; template<bool instantiate,std::size_t NumIndices,. . . Gens> struct tensor_static_symgroup_if { std::size_t size = 0 ; typedef void type ; } ; template<std::size_t NumIndices,. . . Gens> struct tensor_static_symgroup_if<true,NumIndices,Gens . . .> : tensor_static_symgroup<NumIndices,Gens . . .> { } ; template<Tensor_> struct tensor_symmetry_assign_value { typedef Tensor_::Index Index ; typedef Tensor_::Scalar Scalar ; std::size_t NumIndices = Tensor_::NumIndices ; int)",
    "insertText": "run(const std::array<Index, NumIndices>& transformed_indices, int transformation_flags, int dummy, Tensor_& tensor, const Scalar& value_)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "value(value_)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (tensor .)",
    "insertText": "coeffRef(transformed_indices)"
  },
  {
    "label": "tensor_symmetry_value_setter()",
    "kind": "Method",
    "detail": "Function (} return current_flags ; } } ; template<Tensor_,Symmetry_,int Flags = 0> class tensor_symmetry_value_setter { public : typedef Tensor_::Index Index ; typedef Tensor_::Scalar Scalar ; std::size_t NumIndices = Tensor_::NumIndices ;)",
    "insertText": "tensor_symmetry_value_setter(Tensor_& tensor, Symmetry_ const& symmetry, std::array<Index, NumIndices> const& indices) : m_tensor(tensor), m_symmetry(symmetry), m_indices(indices)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} tensor_symmetry_value_setter<Tensor_,Symmetry_,Flags>&)",
    "insertText": "operator(Scalar const& value)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_TENSOR_SYMMETRY_CHECK_VALUES int value_flags = m_symmetry . template apply<internal::tensor_symmetry_calculate_flags<Tensor_>,)",
    "insertText": "int(m_indices, m_symmetry.globalFlags(), m_indices)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# endif m_symmetry . template apply<internal::tensor_symmetry_assign_value<Tensor_>,)",
    "insertText": "int(m_indices, 0, m_tensor, value)"
  }
]