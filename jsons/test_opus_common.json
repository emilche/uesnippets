[
  {
    "label": "deb2_impl()",
    "kind": "Method",
    "detail": "Function (OPUS_INLINE void)",
    "insertText": "deb2_impl(unsigned char *_t,unsigned char **_p,int _k,int _x,int _y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "if(_x>2)"
  },
  {
    "label": "deb2_impl()",
    "kind": "Method",
    "detail": "Function (} else { _t [ _x ] = _t [ _x - _y ] ;)",
    "insertText": "deb2_impl(_t,_p,_k,_x+1,_y)"
  },
  {
    "label": "deb2_impl()",
    "kind": "Method",
    "detail": "Function (_t [ _x ] = i ;)",
    "insertText": "deb2_impl(_t,_p,_k,_x+1,_x)"
  },
  {
    "label": "debruijn2()",
    "kind": "Method",
    "detail": "Function (} } } OPUS_INLINE void)",
    "insertText": "debruijn2(int _k, unsigned char *_res)"
  },
  {
    "label": "malloc()",
    "kind": "Method",
    "detail": "Function (unsigned char* p ; unsigned char* t ; t =)",
    "insertText": "malloc(sizeof(unsigned char)*_k*2)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(t,0,sizeof(unsigned char)*_k*2)"
  },
  {
    "label": "deb2_impl()",
    "kind": "Method",
    "detail": "Function (p =& _res [ _k* _k ] ;)",
    "insertText": "deb2_impl(t,&p,_k,1,1)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(t)"
  },
  {
    "label": "fast_rand()",
    "kind": "Method",
    "detail": "Function (} opus_uint32 Rz,Rw ; OPUS_INLINE opus_uint32)",
    "insertText": "fast_rand(void)"
  },
  {
    "label": "Rz()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rz(Rz&65535)+(Rz>>16)"
  },
  {
    "label": "Rw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rw(Rw&65535)+(Rw>>16)"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (} opus_uint32 iseed ; # ifdef __GNUC__)",
    "insertText": "__attribute__((noreturn)) #elif defined(_MSC_VER) __declspec(noreturn) #endif static OPUS_INLINE void _test_failed(const char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr,\"\\n ***************************************************\\n\")"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr,\" *** A fatal error was detected. ***\\n\")"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr,\" ***************************************************\\n\")"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr,\"Please report this failure and include\\n\")"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr,\"'make check SEED=%u fails %s at line %d for %s'\\n\",iseed,file,line,opus_get_version_string())"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr,\"and any relevant details about your system.\\n\\n\")"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) _set_abort_behavior( 0, _WRITE_ABORT_MSG)"
  },
  {
    "label": "abort()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "abort()"
  },
  {
    "label": "test_failed()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "test_failed() _test_failed(__FILE__, __LINE__)"
  },
  {
    "label": "opus_test_assert()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "opus_test_assert(cond)"
  },
  {
    "label": "test_failed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_failed()"
  },
  {
    "label": "regression_test()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "regression_test(void)"
  }
]