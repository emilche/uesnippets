[
  {
    "label": "FRuntimeFloatCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRuntimeFloatCurve"
  },
  {
    "label": "ScalarEasing()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CommonAnimationTypes . h \" # include \" CoreMinimal . h \" # include \" Curves / CurveFloat . h \" # include \" Math / MathFwd . h \" # include \" Math / Quat . h \" # include \" Math / Transform . h \" # include \" Math / Vector . h \" struct FRuntimeFloatCurve ; namespace CommonAnimationLibrary { float)",
    "insertText": "ScalarEasing(float Value, const FRuntimeFloatCurve& CustomCurve, EEasingFuncType EasingType = EEasingFuncType::Linear, bool bFlip = false, float Weight = 1.f)"
  },
  {
    "label": "RetargetSingleLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RetargetSingleLocation(FVector Location, const FTransform& Source, const FTransform& Target, const FRuntimeFloatCurve& CustomCurve, EEasingFuncType EasingType = EEasingFuncType::Linear, bool bFlipEasing = false, float EasingWeight = 1.f, FVector Axis = FVector(1.f, 0.f, 0.f), float SourceMinimum = -1.f, float SourceMaximum = 1.f, float TargetMinimum = -1.f, float TargetMaximum = 1.f)"
  },
  {
    "label": "RetargetSingleRotation()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "RetargetSingleRotation(const FQuat& Rotation, const FTransform& Source, const FTransform& Target, const FRuntimeFloatCurve& CustomCurve, EEasingFuncType EasingType = EEasingFuncType::Linear, bool bFlipEasing = false, float EasingWeight = 1.f, ERotationComponent RotationComponent = ERotationComponent::SwingAngle, FVector TwistAxis = FVector(1.f, 0.f, 0.f), bool bUseAbsoluteAngle = false, float SourceMinimum = 0.0f, float SourceMaximum = 45.f, float TargetMinimum = 0.f, float TargetMaximum = 45.f)"
  }
]