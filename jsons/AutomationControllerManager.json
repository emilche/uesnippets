[
  {
    "label": "FAutomationWorkerMessageBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerMessageBase"
  },
  {
    "label": "FAutomatedTestResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomatedTestResult"
  },
  {
    "label": "FAutomatedTestPassResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomatedTestPassResults"
  },
  {
    "label": "FAutomationControllerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationControllerManager"
  },
  {
    "label": "FTestRunningInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestRunningInfo"
  },
  {
    "label": "FComparisonEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComparisonEntry"
  },
  {
    "label": "FWaitForInteractiveFrameRate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaitForInteractiveFrameRate"
  },
  {
    "label": "AddTestResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTestResult(const IAutomationReportPtr& TestReport)"
  },
  {
    "label": "ReBuildTestsMapIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReBuildTestsMapIndex()"
  },
  {
    "label": "ReflectResultStateToReport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReflectResultStateToReport(IAutomationReportPtr& TestReport)"
  },
  {
    "label": "UpdateTestResultStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTestResultStatus(const IAutomationReportPtr& TestReport, EAutomationState State, bool bHasWarning = false)"
  },
  {
    "label": "FAutomationControllerManager()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FAutomationControllerManager()"
  },
  {
    "label": "GetFilteredReports()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetFilteredReports()"
  },
  {
    "label": "AddPingResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPingResult(const FGuid& ResponderInstanceId)"
  },
  {
    "label": "ReportTestResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportTestResults()"
  },
  {
    "label": "GenerateJsonTestPassSummary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateJsonTestPassSummary(FAutomatedTestPassResults& SerializedPassResults)"
  },
  {
    "label": "GenerateTestPassHtmlIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateTestPassHtmlIndex()"
  },
  {
    "label": "LoadJsonTestPassSummary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadJsonTestPassSummary(FString& ReportFilePath, TArray<IAutomationReportPtr> TestReports)"
  },
  {
    "label": "CollectTestResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectTestResults(TSharedPtr<IAutomationReport> Report, const FAutomationTestResults& Results)"
  },
  {
    "label": "CheckChildResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckChildResult( TSharedPtr< IAutomationReport > InReport )"
  },
  {
    "label": "ExecuteNextTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteNextTask( int32 ClusterIndex, OUT bool& bAllTestsCompleted )"
  },
  {
    "label": "ReportImageComparisonResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportImageComparisonResult(const FAutomationWorkerImageComparisonResults& Result)"
  },
  {
    "label": "ProcessComparisonQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessComparisonQueue()"
  },
  {
    "label": "ProcessAvailableTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAvailableTasks()"
  },
  {
    "label": "ProcessResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessResults()"
  },
  {
    "label": "RemoveTestRunning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTestRunning(const FGuid& OwnerInstanceId)"
  },
  {
    "label": "SetControllerStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControllerStatus( EAutomationControllerModuleState::Type AutomationTestState )"
  },
  {
    "label": "SetTestNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTestNames(const FGuid& AutomationWorkerInstanceId, TArray<FAutomationTestInfo>& TestInfo)"
  },
  {
    "label": "UpdateTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTests()"
  },
  {
    "label": "StopStartedTestSessions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopStartedTestSessions()"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMessage(FAutomationWorkerMessageBase* Message, UScriptStruct* TypeInfo, const FMessageAddress& ControllerAddress)"
  },
  {
    "label": "HandleFindWorkersResponseMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFindWorkersResponseMessage( const FAutomationWorkerFindWorkersResponse& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context )"
  },
  {
    "label": "HandlePongMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePongMessage( const FAutomationWorkerPong& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context )"
  },
  {
    "label": "HandleReceivedScreenShot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceivedScreenShot( const FAutomationWorkerScreenImage& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context )"
  },
  {
    "label": "HandleReceivedComparisonResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceivedComparisonResult( const FAutomationWorkerImageComparisonResults& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context )"
  },
  {
    "label": "HandleTestDataRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTestDataRequest(const FAutomationWorkerTestDataRequest& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandlePerformanceDataRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePerformanceDataRequest(const FAutomationWorkerPerformanceDataRequest& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleRequestNextNetworkCommandMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRequestNextNetworkCommandMessage( const FAutomationWorkerRequestNextNetworkCommand& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context )"
  },
  {
    "label": "HandleRequestTestsReplyCompleteMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRequestTestsReplyCompleteMessage(const FAutomationWorkerRequestTestsReplyComplete& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleRunTestsReplyMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRunTestsReplyMessage( const FAutomationWorkerRunTestsReply& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context )"
  },
  {
    "label": "HandleWorkerOfflineMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWorkerOfflineMessage( const FAutomationWorkerWorkerOffline& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context )"
  },
  {
    "label": "HandleReceivedTelemetryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceivedTelemetryData(const FAutomationWorkerTelemetryData& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "ReportAutomationResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportAutomationResult(const TSharedPtr<IAutomationReport> InReport, int32 ClusterIndex, int32 PassIndex)"
  }
]