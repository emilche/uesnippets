[
  {
    "label": "FAutomationWorkerMessageBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerMessageBase"
  },
  {
    "label": "FAutomatedTestResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomatedTestResult"
  },
  {
    "label": "FAutomatedTestPassResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomatedTestPassResults"
  },
  {
    "label": "FAutomationControllerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationControllerManager"
  },
  {
    "label": "FTestRunningInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestRunningInfo"
  },
  {
    "label": "FComparisonEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComparisonEntry"
  },
  {
    "label": "FWaitForInteractiveFrameRate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaitForInteractiveFrameRate"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Guid . h \" # include \" Containers / Queue . h \" # include \" Misc / AutomationTest . h \" # include \" IAutomationControllerManager . h \" # include \" IMessageContext . h \" # include \" MessageEndpoint . h \" # include \" AutomationDeviceClusterManager . h \" # include \" AutomationReportManager . h \" # include \" Async / Future . h \" # include \" ImageComparer . h \" # include \" Interfaces / IScreenShotManager . h \" # include \" Misc / EngineVersion . h \" # include \" HAL / PlatformProperties . h \" # include \" AutomationControllerManager . generated . h \" struct FAutomationWorkerMessageBase ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FAutomatedTestResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomatedTestResult()"
  },
  {
    "label": "SetEvents()",
    "kind": "Method",
    "detail": "Function (Warnings = 0 ; Errors = 0 ; State = EAutomationState::NotRun ; Duration = 0 ; DateTime = 0 ; } void)",
    "insertText": "SetEvents(const TArray<FAutomationExecutionEntry>& InEntries, int32 InWarnings, int32 InErrors)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (Entries = InEntries ; Warnings = InWarnings ; Errors = InErrors ; } void)",
    "insertText": "AddEvent(EAutomationEventType EvenType, const FString& InMessage)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "Add(FAutomationExecutionEntry(FAutomationEvent(EvenType, InMessage)))"
  },
  {
    "label": "GetWarningTotal()",
    "kind": "Method",
    "detail": "Function (Artifacts = InArtifacts ; } int32)",
    "insertText": "GetWarningTotal()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FAutomatedTestPassResults() : ReportCreatedOn(0) , Succeeded(0) , SucceededWithWarnings(0) , Failed(0) , NotRun(0) , InProcess(0) , TotalDuration(0) , ComparisonExported(false) , IsRequired(false)"
  },
  {
    "label": "GetTotalTests()",
    "kind": "Method",
    "detail": "Function (TMap<FString,uint32> TestsMapIndex ; bool IsRequired ; int32)",
    "insertText": "GetTotalTests()"
  },
  {
    "label": "GetTestResult()",
    "kind": "Method",
    "detail": "Function (FAutomatedTestResult&)",
    "insertText": "GetTestResult(const IAutomationReportPtr& TestReport)"
  },
  {
    "label": "ReBuildTestsMapIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReBuildTestsMapIndex()"
  },
  {
    "label": "ReflectResultStateToReport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReflectResultStateToReport(IAutomationReportPtr& TestReport)"
  },
  {
    "label": "UpdateTestResultStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTestResultStatus(const IAutomationReportPtr& TestReport, EAutomationState State, bool bHasWarning = false)"
  },
  {
    "label": "ClearAllEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllEntries()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Devices .)",
    "insertText": "Empty()"
  },
  {
    "label": "FAutomationControllerManager()",
    "kind": "Method",
    "detail": "Function (} } ; class FAutomationControllerManager : public IAutomationControllerManager { public :)",
    "insertText": "FAutomationControllerManager()"
  },
  {
    "label": "RequestAvailableWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestAvailableWorkers(const FGuid& InSessionId)"
  },
  {
    "label": "IsReadyForTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForTests()"
  },
  {
    "label": "RequestTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestTests()"
  },
  {
    "label": "RunTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTests(const bool bIsLocalSession)"
  },
  {
    "label": "StopTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTests()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "RequestLoadAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestLoadAsset(const FString& InAssetName)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "SetNumPasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumPasses(const int32 InNumPasses)"
  },
  {
    "label": "GetNumPasses()",
    "kind": "Method",
    "detail": "Function (NumTestPasses = InNumPasses ; } int32)",
    "insertText": "GetNumPasses()"
  },
  {
    "label": "KeepPIEOpen()",
    "kind": "Method",
    "detail": "Function (bSendAnalytics = bNewValue ; } bool)",
    "insertText": "KeepPIEOpen()"
  },
  {
    "label": "SetFilter()",
    "kind": "Method",
    "detail": "Function (bKeepPIEOpen = bNewValue ; } void)",
    "insertText": "SetFilter(TSharedPtr< AutomationFilterCollection > InFilter)"
  },
  {
    "label": "SetFilter()",
    "kind": "Method",
    "detail": "Function (ReportManager .)",
    "insertText": "SetFilter(InFilter)"
  },
  {
    "label": "GetFilteredReports()",
    "kind": "Method",
    "detail": "Function (} TArray<TSharedPtr<IAutomationReport>>&)",
    "insertText": "GetFilteredReports()"
  },
  {
    "label": "GetEnabledReports()",
    "kind": "Method",
    "detail": "Function (} TArray<TSharedPtr<IAutomationReport>>)",
    "insertText": "GetEnabledReports()"
  },
  {
    "label": "GetNumDeviceClusters()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumDeviceClusters()"
  },
  {
    "label": "GetNumDevicesInCluster()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumDevicesInCluster(const int32 ClusterIndex)"
  },
  {
    "label": "GetClusterGroupName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetClusterGroupName(const int32 ClusterIndex)"
  },
  {
    "label": "GetDeviceTypeName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDeviceTypeName(const int32 ClusterIndex)"
  },
  {
    "label": "GetDeviceName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDeviceName(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "GetGameInstanceId()",
    "kind": "Method",
    "detail": "Function (} FGuid)",
    "insertText": "GetGameInstanceId(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "GetGameInstanceName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetGameInstanceName(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "SetVisibleTestsEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVisibleTestsEnabled(const bool bEnabled)"
  },
  {
    "label": "SetVisibleTestsEnabled()",
    "kind": "Method",
    "detail": "Function (ReportManager .)",
    "insertText": "SetVisibleTestsEnabled(bEnabled)"
  },
  {
    "label": "GetEnabledTestsNum()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetEnabledTestsNum()"
  },
  {
    "label": "GetEnabledTestNames()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetEnabledTestNames(TArray<FString>& OutEnabledTestNames)"
  },
  {
    "label": "GetEnabledTestNames()",
    "kind": "Method",
    "detail": "Function (ReportManager .)",
    "insertText": "GetEnabledTestNames(OutEnabledTestNames)"
  },
  {
    "label": "GetFilteredTestNames()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetFilteredTestNames(TArray<FString>& OutFilteredTestNames)"
  },
  {
    "label": "GetFilteredTestNames()",
    "kind": "Method",
    "detail": "Function (ReportManager .)",
    "insertText": "GetFilteredTestNames(OutFilteredTestNames)"
  },
  {
    "label": "SetEnabledTests()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnabledTests(const TArray<FString>& EnabledTests)"
  },
  {
    "label": "SetEnabledTests()",
    "kind": "Method",
    "detail": "Function (ReportManager .)",
    "insertText": "SetEnabledTests(EnabledTests)"
  },
  {
    "label": "GetTestState()",
    "kind": "Method",
    "detail": "Function (} EAutomationControllerModuleState::Type)",
    "insertText": "GetTestState()"
  },
  {
    "label": "IsDeveloperDirectoryIncluded()",
    "kind": "Method",
    "detail": "Function (bDeveloperDirectoryIncluded = bInDeveloperDirectoryIncluded ; } bool)",
    "insertText": "IsDeveloperDirectoryIncluded(void)"
  },
  {
    "label": "CheckTestResultsAvailable()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "CheckTestResultsAvailable()"
  },
  {
    "label": "ExportReport()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "ExportReport(uint32 FileExportTypeMask)"
  },
  {
    "label": "IsTestRunnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTestRunnable(IAutomationReportPtr InReport)"
  },
  {
    "label": "RemoveCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCallbacks()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Startup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Startup()"
  },
  {
    "label": "OnShutdown()",
    "kind": "Method",
    "detail": "Function (FOnAutomationControllerManagerShutdown&)",
    "insertText": "OnShutdown()"
  },
  {
    "label": "ToggleDeviceGroupFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDeviceGroupFlag(EAutomationDeviceGroupTypes::Type InDeviceGroup)"
  },
  {
    "label": "UpdateDeviceGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDeviceGroups()"
  },
  {
    "label": "GetReportOutputPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReportOutputPath()"
  },
  {
    "label": "ResetAutomationTestTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAutomationTestTimeout(const TCHAR* Reason)"
  },
  {
    "label": "AddPingResult()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddPingResult(const FGuid& ResponderInstanceId)"
  },
  {
    "label": "ReportTestResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportTestResults()"
  },
  {
    "label": "GenerateJsonTestPassSummary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateJsonTestPassSummary(FAutomatedTestPassResults& SerializedPassResults)"
  },
  {
    "label": "GenerateTestPassHtmlIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateTestPassHtmlIndex()"
  },
  {
    "label": "LoadJsonTestPassSummary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadJsonTestPassSummary(FString& ReportFilePath, TArray<IAutomationReportPtr> TestReports)"
  },
  {
    "label": "CollectTestResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectTestResults(TSharedPtr<IAutomationReport> Report, const FAutomationTestResults& Results)"
  },
  {
    "label": "CheckChildResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckChildResult(TSharedPtr< IAutomationReport > InReport)"
  },
  {
    "label": "SlugString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SlugString(const FString& DisplayString)"
  },
  {
    "label": "CopyArtifact()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CopyArtifact(const FString& DestFolder, const FString& SourceFile)"
  },
  {
    "label": "ExecuteNextTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteNextTask(int32 ClusterIndex, OUT bool& bAllTestsCompleted)"
  },
  {
    "label": "ReportImageComparisonResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportImageComparisonResult(const FAutomationWorkerImageComparisonResults& Result)"
  },
  {
    "label": "ProcessComparisonQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessComparisonQueue()"
  },
  {
    "label": "ProcessAvailableTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAvailableTasks()"
  },
  {
    "label": "ProcessResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessResults()"
  },
  {
    "label": "RemoveTestRunning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTestRunning(const FGuid& OwnerInstanceId)"
  },
  {
    "label": "SetControllerStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControllerStatus(EAutomationControllerModuleState::Type AutomationTestState)"
  },
  {
    "label": "SetTestNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTestNames(const FGuid& AutomationWorkerInstanceId, TArray<FAutomationTestInfo>& TestInfo)"
  },
  {
    "label": "UpdateTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTests()"
  },
  {
    "label": "StopStartedTestSessions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopStartedTestSessions()"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMessage(FAutomationWorkerMessageBase* Message, UScriptStruct* TypeInfo, const FMessageAddress& ControllerAddress)"
  },
  {
    "label": "HandleFindWorkersResponseMessage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleFindWorkersResponseMessage(const FAutomationWorkerFindWorkersResponse& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandlePongMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePongMessage(const FAutomationWorkerPong& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleReceivedScreenShot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceivedScreenShot(const FAutomationWorkerScreenImage& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleReceivedComparisonResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceivedComparisonResult(const FAutomationWorkerImageComparisonResults& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleTestDataRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTestDataRequest(const FAutomationWorkerTestDataRequest& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandlePerformanceDataRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePerformanceDataRequest(const FAutomationWorkerPerformanceDataRequest& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleRequestNextNetworkCommandMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRequestNextNetworkCommandMessage(const FAutomationWorkerRequestNextNetworkCommand& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleRequestTestsReplyCompleteMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRequestTestsReplyCompleteMessage(const FAutomationWorkerRequestTestsReplyComplete& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleRunTestsReplyMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRunTestsReplyMessage(const FAutomationWorkerRunTestsReply& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleWorkerOfflineMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWorkerOfflineMessage(const FAutomationWorkerWorkerOffline& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleReceivedTelemetryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceivedTelemetryData(const FAutomationWorkerTelemetryData& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "ReportAutomationResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportAutomationResult(const TSharedPtr<IAutomationReport> InReport, int32 ClusterIndex, int32 PassIndex)"
  },
  {
    "label": "FTestRunningInfo()",
    "kind": "Method",
    "detail": "Function (private : FGuid ActiveSessionId ; EAutomationControllerModuleState::Type AutomationTestState ; uint32 DeviceGroupFlags = 0 ; bool bDeveloperDirectoryIncluded = false ; bool bHasErrors = false ; bool bHasWarning = false ; bool bHasLogs = false ; bool bIsLocalSession ; bool bTestResultsAvailable = false ; EAutomationTestFlags RequestedTestFlags = EAutomationTestFlags::None ; double CheckTestTimer ; float CheckTestIntervalSeconds = 1 . 0 f ; float GameInstanceLostTimerSeconds = 3 0 0 . 0 f ; uint32 ClusterDistributionMask ; FAutomationDeviceClusterManager DeviceClusterManager ; uint32 ExecutionCount = 0 ; double LastTimeUpdateTicked = 0 ; TSharedPtr<FMessageEndpoint,ESPMode::ThreadSafe> MessageEndpoint ; uint32 RefreshTestResponses = 0 ; FAutomationReportManager ReportManager ; struct FTestRunningInfo {)",
    "insertText": "FTestRunningInfo(FMessageAddress InMessageAddress, FGuid InInstanceId): OwnerMessageAddress( InMessageAddress), OwnerInstanceId( InInstanceId ), LastPingTime( 0.f)"
  }
]