[
  {
    "label": "machine_load_store_relaxed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store_relaxed"
  },
  {
    "label": "__BIG_ENDIAN__()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_machine_H # error Do not include this file directly ; include tbb_machine . h instead # endif # if __ARM_ARCH_7A__ # include<sys / param . h> # include<unistd . h> # define __TBB_WORDSIZE 4 # if)",
    "insertText": "__BIG_ENDIAN__(defined(__BYTE_ORDER__) && __BYTE_ORDER__==__ORDER_BIG_ENDIAN__) #define __TBB_ENDIANNESS __TBB_ENDIAN_BIG #elif __LITTLE_ENDIAN__ || (defined(__BYTE_ORDER__) && __BYTE_ORDER__==__ORDER_LITTLE_ENDIAN__) #define __TBB_ENDIANNESS __TBB_ENDIAN_LITTLE #elif defined(__BYTE_ORDER__) #define __TBB_ENDIANNESS __TBB_ENDIAN_UNSUPPORTED #else #define __TBB_ENDIANNESS __TBB_ENDIAN_DETECT #endif #define __TBB_compiler_fence() __asm__ __volatile__(\"\": : :\"memory\") #define __TBB_full_memory_fence() __asm__ __volatile__(\"dmb ish\": : :\"memory\") #define __TBB_control_consistency_helper() __TBB_full_memory_fence() #define __TBB_acquire_consistency_helper() __TBB_full_memory_fence() #define __TBB_release_consistency_helper() __TBB_full_memory_fence() static inline int32_t __TBB_machine_cmpswp4(volatile void *ptr, int32_t value, int32_t comparand)"
  },
  {
    "label": "__TBB_full_memory_fence()",
    "kind": "Method",
    "detail": "Function (int32_t oldval,res ;)",
    "insertText": "__TBB_full_memory_fence()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(res)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"1: ldrex %0, [%4]\\n\" \" add %3, %0, %5\\n\" \" strex %1, %3, [%4]\\n\" \" cmp %1, #0\\n\" \" bne 1b\\n\" : \"=&r\" (result), \"=&r\" (tmp), \"+Qo\" (*(volatile int32_t*)ptr), \"=&r\"(tmp2) : \"r\" ((volatile int32_t *)ptr), \"Ir\" (addend) : \"cc\")"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"1: ldrexd %0, %H0, [%4]\\n\" \" adds %3, %0, %5\\n\" \" adc %H3, %H0, %H5\\n\" \" strexd %1, %3, %H3, [%4]\\n\" \" cmp %1, #0\\n\" \" bne 1b\" : \"=&r\" (result), \"=&r\" (tmp), \"+Qo\" (*(volatile int64_t*)ptr), \"=&r\"(tmp2) : \"r\" ((volatile int64_t *)ptr), \"r\" (addend) : \"cc\")"
  },
  {
    "label": "__TBB_acquire_consistency_helper()",
    "kind": "Method",
    "detail": "Function (const T value = location ;)",
    "insertText": "__TBB_acquire_consistency_helper()"
  },
  {
    "label": "__TBB_CompareAndSwap4()",
    "kind": "Method",
    "detail": "Function (location = value ; } } ; } } # define)",
    "insertText": "__TBB_CompareAndSwap4(P,V,C) __TBB_machine_cmpswp4(P,V,C) #define __TBB_CompareAndSwap8(P,V,C) __TBB_machine_cmpswp8(P,V,C) #define __TBB_USE_GENERIC_PART_WORD_CAS 1 #define __TBB_USE_GENERIC_PART_WORD_FETCH_ADD 1 #define __TBB_USE_GENERIC_PART_WORD_FETCH_STORE 1 #define __TBB_USE_GENERIC_FETCH_STORE 1 #define __TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE 1 #define __TBB_USE_GENERIC_DWORD_LOAD_STORE 1 #define __TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE 1 #elif defined __aarch64__ #include \"gcc_generic.h\" #else #error compilation requires an ARMv7-a or ARMv8-a architecture. #endif inline void __TBB_machine_pause (int32_t delay)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"yield\" ::: \"memory\")"
  }
]