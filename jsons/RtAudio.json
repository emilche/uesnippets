[
  {
    "label": "AUDIOCAPTURERTAUDIO_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AUDIOCAPTURERTAUDIO_API"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "RtApi",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtApi"
  },
  {
    "label": "Api",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Api"
  },
  {
    "label": "DeviceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeviceInfo"
  },
  {
    "label": "StreamParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StreamParameters"
  },
  {
    "label": "StreamOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StreamOptions"
  },
  {
    "label": "CallbackInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallbackInfo"
  },
  {
    "label": "S24",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "S24"
  },
  {
    "label": "StreamState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StreamState"
  },
  {
    "label": "StreamMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StreamMode"
  },
  {
    "label": "ConvertInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvertInfo"
  },
  {
    "label": "RtApiStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtApiStream"
  },
  {
    "label": "timeval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timeval"
  },
  {
    "label": "RtApiCore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtApiCore"
  },
  {
    "label": "RtApiJack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtApiJack"
  },
  {
    "label": "RtApiAsio",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtApiAsio"
  },
  {
    "label": "RtApiDs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtApiDs"
  },
  {
    "label": "DsDevice",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DsDevice"
  },
  {
    "label": "IMMDeviceEnumerator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMMDeviceEnumerator"
  },
  {
    "label": "RtApiWasapi",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtApiWasapi"
  },
  {
    "label": "RtApiAlsa",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtApiAlsa"
  },
  {
    "label": "RtApiPulse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtApiPulse"
  },
  {
    "label": "RtApiOss",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtApiOss"
  },
  {
    "label": "RtApiDummy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtApiDummy"
  },
  {
    "label": "provides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "provides"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioCaptureCore . h \" # if PLATFORM_MICROSOFT | | PLATFORM_MAC # ifndef __RTAUDIO_H # define __RTAUDIO_H # if PLATFORM_WINDOWS # include \" Windows / WindowsHWrapper . h \" # ifndef __WINDOWS_DS__ # define __WINDOWS_DS__ # endif # ifdef __WINDOWS_WASAPI__ # undef __WINDOWS_WASAPI__ # endif # elif PLATFORM_MICROSOFT # include \" Windows / WindowsHWrapper . h \" # ifdef __WINDOWS_DS__ # undef __WINDOWS_DS__ # endif # ifndef __WINDOWS_WASAPI__ # define __WINDOWS_WASAPI__ # endif # elif PLATFORM_MAC # ifndef __MACOSX_CORE__ # define __MACOSX_CORE__ # endif # endif # define RTAUDIO_VERSION \" 5 . 0 . 0 \" # if defined _WIN32 | | defined __CYGWIN__ # define RTAUDIO_DLL_PUBLIC # else # if __GNUC__> = 4 # define RTAUDIO_DLL_PUBLIC)",
    "insertText": "__attribute__((visibility( \"default\" )))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const RtAudioFormat RTAUDIO_SINT8 = 0 x1 ; const RtAudioFormat RTAUDIO_SINT16 = 0 x2 ; const RtAudioFormat RTAUDIO_SINT24 = 0 x4 ; const RtAudioFormat RTAUDIO_SINT32 = 0 x8 ; const RtAudioFormat RTAUDIO_FLOAT32 = 0 x10 ; const RtAudioFormat RTAUDIO_FLOAT64 = 0 x20 ; typedef unsigned int RtAudioStreamFlags ; const RtAudioStreamFlags RTAUDIO_NONINTERLEAVED = 0 x1 ; const RtAudioStreamFlags RTAUDIO_MINIMIZE_LATENCY = 0 x2 ; const RtAudioStreamFlags RTAUDIO_HOG_DEVICE = 0 x4 ; const RtAudioStreamFlags RTAUDIO_SCHEDULE_REALTIME = 0 x8 ; const RtAudioStreamFlags RTAUDIO_ALSA_USE_DEFAULT = 0 x10 ; const RtAudioStreamFlags RTAUDIO_JACK_DONT_CONNECT = 0 x20 ; typedef unsigned int RtAudioStreamStatus ; const RtAudioStreamStatus RTAUDIO_INPUT_OVERFLOW = 0 x1 ; const RtAudioStreamStatus RTAUDIO_OUTPUT_UNDERFLOW = 0 x2 ; typedef)",
    "insertText": "int(*RtAudioCallback)( void *outputBuffer, void *inputBuffer, unsigned int nFrames, double streamTime, RtAudioStreamStatus status, void *userData)"
  },
  {
    "label": "RtAudioError()",
    "kind": "Method",
    "detail": "Function (class RtAudioError : public std::runtime_error { public : enum Type { WARNING,DEBUG_WARNING,UNSPECIFIED,NO_DEVICES_FOUND,INVALID_DEVICE,MEMORY_ERROR,INVALID_PARAMETER,INVALID_USE,DRIVER_ERROR,SYSTEM_ERROR,THREAD_ERROR } ;)",
    "insertText": "RtAudioError(const std::string& message, Type type = RtAudioError::UNSPECIFIED ) : std::runtime_error(message), type_(type)"
  },
  {
    "label": "printMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "printMessage(void)"
  },
  {
    "label": "what()",
    "kind": "Method",
    "detail": "Function (std::cerr<<' \\ n '<<)",
    "insertText": "what()"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} const Type&)",
    "insertText": "getType(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} protected : Type type_ ; } ; typedef)",
    "insertText": "void(*RtAudioErrorCallback)( RtAudioError::Type type, const std::string &errorText)"
  },
  {
    "label": "DeviceInfo()",
    "kind": "Method",
    "detail": "Function (class RtApi ; class RtAudio { public : enum Api { UNSPECIFIED,LINUX_ALSA,LINUX_PULSE,LINUX_OSS,UNIX_JACK,MACOSX_CORE,WINDOWS_WASAPI,WINDOWS_ASIO,WINDOWS_DS,RTAUDIO_DUMMY } ; struct DeviceInfo { bool probed ; std::string name ; std::string deviceId ; unsigned int outputChannels ; unsigned int inputChannels ; unsigned int duplexChannels ; bool isDefaultOutput ; bool isDefaultInput ; std::vector<unsigned int> sampleRates ; unsigned int preferredSampleRate ; RtAudioFormat nativeFormats ;)",
    "insertText": "DeviceInfo() :probed(false), outputChannels(0), inputChannels(0), duplexChannels(0), isDefaultOutput(false), isDefaultInput(false), preferredSampleRate(0), nativeFormats(0)"
  },
  {
    "label": "StreamParameters()",
    "kind": "Method",
    "detail": "Function (} } ; struct StreamParameters { unsigned int deviceId ; unsigned int nChannels ; unsigned int firstChannel ;)",
    "insertText": "StreamParameters() : deviceId(0), nChannels(0), firstChannel(0)"
  },
  {
    "label": "StreamOptions()",
    "kind": "Method",
    "detail": "Function (} } ; struct StreamOptions { RtAudioStreamFlags flags ; unsigned int numberOfBuffers ; std::string streamName ; int priority ;)",
    "insertText": "StreamOptions() : flags(0), numberOfBuffers(0), priority(0)"
  },
  {
    "label": "getVersion()",
    "kind": "Method",
    "detail": "Function (} } ; std::string)",
    "insertText": "getVersion(void)"
  },
  {
    "label": "getCompiledApi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getCompiledApi(std::vector<RtAudio::Api> &apis)"
  },
  {
    "label": "RtAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtAudio(RtAudio::Api api=UNSPECIFIED)"
  },
  {
    "label": "RtAudio()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtAudio()"
  },
  {
    "label": "getCurrentApi()",
    "kind": "Method",
    "detail": "Function (RtAudio::Api)",
    "insertText": "getCurrentApi(void)"
  },
  {
    "label": "getDeviceCount()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "getDeviceCount(void)"
  },
  {
    "label": "getDeviceInfo()",
    "kind": "Method",
    "detail": "Function (RtAudio::DeviceInfo)",
    "insertText": "getDeviceInfo(unsigned int device)"
  },
  {
    "label": "getDefaultOutputDevice()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "getDefaultOutputDevice(void)"
  },
  {
    "label": "getDefaultInputDevice()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "getDefaultInputDevice(void)"
  },
  {
    "label": "openStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "openStream(RtAudio::StreamParameters *outputParameters, RtAudio::StreamParameters *inputParameters, RtAudioFormat format, unsigned int sampleRate, unsigned int *bufferFrames, RtAudioCallback callback, void *userData = NULL, RtAudio::StreamOptions *options = NULL, RtAudioErrorCallback errorCallback = NULL)"
  },
  {
    "label": "closeStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "closeStream(void)"
  },
  {
    "label": "startStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "startStream(void)"
  },
  {
    "label": "stopStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stopStream(void)"
  },
  {
    "label": "abortStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "abortStream(void)"
  },
  {
    "label": "isStreamOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isStreamOpen(void)"
  },
  {
    "label": "isStreamRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isStreamRunning(void)"
  },
  {
    "label": "setStreamTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStreamTime(double time)"
  },
  {
    "label": "getStreamLatency()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "getStreamLatency(void)"
  },
  {
    "label": "getStreamSampleRate()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "getStreamSampleRate(void)"
  },
  {
    "label": "showWarnings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "showWarnings(bool value = true)"
  },
  {
    "label": "openRtApi()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "openRtApi(RtAudio::Api api)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (RtApi* rtapi_ ; } ; # if)",
    "insertText": "defined(__WINDOWS_DS__) || defined(__WINDOWS_ASIO__) || defined(__WINDOWS_WASAPI__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef CRITICAL_SECTION StreamMutex ; # elif)",
    "insertText": "defined(__LINUX_ALSA__) || defined(__LINUX_PULSE__) || defined(__UNIX_JACK__) || defined(__LINUX_OSS__) || defined(__MACOSX_CORE__)"
  },
  {
    "label": "CallbackInfo()",
    "kind": "Method",
    "detail": "Function (typedef pthread_mutex_t StreamMutex ; # else # define __RTAUDIO_DUMMY__ typedef int ThreadHandle ; typedef int StreamMutex ; # endif struct CallbackInfo { void* object ; ThreadHandle thread ; void* callback ; void* userData ; void* errorCallback ; void* apiInfo ; bool isRunning ; bool doRealtime ; int priority ;)",
    "insertText": "CallbackInfo() :object(0), callback(0), userData(0), errorCallback(0), apiInfo(0), isRunning(false), doRealtime(false), priority(0)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (} } ; # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "S24()",
    "kind": "Method",
    "detail": "Function (protected : unsigned char c3 [ 3 ] ; public :)",
    "insertText": "S24()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} S24&)",
    "insertText": "operator(const int& i)"
  },
  {
    "label": "c3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "c3(i & 0x000000ff)"
  },
  {
    "label": "c3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "c3(i & 0x0000ff00)"
  },
  {
    "label": "c3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "c3(i & 0x00ff0000)"
  },
  {
    "label": "S24()",
    "kind": "Method",
    "detail": "Function (* this = v ; })",
    "insertText": "S24(const double& d)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "this(int)"
  },
  {
    "label": "S24()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "S24(const float& f)"
  },
  {
    "label": "S24()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "S24(const signed short& s)"
  },
  {
    "label": "S24()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "S24(const char& c)"
  },
  {
    "label": "asInt()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "asInt()"
  },
  {
    "label": "c3()",
    "kind": "Method",
    "detail": "Function (int i =)",
    "insertText": "c3(c3[1] << 8) | (c3[2] << 16)"
  },
  {
    "label": "RtApi()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RtApi()"
  },
  {
    "label": "openStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "openStream(RtAudio::StreamParameters *outputParameters, RtAudio::StreamParameters *inputParameters, RtAudioFormat format, unsigned int sampleRate, unsigned int *bufferFrames, RtAudioCallback callback, void *userData, RtAudio::StreamOptions *options, RtAudioErrorCallback errorCallback)"
  },
  {
    "label": "getStreamTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getStreamTime(void)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (showWarnings_ = value ; } protected : const unsigned int MAX_SAMPLE_RATES ; const unsigned int SAMPLE_RATES [ ] ; enum { FAILURE,SUCCESS } ; enum StreamState { STREAM_STOPPED,STREAM_STOPPING,STREAM_RUNNING,STREAM_CLOSED = - 5 0 } ; enum StreamMode { OUTPUT,INPUT,DUPLEX,UNINITIALIZED = - 7 5 } ; struct ConvertInfo { int channels ; int inJump,outJump ; RtAudioFormat inFormat,outFormat ; std::vector<int> inOffset ; std::vector<int> outOffset ; } ; struct RtApiStream { unsigned int device [ 2 ] ; void* apiHandle ; StreamMode mode ; StreamState state ; char* userBuffer [ 2 ] ; char* deviceBuffer ; bool doConvertBuffer [ 2 ] ; bool userInterleaved ; bool deviceInterleaved [ 2 ] ; bool doByteSwap [ 2 ] ; unsigned int sampleRate ; unsigned int bufferSize ; unsigned int nBuffers ; unsigned int nUserChannels [ 2 ] ; unsigned int nDeviceChannels [ 2 ] ; unsigned int channelOffset [ 2 ] ; unsigned long latency [ 2 ] ; RtAudioFormat userFormat ; RtAudioFormat deviceFormat [ 2 ] ; StreamMutex mutex ; CallbackInfo callbackInfo ; ConvertInfo convertInfo [ 2 ] ; double streamTime ; # if)",
    "insertText": "defined(HAVE_GETTIMEOFDAY)"
  },
  {
    "label": "RtApiStream()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "RtApiStream() :apiHandle(0), deviceBuffer(0)"
  },
  {
    "label": "probeDeviceOpen()",
    "kind": "Method",
    "detail": "Function (device [ 0 ] = 1 1 1 1 1 ; device [ 1 ] = 1 1 1 1 1 ; } } ; typedef S24 Int24 ; typedef signed short Int16 ; typedef signed int Int32 ; typedef float Float32 ; typedef double Float64 ; std::ostringstream errorStream_ ; std::string errorText_ ; bool showWarnings_ ; RtApiStream stream_ ; bool firstErrorOccurred_ ; bool)",
    "insertText": "probeDeviceOpen(unsigned int device, StreamMode mode, unsigned int channels, unsigned int firstChannel, unsigned int sampleRate, RtAudioFormat format, unsigned int *bufferSize, RtAudio::StreamOptions *options)"
  },
  {
    "label": "tickStreamTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tickStreamTime(void)"
  },
  {
    "label": "clearStreamInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearStreamInfo()"
  },
  {
    "label": "verifyStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyStream(void)"
  },
  {
    "label": "error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "error(RtAudioError::Type type)"
  },
  {
    "label": "convertBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "convertBuffer(char *outBuffer, char *inBuffer, ConvertInfo &info)"
  },
  {
    "label": "byteSwapBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "byteSwapBuffer(char *buffer, unsigned int samples, RtAudioFormat format)"
  },
  {
    "label": "formatBytes()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "formatBytes(RtAudioFormat format)"
  },
  {
    "label": "setConvertInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setConvertInfo(StreamMode mode, unsigned int firstChannel)"
  },
  {
    "label": "showWarnings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "showWarnings(bool value)"
  },
  {
    "label": "showWarnings()",
    "kind": "Method",
    "detail": "Function (rtapi_ ->)",
    "insertText": "showWarnings(value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(__MACOSX_CORE__)"
  },
  {
    "label": "RtApiCore()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RtApiCore()"
  },
  {
    "label": "callbackEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "callbackEvent(AudioDeviceID deviceId, const AudioBufferList *inBufferList, const AudioBufferList *outBufferList)"
  },
  {
    "label": "getErrorCode()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getErrorCode(OSStatus code)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # endif # if)",
    "insertText": "defined(__UNIX_JACK__)"
  },
  {
    "label": "RtApiJack()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RtApiJack()"
  },
  {
    "label": "callbackEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "callbackEvent(unsigned long nframes)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (bool shouldAutoconnect_ ; } ; # endif # if)",
    "insertText": "defined(__WINDOWS_ASIO__)"
  },
  {
    "label": "RtApiAsio()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RtApiAsio()"
  },
  {
    "label": "callbackEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "callbackEvent(long bufferIndex)"
  },
  {
    "label": "saveDeviceInfo()",
    "kind": "Method",
    "detail": "Function (private : std::vector<RtAudio::DeviceInfo> devices_ ; void)",
    "insertText": "saveDeviceInfo(void)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # endif # if)",
    "insertText": "defined(__WINDOWS_DS__)"
  },
  {
    "label": "RtApiDs()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RtApiDs()"
  },
  {
    "label": "callbackEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "callbackEvent(void)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # endif # if)",
    "insertText": "defined(__WINDOWS_WASAPI__)"
  },
  {
    "label": "RtApiWasapi()",
    "kind": "Method",
    "detail": "Function (class RtApiWasapi : public RtApi { public :)",
    "insertText": "RtApiWasapi()"
  },
  {
    "label": "probeDeviceOpen()",
    "kind": "Method",
    "detail": "Function (private : bool coInitialized_ ; IMMDeviceEnumerator* deviceEnumerator_ ; bool)",
    "insertText": "probeDeviceOpen(unsigned int device, StreamMode mode, unsigned int channels, unsigned int firstChannel, unsigned int sampleRate, RtAudioFormat format, unsigned int* bufferSize, RtAudio::StreamOptions* options)"
  },
  {
    "label": "runWasapiThread()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "runWasapiThread(void* wasapiPtr)"
  },
  {
    "label": "stopWasapiThread()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "stopWasapiThread(void* wasapiPtr)"
  },
  {
    "label": "abortWasapiThread()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "abortWasapiThread(void* wasapiPtr)"
  },
  {
    "label": "wasapiThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wasapiThread()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # endif # if)",
    "insertText": "defined(__LINUX_ALSA__)"
  },
  {
    "label": "RtApiAlsa()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RtApiAlsa()"
  },
  {
    "label": "getCurrentApi()",
    "kind": "Method",
    "detail": "Function (RtAudio::Api)",
    "insertText": "getCurrentApi()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # endif # if)",
    "insertText": "defined(__LINUX_PULSE__)"
  },
  {
    "label": "RtApiPulse()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "RtApiPulse()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # endif # if)",
    "insertText": "defined(__LINUX_OSS__)"
  },
  {
    "label": "RtApiOss()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RtApiOss()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # endif # if)",
    "insertText": "defined(__RTAUDIO_DUMMY__)"
  },
  {
    "label": "RtApiDummy()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RtApiDummy()"
  },
  {
    "label": "error()",
    "kind": "Method",
    "detail": "Function (errorText_ = \" RtApiDummy : This class provides no functionality . \" ;)",
    "insertText": "error(RtAudioError::WARNING)"
  },
  {
    "label": "probeDeviceOpen()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "probeDeviceOpen(unsigned int , StreamMode , unsigned int , unsigned int , unsigned int , RtAudioFormat , unsigned int * , RtAudio::StreamOptions *)"
  }
]