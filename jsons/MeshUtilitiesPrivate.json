[
  {
    "label": "FMeshUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshUtilities"
  },
  {
    "label": "FQueuedThreadPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedThreadPool"
  },
  {
    "label": "FCardRepresentationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCardRepresentationData"
  },
  {
    "label": "FStaticMeshUtilityBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshUtilityBuilder"
  },
  {
    "label": "GetVersionString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshUtilities . h \" # include \" SkeletalMeshTools . h \" # include \" Engine / SkeletalMesh . h \" # include \" IAnimationBlueprintEditor . h \" # include \" IAnimationBlueprintEditorModule . h \" # include \" IAnimationEditor . h \" # include \" IAnimationEditorModule . h \" # include \" ISkeletalMeshEditor . h \" # include \" ISkeletalMeshEditorModule . h \" # include \" ISkeletonEditor . h \" # include \" ISkeletonEditorModule . h \" # include \" Engine / StaticMesh . h \" class FMeshUtilities : public IMeshUtilities { private : FString VersionString ; bool bUsingNvTriStrip ; bool bDisableTriangleOrderOptimization ; const FString&)",
    "insertText": "GetVersionString()"
  },
  {
    "label": "FixupMaterialSlotNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupMaterialSlotNames(USkeletalMesh* SkeletalMesh)"
  },
  {
    "label": "BuildStaticMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildStaticMesh(FStaticMeshRenderData& OutRenderData, UStaticMesh* StaticMesh, const FStaticMeshLODGroup& LODGroup)"
  },
  {
    "label": "BuildStaticMeshVertexAndIndexBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildStaticMeshVertexAndIndexBuffers(TArray<FStaticMeshBuildVertex>& OutVertices, TArray<TArray<uint32> >& OutPerSectionIndices, TArray<int32>& OutWedgeMap, const FRawMesh& RawMesh, const FOverlappingCorners& OverlappingCorners, const TMap<uint32, uint32>& MaterialToSectionMapping, float ComparisonThreshold, FVector3f BuildScale, int32 ImportVersion)"
  },
  {
    "label": "GenerateStaticMeshLODs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateStaticMeshLODs(UStaticMesh* StaticMesh, const FStaticMeshLODGroup& LODGroup)"
  },
  {
    "label": "GenerateSignedDistanceFieldVolumeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSignedDistanceFieldVolumeData(FString MeshName, const FSourceMeshDataForDerivedDataTask& SourceMeshData, const FStaticMeshLODResources& LODModel, class FQueuedThreadPool& ThreadPool, const TArray<FSignedDistanceFieldBuildSectionData>& SectionData, const FBoxSphereBounds3f& Bounds, float DistanceFieldResolutionScale, bool bGenerateAsIfTwoSided, FDistanceFieldVolumeData& OutData)"
  },
  {
    "label": "GenerateCardRepresentationData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateCardRepresentationData(FString MeshName, const FSourceMeshDataForDerivedDataTask& SourceMeshData, const FStaticMeshLODResources& LODModel, class FQueuedThreadPool& ThreadPool, const TArray<FSignedDistanceFieldBuildSectionData>& SectionData, const FBoxSphereBounds& Bounds, const FDistanceFieldVolumeData* DistanceFieldVolumeData, int32 MaxLumenMeshCards, bool bGenerateAsIfTwoSided, class FCardRepresentationData& OutData)"
  },
  {
    "label": "RecomputeTangentsAndNormalsForRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecomputeTangentsAndNormalsForRawMesh(bool bRecomputeTangents, bool bRecomputeNormals, const FMeshBuildSettings& InBuildSettings, FRawMesh &OutRawMesh)"
  },
  {
    "label": "RecomputeTangentsAndNormalsForRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecomputeTangentsAndNormalsForRawMesh(bool bRecomputeTangents, bool bRecomputeNormals, const FMeshBuildSettings& InBuildSettings, const FOverlappingCorners& InOverlappingCorners, FRawMesh &OutRawMesh)"
  },
  {
    "label": "GenerateUniqueUVsForStaticMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateUniqueUVsForStaticMesh(const FRawMesh& RawMesh, int32 TextureResolution, TArray<FVector2f>& OutTexCoords)"
  },
  {
    "label": "GenerateUniqueUVsForStaticMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateUniqueUVsForStaticMesh(const FRawMesh& RawMesh, int32 TextureResolution, bool bMergeIdenticalMaterials, TArray<FVector2f>& OutTexCoords)"
  },
  {
    "label": "BuildSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildSkeletalMesh(FSkeletalMeshLODModel& LODModel, const FString& SkeletalMeshName, const FReferenceSkeleton& RefSkeleton, const TArray<SkeletalMeshImportData::FVertInfluence>& Influences, const TArray<SkeletalMeshImportData::FMeshWedge>& Wedges, const TArray<SkeletalMeshImportData::FMeshFace>& Faces, const TArray<FVector3f>& Points, const TArray<int32>& PointToOriginalMap, const MeshBuildOptions& BuildOptions = MeshBuildOptions(), TArray<FText> * OutWarningMessages = NULL, TArray<FName> * OutWarningNames = NULL)"
  },
  {
    "label": "CacheOptimizeIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheOptimizeIndexBuffer(TArray<uint16>& Indices)"
  },
  {
    "label": "CacheOptimizeIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheOptimizeIndexBuffer(TArray<uint32>& Indices)"
  },
  {
    "label": "CacheOptimizeVertexAndIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheOptimizeVertexAndIndexBuffer(TArray<FStaticMeshBuildVertex>& Vertices, TArray<TArray<uint32> >& PerSectionIndices, TArray<int32>& WedgeMap)"
  },
  {
    "label": "BuildSkeletalAdjacencyIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSkeletalAdjacencyIndexBuffer(const TArray<FSoftSkinVertex>& VertexBuffer, const uint32 TexCoordCount, const TArray<uint32>& Indices, TArray<uint32>& OutPnAenIndices)"
  },
  {
    "label": "CalculateTriangleTangent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTriangleTangent(const FSoftSkinVertex& VertexA, const FSoftSkinVertex& VertexB, const FSoftSkinVertex& VertexC, TArray<FVector3f>& OutTangents, float CompareThreshold)"
  },
  {
    "label": "CalcBoneVertInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcBoneVertInfos(USkeletalMesh* SkeletalMesh, TArray<FBoneVertInfo>& Infos, bool bOnlyDominant)"
  },
  {
    "label": "ConvertMeshesToStaticMesh()",
    "kind": "Method",
    "detail": "Function (UStaticMesh*)",
    "insertText": "ConvertMeshesToStaticMesh(const TArray<UMeshComponent*>& InMeshComponents, const FTransform& InRootTransform = FTransform::Identity, const FString& InPackageName = FString())"
  },
  {
    "label": "BuildSkeletalModelFromChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSkeletalModelFromChunks(FSkeletalMeshLODModel& LODModel, const FReferenceSkeleton& RefSkeleton, TArray<FSkinnedMeshChunk*>& Chunks, const TArray<int32>& PointToOriginalMap)"
  },
  {
    "label": "FindOverlappingCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindOverlappingCorners(FOverlappingCorners& OutOverlappingCorners, const TArray<FVector3f>& InVertices, const TArray<uint32>& InIndices, float ComparisonThreshold)"
  },
  {
    "label": "FindOverlappingCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindOverlappingCorners(FOverlappingCorners& OutOverlappingCorners, FRawMesh const& RawMesh, float ComparisonThreshold)"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "ExtractMeshDataForGeometryCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractMeshDataForGeometryCache(FRawMesh& RawMesh, const FMeshBuildSettings& BuildSettings, TArray<FStaticMeshBuildVertex>& OutVertices, TArray<TArray<uint32> >& OutPerSectionIndices, int32 ImportVersion)"
  },
  {
    "label": "CalculateTextureCoordinateBoundsForSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTextureCoordinateBoundsForSkeletalMesh(const FSkeletalMeshLODModel& LODModel, TArray<FBox2D>& OutBounds)"
  },
  {
    "label": "GenerateUniqueUVsForSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateUniqueUVsForSkeletalMesh(const FSkeletalMeshLODModel& LODModel, int32 TextureResolution, TArray<FVector2f>& OutTexCoords)"
  },
  {
    "label": "RemoveBonesFromMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveBonesFromMesh(USkeletalMesh* SkeletalMesh, int32 LODIndex, const TArray<FName>* BoneNamesToRemove)"
  },
  {
    "label": "CalculateTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTangents(const TArray<FVector3f>& InVertices, const TArray<uint32>& InIndices, const TArray<FVector2f>& InUVs, const TArray<uint32>& InSmoothingGroupIndices, const uint32 InTangentOptions, TArray<FVector3f>& OutTangentX, TArray<FVector3f>& OutTangentY, TArray<FVector3f>& OutNormals)"
  },
  {
    "label": "CalculateMikkTSpaceTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateMikkTSpaceTangents(const TArray<FVector3f>& InVertices, const TArray<uint32>& InIndices, const TArray<FVector2f>& InUVs, const TArray<FVector3f>& InNormals, bool bIgnoreDegenerateTriangles, TArray<FVector3f>& OutTangentX, TArray<FVector3f>& OutTangentY)"
  },
  {
    "label": "CalculateNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateNormals(const TArray<FVector3f>& InVertices, const TArray<uint32>& InIndices, const TArray<FVector2f>& InUVs, const TArray<uint32>& InSmoothingGroupIndices, const uint32 InTangentOptions, TArray<FVector3f>& OutNormals)"
  },
  {
    "label": "CalculateOverlappingCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateOverlappingCorners(const TArray<FVector3f>& InVertices, const TArray<uint32>& InIndices, bool bIgnoreDegenerateTriangles, FOverlappingCorners& OutOverlappingCorners)"
  },
  {
    "label": "GenerateRuntimeSkinWeightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateRuntimeSkinWeightData(const FSkeletalMeshLODModel* ImportedModel, const TArray<FRawSkinWeight>& InRawSkinWeights, bool bInUseHighPrecisionWeights, FRuntimeSkinWeightProfileData& InOutSkinWeightOverrideData)"
  },
  {
    "label": "CreateImportDataFromLODModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateImportDataFromLODModel(USkeletalMesh* SkeletalMesh, bool bInResetReductionAsNeeded)"
  },
  {
    "label": "RegisterMenus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMenus()"
  },
  {
    "label": "AddMakeStaticMeshEntryToToolMenu()",
    "kind": "Method",
    "detail": "Function (class FStaticMeshUtilityBuilder ; protected : void)",
    "insertText": "AddMakeStaticMeshEntryToToolMenu(FName InToolbarName)"
  },
  {
    "label": "AddLevelViewportMenuExtender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevelViewportMenuExtender()"
  },
  {
    "label": "RemoveLevelViewportMenuExtender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevelViewportMenuExtender()"
  },
  {
    "label": "GetLevelViewportContextMenuExtender()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FExtender>)",
    "insertText": "GetLevelViewportContextMenuExtender(const TSharedRef<FUICommandList> CommandList, const TArray<AActor*> InActors)"
  },
  {
    "label": "ConvertActorMeshesToStaticMeshUIAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertActorMeshesToStaticMeshUIAction(const TArray<AActor*> InActors)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle ModuleLoadedDelegateHandle ; FDelegateHandle LevelViewportExtenderHandle ; FDelegateHandle AnimationBlueprintEditorExtenderHandle ; FDelegateHandle AnimationEditorExtenderHandle ; FDelegateHandle SkeletonEditorExtenderHandle ; } ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogMeshUtilities, Verbose, All)"
  },
  {
    "label": "GenerateStratifiedUniformHemisphereSamples()",
    "kind": "Method",
    "detail": "Function (namespace MeshUtilities { void)",
    "insertText": "GenerateStratifiedUniformHemisphereSamples(int32 NumSamples, FRandomStream& RandomStream, TArray<FVector3f>& Samples)"
  }
]