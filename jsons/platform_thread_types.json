[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_PLATFORM_THREAD_TYPES_H_ # define RTC_BASE_PLATFORM_THREAD_TYPES_H_ # include<cstdint> # if)",
    "insertText": "defined(WEBRTC_WIN) #include <winsock2.h> #include <windows.h> #elif defined(WEBRTC_FUCHSIA) #include <zircon/types.h> #include <zircon/process.h> #elif defined(WEBRTC_POSIX) #include <pthread.h> #include <unistd.h> #if defined(WEBRTC_MAC)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_WIN)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef DWORD PlatformThreadRef ; # elif)",
    "insertText": "defined(WEBRTC_FUCHSIA)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef zx_handle_t PlatformThreadRef ; # elif)",
    "insertText": "defined(WEBRTC_POSIX)"
  },
  {
    "label": "CurrentThreadId()",
    "kind": "Method",
    "detail": "Function (typedef pthread_t PlatformThreadRef ; # endif PlatformThreadId)",
    "insertText": "CurrentThreadId()"
  },
  {
    "label": "CurrentThreadRef()",
    "kind": "Method",
    "detail": "Function (PlatformThreadRef)",
    "insertText": "CurrentThreadRef()"
  },
  {
    "label": "IsThreadRefEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThreadRefEqual(const PlatformThreadRef& a, const PlatformThreadRef& b)"
  },
  {
    "label": "SetCurrentThreadName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThreadName(const char* name)"
  },
  {
    "label": "GetCurrentThread()",
    "kind": "Method",
    "detail": "Function (# else using ThreadHandle = pthread_t ; # endif ThreadHandle)",
    "insertText": "GetCurrentThread()"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetThreadPriority(const ThreadHandle& thread_handle, ThreadPriority thread_priority)"
  }
]