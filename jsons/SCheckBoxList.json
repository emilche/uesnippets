[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SCheckBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCheckBox"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SListView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SListView"
  },
  {
    "label": "FItemPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FItemPair"
  },
  {
    "label": "TOOLWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOOLWIDGETS_API"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" enum class ECheckBoxState : uint8 ; class ITableRow ; class SCheckBox ; class STableViewBase ; template<T> class SListView ; namespace CheckBoxList { struct FItemPair ; })",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnCheckListItemStateChanged, int)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SCheckBoxList : public SCompoundWidget {)",
    "insertText": "SLATE_BEGIN_ARGS(SCheckBoxList) : _CheckBoxStyle(&FCoreStyle::Get().GetWidgetStyle<FCheckBoxStyle>(\"Checkbox\")) , _IncludeGlobalCheckBoxInHeaderRow(true)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FCheckBoxStyle, CheckBoxStyle) SLATE_ARGUMENT(FText, ItemHeaderLabel) SLATE_ARGUMENT(bool, IncludeGlobalCheckBoxInHeaderRow) SLATE_EVENT( FOnCheckListItemStateChanged, OnItemCheckStateChanged ) SLATE_END_ARGS() public: void Construct(const FArguments& Arguments)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& Arguments, const TArray<FText>& Items, bool bIsChecked)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& Arguments, const TArray<TSharedRef<SWidget>>& Items, bool bIsChecked)"
  },
  {
    "label": "AddItem()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddItem(const FText& Text, bool bIsChecked)"
  },
  {
    "label": "AddItem()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddItem(TSharedRef<SWidget> Widget, bool bIsChecked)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "RemoveItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveItem(int32 Index)"
  },
  {
    "label": "IsItemChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsItemChecked(int32 Index)"
  },
  {
    "label": "GetValues()",
    "kind": "Method",
    "detail": "Function (TArray<bool>)",
    "insertText": "GetValues()"
  },
  {
    "label": "GetNumCheckboxes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCheckboxes()"
  },
  {
    "label": "UpdateAllChecked()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateAllChecked()"
  },
  {
    "label": "GetToggleSelectedState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetToggleSelectedState()"
  },
  {
    "label": "OnToggleSelectedCheckBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleSelectedCheckBox(ECheckBoxState InNewState)"
  },
  {
    "label": "OnItemCheckBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemCheckBox(TSharedRef<CheckBoxList::FItemPair> InItem)"
  },
  {
    "label": "HandleGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "HandleGenerateRow(TSharedRef<CheckBoxList::FItemPair> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  }
]