[
  {
    "label": "FNamedAESKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNamedAESKey"
  },
  {
    "label": "FKeyChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyChain"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / FileManager . h \" # include \" Misc / AES . h \" # include \" Misc / IEngineCrypto . h \" # include \" Misc / CoreDelegates . h \" # include \" Misc / Base64 . h \" # include \" Serialization / Archive . h \" # include \" Serialization / JsonSerializer . h \" # include \" RSA . h \" struct FNamedAESKey { FString Name ; FGuid Guid ; FAES::FAESKey Key ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FKeyChain()",
    "kind": "Method",
    "detail": "Function (} } ; struct FKeyChain { public :)",
    "insertText": "FKeyChain()"
  },
  {
    "label": "FKeyChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKeyChain(const FKeyChain& Other)"
  },
  {
    "label": "SetSigningKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSigningKey(Other.GetSigningKey())"
  },
  {
    "label": "SetEncryptionKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncryptionKeys(Other.GetEncryptionKeys())"
  },
  {
    "label": "SetPrincipalEncryptionKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrincipalEncryptionKey(GetEncryptionKeys().Find(Other.GetPrincipalEncryptionKey()->Guid))"
  },
  {
    "label": "FKeyChain()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FKeyChain(FKeyChain&& Other)"
  },
  {
    "label": "SetEncryptionKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncryptionKeys(MoveTemp(Other.GetEncryptionKeys()))"
  },
  {
    "label": "SetSigningKey()",
    "kind": "Method",
    "detail": "Function (} Other .)",
    "insertText": "SetSigningKey(InvalidRSAKeyHandle)"
  },
  {
    "label": "SetPrincipalEncryptionKey()",
    "kind": "Method",
    "detail": "Function (Other .)",
    "insertText": "SetPrincipalEncryptionKey(nullptr)"
  },
  {
    "label": "SetEncryptionKeys()",
    "kind": "Method",
    "detail": "Function (Other .)",
    "insertText": "SetEncryptionKeys(TMap<FGuid, FNamedAESKey>())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FKeyChain&)",
    "insertText": "operator(const FKeyChain& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FKeyChain&)",
    "insertText": "operator(FKeyChain&& Other)"
  },
  {
    "label": "GetPrincipalEncryptionKey()",
    "kind": "Method",
    "detail": "Function (SigningKey = key ; } const FNamedAESKey*)",
    "insertText": "GetPrincipalEncryptionKey()"
  },
  {
    "label": "GetEncryptionKeys()",
    "kind": "Method",
    "detail": "Function (MasterEncryptionKey = key ; } const TMap<FGuid,FNamedAESKey>&)",
    "insertText": "GetEncryptionKeys()"
  },
  {
    "label": "ParseRSAKeyFromJson()",
    "kind": "Method",
    "detail": "Function (} ; namespace KeyChainUtilities { FRSAKeyHandle)",
    "insertText": "ParseRSAKeyFromJson(TSharedPtr<FJsonObject> InObj)"
  },
  {
    "label": "GetObjectField()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FJsonObject> PublicKey = InObj ->)",
    "insertText": "GetObjectField(TEXT(\"PublicKey\"))"
  },
  {
    "label": "GetObjectField()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FJsonObject> PrivateKey = InObj ->)",
    "insertText": "GetObjectField(TEXT(\"PrivateKey\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString PublicExponentBase64,PrivateExponentBase64,PublicModulusBase64,PrivateModulusBase64 ;)",
    "insertText": "if(PublicKey->TryGetStringField(TEXT(\"Exponent\"), PublicExponentBase64) && PublicKey->TryGetStringField(TEXT(\"Modulus\"), PublicModulusBase64) && PrivateKey->TryGetStringField(TEXT(\"Exponent\"), PrivateExponentBase64) && PrivateKey->TryGetStringField(TEXT(\"Modulus\"), PrivateModulusBase64))"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> PublicExponent,PrivateExponent,Modulus ;)",
    "insertText": "Decode(PublicExponentBase64, PublicExponent)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decode(PrivateExponentBase64, PrivateExponent)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decode(PublicModulusBase64, Modulus)"
  },
  {
    "label": "LoadKeyChainFromFile()",
    "kind": "Method",
    "detail": "Function (} else { return nullptr ; } } void)",
    "insertText": "LoadKeyChainFromFile(const FString& InFilename, FKeyChain& OutCryptoSettings)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FArchive* File =)",
    "insertText": "Get().CreateFileReader(*InFilename)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FJsonObject> RootObject ; TSharedRef<TJsonReader<UTF8CHAR>> Reader = TJsonReaderFactory<UTF8CHAR)",
    "insertText": "Create(File)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FJsonObject>* EncryptionKeyObject ;)",
    "insertText": "if(RootObject->TryGetObjectField(TEXT(\"EncryptionKey\"), EncryptionKeyObject))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString EncryptionKeyBase64 ;)",
    "insertText": "if((*EncryptionKeyObject)->TryGetStringField(TEXT(\"Key\"), EncryptionKeyBase64))"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> Key ;)",
    "insertText": "Decode(EncryptionKeyBase64, Key)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FNamedAESKey NewKey ; NewKey . Name =)",
    "insertText": "TEXT(\"Default\")"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (NewKey . Guid =)",
    "insertText": "FGuid()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(NewKey.Key.Key, &Key[0], sizeof(FAES::FAESKey::Key))"
  },
  {
    "label": "GetEncryptionKeys()",
    "kind": "Method",
    "detail": "Function (OutCryptoSettings .)",
    "insertText": "GetEncryptionKeys().Add(NewKey.Guid, NewKey)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } const TSharedPtr<FJsonObject>* SigningKey = nullptr ;)",
    "insertText": "if(RootObject->TryGetObjectField(TEXT(\"SigningKey\"), SigningKey))"
  },
  {
    "label": "SetSigningKey()",
    "kind": "Method",
    "detail": "Function (OutCryptoSettings .)",
    "insertText": "SetSigningKey(ParseRSAKeyFromJson(*SigningKey))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} const TArray<TSharedPtr<FJsonValue>>* SecondaryEncryptionKeyArray = nullptr ;)",
    "insertText": "if(RootObject->TryGetArrayField(TEXT(\"SecondaryEncryptionKeys\"), SecondaryEncryptionKeyArray))"
  },
  {
    "label": "AsObject()",
    "kind": "Method",
    "detail": "Function (FNamedAESKey NewKey ; TSharedPtr<FJsonObject> SecondaryEncryptionKeyObject = EncryptionKeyValue ->)",
    "insertText": "AsObject()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(SecondaryEncryptionKeyObject->GetStringField(TEXT(\"Guid\")), NewKey.Guid)"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (NewKey . Name = SecondaryEncryptionKeyObject ->)",
    "insertText": "GetStringField(TEXT(\"Name\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (FString KeyBase64 = SecondaryEncryptionKeyObject ->)",
    "insertText": "GetStringField(TEXT(\"Key\"))"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> Key ;)",
    "insertText": "Decode(KeyBase64, Key)"
  },
  {
    "label": "SetPrincipalEncryptionKey()",
    "kind": "Method",
    "detail": "Function (} } } delete File ; FGuid EncryptionKeyOverrideGuid ; OutCryptoSettings .)",
    "insertText": "SetPrincipalEncryptionKey(OutCryptoSettings.GetEncryptionKeys().Find(EncryptionKeyOverrideGuid))"
  },
  {
    "label": "ApplyEncryptionKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyEncryptionKeys(const FKeyChain& KeyChain)"
  },
  {
    "label": "GetEncryptionKeys()",
    "kind": "Method",
    "detail": "Function (FAES::FAESKey DefaultKey = KeyChain .)",
    "insertText": "GetEncryptionKeys()[FGuid()"
  },
  {
    "label": "GetPakEncryptionKeyDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPakEncryptionKeyDelegate().BindLambda([DefaultKey](uint8 OutKey[32]) { FMemory::Memcpy(OutKey, DefaultKey.Key, sizeof(DefaultKey.Key)); })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const TMap<FGuid, FNamedAESKey>::ElementType& Key : KeyChain.GetEncryptionKeys())"
  },
  {
    "label": "GetRegisterEncryptionKeyMulticastDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRegisterEncryptionKeyMulticastDelegate().Broadcast(Key.Key, Key.Value.Key)"
  }
]