[
  {
    "label": "DuplexPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DuplexPipe"
  },
  {
    "label": "DuplexPipeClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DuplexPipeClient"
  },
  {
    "label": "Event",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Event"
  },
  {
    "label": "ClientUserCommandThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClientUserCommandThread"
  },
  {
    "label": "BaseCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseCommand"
  },
  {
    "label": "ExceptionResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExceptionResult"
  },
  {
    "label": "BaseCommand()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "BaseCommand(bool expectResponse)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (Thread::Id)",
    "insertText": "Start(const std::wstring& processGroupName, Event* waitForStartEvent, CriticalSection* pipeAccessCS)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Join(void)"
  },
  {
    "label": "TryWaitForToken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryWaitForToken(void* token)"
  },
  {
    "label": "WaitForToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForToken(void* token)"
  },
  {
    "label": "TriggerRecompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerRecompile(void)"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMessage(const wchar_t* message)"
  },
  {
    "label": "BuildPatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPatch(const wchar_t* moduleNames[], const wchar_t* objPaths[], const wchar_t* amalgamatedObjPaths[], unsigned int count)"
  },
  {
    "label": "TriggerRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerRestart(void)"
  },
  {
    "label": "ShowConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowConsole()"
  },
  {
    "label": "SetVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisible(bool visible)"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActive(bool active)"
  },
  {
    "label": "SetBuildArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBuildArguments(const wchar_t* arguments)"
  },
  {
    "label": "SetReinstancingFlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReinstancingFlow(bool enable)"
  },
  {
    "label": "DisableCompileFinishNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableCompileFinishNotification()"
  },
  {
    "label": "ApplySettingBool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySettingBool(const char* settingName, int value)"
  },
  {
    "label": "ApplySettingInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySettingInt(const char* settingName, int value)"
  },
  {
    "label": "ApplySettingString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySettingString(const char* settingName, const wchar_t* value)"
  },
  {
    "label": "InstallExceptionHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstallExceptionHandler(void)"
  },
  {
    "label": "HandleException()",
    "kind": "Method",
    "detail": "Function (ExceptionResult)",
    "insertText": "HandleException(EXCEPTION_RECORD* exception, CONTEXT* context, Thread::Id threadId)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End(void)"
  },
  {
    "label": "PushUserCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushUserCommand(BaseCommand* command)"
  },
  {
    "label": "ThreadFunction()",
    "kind": "Method",
    "detail": "Function (Thread::ReturnValue)",
    "insertText": "ThreadFunction(Event* waitForStartEvent, CriticalSection* pipeAccessCS)"
  }
]