[
  {
    "label": "ChannelMixingMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChannelMixingMatrix"
  },
  {
    "label": "ChannelMixingMatrix()",
    "kind": "Method",
    "detail": "Function (# ifndef AUDIO_UTILITY_CHANNEL_MIXING_MATRIX_H_ # define AUDIO_UTILITY_CHANNEL_MIXING_MATRIX_H_ # include<vector> # include \" api / audio / channel_layout . h \" namespace webrtc { class ChannelMixingMatrix { public :)",
    "insertText": "ChannelMixingMatrix(ChannelLayout input_layout, int input_channels, ChannelLayout output_layout, int output_channels)"
  },
  {
    "label": "ChannelMixingMatrix()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ChannelMixingMatrix()"
  },
  {
    "label": "CreateTransformationMatrix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateTransformationMatrix(std::vector<std::vector<float>>* matrix)"
  },
  {
    "label": "AccountFor()",
    "kind": "Method",
    "detail": "Function (private : const bool use_voip_channel_mapping_adjustments_ ; std::vector<std::vector<float>>* matrix_ ; ChannelLayout input_layout_ ; int input_channels_ ; ChannelLayout output_layout_ ; int output_channels_ ; std::vector<Channels> unaccounted_inputs_ ; void)",
    "insertText": "AccountFor(Channels ch)"
  },
  {
    "label": "IsUnaccounted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnaccounted(Channels ch)"
  },
  {
    "label": "HasInputChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInputChannel(Channels ch)"
  },
  {
    "label": "HasOutputChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOutputChannel(Channels ch)"
  },
  {
    "label": "Mix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mix(Channels input_ch, Channels output_ch, float scale)"
  },
  {
    "label": "MixWithoutAccounting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MixWithoutAccounting(Channels input_ch, Channels output_ch, float scale)"
  },
  {
    "label": "ChannelMixingMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChannelMixingMatrix(const ChannelMixingMatrix& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ChannelMixingMatrix&)",
    "insertText": "operator(const ChannelMixingMatrix& other)"
  }
]