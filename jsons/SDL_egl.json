[
  {
    "label": "wl_display",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_display"
  },
  {
    "label": "wl_egl_pixmap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_egl_pixmap"
  },
  {
    "label": "wl_egl_window",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_egl_window"
  },
  {
    "label": "gbm_device",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gbm_device"
  },
  {
    "label": "gbm_bo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gbm_bo"
  },
  {
    "label": "ANativeWindow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ANativeWindow"
  },
  {
    "label": "egl_native_pixmap_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "egl_native_pixmap_t"
  },
  {
    "label": "AHardwareBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AHardwareBuffer"
  },
  {
    "label": "EGLClientPixmapHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EGLClientPixmapHI"
  },
  {
    "label": "wl_resource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_resource"
  },
  {
    "label": "wl_buffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_buffer"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(_MSC_VER) && !defined(__ANDROID__) && !defined(SDL_USE_BUILTIN_OPENGL_DEFINITIONS) #if defined(__vita__) || defined(__psp2__) #include <psp2/types.h> #endif #include <EGL/egl.h> #include <EGL/eglext.h> #else #ifndef __khrplatform_h_ #define __khrplatform_h_ #if defined(__SCITECH_SNAP__) && !defined(KHRONOS_STATIC) # define KHRONOS_STATIC 1 #endif #if defined(KHRONOS_STATIC) # define KHRONOS_APICALL #elif defined(_WIN32) # define KHRONOS_APICALL __declspec(dllimport) #elif defined (__SYMBIAN32__) # define KHRONOS_APICALL IMPORT_C #elif defined(__ANDROID__) # define KHRONOS_APICALL __attribute__((visibility(\"default\"))) #else # define KHRONOS_APICALL #endif #if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(__SCITECH_SNAP__) # define KHRONOS_APIENTRY __stdcall #else # define KHRONOS_APIENTRY #endif #if defined (__ARMCC_2__) #define KHRONOS_APIATTRIBUTES __softfp #else #define KHRONOS_APIATTRIBUTES #endif #if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef uint32_t khronos_uint32_t ; typedef int64_t khronos_int64_t ; typedef uint64_t khronos_uint64_t ; # define KHRONOS_SUPPORT_INT64 1 # define KHRONOS_SUPPORT_FLOAT 1 # if)",
    "insertText": "defined(__SIZEOF_LONG__) && defined(__SIZEOF_POINTER__) #if __SIZEOF_POINTER__ > __SIZEOF_LONG__ #define KHRONOS_USE_INTPTR_T #endif #endif #elif defined(__VMS ) || defined(__sgi)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef uint32_t khronos_uint32_t ; typedef int64_t khronos_int64_t ; typedef uint64_t khronos_uint64_t ; # define KHRONOS_SUPPORT_INT64 1 # define KHRONOS_SUPPORT_FLOAT 1 # elif)",
    "insertText": "defined(_WIN32) && !defined(__SCITECH_SNAP__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef unsigned __int32 khronos_uint32_t ; typedef __int64 khronos_int64_t ; typedef unsigned __int64 khronos_uint64_t ; # define KHRONOS_SUPPORT_INT64 1 # define KHRONOS_SUPPORT_FLOAT 1 # elif)",
    "insertText": "defined(__sun__) || defined(__digital__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef unsigned int khronos_uint32_t ; # if)",
    "insertText": "defined(__arch64__) || defined(_LP64)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef unsigned long int khronos_uint64_t ; # else typedef long long int khronos_int64_t ; typedef unsigned long long int khronos_uint64_t ; # endif # define KHRONOS_SUPPORT_INT64 1 # define KHRONOS_SUPPORT_FLOAT 1 # elif 0 typedef int khronos_int32_t ; typedef unsigned int khronos_uint32_t ; # define KHRONOS_SUPPORT_INT64 0 # define KHRONOS_SUPPORT_FLOAT 0 # else # include<stdint . h> typedef int32_t khronos_int32_t ; typedef uint32_t khronos_uint32_t ; typedef int64_t khronos_int64_t ; typedef uint64_t khronos_uint64_t ; # define KHRONOS_SUPPORT_INT64 1 # define KHRONOS_SUPPORT_FLOAT 1 # endif typedef signed char khronos_int8_t ; typedef unsigned char khronos_uint8_t ; typedef signed short int khronos_int16_t ; typedef unsigned short int khronos_uint16_t ; # ifdef KHRONOS_USE_INTPTR_T typedef intptr_t khronos_intptr_t ; typedef uintptr_t khronos_uintptr_t ; # elif)",
    "insertText": "defined(_WIN64)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef unsigned long long int khronos_usize_t ; # else typedef signed long int khronos_ssize_t ; typedef unsigned long int khronos_usize_t ; # endif # if KHRONOS_SUPPORT_FLOAT typedef float khronos_float_t ; # endif # if KHRONOS_SUPPORT_INT64 typedef khronos_uint64_t khronos_utime_nanoseconds_t ; typedef khronos_int64_t khronos_stime_nanoseconds_t ; # endif # ifndef KHRONOS_MAX_ENUM # define KHRONOS_MAX_ENUM 0 x7FFFFFFF # endif typedef enum { KHRONOS_FALSE = 0,KHRONOS_TRUE = 1,KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM } khronos_boolean_enum_t ; # endif # ifndef __eglplatform_h_ # define __eglplatform_h_ # ifndef EGLAPI # define EGLAPI KHRONOS_APICALL # endif # ifndef EGLAPIENTRY # define EGLAPIENTRY KHRONOS_APIENTRY # endif # define EGLAPIENTRYP EGLAPIENTRY* # if)",
    "insertText": "defined(EGL_NO_PLATFORM_SPECIFIC_TYPES)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef void* EGLNativePixmapType ; typedef void* EGLNativeWindowType ; # elif)",
    "insertText": "defined(_WIN32) || defined(__VC32__) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef HBITMAP EGLNativePixmapType ; typedef HWND EGLNativeWindowType ; # elif)",
    "insertText": "defined(__EMSCRIPTEN__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef int EGLNativePixmapType ; typedef int EGLNativeWindowType ; # elif)",
    "insertText": "defined(__WINSCW__) || defined(__SYMBIAN32__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef void* EGLNativePixmapType ; typedef void* EGLNativeWindowType ; # elif)",
    "insertText": "defined(WL_EGL_PLATFORM)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef struct wl_egl_pixmap* EGLNativePixmapType ; typedef struct wl_egl_window* EGLNativeWindowType ; # elif)",
    "insertText": "defined(__GBM__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef struct gbm_bo* EGLNativePixmapType ; typedef void* EGLNativeWindowType ; # elif)",
    "insertText": "defined(__ANDROID__) || defined(ANDROID)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (struct egl_native_pixmap_t ; typedef void* EGLNativeDisplayType ; typedef struct egl_native_pixmap_t* EGLNativePixmapType ; typedef struct ANativeWindow* EGLNativeWindowType ; # elif)",
    "insertText": "defined(USE_OZONE)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef intptr_t EGLNativePixmapType ; typedef intptr_t EGLNativeWindowType ; # elif)",
    "insertText": "defined(USE_X11)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef Pixmap EGLNativePixmapType ; typedef Window EGLNativeWindowType ; # elif)",
    "insertText": "defined(__unix__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef khronos_uintptr_t EGLNativePixmapType ; typedef khronos_uintptr_t EGLNativeWindowType ; # elif)",
    "insertText": "defined(__APPLE__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef void* EGLNativePixmapType ; typedef void* EGLNativeWindowType ; # elif)",
    "insertText": "defined(__HAIKU__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef khronos_uintptr_t EGLNativePixmapType ; typedef khronos_uintptr_t EGLNativeWindowType ; # elif)",
    "insertText": "defined(__Fuchsia__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef khronos_uintptr_t EGLNativePixmapType ; typedef khronos_uintptr_t EGLNativeWindowType ; # else # error \" Platform not recognized \" # endif typedef EGLNativeDisplayType NativeDisplayType ; typedef EGLNativePixmapType NativePixmapType ; typedef EGLNativeWindowType NativeWindowType ; typedef khronos_int32_t EGLint ; # if)",
    "insertText": "defined(__cplusplus) #define EGL_CAST(type, value) (static_cast<type>(value)) #else #define EGL_CAST(type, value) ((type) (value))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EGL_EGL_PROTOTYPES # define EGL_EGL_PROTOTYPES 1 # endif # ifndef EGL_VERSION_1_0 # define EGL_VERSION_1_0 1 typedef unsigned int EGLBoolean ; typedef void* EGLDisplay ; typedef void* EGLConfig ; typedef void* EGLSurface ; typedef void* EGLContext ; typedef)",
    "insertText": "void(*__eglMustCastToProperFunctionPointerType)(void)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# define EGL_ALPHA_SIZE 0 x3021 # define EGL_BAD_ACCESS 0 x3002 # define EGL_BAD_ALLOC 0 x3003 # define EGL_BAD_ATTRIBUTE 0 x3004 # define EGL_BAD_CONFIG 0 x3005 # define EGL_BAD_CONTEXT 0 x3006 # define EGL_BAD_CURRENT_SURFACE 0 x3007 # define EGL_BAD_DISPLAY 0 x3008 # define EGL_BAD_MATCH 0 x3009 # define EGL_BAD_NATIVE_PIXMAP 0 x300A # define EGL_BAD_NATIVE_WINDOW 0 x300B # define EGL_BAD_PARAMETER 0 x300C # define EGL_BAD_SURFACE 0 x300D # define EGL_BLUE_SIZE 0 x3022 # define EGL_BUFFER_SIZE 0 x3020 # define EGL_CONFIG_CAVEAT 0 x3027 # define EGL_CONFIG_ID 0 x3028 # define EGL_CORE_NATIVE_ENGINE 0 x305B # define EGL_DEPTH_SIZE 0 x3025 # define EGL_DONT_CARE)",
    "insertText": "EGL_CAST(EGLint,-1) #define EGL_DRAW 0x3059 #define EGL_EXTENSIONS 0x3055 #define EGL_FALSE 0 #define EGL_GREEN_SIZE 0x3023 #define EGL_HEIGHT 0x3056 #define EGL_LARGEST_PBUFFER 0x3058 #define EGL_LEVEL 0x3029 #define EGL_MAX_PBUFFER_HEIGHT 0x302A #define EGL_MAX_PBUFFER_PIXELS 0x302B #define EGL_MAX_PBUFFER_WIDTH 0x302C #define EGL_NATIVE_RENDERABLE 0x302D #define EGL_NATIVE_VISUAL_ID 0x302E #define EGL_NATIVE_VISUAL_TYPE 0x302F #define EGL_NONE 0x3038 #define EGL_NON_CONFORMANT_CONFIG 0x3051 #define EGL_NOT_INITIALIZED 0x3001 #define EGL_NO_CONTEXT EGL_CAST(EGLContext,0) #define EGL_NO_DISPLAY EGL_CAST(EGLDisplay,0) #define EGL_NO_SURFACE EGL_CAST(EGLSurface,0) #define EGL_PBUFFER_BIT 0x0001 #define EGL_PIXMAP_BIT 0x0002 #define EGL_READ 0x305A #define EGL_RED_SIZE 0x3024 #define EGL_SAMPLES 0x3031 #define EGL_SAMPLE_BUFFERS 0x3032 #define EGL_SLOW_CONFIG 0x3050 #define EGL_STENCIL_SIZE 0x3026 #define EGL_SUCCESS 0x3000 #define EGL_SURFACE_TYPE 0x3033 #define EGL_TRANSPARENT_BLUE_VALUE 0x3035 #define EGL_TRANSPARENT_GREEN_VALUE 0x3036 #define EGL_TRANSPARENT_RED_VALUE 0x3037 #define EGL_TRANSPARENT_RGB 0x3052 #define EGL_TRANSPARENT_TYPE 0x3034 #define EGL_TRUE 1 #define EGL_VENDOR 0x3053 #define EGL_VERSION 0x3054 #define EGL_WIDTH 0x3057 #define EGL_WINDOW_BIT 0x0004 typedef EGLBoolean (EGLAPIENTRYP PFNEGLCHOOSECONFIGPROC) (EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLCOPYBUFFERSPROC) (EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)"
  },
  {
    "label": "EGLContext()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLContext(EGLAPIENTRYP PFNEGLCREATECONTEXTPROC) (EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLCREATEPBUFFERSURFACEPROC) (EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLCREATEPIXMAPSURFACEPROC) (EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLCREATEWINDOWSURFACEPROC) (EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLDESTROYCONTEXTPROC) (EGLDisplay dpy, EGLContext ctx)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLDESTROYSURFACEPROC) (EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETCONFIGATTRIBPROC) (EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETCONFIGSPROC) (EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)"
  },
  {
    "label": "EGLDisplay()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLDisplay(EGLAPIENTRYP PFNEGLGETCURRENTDISPLAYPROC) (void)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLGETCURRENTSURFACEPROC) (EGLint readdraw)"
  },
  {
    "label": "EGLDisplay()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLDisplay(EGLAPIENTRYP PFNEGLGETDISPLAYPROC) (EGLNativeDisplayType display_id)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLGETERRORPROC) (void)"
  },
  {
    "label": "__eglMustCastToProperFunctionPointerType()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "__eglMustCastToProperFunctionPointerType(EGLAPIENTRYP PFNEGLGETPROCADDRESSPROC) (const char *procname)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLINITIALIZEPROC) (EGLDisplay dpy, EGLint *major, EGLint *minor)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLMAKECURRENTPROC) (EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYCONTEXTPROC) (EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "char(EGLAPIENTRYP PFNEGLQUERYSTRINGPROC) (EGLDisplay dpy, EGLint name)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSURFACEPROC) (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSWAPBUFFERSPROC) (EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLTERMINATEPROC) (EGLDisplay dpy)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLWAITGLPROC) (void)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLWAITNATIVEPROC) (EGLint engine)"
  },
  {
    "label": "eglChooseConfig()",
    "kind": "Method",
    "detail": "Function (# if EGL_EGL_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglChooseConfig(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)"
  },
  {
    "label": "eglCopyBuffers()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)"
  },
  {
    "label": "eglCreateContext()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLContext EGLAPIENTRY)",
    "insertText": "eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreatePbufferSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreatePixmapSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreateWindowSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroyContext()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroyContext(EGLDisplay dpy, EGLContext ctx)"
  },
  {
    "label": "eglDestroySurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroySurface(EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "eglGetConfigAttrib()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglGetConfigs()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetConfigs(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)"
  },
  {
    "label": "eglGetCurrentDisplay()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLDisplay EGLAPIENTRY)",
    "insertText": "eglGetCurrentDisplay(void)"
  },
  {
    "label": "eglGetCurrentSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglGetCurrentSurface(EGLint readdraw)"
  },
  {
    "label": "eglGetDisplay()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLDisplay EGLAPIENTRY)",
    "insertText": "eglGetDisplay(EGLNativeDisplayType display_id)"
  },
  {
    "label": "eglGetError()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglGetError(void)"
  },
  {
    "label": "eglGetProcAddress()",
    "kind": "Method",
    "detail": "Function (EGLAPI __eglMustCastToProperFunctionPointerType EGLAPIENTRY)",
    "insertText": "eglGetProcAddress(const char *procname)"
  },
  {
    "label": "eglInitialize()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglInitialize(EGLDisplay dpy, EGLint *major, EGLint *minor)"
  },
  {
    "label": "eglMakeCurrent()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)"
  },
  {
    "label": "eglQueryContext()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglQueryString()",
    "kind": "Method",
    "detail": "Function (EGLAPI const char* EGLAPIENTRY)",
    "insertText": "eglQueryString(EGLDisplay dpy, EGLint name)"
  },
  {
    "label": "eglQuerySurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglSwapBuffers()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSwapBuffers(EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "eglTerminate()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglTerminate(EGLDisplay dpy)"
  },
  {
    "label": "eglWaitGL()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglWaitGL(void)"
  },
  {
    "label": "eglWaitNative()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglWaitNative(EGLint engine)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_VERSION_1_1 # define EGL_VERSION_1_1 1 # define EGL_BACK_BUFFER 0 x3084 # define EGL_BIND_TO_TEXTURE_RGB 0 x3039 # define EGL_BIND_TO_TEXTURE_RGBA 0 x303A # define EGL_CONTEXT_LOST 0 x300E # define EGL_MIN_SWAP_INTERVAL 0 x303B # define EGL_MAX_SWAP_INTERVAL 0 x303C # define EGL_MIPMAP_TEXTURE 0 x3082 # define EGL_MIPMAP_LEVEL 0 x3083 # define EGL_NO_TEXTURE 0 x305C # define EGL_TEXTURE_2D 0 x305F # define EGL_TEXTURE_FORMAT 0 x3080 # define EGL_TEXTURE_RGB 0 x305D # define EGL_TEXTURE_RGBA 0 x305E # define EGL_TEXTURE_TARGET 0 x3081 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLBINDTEXIMAGEPROC) (EGLDisplay dpy, EGLSurface surface, EGLint buffer)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLRELEASETEXIMAGEPROC) (EGLDisplay dpy, EGLSurface surface, EGLint buffer)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSURFACEATTRIBPROC) (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSWAPINTERVALPROC) (EGLDisplay dpy, EGLint interval)"
  },
  {
    "label": "eglBindTexImage()",
    "kind": "Method",
    "detail": "Function (# if EGL_EGL_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)"
  },
  {
    "label": "eglReleaseTexImage()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)"
  },
  {
    "label": "eglSurfaceAttrib()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)"
  },
  {
    "label": "eglSwapInterval()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSwapInterval(EGLDisplay dpy, EGLint interval)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_VERSION_1_2 # define EGL_VERSION_1_2 1 typedef unsigned int EGLenum ; typedef void* EGLClientBuffer ; # define EGL_ALPHA_FORMAT 0 x3088 # define EGL_ALPHA_FORMAT_NONPRE 0 x308B # define EGL_ALPHA_FORMAT_PRE 0 x308C # define EGL_ALPHA_MASK_SIZE 0 x303E # define EGL_BUFFER_PRESERVED 0 x3094 # define EGL_BUFFER_DESTROYED 0 x3095 # define EGL_CLIENT_APIS 0 x308D # define EGL_COLORSPACE 0 x3087 # define EGL_COLORSPACE_sRGB 0 x3089 # define EGL_COLORSPACE_LINEAR 0 x308A # define EGL_COLOR_BUFFER_TYPE 0 x303F # define EGL_CONTEXT_CLIENT_TYPE 0 x3097 # define EGL_DISPLAY_SCALING 1 0 0 0 0 # define EGL_HORIZONTAL_RESOLUTION 0 x3090 # define EGL_LUMINANCE_BUFFER 0 x308F # define EGL_LUMINANCE_SIZE 0 x303D # define EGL_OPENGL_ES_BIT 0 x0001 # define EGL_OPENVG_BIT 0 x0002 # define 0 x30A0 # define 0 x30A1 # define EGL_OPENVG_IMAGE 0 x3096 # define EGL_PIXEL_ASPECT_RATIO 0 x3092 # define EGL_RENDERABLE_TYPE 0 x3040 # define EGL_RENDER_BUFFER 0 x3086 # define EGL_RGB_BUFFER 0 x308E # define EGL_SINGLE_BUFFER 0 x3085 # define EGL_SWAP_BEHAVIOR 0 x3093 # define EGL_UNKNOWN)",
    "insertText": "EGL_CAST(EGLint,-1) #define EGL_VERTICAL_RESOLUTION 0x3091 typedef EGLBoolean (EGLAPIENTRYP PFNEGLBINDAPIPROC) (EGLenum api)"
  },
  {
    "label": "EGLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLenum(EGLAPIENTRYP PFNEGLQUERYAPIPROC) (void)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLCREATEPBUFFERFROMCLIENTBUFFERPROC) (EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLRELEASETHREADPROC) (void)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLWAITCLIENTPROC) (void)"
  },
  {
    "label": "eglBindAPI()",
    "kind": "Method",
    "detail": "Function (# if EGL_EGL_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglBindAPI(EGLenum api)"
  },
  {
    "label": "eglQueryAPI()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLenum EGLAPIENTRY)",
    "insertText": "eglQueryAPI(void)"
  },
  {
    "label": "eglCreatePbufferFromClientBuffer()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)"
  },
  {
    "label": "eglReleaseThread()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglReleaseThread(void)"
  },
  {
    "label": "eglWaitClient()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglWaitClient(void)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_VERSION_1_3 # define EGL_VERSION_1_3 1 # define EGL_CONFORMANT 0 x3042 # define EGL_CONTEXT_CLIENT_VERSION 0 x3098 # define EGL_MATCH_NATIVE_PIXMAP 0 x3041 # define EGL_OPENGL_ES2_BIT 0 x0004 # define EGL_VG_ALPHA_FORMAT 0 x3088 # define EGL_VG_ALPHA_FORMAT_NONPRE 0 x308B # define EGL_VG_ALPHA_FORMAT_PRE 0 x308C # define EGL_VG_ALPHA_FORMAT_PRE_BIT 0 x0040 # define EGL_VG_COLORSPACE 0 x3087 # define EGL_VG_COLORSPACE_sRGB 0 x3089 # define EGL_VG_COLORSPACE_LINEAR 0 x308A # define EGL_VG_COLORSPACE_LINEAR_BIT 0 x0020 # endif # ifndef EGL_VERSION_1_4 # define EGL_VERSION_1_4 1 # define EGL_DEFAULT_DISPLAY)",
    "insertText": "EGL_CAST(EGLNativeDisplayType,0) #define EGL_MULTISAMPLE_RESOLVE_BOX_BIT 0x0200 #define EGL_MULTISAMPLE_RESOLVE 0x3099 #define EGL_MULTISAMPLE_RESOLVE_DEFAULT 0x309A #define EGL_MULTISAMPLE_RESOLVE_BOX 0x309B #define EGL_OPENGL_API 0x30A2 #define EGL_OPENGL_BIT 0x0008 #define EGL_SWAP_BEHAVIOR_PRESERVED_BIT 0x0400 typedef EGLContext (EGLAPIENTRYP PFNEGLGETCURRENTCONTEXTPROC) (void)"
  },
  {
    "label": "eglGetCurrentContext()",
    "kind": "Method",
    "detail": "Function (# if EGL_EGL_PROTOTYPES EGLAPI EGLContext EGLAPIENTRY)",
    "insertText": "eglGetCurrentContext(void)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_VERSION_1_5 # define EGL_VERSION_1_5 1 typedef void* EGLSync ; typedef intptr_t EGLAttrib ; typedef khronos_utime_nanoseconds_t EGLTime ; typedef void* EGLImage ; # define EGL_CONTEXT_MAJOR_VERSION 0 x3098 # define EGL_CONTEXT_MINOR_VERSION 0 x30FB # define EGL_CONTEXT_OPENGL_PROFILE_MASK 0 x30FD # define EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY 0 x31BD # define EGL_NO_RESET_NOTIFICATION 0 x31BE # define EGL_LOSE_CONTEXT_ON_RESET 0 x31BF # define EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT 0 x00000001 # define EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT 0 x00000002 # define EGL_CONTEXT_OPENGL_DEBUG 0 x31B0 # define EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE 0 x31B1 # define EGL_CONTEXT_OPENGL_ROBUST_ACCESS 0 x31B2 # define EGL_OPENGL_ES3_BIT 0 x00000040 # define EGL_CL_EVENT_HANDLE 0 x309C # define EGL_SYNC_CL_EVENT 0 x30FE # define EGL_SYNC_CL_EVENT_COMPLETE 0 x30FF # define EGL_SYNC_PRIOR_COMMANDS_COMPLETE 0 x30F0 # define EGL_SYNC_TYPE 0 x30F7 # define EGL_SYNC_STATUS 0 x30F1 # define EGL_SYNC_CONDITION 0 x30F8 # define EGL_SIGNALED 0 x30F2 # define EGL_UNSIGNALED 0 x30F3 # define EGL_SYNC_FLUSH_COMMANDS_BIT 0 x0001 # define EGL_FOREVER 0 xFFFFFFFFFFFFFFFFull # define EGL_TIMEOUT_EXPIRED 0 x30F5 # define EGL_CONDITION_SATISFIED 0 x30F6 # define EGL_NO_SYNC)",
    "insertText": "EGL_CAST(EGLSync,0) #define EGL_SYNC_FENCE 0x30F9 #define EGL_GL_COLORSPACE 0x309D #define EGL_GL_COLORSPACE_SRGB 0x3089 #define EGL_GL_COLORSPACE_LINEAR 0x308A #define EGL_GL_RENDERBUFFER 0x30B9 #define EGL_GL_TEXTURE_2D 0x30B1 #define EGL_GL_TEXTURE_LEVEL 0x30BC #define EGL_GL_TEXTURE_3D 0x30B2 #define EGL_GL_TEXTURE_ZOFFSET 0x30BD #define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x30B3 #define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x30B4 #define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x30B5 #define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x30B6 #define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x30B7 #define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x30B8 #define EGL_IMAGE_PRESERVED 0x30D2 #define EGL_NO_IMAGE EGL_CAST(EGLImage,0) typedef EGLSync (EGLAPIENTRYP PFNEGLCREATESYNCPROC) (EGLDisplay dpy, EGLenum type, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLDESTROYSYNCPROC) (EGLDisplay dpy, EGLSync sync)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLCLIENTWAITSYNCPROC) (EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETSYNCATTRIBPROC) (EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "EGLImage()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLImage(EGLAPIENTRYP PFNEGLCREATEIMAGEPROC) (EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLDESTROYIMAGEPROC) (EGLDisplay dpy, EGLImage image)"
  },
  {
    "label": "EGLDisplay()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLDisplay(EGLAPIENTRYP PFNEGLGETPLATFORMDISPLAYPROC) (EGLenum platform, void *native_display, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLCREATEPLATFORMWINDOWSURFACEPROC) (EGLDisplay dpy, EGLConfig config, void *native_window, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLCREATEPLATFORMPIXMAPSURFACEPROC) (EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLWAITSYNCPROC) (EGLDisplay dpy, EGLSync sync, EGLint flags)"
  },
  {
    "label": "eglCreateSync()",
    "kind": "Method",
    "detail": "Function (# if EGL_EGL_PROTOTYPES EGLAPI EGLSync EGLAPIENTRY)",
    "insertText": "eglCreateSync(EGLDisplay dpy, EGLenum type, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglDestroySync()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroySync(EGLDisplay dpy, EGLSync sync)"
  },
  {
    "label": "eglClientWaitSync()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglClientWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout)"
  },
  {
    "label": "eglGetSyncAttrib()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetSyncAttrib(EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglCreateImage()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLImage EGLAPIENTRY)",
    "insertText": "eglCreateImage(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglDestroyImage()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroyImage(EGLDisplay dpy, EGLImage image)"
  },
  {
    "label": "eglGetPlatformDisplay()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLDisplay EGLAPIENTRY)",
    "insertText": "eglGetPlatformDisplay(EGLenum platform, void *native_display, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglCreatePlatformWindowSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreatePlatformWindowSurface(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglCreatePlatformPixmapSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreatePlatformPixmapSurface(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglWaitSync()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags)"
  },
  {
    "label": "EGLSyncKHR()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifdef __cplusplus } # endif # endif # ifndef __eglext_h_ # define __eglext_h_ 1 # ifdef __cplusplus \" C \" { # endif # define EGL_EGLEXT_VERSION 2 0 2 2 0 5 2 5 # ifndef EGL_KHR_cl_event # define EGL_KHR_cl_event 1 # define EGL_CL_EVENT_HANDLE_KHR 0 x309C # define EGL_SYNC_CL_EVENT_KHR 0 x30FE # define EGL_SYNC_CL_EVENT_COMPLETE_KHR 0 x30FF # endif # ifndef EGL_KHR_cl_event2 # define EGL_KHR_cl_event2 1 typedef void* EGLSyncKHR ; typedef intptr_t EGLAttribKHR ; typedef)",
    "insertText": "EGLSyncKHR(EGLAPIENTRYP PFNEGLCREATESYNC64KHRPROC) (EGLDisplay dpy, EGLenum type, const EGLAttribKHR *attrib_list)"
  },
  {
    "label": "eglCreateSync64KHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLSyncKHR EGLAPIENTRY)",
    "insertText": "eglCreateSync64KHR(EGLDisplay dpy, EGLenum type, const EGLAttribKHR *attrib_list)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_KHR_client_get_all_proc_addresses # define EGL_KHR_client_get_all_proc_addresses 1 # endif # ifndef EGL_KHR_config_attribs # define EGL_KHR_config_attribs 1 # define EGL_CONFORMANT_KHR 0 x3042 # define EGL_VG_COLORSPACE_LINEAR_BIT_KHR 0 x0020 # define EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR 0 x0040 # endif # ifndef EGL_KHR_context_flush_control # define EGL_KHR_context_flush_control 1 # define EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR 0 # define EGL_CONTEXT_RELEASE_BEHAVIOR_KHR 0 x2097 # define EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0 x2098 # endif # ifndef EGL_KHR_create_context # define EGL_KHR_create_context 1 # define EGL_CONTEXT_MAJOR_VERSION_KHR 0 x3098 # define EGL_CONTEXT_MINOR_VERSION_KHR 0 x30FB # define EGL_CONTEXT_FLAGS_KHR 0 x30FC # define EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR 0 x30FD # define EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR 0 x31BD # define EGL_NO_RESET_NOTIFICATION_KHR 0 x31BE # define EGL_LOSE_CONTEXT_ON_RESET_KHR 0 x31BF # define EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR 0 x00000001 # define EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR 0 x00000002 # define EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR 0 x00000004 # define EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR 0 x00000001 # define EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR 0 x00000002 # define EGL_OPENGL_ES3_BIT_KHR 0 x00000040 # endif # ifndef EGL_KHR_create_context_no_error # define EGL_KHR_create_context_no_error 1 # define EGL_CONTEXT_OPENGL_NO_ERROR_KHR 0 x31B3 # endif # ifndef EGL_KHR_debug # define EGL_KHR_debug 1 typedef void* EGLLabelKHR ; typedef void* EGLObjectKHR ; typedef)",
    "insertText": "void(EGLAPIENTRY *EGLDEBUGPROCKHR)(EGLenum error,const char *command,EGLint messageType,EGLLabelKHR threadLabel,EGLLabelKHR objectLabel,const char* message)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (# define EGL_OBJECT_THREAD_KHR 0 x33B0 # define EGL_OBJECT_DISPLAY_KHR 0 x33B1 # define EGL_OBJECT_CONTEXT_KHR 0 x33B2 # define EGL_OBJECT_SURFACE_KHR 0 x33B3 # define EGL_OBJECT_IMAGE_KHR 0 x33B4 # define EGL_OBJECT_SYNC_KHR 0 x33B5 # define EGL_OBJECT_STREAM_KHR 0 x33B6 # define EGL_DEBUG_MSG_CRITICAL_KHR 0 x33B9 # define EGL_DEBUG_MSG_ERROR_KHR 0 x33BA # define EGL_DEBUG_MSG_WARN_KHR 0 x33BB # define EGL_DEBUG_MSG_INFO_KHR 0 x33BC # define EGL_DEBUG_CALLBACK_KHR 0 x33B8 typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLDEBUGMESSAGECONTROLKHRPROC) (EGLDEBUGPROCKHR callback, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYDEBUGKHRPROC) (EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLLABELOBJECTKHRPROC) (EGLDisplay display, EGLenum objectType, EGLObjectKHR object, EGLLabelKHR label)"
  },
  {
    "label": "eglDebugMessageControlKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglDebugMessageControlKHR(EGLDEBUGPROCKHR callback, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglQueryDebugKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryDebugKHR(EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglLabelObjectKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglLabelObjectKHR(EGLDisplay display, EGLenum objectType, EGLObjectKHR object, EGLLabelKHR label)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_KHR_display_reference # define EGL_KHR_display_reference 1 # define EGL_TRACK_REFERENCES_KHR 0 x3352 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYDISPLAYATTRIBKHRPROC) (EGLDisplay dpy, EGLint name, EGLAttrib *value)"
  },
  {
    "label": "eglQueryDisplayAttribKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryDisplayAttribKHR(EGLDisplay dpy, EGLint name, EGLAttrib *value)"
  },
  {
    "label": "EGLSyncKHR()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_KHR_fence_sync # define EGL_KHR_fence_sync 1 typedef khronos_utime_nanoseconds_t EGLTimeKHR ; # ifdef KHRONOS_SUPPORT_INT64 # define EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR 0 x30F0 # define EGL_SYNC_CONDITION_KHR 0 x30F8 # define EGL_SYNC_FENCE_KHR 0 x30F9 typedef)",
    "insertText": "EGLSyncKHR(EGLAPIENTRYP PFNEGLCREATESYNCKHRPROC) (EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLDESTROYSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLCLIENTWAITSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETSYNCATTRIBKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglCreateSyncKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLSyncKHR EGLAPIENTRY)",
    "insertText": "eglCreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroySyncKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroySyncKHR(EGLDisplay dpy, EGLSyncKHR sync)"
  },
  {
    "label": "eglClientWaitSyncKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglClientWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout)"
  },
  {
    "label": "eglGetSyncAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *value)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifndef EGL_KHR_get_all_proc_addresses # define EGL_KHR_get_all_proc_addresses 1 # endif # ifndef EGL_KHR_gl_colorspace # define EGL_KHR_gl_colorspace 1 # define EGL_GL_COLORSPACE_KHR 0 x309D # define EGL_GL_COLORSPACE_SRGB_KHR 0 x3089 # define EGL_GL_COLORSPACE_LINEAR_KHR 0 x308A # endif # ifndef EGL_KHR_gl_renderbuffer_image # define EGL_KHR_gl_renderbuffer_image 1 # define EGL_GL_RENDERBUFFER_KHR 0 x30B9 # endif # ifndef EGL_KHR_gl_texture_2D_image # define EGL_KHR_gl_texture_2D_image 1 # define EGL_GL_TEXTURE_2D_KHR 0 x30B1 # define EGL_GL_TEXTURE_LEVEL_KHR 0 x30BC # endif # ifndef EGL_KHR_gl_texture_3D_image # define EGL_KHR_gl_texture_3D_image 1 # define EGL_GL_TEXTURE_3D_KHR 0 x30B2 # define EGL_GL_TEXTURE_ZOFFSET_KHR 0 x30BD # endif # ifndef EGL_KHR_gl_texture_cubemap_image # define EGL_KHR_gl_texture_cubemap_image 1 # define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR 0 x30B3 # define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR 0 x30B4 # define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR 0 x30B5 # define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR 0 x30B6 # define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR 0 x30B7 # define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR 0 x30B8 # endif # ifndef EGL_KHR_image # define EGL_KHR_image 1 typedef void* EGLImageKHR ; # define EGL_NATIVE_PIXMAP_KHR 0 x30B0 # define EGL_NO_IMAGE_KHR)",
    "insertText": "EGL_CAST(EGLImageKHR,0) typedef EGLImageKHR (EGLAPIENTRYP PFNEGLCREATEIMAGEKHRPROC) (EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLDESTROYIMAGEKHRPROC) (EGLDisplay dpy, EGLImageKHR image)"
  },
  {
    "label": "eglCreateImageKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLImageKHR EGLAPIENTRY)",
    "insertText": "eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroyImageKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_KHR_image_base # define EGL_KHR_image_base 1 # define EGL_IMAGE_PRESERVED_KHR 0 x30D2 # endif # ifndef EGL_KHR_image_pixmap # define EGL_KHR_image_pixmap 1 # endif # ifndef EGL_KHR_lock_surface # define EGL_KHR_lock_surface 1 # define EGL_READ_SURFACE_BIT_KHR 0 x0001 # define EGL_WRITE_SURFACE_BIT_KHR 0 x0002 # define EGL_LOCK_SURFACE_BIT_KHR 0 x0080 # define EGL_OPTIMAL_FORMAT_BIT_KHR 0 x0100 # define EGL_MATCH_FORMAT_KHR 0 x3043 # define EGL_FORMAT_RGB_565_EXACT_KHR 0 x30C0 # define EGL_FORMAT_RGB_565_KHR 0 x30C1 # define EGL_FORMAT_RGBA_8888_EXACT_KHR 0 x30C2 # define EGL_FORMAT_RGBA_8888_KHR 0 x30C3 # define EGL_MAP_PRESERVE_PIXELS_KHR 0 x30C4 # define EGL_LOCK_USAGE_HINT_KHR 0 x30C5 # define EGL_BITMAP_POINTER_KHR 0 x30C6 # define EGL_BITMAP_PITCH_KHR 0 x30C7 # define EGL_BITMAP_ORIGIN_KHR 0 x30C8 # define EGL_BITMAP_PIXEL_RED_OFFSET_KHR 0 x30C9 # define EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR 0 x30CA # define EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR 0 x30CB # define EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR 0 x30CC # define EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR 0 x30CD # define EGL_LOWER_LEFT_KHR 0 x30CE # define EGL_UPPER_LEFT_KHR 0 x30CF typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLLOCKSURFACEKHRPROC) (EGLDisplay dpy, EGLSurface surface, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLUNLOCKSURFACEKHRPROC) (EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "eglLockSurfaceKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglLockSurfaceKHR(EGLDisplay dpy, EGLSurface surface, const EGLint *attrib_list)"
  },
  {
    "label": "eglUnlockSurfaceKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglUnlockSurfaceKHR(EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_KHR_lock_surface2 # define EGL_KHR_lock_surface2 1 # define EGL_BITMAP_PIXEL_SIZE_KHR 0 x3110 # endif # ifndef EGL_KHR_lock_surface3 # define EGL_KHR_lock_surface3 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSURFACE64KHRPROC) (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLAttribKHR *value)"
  },
  {
    "label": "eglQuerySurface64KHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQuerySurface64KHR(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLAttribKHR *value)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_KHR_mutable_render_buffer # define EGL_KHR_mutable_render_buffer 1 # define EGL_MUTABLE_RENDER_BUFFER_BIT_KHR 0 x1000 # endif # ifndef EGL_KHR_no_config_context # define EGL_KHR_no_config_context 1 # define EGL_NO_CONFIG_KHR)",
    "insertText": "EGL_CAST(EGLConfig,0) #endif #ifndef EGL_KHR_partial_update #define EGL_KHR_partial_update 1 #define EGL_BUFFER_AGE_KHR 0x313D typedef EGLBoolean (EGLAPIENTRYP PFNEGLSETDAMAGEREGIONKHRPROC) (EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects)"
  },
  {
    "label": "eglSetDamageRegionKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSetDamageRegionKHR(EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_KHR_platform_android # define EGL_KHR_platform_android 1 # define EGL_PLATFORM_ANDROID_KHR 0 x3141 # endif # ifndef EGL_KHR_platform_gbm # define EGL_KHR_platform_gbm 1 # define EGL_PLATFORM_GBM_KHR 0 x31D7 # endif # ifndef EGL_KHR_platform_wayland # define EGL_KHR_platform_wayland 1 # define EGL_PLATFORM_WAYLAND_KHR 0 x31D8 # endif # ifndef EGL_KHR_platform_x11 # define EGL_KHR_platform_x11 1 # define EGL_PLATFORM_X11_KHR 0 x31D5 # define EGL_PLATFORM_X11_SCREEN_KHR 0 x31D6 # endif # ifndef EGL_KHR_reusable_sync # define EGL_KHR_reusable_sync 1 # ifdef KHRONOS_SUPPORT_INT64 # define EGL_SYNC_STATUS_KHR 0 x30F1 # define EGL_SIGNALED_KHR 0 x30F2 # define EGL_UNSIGNALED_KHR 0 x30F3 # define EGL_TIMEOUT_EXPIRED_KHR 0 x30F5 # define EGL_CONDITION_SATISFIED_KHR 0 x30F6 # define EGL_SYNC_TYPE_KHR 0 x30F7 # define EGL_SYNC_REUSABLE_KHR 0 x30FA # define EGL_SYNC_FLUSH_COMMANDS_BIT_KHR 0 x0001 # define EGL_FOREVER_KHR 0 xFFFFFFFFFFFFFFFFull # define EGL_NO_SYNC_KHR)",
    "insertText": "EGL_CAST(EGLSyncKHR,0) typedef EGLBoolean (EGLAPIENTRYP PFNEGLSIGNALSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode)"
  },
  {
    "label": "eglSignalSyncKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSignalSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifndef EGL_KHR_stream # define EGL_KHR_stream 1 typedef void* EGLStreamKHR ; typedef khronos_uint64_t EGLuint64KHR ; # ifdef KHRONOS_SUPPORT_INT64 # define EGL_NO_STREAM_KHR)",
    "insertText": "EGL_CAST(EGLStreamKHR,0) #define EGL_CONSUMER_LATENCY_USEC_KHR 0x3210 #define EGL_PRODUCER_FRAME_KHR 0x3212 #define EGL_CONSUMER_FRAME_KHR 0x3213 #define EGL_STREAM_STATE_KHR 0x3214 #define EGL_STREAM_STATE_CREATED_KHR 0x3215 #define EGL_STREAM_STATE_CONNECTING_KHR 0x3216 #define EGL_STREAM_STATE_EMPTY_KHR 0x3217 #define EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR 0x3218 #define EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR 0x3219 #define EGL_STREAM_STATE_DISCONNECTED_KHR 0x321A #define EGL_BAD_STREAM_KHR 0x321B #define EGL_BAD_STATE_KHR 0x321C typedef EGLStreamKHR (EGLAPIENTRYP PFNEGLCREATESTREAMKHRPROC) (EGLDisplay dpy, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLDESTROYSTREAMKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMATTRIBKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSTREAMKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint *value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSTREAMU64KHRPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR *value)"
  },
  {
    "label": "eglCreateStreamKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLStreamKHR EGLAPIENTRY)",
    "insertText": "eglCreateStreamKHR(EGLDisplay dpy, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroyStreamKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroyStreamKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglStreamAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value)"
  },
  {
    "label": "eglQueryStreamKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryStreamKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint *value)"
  },
  {
    "label": "eglQueryStreamu64KHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryStreamu64KHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR *value)"
  },
  {
    "label": "EGLStreamKHR()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifndef EGL_KHR_stream_attrib # define EGL_KHR_stream_attrib 1 # ifdef KHRONOS_SUPPORT_INT64 typedef)",
    "insertText": "EGLStreamKHR(EGLAPIENTRYP PFNEGLCREATESTREAMATTRIBKHRPROC) (EGLDisplay dpy, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSETSTREAMATTRIBKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSTREAMATTRIBKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib *value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMCONSUMERACQUIREATTRIBKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMCONSUMERRELEASEATTRIBKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglCreateStreamAttribKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLStreamKHR EGLAPIENTRY)",
    "insertText": "eglCreateStreamAttribKHR(EGLDisplay dpy, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglSetStreamAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSetStreamAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib value)"
  },
  {
    "label": "eglQueryStreamAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryStreamAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib *value)"
  },
  {
    "label": "eglStreamConsumerAcquireAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamConsumerAcquireAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglStreamConsumerReleaseAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamConsumerReleaseAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifndef EGL_KHR_stream_consumer_gltexture # define EGL_KHR_stream_consumer_gltexture 1 # ifdef EGL_KHR_stream # define EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR 0 x321E typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMCONSUMERACQUIREKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMCONSUMERRELEASEKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglStreamConsumerGLTextureExternalKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamConsumerGLTextureExternalKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglStreamConsumerAcquireKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamConsumerAcquireKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglStreamConsumerReleaseKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamConsumerReleaseKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifndef EGL_KHR_stream_cross_process_fd # define EGL_KHR_stream_cross_process_fd 1 typedef int EGLNativeFileDescriptorKHR ; # ifdef EGL_KHR_stream # define EGL_NO_FILE_DESCRIPTOR_KHR)",
    "insertText": "EGL_CAST(EGLNativeFileDescriptorKHR,-1) typedef EGLNativeFileDescriptorKHR (EGLAPIENTRYP PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "EGLStreamKHR()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLStreamKHR(EGLAPIENTRYP PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC) (EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor)"
  },
  {
    "label": "eglGetStreamFileDescriptorKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLNativeFileDescriptorKHR EGLAPIENTRY)",
    "insertText": "eglGetStreamFileDescriptorKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglCreateStreamFromFileDescriptorKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLStreamKHR EGLAPIENTRY)",
    "insertText": "eglCreateStreamFromFileDescriptorKHR(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifndef EGL_KHR_stream_fifo # define EGL_KHR_stream_fifo 1 # ifdef EGL_KHR_stream # define EGL_STREAM_FIFO_LENGTH_KHR 0 x31FC # define EGL_STREAM_TIME_NOW_KHR 0 x31FD # define EGL_STREAM_TIME_CONSUMER_KHR 0 x31FE # define EGL_STREAM_TIME_PRODUCER_KHR 0 x31FF typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSTREAMTIMEKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR *value)"
  },
  {
    "label": "eglQueryStreamTimeKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryStreamTimeKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR *value)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifndef EGL_KHR_stream_producer_aldatalocator # define EGL_KHR_stream_producer_aldatalocator 1 # ifdef EGL_KHR_stream # endif # endif # ifndef EGL_KHR_stream_producer_eglsurface # define EGL_KHR_stream_producer_eglsurface 1 # ifdef EGL_KHR_stream # define EGL_STREAM_BIT_KHR 0 x0800 typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC) (EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreateStreamProducerSurfaceKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreateStreamProducerSurfaceKHR(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifndef EGL_KHR_surfaceless_context # define EGL_KHR_surfaceless_context 1 # endif # ifndef EGL_KHR_swap_buffers_with_damage # define EGL_KHR_swap_buffers_with_damage 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSWAPBUFFERSWITHDAMAGEKHRPROC) (EGLDisplay dpy, EGLSurface surface, const EGLint *rects, EGLint n_rects)"
  },
  {
    "label": "eglSwapBuffersWithDamageKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSwapBuffersWithDamageKHR(EGLDisplay dpy, EGLSurface surface, const EGLint *rects, EGLint n_rects)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_KHR_vg_parent_image # define EGL_KHR_vg_parent_image 1 # define EGL_VG_PARENT_IMAGE_KHR 0 x30BA # endif # ifndef EGL_KHR_wait_sync # define EGL_KHR_wait_sync 1 typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLWAITSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLint flags)"
  },
  {
    "label": "eglWaitSyncKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_ANDROID_GLES_layers # define EGL_ANDROID_GLES_layers 1 # endif # ifndef EGL_ANDROID_blob_cache # define EGL_ANDROID_blob_cache 1 typedef khronos_ssize_t EGLsizeiANDROID ; typedef)",
    "insertText": "void(*EGLSetBlobFuncANDROID) (const void *key, EGLsizeiANDROID keySize, const void *value, EGLsizeiANDROID valueSize)"
  },
  {
    "label": "EGLsizeiANDROID()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLsizeiANDROID(*EGLGetBlobFuncANDROID) (const void *key, EGLsizeiANDROID keySize, void *value, EGLsizeiANDROID valueSize)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(EGLAPIENTRYP PFNEGLSETBLOBCACHEFUNCSANDROIDPROC) (EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get)"
  },
  {
    "label": "eglSetBlobCacheFuncsANDROID()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI void EGLAPIENTRY)",
    "insertText": "eglSetBlobCacheFuncsANDROID(EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get)"
  },
  {
    "label": "EGLClientBuffer()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_ANDROID_create_native_client_buffer # define EGL_ANDROID_create_native_client_buffer 1 # define EGL_NATIVE_BUFFER_USAGE_ANDROID 0 x3143 # define EGL_NATIVE_BUFFER_USAGE_PROTECTED_BIT_ANDROID 0 x00000001 # define EGL_NATIVE_BUFFER_USAGE_RENDERBUFFER_BIT_ANDROID 0 x00000002 # define EGL_NATIVE_BUFFER_USAGE_TEXTURE_BIT_ANDROID 0 x00000004 typedef)",
    "insertText": "EGLClientBuffer(EGLAPIENTRYP PFNEGLCREATENATIVECLIENTBUFFERANDROIDPROC) (const EGLint *attrib_list)"
  },
  {
    "label": "eglCreateNativeClientBufferANDROID()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLClientBuffer EGLAPIENTRY)",
    "insertText": "eglCreateNativeClientBufferANDROID(const EGLint *attrib_list)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_ANDROID_framebuffer_target # define EGL_ANDROID_framebuffer_target 1 # define EGL_FRAMEBUFFER_TARGET_ANDROID 0 x3147 # endif # ifndef EGL_ANDROID_front_buffer_auto_refresh # define EGL_ANDROID_front_buffer_auto_refresh 1 # define EGL_FRONT_BUFFER_AUTO_REFRESH_ANDROID 0 x314C # endif # ifndef EGL_ANDROID_get_frame_timestamps # define EGL_ANDROID_get_frame_timestamps 1 typedef khronos_stime_nanoseconds_t EGLnsecsANDROID ; # define EGL_TIMESTAMP_PENDING_ANDROID)",
    "insertText": "EGL_CAST(EGLnsecsANDROID,-2) #define EGL_TIMESTAMP_INVALID_ANDROID EGL_CAST(EGLnsecsANDROID,-1) #define EGL_TIMESTAMPS_ANDROID 0x3430 #define EGL_COMPOSITE_DEADLINE_ANDROID 0x3431 #define EGL_COMPOSITE_INTERVAL_ANDROID 0x3432 #define EGL_COMPOSITE_TO_PRESENT_LATENCY_ANDROID 0x3433 #define EGL_REQUESTED_PRESENT_TIME_ANDROID 0x3434 #define EGL_RENDERING_COMPLETE_TIME_ANDROID 0x3435 #define EGL_COMPOSITION_LATCH_TIME_ANDROID 0x3436 #define EGL_FIRST_COMPOSITION_START_TIME_ANDROID 0x3437 #define EGL_LAST_COMPOSITION_START_TIME_ANDROID 0x3438 #define EGL_FIRST_COMPOSITION_GPU_FINISHED_TIME_ANDROID 0x3439 #define EGL_DISPLAY_PRESENT_TIME_ANDROID 0x343A #define EGL_DEQUEUE_READY_TIME_ANDROID 0x343B #define EGL_READS_DONE_TIME_ANDROID 0x343C typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETCOMPOSITORTIMINGSUPPORTEDANDROIDPROC) (EGLDisplay dpy, EGLSurface surface, EGLint name)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETCOMPOSITORTIMINGANDROIDPROC) (EGLDisplay dpy, EGLSurface surface, EGLint numTimestamps, const EGLint *names, EGLnsecsANDROID *values)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETNEXTFRAMEIDANDROIDPROC) (EGLDisplay dpy, EGLSurface surface, EGLuint64KHR *frameId)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETFRAMETIMESTAMPSUPPORTEDANDROIDPROC) (EGLDisplay dpy, EGLSurface surface, EGLint timestamp)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETFRAMETIMESTAMPSANDROIDPROC) (EGLDisplay dpy, EGLSurface surface, EGLuint64KHR frameId, EGLint numTimestamps, const EGLint *timestamps, EGLnsecsANDROID *values)"
  },
  {
    "label": "eglGetCompositorTimingSupportedANDROID()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetCompositorTimingSupportedANDROID(EGLDisplay dpy, EGLSurface surface, EGLint name)"
  },
  {
    "label": "eglGetCompositorTimingANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetCompositorTimingANDROID(EGLDisplay dpy, EGLSurface surface, EGLint numTimestamps, const EGLint *names, EGLnsecsANDROID *values)"
  },
  {
    "label": "eglGetNextFrameIdANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetNextFrameIdANDROID(EGLDisplay dpy, EGLSurface surface, EGLuint64KHR *frameId)"
  },
  {
    "label": "eglGetFrameTimestampSupportedANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetFrameTimestampSupportedANDROID(EGLDisplay dpy, EGLSurface surface, EGLint timestamp)"
  },
  {
    "label": "eglGetFrameTimestampsANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetFrameTimestampsANDROID(EGLDisplay dpy, EGLSurface surface, EGLuint64KHR frameId, EGLint numTimestamps, const EGLint *timestamps, EGLnsecsANDROID *values)"
  },
  {
    "label": "EGLClientBuffer()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_ANDROID_get_native_client_buffer # define EGL_ANDROID_get_native_client_buffer 1 struct AHardwareBuffer ; typedef)",
    "insertText": "EGLClientBuffer(EGLAPIENTRYP PFNEGLGETNATIVECLIENTBUFFERANDROIDPROC) (const struct AHardwareBuffer *buffer)"
  },
  {
    "label": "eglGetNativeClientBufferANDROID()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLClientBuffer EGLAPIENTRY)",
    "insertText": "eglGetNativeClientBufferANDROID(const struct AHardwareBuffer *buffer)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_ANDROID_image_native_buffer # define EGL_ANDROID_image_native_buffer 1 # define EGL_NATIVE_BUFFER_ANDROID 0 x3140 # endif # ifndef EGL_ANDROID_native_fence_sync # define EGL_ANDROID_native_fence_sync 1 # define EGL_SYNC_NATIVE_FENCE_ANDROID 0 x3144 # define EGL_SYNC_NATIVE_FENCE_FD_ANDROID 0 x3145 # define EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID 0 x3146 # define EGL_NO_NATIVE_FENCE_FD_ANDROID - 1 typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLDUPNATIVEFENCEFDANDROIDPROC) (EGLDisplay dpy, EGLSyncKHR sync)"
  },
  {
    "label": "eglDupNativeFenceFDANDROID()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglDupNativeFenceFDANDROID(EGLDisplay dpy, EGLSyncKHR sync)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_ANDROID_presentation_time # define EGL_ANDROID_presentation_time 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLPRESENTATIONTIMEANDROIDPROC) (EGLDisplay dpy, EGLSurface surface, EGLnsecsANDROID time)"
  },
  {
    "label": "eglPresentationTimeANDROID()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglPresentationTimeANDROID(EGLDisplay dpy, EGLSurface surface, EGLnsecsANDROID time)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_ANDROID_recordable # define EGL_ANDROID_recordable 1 # define EGL_RECORDABLE_ANDROID 0 x3142 # endif # ifndef EGL_ANGLE_d3d_share_handle_client_buffer # define EGL_ANGLE_d3d_share_handle_client_buffer 1 # define EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE 0 x3200 # endif # ifndef EGL_ANGLE_device_d3d # define EGL_ANGLE_device_d3d 1 # define EGL_D3D9_DEVICE_ANGLE 0 x33A0 # define EGL_D3D11_DEVICE_ANGLE 0 x33A1 # endif # ifndef EGL_ANGLE_query_surface_pointer # define EGL_ANGLE_query_surface_pointer 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSURFACEPOINTERANGLEPROC) (EGLDisplay dpy, EGLSurface surface, EGLint attribute, void **value)"
  },
  {
    "label": "eglQuerySurfacePointerANGLE()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQuerySurfacePointerANGLE(EGLDisplay dpy, EGLSurface surface, EGLint attribute, void **value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_ANGLE_surface_d3d_texture_2d_share_handle # define EGL_ANGLE_surface_d3d_texture_2d_share_handle 1 # endif # ifndef EGL_ANGLE_sync_control_rate # define EGL_ANGLE_sync_control_rate 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETMSCRATEANGLEPROC) (EGLDisplay dpy, EGLSurface surface, EGLint *numerator, EGLint *denominator)"
  },
  {
    "label": "eglGetMscRateANGLE()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetMscRateANGLE(EGLDisplay dpy, EGLSurface surface, EGLint *numerator, EGLint *denominator)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_ANGLE_window_fixed_size # define EGL_ANGLE_window_fixed_size 1 # define EGL_FIXED_SIZE_ANGLE 0 x3201 # endif # ifndef EGL_ARM_image_format # define EGL_ARM_image_format 1 # define EGL_COLOR_COMPONENT_TYPE_UNSIGNED_INTEGER_ARM 0 x3287 # define EGL_COLOR_COMPONENT_TYPE_INTEGER_ARM 0 x3288 # endif # ifndef EGL_ARM_implicit_external_sync # define EGL_ARM_implicit_external_sync 1 # define EGL_SYNC_PRIOR_COMMANDS_IMPLICIT_EXTERNAL_ARM 0 x328A # endif # ifndef EGL_ARM_pixmap_multisample_discard # define EGL_ARM_pixmap_multisample_discard 1 # define EGL_DISCARD_SAMPLES_ARM 0 x3286 # endif # ifndef EGL_EXT_bind_to_front # define EGL_EXT_bind_to_front 1 # define EGL_FRONT_BUFFER_EXT 0 x3464 # endif # ifndef EGL_EXT_buffer_age # define EGL_EXT_buffer_age 1 # define EGL_BUFFER_AGE_EXT 0 x313D # endif # ifndef EGL_EXT_client_extensions # define EGL_EXT_client_extensions 1 # endif # ifndef EGL_EXT_client_sync # define EGL_EXT_client_sync 1 # define EGL_SYNC_CLIENT_EXT 0 x3364 # define EGL_SYNC_CLIENT_SIGNAL_EXT 0 x3365 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLCLIENTSIGNALSYNCEXTPROC) (EGLDisplay dpy, EGLSync sync, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglClientSignalSyncEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglClientSignalSyncEXT(EGLDisplay dpy, EGLSync sync, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_compositor # define EGL_EXT_compositor 1 # define EGL_PRIMARY_COMPOSITOR_CONTEXT_EXT 0 x3460 # define EGL_EXTERNAL_REF_ID_EXT 0 x3461 # define EGL_COMPOSITOR_DROP_NEWEST_FRAME_EXT 0 x3462 # define EGL_COMPOSITOR_KEEP_NEWEST_FRAME_EXT 0 x3463 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLCOMPOSITORSETCONTEXTLISTEXTPROC) (const EGLint *external_ref_ids, EGLint num_entries)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLCOMPOSITORSETCONTEXTATTRIBUTESEXTPROC) (EGLint external_ref_id, const EGLint *context_attributes, EGLint num_entries)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLCOMPOSITORSETWINDOWLISTEXTPROC) (EGLint external_ref_id, const EGLint *external_win_ids, EGLint num_entries)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLCOMPOSITORSETWINDOWATTRIBUTESEXTPROC) (EGLint external_win_id, const EGLint *window_attributes, EGLint num_entries)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLCOMPOSITORBINDTEXWINDOWEXTPROC) (EGLint external_win_id)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLCOMPOSITORSETSIZEEXTPROC) (EGLint external_win_id, EGLint width, EGLint height)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLCOMPOSITORSWAPPOLICYEXTPROC) (EGLint external_win_id, EGLint policy)"
  },
  {
    "label": "eglCompositorSetContextListEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglCompositorSetContextListEXT(const EGLint *external_ref_ids, EGLint num_entries)"
  },
  {
    "label": "eglCompositorSetContextAttributesEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglCompositorSetContextAttributesEXT(EGLint external_ref_id, const EGLint *context_attributes, EGLint num_entries)"
  },
  {
    "label": "eglCompositorSetWindowListEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglCompositorSetWindowListEXT(EGLint external_ref_id, const EGLint *external_win_ids, EGLint num_entries)"
  },
  {
    "label": "eglCompositorSetWindowAttributesEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglCompositorSetWindowAttributesEXT(EGLint external_win_id, const EGLint *window_attributes, EGLint num_entries)"
  },
  {
    "label": "eglCompositorBindTexWindowEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglCompositorBindTexWindowEXT(EGLint external_win_id)"
  },
  {
    "label": "eglCompositorSetSizeEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglCompositorSetSizeEXT(EGLint external_win_id, EGLint width, EGLint height)"
  },
  {
    "label": "eglCompositorSwapPolicyEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglCompositorSwapPolicyEXT(EGLint external_win_id, EGLint policy)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_config_select_group # define EGL_EXT_config_select_group 1 # define EGL_CONFIG_SELECT_GROUP_EXT 0 x34C0 # endif # ifndef EGL_EXT_create_context_robustness # define EGL_EXT_create_context_robustness 1 # define EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT 0 x30BF # define EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT 0 x3138 # define EGL_NO_RESET_NOTIFICATION_EXT 0 x31BE # define EGL_LOSE_CONTEXT_ON_RESET_EXT 0 x31BF # endif # ifndef EGL_EXT_device_base # define EGL_EXT_device_base 1 typedef void* EGLDeviceEXT ; # define EGL_NO_DEVICE_EXT)",
    "insertText": "EGL_CAST(EGLDeviceEXT,0) #define EGL_BAD_DEVICE_EXT 0x322B #define EGL_DEVICE_EXT 0x322C typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYDEVICEATTRIBEXTPROC) (EGLDeviceEXT device, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "char(EGLAPIENTRYP PFNEGLQUERYDEVICESTRINGEXTPROC) (EGLDeviceEXT device, EGLint name)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYDEVICESEXTPROC) (EGLint max_devices, EGLDeviceEXT *devices, EGLint *num_devices)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYDISPLAYATTRIBEXTPROC) (EGLDisplay dpy, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglQueryDeviceAttribEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryDeviceAttribEXT(EGLDeviceEXT device, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglQueryDeviceStringEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI const char* EGLAPIENTRY)",
    "insertText": "eglQueryDeviceStringEXT(EGLDeviceEXT device, EGLint name)"
  },
  {
    "label": "eglQueryDevicesEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryDevicesEXT(EGLint max_devices, EGLDeviceEXT *devices, EGLint *num_devices)"
  },
  {
    "label": "eglQueryDisplayAttribEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryDisplayAttribEXT(EGLDisplay dpy, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_device_drm # define EGL_EXT_device_drm 1 # define EGL_DRM_DEVICE_FILE_EXT 0 x3233 # define EGL_DRM_MASTER_FD_EXT 0 x333C # endif # ifndef EGL_EXT_device_drm_render_node # define EGL_EXT_device_drm_render_node 1 # define EGL_DRM_RENDER_NODE_FILE_EXT 0 x3377 # endif # ifndef EGL_EXT_device_enumeration # define EGL_EXT_device_enumeration 1 # endif # ifndef EGL_EXT_device_openwf # define EGL_EXT_device_openwf 1 # define EGL_OPENWF_DEVICE_ID_EXT 0 x3237 # define EGL_OPENWF_DEVICE_EXT 0 x333D # endif # ifndef EGL_EXT_device_persistent_id # define EGL_EXT_device_persistent_id 1 # define EGL_DEVICE_UUID_EXT 0 x335C # define EGL_DRIVER_UUID_EXT 0 x335D # define EGL_DRIVER_NAME_EXT 0 x335E typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYDEVICEBINARYEXTPROC) (EGLDeviceEXT device, EGLint name, EGLint max_size, void *value, EGLint *size)"
  },
  {
    "label": "eglQueryDeviceBinaryEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryDeviceBinaryEXT(EGLDeviceEXT device, EGLint name, EGLint max_size, void *value, EGLint *size)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_device_query # define EGL_EXT_device_query 1 # endif # ifndef EGL_EXT_device_query_name # define EGL_EXT_device_query_name 1 # define EGL_RENDERER_EXT 0 x335F # endif # ifndef EGL_EXT_explicit_device # define EGL_EXT_explicit_device 1 # endif # ifndef EGL_EXT_gl_colorspace_bt2020_linear # define EGL_EXT_gl_colorspace_bt2020_linear 1 # define EGL_GL_COLORSPACE_BT2020_LINEAR_EXT 0 x333F # endif # ifndef EGL_EXT_gl_colorspace_bt2020_pq # define EGL_EXT_gl_colorspace_bt2020_pq 1 # define EGL_GL_COLORSPACE_BT2020_PQ_EXT 0 x3340 # endif # ifndef EGL_EXT_gl_colorspace_display_p3 # define EGL_EXT_gl_colorspace_display_p3 1 # define EGL_GL_COLORSPACE_DISPLAY_P3_EXT 0 x3363 # endif # ifndef EGL_EXT_gl_colorspace_display_p3_linear # define EGL_EXT_gl_colorspace_display_p3_linear 1 # define EGL_GL_COLORSPACE_DISPLAY_P3_LINEAR_EXT 0 x3362 # endif # ifndef EGL_EXT_gl_colorspace_display_p3_passthrough # define EGL_EXT_gl_colorspace_display_p3_passthrough 1 # define EGL_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH_EXT 0 x3490 # endif # ifndef EGL_EXT_gl_colorspace_scrgb # define EGL_EXT_gl_colorspace_scrgb 1 # define EGL_GL_COLORSPACE_SCRGB_EXT 0 x3351 # endif # ifndef EGL_EXT_gl_colorspace_scrgb_linear # define EGL_EXT_gl_colorspace_scrgb_linear 1 # define EGL_GL_COLORSPACE_SCRGB_LINEAR_EXT 0 x3350 # endif # ifndef EGL_EXT_image_dma_buf_import # define EGL_EXT_image_dma_buf_import 1 # define EGL_LINUX_DMA_BUF_EXT 0 x3270 # define EGL_LINUX_DRM_FOURCC_EXT 0 x3271 # define EGL_DMA_BUF_PLANE0_FD_EXT 0 x3272 # define EGL_DMA_BUF_PLANE0_OFFSET_EXT 0 x3273 # define EGL_DMA_BUF_PLANE0_PITCH_EXT 0 x3274 # define EGL_DMA_BUF_PLANE1_FD_EXT 0 x3275 # define EGL_DMA_BUF_PLANE1_OFFSET_EXT 0 x3276 # define EGL_DMA_BUF_PLANE1_PITCH_EXT 0 x3277 # define EGL_DMA_BUF_PLANE2_FD_EXT 0 x3278 # define EGL_DMA_BUF_PLANE2_OFFSET_EXT 0 x3279 # define EGL_DMA_BUF_PLANE2_PITCH_EXT 0 x327A # define EGL_YUV_COLOR_SPACE_HINT_EXT 0 x327B # define EGL_SAMPLE_RANGE_HINT_EXT 0 x327C # define EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT 0 x327D # define EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT 0 x327E # define EGL_ITU_REC601_EXT 0 x327F # define EGL_ITU_REC709_EXT 0 x3280 # define EGL_ITU_REC2020_EXT 0 x3281 # define EGL_YUV_FULL_RANGE_EXT 0 x3282 # define EGL_YUV_NARROW_RANGE_EXT 0 x3283 # define EGL_YUV_CHROMA_SITING_0_EXT 0 x3284 # define EGL_YUV_CHROMA_SITING_0_5_EXT 0 x3285 # endif # ifndef EGL_EXT_image_dma_buf_import_modifiers # define EGL_EXT_image_dma_buf_import_modifiers 1 # define EGL_DMA_BUF_PLANE3_FD_EXT 0 x3440 # define EGL_DMA_BUF_PLANE3_OFFSET_EXT 0 x3441 # define EGL_DMA_BUF_PLANE3_PITCH_EXT 0 x3442 # define EGL_DMA_BUF_PLANE0_MODIFIER_LO_EXT 0 x3443 # define EGL_DMA_BUF_PLANE0_MODIFIER_HI_EXT 0 x3444 # define EGL_DMA_BUF_PLANE1_MODIFIER_LO_EXT 0 x3445 # define EGL_DMA_BUF_PLANE1_MODIFIER_HI_EXT 0 x3446 # define EGL_DMA_BUF_PLANE2_MODIFIER_LO_EXT 0 x3447 # define EGL_DMA_BUF_PLANE2_MODIFIER_HI_EXT 0 x3448 # define EGL_DMA_BUF_PLANE3_MODIFIER_LO_EXT 0 x3449 # define EGL_DMA_BUF_PLANE3_MODIFIER_HI_EXT 0 x344A typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYDMABUFFORMATSEXTPROC) (EGLDisplay dpy, EGLint max_formats, EGLint *formats, EGLint *num_formats)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYDMABUFMODIFIERSEXTPROC) (EGLDisplay dpy, EGLint format, EGLint max_modifiers, EGLuint64KHR *modifiers, EGLBoolean *external_only, EGLint *num_modifiers)"
  },
  {
    "label": "eglQueryDmaBufFormatsEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryDmaBufFormatsEXT(EGLDisplay dpy, EGLint max_formats, EGLint *formats, EGLint *num_formats)"
  },
  {
    "label": "eglQueryDmaBufModifiersEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryDmaBufModifiersEXT(EGLDisplay dpy, EGLint format, EGLint max_modifiers, EGLuint64KHR *modifiers, EGLBoolean *external_only, EGLint *num_modifiers)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_image_gl_colorspace # define EGL_EXT_image_gl_colorspace 1 # define EGL_GL_COLORSPACE_DEFAULT_EXT 0 x314D # endif # ifndef EGL_EXT_image_implicit_sync_control # define EGL_EXT_image_implicit_sync_control 1 # define EGL_IMPORT_SYNC_TYPE_EXT 0 x3470 # define EGL_IMPORT_IMPLICIT_SYNC_EXT 0 x3471 # define EGL_IMPORT_EXPLICIT_SYNC_EXT 0 x3472 # endif # ifndef EGL_EXT_multiview_window # define EGL_EXT_multiview_window 1 # define EGL_MULTIVIEW_VIEW_COUNT_EXT 0 x3134 # endif # ifndef EGL_EXT_output_base # define EGL_EXT_output_base 1 typedef void* EGLOutputLayerEXT ; typedef void* EGLOutputPortEXT ; # define EGL_NO_OUTPUT_LAYER_EXT)",
    "insertText": "EGL_CAST(EGLOutputLayerEXT,0) #define EGL_NO_OUTPUT_PORT_EXT EGL_CAST(EGLOutputPortEXT,0) #define EGL_BAD_OUTPUT_LAYER_EXT 0x322D #define EGL_BAD_OUTPUT_PORT_EXT 0x322E #define EGL_SWAP_INTERVAL_EXT 0x322F typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETOUTPUTLAYERSEXTPROC) (EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputLayerEXT *layers, EGLint max_layers, EGLint *num_layers)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETOUTPUTPORTSEXTPROC) (EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputPortEXT *ports, EGLint max_ports, EGLint *num_ports)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLOUTPUTLAYERATTRIBEXTPROC) (EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC) (EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "char(EGLAPIENTRYP PFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC) (EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint name)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLOUTPUTPORTATTRIBEXTPROC) (EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYOUTPUTPORTATTRIBEXTPROC) (EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "char(EGLAPIENTRYP PFNEGLQUERYOUTPUTPORTSTRINGEXTPROC) (EGLDisplay dpy, EGLOutputPortEXT port, EGLint name)"
  },
  {
    "label": "eglGetOutputLayersEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetOutputLayersEXT(EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputLayerEXT *layers, EGLint max_layers, EGLint *num_layers)"
  },
  {
    "label": "eglGetOutputPortsEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetOutputPortsEXT(EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputPortEXT *ports, EGLint max_ports, EGLint *num_ports)"
  },
  {
    "label": "eglOutputLayerAttribEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglOutputLayerAttribEXT(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib value)"
  },
  {
    "label": "eglQueryOutputLayerAttribEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryOutputLayerAttribEXT(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglQueryOutputLayerStringEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI const char* EGLAPIENTRY)",
    "insertText": "eglQueryOutputLayerStringEXT(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint name)"
  },
  {
    "label": "eglOutputPortAttribEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglOutputPortAttribEXT(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib value)"
  },
  {
    "label": "eglQueryOutputPortAttribEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryOutputPortAttribEXT(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglQueryOutputPortStringEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI const char* EGLAPIENTRY)",
    "insertText": "eglQueryOutputPortStringEXT(EGLDisplay dpy, EGLOutputPortEXT port, EGLint name)"
  },
  {
    "label": "EGLDisplay()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_output_drm # define EGL_EXT_output_drm 1 # define EGL_DRM_CRTC_EXT 0 x3234 # define EGL_DRM_PLANE_EXT 0 x3235 # define EGL_DRM_CONNECTOR_EXT 0 x3236 # endif # ifndef EGL_EXT_output_openwf # define EGL_EXT_output_openwf 1 # define EGL_OPENWF_PIPELINE_ID_EXT 0 x3238 # define EGL_OPENWF_PORT_ID_EXT 0 x3239 # endif # ifndef EGL_EXT_pixel_format_float # define EGL_EXT_pixel_format_float 1 # define EGL_COLOR_COMPONENT_TYPE_EXT 0 x3339 # define EGL_COLOR_COMPONENT_TYPE_FIXED_EXT 0 x333A # define EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT 0 x333B # endif # ifndef EGL_EXT_platform_base # define EGL_EXT_platform_base 1 typedef)",
    "insertText": "EGLDisplay(EGLAPIENTRYP PFNEGLGETPLATFORMDISPLAYEXTPROC) (EGLenum platform, void *native_display, const EGLint *attrib_list)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC) (EGLDisplay dpy, EGLConfig config, void *native_window, const EGLint *attrib_list)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC) (EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLint *attrib_list)"
  },
  {
    "label": "eglGetPlatformDisplayEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLDisplay EGLAPIENTRY)",
    "insertText": "eglGetPlatformDisplayEXT(EGLenum platform, void *native_display, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreatePlatformWindowSurfaceEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreatePlatformWindowSurfaceEXT(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreatePlatformPixmapSurfaceEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreatePlatformPixmapSurfaceEXT(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_platform_device # define EGL_EXT_platform_device 1 # define EGL_PLATFORM_DEVICE_EXT 0 x313F # endif # ifndef EGL_EXT_platform_wayland # define EGL_EXT_platform_wayland 1 # define EGL_PLATFORM_WAYLAND_EXT 0 x31D8 # endif # ifndef EGL_EXT_platform_x11 # define EGL_EXT_platform_x11 1 # define EGL_PLATFORM_X11_EXT 0 x31D5 # define EGL_PLATFORM_X11_SCREEN_EXT 0 x31D6 # endif # ifndef EGL_EXT_platform_xcb # define EGL_EXT_platform_xcb 1 # define EGL_PLATFORM_XCB_EXT 0 x31DC # define EGL_PLATFORM_XCB_SCREEN_EXT 0 x31DE # endif # ifndef EGL_EXT_present_opaque # define EGL_EXT_present_opaque 1 # define EGL_PRESENT_OPAQUE_EXT 0 x31DF # endif # ifndef EGL_EXT_protected_content # define EGL_EXT_protected_content 1 # define EGL_PROTECTED_CONTENT_EXT 0 x32C0 # endif # ifndef EGL_EXT_protected_surface # define EGL_EXT_protected_surface 1 # endif # ifndef EGL_EXT_stream_consumer_egloutput # define EGL_EXT_stream_consumer_egloutput 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMCONSUMEROUTPUTEXTPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLOutputLayerEXT layer)"
  },
  {
    "label": "eglStreamConsumerOutputEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamConsumerOutputEXT(EGLDisplay dpy, EGLStreamKHR stream, EGLOutputLayerEXT layer)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_surface_CTA861_3_metadata # define EGL_EXT_surface_CTA861_3_metadata 1 # define EGL_CTA861_3_MAX_CONTENT_LIGHT_LEVEL_EXT 0 x3360 # define EGL_CTA861_3_MAX_FRAME_AVERAGE_LEVEL_EXT 0 x3361 # endif # ifndef EGL_EXT_surface_SMPTE2086_metadata # define EGL_EXT_surface_SMPTE2086_metadata 1 # define EGL_SMPTE2086_DISPLAY_PRIMARY_RX_EXT 0 x3341 # define EGL_SMPTE2086_DISPLAY_PRIMARY_RY_EXT 0 x3342 # define EGL_SMPTE2086_DISPLAY_PRIMARY_GX_EXT 0 x3343 # define EGL_SMPTE2086_DISPLAY_PRIMARY_GY_EXT 0 x3344 # define EGL_SMPTE2086_DISPLAY_PRIMARY_BX_EXT 0 x3345 # define EGL_SMPTE2086_DISPLAY_PRIMARY_BY_EXT 0 x3346 # define EGL_SMPTE2086_WHITE_POINT_X_EXT 0 x3347 # define EGL_SMPTE2086_WHITE_POINT_Y_EXT 0 x3348 # define EGL_SMPTE2086_MAX_LUMINANCE_EXT 0 x3349 # define EGL_SMPTE2086_MIN_LUMINANCE_EXT 0 x334A # define EGL_METADATA_SCALING_EXT 5 0 0 0 0 # endif # ifndef EGL_EXT_surface_compression # define EGL_EXT_surface_compression 1 # define EGL_SURFACE_COMPRESSION_EXT 0 x34B0 # define EGL_SURFACE_COMPRESSION_PLANE1_EXT 0 x328E # define EGL_SURFACE_COMPRESSION_PLANE2_EXT 0 x328F # define EGL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT 0 x34B1 # define EGL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT 0 x34B2 # define EGL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT 0 x34B4 # define EGL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT 0 x34B5 # define EGL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT 0 x34B6 # define EGL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT 0 x34B7 # define EGL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT 0 x34B8 # define EGL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT 0 x34B9 # define EGL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT 0 x34BA # define EGL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT 0 x34BB # define EGL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT 0 x34BC # define EGL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT 0 x34BD # define EGL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT 0 x34BE # define EGL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT 0 x34BF typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSUPPORTEDCOMPRESSIONRATESEXTPROC) (EGLDisplay dpy, EGLConfig config, const EGLAttrib *attrib_list, EGLint *rates, EGLint rate_size, EGLint *num_rates)"
  },
  {
    "label": "eglQuerySupportedCompressionRatesEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQuerySupportedCompressionRatesEXT(EGLDisplay dpy, EGLConfig config, const EGLAttrib *attrib_list, EGLint *rates, EGLint rate_size, EGLint *num_rates)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_swap_buffers_with_damage # define EGL_EXT_swap_buffers_with_damage 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC) (EGLDisplay dpy, EGLSurface surface, const EGLint *rects, EGLint n_rects)"
  },
  {
    "label": "eglSwapBuffersWithDamageEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSwapBuffersWithDamageEXT(EGLDisplay dpy, EGLSurface surface, const EGLint *rects, EGLint n_rects)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_sync_reuse # define EGL_EXT_sync_reuse 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLUNSIGNALSYNCEXTPROC) (EGLDisplay dpy, EGLSync sync, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglUnsignalSyncEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglUnsignalSyncEXT(EGLDisplay dpy, EGLSync sync, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_yuv_surface # define EGL_EXT_yuv_surface 1 # define EGL_YUV_ORDER_EXT 0 x3301 # define EGL_YUV_NUMBER_OF_PLANES_EXT 0 x3311 # define EGL_YUV_SUBSAMPLE_EXT 0 x3312 # define EGL_YUV_DEPTH_RANGE_EXT 0 x3317 # define EGL_YUV_CSC_STANDARD_EXT 0 x330A # define EGL_YUV_PLANE_BPP_EXT 0 x331A # define EGL_YUV_BUFFER_EXT 0 x3300 # define EGL_YUV_ORDER_YUV_EXT 0 x3302 # define EGL_YUV_ORDER_YVU_EXT 0 x3303 # define EGL_YUV_ORDER_YUYV_EXT 0 x3304 # define EGL_YUV_ORDER_UYVY_EXT 0 x3305 # define EGL_YUV_ORDER_YVYU_EXT 0 x3306 # define EGL_YUV_ORDER_VYUY_EXT 0 x3307 # define EGL_YUV_ORDER_AYUV_EXT 0 x3308 # define EGL_YUV_SUBSAMPLE_4_2_0_EXT 0 x3313 # define EGL_YUV_SUBSAMPLE_4_2_2_EXT 0 x3314 # define EGL_YUV_SUBSAMPLE_4_4_4_EXT 0 x3315 # define EGL_YUV_DEPTH_RANGE_LIMITED_EXT 0 x3318 # define EGL_YUV_DEPTH_RANGE_FULL_EXT 0 x3319 # define EGL_YUV_CSC_STANDARD_601_EXT 0 x330B # define EGL_YUV_CSC_STANDARD_709_EXT 0 x330C # define EGL_YUV_CSC_STANDARD_2020_EXT 0 x330D # define EGL_YUV_PLANE_BPP_0_EXT 0 x331B # define EGL_YUV_PLANE_BPP_8_EXT 0 x331C # define EGL_YUV_PLANE_BPP_10_EXT 0 x331D # endif # ifndef EGL_HI_clientpixmap # define EGL_HI_clientpixmap 1 struct EGLClientPixmapHI { void* pData ; EGLint iWidth ; EGLint iHeight ; EGLint iStride ; } ; # define EGL_CLIENT_PIXMAP_POINTER_HI 0 x8F74 typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLCREATEPIXMAPSURFACEHIPROC) (EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI *pixmap)"
  },
  {
    "label": "eglCreatePixmapSurfaceHI()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreatePixmapSurfaceHI(EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI *pixmap)"
  },
  {
    "label": "EGLImageKHR()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_HI_colorformats # define EGL_HI_colorformats 1 # define EGL_COLOR_FORMAT_HI 0 x8F70 # define EGL_COLOR_RGB_HI 0 x8F71 # define EGL_COLOR_RGBA_HI 0 x8F72 # define EGL_COLOR_ARGB_HI 0 x8F73 # endif # ifndef EGL_IMG_context_priority # define EGL_IMG_context_priority 1 # define EGL_CONTEXT_PRIORITY_LEVEL_IMG 0 x3100 # define EGL_CONTEXT_PRIORITY_HIGH_IMG 0 x3101 # define EGL_CONTEXT_PRIORITY_MEDIUM_IMG 0 x3102 # define EGL_CONTEXT_PRIORITY_LOW_IMG 0 x3103 # endif # ifndef EGL_IMG_image_plane_attribs # define EGL_IMG_image_plane_attribs 1 # define EGL_NATIVE_BUFFER_MULTIPLANE_SEPARATE_IMG 0 x3105 # define EGL_NATIVE_BUFFER_PLANE_OFFSET_IMG 0 x3106 # endif # ifndef EGL_MESA_drm_image # define EGL_MESA_drm_image 1 # define EGL_DRM_BUFFER_FORMAT_MESA 0 x31D0 # define EGL_DRM_BUFFER_USE_MESA 0 x31D1 # define EGL_DRM_BUFFER_FORMAT_ARGB32_MESA 0 x31D2 # define EGL_DRM_BUFFER_MESA 0 x31D3 # define EGL_DRM_BUFFER_STRIDE_MESA 0 x31D4 # define EGL_DRM_BUFFER_USE_SCANOUT_MESA 0 x00000001 # define EGL_DRM_BUFFER_USE_SHARE_MESA 0 x00000002 # define EGL_DRM_BUFFER_USE_CURSOR_MESA 0 x00000004 typedef)",
    "insertText": "EGLImageKHR(EGLAPIENTRYP PFNEGLCREATEDRMIMAGEMESAPROC) (EGLDisplay dpy, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLEXPORTDRMIMAGEMESAPROC) (EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride)"
  },
  {
    "label": "eglCreateDRMImageMESA()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLImageKHR EGLAPIENTRY)",
    "insertText": "eglCreateDRMImageMESA(EGLDisplay dpy, const EGLint *attrib_list)"
  },
  {
    "label": "eglExportDRMImageMESA()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglExportDRMImageMESA(EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_MESA_image_dma_buf_export # define EGL_MESA_image_dma_buf_export 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLEXPORTDMABUFIMAGEQUERYMESAPROC) (EGLDisplay dpy, EGLImageKHR image, int *fourcc, int *num_planes, EGLuint64KHR *modifiers)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLEXPORTDMABUFIMAGEMESAPROC) (EGLDisplay dpy, EGLImageKHR image, int *fds, EGLint *strides, EGLint *offsets)"
  },
  {
    "label": "eglExportDMABUFImageQueryMESA()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglExportDMABUFImageQueryMESA(EGLDisplay dpy, EGLImageKHR image, int *fourcc, int *num_planes, EGLuint64KHR *modifiers)"
  },
  {
    "label": "eglExportDMABUFImageMESA()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglExportDMABUFImageMESA(EGLDisplay dpy, EGLImageKHR image, int *fds, EGLint *strides, EGLint *offsets)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_MESA_platform_gbm # define EGL_MESA_platform_gbm 1 # define EGL_PLATFORM_GBM_MESA 0 x31D7 # endif # ifndef EGL_MESA_platform_surfaceless # define EGL_MESA_platform_surfaceless 1 # define EGL_PLATFORM_SURFACELESS_MESA 0 x31DD # endif # ifndef EGL_MESA_query_driver # define EGL_MESA_query_driver 1 typedef)",
    "insertText": "char(EGLAPIENTRYP PFNEGLGETDISPLAYDRIVERCONFIGPROC) (EGLDisplay dpy)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "char(EGLAPIENTRYP PFNEGLGETDISPLAYDRIVERNAMEPROC) (EGLDisplay dpy)"
  },
  {
    "label": "eglGetDisplayDriverConfig()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI char* EGLAPIENTRY)",
    "insertText": "eglGetDisplayDriverConfig(EGLDisplay dpy)"
  },
  {
    "label": "eglGetDisplayDriverName()",
    "kind": "Method",
    "detail": "Function (EGLAPI const char* EGLAPIENTRY)",
    "insertText": "eglGetDisplayDriverName(EGLDisplay dpy)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_NOK_swap_region # define EGL_NOK_swap_region 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSWAPBUFFERSREGIONNOKPROC) (EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects)"
  },
  {
    "label": "eglSwapBuffersRegionNOK()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSwapBuffersRegionNOK(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_NOK_swap_region2 # define EGL_NOK_swap_region2 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSWAPBUFFERSREGION2NOKPROC) (EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects)"
  },
  {
    "label": "eglSwapBuffersRegion2NOK()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSwapBuffersRegion2NOK(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_NOK_texture_from_pixmap # define EGL_NOK_texture_from_pixmap 1 # define EGL_Y_INVERTED_NOK 0 x307F # endif # ifndef EGL_NV_3dvision_surface # define EGL_NV_3dvision_surface 1 # define EGL_AUTO_STEREO_NV 0 x3136 # endif # ifndef EGL_NV_context_priority_realtime # define EGL_NV_context_priority_realtime 1 # define EGL_CONTEXT_PRIORITY_REALTIME_NV 0 x3357 # endif # ifndef EGL_NV_coverage_sample # define EGL_NV_coverage_sample 1 # define EGL_COVERAGE_BUFFERS_NV 0 x30E0 # define EGL_COVERAGE_SAMPLES_NV 0 x30E1 # endif # ifndef EGL_NV_coverage_sample_resolve # define EGL_NV_coverage_sample_resolve 1 # define EGL_COVERAGE_SAMPLE_RESOLVE_NV 0 x3131 # define EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV 0 x3132 # define EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV 0 x3133 # endif # ifndef EGL_NV_cuda_event # define EGL_NV_cuda_event 1 # define EGL_CUDA_EVENT_HANDLE_NV 0 x323B # define EGL_SYNC_CUDA_EVENT_NV 0 x323C # define EGL_SYNC_CUDA_EVENT_COMPLETE_NV 0 x323D # endif # ifndef EGL_NV_depth_nonlinear # define EGL_NV_depth_nonlinear 1 # define EGL_DEPTH_ENCODING_NV 0 x30E2 # define EGL_DEPTH_ENCODING_NONE_NV 0 # define EGL_DEPTH_ENCODING_NONLINEAR_NV 0 x30E3 # endif # ifndef EGL_NV_device_cuda # define EGL_NV_device_cuda 1 # define EGL_CUDA_DEVICE_NV 0 x323A # endif # ifndef EGL_NV_native_query # define EGL_NV_native_query 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYNATIVEDISPLAYNVPROC) (EGLDisplay dpy, EGLNativeDisplayType *display_id)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYNATIVEWINDOWNVPROC) (EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType *window)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYNATIVEPIXMAPNVPROC) (EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType *pixmap)"
  },
  {
    "label": "eglQueryNativeDisplayNV()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryNativeDisplayNV(EGLDisplay dpy, EGLNativeDisplayType *display_id)"
  },
  {
    "label": "eglQueryNativeWindowNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryNativeWindowNV(EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType *window)"
  },
  {
    "label": "eglQueryNativePixmapNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryNativePixmapNV(EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType *pixmap)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_NV_post_convert_rounding # define EGL_NV_post_convert_rounding 1 # endif # ifndef EGL_NV_post_sub_buffer # define EGL_NV_post_sub_buffer 1 # define EGL_POST_SUB_BUFFER_SUPPORTED_NV 0 x30BE typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLPOSTSUBBUFFERNVPROC) (EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)"
  },
  {
    "label": "eglPostSubBufferNV()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglPostSubBufferNV(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_NV_quadruple_buffer # define EGL_NV_quadruple_buffer 1 # define EGL_QUADRUPLE_BUFFER_NV 0 x3231 # endif # ifndef EGL_NV_robustness_video_memory_purge # define EGL_NV_robustness_video_memory_purge 1 # define EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV 0 x334C # endif # ifndef EGL_NV_stream_consumer_eglimage # define EGL_NV_stream_consumer_eglimage 1 # define EGL_STREAM_CONSUMER_IMAGE_NV 0 x3373 # define EGL_STREAM_IMAGE_ADD_NV 0 x3374 # define EGL_STREAM_IMAGE_REMOVE_NV 0 x3375 # define EGL_STREAM_IMAGE_AVAILABLE_NV 0 x3376 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMIMAGECONSUMERCONNECTNVPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLint num_modifiers, const EGLuint64KHR *modifiers, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLQUERYSTREAMCONSUMEREVENTNVPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLTime timeout, EGLenum *event, EGLAttrib *aux)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMACQUIREIMAGENVPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLImage *pImage, EGLSync sync)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMRELEASEIMAGENVPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLImage image, EGLSync sync)"
  },
  {
    "label": "eglStreamImageConsumerConnectNV()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamImageConsumerConnectNV(EGLDisplay dpy, EGLStreamKHR stream, EGLint num_modifiers, const EGLuint64KHR *modifiers, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglQueryStreamConsumerEventNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglQueryStreamConsumerEventNV(EGLDisplay dpy, EGLStreamKHR stream, EGLTime timeout, EGLenum *event, EGLAttrib *aux)"
  },
  {
    "label": "eglStreamAcquireImageNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamAcquireImageNV(EGLDisplay dpy, EGLStreamKHR stream, EGLImage *pImage, EGLSync sync)"
  },
  {
    "label": "eglStreamReleaseImageNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamReleaseImageNV(EGLDisplay dpy, EGLStreamKHR stream, EGLImage image, EGLSync sync)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_NV_stream_consumer_gltexture_yuv # define EGL_NV_stream_consumer_gltexture_yuv 1 # define EGL_YUV_PLANE0_TEXTURE_UNIT_NV 0 x332C # define EGL_YUV_PLANE1_TEXTURE_UNIT_NV 0 x332D # define EGL_YUV_PLANE2_TEXTURE_UNIT_NV 0 x332E typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALATTRIBSNVPROC) (EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglStreamConsumerGLTextureExternalAttribsNV()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamConsumerGLTextureExternalAttribsNV(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_NV_stream_cross_display # define EGL_NV_stream_cross_display 1 # define EGL_STREAM_CROSS_DISPLAY_NV 0 x334E # endif # ifndef EGL_NV_stream_cross_object # define EGL_NV_stream_cross_object 1 # define EGL_STREAM_CROSS_OBJECT_NV 0 x334D # endif # ifndef EGL_NV_stream_cross_partition # define EGL_NV_stream_cross_partition 1 # define EGL_STREAM_CROSS_PARTITION_NV 0 x323F # endif # ifndef EGL_NV_stream_cross_process # define EGL_NV_stream_cross_process 1 # define EGL_STREAM_CROSS_PROCESS_NV 0 x3245 # endif # ifndef EGL_NV_stream_cross_system # define EGL_NV_stream_cross_system 1 # define EGL_STREAM_CROSS_SYSTEM_NV 0 x334F # endif # ifndef EGL_NV_stream_dma # define EGL_NV_stream_dma 1 # define EGL_STREAM_DMA_NV 0 x3371 # define EGL_STREAM_DMA_SERVER_NV 0 x3372 # endif # ifndef EGL_NV_stream_fifo_next # define EGL_NV_stream_fifo_next 1 # define EGL_PENDING_FRAME_NV 0 x3329 # define EGL_STREAM_TIME_PENDING_NV 0 x332A # endif # ifndef EGL_NV_stream_fifo_synchronous # define EGL_NV_stream_fifo_synchronous 1 # define EGL_STREAM_FIFO_SYNCHRONOUS_NV 0 x3336 # endif # ifndef EGL_NV_stream_flush # define EGL_NV_stream_flush 1 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMFLUSHNVPROC) (EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglStreamFlushNV()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamFlushNV(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_NV_stream_frame_limits # define EGL_NV_stream_frame_limits 1 # define EGL_PRODUCER_MAX_FRAME_HINT_NV 0 x3337 # define EGL_CONSUMER_MAX_FRAME_HINT_NV 0 x3338 # endif # ifndef EGL_NV_stream_metadata # define EGL_NV_stream_metadata 1 # define EGL_MAX_STREAM_METADATA_BLOCKS_NV 0 x3250 # define EGL_MAX_STREAM_METADATA_BLOCK_SIZE_NV 0 x3251 # define EGL_MAX_STREAM_METADATA_TOTAL_SIZE_NV 0 x3252 # define EGL_PRODUCER_METADATA_NV 0 x3253 # define EGL_CONSUMER_METADATA_NV 0 x3254 # define EGL_PENDING_METADATA_NV 0 x3328 # define EGL_METADATA0_SIZE_NV 0 x3255 # define EGL_METADATA1_SIZE_NV 0 x3256 # define EGL_METADATA2_SIZE_NV 0 x3257 # define EGL_METADATA3_SIZE_NV 0 x3258 # define EGL_METADATA0_TYPE_NV 0 x3259 # define EGL_METADATA1_TYPE_NV 0 x325A # define EGL_METADATA2_TYPE_NV 0 x325B # define EGL_METADATA3_TYPE_NV 0 x325C typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYDISPLAYATTRIBNVPROC) (EGLDisplay dpy, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSETSTREAMMETADATANVPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLint n, EGLint offset, EGLint size, const void *data)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSTREAMMETADATANVPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum name, EGLint n, EGLint offset, EGLint size, void *data)"
  },
  {
    "label": "eglQueryDisplayAttribNV()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryDisplayAttribNV(EGLDisplay dpy, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglSetStreamMetadataNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSetStreamMetadataNV(EGLDisplay dpy, EGLStreamKHR stream, EGLint n, EGLint offset, EGLint size, const void *data)"
  },
  {
    "label": "eglQueryStreamMetadataNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryStreamMetadataNV(EGLDisplay dpy, EGLStreamKHR stream, EGLenum name, EGLint n, EGLint offset, EGLint size, void *data)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_NV_stream_origin # define EGL_NV_stream_origin 1 # define EGL_STREAM_FRAME_ORIGIN_X_NV 0 x3366 # define EGL_STREAM_FRAME_ORIGIN_Y_NV 0 x3367 # define EGL_STREAM_FRAME_MAJOR_AXIS_NV 0 x3368 # define EGL_CONSUMER_AUTO_ORIENTATION_NV 0 x3369 # define EGL_PRODUCER_AUTO_ORIENTATION_NV 0 x336A # define EGL_LEFT_NV 0 x336B # define EGL_RIGHT_NV 0 x336C # define EGL_TOP_NV 0 x336D # define EGL_BOTTOM_NV 0 x336E # define EGL_X_AXIS_NV 0 x336F # define EGL_Y_AXIS_NV 0 x3370 # endif # ifndef EGL_NV_stream_remote # define EGL_NV_stream_remote 1 # define EGL_STREAM_STATE_INITIALIZING_NV 0 x3240 # define EGL_STREAM_TYPE_NV 0 x3241 # define EGL_STREAM_PROTOCOL_NV 0 x3242 # define EGL_STREAM_ENDPOINT_NV 0 x3243 # define EGL_STREAM_LOCAL_NV 0 x3244 # define EGL_STREAM_PRODUCER_NV 0 x3247 # define EGL_STREAM_CONSUMER_NV 0 x3248 # define EGL_STREAM_PROTOCOL_FD_NV 0 x3246 # endif # ifndef EGL_NV_stream_reset # define EGL_NV_stream_reset 1 # define EGL_SUPPORT_RESET_NV 0 x3334 # define EGL_SUPPORT_REUSE_NV 0 x3335 typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLRESETSTREAMNVPROC) (EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglResetStreamNV()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglResetStreamNV(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "EGLSyncKHR()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_NV_stream_socket # define EGL_NV_stream_socket 1 # define EGL_STREAM_PROTOCOL_SOCKET_NV 0 x324B # define EGL_SOCKET_HANDLE_NV 0 x324C # define EGL_SOCKET_TYPE_NV 0 x324D # endif # ifndef EGL_NV_stream_socket_inet # define EGL_NV_stream_socket_inet 1 # define EGL_SOCKET_TYPE_INET_NV 0 x324F # endif # ifndef EGL_NV_stream_socket_unix # define EGL_NV_stream_socket_unix 1 # define EGL_SOCKET_TYPE_UNIX_NV 0 x324E # endif # ifndef EGL_NV_stream_sync # define EGL_NV_stream_sync 1 # define EGL_SYNC_NEW_FRAME_NV 0 x321F typedef)",
    "insertText": "EGLSyncKHR(EGLAPIENTRYP PFNEGLCREATESTREAMSYNCNVPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum type, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreateStreamSyncNV()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLSyncKHR EGLAPIENTRY)",
    "insertText": "eglCreateStreamSyncNV(EGLDisplay dpy, EGLStreamKHR stream, EGLenum type, const EGLint *attrib_list)"
  },
  {
    "label": "EGL_CAST()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_NV_sync # define EGL_NV_sync 1 typedef void* EGLSyncNV ; typedef khronos_utime_nanoseconds_t EGLTimeNV ; # ifdef KHRONOS_SUPPORT_INT64 # define EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV 0 x30E6 # define EGL_SYNC_STATUS_NV 0 x30E7 # define EGL_SIGNALED_NV 0 x30E8 # define EGL_UNSIGNALED_NV 0 x30E9 # define EGL_SYNC_FLUSH_COMMANDS_BIT_NV 0 x0001 # define EGL_FOREVER_NV 0 xFFFFFFFFFFFFFFFFull # define EGL_ALREADY_SIGNALED_NV 0 x30EA # define EGL_TIMEOUT_EXPIRED_NV 0 x30EB # define EGL_CONDITION_SATISFIED_NV 0 x30EC # define EGL_SYNC_TYPE_NV 0 x30ED # define EGL_SYNC_CONDITION_NV 0 x30EE # define EGL_SYNC_FENCE_NV 0 x30EF # define EGL_NO_SYNC_NV)",
    "insertText": "EGL_CAST(EGLSyncNV,0) typedef EGLSyncNV (EGLAPIENTRYP PFNEGLCREATEFENCESYNCNVPROC) (EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLDESTROYSYNCNVPROC) (EGLSyncNV sync)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLFENCENVPROC) (EGLSyncNV sync)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLCLIENTWAITSYNCNVPROC) (EGLSyncNV sync, EGLint flags, EGLTimeNV timeout)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSIGNALSYNCNVPROC) (EGLSyncNV sync, EGLenum mode)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETSYNCATTRIBNVPROC) (EGLSyncNV sync, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglCreateFenceSyncNV()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLSyncNV EGLAPIENTRY)",
    "insertText": "eglCreateFenceSyncNV(EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroySyncNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroySyncNV(EGLSyncNV sync)"
  },
  {
    "label": "eglFenceNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglFenceNV(EGLSyncNV sync)"
  },
  {
    "label": "eglClientWaitSyncNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglClientWaitSyncNV(EGLSyncNV sync, EGLint flags, EGLTimeNV timeout)"
  },
  {
    "label": "eglSignalSyncNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSignalSyncNV(EGLSyncNV sync, EGLenum mode)"
  },
  {
    "label": "eglGetSyncAttribNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetSyncAttribNV(EGLSyncNV sync, EGLint attribute, EGLint *value)"
  },
  {
    "label": "EGLuint64NV()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifndef EGL_NV_system_time # define EGL_NV_system_time 1 typedef khronos_utime_nanoseconds_t EGLuint64NV ; # ifdef KHRONOS_SUPPORT_INT64 typedef)",
    "insertText": "EGLuint64NV(EGLAPIENTRYP PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC) (void)"
  },
  {
    "label": "EGLuint64NV()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLuint64NV(EGLAPIENTRYP PFNEGLGETSYSTEMTIMENVPROC) (void)"
  },
  {
    "label": "eglGetSystemTimeFrequencyNV()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLuint64NV EGLAPIENTRY)",
    "insertText": "eglGetSystemTimeFrequencyNV(void)"
  },
  {
    "label": "eglGetSystemTimeNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLuint64NV EGLAPIENTRY)",
    "insertText": "eglGetSystemTimeNV(void)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifndef EGL_NV_triple_buffer # define EGL_NV_triple_buffer 1 # define EGL_TRIPLE_BUFFER_NV 0 x3230 # endif # ifndef EGL_TIZEN_image_native_buffer # define EGL_TIZEN_image_native_buffer 1 # define EGL_NATIVE_BUFFER_TIZEN 0 x32A0 # endif # ifndef EGL_TIZEN_image_native_surface # define EGL_TIZEN_image_native_surface 1 # define EGL_NATIVE_SURFACE_TIZEN 0 x32A1 # endif # ifndef EGL_WL_bind_wayland_display # define EGL_WL_bind_wayland_display 1 # define PFNEGLBINDWAYLANDDISPLAYWL PFNEGLBINDWAYLANDDISPLAYWLPROC # define PFNEGLUNBINDWAYLANDDISPLAYWL PFNEGLUNBINDWAYLANDDISPLAYWLPROC # define PFNEGLQUERYWAYLANDBUFFERWL PFNEGLQUERYWAYLANDBUFFERWLPROC struct wl_display ; struct wl_resource ; # define EGL_WAYLAND_BUFFER_WL 0 x31D5 # define EGL_WAYLAND_PLANE_WL 0 x31D6 # define EGL_TEXTURE_Y_U_V_WL 0 x31D7 # define EGL_TEXTURE_Y_UV_WL 0 x31D8 # define EGL_TEXTURE_Y_XUXV_WL 0 x31D9 # define EGL_TEXTURE_EXTERNAL_WL 0 x31DA # define EGL_WAYLAND_Y_INVERTED_WL 0 x31DB typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLBINDWAYLANDDISPLAYWLPROC) (EGLDisplay dpy, struct wl_display *display)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLUNBINDWAYLANDDISPLAYWLPROC) (EGLDisplay dpy, struct wl_display *display)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYWAYLANDBUFFERWLPROC) (EGLDisplay dpy, struct wl_resource *buffer, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglBindWaylandDisplayWL()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglBindWaylandDisplayWL(EGLDisplay dpy, struct wl_display *display)"
  },
  {
    "label": "eglUnbindWaylandDisplayWL()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglUnbindWaylandDisplayWL(EGLDisplay dpy, struct wl_display *display)"
  },
  {
    "label": "eglQueryWaylandBufferWL()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryWaylandBufferWL(EGLDisplay dpy, struct wl_resource *buffer, EGLint attribute, EGLint *value)"
  },
  {
    "label": "wl_buffer()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_WL_create_wayland_buffer_from_image # define EGL_WL_create_wayland_buffer_from_image 1 # define PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWL PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC struct wl_buffer ; typedef struct)",
    "insertText": "wl_buffer(EGLAPIENTRYP PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC) (EGLDisplay dpy, EGLImageKHR image)"
  },
  {
    "label": "eglCreateWaylandBufferFromImageWL()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI struct wl_buffer* EGLAPIENTRY)",
    "insertText": "eglCreateWaylandBufferFromImageWL(EGLDisplay dpy, EGLImageKHR image)"
  }
]