[
  {
    "label": "types",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "types"
  },
  {
    "label": "wl_display",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_display"
  },
  {
    "label": "wl_egl_pixmap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_egl_pixmap"
  },
  {
    "label": "wl_egl_window",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_egl_window"
  },
  {
    "label": "gbm_device",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gbm_device"
  },
  {
    "label": "gbm_bo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gbm_bo"
  },
  {
    "label": "ANativeWindow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ANativeWindow"
  },
  {
    "label": "egl_native_pixmap_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "egl_native_pixmap_t"
  },
  {
    "label": "egl_native_pixmap_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "egl_native_pixmap_t"
  },
  {
    "label": "ANativeWindow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ANativeWindow"
  },
  {
    "label": "AHardwareBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AHardwareBuffer"
  },
  {
    "label": "AHardwareBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AHardwareBuffer"
  },
  {
    "label": "AHardwareBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AHardwareBuffer"
  },
  {
    "label": "EGLClientPixmapHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EGLClientPixmapHI"
  },
  {
    "label": "EGLClientPixmapHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EGLClientPixmapHI"
  },
  {
    "label": "EGLClientPixmapHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EGLClientPixmapHI"
  },
  {
    "label": "wl_display",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_display"
  },
  {
    "label": "wl_resource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_resource"
  },
  {
    "label": "wl_display",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_display"
  },
  {
    "label": "wl_display",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_display"
  },
  {
    "label": "wl_resource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_resource"
  },
  {
    "label": "wl_display",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_display"
  },
  {
    "label": "wl_display",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_display"
  },
  {
    "label": "wl_resource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_resource"
  },
  {
    "label": "wl_buffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_buffer"
  },
  {
    "label": "wl_buffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_buffer"
  },
  {
    "label": "wl_buffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_buffer"
  },
  {
    "label": "eglFunction()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglFunction(arguments)"
  },
  {
    "label": "eglChooseConfig()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglChooseConfig(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)"
  },
  {
    "label": "eglCopyBuffers()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)"
  },
  {
    "label": "eglCreateContext()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreatePbufferSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreatePixmapSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreateWindowSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroyContext()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglDestroyContext(EGLDisplay dpy, EGLContext ctx)"
  },
  {
    "label": "eglDestroySurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglDestroySurface(EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "eglGetConfigAttrib()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglGetConfigs()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetConfigs(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)"
  },
  {
    "label": "eglGetCurrentDisplay()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetCurrentDisplay(void)"
  },
  {
    "label": "eglGetCurrentSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetCurrentSurface(EGLint readdraw)"
  },
  {
    "label": "eglGetDisplay()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetDisplay(EGLNativeDisplayType display_id)"
  },
  {
    "label": "eglGetError()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetError(void)"
  },
  {
    "label": "eglGetProcAddress()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetProcAddress(const char *procname)"
  },
  {
    "label": "eglInitialize()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglInitialize(EGLDisplay dpy, EGLint *major, EGLint *minor)"
  },
  {
    "label": "eglMakeCurrent()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)"
  },
  {
    "label": "eglQueryContext()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglQueryString()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryString(EGLDisplay dpy, EGLint name)"
  },
  {
    "label": "eglQuerySurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglSwapBuffers()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSwapBuffers(EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "eglTerminate()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglTerminate(EGLDisplay dpy)"
  },
  {
    "label": "eglWaitGL()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglWaitGL(void)"
  },
  {
    "label": "eglWaitNative()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglWaitNative(EGLint engine)"
  },
  {
    "label": "eglBindTexImage()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)"
  },
  {
    "label": "eglReleaseTexImage()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)"
  },
  {
    "label": "eglSurfaceAttrib()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)"
  },
  {
    "label": "eglSwapInterval()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSwapInterval(EGLDisplay dpy, EGLint interval)"
  },
  {
    "label": "eglBindAPI()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglBindAPI(EGLenum api)"
  },
  {
    "label": "eglQueryAPI()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryAPI(void)"
  },
  {
    "label": "eglCreatePbufferFromClientBuffer()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)"
  },
  {
    "label": "eglReleaseThread()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglReleaseThread(void)"
  },
  {
    "label": "eglWaitClient()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglWaitClient(void)"
  },
  {
    "label": "eglGetCurrentContext()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetCurrentContext(void)"
  },
  {
    "label": "eglCreateSync()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateSync(EGLDisplay dpy, EGLenum type, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglDestroySync()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglDestroySync(EGLDisplay dpy, EGLSync sync)"
  },
  {
    "label": "eglClientWaitSync()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglClientWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout)"
  },
  {
    "label": "eglGetSyncAttrib()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetSyncAttrib(EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglCreateImage()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateImage(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglDestroyImage()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglDestroyImage(EGLDisplay dpy, EGLImage image)"
  },
  {
    "label": "eglGetPlatformDisplay()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetPlatformDisplay(EGLenum platform, void *native_display, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglCreatePlatformWindowSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreatePlatformWindowSurface(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglCreatePlatformPixmapSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreatePlatformPixmapSurface(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglWaitSync()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags)"
  },
  {
    "label": "eglCreateSync64KHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateSync64KHR(EGLDisplay dpy, EGLenum type, const EGLAttribKHR *attrib_list)"
  },
  {
    "label": "eglDebugMessageControlKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglDebugMessageControlKHR(EGLDEBUGPROCKHR callback, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglQueryDebugKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryDebugKHR(EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglLabelObjectKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglLabelObjectKHR(EGLDisplay display, EGLenum objectType, EGLObjectKHR object, EGLLabelKHR label)"
  },
  {
    "label": "eglQueryDisplayAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryDisplayAttribKHR(EGLDisplay dpy, EGLint name, EGLAttrib *value)"
  },
  {
    "label": "eglCreateSyncKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroySyncKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglDestroySyncKHR(EGLDisplay dpy, EGLSyncKHR sync)"
  },
  {
    "label": "eglClientWaitSyncKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglClientWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout)"
  },
  {
    "label": "eglGetSyncAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglCreateImageKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroyImageKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image)"
  },
  {
    "label": "eglLockSurfaceKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglLockSurfaceKHR(EGLDisplay dpy, EGLSurface surface, const EGLint *attrib_list)"
  },
  {
    "label": "eglUnlockSurfaceKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglUnlockSurfaceKHR(EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "eglQuerySurface64KHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQuerySurface64KHR(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLAttribKHR *value)"
  },
  {
    "label": "eglSetDamageRegionKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSetDamageRegionKHR(EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects)"
  },
  {
    "label": "eglSignalSyncKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSignalSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode)"
  },
  {
    "label": "eglCreateStreamKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateStreamKHR(EGLDisplay dpy, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroyStreamKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglDestroyStreamKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglStreamAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglStreamAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value)"
  },
  {
    "label": "eglQueryStreamKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryStreamKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint *value)"
  },
  {
    "label": "eglQueryStreamu64KHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryStreamu64KHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR *value)"
  },
  {
    "label": "eglCreateStreamAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateStreamAttribKHR(EGLDisplay dpy, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglSetStreamAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSetStreamAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib value)"
  },
  {
    "label": "eglQueryStreamAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryStreamAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib *value)"
  },
  {
    "label": "eglStreamConsumerAcquireAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglStreamConsumerAcquireAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglStreamConsumerReleaseAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglStreamConsumerReleaseAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglStreamConsumerGLTextureExternalKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglStreamConsumerGLTextureExternalKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglStreamConsumerAcquireKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglStreamConsumerAcquireKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglStreamConsumerReleaseKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglStreamConsumerReleaseKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglGetStreamFileDescriptorKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetStreamFileDescriptorKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglCreateStreamFromFileDescriptorKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateStreamFromFileDescriptorKHR(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor)"
  },
  {
    "label": "eglQueryStreamTimeKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryStreamTimeKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR *value)"
  },
  {
    "label": "eglCreateStreamProducerSurfaceKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateStreamProducerSurfaceKHR(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list)"
  },
  {
    "label": "eglSwapBuffersWithDamageKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSwapBuffersWithDamageKHR(EGLDisplay dpy, EGLSurface surface, const EGLint *rects, EGLint n_rects)"
  },
  {
    "label": "eglWaitSyncKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags)"
  },
  {
    "label": "eglSetBlobCacheFuncsANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSetBlobCacheFuncsANDROID(EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get)"
  },
  {
    "label": "eglCreateNativeClientBufferANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateNativeClientBufferANDROID(const EGLint *attrib_list)"
  },
  {
    "label": "eglGetCompositorTimingSupportedANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetCompositorTimingSupportedANDROID(EGLDisplay dpy, EGLSurface surface, EGLint name)"
  },
  {
    "label": "eglGetCompositorTimingANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetCompositorTimingANDROID(EGLDisplay dpy, EGLSurface surface, EGLint numTimestamps,  const EGLint *names, EGLnsecsANDROID *values)"
  },
  {
    "label": "eglGetNextFrameIdANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetNextFrameIdANDROID(EGLDisplay dpy, EGLSurface surface, EGLuint64KHR *frameId)"
  },
  {
    "label": "eglGetFrameTimestampSupportedANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetFrameTimestampSupportedANDROID(EGLDisplay dpy, EGLSurface surface, EGLint timestamp)"
  },
  {
    "label": "eglGetFrameTimestampsANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetFrameTimestampsANDROID(EGLDisplay dpy, EGLSurface surface, EGLuint64KHR frameId, EGLint numTimestamps,  const EGLint *timestamps, EGLnsecsANDROID *values)"
  },
  {
    "label": "eglGetNativeClientBufferANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetNativeClientBufferANDROID(const struct AHardwareBuffer *buffer)"
  },
  {
    "label": "eglDupNativeFenceFDANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglDupNativeFenceFDANDROID(EGLDisplay dpy, EGLSyncKHR sync)"
  },
  {
    "label": "eglPresentationTimeANDROID()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglPresentationTimeANDROID(EGLDisplay dpy, EGLSurface surface, EGLnsecsANDROID time)"
  },
  {
    "label": "eglQuerySurfacePointerANGLE()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQuerySurfacePointerANGLE(EGLDisplay dpy, EGLSurface surface, EGLint attribute, void **value)"
  },
  {
    "label": "eglGetMscRateANGLE()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetMscRateANGLE(EGLDisplay dpy, EGLSurface surface, EGLint *numerator, EGLint *denominator)"
  },
  {
    "label": "eglClientSignalSyncEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglClientSignalSyncEXT(EGLDisplay dpy, EGLSync sync, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglCompositorSetContextListEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCompositorSetContextListEXT(const EGLint *external_ref_ids, EGLint num_entries)"
  },
  {
    "label": "eglCompositorSetContextAttributesEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCompositorSetContextAttributesEXT(EGLint external_ref_id, const EGLint *context_attributes, EGLint num_entries)"
  },
  {
    "label": "eglCompositorSetWindowListEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCompositorSetWindowListEXT(EGLint external_ref_id, const EGLint *external_win_ids, EGLint num_entries)"
  },
  {
    "label": "eglCompositorSetWindowAttributesEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCompositorSetWindowAttributesEXT(EGLint external_win_id, const EGLint *window_attributes, EGLint num_entries)"
  },
  {
    "label": "eglCompositorBindTexWindowEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCompositorBindTexWindowEXT(EGLint external_win_id)"
  },
  {
    "label": "eglCompositorSetSizeEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCompositorSetSizeEXT(EGLint external_win_id, EGLint width, EGLint height)"
  },
  {
    "label": "eglCompositorSwapPolicyEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCompositorSwapPolicyEXT(EGLint external_win_id, EGLint policy)"
  },
  {
    "label": "eglQueryDeviceAttribEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryDeviceAttribEXT(EGLDeviceEXT device, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglQueryDeviceStringEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryDeviceStringEXT(EGLDeviceEXT device, EGLint name)"
  },
  {
    "label": "eglQueryDevicesEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryDevicesEXT(EGLint max_devices, EGLDeviceEXT *devices, EGLint *num_devices)"
  },
  {
    "label": "eglQueryDisplayAttribEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryDisplayAttribEXT(EGLDisplay dpy, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglQueryDeviceBinaryEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryDeviceBinaryEXT(EGLDeviceEXT device, EGLint name, EGLint max_size, void *value, EGLint *size)"
  },
  {
    "label": "eglQueryDmaBufFormatsEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryDmaBufFormatsEXT(EGLDisplay dpy, EGLint max_formats, EGLint *formats, EGLint *num_formats)"
  },
  {
    "label": "eglQueryDmaBufModifiersEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryDmaBufModifiersEXT(EGLDisplay dpy, EGLint format, EGLint max_modifiers, EGLuint64KHR *modifiers, EGLBoolean *external_only, EGLint *num_modifiers)"
  },
  {
    "label": "eglGetOutputLayersEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetOutputLayersEXT(EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputLayerEXT *layers, EGLint max_layers, EGLint *num_layers)"
  },
  {
    "label": "eglGetOutputPortsEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetOutputPortsEXT(EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputPortEXT *ports, EGLint max_ports, EGLint *num_ports)"
  },
  {
    "label": "eglOutputLayerAttribEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglOutputLayerAttribEXT(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib value)"
  },
  {
    "label": "eglQueryOutputLayerAttribEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryOutputLayerAttribEXT(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglQueryOutputLayerStringEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryOutputLayerStringEXT(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint name)"
  },
  {
    "label": "eglOutputPortAttribEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglOutputPortAttribEXT(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib value)"
  },
  {
    "label": "eglQueryOutputPortAttribEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryOutputPortAttribEXT(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglQueryOutputPortStringEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryOutputPortStringEXT(EGLDisplay dpy, EGLOutputPortEXT port, EGLint name)"
  },
  {
    "label": "eglGetPlatformDisplayEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetPlatformDisplayEXT(EGLenum platform, void *native_display, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreatePlatformWindowSurfaceEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreatePlatformWindowSurfaceEXT(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreatePlatformPixmapSurfaceEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreatePlatformPixmapSurfaceEXT(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLint *attrib_list)"
  },
  {
    "label": "eglStreamConsumerOutputEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglStreamConsumerOutputEXT(EGLDisplay dpy, EGLStreamKHR stream, EGLOutputLayerEXT layer)"
  },
  {
    "label": "eglQuerySupportedCompressionRatesEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQuerySupportedCompressionRatesEXT(EGLDisplay dpy, EGLConfig config, const EGLAttrib *attrib_list, EGLint *rates, EGLint rate_size, EGLint *num_rates)"
  },
  {
    "label": "eglSwapBuffersWithDamageEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSwapBuffersWithDamageEXT(EGLDisplay dpy, EGLSurface surface, const EGLint *rects, EGLint n_rects)"
  },
  {
    "label": "eglUnsignalSyncEXT()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglUnsignalSyncEXT(EGLDisplay dpy, EGLSync sync, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglCreatePixmapSurfaceHI()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreatePixmapSurfaceHI(EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI *pixmap)"
  },
  {
    "label": "eglCreateDRMImageMESA()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateDRMImageMESA(EGLDisplay dpy, const EGLint *attrib_list)"
  },
  {
    "label": "eglExportDRMImageMESA()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglExportDRMImageMESA(EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride)"
  },
  {
    "label": "eglExportDMABUFImageQueryMESA()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglExportDMABUFImageQueryMESA(EGLDisplay dpy, EGLImageKHR image, int *fourcc, int *num_planes, EGLuint64KHR *modifiers)"
  },
  {
    "label": "eglExportDMABUFImageMESA()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglExportDMABUFImageMESA(EGLDisplay dpy, EGLImageKHR image, int *fds, EGLint *strides, EGLint *offsets)"
  },
  {
    "label": "eglGetDisplayDriverConfig()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetDisplayDriverConfig(EGLDisplay dpy)"
  },
  {
    "label": "eglGetDisplayDriverName()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetDisplayDriverName(EGLDisplay dpy)"
  },
  {
    "label": "eglSwapBuffersRegionNOK()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSwapBuffersRegionNOK(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects)"
  },
  {
    "label": "eglSwapBuffersRegion2NOK()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSwapBuffersRegion2NOK(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects)"
  },
  {
    "label": "eglQueryNativeDisplayNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryNativeDisplayNV(EGLDisplay dpy, EGLNativeDisplayType *display_id)"
  },
  {
    "label": "eglQueryNativeWindowNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryNativeWindowNV(EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType *window)"
  },
  {
    "label": "eglQueryNativePixmapNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryNativePixmapNV(EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType *pixmap)"
  },
  {
    "label": "eglPostSubBufferNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglPostSubBufferNV(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)"
  },
  {
    "label": "eglStreamImageConsumerConnectNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglStreamImageConsumerConnectNV(EGLDisplay dpy, EGLStreamKHR stream, EGLint num_modifiers, const EGLuint64KHR *modifiers, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglQueryStreamConsumerEventNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryStreamConsumerEventNV(EGLDisplay dpy, EGLStreamKHR stream, EGLTime timeout, EGLenum *event, EGLAttrib *aux)"
  },
  {
    "label": "eglStreamAcquireImageNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglStreamAcquireImageNV(EGLDisplay dpy, EGLStreamKHR stream, EGLImage *pImage, EGLSync sync)"
  },
  {
    "label": "eglStreamReleaseImageNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglStreamReleaseImageNV(EGLDisplay dpy, EGLStreamKHR stream, EGLImage image, EGLSync sync)"
  },
  {
    "label": "eglStreamConsumerGLTextureExternalAttribsNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglStreamConsumerGLTextureExternalAttribsNV(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list)"
  },
  {
    "label": "eglStreamFlushNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglStreamFlushNV(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglQueryDisplayAttribNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryDisplayAttribNV(EGLDisplay dpy, EGLint attribute, EGLAttrib *value)"
  },
  {
    "label": "eglSetStreamMetadataNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSetStreamMetadataNV(EGLDisplay dpy, EGLStreamKHR stream, EGLint n, EGLint offset, EGLint size, const void *data)"
  },
  {
    "label": "eglQueryStreamMetadataNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryStreamMetadataNV(EGLDisplay dpy, EGLStreamKHR stream, EGLenum name, EGLint n, EGLint offset, EGLint size, void *data)"
  },
  {
    "label": "eglResetStreamNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglResetStreamNV(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglCreateStreamSyncNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateStreamSyncNV(EGLDisplay dpy, EGLStreamKHR stream, EGLenum type, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreateFenceSyncNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateFenceSyncNV(EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroySyncNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglDestroySyncNV(EGLSyncNV sync)"
  },
  {
    "label": "eglFenceNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglFenceNV(EGLSyncNV sync)"
  },
  {
    "label": "eglClientWaitSyncNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglClientWaitSyncNV(EGLSyncNV sync, EGLint flags, EGLTimeNV timeout)"
  },
  {
    "label": "eglSignalSyncNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSignalSyncNV(EGLSyncNV sync, EGLenum mode)"
  },
  {
    "label": "eglGetSyncAttribNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetSyncAttribNV(EGLSyncNV sync, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglGetSystemTimeFrequencyNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetSystemTimeFrequencyNV(void)"
  },
  {
    "label": "eglGetSystemTimeNV()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetSystemTimeNV(void)"
  },
  {
    "label": "eglBindWaylandDisplayWL()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglBindWaylandDisplayWL(EGLDisplay dpy, struct wl_display *display)"
  },
  {
    "label": "eglUnbindWaylandDisplayWL()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglUnbindWaylandDisplayWL(EGLDisplay dpy, struct wl_display *display)"
  },
  {
    "label": "eglQueryWaylandBufferWL()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryWaylandBufferWL(EGLDisplay dpy, struct wl_resource *buffer, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglCreateWaylandBufferFromImageWL()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateWaylandBufferFromImageWL(EGLDisplay dpy, EGLImageKHR image)"
  }
]