[
  {
    "label": "BasicRegatheringController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicRegatheringController"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "BasicRegatheringController()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_REGATHERING_CONTROLLER_H_ # define P2P_BASE_REGATHERING_CONTROLLER_H_ # include<memory> # include \" api / task_queue / pending_task_safety_flag . h \" # include \" p2p / base / ice_transport_internal . h \" # include \" p2p / base / port_allocator . h \" # include \" rtc_base / thread . h \" namespace webrtc { class BasicRegatheringController : public sigslot::has_slots<> { public : struct Config { int regather_on_failed_networks_interval = cricket::REGATHER_ON_FAILED_NETWORKS_INTERVAL ; } ;)",
    "insertText": "BasicRegatheringController()"
  },
  {
    "label": "BasicRegatheringController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BasicRegatheringController(const Config& config, cricket::IceTransportInternal* ice_transport, rtc::Thread* thread)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "set_allocator_session()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_allocator_session(cricket::PortAllocatorSession* allocator_session)"
  },
  {
    "label": "SetConfig()",
    "kind": "Method",
    "detail": "Function (allocator_session_ = allocator_session ; } void)",
    "insertText": "SetConfig(const Config& config)"
  },
  {
    "label": "OnIceTransportStateChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnIceTransportStateChanged(cricket::IceTransportInternal*)"
  },
  {
    "label": "OnIceTransportWritableState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnIceTransportWritableState(rtc::PacketTransportInternal*)"
  },
  {
    "label": "OnIceTransportReceivingState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnIceTransportReceivingState(rtc::PacketTransportInternal*)"
  },
  {
    "label": "OnIceTransportNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnIceTransportNetworkRouteChanged(absl::optional<rtc::NetworkRoute>)"
  },
  {
    "label": "ScheduleRecurringRegatheringOnFailedNetworks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScheduleRecurringRegatheringOnFailedNetworks()"
  },
  {
    "label": "CancelScheduledRecurringRegatheringOnAllNetworks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelScheduledRecurringRegatheringOnAllNetworks()"
  }
]