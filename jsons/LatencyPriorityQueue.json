[
  {
    "label": "LatencyPriorityQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LatencyPriorityQueue"
  },
  {
    "label": "latency_sort",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "latency_sort"
  },
  {
    "label": "latency_sort()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_LATENCYPRIORITYQUEUE_H # define LLVM_CODEGEN_LATENCYPRIORITYQUEUE_H # include \" llvm / CodeGen / ScheduleDAG . h \" namespace llvm { class LatencyPriorityQueue ; struct latency_sort : public std::binary_function<SUnit*,SUnit*,bool> { LatencyPriorityQueue* PQ ;)",
    "insertText": "latency_sort(LatencyPriorityQueue *pq) : PQ(pq)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const SUnit* left, const SUnit* right)"
  },
  {
    "label": "LatencyPriorityQueue()",
    "kind": "Method",
    "detail": "Function (} ; class LatencyPriorityQueue : public SchedulingPriorityQueue { std::vector<SUnit>* SUnits ; std::vector<unsigned> NumNodesSolelyBlocking ; std::vector<SUnit*> Queue ; latency_sort Picker ; public :)",
    "insertText": "LatencyPriorityQueue() : Picker(this)"
  },
  {
    "label": "isBottomUp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBottomUp()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (SUnits =& sunits ; NumNodesSolelyBlocking .)",
    "insertText": "resize(SUnits->size(), 0)"
  },
  {
    "label": "addNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addNode(const SUnit *SU)"
  },
  {
    "label": "updateNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "updateNode(const SUnit *SU)"
  },
  {
    "label": "releaseState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "releaseState()"
  },
  {
    "label": "getLatency()",
    "kind": "Method",
    "detail": "Function (SUnits = nullptr ; } unsigned)",
    "insertText": "getLatency(unsigned NodeNum)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NodeNum < (*SUnits).size())"
  },
  {
    "label": "getNumSolelyBlockNodes()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumSolelyBlockNodes(unsigned NodeNum)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NodeNum < NumNodesSolelyBlocking.size())"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push(SUnit *U)"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (SUnit*)",
    "insertText": "pop()"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove(SUnit *SU)"
  },
  {
    "label": "scheduledNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scheduledNode(SUnit *Node)"
  },
  {
    "label": "AdjustPriorityOfUnscheduledPreds()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AdjustPriorityOfUnscheduledPreds(SUnit *SU)"
  },
  {
    "label": "getSingleUnscheduledPred()",
    "kind": "Method",
    "detail": "Function (SUnit*)",
    "insertText": "getSingleUnscheduledPred(SUnit *SU)"
  }
]