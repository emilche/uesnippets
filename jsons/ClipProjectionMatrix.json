[
  {
    "label": "TClipProjectionMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TClipProjectionMatrix"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TClipProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Plane . h \" # include \" Math / Matrix . h \" namespace UE { namespace Math { template<T> struct TClipProjectionMatrix : public TMatrix<T> { public : using TMatrix<T>::M ;)",
    "insertText": "TClipProjectionMatrix(const TMatrix<T>& SrcProjMat, const TPlane<T>& Plane)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TClipProjectionMatrix(const TClipProjectionMatrix<FArg>& From) : TMatrix<T>(From)"
  },
  {
    "label": "sgn()",
    "kind": "Method",
    "detail": "Function (} private : T)",
    "insertText": "sgn(T a)"
  },
  {
    "label": "TClipProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (} ; template<T> TClipProjectionMatrix<T)",
    "insertText": "TClipProjectionMatrix(const TMatrix<T>& SrcProjMat, const TPlane<T>& Plane ) : TMatrix<T>(SrcProjMat)"
  },
  {
    "label": "CornerPlane()",
    "kind": "Method",
    "detail": "Function (TPlane<T>)",
    "insertText": "CornerPlane(sgn(Plane.X) / SrcProjMat.M[0][0], sgn(Plane.Y) / SrcProjMat.M[1][1], 1.0f, -(1.0f - SrcProjMat.M[2][2]) / SrcProjMat.M[3][2])"
  },
  {
    "label": "ProjPlane()",
    "kind": "Method",
    "detail": "Function (TPlane<T>)",
    "insertText": "ProjPlane(Plane * (1.0f / (Plane | CornerPlane)))"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "UE_DECLARE_LWC_TYPE(ClipProjectionMatrix, 44)"
  }
]