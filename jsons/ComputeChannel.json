[
  {
    "label": "FComputeSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputeSocket"
  },
  {
    "label": "FComputeChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputeChannel"
  },
  {
    "label": "FComputeChannel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ComputeBuffer . h \" class FComputeSocket ; class FComputeChannel { public : FComputeBufferReader Reader ; FComputeBufferWriter Writer ;)",
    "insertText": "FComputeChannel()"
  },
  {
    "label": "FComputeChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComputeChannel(FComputeBufferReader InReader, FComputeBufferWriter InWriter)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Send(const void* Data, size_t Size, int TimeoutMs = -1)"
  },
  {
    "label": "Recv()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Recv(void* Data, size_t Size, int TimeoutMs = -1)"
  },
  {
    "label": "MarkComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkComplete()"
  }
]