[
  {
    "label": "ObjCAudioDeviceDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjCAudioDeviceDelegate"
  },
  {
    "label": "FineAudioBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FineAudioBuffer"
  },
  {
    "label": "ObjCAudioDeviceModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjCAudioDeviceModule"
  },
  {
    "label": "ObjCAudioDeviceModule()",
    "kind": "Method",
    "detail": "Function (# ifndef SDK_OBJC_NATIVE_SRC_OBJC_AUDIO_DEVICE_H_ # define SDK_OBJC_NATIVE_SRC_OBJC_AUDIO_DEVICE_H_ # include<memory> # import \" components / audio / RTCAudioDevice . h \" # include \" modules / audio_device / audio_device_buffer . h \" # include \" modules / audio_device / include / audio_device . h \" # include \" rtc_base / thread . h \" @ class ObjCAudioDeviceDelegate ; namespace webrtc { class FineAudioBuffer ; namespace objc_adm { class ObjCAudioDeviceModule : public AudioDeviceModule { public :)",
    "insertText": "ObjCAudioDeviceModule(id<RTC_OBJC_TYPE(RTCAudioDevice)> audio_device)"
  },
  {
    "label": "ObjCAudioDeviceModule()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ObjCAudioDeviceModule()"
  },
  {
    "label": "ActiveAudioLayer()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "ActiveAudioLayer(AudioLayer* audioLayer)"
  },
  {
    "label": "RegisterAudioCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterAudioCallback(AudioTransport* audioCallback)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Init()"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Terminate()"
  },
  {
    "label": "Initialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialized()"
  },
  {
    "label": "PlayoutDevices()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "PlayoutDevices()"
  },
  {
    "label": "RecordingDevices()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "RecordingDevices()"
  },
  {
    "label": "PlayoutDeviceName()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "PlayoutDeviceName(uint16_t index, char name[kAdmMaxDeviceNameSize], char guid[kAdmMaxGuidSize])"
  },
  {
    "label": "RecordingDeviceName()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RecordingDeviceName(uint16_t index, char name[kAdmMaxDeviceNameSize], char guid[kAdmMaxGuidSize])"
  },
  {
    "label": "SetPlayoutDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetPlayoutDevice(uint16_t index)"
  },
  {
    "label": "SetPlayoutDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetPlayoutDevice(WindowsDeviceType device)"
  },
  {
    "label": "SetRecordingDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordingDevice(uint16_t index)"
  },
  {
    "label": "SetRecordingDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordingDevice(WindowsDeviceType device)"
  },
  {
    "label": "PlayoutIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "PlayoutIsAvailable(bool* available)"
  },
  {
    "label": "InitPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitPlayout()"
  },
  {
    "label": "PlayoutIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlayoutIsInitialized()"
  },
  {
    "label": "RecordingIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RecordingIsAvailable(bool* available)"
  },
  {
    "label": "InitRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitRecording()"
  },
  {
    "label": "RecordingIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecordingIsInitialized()"
  },
  {
    "label": "StartPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StartPlayout()"
  },
  {
    "label": "StopPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StopPlayout()"
  },
  {
    "label": "Playing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Playing()"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StartRecording()"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StopRecording()"
  },
  {
    "label": "Recording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Recording()"
  },
  {
    "label": "InitSpeaker()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitSpeaker()"
  },
  {
    "label": "SpeakerIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpeakerIsInitialized()"
  },
  {
    "label": "InitMicrophone()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitMicrophone()"
  },
  {
    "label": "MicrophoneIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MicrophoneIsInitialized()"
  },
  {
    "label": "SpeakerVolumeIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerVolumeIsAvailable(bool* available)"
  },
  {
    "label": "SetSpeakerVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetSpeakerVolume(uint32_t volume)"
  },
  {
    "label": "SpeakerVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerVolume(uint32_t* volume)"
  },
  {
    "label": "MaxSpeakerVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MaxSpeakerVolume(uint32_t* maxVolume)"
  },
  {
    "label": "MinSpeakerVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MinSpeakerVolume(uint32_t* minVolume)"
  },
  {
    "label": "MicrophoneVolumeIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneVolumeIsAvailable(bool* available)"
  },
  {
    "label": "SetMicrophoneVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetMicrophoneVolume(uint32_t volume)"
  },
  {
    "label": "MicrophoneVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneVolume(uint32_t* volume)"
  },
  {
    "label": "MaxMicrophoneVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MaxMicrophoneVolume(uint32_t* maxVolume)"
  },
  {
    "label": "MinMicrophoneVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MinMicrophoneVolume(uint32_t* minVolume)"
  },
  {
    "label": "SpeakerMuteIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerMuteIsAvailable(bool* available)"
  },
  {
    "label": "SetSpeakerMute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetSpeakerMute(bool enable)"
  },
  {
    "label": "SpeakerMute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerMute(bool* enabled)"
  },
  {
    "label": "MicrophoneMuteIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneMuteIsAvailable(bool* available)"
  },
  {
    "label": "SetMicrophoneMute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetMicrophoneMute(bool enable)"
  },
  {
    "label": "MicrophoneMute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneMute(bool* enabled)"
  },
  {
    "label": "StereoPlayoutIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StereoPlayoutIsAvailable(bool* available)"
  },
  {
    "label": "SetStereoPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetStereoPlayout(bool enable)"
  },
  {
    "label": "StereoPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StereoPlayout(bool* enabled)"
  },
  {
    "label": "StereoRecordingIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StereoRecordingIsAvailable(bool* available)"
  },
  {
    "label": "SetStereoRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetStereoRecording(bool enable)"
  },
  {
    "label": "StereoRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StereoRecording(bool* enabled)"
  },
  {
    "label": "PlayoutDelay()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "PlayoutDelay(uint16_t* delayMS)"
  },
  {
    "label": "BuiltInAECIsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuiltInAECIsAvailable()"
  },
  {
    "label": "BuiltInAGCIsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuiltInAGCIsAvailable()"
  },
  {
    "label": "BuiltInNSIsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuiltInNSIsAvailable()"
  },
  {
    "label": "EnableBuiltInAEC()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "EnableBuiltInAEC(bool enable)"
  },
  {
    "label": "EnableBuiltInAGC()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "EnableBuiltInAGC(bool enable)"
  },
  {
    "label": "EnableBuiltInNS()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "EnableBuiltInNS(bool enable)"
  },
  {
    "label": "GetPlayoutUnderrunCount()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetPlayoutUnderrunCount()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_IOS) int GetPlayoutAudioParameters(AudioParameters* params)"
  },
  {
    "label": "GetRecordAudioParameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetRecordAudioParameters(AudioParameters* params)"
  },
  {
    "label": "OnDeliverRecordedData()",
    "kind": "Method",
    "detail": "Function (# endif public : OSStatus)",
    "insertText": "OnDeliverRecordedData(AudioUnitRenderActionFlags* flags, const AudioTimeStamp* time_stamp, NSInteger bus_number, UInt32 num_frames, const AudioBufferList* io_data, void* render_context, RTC_OBJC_TYPE(RTCAudioDeviceRenderRecordedDataBlock) render_block)"
  },
  {
    "label": "OnGetPlayoutData()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "OnGetPlayoutData(AudioUnitRenderActionFlags* flags, const AudioTimeStamp* time_stamp, NSInteger bus_number, UInt32 num_frames, AudioBufferList* io_data)"
  },
  {
    "label": "HandleAudioInputParametersChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAudioInputParametersChange()"
  },
  {
    "label": "HandleAudioOutputParametersChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAudioOutputParametersChange()"
  },
  {
    "label": "HandleAudioInputInterrupted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAudioInputInterrupted()"
  },
  {
    "label": "HandleAudioOutputInterrupted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAudioOutputInterrupted()"
  },
  {
    "label": "UpdateAudioParameters()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "UpdateAudioParameters(AudioParameters& params, const AudioParameters& device_params)"
  },
  {
    "label": "UpdateAudioDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudioDelay(std::atomic<int>& delay_ms, const NSTimeInterval device_latency)"
  },
  {
    "label": "UpdateOutputAudioDeviceBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOutputAudioDeviceBuffer()"
  },
  {
    "label": "UpdateInputAudioDeviceBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInputAudioDeviceBuffer()"
  },
  {
    "label": "RTC_OBJC_TYPE()",
    "kind": "Method",
    "detail": "Function (private : id<)",
    "insertText": "RTC_OBJC_TYPE(RTCAudioDevice)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const std::unique_ptr<TaskQueueFactory> task_queue_factory_ ; std::unique_ptr<AudioDeviceBuffer> audio_device_buffer_ ; std::atomic<bool> recording_ = false ; std::atomic<bool> playing_ = false ; std::atomic<int> cached_playout_delay_ms_ = 0 ; std::atomic<int> cached_recording_delay_ms_ = 0 ; rtc::Thread* thread_ ; SequenceChecker thread_checker_ ; SequenceChecker io_playout_thread_checker_ ; SequenceChecker io_record_thread_checker_ ; bool is_initialized_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  }
]