[
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifdef _WIN32 # pragma)",
    "insertText": "warning(disable : 4146) #endif ST_INLINE CRandom::CRandom()"
  },
  {
    "label": "Seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seed(0)"
  },
  {
    "label": "CRandom()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "CRandom(st_uint32 uiSeed)"
  },
  {
    "label": "Seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seed(uiSeed)"
  },
  {
    "label": "CRandom()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "CRandom(const CRandom& cCopy)"
  },
  {
    "label": "Seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seed(cCopy.m_uiSeed)"
  },
  {
    "label": "CRandom()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CRandom::~)",
    "insertText": "CRandom()"
  },
  {
    "label": "Seed()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "Seed(st_uint32 uiSeed)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (m_uiSeed = uiSeed ;)",
    "insertText": "memset(m_auiTable, 0, (SIZE + 1) * sizeof(st_uint32))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (st_uint32* pS = m_auiTable ; st_uint32* pR = m_auiTable ;* pS = m_uiSeed& 0 xffffffff ; + + pS ;)",
    "insertText": "for(st_uint32 i = 1; i < SIZE; ++i)"
  },
  {
    "label": "pS()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "pS(1812433253U * (*pR ^ (*pR >> 30)) + i)"
  },
  {
    "label": "Reload()",
    "kind": "Method",
    "detail": "Function (+ + pS ; + + pR ; })",
    "insertText": "Reload()"
  },
  {
    "label": "GetInteger()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_int32)",
    "insertText": "GetInteger(st_int32 nLow, st_int32 nHigh)"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "GetFloat(st_float32 fLow, st_float32 fHigh)"
  },
  {
    "label": "GetDouble()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float64)",
    "insertText": "GetDouble(st_float64 fLow, st_float64 fHigh)"
  },
  {
    "label": "GetGaussianFloat()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "GetGaussianFloat(void)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (st_float32 fX1 = 0 . 0 f ; st_float32 fX2 = 0 . 0 f ; st_float32 fW = 1 . 0 f ;)",
    "insertText": "while(fW >= 1.0f)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (fX1 = 2 . 0)",
    "insertText": "f((st_float32(GetRawInteger( )) + 0.5f) * (1.0f / 4294967296.0f))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (fW = fX1* fX1 + fX2* fX2 ; })",
    "insertText": "return(fX1 * sqrt((-2.0f * log(fW)) / fW))"
  },
  {
    "label": "GetGaussianDouble()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float64)",
    "insertText": "GetGaussianDouble(void)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (st_float64 fX1 = 0 . 0 ; st_float64 fX2 = 0 . 0 ; st_float64 fW = 1 . 0 ;)",
    "insertText": "while(fW >= 1.0)"
  },
  {
    "label": "fX1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fX1((st_float64(GetRawInteger( )) + 0.5) * (1.0 / 4294967296.0))"
  },
  {
    "label": "fX2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fX2((st_float64(GetRawInteger( )) + 0.5) * (1.0 / 4294967296.0))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (fW = fX1* fX1 + fX2* fX2 ; })",
    "insertText": "return(fX1 * sqrt((-2.0 * log(fW)) / fW))"
  },
  {
    "label": "Reload()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "Reload(void)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (st_uint32* pTemp = m_auiTable ;)",
    "insertText": "for(st_uint32 i = SIZE - PERIOD; i > 0; --i)"
  },
  {
    "label": "Twist()",
    "kind": "Method",
    "detail": "Function (* pTemp =)",
    "insertText": "Twist(pTemp[PERIOD], pTemp[0], pTemp[1])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + pTemp ; })",
    "insertText": "for(st_uint32 i = PERIOD; i > 0; --i)"
  },
  {
    "label": "Twist()",
    "kind": "Method",
    "detail": "Function (* pTemp =)",
    "insertText": "Twist(pTemp[PERIOD - SIZE], pTemp[0], pTemp[1])"
  },
  {
    "label": "Twist()",
    "kind": "Method",
    "detail": "Function (+ + pTemp ; }* pTemp =)",
    "insertText": "Twist(pTemp[PERIOD - SIZE], pTemp[0], m_auiTable[0])"
  },
  {
    "label": "GetRawInteger()",
    "kind": "Method",
    "detail": "Function (m_nCount = SIZE ; m_pNext = m_auiTable ; } ST_INLINE st_uint32)",
    "insertText": "GetRawInteger(void)"
  },
  {
    "label": "uiTemp()",
    "kind": "Method",
    "detail": "Function (- - m_nCount ; st_uint32 uiTemp ; uiTemp =* m_pNext ; + + m_pNext ;)",
    "insertText": "uiTemp(uiTemp >> 11)"
  },
  {
    "label": "uiTemp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "uiTemp(uiTemp << 7)"
  },
  {
    "label": "uiTemp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "uiTemp(uiTemp << 15)"
  },
  {
    "label": "uiTemp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "uiTemp(uiTemp >> 18)"
  }
]