[
  {
    "label": "fdjac1()",
    "kind": "Method",
    "detail": "Function (namespace Eigen { namespace internal { template<FunctorType,Scalar> DenseIndex)",
    "insertText": "fdjac1(const FunctorType &Functor, Matrix< Scalar, Dynamic, 1 > &x, Matrix< Scalar, Dynamic, 1 > &fvec, Matrix< Scalar, Dynamic, Dynamic > &fjac, DenseIndex ml, DenseIndex mu, Scalar epsfcn)"
  },
  {
    "label": "epsilon()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; using std::abs ; typedef DenseIndex Index ; Scalar h ; Index j,k ; Scalar eps,temp ; Index msum ; int iflag ; Index start,length ; const Scalar epsmch = NumTraits<Scalar)",
    "insertText": "epsilon()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Index n = x .)",
    "insertText": "size()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(fvec.size()==n)"
  },
  {
    "label": "wa1()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1>)",
    "insertText": "wa1(n)"
  },
  {
    "label": "wa2()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1>)",
    "insertText": "wa2(n)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (eps =)",
    "insertText": "sqrt((std::max)(epsfcn,epsmch))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (msum = ml + mu + 1 ;)",
    "insertText": "if(msum >= n)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (temp = x [ j ] ; h = eps*)",
    "insertText": "abs(temp)"
  },
  {
    "label": "Functor()",
    "kind": "Method",
    "detail": "Function (x [ j ] = temp + h ; iflag =)",
    "insertText": "Functor(x, wa1)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (x [ j ] = temp ; fjac .)",
    "insertText": "col(j) = (wa1-fvec)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(k = 0; k < msum; ++k)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (wa2 [ j ] = x [ j ] ; h = eps*)",
    "insertText": "abs(wa2[j])"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (fjac .)",
    "insertText": "col(j).setZero()"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (start = std::max<)",
    "insertText": "Index(0,j-mu)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "length(std::min)(n-1, j+ml)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (fjac .)",
    "insertText": "col(j).segment(start, length) = ( wa1.segment(start, length)-fvec.segment(start, length))"
  }
]