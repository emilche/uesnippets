[
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "SymbolTableListTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SymbolTableListTraits"
  },
  {
    "label": "GlobalAlias",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalAlias"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_GLOBALALIAS_H # define LLVM_IR_GLOBALALIAS_H # include \" llvm / ADT / Twine . h \" # include \" llvm / ADT / ilist_node . h \" # include \" llvm / IR / GlobalValue . h \" # include \" llvm / IR / OperandTraits . h \" namespace llvm { class Module ; template<ValueSubClass,ItemParentClass> class SymbolTableListTraits ; class GlobalAlias : public GlobalValue,public ilist_node<GlobalAlias> { class SymbolTableListTraits<GlobalAlias,Module> ; void)",
    "insertText": "operator(const GlobalAlias &)"
  },
  {
    "label": "GlobalAlias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GlobalAlias(const GlobalAlias &)"
  },
  {
    "label": "setParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParent(Module *parent)"
  },
  {
    "label": "GlobalAlias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GlobalAlias(PointerType *Ty, LinkageTypes Linkage, const Twine &Name, Constant *Aliasee, Module *Parent)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (public : void* operator)",
    "insertText": "new(size_t s)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} GlobalAlias*)",
    "insertText": "create(PointerType *Ty, LinkageTypes Linkage, const Twine &Name, Constant *Aliasee, Module *Parent)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (GlobalAlias*)",
    "insertText": "create(PointerType *Ty, LinkageTypes Linkage, const Twine &Name, Module *Parent)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (GlobalAlias*)",
    "insertText": "create(PointerType *Ty, LinkageTypes Linkage, const Twine &Name, GlobalValue *Aliasee)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (GlobalAlias*)",
    "insertText": "create(LinkageTypes Linkage, const Twine &Name, GlobalValue *Aliasee)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (GlobalAlias*)",
    "insertText": "create(const Twine &Name, GlobalValue *Aliasee)"
  },
  {
    "label": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS(Constant)"
  },
  {
    "label": "removeFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeFromParent()"
  },
  {
    "label": "eraseFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eraseFromParent()"
  },
  {
    "label": "setAliasee()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAliasee(Constant *Aliasee)"
  },
  {
    "label": "getAliasee()",
    "kind": "Method",
    "detail": "Function (const Constant*)",
    "insertText": "getAliasee()"
  },
  {
    "label": "getBaseObject()",
    "kind": "Method",
    "detail": "Function (} const GlobalObject*)",
    "insertText": "getBaseObject()"
  },
  {
    "label": "getBaseObject()",
    "kind": "Method",
    "detail": "Function (} const GlobalObject*)",
    "insertText": "getBaseObject(const DataLayout &DL, APInt &Offset)"
  },
  {
    "label": "isValidLinkage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValidLinkage(LinkageTypes L)"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(const Value *V)"
  }
]