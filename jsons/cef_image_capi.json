[
  {
    "label": "_cef_image_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_image_t"
  },
  {
    "label": "_cef_binary_value_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_binary_value_t"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CAPI_CEF_IMAGE_CAPI_H_ # define CEF_INCLUDE_CAPI_CEF_IMAGE_CAPI_H_ # pragma once # include \" include / capi / cef_base_capi . h \" # include \" include / capi / cef_values_capi . h \" # ifdef __cplusplus \" C \" { # endif typedef struct _cef_image_t { cef_base_ref_counted_t base ;)",
    "insertText": "int(CEF_CALLBACK* is_empty)(struct _cef_image_t* self)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* is_same)(struct _cef_image_t* self, struct _cef_image_t* that)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* add_bitmap)(struct _cef_image_t* self, float scale_factor, int pixel_width, int pixel_height, cef_color_type_t color_type, cef_alpha_type_t alpha_type, const void* pixel_data, size_t pixel_data_size)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* add_png)(struct _cef_image_t* self, float scale_factor, const void* png_data, size_t png_data_size)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* add_jpeg)(struct _cef_image_t* self, float scale_factor, const void* jpeg_data, size_t jpeg_data_size)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "size_t(CEF_CALLBACK* get_width)(struct _cef_image_t* self)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "size_t(CEF_CALLBACK* get_height)(struct _cef_image_t* self)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* has_representation)(struct _cef_image_t* self, float scale_factor)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* remove_representation)(struct _cef_image_t* self, float scale_factor)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* get_representation_info)(struct _cef_image_t* self, float scale_factor, float* actual_scale_factor, int* pixel_width, int* pixel_height)"
  },
  {
    "label": "_cef_binary_value_t()",
    "kind": "Method",
    "detail": "Function (struct)",
    "insertText": "_cef_binary_value_t(CEF_CALLBACK* get_as_bitmap)( struct _cef_image_t* self, float scale_factor, cef_color_type_t color_type, cef_alpha_type_t alpha_type, int* pixel_width, int* pixel_height)"
  },
  {
    "label": "_cef_binary_value_t()",
    "kind": "Method",
    "detail": "Function (struct)",
    "insertText": "_cef_binary_value_t(CEF_CALLBACK* get_as_png)( struct _cef_image_t* self, float scale_factor, int with_transparency, int* pixel_width, int* pixel_height)"
  },
  {
    "label": "_cef_binary_value_t()",
    "kind": "Method",
    "detail": "Function (struct)",
    "insertText": "_cef_binary_value_t(CEF_CALLBACK* get_as_jpeg)( struct _cef_image_t* self, float scale_factor, int quality, int* pixel_width, int* pixel_height)"
  },
  {
    "label": "cef_image_create()",
    "kind": "Method",
    "detail": "Function (} cef_image_t ; CEF_EXPORT cef_image_t*)",
    "insertText": "cef_image_create()"
  }
]