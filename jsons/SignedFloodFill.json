[
  {
    "label": "SignedFloodFillOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SignedFloodFillOp"
  },
  {
    "label": "signedFloodFill()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_SIGNEDFLOODFILL_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_SIGNEDFLOODFILL_HAS_BEEN_INCLUDED # include<openvdb / version . h> # include<openvdb / Types . h> # include<openvdb / math / Math . h> # include<openvdb / tree / NodeManager . h> # include<map> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<TreeOrLeafManagerT> void)",
    "insertText": "signedFloodFill(TreeOrLeafManagerT& tree, bool threaded = true, size_t grainSize = 1, Index minLevel = 0)"
  },
  {
    "label": "signedFloodFillWithValues()",
    "kind": "Method",
    "detail": "Function (template<TreeOrLeafManagerT> void)",
    "insertText": "signedFloodFillWithValues(TreeOrLeafManagerT& tree, const typename TreeOrLeafManagerT::ValueType& outsideWidth, const typename TreeOrLeafManagerT::ValueType& insideWidth, bool threaded = true, size_t grainSize = 1, Index minLevel = 0)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<TreeOrLeafManagerT> class SignedFloodFillOp { public : using ValueT = TreeOrLeafManagerT::ValueType ; using RootT = TreeOrLeafManagerT::RootNodeType ; using LeafT = TreeOrLeafManagerT::LeafNodeType ;)",
    "insertText": "static_assert(std::is_signed<ValueT>::value, \"signed flood fill is supported only for signed value grids\")"
  },
  {
    "label": "SignedFloodFillOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignedFloodFillOp(const TreeOrLeafManagerT& tree, Index minLevel = 0) : mOutside(ValueT(math::Abs(tree.background()))) , mInside(ValueT(math::negative(mOutside))) , mMinLevel(minLevel)"
  },
  {
    "label": "SignedFloodFillOp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SignedFloodFillOp(ValueT outsideValue, ValueT insideValue, Index minLevel = 0) : mOutside(ValueT(math::Abs(outsideValue))) , mInside(ValueT(math::negative(math::Abs(insideValue)))) , mMinLevel(minLevel)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(LeafT& leaf)"
  },
  {
    "label": "getValueMask()",
    "kind": "Method",
    "detail": "Function (const LeafT::NodeMaskType& valueMask = leaf .)",
    "insertText": "getValueMask()"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (LeafT::ValueType* buffer = const_cast<)",
    "insertText": "ValueType(&(leaf.getFirstValue()))"
  },
  {
    "label": "findFirstOn()",
    "kind": "Method",
    "detail": "Function (const Index first = valueMask .)",
    "insertText": "findFirstOn()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool xInside = buffer [ first ]<0,yInside = xInside,zInside = xInside ;)",
    "insertText": "for(Index x = 0; x != (1 << LeafT::LOG2DIM); ++x)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (const Index x00 =)",
    "insertText": "x(2 * LeafT::LOG2DIM)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (yInside = xInside ;)",
    "insertText": "for(Index y = 0; y != (1 << LeafT::LOG2DIM); ++y)"
  },
  {
    "label": "x00()",
    "kind": "Method",
    "detail": "Function (const Index xy0 =)",
    "insertText": "x00(y << LeafT::LOG2DIM)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (zInside = yInside ;)",
    "insertText": "for(Index z = 0; z != (1 << LeafT::LOG2DIM); ++z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index xyz = xy0 + z ;)",
    "insertText": "if(valueMask.isOn(xyz))"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (zInside = buffer [ xyz ]<0 ; } else { buffer [ xyz ] = zInside ? mInside : mOutside ; } } } } } else { leaf .)",
    "insertText": "fill(buffer[0] < 0 ? mInside : mOutside)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } template<NodeT> void)",
    "insertText": "operator()(NodeT& node)"
  },
  {
    "label": "getChildMask()",
    "kind": "Method",
    "detail": "Function (const NodeT::NodeMaskType& childMask = node .)",
    "insertText": "getChildMask()"
  },
  {
    "label": "UnionType()",
    "kind": "Method",
    "detail": "Function (NodeT::UnionType* table = const_cast<)",
    "insertText": "UnionType(node.getTable())"
  },
  {
    "label": "getChild()",
    "kind": "Method",
    "detail": "Function (bool xInside = table [ first ] .)",
    "insertText": "getChild()->getFirstValue()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool yInside = xInside,zInside = xInside ;)",
    "insertText": "for(Index x = 0; x != (1 << NodeT::LOG2DIM); ++x)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (const int x00 =)",
    "insertText": "x(2 * NodeT::LOG2DIM)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (yInside = xInside ;)",
    "insertText": "for(Index y = 0; y != (1 << NodeT::LOG2DIM); ++y)"
  },
  {
    "label": "x00()",
    "kind": "Method",
    "detail": "Function (const Index xy0 =)",
    "insertText": "x00(y << NodeT::LOG2DIM)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (zInside = yInside ;)",
    "insertText": "for(Index z = 0; z != (1 << NodeT::LOG2DIM); ++z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index xyz = xy0 + z ;)",
    "insertText": "if(childMask.isOn(xyz))"
  },
  {
    "label": "getChild()",
    "kind": "Method",
    "detail": "Function (zInside = table [ xyz ] .)",
    "insertText": "getChild()->getLastValue()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} else { table [ xyz ] .)",
    "insertText": "setValue(zInside ? mInside : mOutside)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} } } } } else { const ValueT v = table [ 0 ] .)",
    "insertText": "getValue()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "operator()(RootT& root)"
  },
  {
    "label": "beginChildOn()",
    "kind": "Method",
    "detail": "Function (using ChildT = RootT::ChildNodeType ; std::map<Coord,ChildT*> nodeKeys ; RootT::ChildOnIter it = root .)",
    "insertText": "beginChildOn()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (const Index DIM = RootT::ChildNodeType::DIM ; std::map<Coord,ChildT*>::const_iterator b = nodeKeys .)",
    "insertText": "begin(), e = nodeKeys.end()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Coord d = b -> first - a -> first ;)",
    "insertText": "if(d[0]!=0 || d[1]!=0 || d[2]==Int32(DIM))"
  },
  {
    "label": "getLastValue()",
    "kind": "Method",
    "detail": "Function (const ValueT fill [ ] = { a -> second ->)",
    "insertText": "getLastValue(), b->second->getFirstValue()"
  },
  {
    "label": "Coord()",
    "kind": "Method",
    "detail": "Function (Coord c = a -> first +)",
    "insertText": "Coord(0u, 0u, DIM)"
  },
  {
    "label": "setBackground()",
    "kind": "Method",
    "detail": "Function (} root .)",
    "insertText": "setBackground(mOutside, false)"
  },
  {
    "label": "doSignedFloodFill()",
    "kind": "Method",
    "detail": "Function (} private : const ValueT mOutside,mInside ; const Index mMinLevel ; } ; template<TreeOrLeafManagerT> std::enable_if<std::is_signed<TreeOrLeafManagerT::ValueType>::value,void>::type)",
    "insertText": "doSignedFloodFill(TreeOrLeafManagerT& tree, typename TreeOrLeafManagerT::ValueType outsideValue, typename TreeOrLeafManagerT::ValueType insideValue, bool threaded, size_t grainSize, Index minLevel)"
  },
  {
    "label": "nodes()",
    "kind": "Method",
    "detail": "Function (tree::NodeManager<TreeOrLeafManagerT>)",
    "insertText": "nodes(tree)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (SignedFloodFillOp<TreeOrLeafManagerT>)",
    "insertText": "op(outsideValue, insideValue, minLevel)"
  },
  {
    "label": "foreachBottomUp()",
    "kind": "Method",
    "detail": "Function (nodes .)",
    "insertText": "foreachBottomUp(op, threaded, grainSize)"
  },
  {
    "label": "doSignedFloodFill()",
    "kind": "Method",
    "detail": "Function (} template<TreeOrLeafManagerT> std::enable_if<! std::is_signed<TreeOrLeafManagerT::ValueType>::value,void>::type)",
    "insertText": "doSignedFloodFill(TreeOrLeafManagerT&, const typename TreeOrLeafManagerT::ValueType&, const typename TreeOrLeafManagerT::ValueType&, bool, size_t, Index)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(TypeError, \"signedFloodFill is supported only for signed value grids\")"
  },
  {
    "label": "signedFloodFillWithValues()",
    "kind": "Method",
    "detail": "Function (} template<TreeOrLeafManagerT> void)",
    "insertText": "signedFloodFillWithValues(TreeOrLeafManagerT& tree, const typename TreeOrLeafManagerT::ValueType& outsideValue, const typename TreeOrLeafManagerT::ValueType& insideValue, bool threaded, size_t grainSize, Index minLevel)"
  },
  {
    "label": "signedFloodFill()",
    "kind": "Method",
    "detail": "Function (} template<TreeOrLeafManagerT> void)",
    "insertText": "signedFloodFill(TreeOrLeafManagerT& tree, bool threaded, size_t grainSize, Index minLevel)"
  },
  {
    "label": "root()",
    "kind": "Method",
    "detail": "Function (const TreeOrLeafManagerT::ValueType v = tree .)",
    "insertText": "root().background()"
  }
]