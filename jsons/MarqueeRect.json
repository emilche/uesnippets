[
  {
    "label": "FMarqueeRect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarqueeRect"
  },
  {
    "label": "FMarqueeRect()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / SlateRect . h \" struct FMarqueeRect { FVector2D StartPoint ; FVector2D EndPoint ;)",
    "insertText": "FMarqueeRect(FVector2D InStartPoint = FVector2D::ZeroVector ) : StartPoint( InStartPoint ) , EndPoint( InStartPoint)"
  },
  {
    "label": "UpdateEndPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateEndPoint(FVector2D NewEndPoint)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (EndPoint = NewEndPoint ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetUpperLeft()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetUpperLeft()"
  },
  {
    "label": "GetLowerRight()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetLowerRight()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetSize()"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (FVector2D SignedSize = EndPoint - StartPoint ; return)",
    "insertText": "FVector2D(FMath::Abs(SignedSize.X), FMath::Abs(SignedSize.Y))"
  },
  {
    "label": "ToSlateRect()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "ToSlateRect()"
  }
]