[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UDecalComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDecalComponent"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "UPhysicalMaterialMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterialMask"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "USubsurfaceProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USubsurfaceProfile"
  },
  {
    "label": "USpecularProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USpecularProfile"
  },
  {
    "label": "EAspectRatioAxisConstraint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAspectRatioAxisConstraint"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAttachmentTransformRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttachmentTransformRules"
  },
  {
    "label": "FDetachmentTransformRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDetachmentTransformRules"
  },
  {
    "label": "ESceneDepthPriorityGroup",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESceneDepthPriorityGroup"
  },
  {
    "label": "EIndirectLightingCacheQuality",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EIndirectLightingCacheQuality"
  },
  {
    "label": "EOcclusionCombineMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOcclusionCombineMode"
  },
  {
    "label": "EBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendMode"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "EMaterialFloatPrecisionMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialFloatPrecisionMode"
  },
  {
    "label": "ESamplerSourceMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESamplerSourceMode"
  },
  {
    "label": "ETextureMipValueMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextureMipValueMode"
  },
  {
    "label": "ETranslucencyLightingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETranslucencyLightingMode"
  },
  {
    "label": "ERefractionMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERefractionMode"
  },
  {
    "label": "ERefractionCoverageMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERefractionCoverageMode"
  },
  {
    "label": "EPixelDepthOffsetMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPixelDepthOffsetMode"
  },
  {
    "label": "ESceneCaptureSource",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESceneCaptureSource"
  },
  {
    "label": "ESceneCaptureCompositeMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESceneCaptureCompositeMode"
  },
  {
    "label": "FLightingChannels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightingChannels"
  },
  {
    "label": "EMobileLocalLightSetting",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMobileLocalLightSetting"
  },
  {
    "label": "ETrailWidthMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETrailWidthMode"
  },
  {
    "label": "EMaterialShadingModel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialShadingModel"
  },
  {
    "label": "FMaterialShadingModelField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShadingModelField"
  },
  {
    "label": "ESubstrateShadingModel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESubstrateShadingModel"
  },
  {
    "label": "FSubstrateMaterialInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstrateMaterialInfo"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "EMaterialSamplerType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialSamplerType"
  },
  {
    "label": "EMaterialStencilCompare",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialStencilCompare"
  },
  {
    "label": "EMaterialShadingRate",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialShadingRate"
  },
  {
    "label": "ELightingBuildQuality",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELightingBuildQuality"
  },
  {
    "label": "EMovementMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMovementMode"
  },
  {
    "label": "ECollisionChannel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionChannel"
  },
  {
    "label": "EOverlapFilterOption",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOverlapFilterOption"
  },
  {
    "label": "EObjectTypeQuery",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EObjectTypeQuery"
  },
  {
    "label": "ETraceTypeQuery",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETraceTypeQuery"
  },
  {
    "label": "ECollisionResponse",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionResponse"
  },
  {
    "label": "EFilterInterpolationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFilterInterpolationType"
  },
  {
    "label": "FResponseChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResponseChannel"
  },
  {
    "label": "FCollisionResponseContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseContainer"
  },
  {
    "label": "UCollisionProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCollisionProfile"
  },
  {
    "label": "ETimelineSigType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETimelineSigType"
  },
  {
    "label": "FCollisionEnabledMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionEnabledMask"
  },
  {
    "label": "FRigidBodyErrorCorrection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRigidBodyErrorCorrection"
  },
  {
    "label": "FRigidBodyContactInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRigidBodyContactInfo"
  },
  {
    "label": "FCollisionImpactData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionImpactData"
  },
  {
    "label": "FFractureEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFractureEffect"
  },
  {
    "label": "UParticleSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystem"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "FBasedPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBasedPosition"
  },
  {
    "label": "FRotationConversionCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRotationConversionCache"
  },
  {
    "label": "FPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPayload"
  },
  {
    "label": "FSubtitleCue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubtitleCue"
  },
  {
    "label": "FLightmassLightSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightmassLightSettings"
  },
  {
    "label": "FLightmassPointLightSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightmassPointLightSettings"
  },
  {
    "label": "FLightmassDirectionalLightSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightmassDirectionalLightSettings"
  },
  {
    "label": "FLightmassPrimitiveSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightmassPrimitiveSettings"
  },
  {
    "label": "FLightmassDebugOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightmassDebugOptions"
  },
  {
    "label": "FSwarmDebugOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSwarmDebugOptions"
  },
  {
    "label": "ELightMapPaddingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELightMapPaddingType"
  },
  {
    "label": "EShadowMapFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShadowMapFlags"
  },
  {
    "label": "FMTDResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMTDResult"
  },
  {
    "label": "FAnimSlotDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSlotDesc"
  },
  {
    "label": "FAnimUpdateRateParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimUpdateRateParameters"
  },
  {
    "label": "EOptimizeMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOptimizeMode"
  },
  {
    "label": "FPOV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPOV"
  },
  {
    "label": "FMeshBuildSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBuildSettings"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "FSkeletalMeshBuildSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshBuildSettings"
  },
  {
    "label": "FMeshDisplacementMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDisplacementMap"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FMeshNaniteSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshNaniteSettings"
  },
  {
    "label": "FDisplacementScaling",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplacementScaling"
  },
  {
    "label": "FDisplacementFadeRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplacementFadeRange"
  },
  {
    "label": "ENetRole",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENetRole"
  },
  {
    "label": "ENetDormancy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENetDormancy"
  },
  {
    "label": "EWalkableSlopeBehavior",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWalkableSlopeBehavior"
  },
  {
    "label": "FWalkableSlopeOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWalkableSlopeOverride"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FReplicationFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationFlags"
  },
  {
    "label": "FConstrainComponentPropName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstrainComponentPropName"
  },
  {
    "label": "FBaseComponentReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBaseComponentReference"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "FComponentReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentReference"
  },
  {
    "label": "FSoftComponentReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftComponentReference"
  },
  {
    "label": "UEngineTypes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEngineTypes"
  },
  {
    "label": "FComponentSocketDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentSocketDescription"
  },
  {
    "label": "FCollectionReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectionReference"
  },
  {
    "label": "FRedirector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRedirector"
  },
  {
    "label": "FDebugFloatHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugFloatHistory"
  },
  {
    "label": "FDepthFieldGlowInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepthFieldGlowInfo"
  },
  {
    "label": "FFontRenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFontRenderInfo"
  },
  {
    "label": "FCanvasUVTri",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCanvasUVTri"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "FUserActivity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUserActivity"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / TimerHandle . h \" # include \" EngineTypes . generated . h \" class AActor ; class UDecalComponent ; class UPhysicalMaterial ; class UPhysicalMaterialMask ; class UPrimitiveComponent ; class USceneComponent ; class USubsurfaceProfile ; class USpecularProfile ; enum { NumInlinedActorComponents = 2 4 } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (AspectRatio_MaintainYFOV)",
    "insertText": "UMETA(DisplayName=\"Maintain Y-Axis FOV\"), AspectRatio_MaintainXFOV UMETA(DisplayName=\"Maintain X-Axis FOV\"), AspectRatio_MajorAxisFOV UMETA(DisplayName=\"Maintain Major Axis FOV\")"
  },
  {
    "label": "FAttachmentTransformRules()",
    "kind": "Method",
    "detail": "Function (KeepRelative,KeepWorld,SnapToTarget,} ; struct FAttachmentTransformRules { FAttachmentTransformRules KeepRelativeTransform ; FAttachmentTransformRules KeepWorldTransform ; FAttachmentTransformRules SnapToTargetNotIncludingScale ; FAttachmentTransformRules SnapToTargetIncludingScale ;)",
    "insertText": "FAttachmentTransformRules(EAttachmentRule InRule, bool bInWeldSimulatedBodies) : LocationRule(InRule) , RotationRule(InRule) , ScaleRule(InRule) , bWeldSimulatedBodies(bInWeldSimulatedBodies)"
  },
  {
    "label": "FAttachmentTransformRules()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAttachmentTransformRules(EAttachmentRule InLocationRule, EAttachmentRule InRotationRule, EAttachmentRule InScaleRule, bool bInWeldSimulatedBodies) : LocationRule(InLocationRule) , RotationRule(InRotationRule) , ScaleRule(InScaleRule) , bWeldSimulatedBodies(bInWeldSimulatedBodies)"
  },
  {
    "label": "FDetachmentTransformRules()",
    "kind": "Method",
    "detail": "Function (KeepRelative,KeepWorld,} ; struct FDetachmentTransformRules { FDetachmentTransformRules KeepRelativeTransform ; FDetachmentTransformRules KeepWorldTransform ;)",
    "insertText": "FDetachmentTransformRules(EDetachmentRule InRule, bool bInCallModify) : LocationRule(InRule) , RotationRule(InRule) , ScaleRule(InRule) , bCallModify(bInCallModify)"
  },
  {
    "label": "FDetachmentTransformRules()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDetachmentTransformRules(EDetachmentRule InLocationRule, EDetachmentRule InRotationRule, EDetachmentRule InScaleRule, bool bInCallModify) : LocationRule(InLocationRule) , RotationRule(InRotationRule) , ScaleRule(InScaleRule) , bCallModify(bInCallModify)"
  },
  {
    "label": "FDetachmentTransformRules()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDetachmentTransformRules(const FAttachmentTransformRules& AttachmentRules, bool bInCallModify) : LocationRule(AttachmentRules.LocationRule == EAttachmentRule::KeepRelative ? EDetachmentRule::KeepRelative : EDetachmentRule::KeepWorld) , RotationRule(AttachmentRules.RotationRule == EAttachmentRule::KeepRelative ? EDetachmentRule::KeepRelative : EDetachmentRule::KeepWorld) , ScaleRule(AttachmentRules.ScaleRule == EAttachmentRule::KeepRelative ? EDetachmentRule::KeepRelative : EDetachmentRule::KeepWorld) , bCallModify(bInCallModify)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { KeepRelativeOffset,KeepWorldPosition,SnapToTarget)",
    "insertText": "UMETA(DisplayName = \"Snap to Target, Keep World Scale\"), SnapToTargetIncludingScale UMETA(DisplayName = \"Snap to Target, Including Scale\")"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (OCM_Minimum,OCM_Multiply,OCM_MAX,} ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (BLEND_Opaque)",
    "insertText": "UMETA(DisplayName=\"Opaque\"), BLEND_Masked UMETA(DisplayName=\"Masked\"), BLEND_Translucent UMETA(DisplayName=\"Translucent\"), BLEND_Additive UMETA(DisplayName=\"Additive\"), BLEND_Modulate UMETA(DisplayName=\"Modulate\"), BLEND_AlphaComposite UMETA(DisplayName = \"AlphaComposite (Premultiplied Alpha)\"), BLEND_AlphaHoldout UMETA(DisplayName = \"AlphaHoldout\"), BLEND_TranslucentColoredTransmittance UMETA(DisplayName = \"SUBSTRATE_ONLY - Translucent - Colored Transmittance\"), BLEND_MAX UMETA(Hidden), BLEND_TranslucentGreyTransmittance = BLEND_Translucent UMETA(Hidden, DisplayName = \"Translucent - Grey Transmittance\"), BLEND_ColoredTransmittanceOnly = BLEND_Modulate UMETA(Hidden, DisplayName = \"Colored Transmittance Only\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MFPM_Default)",
    "insertText": "UMETA(DisplayName = \"Default\"), MFPM_Full_MaterialExpressionOnly UMETA(DisplayName = \"Use Full-precision for MaterialExpressions only\"), MFPM_Full UMETA(DisplayName = \"Use Full-precision for every float\"), MFPM_Half UMETA(DisplayName = \"Use Half-precision\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (SSM_FromTextureAsset)",
    "insertText": "UMETA(DisplayName=\"From texture asset\"), SSM_Wrap_WorldGroupSettings UMETA(DisplayName=\"Shared: Wrap\"), SSM_Clamp_WorldGroupSettings UMETA(DisplayName=\"Shared: Clamp\"), SSM_TerrainWeightmapGroupSettings UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (TMVM_None)",
    "insertText": "UMETA(DisplayName=\"None (use computed mip level)\"), TMVM_MipLevel UMETA(DisplayName=\"MipLevel (absolute, 0 is full resolution)\"), TMVM_MipBias UMETA(DisplayName=\"MipBias (relative to the computed mip level)\"), TMVM_Derivative UMETA(DisplayName=\"Derivative (explicit derivative to compute mip level)\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (TLM_VolumetricNonDirectional)",
    "insertText": "UMETA(DisplayName=\"Volumetric NonDirectional\"), TLM_VolumetricDirectional UMETA(DisplayName=\"Volumetric Directional\"), TLM_VolumetricPerVertexNonDirectional UMETA(DisplayName=\"Volumetric PerVertex NonDirectional\"), TLM_VolumetricPerVertexDirectional UMETA(DisplayName=\"Volumetric PerVertex Directional\"), TLM_Surface UMETA(DisplayName=\"Surface TranslucencyVolume\"), TLM_SurfacePerPixelLighting UMETA(DisplayName=\"Surface ForwardShading\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (RM_IndexOfRefraction)",
    "insertText": "UMETA(DisplayName=\"Index Of Refraction\"), RM_PixelNormalOffset UMETA(DisplayName=\"Pixel Normal Offset\"), RM_2DOffset UMETA(DisplayName = \"2D Offset\"), RM_None UMETA(DisplayName = \"None\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (RCM_CoverageIgnored)",
    "insertText": "UMETA(DisplayName = \"Coverage Ignored\"), RCM_CoverageAccountedFor UMETA(DisplayName = \"Coverage Accounted For\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (PDOM_Legacy)",
    "insertText": "UMETA(DisplayName = \"Legacy\"), PDOM_AlongCameraVector UMETA(DisplayName = \"Along Camera Vector\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { None,Lumen,ScreenSpace)",
    "insertText": "UMETA(DisplayName=\"Screen Space (Beta)\"), Plugin UMETA(DisplayName=\"Plugin\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { None,Lumen,ScreenSpace)",
    "insertText": "UMETA(DisplayName=\"Screen Space\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { ShadowMaps)",
    "insertText": "UMETA(DisplayName = \"Shadow Maps\"), VirtualShadowMaps UMETA(DisplayName = \"Virtual Shadow Maps\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (SCS_SceneColorHDR)",
    "insertText": "UMETA(DisplayName=\"SceneColor (HDR) in RGB, Inv Opacity in A\"), SCS_SceneColorHDRNoAlpha UMETA(DisplayName=\"SceneColor (HDR) in RGB, 0 in A\"), SCS_FinalColorLDR UMETA(DisplayName=\"Final Color (LDR) in RGB\"), SCS_SceneColorSceneDepth UMETA(DisplayName=\"SceneColor (HDR) in RGB, SceneDepth in A\"), SCS_SceneDepth UMETA(DisplayName=\"SceneDepth in R\"), SCS_DeviceDepth UMETA(DisplayName = \"DeviceDepth in RGB\"), SCS_Normal UMETA(DisplayName=\"Normal in RGB (Deferred Renderer only)\"), SCS_BaseColor UMETA(DisplayName = \"BaseColor in RGB (Deferred Renderer only)\"), SCS_FinalColorHDR UMETA(DisplayName = \"Final Color (HDR) in Linear Working Color Space\"), SCS_FinalToneCurveHDR UMETA(DisplayName = \"Final Color (with tone curve) in Linear sRGB gamut\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (SCCM_Overwrite)",
    "insertText": "UMETA(DisplayName=\"Overwrite\"), SCCM_Additive UMETA(DisplayName=\"Additive\"), SCCM_Composite UMETA(DisplayName=\"Composite\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# define NUM_LIGHTING_CHANNELS 3)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FLightingChannels() : bChannel0(true), bChannel1(false), bChannel2(false)"
  },
  {
    "label": "GetLightingChannelMaskForStruct()",
    "kind": "Method",
    "detail": "Function (} ; uint8)",
    "insertText": "GetLightingChannelMaskForStruct(FLightingChannels Value)"
  },
  {
    "label": "GetDefaultLightingChannelMask()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetDefaultLightingChannelMask()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Force8BitsPerChannel = 0)",
    "insertText": "UMETA(DisplayName = \"Force 8 Bits Per Channel\"), Default = 1, HighPrecisionNormals = 3, Force16BitsPerChannel = 5 UMETA(DisplayName = \"Force 16 Bits Per Channel\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (LOCAL_LIGHTS_DISABLED)",
    "insertText": "UMETA(DisplayName = \"Local Lights Disabled\"), LOCAL_LIGHTS_ENABLED UMETA(DisplayName = \"Local Lights Enabled\"), LOCAL_LIGHTS_BUFFER UMETA(DisplayName = \"Local Lights Buffer Enabled\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (ETrailWidthMode_FromCentre)",
    "insertText": "UMETA(DisplayName = \"From Centre\"), ETrailWidthMode_FromFirst UMETA(DisplayName = \"From First Socket\"), ETrailWidthMode_FromSecond UMETA(DisplayName = \"From Second Socket\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { SceneDepth)",
    "insertText": "UMETA(DisplayName=\"Scene Depth\"), DistanceField UMETA(DisplayName=\"Distance Field\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MSM_Unlit)",
    "insertText": "UMETA(DisplayName=\"Unlit\"), MSM_DefaultLit UMETA(DisplayName=\"Default Lit\"), MSM_Subsurface UMETA(DisplayName=\"Subsurface\"), MSM_PreintegratedSkin UMETA(DisplayName=\"Preintegrated Skin\"), MSM_ClearCoat UMETA(DisplayName=\"Clear Coat\"), MSM_SubsurfaceProfile UMETA(DisplayName=\"Subsurface Profile\"), MSM_TwoSidedFoliage UMETA(DisplayName=\"Two Sided Foliage\"), MSM_Hair UMETA(DisplayName=\"Hair\"), MSM_Cloth UMETA(DisplayName=\"Cloth\"), MSM_Eye UMETA(DisplayName=\"Eye\"), MSM_SingleLayerWater UMETA(DisplayName=\"SingleLayerWater\"), MSM_ThinTranslucent UMETA(DisplayName=\"Thin Translucent\"), MSM_Strata UMETA(DisplayName=\"Substrate\", Hidden), MSM_NUM UMETA(Hidden), MSM_FromMaterialExpression UMETA(DisplayName=\"From Material Expression\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: FMaterialShadingModelField()"
  },
  {
    "label": "FMaterialShadingModelField()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialShadingModelField(EMaterialShadingModel InShadingModel)"
  },
  {
    "label": "AddShadingModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddShadingModel(InShadingModel)"
  },
  {
    "label": "AddShadingModel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddShadingModel(EMaterialShadingModel InShadingModel)"
  },
  {
    "label": "ShadingModelField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShadingModelField(1 << (uint16)InShadingModel)"
  },
  {
    "label": "RemoveShadingModel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveShadingModel(EMaterialShadingModel InShadingModel)"
  },
  {
    "label": "ClearShadingModels()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearShadingModels()"
  },
  {
    "label": "HasAnyShadingModel()",
    "kind": "Method",
    "detail": "Function (ShadingModelField = 0 ; } bool)",
    "insertText": "HasAnyShadingModel(const TArray<EMaterialShadingModel>& InShadingModels)"
  },
  {
    "label": "HasOnlyShadingModel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasOnlyShadingModel(EMaterialShadingModel InShadingModel)"
  },
  {
    "label": "IsUnlit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUnlit()"
  },
  {
    "label": "IsLit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLit()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetShadingModelField()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "GetShadingModelField()"
  },
  {
    "label": "CountShadingModels()",
    "kind": "Method",
    "detail": "Function (ShadingModelField = InShadingModelField ; } int32)",
    "insertText": "CountShadingModels()"
  },
  {
    "label": "GetFirstShadingModel()",
    "kind": "Method",
    "detail": "Function (} EMaterialShadingModel)",
    "insertText": "GetFirstShadingModel()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMaterialShadingModelField& Other)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; enum ESubstrateShadingModel : int { SSM_Unlit,SSM_DefaultLit,SSM_ThinTranslucent,SSM_SubsurfaceMFP,SSM_SubsurfaceProfile,SSM_SubsurfaceWrap,SSM_SubsurfaceThinTwoSided,SSM_VolumetricFogCloud,SSM_Hair,SSM_Eye,SSM_Cloth,SSM_ClearCoat,SSM_SingleLayerWater,SSM_LightFunction,SSM_PostProcess,SSM_Decal,SSM_UI,SSM_NUM,} ;)",
    "insertText": "static_assert(SSM_NUM <= 32, \"Do not exceed 32 shading models without expanding FSubstrateMaterialInfo::ShadingModelField to support more bits!\")"
  },
  {
    "label": "FSubstrateMaterialInfo()",
    "kind": "Method",
    "detail": "Function (# define SUBSTRATE_TREE_MAX_DEPTH 4 8 struct FSubstrateMaterialInfo { public :)",
    "insertText": "FSubstrateMaterialInfo(bool bGatherGuids = false)"
  },
  {
    "label": "FSubstrateMaterialInfo()",
    "kind": "Method",
    "detail": "Function (bGatherMaterialExpressionGuids = bGatherGuids ; })",
    "insertText": "FSubstrateMaterialInfo(ESubstrateShadingModel InShadingModel)"
  },
  {
    "label": "AddShadingModel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddShadingModel(ESubstrateShadingModel InShadingModel)"
  },
  {
    "label": "ShadingModelField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShadingModelField(1u << (uint32)InShadingModel)"
  },
  {
    "label": "SetSingleShadingModel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSingleShadingModel(ESubstrateShadingModel InShadingModel)"
  },
  {
    "label": "HasShadingModel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasShadingModel(ESubstrateShadingModel InShadingModel)"
  },
  {
    "label": "HasOnlyShadingModel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasOnlyShadingModel(ESubstrateShadingModel InShadingModel)"
  },
  {
    "label": "AddSubsurfaceProfile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSubsurfaceProfile(USubsurfaceProfile* InProfile)"
  },
  {
    "label": "CountSubsurfaceProfiles()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CountSubsurfaceProfiles()"
  },
  {
    "label": "GetSubsurfaceProfile()",
    "kind": "Method",
    "detail": "Function (} USubsurfaceProfile*)",
    "insertText": "GetSubsurfaceProfile(int32 Index)"
  },
  {
    "label": "AddSpecularProfile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSpecularProfile(USpecularProfile* InProfile)"
  },
  {
    "label": "CountSpecularProfiles()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CountSpecularProfiles()"
  },
  {
    "label": "GetSpecularProfile()",
    "kind": "Method",
    "detail": "Function (} USpecularProfile*)",
    "insertText": "GetSpecularProfile(int32 Index)"
  },
  {
    "label": "SetShadingModelFromExpression()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShadingModelFromExpression(bool bIn)"
  },
  {
    "label": "HasShadingModelFromExpression()",
    "kind": "Method",
    "detail": "Function (bHasShadingModelFromExpression = bIn ? 1 u : 0 u ; } bool)",
    "insertText": "HasShadingModelFromExpression()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MaterialExpressionGuids .)",
    "insertText": "Add(In)"
  },
  {
    "label": "GetGuids()",
    "kind": "Method",
    "detail": "Function (} } const TArray<FGuid>&)",
    "insertText": "GetGuids()"
  },
  {
    "label": "ConnectedPropertyMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectedPropertyMask(1ull << In)"
  },
  {
    "label": "HasPropertyConnected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPropertyConnected(uint64 In)"
  },
  {
    "label": "HasPropertyConnected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPropertyConnected(uint64 InConnectedPropertyMask, uint64 In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSubstrateMaterialInfo& Other)"
  },
  {
    "label": "PushSubstrateTreeStack()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR bool)",
    "insertText": "PushSubstrateTreeStack()"
  },
  {
    "label": "bOutOfStackDepthWhenParsing()",
    "kind": "Method",
    "detail": "Function (bOutOfStackDepthWhenParsing =)",
    "insertText": "bOutOfStackDepthWhenParsing(++ParsingStackDepth > SUBSTRATE_TREE_MAX_DEPTH)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ParsingStackDepth - - ;)",
    "insertText": "check(ParsingStackDepth >= 0)"
  },
  {
    "label": "GetSubstrateTreeOutOfStackDepthOccurred()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetSubstrateTreeOutOfStackDepthOccurred()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (SAMPLERTYPE_Color)",
    "insertText": "UMETA(DisplayName=\"Color\"), SAMPLERTYPE_Grayscale UMETA(DisplayName=\"Grayscale\"), SAMPLERTYPE_Alpha UMETA(DisplayName=\"Alpha\"), SAMPLERTYPE_Normal UMETA(DisplayName=\"Normal\"), SAMPLERTYPE_Masks UMETA(DisplayName=\"Masks\"), SAMPLERTYPE_DistanceFieldFont UMETA(DisplayName=\"Distance Field Font\"), SAMPLERTYPE_LinearColor UMETA(DisplayName = \"Linear Color\"), SAMPLERTYPE_LinearGrayscale UMETA(DisplayName = \"Linear Grayscale\"), SAMPLERTYPE_Data UMETA(DisplayName = \"Data\"), SAMPLERTYPE_External UMETA(DisplayName = \"External\"), SAMPLERTYPE_VirtualColor UMETA(DisplayName = \"Virtual Color\"), SAMPLERTYPE_VirtualGrayscale UMETA(DisplayName = \"Virtual Grayscale\"), SAMPLERTYPE_VirtualAlpha UMETA(DisplayName = \"Virtual Alpha\"), SAMPLERTYPE_VirtualNormal UMETA(DisplayName = \"Virtual Normal\"), SAMPLERTYPE_VirtualMasks UMETA(DisplayName = \"Virtual Mask\"), SAMPLERTYPE_VirtualLinearColor UMETA(DisplayName = \"Virtual Linear Color\"), SAMPLERTYPE_VirtualLinearGrayscale UMETA(DisplayName = \"Virtual Linear Grayscale\")"
  },
  {
    "label": "IsVirtualSamplerType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVirtualSamplerType(EMaterialSamplerType Value)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MSC_Less)",
    "insertText": "UMETA(DisplayName = \"Less Than\"), MSC_LessEqual UMETA(DisplayName = \"Less Than or Equal\"), MSC_Greater UMETA(DisplayName = \"Greater Than\"), MSC_GreaterEqual UMETA(DisplayName = \"Greater Than or Equal\"), MSC_Equal UMETA(DisplayName = \"Equal\"), MSC_NotEqual UMETA(DisplayName = \"Not Equal\"), MSC_Never UMETA(DisplayName = \"Never\"), MSC_Always UMETA(DisplayName = \"Always\"), MSC_Count UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MSR_1x1)",
    "insertText": "UMETA(DisplayName = \"1x1\"), MSR_2x1 UMETA(DisplayName = \"2x1\"), MSR_1x2 UMETA(DisplayName = \"1x2\"), MSR_2x2 UMETA(DisplayName = \"2x2\"), MSR_4x2 UMETA(DisplayName = \"4x2\"), MSR_2x4 UMETA(DisplayName = \"2x4\"), MSR_4x4 UMETA(DisplayName = \"4x4\"), MSR_Count UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Quality_Preview)",
    "insertText": "UMETA(DisplayName = \"Preview\"), Quality_Medium UMETA(DisplayName = \"Medium\"), Quality_High UMETA(DisplayName = \"High\"), Quality_Production UMETA(DisplayName = \"Production\"), Quality_MAX UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MOVE_None)",
    "insertText": "UMETA(DisplayName=\"None\"), MOVE_Walking UMETA(DisplayName=\"Walking\"), MOVE_NavWalking UMETA(DisplayName=\"Navmesh Walking\"), MOVE_Falling UMETA(DisplayName=\"Falling\"), MOVE_Swimming UMETA(DisplayName=\"Swimming\"), MOVE_Flying UMETA(DisplayName=\"Flying\"), MOVE_Custom UMETA(DisplayName=\"Custom\"), MOVE_MAX UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Disabled)",
    "insertText": "UMETA(DisplayName=\"Disabled\"), Linear UMETA(DisplayName=\"Linear\"), Exponential UMETA(DisplayName=\"Exponential\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (ECC_WorldStatic)",
    "insertText": "UMETA(DisplayName=\"WorldStatic\"), ECC_WorldDynamic UMETA(DisplayName=\"WorldDynamic\"), ECC_Pawn UMETA(DisplayName=\"Pawn\"), ECC_Visibility UMETA(DisplayName=\"Visibility\" , TraceQuery=\"1\"), ECC_Camera UMETA(DisplayName=\"Camera\" , TraceQuery=\"1\"), ECC_PhysicsBody UMETA(DisplayName=\"PhysicsBody\"), ECC_Vehicle UMETA(DisplayName=\"Vehicle\"), ECC_Destructible UMETA(DisplayName=\"Destructible\"), ECC_EngineTraceChannel1 UMETA(Hidden), ECC_EngineTraceChannel2 UMETA(Hidden), ECC_EngineTraceChannel3 UMETA(Hidden), ECC_EngineTraceChannel4 UMETA(Hidden), ECC_EngineTraceChannel5 UMETA(Hidden), ECC_EngineTraceChannel6 UMETA(Hidden), ECC_GameTraceChannel1 UMETA(Hidden), ECC_GameTraceChannel2 UMETA(Hidden), ECC_GameTraceChannel3 UMETA(Hidden), ECC_GameTraceChannel4 UMETA(Hidden), ECC_GameTraceChannel5 UMETA(Hidden), ECC_GameTraceChannel6 UMETA(Hidden), ECC_GameTraceChannel7 UMETA(Hidden), ECC_GameTraceChannel8 UMETA(Hidden), ECC_GameTraceChannel9 UMETA(Hidden), ECC_GameTraceChannel10 UMETA(Hidden), ECC_GameTraceChannel11 UMETA(Hidden), ECC_GameTraceChannel12 UMETA(Hidden), ECC_GameTraceChannel13 UMETA(Hidden), ECC_GameTraceChannel14 UMETA(Hidden), ECC_GameTraceChannel15 UMETA(Hidden), ECC_GameTraceChannel16 UMETA(Hidden), ECC_GameTraceChannel17 UMETA(Hidden), ECC_GameTraceChannel18 UMETA(Hidden), ECC_OverlapAll_Deprecated UMETA(Hidden)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnConstraintBroken, int32)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnConstraintViolated, int32 , float , float)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnPlasticDeformation, int32)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (OverlapFilter_All)",
    "insertText": "UMETA(DisplayName=\"AllObjects\"), OverlapFilter_DynamicOnly UMETA(DisplayName=\"AllDynamicObjects\"), OverlapFilter_StaticOnly UMETA(DisplayName=\"AllStaticObjects\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (ObjectTypeQuery1)",
    "insertText": "UMETA(Hidden), ObjectTypeQuery2 UMETA(Hidden), ObjectTypeQuery3 UMETA(Hidden), ObjectTypeQuery4 UMETA(Hidden), ObjectTypeQuery5 UMETA(Hidden), ObjectTypeQuery6 UMETA(Hidden), ObjectTypeQuery7 UMETA(Hidden), ObjectTypeQuery8 UMETA(Hidden), ObjectTypeQuery9 UMETA(Hidden), ObjectTypeQuery10 UMETA(Hidden), ObjectTypeQuery11 UMETA(Hidden), ObjectTypeQuery12 UMETA(Hidden), ObjectTypeQuery13 UMETA(Hidden), ObjectTypeQuery14 UMETA(Hidden), ObjectTypeQuery15 UMETA(Hidden), ObjectTypeQuery16 UMETA(Hidden), ObjectTypeQuery17 UMETA(Hidden), ObjectTypeQuery18 UMETA(Hidden), ObjectTypeQuery19 UMETA(Hidden), ObjectTypeQuery20 UMETA(Hidden), ObjectTypeQuery21 UMETA(Hidden), ObjectTypeQuery22 UMETA(Hidden), ObjectTypeQuery23 UMETA(Hidden), ObjectTypeQuery24 UMETA(Hidden), ObjectTypeQuery25 UMETA(Hidden), ObjectTypeQuery26 UMETA(Hidden), ObjectTypeQuery27 UMETA(Hidden), ObjectTypeQuery28 UMETA(Hidden), ObjectTypeQuery29 UMETA(Hidden), ObjectTypeQuery30 UMETA(Hidden), ObjectTypeQuery31 UMETA(Hidden), ObjectTypeQuery32 UMETA(Hidden), ObjectTypeQuery_MAX UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (TraceTypeQuery1)",
    "insertText": "UMETA(Hidden), TraceTypeQuery2 UMETA(Hidden), TraceTypeQuery3 UMETA(Hidden), TraceTypeQuery4 UMETA(Hidden), TraceTypeQuery5 UMETA(Hidden), TraceTypeQuery6 UMETA(Hidden), TraceTypeQuery7 UMETA(Hidden), TraceTypeQuery8 UMETA(Hidden), TraceTypeQuery9 UMETA(Hidden), TraceTypeQuery10 UMETA(Hidden), TraceTypeQuery11 UMETA(Hidden), TraceTypeQuery12 UMETA(Hidden), TraceTypeQuery13 UMETA(Hidden), TraceTypeQuery14 UMETA(Hidden), TraceTypeQuery15 UMETA(Hidden), TraceTypeQuery16 UMETA(Hidden), TraceTypeQuery17 UMETA(Hidden), TraceTypeQuery18 UMETA(Hidden), TraceTypeQuery19 UMETA(Hidden), TraceTypeQuery20 UMETA(Hidden), TraceTypeQuery21 UMETA(Hidden), TraceTypeQuery22 UMETA(Hidden), TraceTypeQuery23 UMETA(Hidden), TraceTypeQuery24 UMETA(Hidden), TraceTypeQuery25 UMETA(Hidden), TraceTypeQuery26 UMETA(Hidden), TraceTypeQuery27 UMETA(Hidden), TraceTypeQuery28 UMETA(Hidden), TraceTypeQuery29 UMETA(Hidden), TraceTypeQuery30 UMETA(Hidden), TraceTypeQuery31 UMETA(Hidden), TraceTypeQuery32 UMETA(Hidden), TraceTypeQuery_MAX UMETA(Hidden)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType, meta=(ScriptName=\"CollisionResponseType\"))"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (ECR_Ignore)",
    "insertText": "UMETA(DisplayName=\"Ignore\"), ECR_Overlap UMETA(DisplayName=\"Overlap\"), ECR_Block UMETA(DisplayName=\"Block\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (BSIT_Average)",
    "insertText": "UMETA(DisplayName = \"Averaged\"), BSIT_Linear UMETA(DisplayName = \"Linear\"), BSIT_Cubic UMETA(DisplayName = \"Cubic\"), BSIT_EaseInOut UMETA(DisplayName = \"Ease In/Out\"), BSIT_ExponentialDecay UMETA(DisplayName = \"Exponential\"), BSIT_SpringDamper UMETA(DisplayName = \"Spring Damper\")"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (namespace EWorldType { enum Type { None,Game,Editor,PIE,EditorPreview,GamePreview,GameRPC,Inactive } ; } const TCHAR*)",
    "insertText": "LexToString(const EWorldType::Type Value)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = FResponseChannel)"
  },
  {
    "label": "FResponseChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FResponseChannel() : Response(ECR_Block)"
  },
  {
    "label": "FResponseChannel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FResponseChannel(FName InChannel, ECollisionResponse InResponse ) : Channel(InChannel) , Response(InResponse)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FResponseChannel& Other)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() #if !CPP UPROPERTY(EditAnywhere, BlueprintReadOnly, Category=CollisionResponseContainer, meta=(DisplayName=\"WorldStatic\"))"
  },
  {
    "label": "FCollisionResponseContainer()",
    "kind": "Method",
    "detail": "Function (# endif union { struct { uint8 WorldStatic ; uint8 WorldDynamic ; uint8 Pawn ; uint8 Visibility ; uint8 Camera ; uint8 PhysicsBody ; uint8 Vehicle ; uint8 Destructible ; uint8 EngineTraceChannel1 ; uint8 EngineTraceChannel2 ; uint8 EngineTraceChannel3 ; uint8 EngineTraceChannel4 ; uint8 EngineTraceChannel5 ; uint8 EngineTraceChannel6 ; uint8 GameTraceChannel1 ; uint8 GameTraceChannel2 ; uint8 GameTraceChannel3 ; uint8 GameTraceChannel4 ; uint8 GameTraceChannel5 ; uint8 GameTraceChannel6 ; uint8 GameTraceChannel7 ; uint8 GameTraceChannel8 ; uint8 GameTraceChannel9 ; uint8 GameTraceChannel10 ; uint8 GameTraceChannel11 ; uint8 GameTraceChannel12 ; uint8 GameTraceChannel13 ; uint8 GameTraceChannel14 ; uint8 GameTraceChannel15 ; uint8 GameTraceChannel16 ; uint8 GameTraceChannel17 ; uint8 GameTraceChannel18 ; } ; uint8 EnumArray [ 3 2 ] ; } ;)",
    "insertText": "FCollisionResponseContainer()"
  },
  {
    "label": "FCollisionResponseContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollisionResponseContainer(ECollisionResponse DefaultResponse)"
  },
  {
    "label": "SetResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetResponse(ECollisionChannel Channel, ECollisionResponse NewResponse)"
  },
  {
    "label": "SetAllChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAllChannels(ECollisionResponse NewResponse)"
  },
  {
    "label": "ReplaceChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceChannels(ECollisionResponse OldResponse, ECollisionResponse NewResponse)"
  },
  {
    "label": "UpdateResponsesFromArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateResponsesFromArray(TArray<FResponseChannel> & ChannelResponses)"
  },
  {
    "label": "FillArrayFromResponses()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FillArrayFromResponses(TArray<FResponseChannel> & ChannelResponses)"
  },
  {
    "label": "CreateMinContainer()",
    "kind": "Method",
    "detail": "Function (FCollisionResponseContainer)",
    "insertText": "CreateMinContainer(const FCollisionResponseContainer& A, const FCollisionResponseContainer& B)"
  },
  {
    "label": "GetDefaultResponseContainer()",
    "kind": "Method",
    "detail": "Function (const struct FCollisionResponseContainer&)",
    "insertText": "GetDefaultResponseContainer()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCollisionResponseContainer& Other)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { NoCollision)",
    "insertText": "UMETA(DisplayName=\"No Collision\"), QueryOnly UMETA(DisplayName=\"Query Only (No Physics Collision)\"), PhysicsOnly UMETA(DisplayName=\"Physics Only (No Query Collision)\"), QueryAndPhysics UMETA(DisplayName=\"Collision Enabled (Query and Physics)\"), ProbeOnly UMETA(DisplayName=\"Probe Only (Contact Data, No Query or Physics Collision)\"), QueryAndProbe UMETA(DisplayName=\"Query and Probe (Query Collision and Contact Data, No Physics Collision)\")"
  },
  {
    "label": "FCollisionEnabledMask()",
    "kind": "Method",
    "detail": "Function (} struct FCollisionEnabledMask { int8 Bits ;)",
    "insertText": "FCollisionEnabledMask(int8 InBits = 0)"
  },
  {
    "label": "FCollisionEnabledMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollisionEnabledMask(ECollisionEnabled::Type CollisionEnabled)"
  },
  {
    "label": "int8()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "int8()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCollisionEnabledMask)",
    "insertText": "operator(const FCollisionEnabledMask Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCollisionEnabledMask)",
    "insertText": "operator(const ECollisionEnabled::Type Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FCollisionEnabledMask)",
    "insertText": "operator(const ECollisionEnabled::Type A, const ECollisionEnabled::Type B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCollisionEnabledMask)",
    "insertText": "operator(const ECollisionEnabled::Type A, const FCollisionEnabledMask B)"
  },
  {
    "label": "CollisionEnabledHasQuery()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CollisionEnabledHasQuery(ECollisionEnabled::Type CollisionEnabled)"
  },
  {
    "label": "CollisionEnabledHasProbe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CollisionEnabledHasProbe(ECollisionEnabled::Type CollisionEnabled)"
  },
  {
    "label": "CollisionEnabledIntersection()",
    "kind": "Method",
    "detail": "Function (} ECollisionEnabled::Type)",
    "insertText": "CollisionEnabledIntersection(ECollisionEnabled::Type CollisionEnabledA, ECollisionEnabled::Type CollisionEnabledB)"
  },
  {
    "label": "IndexA()",
    "kind": "Method",
    "detail": "Function (using namespace ECollisionEnabled ; ECollisionEnabled::Type IntersectionMatrix [ 5 ] [ 5 ] = { { QueryOnly,NoCollision,QueryOnly,NoCollision,QueryOnly },{ NoCollision,PhysicsOnly,PhysicsOnly,ProbeOnly,ProbeOnly },{ QueryOnly,PhysicsOnly,QueryAndPhysics,ProbeOnly,QueryAndProbe },{ NoCollision,ProbeOnly,ProbeOnly,ProbeOnly,ProbeOnly },{ QueryOnly,ProbeOnly,QueryAndProbe,ProbeOnly,QueryAndProbe } } ; const int32)",
    "insertText": "IndexA(int32)"
  },
  {
    "label": "IndexB()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "IndexB(int32)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const int32 QueryBit = static_cast<)",
    "insertText": "uint32(bQuery)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const int32 PhysicsBit = static_cast<)",
    "insertText": "uint32(bPhysics)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const int32 ProbeBit = static_cast<)",
    "insertText": "uint32(bProbe)"
  },
  {
    "label": "CollisionEnabledToFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CollisionEnabledToFlags(const ECollisionEnabled::Type CollisionEnabled, bool& bQuery, bool& bPhysics, bool& bProbe)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 Bits = static_cast<)",
    "insertText": "int32(CollisionEnabled)"
  },
  {
    "label": "bQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bQuery((Bits & 0x1) != 0)"
  },
  {
    "label": "bPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bPhysics((Bits & 0x2) != 0)"
  },
  {
    "label": "bProbe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bProbe((Bits & 0x4) != 0)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = \"Replication\")"
  },
  {
    "label": "FRigidBodyErrorCorrection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRigidBodyErrorCorrection() : PingExtrapolation(0.1f) , PingLimit(100.f) , ErrorPerLinearDifference(1.0f) , ErrorPerAngularDifference(1.0f) , MaxRestoredStateError(1.0f) , MaxLinearHardSnapDistance(400.f) , PositionLerp(0.0f) , AngleLerp(0.4f) , LinearVelocityCoefficient(100.0f) , AngularVelocityCoefficient(10.0f) , ErrorAccumulationSeconds(0.5f) , ErrorAccumulationDistanceSq(15.0f) , ErrorAccumulationSimilarity(100.0f)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FRigidBodyContactInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRigidBodyContactInfo() : ContactPosition(ForceInit) , ContactNormal(ForceInit) , ContactPenetration(0) , bContactProbe(false)"
  },
  {
    "label": "FRigidBodyContactInfo()",
    "kind": "Method",
    "detail": "Function (PhysMaterial [ ElementIndex ] = nullptr ; } })",
    "insertText": "FRigidBodyContactInfo(const FVector& InContactPosition, const FVector& InContactNormal, float InPenetration, bool bInProbe, UPhysicalMaterial* InPhysMat0, UPhysicalMaterial* InPhysMat1 ) : ContactPosition(InContactPosition) , ContactNormal(InContactNormal) , ContactPenetration(InPenetration) , bContactProbe(bInProbe)"
  },
  {
    "label": "SwapOrder()",
    "kind": "Method",
    "detail": "Function (PhysMaterial [ 0 ] = InPhysMat0 ; PhysMaterial [ 1 ] = InPhysMat1 ; } void)",
    "insertText": "SwapOrder()"
  },
  {
    "label": "FCollisionImpactData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollisionImpactData() : TotalNormalImpulse(ForceInit) , TotalFrictionImpulse(ForceInit) , bIsVelocityDeltaUnderThreshold(true)"
  },
  {
    "label": "SwapContactOrders()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapContactOrders()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=FractureEffect)"
  },
  {
    "label": "FFractureEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFractureEffect() : ParticleSystem(nullptr) , Sound(nullptr)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=BasedPosition)"
  },
  {
    "label": "FBasedPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBasedPosition()"
  },
  {
    "label": "FBasedPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBasedPosition(class AActor *InBase, const FVector& InPosition)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "operator()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(class AActor* InBase, const FVector& InPosition)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FBasedPosition& T)"
  },
  {
    "label": "FRotationConversionCache()",
    "kind": "Method",
    "detail": "Function (} ; struct FRotationConversionCache {)",
    "insertText": "FRotationConversionCache()"
  },
  {
    "label": "RotatorToQuat()",
    "kind": "Method",
    "detail": "Function (} FQuat)",
    "insertText": "RotatorToQuat(const FRotator& InRotator)"
  },
  {
    "label": "GetOrCreatePayload()",
    "kind": "Method",
    "detail": "Function (FPayload& Payload =)",
    "insertText": "GetOrCreatePayload()"
  },
  {
    "label": "GetNormalized()",
    "kind": "Method",
    "detail": "Function (Payload . CachedRotator = InRotator .)",
    "insertText": "GetNormalized()"
  },
  {
    "label": "Quaternion()",
    "kind": "Method",
    "detail": "Function (Payload . CachedQuat = Payload . CachedRotator .)",
    "insertText": "Quaternion()"
  },
  {
    "label": "RotatorToQuat_ReadOnly()",
    "kind": "Method",
    "detail": "Function (} return Payload . CachedQuat ; } FQuat)",
    "insertText": "RotatorToQuat_ReadOnly(const FRotator& InRotator)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FPayload& Payload =* PayloadPtr ;)",
    "insertText": "if(LIKELY(Payload.CachedRotator == InRotator))"
  },
  {
    "label": "QuatToRotator()",
    "kind": "Method",
    "detail": "Function (} FRotator)",
    "insertText": "QuatToRotator(const FQuat& InQuat)"
  },
  {
    "label": "Rotator()",
    "kind": "Method",
    "detail": "Function (Payload . CachedRotator = Payload . CachedQuat .)",
    "insertText": "Rotator()"
  },
  {
    "label": "QuatToRotator_ReadOnly()",
    "kind": "Method",
    "detail": "Function (} return Payload . CachedRotator ; } FRotator)",
    "insertText": "QuatToRotator_ReadOnly(const FQuat& InQuat)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FPayload& Payload =* PayloadPtr ;)",
    "insertText": "if(LIKELY(Payload.CachedQuat == InQuat))"
  },
  {
    "label": "NormalizedQuatToRotator()",
    "kind": "Method",
    "detail": "Function (} FRotator)",
    "insertText": "NormalizedQuatToRotator(const FQuat& InNormalizedQuat)"
  },
  {
    "label": "NormalizedQuatToRotator_ReadOnly()",
    "kind": "Method",
    "detail": "Function (} return Payload . CachedRotator ; } FRotator)",
    "insertText": "NormalizedQuatToRotator_ReadOnly(const FQuat& InNormalizedQuat)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FPayload& Payload =* PayloadPtr ;)",
    "insertText": "if(LIKELY(Payload.CachedQuat == InNormalizedQuat))"
  },
  {
    "label": "GetCachedQuat()",
    "kind": "Method",
    "detail": "Function (} FQuat)",
    "insertText": "GetCachedQuat()"
  },
  {
    "label": "GetCachedRotator()",
    "kind": "Method",
    "detail": "Function (Payload . CachedRotator = Other .)",
    "insertText": "GetCachedRotator()"
  },
  {
    "label": "FPayload()",
    "kind": "Method",
    "detail": "Function (} return* this ; } private : struct FPayload { FQuat CachedQuat ; FRotator CachedRotator ;)",
    "insertText": "FPayload() : CachedQuat(FQuat::Identity) , CachedRotator(FRotator::ZeroRotator)"
  },
  {
    "label": "FPayload()",
    "kind": "Method",
    "detail": "Function (PayloadPtr = MakeUnique<)",
    "insertText": "FPayload()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, Category=SubtitleCue)"
  },
  {
    "label": "FSubtitleCue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSubtitleCue() : Time(0)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category=Lightmass, meta=(UIMin = \"0.0\", UIMax = \"4.0\"))"
  },
  {
    "label": "FLightmassLightSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLightmassLightSettings() : IndirectLightingSaturation(1.0f) , ShadowExponent(2.0f) , bUseAreaShadowsForStationaryLight(false)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category=Lightmass, meta=(UIMin = \".0001\", UIMax = \"5\"))"
  },
  {
    "label": "FLightmassDirectionalLightSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLightmassDirectionalLightSettings() : LightSourceAngle(1.0f)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category=Lightmass)"
  },
  {
    "label": "FLightmassPrimitiveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLightmassPrimitiveSettings()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bUseTwoSidedLighting = false ; bShadowIndirectOnly = false ; bUseEmissiveForStaticLighting = false ; bUseVertexNormalForHemisphereGather = false ; EmissiveLightFalloffExponent = 8 . 0 f ; EmissiveLightExplicitInfluenceRadius = 0 . 0 f ; EmissiveBoost = 1 . 0 f ; DiffuseBoost = 1 . 0 f ; FullyOccludedSamplesFraction = 1 . 0 f ; } bool)",
    "insertText": "operator(const FLightmassPrimitiveSettings& A, const FLightmassPrimitiveSettings& B)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category=LightmassDebugOptions)"
  },
  {
    "label": "FLightmassDebugOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLightmassDebugOptions()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category=SwarmDebugOptions)"
  },
  {
    "label": "FSwarmDebugOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSwarmDebugOptions() : bDistributionEnabled(true) , bForceContentExport(false) , bInitialized(false)"
  },
  {
    "label": "Touch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Touch()"
  },
  {
    "label": "TeleportFlagToEnum()",
    "kind": "Method",
    "detail": "Function (None,TeleportPhysics,ResetPhysics,} ; ETeleportType)",
    "insertText": "TeleportFlagToEnum(bool bTeleport)"
  },
  {
    "label": "FMTDResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMTDResult()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(FMTDResult))"
  },
  {
    "label": "FAnimSlotDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimSlotDesc() : NumChannels(0)"
  },
  {
    "label": "FAnimUpdateRateParameters()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimUpdateRateParameters() : OptimizeMode(TrailMode) , ShiftBucket(EUpdateRateShiftBucket::ShiftBucket0) , bInterpolateSkippedFrames(false) , bShouldUseLodMap(false) , bShouldUseMinLod(false) , bSkipUpdate(false) , bSkipEvaluation(false) , UpdateRate(1) , EvaluationRate(1) , TickedPoseOffestTime(0.f) , AdditionalTime(0.f) , ThisTickDelta(0.f) , BaseNonRenderedUpdateRate(4) , MaxEvalRateForInterpolation(4) , SkippedUpdateFrames(0) , SkippedEvalFrames(0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BaseVisibleDistanceFactorThesholds .)",
    "insertText": "Add(0.24f)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BaseVisibleDistanceFactorThesholds .)",
    "insertText": "Add(0.12f)"
  },
  {
    "label": "SetTrailMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTrailMode(float DeltaTime, uint8 UpdateRateShift, int32 NewUpdateRate, int32 NewEvaluationRate, bool bNewInterpSkippedFrames)"
  },
  {
    "label": "SetLookAheadMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLookAheadMode(float DeltaTime, uint8 UpdateRateShift, float LookAheadAmount)"
  },
  {
    "label": "GetInterpolationAlpha()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInterpolationAlpha()"
  },
  {
    "label": "GetRootMotionInterp()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRootMotionInterp()"
  },
  {
    "label": "DoEvaluationRateOptimizations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoEvaluationRateOptimizations()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=POV)"
  },
  {
    "label": "FPOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPOV() : Location(ForceInit),Rotation(ForceInit), FOV(90.0f)"
  },
  {
    "label": "FPOV()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPOV(FVector InLocation, FRotator InRotation, float InFOV) : Location(InLocation), Rotation(InRotation), FOV(InFOV)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FPOV& POV)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=BuildSettings)"
  },
  {
    "label": "FMeshBuildSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshBuildSettings() : bUseMikkTSpace(true) , bRecomputeNormals(true) , bRecomputeTangents(true) , bComputeWeightedNormals(false) , bRemoveDegenerates(true) , bBuildReversedIndexBuffer(true) , bUseHighPrecisionTangentBasis(false) , bUseFullPrecisionUVs(false) , bUseBackwardsCompatibleF16TruncUVs(false) , bGenerateLightmapUVs(true) , bGenerateDistanceFieldAsIfTwoSided(false) , bSupportFaceRemap(false) , MinLightmapResolution(64) , SrcLightmapIndex(0) , DstLightmapIndex(1) , BuildScale_DEPRECATED(1.0f) , BuildScale3D(1.0f, 1.0f, 1.0f) , DistanceFieldResolutionScale(1.0f) #if WITH_EDITORONLY_DATA , DistanceFieldBias_DEPRECATED(0.0f) #endif , DistanceFieldReplacementMesh(nullptr) , MaxLumenMeshCards(12)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMeshBuildSettings& Other)"
  },
  {
    "label": "FSkeletalMeshBuildSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSkeletalMeshBuildSettings() : bRecomputeNormals(true) , bRecomputeTangents(true) , bUseMikkTSpace(true) , bComputeWeightedNormals(false) , bRemoveDegenerates(true) , bUseHighPrecisionTangentBasis(false) , bUseHighPrecisionSkinWeights(false) , bUseFullPrecisionUVs(false) , bUseBackwardsCompatibleF16TruncUVs(false) , ThresholdPosition(0.00002f) , ThresholdTangentNormal(0.00002f) , ThresholdUV(0.0009765625f) , MorphThresholdPosition(0.015f) , BoneInfluenceLimit(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSkeletalMeshBuildSettings& Other)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = Displacement)"
  },
  {
    "label": "FMeshDisplacementMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshDisplacementMap()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMeshDisplacementMap& Other)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = NaniteSettings)"
  },
  {
    "label": "FMeshNaniteSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshNaniteSettings() : bEnabled(false) , bPreserveArea(false) , bExplicitTangents(false) , bLerpUVs(true)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMeshNaniteSettings& Other)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Displacement, meta = (NoSpinbox = true, ClampMin = \"0.0\", UIMin = \"0.0\"))"
  },
  {
    "label": "FDisplacementScaling()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FDisplacementScaling() : Magnitude(4.0f) , Center(0.5f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FDisplacementScaling& Other)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Displacement, meta = (DisplayName=\"Start Fade Size (Pixels)\", NoSpinbox=true, ClampMin=\"0.0001\", UIMin=\"0.0001\"))"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (public : FDisplacementFadeRange)",
    "insertText": "Invalid()"
  },
  {
    "label": "FDisplacementFadeRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDisplacementFadeRange() : StartSizePixels(4.0f) , EndSizePixels(1.0f)"
  },
  {
    "label": "FDisplacementFadeRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDisplacementFadeRange(float InStartSizePixels, float InEndSizePixels) : StartSizePixels(InStartSizePixels) , EndSizePixels(InEndSizePixels)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FDisplacementFadeRange& Other)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (ROLE_None)",
    "insertText": "UMETA(DisplayName = \"None\"), ROLE_SimulatedProxy UMETA(DisplayName = \"Simulated Proxy\"), ROLE_AutonomousProxy UMETA(DisplayName = \"Autonomous Proxy\"), ROLE_Authority UMETA(DisplayName = \"Authority\"), ROLE_MAX UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Default)",
    "insertText": "UMETA(DisplayName = \"Default\"), PredictiveInterpolation UMETA(DisplayName = \"Predictive Interpolation (WIP)\"), Resimulation UMETA(DisplayName = \"Resimulation (WIP)\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (WalkableSlope_Default)",
    "insertText": "UMETA(DisplayName=\"Unchanged\"), WalkableSlope_Increase UMETA(DisplayName=\"Increase Walkable Slope\"), WalkableSlope_Decrease UMETA(DisplayName=\"Decrease Walkable Slope\"), WalkableSlope_Unwalkable UMETA(DisplayName=\"Unwalkable\"), WalkableSlope_Max UMETA(Hidden)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=WalkableSlopeOverride)"
  },
  {
    "label": "FWalkableSlopeOverride()",
    "kind": "Method",
    "detail": "Function (private : float CachedSlopeAngle ; float CachedSlopeCos ; public :)",
    "insertText": "FWalkableSlopeOverride() : WalkableSlopeBehavior(WalkableSlope_Default) , WalkableSlopeAngle(0.f) , CachedSlopeAngle(0.f) , CachedSlopeCos(1.f)"
  },
  {
    "label": "FWalkableSlopeOverride()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWalkableSlopeOverride(EWalkableSlopeBehavior NewSlopeBehavior, float NewSlopeAngle) : WalkableSlopeBehavior(NewSlopeBehavior) , WalkableSlopeAngle(NewSlopeAngle) , CachedSlopeAngle(0.f) , CachedSlopeCos(1.f)"
  },
  {
    "label": "GetWalkableSlopeBehavior()",
    "kind": "Method",
    "detail": "Function (} EWalkableSlopeBehavior)",
    "insertText": "GetWalkableSlopeBehavior()"
  },
  {
    "label": "SetWalkableSlopeAngle()",
    "kind": "Method",
    "detail": "Function (WalkableSlopeBehavior = NewSlopeBehavior ; } void)",
    "insertText": "SetWalkableSlopeAngle(float NewSlopeAngle)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (WalkableSlopeAngle =)",
    "insertText": "Clamp(NewSlopeAngle, 0.f, 90.f)"
  },
  {
    "label": "ModifyWalkableFloorZ()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ModifyWalkableFloorZ(float InWalkableFloorZ)"
  },
  {
    "label": "CheckCachedData()",
    "kind": "Method",
    "detail": "Function (} case WalkableSlope_Decrease : {)",
    "insertText": "CheckCachedData()"
  },
  {
    "label": "DegreesToRadians()",
    "kind": "Method",
    "detail": "Function (const float AngleRads =)",
    "insertText": "DegreesToRadians(WalkableSlopeAngle)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (CachedSlopeCos =)",
    "insertText": "Clamp(FMath::Cos(AngleRads), 0.f, 1.f)"
  },
  {
    "label": "FReplicationFlags()",
    "kind": "Method",
    "detail": "Function (CachedSlopeAngle = WalkableSlopeAngle ; } } } ; template<> struct TIsPODType<FWalkableSlopeOverride> { enum { Value = true } ; } ; struct FReplicationFlags { union { struct { uint32 bNetOwner : 1 ; uint32 bNetInitial : 1 ; uint32 bNetSimulated : 1 ; uint32 bRepPhysics : 1 ; uint32 bReplay : 1 ; uint32 bIgnoreRPCs : 1 ; uint32 bSkipRoleSwap : 1 ; uint32 bRolesOnly : 1 ; uint32 bForceInitialDirty : 1 ; uint32 bSerializePropertyNames : 1 ; uint32 bUseCustomSubobjectReplication : 1 ; uint32 bClientReplay : 1 ; uint32 Padding0 : 4 ; uint32 CondDynamicChangeCounter : 1 6 ; } ; uint32 Value ; } ;)",
    "insertText": "FReplicationFlags()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (Value = 0 ; } } ;)",
    "insertText": "static_assert(sizeof(FReplicationFlags) == 4, \"FReplicationFlags has invalid size.\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category=Constraint)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FBaseComponentReference()"
  },
  {
    "label": "ExtractComponent()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<class UActorComponent> OverrideComponent ; class UActorComponent*)",
    "insertText": "ExtractComponent(AActor* SearchActor)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FBaseComponentReference& Other)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FComponentReference() : OtherActor(nullptr)"
  },
  {
    "label": "GetComponent()",
    "kind": "Method",
    "detail": "Function (class UActorComponent*)",
    "insertText": "GetComponent(AActor* OwningActor)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FComponentReference& Other)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FSoftComponentReference() : OtherActor(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSoftComponentReference& Other)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SerializeFromMismatchedTag(const FPropertyTag& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (enum Type : int {,Stationary,Movable } ; })",
    "insertText": "UCLASS(abstract, config=Engine, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: static ENGINE_API ECollisionChannel ConvertToCollisionChannel(ETraceTypeQuery TraceType)"
  },
  {
    "label": "ConvertToCollisionChannel()",
    "kind": "Method",
    "detail": "Function (ECollisionChannel)",
    "insertText": "ConvertToCollisionChannel(EObjectTypeQuery ObjectType)"
  },
  {
    "label": "ConvertToObjectType()",
    "kind": "Method",
    "detail": "Function (EObjectTypeQuery)",
    "insertText": "ConvertToObjectType(ECollisionChannel CollisionChannel)"
  },
  {
    "label": "ConvertToTraceType()",
    "kind": "Method",
    "detail": "Function (ETraceTypeQuery)",
    "insertText": "ConvertToTraceType(ECollisionChannel CollisionChannel)"
  },
  {
    "label": "FComponentSocketDescription()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Invalid,Bone,Socket,} ; } struct FComponentSocketDescription { FName Name ; TEnumAsByte<EComponentSocketType::Type> Type ;)",
    "insertText": "FComponentSocketDescription() : Name(NAME_None) , Type(EComponentSocketType::Invalid)"
  },
  {
    "label": "FComponentSocketDescription()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FComponentSocketDescription(FName SocketName, EComponentSocketType::Type SocketType) : Name(SocketName) , Type(SocketType)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FConstraintBrokenSignature, int32, ConstraintIndex)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FPlasticDeformationEventSignature, int32, ConstraintIndex)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=CollectionReference)"
  },
  {
    "label": "FRedirector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRedirector() : OldName(NAME_None) , NewName(NAME_None)"
  },
  {
    "label": "FRedirector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRedirector(FName InOldName, FName InNewName) : OldName(InOldName) , NewName(InNewName)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() private: UPROPERTY(Transient)"
  },
  {
    "label": "FDebugFloatHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDebugFloatHistory() : MaxSamples(100) , MinValue(0.f) , MaxValue(0.f) , bAutoAdjustMinMax(true)"
  },
  {
    "label": "FDebugFloatHistory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDebugFloatHistory(int32 const & InMaxSamples, float const & InMinValue, float const & InMaxValue, bool const & InbAutoAdjustMinMax) : MaxSamples(InMaxSamples) , MinValue(InMinValue) , MaxValue(InMaxValue) , bAutoAdjustMinMax(InbAutoAdjustMinMax)"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSample(float const & FloatValue)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (MinValue =)",
    "insertText": "Min(MinValue, FloatValue)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxValue =)",
    "insertText": "Max(MaxValue, FloatValue)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Samples .)",
    "insertText": "Insert(FloatValue, 0)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} else { Samples .)",
    "insertText": "Insert(FMath::Clamp(FloatValue, MinValue, MaxValue), 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Samples.Num() > MaxSamples)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Samples .)",
    "insertText": "RemoveAt(MaxSamples, Samples.Num() - MaxSamples)"
  },
  {
    "label": "GetMinMaxRange()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "GetMinMaxRange()"
  },
  {
    "label": "GetMinValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetMinValue()"
  },
  {
    "label": "GetSamples()",
    "kind": "Method",
    "detail": "Function (} TArray<float> const&)",
    "insertText": "GetSamples()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(BlueprintReadWrite, Category=\"Glow\")"
  },
  {
    "label": "FDepthFieldGlowInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDepthFieldGlowInfo() : bEnableGlow(false) , GlowColor(ForceInit) , GlowOuterRadius(ForceInit) , GlowInnerRadius(ForceInit)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FDepthFieldGlowInfo& Other)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(BlueprintReadWrite, Category=\"FontInfo\")"
  },
  {
    "label": "FFontRenderInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFontRenderInfo() : bClipText(false), bEnableShadow(false)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = CanvasUVTri)"
  },
  {
    "label": "FCanvasUVTri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCanvasUVTri() : V0_Pos(ForceInit) , V0_UV(ForceInit) , V0_Color(ForceInit) , V1_Pos(ForceInit) , V1_UV(ForceInit) , V1_Color(ForceInit) , V2_Pos(ForceInit) , V2_UV(ForceInit) , V2_Color(ForceInit)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Undefined)",
    "insertText": "UMETA(DisplayName = \"Default\"), AlwaysSpawn UMETA(DisplayName = \"Always Spawn, Ignore Collisions\"), AdjustIfPossibleButAlwaysSpawn UMETA(DisplayName = \"Try To Adjust Location, But Always Spawn\"), AdjustIfPossibleButDontSpawnIfColliding UMETA(DisplayName = \"Try To Adjust Location, Don't Spawn If Still Colliding\"), DontSpawnIfColliding UMETA(DisplayName = \"Do Not Spawn\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(BlueprintReadWrite, Category = \"Activity\")"
  },
  {
    "label": "FUserActivity()",
    "kind": "Method",
    "detail": "Function (EUserActivityContext Context ;)",
    "insertText": "FUserActivity() : Context(EUserActivityContext::Game)"
  },
  {
    "label": "FUserActivity()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUserActivity(const FString& InActionName) : ActionName(InActionName) , Context(EUserActivityContext::Game)"
  },
  {
    "label": "FUserActivity()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUserActivity(const FString& InActionName, EUserActivityContext InContext) : ActionName(InActionName) , Context(InContext)"
  },
  {
    "label": "SerializeNaniteSettingsForDDC()",
    "kind": "Method",
    "detail": "Function (Default,ForceCPUAndGPU } ; enum class ELevelCollectionType : uint8 { DynamicSourceLevels,DynamicDuplicatedLevels,StaticLevels,MAX } ; # if WITH_EDITOR void)",
    "insertText": "SerializeNaniteSettingsForDDC(FArchive& Ar, FMeshNaniteSettings& NaniteSettings, bool bIsNaniteForceEnabled)"
  }
]