[
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFCLIENT_BROWSER_TEST_RUNNER_H_ # define CEF_TESTS_CEFCLIENT_BROWSER_TEST_RUNNER_H_ # pragma once # include<set> # include<string> # include \" include / cef_browser . h \" # include \" include / cef_request . h \" # include \" include / wrapper / cef_message_router . h \" # include \" include / wrapper / cef_resource_manager . h \" namespace client { namespace test_runner { void)",
    "insertText": "RunTest(CefRefPtr<CefBrowser> browser, int id)"
  },
  {
    "label": "DumpRequestContents()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "DumpRequestContents(CefRefPtr<CefRequest> request)"
  },
  {
    "label": "GetDumpResponse()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefStreamReader>)",
    "insertText": "GetDumpResponse(CefRefPtr<CefRequest> request, CefResponse::HeaderMap& response_headers)"
  },
  {
    "label": "GetDataURI()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetDataURI(const std::string& data, const std::string& mime_type)"
  },
  {
    "label": "GetErrorString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetErrorString(cef_errorcode_t code)"
  },
  {
    "label": "SetupResourceManager()",
    "kind": "Method",
    "detail": "Function (typedef std::map<std::string,std::string> StringResourceMap ; void)",
    "insertText": "SetupResourceManager(CefRefPtr<CefResourceManager> resource_manager, StringResourceMap* string_resource_map)"
  },
  {
    "label": "Alert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Alert(CefRefPtr<CefBrowser> browser, const std::string& message)"
  },
  {
    "label": "IsTestURL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTestURL(const std::string& url, const std::string& path)"
  },
  {
    "label": "CreateMessageHandlers()",
    "kind": "Method",
    "detail": "Function (typedef std::set<CefMessageRouterBrowserSide::Handler*> MessageHandlerSet ; void)",
    "insertText": "CreateMessageHandlers(MessageHandlerSet& handlers)"
  },
  {
    "label": "RegisterSchemeHandlers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSchemeHandlers()"
  },
  {
    "label": "GetResourceResponseFilter()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefResponseFilter>)",
    "insertText": "GetResourceResponseFilter(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, CefRefPtr<CefResponse> response)"
  }
]